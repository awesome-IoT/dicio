
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026c  00800200  000079e4  00007a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000079e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000130e  0080046c  0080046c  00007ce4  2**0
                  ALLOC
  3 .stab         00018090  00000000  00000000  00007ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000aa7a  00000000  00000000  0001fd74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0002a7ee  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0002a7ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0002b95f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0002c9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  0002c9ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__ctors_end>
       4:	0c 94 56 35 	jmp	0x6aac	; 0x6aac <__vector_1>
       8:	0c 94 88 35 	jmp	0x6b10	; 0x6b10 <__vector_2>
       c:	0c 94 ba 35 	jmp	0x6b74	; 0x6b74 <__vector_3>
      10:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      14:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      18:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      1c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      20:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      24:	0c 94 24 35 	jmp	0x6a48	; 0x6a48 <__vector_9>
      28:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      2c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      30:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      34:	0c 94 83 33 	jmp	0x6706	; 0x6706 <__vector_13>
      38:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      3c:	0c 94 83 33 	jmp	0x6706	; 0x6706 <__vector_13>
      40:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      44:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      48:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      4c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      50:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      54:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      58:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      5c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      60:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      64:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__vector_25>
      68:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      6c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      70:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      74:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      78:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      7c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      80:	0c 94 b6 33 	jmp	0x676c	; 0x676c <__vector_32>
      84:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      88:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      8c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      90:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      94:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      98:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      9c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      a0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      a4:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      a8:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      ac:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      b0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      b4:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      b8:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      bc:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      c0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      c4:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      c8:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      cc:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      d0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      d4:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      d8:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      dc:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      e0:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
      e4:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <__vector_57>
      e8:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <__vector_58>
      ec:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__vector_59>
      f0:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__vector_60>
      f4:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__vector_61>
      f8:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__vector_62>
      fc:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__vector_63>
     100:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__vector_64>
     104:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
     108:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
     10c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
     110:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
     114:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
     118:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
     11c:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__bad_interrupt>
     120:	17 1d       	adc	r17, r7
     122:	24 1d       	adc	r18, r4
     124:	31 1d       	adc	r19, r1
     126:	3e 1d       	adc	r19, r14
     128:	4b 1d       	adc	r20, r11
     12a:	58 1d       	adc	r21, r8
     12c:	65 1d       	adc	r22, r5
     12e:	88 1d       	adc	r24, r8
     130:	96 1d       	adc	r25, r6
     132:	a4 1d       	adc	r26, r4
     134:	b2 1d       	adc	r27, r2
     136:	c0 1d       	adc	r28, r0
     138:	ce 1d       	adc	r28, r14
     13a:	ce 1d       	adc	r28, r14
     13c:	f1 1d       	adc	r31, r1
     13e:	f3 1d       	adc	r31, r3
     140:	f5 1d       	adc	r31, r5
     142:	f7 1d       	adc	r31, r7
     144:	f9 1d       	adc	r31, r9
     146:	fb 1d       	adc	r31, r11
     148:	fd 1d       	adc	r31, r13
     14a:	1c 1e       	adc	r1, r28
     14c:	3f 1e       	adc	r3, r31
     14e:	63 1e       	adc	r6, r19
     150:	86 1e       	adc	r8, r22
     152:	a9 1e       	adc	r10, r25
     154:	cc 1e       	adc	r12, r28
     156:	ef 1e       	adc	r14, r31
     158:	29 1f       	adc	r18, r25
     15a:	36 1f       	adc	r19, r22
     15c:	43 1f       	adc	r20, r19
     15e:	50 1f       	adc	r21, r16
     160:	5d 1f       	adc	r21, r29
     162:	6a 1f       	adc	r22, r26
     164:	77 1f       	adc	r23, r23
     166:	90 1f       	adc	r25, r16
     168:	9d 1f       	adc	r25, r29
     16a:	aa 1f       	adc	r26, r26
     16c:	b7 1f       	adc	r27, r23
     16e:	c4 1f       	adc	r28, r20
     170:	d1 1f       	adc	r29, r17
     172:	de 1f       	adc	r29, r30
     174:	58 23       	and	r21, r24
     176:	5e 23       	and	r21, r30
     178:	61 23       	and	r22, r17
     17a:	64 23       	and	r22, r20
     17c:	67 23       	and	r22, r23
     17e:	6a 23       	and	r22, r26
     180:	70 23       	and	r23, r16
     182:	6d 23       	and	r22, r29
     184:	73 23       	and	r23, r19
     186:	76 23       	and	r23, r22
     188:	79 23       	and	r23, r25
     18a:	82 23       	and	r24, r18
     18c:	85 23       	and	r24, r21
     18e:	88 23       	and	r24, r24
     190:	8b 23       	and	r24, r27
     192:	7f 23       	and	r23, r31
     194:	55 23       	and	r21, r21
     196:	5b 23       	and	r21, r27
     198:	8e 23       	and	r24, r30
     19a:	91 23       	and	r25, r17
     19c:	7c 23       	and	r23, r28
     19e:	52 23       	and	r21, r18
     1a0:	28 24       	eor	r2, r8
     1a2:	2b 24       	eor	r2, r11
     1a4:	36 24       	eor	r3, r6
     1a6:	3b 24       	eor	r3, r11
     1a8:	42 24       	eor	r4, r2
     1aa:	4b 24       	eor	r4, r11
     1ac:	4e 24       	eor	r4, r14
     1ae:	53 24       	eor	r5, r3
     1b0:	5a 24       	eor	r5, r10
     1b2:	63 24       	eor	r6, r3

000001b4 <__trampolines_end>:
     1b4:	43 72       	andi	r20, 0x23	; 35
     1b6:	65 61       	ori	r22, 0x15	; 21
     1b8:	74 65       	ori	r23, 0x54	; 84
     1ba:	20 64       	ori	r18, 0x40	; 64
     1bc:	6f 6e       	ori	r22, 0xEF	; 239
     1be:	65 2e       	mov	r6, r21
     1c0:	0d 0a       	sbc	r0, r29
	...

000001c3 <__c.3873>:
     1c3:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     1d3:	72 72 6f 72 0d 0a 00                                rror...

000001da <__c.3855>:
     1da:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     1ea:	72 72 6f 72 0d 0a 00                                rror...

000001f1 <__c.3833>:
     1f1:	70 61 63 6b 65 74 20 66 6f 72 20 6d 65 21 0d 0a     packet for me!..
	...

00000202 <__c.3830>:
     202:	72 78 20 70 6b 74 3a 0d 0a 00                       rx pkt:...

0000020c <__c.3762>:
     20c:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     21c:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

00000228 <__c.3736>:
     228:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     238:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     248:	0d 0a 00                                            ...

0000024b <__c.3734>:
     24b:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     25b:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     26b:	74 0d 0a 00                                         t...

0000026f <__c.3718>:
     26f:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     27f:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     28f:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

0000029b <__c.3716>:
     29b:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2ab:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     2bb:	61 69 6c 65 64 0d 0a 00                             ailed...

000002c3 <__c.3714>:
     2c3:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2d3:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     2e3:	61 69 6c 65 64 0d 0a 00                             ailed...

000002eb <__c.3723>:
     2eb:	0d 0a 43 75 72 72 65 6e 74 20 4c 69 67 68 74 20     ..Current Light 
     2fb:	56 61 6c 75 65 73 3a 0d 0a 00                       Values:...

00000305 <__c.3769>:
     305:	0d 0a 4e 65 69 67 68 62 6f 72 20 47 72 61 70 68     ..Neighbor Graph
     315:	3a 0d 0a 00                                         :...

00000319 <__c.3125>:
     319:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     329:	65 64 0d 0a 00                                      ed...

0000032e <__c.3381>:
     32e:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000335 <__c.3378>:
     335:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000344 <__c.3375>:
     344:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000355 <__c.3372>:
     355:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     365:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000370 <__c.3369>:
     370:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     380:	20 53 69 67 6e 61 6c 00                              Signal.

00000388 <__c.3366>:
     388:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     398:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000003a8 <__c.3363>:
     3a8:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     3b8:	72 6f 72 00                                         ror.

000003bc <__c.3360>:
     3bc:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000003cd <__c.3357>:
     3cd:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     3dd:	61 72 74 00                                         art.

000003e1 <__c.3354>:
     3e1:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000003f0 <__c.3351>:
     3f0:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     400:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000040b <__c.3348>:
     40b:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000417 <__c.3345>:
     417:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     427:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     437:	20 6f 6b 3f 00                                       ok?.

0000043c <__c.3342>:
     43c:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     44c:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000045a <__c.3339>:
     45a:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     46a:	72 74 00                                            rt.

0000046d <__c.3336>:
     46d:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     47d:	49 44 00                                            ID.

00000480 <__c.3333>:
     480:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     490:	20 57 61 6b 65 75 70 00                              Wakeup.

00000498 <__c.3330>:
     498:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     4a8:	6c 61 74 65 64 00                                   lated.

000004ae <__c.3327>:
     4ae:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     4be:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000004c9 <__c.3324>:
     4c9:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     4d9:	69 6e 74 65 72 00                                   inter.

000004df <__c.3321>:
     4df:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     4ef:	6c 6f 77 00                                         low.

000004f3 <__c.3318>:
     4f3:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     503:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     513:	6e 6f 75 67 68 21 00                                nough!.

0000051a <__c.3314>:
     51a:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     52a:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     53a:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     54a:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000556 <__c.3311>:
     556:	29 3a 20 00                                         ): .

0000055a <__c.3309>:
     55a:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000566 <__c.3246>:
     566:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000575 <__c.2228>:
     575:	45 46 47 65 66 67 00                                EFGefg.

0000057c <__c.2222>:
     57c:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000058c <__ctors_end>:
     58c:	11 24       	eor	r1, r1
     58e:	1f be       	out	0x3f, r1	; 63
     590:	cf ef       	ldi	r28, 0xFF	; 255
     592:	d1 e4       	ldi	r29, 0x41	; 65
     594:	de bf       	out	0x3e, r29	; 62
     596:	cd bf       	out	0x3d, r28	; 61

00000598 <__do_copy_data>:
     598:	14 e0       	ldi	r17, 0x04	; 4
     59a:	a0 e0       	ldi	r26, 0x00	; 0
     59c:	b2 e0       	ldi	r27, 0x02	; 2
     59e:	e4 ee       	ldi	r30, 0xE4	; 228
     5a0:	f9 e7       	ldi	r31, 0x79	; 121
     5a2:	00 e0       	ldi	r16, 0x00	; 0
     5a4:	0b bf       	out	0x3b, r16	; 59
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__do_copy_data+0x14>
     5a8:	07 90       	elpm	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	ac 36       	cpi	r26, 0x6C	; 108
     5ae:	b1 07       	cpc	r27, r17
     5b0:	d9 f7       	brne	.-10     	; 0x5a8 <__do_copy_data+0x10>

000005b2 <__do_clear_bss>:
     5b2:	17 e1       	ldi	r17, 0x17	; 23
     5b4:	ac e6       	ldi	r26, 0x6C	; 108
     5b6:	b4 e0       	ldi	r27, 0x04	; 4
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <.do_clear_bss_start>

000005ba <.do_clear_bss_loop>:
     5ba:	1d 92       	st	X+, r1

000005bc <.do_clear_bss_start>:
     5bc:	aa 37       	cpi	r26, 0x7A	; 122
     5be:	b1 07       	cpc	r27, r17
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <.do_clear_bss_loop>
     5c2:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <main>
     5c6:	0c 94 f0 3c 	jmp	0x79e0	; 0x79e0 <_exit>

000005ca <__bad_interrupt>:
     5ca:	0c 94 79 33 	jmp	0x66f2	; 0x66f2 <__vector_default>

000005ce <rx_msg_task>:

/**
 * rx_msg_task() - 
 *  receive messages from the network
 */
void rx_msg_task() {
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	63 97       	sbiw	r28, 0x13	; 19
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
  int8_t in_seq_pool;
  uint16_t local_seq_num;
  uint8_t new_node = NONE;

  // initialize network receive buffer
  bmac_rx_pkt_set_buffer(net_rx_buf, RF_MAX_PAYLOAD_SIZE);
     5e2:	64 e7       	ldi	r22, 0x74	; 116
     5e4:	81 e8       	ldi	r24, 0x81	; 129
     5e6:	92 e1       	ldi	r25, 0x12	; 18
     5e8:	0e 94 25 08 	call	0x104a	; 0x104a <bmac_rx_pkt_set_buffer>
  
  // Wait until bmac has started. This should be called by all tasks using bmac that do not call bmac_init()
  while (!bmac_started ()) {
     5ec:	0e 94 87 09 	call	0x130e	; 0x130e <bmac_started>
     5f0:	81 11       	cpse	r24, r1
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <rx_msg_task+0x2c>
    nrk_wait_until_next_period ();
     5f4:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
     5f8:	f9 cf       	rjmp	.-14     	; 0x5ec <rx_msg_task+0x1e>
     5fa:	10 e0       	ldi	r17, 0x00	; 0
  }
  
  // loop forever
  while(1) {
    // LED blinking - for debug
    if(blink_leds == BLINKLEDS) {
     5fc:	80 91 bd 0d 	lds	r24, 0x0DBD
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	79 f4       	brne	.+30     	; 0x622 <rx_msg_task+0x54>
      LED_FLAG++;
     604:	81 0f       	add	r24, r17
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     606:	18 2f       	mov	r17, r24
     608:	11 70       	andi	r17, 0x01	; 1
     60a:	80 fd       	sbrc	r24, 0
     60c:	05 c0       	rjmp	.+10     	; 0x618 <rx_msg_task+0x4a>
        nrk_led_set(0);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 26 20 	call	0x404c	; 0x404c <nrk_led_set>
     616:	05 c0       	rjmp	.+10     	; 0x622 <rx_msg_task+0x54>
      } else {
        nrk_led_clr(0);
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
     620:	11 e0       	ldi	r17, 0x01	; 1
      }      
    }

    // only execute if there is a packet available
    if(bmac_rx_pkt_ready()) {
     622:	0e 94 2d 09 	call	0x125a	; 0x125a <bmac_rx_pkt_ready>
     626:	88 23       	and	r24, r24
     628:	09 f4       	brne	.+2      	; 0x62c <rx_msg_task+0x5e>
     62a:	ad c0       	rjmp	.+346    	; 0x786 <rx_msg_task+0x1b8>
      // get the packet, parse and release
      parse_msg(&rx_packet, &net_rx_buf, len);
     62c:	4b 89       	ldd	r20, Y+19	; 0x13
     62e:	61 e8       	ldi	r22, 0x81	; 129
     630:	72 e1       	ldi	r23, 0x12	; 18
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	0e 94 d7 14 	call	0x29ae	; 0x29ae <parse_msg>
      local_buf = bmac_rx_pkt_get(&len, &rssi);
     63a:	be 01       	movw	r22, r28
     63c:	6e 5e       	subi	r22, 0xEE	; 238
     63e:	7f 4f       	sbci	r23, 0xFF	; 255
     640:	ce 01       	movw	r24, r28
     642:	43 96       	adiw	r24, 0x13	; 19
     644:	0e 94 15 09 	call	0x122a	; 0x122a <bmac_rx_pkt_get>
      bmac_rx_pkt_release ();  
     648:	0e 94 33 09 	call	0x1266	; 0x1266 <bmac_rx_pkt_release>
      
      // print incoming packet if appropriate
      if(print_incoming == 1) {
     64c:	80 91 ab 0b 	lds	r24, 0x0BAB
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	41 f4       	brne	.+16     	; 0x664 <rx_msg_task+0x96>
        nrk_kprintf (PSTR ("rx pkt:\r\n"));
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
        print_packet(&rx_packet);     
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	0e 94 ed 13 	call	0x27da	; 0x27da <print_packet>
      }
      
      // only receive the message if it's not from the gateway
      //  NOTE: this is required because the gateway will hear re-transmitted packets 
      //    originally from itself.
      if(rx_packet.source_id != MAC_ADDR) {
     664:	69 81       	ldd	r22, Y+1	; 0x01
     666:	62 30       	cpi	r22, 0x02	; 2
     668:	09 f4       	brne	.+2      	; 0x66c <rx_msg_task+0x9e>
     66a:	8d c0       	rjmp	.+282    	; 0x786 <rx_msg_task+0x1b8>

        // check to see if this node is in the sequence pool, if not then add it
        in_seq_pool = in_sequence_pool(&seq_pool, rx_packet.source_id);
     66c:	8c ee       	ldi	r24, 0xEC	; 236
     66e:	9f e0       	ldi	r25, 0x0F	; 15
     670:	0e 94 33 15 	call	0x2a66	; 0x2a66 <in_sequence_pool>
        if(in_seq_pool == -1) {
     674:	8f 3f       	cpi	r24, 0xFF	; 255
     676:	49 f4       	brne	.+18     	; 0x68a <rx_msg_task+0xbc>
          add_to_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     678:	4b 81       	ldd	r20, Y+3	; 0x03
     67a:	5c 81       	ldd	r21, Y+4	; 0x04
     67c:	69 81       	ldd	r22, Y+1	; 0x01
     67e:	8c ee       	ldi	r24, 0xEC	; 236
     680:	9f e0       	ldi	r25, 0x0F	; 15
     682:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <add_to_sequence_pool>
          new_node = NODE_FOUND;
     686:	01 e0       	ldi	r16, 0x01	; 1
     688:	01 c0       	rjmp	.+2      	; 0x68c <rx_msg_task+0xbe>
     68a:	00 e0       	ldi	r16, 0x00	; 0
        }
      
        // determine if we should act on this packet based on the sequence number
        local_seq_num = get_sequence_number(&seq_pool, rx_packet.source_id);
     68c:	69 81       	ldd	r22, Y+1	; 0x01
     68e:	8c ee       	ldi	r24, 0xEC	; 236
     690:	9f e0       	ldi	r25, 0x0F	; 15
     692:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <get_sequence_number>
        if((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND)) {
     696:	4b 81       	ldd	r20, Y+3	; 0x03
     698:	5c 81       	ldd	r21, Y+4	; 0x04
     69a:	84 17       	cp	r24, r20
     69c:	95 07       	cpc	r25, r21
     69e:	18 f0       	brcs	.+6      	; 0x6a6 <rx_msg_task+0xd8>
     6a0:	01 30       	cpi	r16, 0x01	; 1
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <rx_msg_task+0xd8>
     6a4:	70 c0       	rjmp	.+224    	; 0x786 <rx_msg_task+0x1b8>
          
          // update the sequence pool and reset the new_node flag
          update_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     6a6:	69 81       	ldd	r22, Y+1	; 0x01
     6a8:	8c ee       	ldi	r24, 0xEC	; 236
     6aa:	9f e0       	ldi	r25, 0x0F	; 15
     6ac:	0e 94 90 15 	call	0x2b20	; 0x2b20 <update_sequence_pool>
          new_node = NONE;
          
          // put the message in the right queue based on the type
          switch(rx_packet.type) {
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	86 30       	cpi	r24, 0x06	; 6
     6b4:	69 f1       	breq	.+90     	; 0x710 <rx_msg_task+0x142>
     6b6:	a8 f4       	brcc	.+42     	; 0x6e2 <rx_msg_task+0x114>
     6b8:	85 30       	cpi	r24, 0x05	; 5
     6ba:	09 f0       	breq	.+2      	; 0x6be <rx_msg_task+0xf0>
     6bc:	64 c0       	rjmp	.+200    	; 0x786 <rx_msg_task+0x1b8>
              push(&cmd_tx_queue, &rx_packet);
              nrk_sem_post(cmd_tx_queue_mux);
              break;
            // data received or command ack received -> forward to server
            case MSG_DATA:
              nrk_sem_pend(data_tx_queue_mux);
     6be:	80 91 6c 05 	lds	r24, 0x056C
     6c2:	90 91 6d 05 	lds	r25, 0x056D
     6c6:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
              push(&data_tx_queue, &rx_packet);
     6ca:	be 01       	movw	r22, r28
     6cc:	6f 5f       	subi	r22, 0xFF	; 255
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	9b e0       	ldi	r25, 0x0B	; 11
     6d4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <push>
              nrk_sem_post(data_tx_queue_mux);
     6d8:	80 91 6c 05 	lds	r24, 0x056C
     6dc:	90 91 6d 05 	lds	r25, 0x056D
     6e0:	50 c0       	rjmp	.+160    	; 0x782 <rx_msg_task+0x1b4>
          // update the sequence pool and reset the new_node flag
          update_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
          new_node = NONE;
          
          // put the message in the right queue based on the type
          switch(rx_packet.type) {
     6e2:	87 30       	cpi	r24, 0x07	; 7
     6e4:	e9 f1       	breq	.+122    	; 0x760 <rx_msg_task+0x192>
     6e6:	88 30       	cpi	r24, 0x08	; 8
     6e8:	09 f0       	breq	.+2      	; 0x6ec <rx_msg_task+0x11e>
     6ea:	4d c0       	rjmp	.+154    	; 0x786 <rx_msg_task+0x1b8>
              push(&data_tx_queue, &rx_packet);
              nrk_sem_post(data_tx_queue_mux);
              break;
            // handshake message recieved -> deal with in handshake function
            case MSG_HAND:
              nrk_sem_pend(hand_rx_queue_mux);
     6ec:	80 91 ba 0b 	lds	r24, 0x0BBA
     6f0:	90 91 bb 0b 	lds	r25, 0x0BBB
     6f4:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
              push(&hand_rx_queue, &rx_packet);
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	84 e9       	ldi	r24, 0x94	; 148
     700:	97 e0       	ldi	r25, 0x07	; 7
     702:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <push>
              nrk_sem_post(hand_rx_queue_mux);
     706:	80 91 ba 0b 	lds	r24, 0x0BBA
     70a:	90 91 bb 0b 	lds	r25, 0x0BBB
     70e:	39 c0       	rjmp	.+114    	; 0x782 <rx_msg_task+0x1b4>
              
              if command is for this node and hasn't been received yet, add it
              to the action queue. Otherwise, add it to the cmd_tx queue for 
              forwarding to other nodes.
                */
              if((last_command < (uint16_t)rx_packet.payload[CMD_ID_INDEX]) &&
     710:	8a 85       	ldd	r24, Y+10	; 0x0a
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	20 91 6e 04 	lds	r18, 0x046E
     718:	30 91 6f 04 	lds	r19, 0x046F
     71c:	28 17       	cp	r18, r24
     71e:	39 07       	cpc	r19, r25
     720:	f8 f4       	brcc	.+62     	; 0x760 <rx_msg_task+0x192>
     722:	8c 85       	ldd	r24, Y+12	; 0x0c
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	e1 f4       	brne	.+56     	; 0x760 <rx_msg_task+0x192>
                  (rx_packet.payload[CMD_NODE_ID_INDEX] == MAC_ADDR)) 
              {
                nrk_kprintf (PSTR ("packet for me!\r\n"));
     728:	81 ef       	ldi	r24, 0xF1	; 241
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
                last_command = (uint16_t)rx_packet.payload[CMD_ID_INDEX]; // need to cast again here right?
     730:	8a 85       	ldd	r24, Y+10	; 0x0a
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	90 93 6f 04 	sts	0x046F, r25
     738:	80 93 6e 04 	sts	0x046E, r24
                nrk_sem_pend(act_queue_mux);
     73c:	80 91 aa 0a 	lds	r24, 0x0AAA
     740:	90 91 ab 0a 	lds	r25, 0x0AAB
     744:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
                push(&act_queue, &rx_packet);
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	8f e1       	ldi	r24, 0x1F	; 31
     750:	98 e0       	ldi	r25, 0x08	; 8
     752:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <push>
                nrk_sem_post(act_queue_mux);
     756:	80 91 aa 0a 	lds	r24, 0x0AAA
     75a:	90 91 ab 0a 	lds	r25, 0x0AAB
     75e:	11 c0       	rjmp	.+34     	; 0x782 <rx_msg_task+0x1b4>
              }
              break;
            }
            // command act received -- forward to the server
            case MSG_CMDACK:
              nrk_sem_pend(cmd_tx_queue_mux);
     760:	80 91 6f 07 	lds	r24, 0x076F
     764:	90 91 70 07 	lds	r25, 0x0770
     768:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
              push(&cmd_tx_queue, &rx_packet);
     76c:	be 01       	movw	r22, r28
     76e:	6f 5f       	subi	r22, 0xFF	; 255
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	86 ef       	ldi	r24, 0xF6	; 246
     774:	91 e1       	ldi	r25, 0x11	; 17
     776:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <push>
              nrk_sem_post(cmd_tx_queue_mux);
     77a:	80 91 6f 07 	lds	r24, 0x076F
     77e:	90 91 70 07 	lds	r25, 0x0770
              break;
            // handshake message recieved -> deal with in handshake function
            case MSG_HAND:
              nrk_sem_pend(hand_rx_queue_mux);
              push(&hand_rx_queue, &rx_packet);
              nrk_sem_post(hand_rx_queue_mux);
     782:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
              break;
          }
        }        
      }
    }
    nrk_wait_until_next_period();
     786:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
  }
     78a:	38 cf       	rjmp	.-400    	; 0x5fc <rx_msg_task+0x2e>

0000078c <sample_task>:

/**
 * sample_task() -
 *  sample any sensors that are supposed to be sampled.
 */
void sample_task() {
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	61 97       	sbiw	r28, 0x11	; 17
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
  uint16_t local_temp_val = 0;
  uint16_t local_light_val = 0;
  packet tx_packet;

  // initialize sensor packet
  sensor_pkt.pwr_val = local_pwr_val;
     7a0:	10 92 e5 0f 	sts	0x0FE5, r1
     7a4:	10 92 e4 0f 	sts	0x0FE4, r1
  sensor_pkt.temp_val = local_temp_val;
     7a8:	10 92 e7 0f 	sts	0x0FE7, r1
     7ac:	10 92 e6 0f 	sts	0x0FE6, r1
  sensor_pkt.light_val = local_light_val;
     7b0:	10 92 e9 0f 	sts	0x0FE9, r1
     7b4:	10 92 e8 0f 	sts	0x0FE8, r1

  // initialize tx_packet
  tx_packet.source_id = MAC_ADDR;
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	89 83       	std	Y+1, r24	; 0x01
  tx_packet.type = MSG_DATA;
     7bc:	85 e0       	ldi	r24, 0x05	; 5
     7be:	8a 83       	std	Y+2, r24	; 0x02
  tx_packet.num_hops = 0;
     7c0:	1d 82       	std	Y+5, r1	; 0x05
  uint8_t temp_period_count = 0;
  uint8_t light_period_count = 0;
  uint8_t sensor_sampled = FALSE;
  uint16_t local_pwr_val = 0;
  uint16_t local_temp_val = 0;
  uint16_t local_light_val = 0;
     7c2:	81 2c       	mov	r8, r1
     7c4:	91 2c       	mov	r9, r1
  uint8_t pwr_period_count = 0;
  uint8_t temp_period_count = 0;
  uint8_t light_period_count = 0;
  uint8_t sensor_sampled = FALSE;
  uint16_t local_pwr_val = 0;
  uint16_t local_temp_val = 0;
     7c6:	a1 2c       	mov	r10, r1
     7c8:	b1 2c       	mov	r11, r1
  uint8_t LED_FLAG = 0;
  uint8_t pwr_period_count = 0;
  uint8_t temp_period_count = 0;
  uint8_t light_period_count = 0;
  uint8_t sensor_sampled = FALSE;
  uint16_t local_pwr_val = 0;
     7ca:	c1 2c       	mov	r12, r1
     7cc:	d1 2c       	mov	r13, r1
void sample_task() {
  // local variable instantiation
  uint8_t LED_FLAG = 0;
  uint8_t pwr_period_count = 0;
  uint8_t temp_period_count = 0;
  uint8_t light_period_count = 0;
     7ce:	00 e0       	ldi	r16, 0x00	; 0
 */
void sample_task() {
  // local variable instantiation
  uint8_t LED_FLAG = 0;
  uint8_t pwr_period_count = 0;
  uint8_t temp_period_count = 0;
     7d0:	f1 2c       	mov	r15, r1
 *  sample any sensors that are supposed to be sampled.
 */
void sample_task() {
  // local variable instantiation
  uint8_t LED_FLAG = 0;
  uint8_t pwr_period_count = 0;
     7d2:	10 e0       	ldi	r17, 0x00	; 0
 * sample_task() -
 *  sample any sensors that are supposed to be sampled.
 */
void sample_task() {
  // local variable instantiation
  uint8_t LED_FLAG = 0;
     7d4:	e1 2c       	mov	r14, r1
  tx_packet.num_hops = 0;

  // loop forever
  while(1) {
    // LED blinking - for debug
    if(blink_leds == BLINKLEDS) {
     7d6:	80 91 bd 0d 	lds	r24, 0x0DBD
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	61 f4       	brne	.+24     	; 0x7f6 <sample_task+0x6a>
      LED_FLAG++;
     7de:	8e 0d       	add	r24, r14
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     7e0:	98 2f       	mov	r25, r24
     7e2:	91 70       	andi	r25, 0x01	; 1
     7e4:	e9 2e       	mov	r14, r25
     7e6:	80 ff       	sbrs	r24, 0
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <sample_task+0x6a>
        //nrk_led_set(2);
      } else {
        nrk_led_clr(2);
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
     7f2:	ee 24       	eor	r14, r14
     7f4:	e3 94       	inc	r14
      }      
    }

    // update period counts
    pwr_period_count++;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	81 0f       	add	r24, r17
    temp_period_count++;
     7fa:	f3 94       	inc	r15
    light_period_count++;
     7fc:	0f 5f       	subi	r16, 0xFF	; 255
    pwr_period_count %= pwr_period;
     7fe:	60 91 e1 0d 	lds	r22, 0x0DE1
     802:	0e 94 b2 38 	call	0x7164	; 0x7164 <__udivmodqi4>
     806:	19 2f       	mov	r17, r25
    temp_period_count %= temp_period;
     808:	60 91 ac 0b 	lds	r22, 0x0BAC
     80c:	8f 2d       	mov	r24, r15
     80e:	0e 94 b2 38 	call	0x7164	; 0x7164 <__udivmodqi4>
     812:	39 2f       	mov	r19, r25
     814:	f9 2e       	mov	r15, r25
    light_period_count %= light_period;
     816:	60 91 b9 0b 	lds	r22, 0x0BB9
     81a:	80 2f       	mov	r24, r16
     81c:	0e 94 b2 38 	call	0x7164	; 0x7164 <__udivmodqi4>
     820:	09 2f       	mov	r16, r25

    // sample power sensor if appropriate
    if(pwr_period_count == SAMPLE_SENSOR) {
     822:	11 11       	cpse	r17, r1
     824:	09 c0       	rjmp	.+18     	; 0x838 <sample_task+0xac>
      //TODO: SAMPLE POWER SENSOR
      local_pwr_val++;
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	c8 1a       	sub	r12, r24
     82a:	d8 0a       	sbc	r13, r24
      sensor_pkt.pwr_val = local_pwr_val;
     82c:	d0 92 e5 0f 	sts	0x0FE5, r13
     830:	c0 92 e4 0f 	sts	0x0FE4, r12
      sensor_sampled = TRUE;
     834:	21 e0       	ldi	r18, 0x01	; 1
     836:	01 c0       	rjmp	.+2      	; 0x83a <sample_task+0xae>
     838:	20 e0       	ldi	r18, 0x00	; 0
      pwr_period_count = 0;
    }

    // sample temperature sensor if appropriate
    if(temp_period_count == SAMPLE_SENSOR) {
     83a:	31 11       	cpse	r19, r1
     83c:	0a c0       	rjmp	.+20     	; 0x852 <sample_task+0xc6>
      //TODO: SAMPLE TEMP SENSOR
      local_temp_val++;
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	a8 1a       	sub	r10, r24
     842:	b8 0a       	sbc	r11, r24
      sensor_pkt.temp_val = local_temp_val;
     844:	b0 92 e7 0f 	sts	0x0FE7, r11
     848:	a0 92 e6 0f 	sts	0x0FE6, r10
      sensor_sampled = TRUE;
      temp_period_count = 0;
    }

    // sample light sensor if appropriate
    if(light_period_count == SAMPLE_SENSOR) {
     84c:	99 23       	and	r25, r25
     84e:	19 f0       	breq	.+6      	; 0x856 <sample_task+0xca>
     850:	0d c0       	rjmp	.+26     	; 0x86c <sample_task+0xe0>
     852:	91 11       	cpse	r25, r1
     854:	09 c0       	rjmp	.+18     	; 0x868 <sample_task+0xdc>
      //TODO: SAMPLE LIGHT SENSOR
      local_light_val++;
     856:	9f ef       	ldi	r25, 0xFF	; 255
     858:	89 1a       	sub	r8, r25
     85a:	99 0a       	sbc	r9, r25
      sensor_pkt.light_val = local_light_val;
     85c:	90 92 e9 0f 	sts	0x0FE9, r9
     860:	80 92 e8 0f 	sts	0x0FE8, r8
      sensor_sampled = TRUE;
      light_period_count = 0;
     864:	00 e0       	ldi	r16, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <sample_task+0xe0>
    }

    // if a sensor has been sampled, send a packet out
    if(sensor_sampled == TRUE) {
     868:	21 30       	cpi	r18, 0x01	; 1
     86a:	99 f5       	brne	.+102    	; 0x8d2 <sample_task+0x146>
      // update sequence number
      nrk_sem_post(seq_num_mux);
     86c:	80 91 ea 0f 	lds	r24, 0x0FEA
     870:	90 91 eb 0f 	lds	r25, 0x0FEB
     874:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
      seq_num++;
     878:	80 91 6c 04 	lds	r24, 0x046C
     87c:	90 91 6d 04 	lds	r25, 0x046D
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 6d 04 	sts	0x046D, r25
     886:	80 93 6c 04 	sts	0x046C, r24
      tx_packet.seq_num = seq_num;
     88a:	9c 83       	std	Y+4, r25	; 0x04
     88c:	8b 83       	std	Y+3, r24	; 0x03
      nrk_sem_pend(seq_num_mux);
     88e:	80 91 ea 0f 	lds	r24, 0x0FEA
     892:	90 91 eb 0f 	lds	r25, 0x0FEB
     896:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>

      // add data values to sensor packet
      tx_packet.payload[DATA_PWR_INDEX] = sensor_pkt.pwr_val;
     89a:	80 91 e4 0f 	lds	r24, 0x0FE4
     89e:	8a 87       	std	Y+10, r24	; 0x0a
      tx_packet.payload[DATA_TEMP_INDEX] = sensor_pkt.temp_val;
     8a0:	80 91 e6 0f 	lds	r24, 0x0FE6
     8a4:	8c 87       	std	Y+12, r24	; 0x0c
      tx_packet.payload[DATA_LIGHT_INDEX] = sensor_pkt.light_val;
     8a6:	80 91 e8 0f 	lds	r24, 0x0FE8
     8aa:	8e 87       	std	Y+14, r24	; 0x0e
      // add packet to data queue
      //nrk_sem_pend(data_tx_queue_mux);
      //push(&data_tx_queue, &tx_packet);
      //nrk_sem_post(data_tx_queue_mux);

      nrk_sem_pend(cmd_tx_queue_mux);
     8ac:	80 91 6f 07 	lds	r24, 0x076F
     8b0:	90 91 70 07 	lds	r25, 0x0770
     8b4:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
      push(&cmd_tx_queue, &tx_packet);
     8b8:	be 01       	movw	r22, r28
     8ba:	6f 5f       	subi	r22, 0xFF	; 255
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	86 ef       	ldi	r24, 0xF6	; 246
     8c0:	91 e1       	ldi	r25, 0x11	; 17
     8c2:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <push>
      nrk_sem_post(data_tx_queue_mux);
     8c6:	80 91 6c 05 	lds	r24, 0x056C
     8ca:	90 91 6d 05 	lds	r25, 0x056D
     8ce:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>

      // reset FLAG
      sensor_sampled = FALSE;
    }
    nrk_wait_until_next_period();
     8d2:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
  }
     8d6:	7f cf       	rjmp	.-258    	; 0x7d6 <sample_task+0x4a>

000008d8 <actuate_task>:

/**
 * actuate_task() - 
 *  actuate any commands that have been received for this node.
 */
void actuate_task() {
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	a2 97       	sbiw	r28, 0x22	; 34
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
  uint8_t act_queue_size;
  packet act_packet, tx_packet;
  uint8_t action, ack_required, act_required; 

  // initialize tx_packet
  tx_packet.source_id = MAC_ADDR;
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	89 83       	std	Y+1, r24	; 0x01
  tx_packet.type = MSG_CMDACK;
     8f0:	87 e0       	ldi	r24, 0x07	; 7
     8f2:	8a 83       	std	Y+2, r24	; 0x02
  tx_packet.num_hops = 0;
     8f4:	1d 82       	std	Y+5, r1	; 0x05
 * actuate_task() - 
 *  actuate any commands that have been received for this node.
 */
void actuate_task() {
  // local variable instantiation
  uint8_t LED_FLAG = 0;
     8f6:	00 e0       	ldi	r16, 0x00	; 0
        tx_packet.payload[CMDACK_ID_INDEX] = act_packet.payload[CMD_ID_INDEX];

        // place message in the queue
        nrk_sem_pend(cmd_tx_queue_mux);
        push(&cmd_tx_queue, &tx_packet);
        nrk_sem_post(cmd_tx_queue_mux);
     8f8:	dd 24       	eor	r13, r13
     8fa:	d3 94       	inc	r13
  tx_packet.num_hops = 0;

  // loop forever
  while(1) {
    // LEDs for debug
    if(blink_leds == BLINKLEDS) {
     8fc:	80 91 bd 0d 	lds	r24, 0x0DBD
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	51 f4       	brne	.+20     	; 0x918 <actuate_task+0x40>
      LED_FLAG++;
     904:	80 0f       	add	r24, r16
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     906:	08 2f       	mov	r16, r24
     908:	01 70       	andi	r16, 0x01	; 1
     90a:	80 ff       	sbrs	r24, 0
     90c:	05 c0       	rjmp	.+10     	; 0x918 <actuate_task+0x40>
        //nrk_led_set(1);
      } else {
        nrk_led_clr(1);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
     916:	01 e0       	ldi	r16, 0x01	; 1
      }   
    }

    // get action queue size
    nrk_sem_post(act_queue_mux);
     918:	80 91 aa 0a 	lds	r24, 0x0AAA
     91c:	90 91 ab 0a 	lds	r25, 0x0AAB
     920:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
    act_queue_size = act_queue.size;
     924:	e0 90 a9 08 	lds	r14, 0x08A9
    nrk_sem_pend(act_queue_mux);
     928:	80 91 aa 0a 	lds	r24, 0x0AAA
     92c:	90 91 ab 0a 	lds	r25, 0x0AAB
     930:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < act_queue_size; i++) {
     934:	f1 2c       	mov	r15, r1
     936:	fe 14       	cp	r15, r14
     938:	09 f4       	brne	.+2      	; 0x93c <actuate_task+0x64>
     93a:	62 c0       	rjmp	.+196    	; 0xa00 <actuate_task+0x128>
      // get packet out of the queue
      nrk_sem_post(act_queue_mux);
     93c:	80 91 aa 0a 	lds	r24, 0x0AAA
     940:	90 91 ab 0a 	lds	r25, 0x0AAB
     944:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
      pop(&act_queue, &act_packet);
     948:	be 01       	movw	r22, r28
     94a:	6e 5e       	subi	r22, 0xEE	; 238
     94c:	7f 4f       	sbci	r23, 0xFF	; 255
     94e:	8f e1       	ldi	r24, 0x1F	; 31
     950:	98 e0       	ldi	r25, 0x08	; 8
     952:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <pop>
      nrk_sem_pend(act_queue_mux); 
     956:	80 91 aa 0a 	lds	r24, 0x0AAA
     95a:	90 91 ab 0a 	lds	r25, 0x0AAB
     95e:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>

      // pull action out of packet
      action = act_packet.payload[CMD_ACT_INDEX];
     962:	8e 8d       	ldd	r24, Y+30	; 0x1e

      // switch on current state
      switch(curr_state) {
     964:	90 91 00 02 	lds	r25, 0x0200
     968:	99 23       	and	r25, r25
     96a:	19 f0       	breq	.+6      	; 0x972 <actuate_task+0x9a>
     96c:	91 30       	cpi	r25, 0x01	; 1
     96e:	71 f0       	breq	.+28     	; 0x98c <actuate_task+0xb4>
     970:	14 c0       	rjmp	.+40     	; 0x99a <actuate_task+0xc2>
        // STATE_ON - actuate if required / acknowledge if required
        case STATE_ON:
          // action ON received -> ack but don't act
          if(action == ON) {
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	19 f4       	brne	.+6      	; 0x97c <actuate_task+0xa4>
            ack_required = TRUE;
            act_required = FALSE;
            curr_state = STATE_ON;
     976:	10 92 00 02 	sts	0x0200, r1
     97a:	11 c0       	rjmp	.+34     	; 0x99e <actuate_task+0xc6>
          } 
          // action OFF received -> ack and act
          else if(action == OFF) {
     97c:	81 11       	cpse	r24, r1
     97e:	03 c0       	rjmp	.+6      	; 0x986 <actuate_task+0xae>
            ack_required = TRUE;
            act_required = TRUE;
            curr_state = STATE_OFF;
     980:	d0 92 00 02 	sts	0x0200, r13
     984:	0c c0       	rjmp	.+24     	; 0x99e <actuate_task+0xc6>
          } 
          // this should never happen, but -> don't ack and don't act
          else {
            ack_required = FALSE;
            act_required = FALSE;
            curr_state = STATE_ON;
     986:	10 92 00 02 	sts	0x0200, r1
     98a:	37 c0       	rjmp	.+110    	; 0x9fa <actuate_task+0x122>
          }
          break;        
        // STATE_OFF - actuate if required / acknowledge if required
        case STATE_OFF:
          // action OFF received -> ack but don't act
          if(action == OFF) {
     98c:	88 23       	and	r24, r24
     98e:	c1 f3       	breq	.-16     	; 0x980 <actuate_task+0xa8>
            ack_required = TRUE;
            act_required = FALSE;
            curr_state = STATE_OFF;
          } 
          // action ON received -> ack and act
          else if(action == ON) {
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	89 f3       	breq	.-30     	; 0x976 <actuate_task+0x9e>
          } 
          // this should never happen, but -> don't ack and don't act
          else {
            ack_required = FALSE;
            act_required = FALSE;
            curr_state = STATE_OFF;
     994:	90 93 00 02 	sts	0x0200, r25
     998:	30 c0       	rjmp	.+96     	; 0x9fa <actuate_task+0x122>
        // dummy operation so the compiler doesn't yell.
        i = i;
      }

      // acknowledge required -> add ack packet to cmd_tx_queue
      if(ack_required == TRUE) {
     99a:	11 30       	cpi	r17, 0x01	; 1
     99c:	71 f5       	brne	.+92     	; 0x9fa <actuate_task+0x122>
        // update sequence number
        nrk_sem_pend(seq_num_mux);
     99e:	80 91 ea 0f 	lds	r24, 0x0FEA
     9a2:	90 91 eb 0f 	lds	r25, 0x0FEB
     9a6:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
        seq_num++;
     9aa:	80 91 6c 04 	lds	r24, 0x046C
     9ae:	90 91 6d 04 	lds	r25, 0x046D
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	90 93 6d 04 	sts	0x046D, r25
     9b8:	80 93 6c 04 	sts	0x046C, r24
        tx_packet.seq_num = seq_num;
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
        nrk_sem_post(seq_num_mux);
     9c0:	80 91 ea 0f 	lds	r24, 0x0FEA
     9c4:	90 91 eb 0f 	lds	r25, 0x0FEB
     9c8:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>

        // set payload
        tx_packet.payload[CMDACK_ID_INDEX] = act_packet.payload[CMD_ID_INDEX];
     9cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9ce:	8a 87       	std	Y+10, r24	; 0x0a

        // place message in the queue
        nrk_sem_pend(cmd_tx_queue_mux);
     9d0:	80 91 6f 07 	lds	r24, 0x076F
     9d4:	90 91 70 07 	lds	r25, 0x0770
     9d8:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
        push(&cmd_tx_queue, &tx_packet);
     9dc:	be 01       	movw	r22, r28
     9de:	6f 5f       	subi	r22, 0xFF	; 255
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	86 ef       	ldi	r24, 0xF6	; 246
     9e4:	91 e1       	ldi	r25, 0x11	; 17
     9e6:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <push>
        nrk_sem_post(cmd_tx_queue_mux);
     9ea:	80 91 6f 07 	lds	r24, 0x076F
     9ee:	90 91 70 07 	lds	r25, 0x0770
     9f2:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
     9f6:	11 e0       	ldi	r17, 0x01	; 1
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <actuate_task+0x124>
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < act_queue_size; i++) {
     9fc:	f3 94       	inc	r15
     9fe:	9b cf       	rjmp	.-202    	; 0x936 <actuate_task+0x5e>
        nrk_sem_pend(cmd_tx_queue_mux);
        push(&cmd_tx_queue, &tx_packet);
        nrk_sem_post(cmd_tx_queue_mux);
      }
    }
    nrk_wait_until_next_period();
     a00:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
  }
     a04:	7b cf       	rjmp	.-266    	; 0x8fc <actuate_task+0x24>

00000a06 <clear_tx_buf>:
  nrk_start();
  return 0;
}

void clear_tx_buf(){
  for(uint8_t i = 0; i < net_tx_index; i++)
     a06:	80 91 70 04 	lds	r24, 0x0470
     a0a:	2c ea       	ldi	r18, 0xAC	; 172
     a0c:	3a e0       	ldi	r19, 0x0A	; 10
     a0e:	f9 01       	movw	r30, r18
     a10:	9e 2f       	mov	r25, r30
     a12:	92 1b       	sub	r25, r18
     a14:	98 17       	cp	r25, r24
     a16:	10 f4       	brcc	.+4      	; 0xa1c <clear_tx_buf+0x16>
  {
    net_tx_buf[i] = 0;
     a18:	11 92       	st	Z+, r1
     a1a:	fa cf       	rjmp	.-12     	; 0xa10 <clear_tx_buf+0xa>
  }
  net_tx_index = 0;
     a1c:	10 92 70 04 	sts	0x0470, r1
     a20:	08 95       	ret

00000a22 <tx_cmd_task>:

/**
 * tx_cmd_task() -
 *  send all commands out to the network.
 */
void tx_cmd_task() {
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
     a2a:	61 97       	sbiw	r28, 0x11	; 17
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	f8 94       	cli
     a30:	de bf       	out	0x3e, r29	; 62
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	cd bf       	out	0x3d, r28	; 61
  packet tx_packet;
  uint8_t tx_cmd_queue_size;

  // Wait until bmac has started. This should be called by all tasks 
  //  using bmac that do not call bmac_init().
  while(!bmac_started()) {
     a36:	0e 94 87 09 	call	0x130e	; 0x130e <bmac_started>
     a3a:	81 11       	cpse	r24, r1
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <tx_cmd_task+0x22>
    nrk_wait_until_next_period();
     a3e:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
     a42:	f9 cf       	rjmp	.-14     	; 0xa36 <tx_cmd_task+0x14>
  }

  // Get and register the tx_done_signal to perform non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal();
     a44:	0e 94 c0 08 	call	0x1180	; 0x1180 <bmac_get_tx_done_signal>
     a48:	18 2f       	mov	r17, r24
  nrk_signal_register(tx_done_signal);
     a4a:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
      nrk_sem_pend(net_tx_buf_mux);
      net_tx_index = assemble_packet(&net_tx_buf, &tx_packet);

      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, net_tx_index);
      ret = nrk_event_wait (SIG(tx_done_signal));
     a4e:	c1 2c       	mov	r12, r1
     a50:	d1 2c       	mov	r13, r1
     a52:	76 01       	movw	r14, r12
     a54:	c3 94       	inc	r12
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <tx_cmd_task+0x3e>
     a58:	cc 0c       	add	r12, r12
     a5a:	dd 1c       	adc	r13, r13
     a5c:	ee 1c       	adc	r14, r14
     a5e:	ff 1c       	adc	r15, r15
     a60:	1a 95       	dec	r17
     a62:	d2 f7       	brpl	.-12     	; 0xa58 <tx_cmd_task+0x36>
      printf("tx pkt: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
        net_tx_buf[0],net_tx_buf[1],net_tx_buf[2],net_tx_buf[3],net_tx_buf[4],
        net_tx_buf[5],net_tx_buf[6],net_tx_buf[7],net_tx_buf[8],net_tx_buf[9]);
      
      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     a64:	81 2c       	mov	r8, r1
     a66:	91 2c       	mov	r9, r1
     a68:	54 01       	movw	r10, r8
     a6a:	83 94       	inc	r8
     a6c:	c1 14       	cp	r12, r1
     a6e:	d1 04       	cpc	r13, r1
     a70:	e1 04       	cpc	r14, r1
     a72:	f1 04       	cpc	r15, r1
     a74:	19 f0       	breq	.+6      	; 0xa7c <tx_cmd_task+0x5a>
     a76:	81 2c       	mov	r8, r1
     a78:	91 2c       	mov	r9, r1
     a7a:	54 01       	movw	r10, r8

      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, net_tx_index);
      ret = nrk_event_wait (SIG(tx_done_signal));

      printf("tx pkt: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
     a7c:	8c e5       	ldi	r24, 0x5C	; 92
     a7e:	28 2e       	mov	r2, r24
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	38 2e       	mov	r3, r24
        nrk_led_clr(1);
      }  */    
    }

    // atomically get the queue size
    nrk_sem_pend(cmd_tx_queue_mux);
     a84:	80 91 6f 07 	lds	r24, 0x076F
     a88:	90 91 70 07 	lds	r25, 0x0770
     a8c:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
      tx_cmd_queue_size = cmd_tx_queue.size;
     a90:	00 91 80 12 	lds	r16, 0x1280
    nrk_sem_post(cmd_tx_queue_mux);
     a94:	80 91 6f 07 	lds	r24, 0x076F
     a98:	90 91 70 07 	lds	r25, 0x0770
     a9c:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_cmd_queue_size; i++) {
     aa0:	10 e0       	ldi	r17, 0x00	; 0
     aa2:	10 17       	cp	r17, r16
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <tx_cmd_task+0x86>
     aa6:	74 c0       	rjmp	.+232    	; 0xb90 <tx_cmd_task+0x16e>
      // get a packet out of the queue.
      nrk_sem_pend(cmd_tx_queue_mux);
     aa8:	80 91 6f 07 	lds	r24, 0x076F
     aac:	90 91 70 07 	lds	r25, 0x0770
     ab0:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
      pop(&cmd_tx_queue, &tx_packet);
     ab4:	be 01       	movw	r22, r28
     ab6:	6f 5f       	subi	r22, 0xFF	; 255
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	86 ef       	ldi	r24, 0xF6	; 246
     abc:	91 e1       	ldi	r25, 0x11	; 17
     abe:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <pop>
      nrk_sem_post(cmd_tx_queue_mux);
     ac2:	80 91 6f 07 	lds	r24, 0x076F
     ac6:	90 91 70 07 	lds	r25, 0x0770
     aca:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>

      // NOTE: a mutex is required around the network transmit buffer because 
      //  tx_cmd_task() also uses it.
      nrk_sem_pend(net_tx_buf_mux);
     ace:	80 91 49 15 	lds	r24, 0x1549
     ad2:	90 91 4a 15 	lds	r25, 0x154A
     ad6:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
      net_tx_index = assemble_packet(&net_tx_buf, &tx_packet);
     ada:	be 01       	movw	r22, r28
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
     ae0:	8c ea       	ldi	r24, 0xAC	; 172
     ae2:	9a e0       	ldi	r25, 0x0A	; 10
     ae4:	0e 94 99 11 	call	0x2332	; 0x2332 <assemble_packet>
     ae8:	80 93 70 04 	sts	0x0470, r24

      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, net_tx_index);
     aec:	68 2f       	mov	r22, r24
     aee:	8c ea       	ldi	r24, 0xAC	; 172
     af0:	9a e0       	ldi	r25, 0x0A	; 10
     af2:	0e 94 a8 08 	call	0x1150	; 0x1150 <bmac_tx_pkt_nonblocking>
      ret = nrk_event_wait (SIG(tx_done_signal));
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <nrk_event_wait>
     afe:	2b 01       	movw	r4, r22
     b00:	3c 01       	movw	r6, r24

      printf("tx pkt: %d,%d,%d,%d,%d,%d,%d,%d,%d,%d\r\n",
     b02:	80 91 b5 0a 	lds	r24, 0x0AB5
     b06:	1f 92       	push	r1
     b08:	8f 93       	push	r24
     b0a:	80 91 b4 0a 	lds	r24, 0x0AB4
     b0e:	1f 92       	push	r1
     b10:	8f 93       	push	r24
     b12:	80 91 b3 0a 	lds	r24, 0x0AB3
     b16:	1f 92       	push	r1
     b18:	8f 93       	push	r24
     b1a:	80 91 b2 0a 	lds	r24, 0x0AB2
     b1e:	1f 92       	push	r1
     b20:	8f 93       	push	r24
     b22:	80 91 b1 0a 	lds	r24, 0x0AB1
     b26:	1f 92       	push	r1
     b28:	8f 93       	push	r24
     b2a:	80 91 b0 0a 	lds	r24, 0x0AB0
     b2e:	1f 92       	push	r1
     b30:	8f 93       	push	r24
     b32:	80 91 af 0a 	lds	r24, 0x0AAF
     b36:	1f 92       	push	r1
     b38:	8f 93       	push	r24
     b3a:	80 91 ae 0a 	lds	r24, 0x0AAE
     b3e:	1f 92       	push	r1
     b40:	8f 93       	push	r24
     b42:	80 91 ad 0a 	lds	r24, 0x0AAD
     b46:	1f 92       	push	r1
     b48:	8f 93       	push	r24
     b4a:	80 91 ac 0a 	lds	r24, 0x0AAC
     b4e:	1f 92       	push	r1
     b50:	8f 93       	push	r24
     b52:	3f 92       	push	r3
     b54:	2f 92       	push	r2
     b56:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
        net_tx_buf[0],net_tx_buf[1],net_tx_buf[2],net_tx_buf[3],net_tx_buf[4],
        net_tx_buf[5],net_tx_buf[6],net_tx_buf[7],net_tx_buf[8],net_tx_buf[9]);
      
      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     b5a:	48 20       	and	r4, r8
     b5c:	59 20       	and	r5, r9
     b5e:	6a 20       	and	r6, r10
     b60:	7b 20       	and	r7, r11
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
     b6c:	45 28       	or	r4, r5
     b6e:	46 28       	or	r4, r6
     b70:	47 28       	or	r4, r7
     b72:	21 f0       	breq	.+8      	; 0xb7c <tx_cmd_task+0x15a>
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
     b74:	8a ed       	ldi	r24, 0xDA	; 218
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
      }
      clear_tx_buf();
     b7c:	0e 94 03 05 	call	0xa06	; 0xa06 <clear_tx_buf>
      nrk_sem_post(net_tx_buf_mux);     
     b80:	80 91 49 15 	lds	r24, 0x1549
     b84:	90 91 4a 15 	lds	r25, 0x154A
     b88:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_cmd_queue_size; i++) {
     b8c:	1f 5f       	subi	r17, 0xFF	; 255
     b8e:	89 cf       	rjmp	.-238    	; 0xaa2 <tx_cmd_task+0x80>
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
      }
      clear_tx_buf();
      nrk_sem_post(net_tx_buf_mux);     
    }
    nrk_wait_until_next_period();
     b90:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
  }
     b94:	77 cf       	rjmp	.-274    	; 0xa84 <tx_cmd_task+0x62>

00000b96 <tx_data_task>:

/**
 * tx_data_task() -
 *  send standard messages out to the network (i.e. handshake messages, etc.)
 */
void tx_data_task() {
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	61 97       	sbiw	r28, 0x11	; 17
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
  packet tx_packet;
  uint8_t tx_data_queue_size;

  // Wait until bmac has started. This should be called by all tasks 
  //  using bmac that do not call bmac_init().
  while(!bmac_started ()) {
     baa:	0e 94 87 09 	call	0x130e	; 0x130e <bmac_started>
     bae:	81 11       	cpse	r24, r1
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <tx_data_task+0x22>
    nrk_wait_until_next_period ();
     bb2:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
     bb6:	f9 cf       	rjmp	.-14     	; 0xbaa <tx_data_task+0x14>
  }

  // Get and register the tx_done_signal to perform non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal();
     bb8:	0e 94 c0 08 	call	0x1180	; 0x1180 <bmac_get_tx_done_signal>
     bbc:	18 2f       	mov	r17, r24
  nrk_signal_register(tx_done_signal);
     bbe:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
      nrk_sem_pend(net_tx_buf_mux);
      net_tx_index = assemble_packet(&net_tx_buf, &tx_packet);

      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, net_tx_index);
      ret = nrk_event_wait (SIG(tx_done_signal));
     bc2:	c1 2c       	mov	r12, r1
     bc4:	d1 2c       	mov	r13, r1
     bc6:	76 01       	movw	r14, r12
     bc8:	c3 94       	inc	r12
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <tx_data_task+0x3e>
     bcc:	cc 0c       	add	r12, r12
     bce:	dd 1c       	adc	r13, r13
     bd0:	ee 1c       	adc	r14, r14
     bd2:	ff 1c       	adc	r15, r15
     bd4:	1a 95       	dec	r17
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <tx_data_task+0x36>
        net_tx_buf[5],net_tx_buf[6],net_tx_buf[7],net_tx_buf[8],net_tx_buf[9]);*/

        //printf("index: %d\r\n", net_tx_index);

      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     bd8:	81 2c       	mov	r8, r1
     bda:	91 2c       	mov	r9, r1
     bdc:	54 01       	movw	r10, r8
     bde:	83 94       	inc	r8
     be0:	c1 14       	cp	r12, r1
     be2:	d1 04       	cpc	r13, r1
     be4:	e1 04       	cpc	r14, r1
     be6:	f1 04       	cpc	r15, r1
     be8:	19 f0       	breq	.+6      	; 0xbf0 <tx_data_task+0x5a>
     bea:	81 2c       	mov	r8, r1
     bec:	91 2c       	mov	r9, r1
     bee:	54 01       	movw	r10, r8
 * tx_data_task() -
 *  send standard messages out to the network (i.e. handshake messages, etc.)
 */
void tx_data_task() {
  // local variable initialization
  uint8_t LED_FLAG = 0;
     bf0:	10 e0       	ldi	r17, 0x00	; 0
  tx_done_signal = bmac_get_tx_done_signal();
  nrk_signal_register(tx_done_signal);
  
  while(1) {
    // LED blinking - for debug
    if(blink_leds == BLINKLEDS) {
     bf2:	80 91 bd 0d 	lds	r24, 0x0DBD
     bf6:	81 30       	cpi	r24, 0x01	; 1
     bf8:	79 f4       	brne	.+30     	; 0xc18 <tx_data_task+0x82>
      LED_FLAG++;
     bfa:	81 0f       	add	r24, r17
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     bfc:	18 2f       	mov	r17, r24
     bfe:	11 70       	andi	r17, 0x01	; 1
     c00:	80 fd       	sbrc	r24, 0
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <tx_data_task+0x78>
        nrk_led_set(3);
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 26 20 	call	0x404c	; 0x404c <nrk_led_set>
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <tx_data_task+0x82>
      } else {
        nrk_led_clr(3);
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
     c16:	11 e0       	ldi	r17, 0x01	; 1
      }      
    }
 
    // atomically get the queue size
    nrk_sem_pend(data_tx_queue_mux);
     c18:	80 91 6c 05 	lds	r24, 0x056C
     c1c:	90 91 6d 05 	lds	r25, 0x056D
     c20:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
      tx_data_queue_size = data_tx_queue.size;
     c24:	70 90 aa 0b 	lds	r7, 0x0BAA
    nrk_sem_post(data_tx_queue_mux);
     c28:	80 91 6c 05 	lds	r24, 0x056C
     c2c:	90 91 6d 05 	lds	r25, 0x056D
     c30:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_data_queue_size; i++) {
     c34:	00 e0       	ldi	r16, 0x00	; 0
     c36:	07 15       	cp	r16, r7
     c38:	09 f4       	brne	.+2      	; 0xc3c <tx_data_task+0xa6>
     c3a:	43 c0       	rjmp	.+134    	; 0xcc2 <tx_data_task+0x12c>
      // get a packet out of the queue.
      nrk_sem_pend(data_tx_queue_mux);
     c3c:	80 91 6c 05 	lds	r24, 0x056C
     c40:	90 91 6d 05 	lds	r25, 0x056D
     c44:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
     // printf("Q front:%d\r\n", data_tx_queue.front);// for debug
      pop(&data_tx_queue, &tx_packet);
     c48:	be 01       	movw	r22, r28
     c4a:	6f 5f       	subi	r22, 0xFF	; 255
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	80 e2       	ldi	r24, 0x20	; 32
     c50:	9b e0       	ldi	r25, 0x0B	; 11
     c52:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <pop>
      nrk_sem_post(data_tx_queue_mux);
     c56:	80 91 6c 05 	lds	r24, 0x056C
     c5a:	90 91 6d 05 	lds	r25, 0x056D
     c5e:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
        //print_packet(&tx_packet);
      }

      // NOTE: a mutex is required around the network transmit buffer because 
      //  tx_cmd_task() also uses it.
      nrk_sem_pend(net_tx_buf_mux);
     c62:	80 91 49 15 	lds	r24, 0x1549
     c66:	90 91 4a 15 	lds	r25, 0x154A
     c6a:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <nrk_sem_pend>
      net_tx_index = assemble_packet(&net_tx_buf, &tx_packet);
     c6e:	be 01       	movw	r22, r28
     c70:	6f 5f       	subi	r22, 0xFF	; 255
     c72:	7f 4f       	sbci	r23, 0xFF	; 255
     c74:	8c ea       	ldi	r24, 0xAC	; 172
     c76:	9a e0       	ldi	r25, 0x0A	; 10
     c78:	0e 94 99 11 	call	0x2332	; 0x2332 <assemble_packet>
     c7c:	80 93 70 04 	sts	0x0470, r24

      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, net_tx_index);
     c80:	68 2f       	mov	r22, r24
     c82:	8c ea       	ldi	r24, 0xAC	; 172
     c84:	9a e0       	ldi	r25, 0x0A	; 10
     c86:	0e 94 a8 08 	call	0x1150	; 0x1150 <bmac_tx_pkt_nonblocking>
      ret = nrk_event_wait (SIG(tx_done_signal));
     c8a:	c7 01       	movw	r24, r14
     c8c:	b6 01       	movw	r22, r12
     c8e:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <nrk_event_wait>
        net_tx_buf[5],net_tx_buf[6],net_tx_buf[7],net_tx_buf[8],net_tx_buf[9]);*/

        //printf("index: %d\r\n", net_tx_index);

      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	88 21       	and	r24, r8
     c98:	99 21       	and	r25, r9
     c9a:	aa 21       	and	r26, r10
     c9c:	bb 21       	and	r27, r11
     c9e:	89 2b       	or	r24, r25
     ca0:	8a 2b       	or	r24, r26
     ca2:	8b 2b       	or	r24, r27
     ca4:	21 f0       	breq	.+8      	; 0xcae <tx_data_task+0x118>
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
     ca6:	83 ec       	ldi	r24, 0xC3	; 195
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
      }
      clear_tx_buf();
     cae:	0e 94 03 05 	call	0xa06	; 0xa06 <clear_tx_buf>
      nrk_sem_post(net_tx_buf_mux);     
     cb2:	80 91 49 15 	lds	r24, 0x1549
     cb6:	90 91 4a 15 	lds	r25, 0x154A
     cba:	0e 94 00 28 	call	0x5000	; 0x5000 <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_data_queue_size; i++) {
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	ba cf       	rjmp	.-140    	; 0xc36 <tx_data_task+0xa0>
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
      }
      clear_tx_buf();
      nrk_sem_post(net_tx_buf_mux);     
    }
    nrk_wait_until_next_period();
     cc2:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
  }
     cc6:	95 cf       	rjmp	.-214    	; 0xbf2 <tx_data_task+0x5c>

00000cc8 <nrk_create_taskset>:
/**
 * nrk_create_taskset - create the tasks in this application
 * 
 * NOTE: task priority maps to importance. That is, priority(5) > priority(2).
 */
void nrk_create_taskset () {
     cc8:	4f 92       	push	r4
     cca:	5f 92       	push	r5
     ccc:	6f 92       	push	r6
     cce:	7f 92       	push	r7
     cd0:	8f 92       	push	r8
     cd2:	9f 92       	push	r9
     cd4:	af 92       	push	r10
     cd6:	bf 92       	push	r11
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
  // PRIORITY 5
  RX_MSG_TASK.task = rx_msg_task;
     ce6:	05 e2       	ldi	r16, 0x25	; 37
     ce8:	13 e1       	ldi	r17, 0x13	; 19
     cea:	87 ee       	ldi	r24, 0xE7	; 231
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	f8 01       	movw	r30, r16
     cf0:	96 83       	std	Z+6, r25	; 0x06
     cf2:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&RX_MSG_TASK, rx_msg_task_stack, NRK_APP_STACKSIZE);
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	52 e0       	ldi	r21, 0x02	; 2
     cf8:	66 ef       	ldi	r22, 0xF6	; 246
     cfa:	7f e0       	ldi	r23, 0x0F	; 15
     cfc:	c8 01       	movw	r24, r16
     cfe:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <nrk_task_set_stk>
  RX_MSG_TASK.prio = 5;
     d02:	85 e0       	ldi	r24, 0x05	; 5
     d04:	f8 01       	movw	r30, r16
     d06:	80 87       	std	Z+8, r24	; 0x08
  RX_MSG_TASK.FirstActivation = TRUE;
     d08:	c1 e0       	ldi	r28, 0x01	; 1
     d0a:	c7 83       	std	Z+7, r28	; 0x07
  RX_MSG_TASK.Type = BASIC_TASK;
     d0c:	c1 87       	std	Z+9, r28	; 0x09
  RX_MSG_TASK.SchType = PREEMPTIVE;
     d0e:	c2 87       	std	Z+10, r28	; 0x0a
  RX_MSG_TASK.period.secs = 0;
     d10:	13 86       	std	Z+11, r1	; 0x0b
     d12:	14 86       	std	Z+12, r1	; 0x0c
     d14:	15 86       	std	Z+13, r1	; 0x0d
     d16:	16 86       	std	Z+14, r1	; 0x0e
  RX_MSG_TASK.period.nano_secs = 100*NANOS_PER_MS;
     d18:	c1 2c       	mov	r12, r1
     d1a:	81 ee       	ldi	r24, 0xE1	; 225
     d1c:	d8 2e       	mov	r13, r24
     d1e:	85 ef       	ldi	r24, 0xF5	; 245
     d20:	e8 2e       	mov	r14, r24
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	f8 2e       	mov	r15, r24
     d26:	c7 86       	std	Z+15, r12	; 0x0f
     d28:	d0 8a       	std	Z+16, r13	; 0x10
     d2a:	e1 8a       	std	Z+17, r14	; 0x11
     d2c:	f2 8a       	std	Z+18, r15	; 0x12
  RX_MSG_TASK.cpu_reserve.secs = 0;
     d2e:	13 8a       	std	Z+19, r1	; 0x13
     d30:	14 8a       	std	Z+20, r1	; 0x14
     d32:	15 8a       	std	Z+21, r1	; 0x15
     d34:	16 8a       	std	Z+22, r1	; 0x16
  RX_MSG_TASK.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
     d36:	41 2c       	mov	r4, r1
     d38:	9d e2       	ldi	r25, 0x2D	; 45
     d3a:	59 2e       	mov	r5, r25
     d3c:	91 e3       	ldi	r25, 0x31	; 49
     d3e:	69 2e       	mov	r6, r25
     d40:	77 24       	eor	r7, r7
     d42:	73 94       	inc	r7
     d44:	47 8a       	std	Z+23, r4	; 0x17
     d46:	50 8e       	std	Z+24, r5	; 0x18
     d48:	61 8e       	std	Z+25, r6	; 0x19
     d4a:	72 8e       	std	Z+26, r7	; 0x1a
  RX_MSG_TASK.offset.secs = 0;
     d4c:	13 8e       	std	Z+27, r1	; 0x1b
     d4e:	14 8e       	std	Z+28, r1	; 0x1c
     d50:	15 8e       	std	Z+29, r1	; 0x1d
     d52:	16 8e       	std	Z+30, r1	; 0x1e
  RX_MSG_TASK.offset.nano_secs = 0;
     d54:	17 8e       	std	Z+31, r1	; 0x1f
     d56:	10 a2       	std	Z+32, r1	; 0x20
     d58:	11 a2       	std	Z+33, r1	; 0x21
     d5a:	12 a2       	std	Z+34, r1	; 0x22

  // PRIORITY 4
  ACTUATE_TASK.task = actuate_task;
     d5c:	09 e4       	ldi	r16, 0x49	; 73
     d5e:	15 e0       	ldi	r17, 0x05	; 5
     d60:	8c e6       	ldi	r24, 0x6C	; 108
     d62:	94 e0       	ldi	r25, 0x04	; 4
     d64:	f8 01       	movw	r30, r16
     d66:	96 83       	std	Z+6, r25	; 0x06
     d68:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&ACTUATE_TASK, actuate_task_stack, NRK_APP_STACKSIZE);
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	52 e0       	ldi	r21, 0x02	; 2
     d6e:	62 ee       	ldi	r22, 0xE2	; 226
     d70:	7d e0       	ldi	r23, 0x0D	; 13
     d72:	c8 01       	movw	r24, r16
     d74:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <nrk_task_set_stk>
  ACTUATE_TASK.prio = 4;
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	f8 01       	movw	r30, r16
     d7c:	80 87       	std	Z+8, r24	; 0x08
  ACTUATE_TASK.FirstActivation = TRUE;
     d7e:	c7 83       	std	Z+7, r28	; 0x07
  ACTUATE_TASK.Type = BASIC_TASK;
     d80:	c1 87       	std	Z+9, r28	; 0x09
  ACTUATE_TASK.SchType = PREEMPTIVE;
     d82:	c2 87       	std	Z+10, r28	; 0x0a
  ACTUATE_TASK.period.secs = 0;
     d84:	13 86       	std	Z+11, r1	; 0x0b
     d86:	14 86       	std	Z+12, r1	; 0x0c
     d88:	15 86       	std	Z+13, r1	; 0x0d
     d8a:	16 86       	std	Z+14, r1	; 0x0e
  ACTUATE_TASK.period.nano_secs = 200*NANOS_PER_MS;
     d8c:	81 2c       	mov	r8, r1
     d8e:	22 ec       	ldi	r18, 0xC2	; 194
     d90:	92 2e       	mov	r9, r18
     d92:	2b ee       	ldi	r18, 0xEB	; 235
     d94:	a2 2e       	mov	r10, r18
     d96:	2b e0       	ldi	r18, 0x0B	; 11
     d98:	b2 2e       	mov	r11, r18
     d9a:	87 86       	std	Z+15, r8	; 0x0f
     d9c:	90 8a       	std	Z+16, r9	; 0x10
     d9e:	a1 8a       	std	Z+17, r10	; 0x11
     da0:	b2 8a       	std	Z+18, r11	; 0x12
  ACTUATE_TASK.cpu_reserve.secs = 0;
     da2:	13 8a       	std	Z+19, r1	; 0x13
     da4:	14 8a       	std	Z+20, r1	; 0x14
     da6:	15 8a       	std	Z+21, r1	; 0x15
     da8:	16 8a       	std	Z+22, r1	; 0x16
  ACTUATE_TASK.cpu_reserve.nano_secs = 30*NANOS_PER_MS;
     daa:	80 e8       	ldi	r24, 0x80	; 128
     dac:	93 ec       	ldi	r25, 0xC3	; 195
     dae:	a9 ec       	ldi	r26, 0xC9	; 201
     db0:	b1 e0       	ldi	r27, 0x01	; 1
     db2:	87 8b       	std	Z+23, r24	; 0x17
     db4:	90 8f       	std	Z+24, r25	; 0x18
     db6:	a1 8f       	std	Z+25, r26	; 0x19
     db8:	b2 8f       	std	Z+26, r27	; 0x1a
  ACTUATE_TASK.offset.secs = 0;
     dba:	13 8e       	std	Z+27, r1	; 0x1b
     dbc:	14 8e       	std	Z+28, r1	; 0x1c
     dbe:	15 8e       	std	Z+29, r1	; 0x1d
     dc0:	16 8e       	std	Z+30, r1	; 0x1e
  ACTUATE_TASK.offset.nano_secs = 0;
     dc2:	17 8e       	std	Z+31, r1	; 0x1f
     dc4:	10 a2       	std	Z+32, r1	; 0x20
     dc6:	11 a2       	std	Z+33, r1	; 0x21
     dc8:	12 a2       	std	Z+34, r1	; 0x22

  // PRIORITY 3
  TX_CMD_TASK.task = tx_cmd_task;
     dca:	0e eb       	ldi	r16, 0xBE	; 190
     dcc:	1d e0       	ldi	r17, 0x0D	; 13
     dce:	81 e1       	ldi	r24, 0x11	; 17
     dd0:	95 e0       	ldi	r25, 0x05	; 5
     dd2:	f8 01       	movw	r30, r16
     dd4:	96 83       	std	Z+6, r25	; 0x06
     dd6:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_CMD_TASK, tx_cmd_task_stack, NRK_APP_STACKSIZE);
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	52 e0       	ldi	r21, 0x02	; 2
     ddc:	6c eb       	ldi	r22, 0xBC	; 188
     dde:	7b e0       	ldi	r23, 0x0B	; 11
     de0:	c8 01       	movw	r24, r16
     de2:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <nrk_task_set_stk>
  TX_CMD_TASK.prio = 3;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	f8 01       	movw	r30, r16
     dea:	80 87       	std	Z+8, r24	; 0x08
  TX_CMD_TASK.FirstActivation = TRUE;
     dec:	c7 83       	std	Z+7, r28	; 0x07
  TX_CMD_TASK.Type = BASIC_TASK;
     dee:	c1 87       	std	Z+9, r28	; 0x09
  TX_CMD_TASK.SchType = PREEMPTIVE;
     df0:	c2 87       	std	Z+10, r28	; 0x0a
  TX_CMD_TASK.period.secs = 0;
     df2:	13 86       	std	Z+11, r1	; 0x0b
     df4:	14 86       	std	Z+12, r1	; 0x0c
     df6:	15 86       	std	Z+13, r1	; 0x0d
     df8:	16 86       	std	Z+14, r1	; 0x0e
  TX_CMD_TASK.period.nano_secs = 100*NANOS_PER_MS;
     dfa:	c7 86       	std	Z+15, r12	; 0x0f
     dfc:	d0 8a       	std	Z+16, r13	; 0x10
     dfe:	e1 8a       	std	Z+17, r14	; 0x11
     e00:	f2 8a       	std	Z+18, r15	; 0x12
  TX_CMD_TASK.cpu_reserve.secs = 0;
     e02:	13 8a       	std	Z+19, r1	; 0x13
     e04:	14 8a       	std	Z+20, r1	; 0x14
     e06:	15 8a       	std	Z+21, r1	; 0x15
     e08:	16 8a       	std	Z+22, r1	; 0x16
  TX_CMD_TASK.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
     e0a:	47 8a       	std	Z+23, r4	; 0x17
     e0c:	50 8e       	std	Z+24, r5	; 0x18
     e0e:	61 8e       	std	Z+25, r6	; 0x19
     e10:	72 8e       	std	Z+26, r7	; 0x1a
  TX_CMD_TASK.offset.secs = 0;
     e12:	13 8e       	std	Z+27, r1	; 0x1b
     e14:	14 8e       	std	Z+28, r1	; 0x1c
     e16:	15 8e       	std	Z+29, r1	; 0x1d
     e18:	16 8e       	std	Z+30, r1	; 0x1e
  TX_CMD_TASK.offset.nano_secs = 0;
     e1a:	17 8e       	std	Z+31, r1	; 0x1f
     e1c:	10 a2       	std	Z+32, r1	; 0x20
     e1e:	11 a2       	std	Z+33, r1	; 0x21
     e20:	12 a2       	std	Z+34, r1	; 0x22

  // PRIORITY 2
  SAMPLE_TASK.task = sample_task;
     e22:	01 e0       	ldi	r16, 0x01	; 1
     e24:	13 e1       	ldi	r17, 0x13	; 19
     e26:	86 ec       	ldi	r24, 0xC6	; 198
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	f8 01       	movw	r30, r16
     e2c:	96 83       	std	Z+6, r25	; 0x06
     e2e:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&SAMPLE_TASK, sample_task_stack, NRK_APP_STACKSIZE);
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	52 e0       	ldi	r21, 0x02	; 2
     e34:	6a ea       	ldi	r22, 0xAA	; 170
     e36:	78 e0       	ldi	r23, 0x08	; 8
     e38:	c8 01       	movw	r24, r16
     e3a:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <nrk_task_set_stk>
  SAMPLE_TASK.prio = 2;
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	f8 01       	movw	r30, r16
     e42:	80 87       	std	Z+8, r24	; 0x08
  SAMPLE_TASK.FirstActivation = TRUE;
     e44:	c7 83       	std	Z+7, r28	; 0x07
  SAMPLE_TASK.Type = BASIC_TASK;
     e46:	c1 87       	std	Z+9, r28	; 0x09
  SAMPLE_TASK.SchType = PREEMPTIVE;
     e48:	c2 87       	std	Z+10, r28	; 0x0a
  SAMPLE_TASK.period.secs = 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	83 87       	std	Z+11, r24	; 0x0b
     e54:	94 87       	std	Z+12, r25	; 0x0c
     e56:	a5 87       	std	Z+13, r26	; 0x0d
     e58:	b6 87       	std	Z+14, r27	; 0x0e
  SAMPLE_TASK.period.nano_secs = 0;
     e5a:	17 86       	std	Z+15, r1	; 0x0f
     e5c:	10 8a       	std	Z+16, r1	; 0x10
     e5e:	11 8a       	std	Z+17, r1	; 0x11
     e60:	12 8a       	std	Z+18, r1	; 0x12
  SAMPLE_TASK.cpu_reserve.secs = 0;
     e62:	13 8a       	std	Z+19, r1	; 0x13
     e64:	14 8a       	std	Z+20, r1	; 0x14
     e66:	15 8a       	std	Z+21, r1	; 0x15
     e68:	16 8a       	std	Z+22, r1	; 0x16
  SAMPLE_TASK.cpu_reserve.nano_secs = 200*NANOS_PER_MS;
     e6a:	87 8a       	std	Z+23, r8	; 0x17
     e6c:	90 8e       	std	Z+24, r9	; 0x18
     e6e:	a1 8e       	std	Z+25, r10	; 0x19
     e70:	b2 8e       	std	Z+26, r11	; 0x1a
  SAMPLE_TASK.offset.secs = 0;
     e72:	13 8e       	std	Z+27, r1	; 0x1b
     e74:	14 8e       	std	Z+28, r1	; 0x1c
     e76:	15 8e       	std	Z+29, r1	; 0x1d
     e78:	16 8e       	std	Z+30, r1	; 0x1e
  SAMPLE_TASK.offset.nano_secs = 0;
     e7a:	17 8e       	std	Z+31, r1	; 0x1f
     e7c:	10 a2       	std	Z+32, r1	; 0x20
     e7e:	11 a2       	std	Z+33, r1	; 0x21
     e80:	12 a2       	std	Z+34, r1	; 0x22

  // PRIORITY 1
  TX_DATA_TASK.task = tx_data_task;
     e82:	01 e7       	ldi	r16, 0x71	; 113
     e84:	17 e0       	ldi	r17, 0x07	; 7
     e86:	8b ec       	ldi	r24, 0xCB	; 203
     e88:	95 e0       	ldi	r25, 0x05	; 5
     e8a:	f8 01       	movw	r30, r16
     e8c:	96 83       	std	Z+6, r25	; 0x06
     e8e:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_DATA_TASK, tx_data_task_stack, NRK_APP_STACKSIZE);
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	52 e0       	ldi	r21, 0x02	; 2
     e94:	6f e6       	ldi	r22, 0x6F	; 111
     e96:	75 e0       	ldi	r23, 0x05	; 5
     e98:	c8 01       	movw	r24, r16
     e9a:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <nrk_task_set_stk>
  TX_DATA_TASK.prio = 1;
     e9e:	f8 01       	movw	r30, r16
     ea0:	c0 87       	std	Z+8, r28	; 0x08
  TX_DATA_TASK.FirstActivation = TRUE;
     ea2:	c7 83       	std	Z+7, r28	; 0x07
  TX_DATA_TASK.Type = BASIC_TASK;
     ea4:	c1 87       	std	Z+9, r28	; 0x09
  TX_DATA_TASK.SchType = PREEMPTIVE;
     ea6:	c2 87       	std	Z+10, r28	; 0x0a
  TX_DATA_TASK.period.secs = 5;
     ea8:	85 e0       	ldi	r24, 0x05	; 5
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a0 e0       	ldi	r26, 0x00	; 0
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	83 87       	std	Z+11, r24	; 0x0b
     eb2:	94 87       	std	Z+12, r25	; 0x0c
     eb4:	a5 87       	std	Z+13, r26	; 0x0d
     eb6:	b6 87       	std	Z+14, r27	; 0x0e
  TX_DATA_TASK.period.nano_secs = 0;
     eb8:	17 86       	std	Z+15, r1	; 0x0f
     eba:	10 8a       	std	Z+16, r1	; 0x10
     ebc:	11 8a       	std	Z+17, r1	; 0x11
     ebe:	12 8a       	std	Z+18, r1	; 0x12
  TX_DATA_TASK.cpu_reserve.secs = 0;
     ec0:	13 8a       	std	Z+19, r1	; 0x13
     ec2:	14 8a       	std	Z+20, r1	; 0x14
     ec4:	15 8a       	std	Z+21, r1	; 0x15
     ec6:	16 8a       	std	Z+22, r1	; 0x16
  TX_DATA_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     ec8:	c7 8a       	std	Z+23, r12	; 0x17
     eca:	d0 8e       	std	Z+24, r13	; 0x18
     ecc:	e1 8e       	std	Z+25, r14	; 0x19
     ece:	f2 8e       	std	Z+26, r15	; 0x1a
  TX_DATA_TASK.offset.secs = 0;
     ed0:	13 8e       	std	Z+27, r1	; 0x1b
     ed2:	14 8e       	std	Z+28, r1	; 0x1c
     ed4:	15 8e       	std	Z+29, r1	; 0x1d
     ed6:	16 8e       	std	Z+30, r1	; 0x1e
  TX_DATA_TASK.offset.nano_secs = 0;
     ed8:	17 8e       	std	Z+31, r1	; 0x1f
     eda:	10 a2       	std	Z+32, r1	; 0x20
     edc:	11 a2       	std	Z+33, r1	; 0x21
     ede:	12 a2       	std	Z+34, r1	; 0x22

  nrk_activate_task(&RX_MSG_TASK); 
     ee0:	85 e2       	ldi	r24, 0x25	; 37
     ee2:	93 e1       	ldi	r25, 0x13	; 19
     ee4:	0e 94 90 29 	call	0x5320	; 0x5320 <nrk_activate_task>
  nrk_activate_task(&TX_CMD_TASK);
     ee8:	8e eb       	ldi	r24, 0xBE	; 190
     eea:	9d e0       	ldi	r25, 0x0D	; 13
     eec:	0e 94 90 29 	call	0x5320	; 0x5320 <nrk_activate_task>
  nrk_activate_task(&TX_DATA_TASK);
     ef0:	c8 01       	movw	r24, r16
     ef2:	0e 94 90 29 	call	0x5320	; 0x5320 <nrk_activate_task>
  nrk_activate_task(&SAMPLE_TASK);
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	93 e1       	ldi	r25, 0x13	; 19
     efa:	0e 94 90 29 	call	0x5320	; 0x5320 <nrk_activate_task>
  nrk_activate_task(&ACTUATE_TASK);
     efe:	89 e4       	ldi	r24, 0x49	; 73
     f00:	95 e0       	ldi	r25, 0x05	; 5
     f02:	0e 94 90 29 	call	0x5320	; 0x5320 <nrk_activate_task>

  nrk_kprintf(PSTR("Create done.\r\n"));
     f06:	84 eb       	ldi	r24, 0xB4	; 180
     f08:	91 e0       	ldi	r25, 0x01	; 1
}
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	5f 90       	pop	r5
     f26:	4f 90       	pop	r4
  nrk_activate_task(&TX_CMD_TASK);
  nrk_activate_task(&TX_DATA_TASK);
  nrk_activate_task(&SAMPLE_TASK);
  nrk_activate_task(&ACTUATE_TASK);

  nrk_kprintf(PSTR("Create done.\r\n"));
     f28:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <nrk_kprintf>

00000f2c <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     f2c:	08 95       	ret

00000f2e <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     f2e:	64 30       	cpi	r22, 0x04	; 4
     f30:	21 f4       	brne	.+8      	; 0xf3a <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     f32:	0e 94 65 1a 	call	0x34ca	; 0x34ca <rf_security_set_ctr_counter>
  return NRK_OK;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     f3c:	08 95       	ret

00000f3e <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	08 95       	ret

00000f42 <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	08 95       	ret

00000f48 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     f48:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <rf_auto_ack_disable>
  return NRK_OK;
}
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	08 95       	ret

00000f50 <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     f50:	0e 94 f7 16 	call	0x2dee	; 0x2dee <rf_auto_ack_enable>
  return NRK_OK;
}
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	08 95       	ret

00000f58 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     f58:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <rf_addr_decode_disable>
  return NRK_OK;
}
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	08 95       	ret

00000f60 <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     f60:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <rf_addr_decode_enable>
  return NRK_OK;
}
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	08 95       	ret

00000f68 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     f68:	0e 94 03 17 	call	0x2e06	; 0x2e06 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	08 95       	ret

00000f70 <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     f70:	90 93 af 0b 	sts	0x0BAF, r25
     f74:	80 93 ae 0b 	sts	0x0BAE, r24
  return NRK_OK;
}
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	08 95       	ret

00000f7c <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     f7c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <rf_security_last_pkt_status>
}
     f80:	08 95       	ret

00000f82 <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     f82:	60 31       	cpi	r22, 0x10	; 16
     f84:	21 f4       	brne	.+8      	; 0xf8e <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     f86:	0e 94 66 1a 	call	0x34cc	; 0x34cc <rf_security_set_key>
  return NRK_OK;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     f90:	08 95       	ret

00000f92 <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	08 95       	ret

00000f96 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	08 95       	ret

00000f9a <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     f9a:	80 32       	cpi	r24, 0x20	; 32
     f9c:	20 f4       	brcc	.+8      	; 0xfa6 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     f9e:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <rf_tx_power>
  return NRK_OK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     fa8:	08 95       	ret

00000faa <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     faa:	80 93 7a 04 	sts	0x047A, r24
     fae:	08 95       	ret

00000fb0 <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     fb0:	99 27       	eor	r25, r25
     fb2:	87 fd       	sbrc	r24, 7
     fb4:	90 95       	com	r25
     fb6:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <rf_set_cca_thresh>
  return NRK_OK;
}
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	08 95       	ret

00000fbe <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	1f 92       	push	r1
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     fc8:	8b 31       	cpi	r24, 0x1B	; 27
     fca:	80 f4       	brcc	.+32     	; 0xfec <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     fcc:	80 93 84 04 	sts	0x0484, r24
  rf_power_up ();
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4f ef       	ldi	r20, 0xFF	; 255
     fdc:	5f ef       	ldi	r21, 0xFF	; 255
     fde:	69 81       	ldd	r22, Y+1	; 0x01
     fe0:	85 ef       	ldi	r24, 0xF5	; 245
     fe2:	92 e1       	ldi	r25, 0x12	; 18
     fe4:	0e 94 23 17 	call	0x2e46	; 0x2e46 <rf_init>
  return NRK_OK;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     fec:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     fee:	0f 90       	pop	r0
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     ff6:	80 91 87 04 	lds	r24, 0x0487
     ffa:	88 23       	and	r24, r24
     ffc:	11 f1       	breq	.+68     	; 0x1042 <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     ffe:	80 91 bc 0d 	lds	r24, 0x0DBC
    1002:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	00 90 bc 0d 	lds	r0, 0x0DBC
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <bmac_wait_until_rx_pkt+0x2a>
    1018:	66 0f       	add	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	d2 f7       	brpl	.-12     	; 0x1018 <bmac_wait_until_rx_pkt+0x22>
    1024:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	00 90 bc 0d 	lds	r0, 0x0DBC
    1030:	04 c0       	rjmp	.+8      	; 0x103a <bmac_wait_until_rx_pkt+0x44>
    1032:	b6 95       	lsr	r27
    1034:	a7 95       	ror	r26
    1036:	97 95       	ror	r25
    1038:	87 95       	ror	r24
    103a:	0a 94       	dec	r0
    103c:	d2 f7       	brpl	.-12     	; 0x1032 <bmac_wait_until_rx_pkt+0x3c>
    103e:	80 ff       	sbrs	r24, 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
    1046:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
    1048:	08 95       	ret

0000104a <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	51 f0       	breq	.+20     	; 0x1062 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
    104e:	90 93 fb 12 	sts	0x12FB, r25
    1052:	80 93 fa 12 	sts	0x12FA, r24
  bmac_rfRxInfo.max_length = size;
    1056:	60 93 f9 12 	sts	0x12F9, r22
  rx_buf_empty = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	80 93 87 04 	sts	0x0487, r24
  return NRK_OK;
    1060:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
    1062:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
    1064:	08 95       	ret

00001066 <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	18 2f       	mov	r17, r24
  bmac_running = 0;
    106e:	10 92 86 04 	sts	0x0486, r1
  tx_reserve = -1;
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	80 93 79 04 	sts	0x0479, r24
  cca_active = true;
    1078:	d1 e0       	ldi	r29, 0x01	; 1
    107a:	d0 93 7a 04 	sts	0x047A, r29
  rx_failure_cnt = 0;
    107e:	10 92 89 04 	sts	0x0489, r1
    1082:	10 92 8a 04 	sts	0x048A, r1
    1086:	10 92 8b 04 	sts	0x048B, r1
    108a:	10 92 8c 04 	sts	0x048C, r1
#endif
#endif



  _bmac_check_period.secs = 0;
    108e:	10 92 7b 04 	sts	0x047B, r1
    1092:	10 92 7c 04 	sts	0x047C, r1
    1096:	10 92 7d 04 	sts	0x047D, r1
    109a:	10 92 7e 04 	sts	0x047E, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	91 ee       	ldi	r25, 0xE1	; 225
    10a2:	a5 ef       	ldi	r26, 0xF5	; 245
    10a4:	b5 e0       	ldi	r27, 0x05	; 5
    10a6:	80 93 7f 04 	sts	0x047F, r24
    10aa:	90 93 80 04 	sts	0x0480, r25
    10ae:	a0 93 81 04 	sts	0x0481, r26
    10b2:	b0 93 82 04 	sts	0x0482, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
    10b6:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <nrk_signal_create>
    10ba:	c8 2f       	mov	r28, r24
    10bc:	80 93 bc 0d 	sts	0x0DBC, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
    10c0:	8f 3f       	cpi	r24, 0xFF	; 255
    10c2:	19 f4       	brne	.+6      	; 0x10ca <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
    10c4:	83 ec       	ldi	r24, 0xC3	; 195
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	09 c0       	rjmp	.+18     	; 0x10dc <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
    10ca:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <nrk_signal_create>
    10ce:	c8 2f       	mov	r28, r24
    10d0:	80 93 48 15 	sts	0x1548, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
    10d4:	8f 3f       	cpi	r24, 0xFF	; 255
    10d6:	69 f4       	brne	.+26     	; 0x10f2 <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
    10d8:	8b e9       	ldi	r24, 0x9B	; 155
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    10e0:	e0 91 36 17 	lds	r30, 0x1736
    10e4:	f0 91 37 17 	lds	r31, 0x1737
    10e8:	60 85       	ldd	r22, Z+8	; 0x08
    10ea:	8e e0       	ldi	r24, 0x0E	; 14
    10ec:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
    return NRK_ERROR;
    10f0:	2a c0       	rjmp	.+84     	; 0x1146 <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
    10f2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <nrk_signal_create>
    10f6:	c8 2f       	mov	r28, r24
    10f8:	80 93 ad 0b 	sts	0x0BAD, r24
  if (bmac_enable_signal == NRK_ERROR) {
    10fc:	8f 3f       	cpi	r24, 0xFF	; 255
    10fe:	19 f4       	brne	.+6      	; 0x1106 <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
    1100:	8f e6       	ldi	r24, 0x6F	; 111
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	eb cf       	rjmp	.-42     	; 0x10dc <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
    1106:	10 92 88 04 	sts	0x0488, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
    110a:	10 92 87 04 	sts	0x0487, r1
  bmac_rfRxInfo.pPayload = NULL;
    110e:	10 92 fb 12 	sts	0x12FB, r1
    1112:	10 92 fa 12 	sts	0x12FA, r1
  bmac_rfRxInfo.max_length = 0;
    1116:	10 92 f9 12 	sts	0x12F9, r1

  // Setup the cc2420 chip
  rf_power_up ();
    111a:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4f ef       	ldi	r20, 0xFF	; 255
    1124:	5f ef       	ldi	r21, 0xFF	; 255
    1126:	61 2f       	mov	r22, r17
    1128:	85 ef       	ldi	r24, 0xF5	; 245
    112a:	92 e1       	ldi	r25, 0x12	; 18
    112c:	0e 94 23 17 	call	0x2e46	; 0x2e46 <rf_init>
  g_chan = chan;
    1130:	10 93 84 04 	sts	0x0484, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <rf_set_cca_thresh>
  bmac_running = 1;
    113c:	d0 93 86 04 	sts	0x0486, r29
  is_enabled = 1;
    1140:	d0 93 83 04 	sts	0x0483, r29
  return NRK_OK;
    1144:	c1 e0       	ldi	r28, 0x01	; 1
}
    1146:	8c 2f       	mov	r24, r28
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	08 95       	ret

00001150 <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    1150:	20 91 88 04 	lds	r18, 0x0488
    1154:	21 30       	cpi	r18, 0x01	; 1
    1156:	59 f0       	breq	.+22     	; 0x116e <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
    1158:	21 e0       	ldi	r18, 0x01	; 1
    115a:	20 93 88 04 	sts	0x0488, r18
  bmac_rfTxInfo.pPayload = buf;
    115e:	90 93 b2 0b 	sts	0x0BB2, r25
    1162:	80 93 b1 0b 	sts	0x0BB1, r24
  bmac_rfTxInfo.length = len;
    1166:	60 93 b0 0b 	sts	0x0BB0, r22
  return NRK_OK;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
    116e:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
    1170:	08 95       	ret

00001172 <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
    1172:	80 91 bc 0d 	lds	r24, 0x0DBC
    1176:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
    117a:	80 91 bc 0d 	lds	r24, 0x0DBC
    117e:	08 95       	ret

00001180 <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
    1180:	80 91 48 15 	lds	r24, 0x1548
    1184:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
    1188:	80 91 48 15 	lds	r24, 0x1548
    118c:	08 95       	ret

0000118e <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
    1196:	20 91 88 04 	lds	r18, 0x0488
    119a:	21 30       	cpi	r18, 0x01	; 1
    119c:	f1 f1       	breq	.+124    	; 0x121a <bmac_tx_pkt+0x8c>
    119e:	f6 2e       	mov	r15, r22
    11a0:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
    11a2:	80 91 48 15 	lds	r24, 0x1548
    11a6:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
  tx_data_ready = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 88 04 	sts	0x0488, r24
  bmac_rfTxInfo.pPayload = buf;
    11b0:	d0 92 b2 0b 	sts	0x0BB2, r13
    11b4:	c0 92 b1 0b 	sts	0x0BB1, r12
  bmac_rfTxInfo.length = len;
    11b8:	f0 92 b0 0b 	sts	0x0BB0, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	00 90 48 15 	lds	r0, 0x1548
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <bmac_tx_pkt+0x48>
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	88 1f       	adc	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	d2 f7       	brpl	.-12     	; 0x11ce <bmac_tx_pkt+0x40>
    11da:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <nrk_event_wait>
    11de:	6b 01       	movw	r12, r22
    11e0:	7c 01       	movw	r14, r24
  if (mask == 0)
    11e2:	61 15       	cp	r22, r1
    11e4:	71 05       	cpc	r23, r1
    11e6:	81 05       	cpc	r24, r1
    11e8:	91 05       	cpc	r25, r1
    11ea:	21 f4       	brne	.+8      	; 0x11f4 <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
    11ec:	8b e4       	ldi	r24, 0x4B	; 75
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    11f4:	00 90 48 15 	lds	r0, 0x1548
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <bmac_tx_pkt+0x74>
    11fa:	f6 94       	lsr	r15
    11fc:	e7 94       	ror	r14
    11fe:	d7 94       	ror	r13
    1200:	c7 94       	ror	r12
    1202:	0a 94       	dec	r0
    1204:	d2 f7       	brpl	.-12     	; 0x11fa <bmac_tx_pkt+0x6c>
    1206:	c0 fc       	sbrc	r12, 0
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
    120a:	88 e2       	ldi	r24, 0x28	; 40
    120c:	92 e0       	ldi	r25, 0x02	; 2
    120e:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
  if (pkt_got_ack)
    1212:	80 91 85 04 	lds	r24, 0x0485
    1216:	81 11       	cpse	r24, r1
    1218:	02 c0       	rjmp	.+4      	; 0x121e <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
    121e:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	08 95       	ret

0000122a <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
    122a:	20 91 87 04 	lds	r18, 0x0487
    122e:	22 23       	and	r18, r18
    1230:	39 f0       	breq	.+14     	; 0x1240 <bmac_rx_pkt_get+0x16>
    *len = 0;
    1232:	fc 01       	movw	r30, r24
    1234:	10 82       	st	Z, r1
    *rssi = 0;
    1236:	fb 01       	movw	r30, r22
    1238:	10 82       	st	Z, r1
    return NULL;
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
    1240:	20 91 f8 12 	lds	r18, 0x12F8
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
    1248:	80 91 fd 12 	lds	r24, 0x12FD
    124c:	fb 01       	movw	r30, r22
    124e:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
    1250:	80 91 fa 12 	lds	r24, 0x12FA
    1254:	90 91 fb 12 	lds	r25, 0x12FB
}
    1258:	08 95       	ret

0000125a <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 91 87 04 	lds	r25, 0x0487
    1260:	91 11       	cpse	r25, r1
    1262:	80 e0       	ldi	r24, 0x00	; 0
}
    1264:	08 95       	ret

00001266 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 87 04 	sts	0x0487, r24
  return NRK_OK;
}
    126c:	08 95       	ret

0000126e <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
    126e:	10 92 83 04 	sts	0x0483, r1
  rf_power_down ();
    1272:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <rf_power_down>

00001276 <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	80 93 83 04 	sts	0x0483, r24
  rf_power_up ();
    127c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
    1280:	80 91 ad 0b 	lds	r24, 0x0BAD
    1284:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <nrk_event_signal>

00001288 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	28 97       	sbiw	r28, 0x08	; 8
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	29 83       	std	Y+1, r18	; 0x01
    129e:	3a 83       	std	Y+2, r19	; 0x02
    12a0:	4b 83       	std	Y+3, r20	; 0x03
    12a2:	5c 83       	std	Y+4, r21	; 0x04
    12a4:	6d 83       	std	Y+5, r22	; 0x05
    12a6:	7e 83       	std	Y+6, r23	; 0x06
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
    12ac:	49 81       	ldd	r20, Y+1	; 0x01
    12ae:	5a 81       	ldd	r21, Y+2	; 0x02
    12b0:	6b 81       	ldd	r22, Y+3	; 0x03
    12b2:	7c 81       	ldd	r23, Y+4	; 0x04
    12b4:	8d 81       	ldd	r24, Y+5	; 0x05
    12b6:	9e 81       	ldd	r25, Y+6	; 0x06
    12b8:	af 81       	ldd	r26, Y+7	; 0x07
    12ba:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
    12bc:	41 15       	cp	r20, r1
    12be:	51 05       	cpc	r21, r1
    12c0:	61 05       	cpc	r22, r1
    12c2:	71 05       	cpc	r23, r1
    12c4:	41 f4       	brne	.+16     	; 0x12d6 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    12c6:	81 15       	cp	r24, r1
    12c8:	2d e2       	ldi	r18, 0x2D	; 45
    12ca:	92 07       	cpc	r25, r18
    12cc:	21 e3       	ldi	r18, 0x31	; 49
    12ce:	a2 07       	cpc	r26, r18
    12d0:	21 e0       	ldi	r18, 0x01	; 1
    12d2:	b2 07       	cpc	r27, r18
    12d4:	90 f0       	brcs	.+36     	; 0x12fa <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
    12d6:	40 93 7b 04 	sts	0x047B, r20
    12da:	50 93 7c 04 	sts	0x047C, r21
    12de:	60 93 7d 04 	sts	0x047D, r22
    12e2:	70 93 7e 04 	sts	0x047E, r23
  _bmac_check_period.nano_secs = period.nano_secs;
    12e6:	80 93 7f 04 	sts	0x047F, r24
    12ea:	90 93 80 04 	sts	0x0480, r25
    12ee:	a0 93 81 04 	sts	0x0481, r26
    12f2:	b0 93 82 04 	sts	0x0482, r27
  return NRK_OK;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
    12fc:	28 96       	adiw	r28, 0x08	; 8
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
    130e:	80 91 86 04 	lds	r24, 0x0486
    1312:	08 95       	ret

00001314 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
    1314:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
    1316:	0e 94 93 17 	call	0x2f26	; 0x2f26 <rf_rx_on>
  val += rf_cca_check ();
    131a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <rf_cca_check>
    131e:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
    1320:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <rf_cca_check>
    1324:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
    1326:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <rf_cca_check>
    132a:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
    132c:	0e 94 99 17 	call	0x2f32	; 0x2f32 <rf_rx_off>
    1330:	8c 2f       	mov	r24, r28
    1332:	1c 16       	cp	r1, r28
    1334:	0c f4       	brge	.+2      	; 0x1338 <_bmac_channel_check+0x24>
    1336:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
    133c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
    1340:	10 92 71 04 	sts	0x0471, r1
    1344:	10 92 72 04 	sts	0x0472, r1
    1348:	10 92 73 04 	sts	0x0473, r1
    134c:	10 92 74 04 	sts	0x0474, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
    1350:	80 e4       	ldi	r24, 0x40	; 64
    1352:	68 2f       	mov	r22, r24
    1354:	80 93 75 04 	sts	0x0475, r24
    1358:	8b e4       	ldi	r24, 0x4B	; 75
    135a:	80 93 76 04 	sts	0x0476, r24
    135e:	8c e4       	ldi	r24, 0x4C	; 76
    1360:	80 93 77 04 	sts	0x0477, r24
    1364:	10 92 78 04 	sts	0x0478, r1
  nrk_wait (dummy_t);
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 91 72 04 	lds	r19, 0x0472
    136e:	40 91 73 04 	lds	r20, 0x0473
    1372:	50 91 74 04 	lds	r21, 0x0474
    1376:	7b e4       	ldi	r23, 0x4B	; 75
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 1e 2b 	call	0x563c	; 0x563c <nrk_wait>

  n = rf_rx_packet_nonblock ();
    137e:	0e 94 25 19 	call	0x324a	; 0x324a <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	e9 f0       	breq	.+58     	; 0x13c0 <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
    1386:	80 91 89 04 	lds	r24, 0x0489
    138a:	90 91 8a 04 	lds	r25, 0x048A
    138e:	a0 91 8b 04 	lds	r26, 0x048B
    1392:	b0 91 8c 04 	lds	r27, 0x048C
    1396:	8f 3f       	cpi	r24, 0xFF	; 255
    1398:	2f ef       	ldi	r18, 0xFF	; 255
    139a:	92 07       	cpc	r25, r18
    139c:	a1 05       	cpc	r26, r1
    139e:	b1 05       	cpc	r27, r1
    13a0:	58 f4       	brcc	.+22     	; 0x13b8 <_bmac_rx+0x7c>
      rx_failure_cnt++;
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	a1 1d       	adc	r26, r1
    13a6:	b1 1d       	adc	r27, r1
    13a8:	80 93 89 04 	sts	0x0489, r24
    13ac:	90 93 8a 04 	sts	0x048A, r25
    13b0:	a0 93 8b 04 	sts	0x048B, r26
    13b4:	b0 93 8c 04 	sts	0x048C, r27
    rf_rx_off ();
    13b8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <rf_rx_off>
    return 0;
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
    13c0:	10 92 87 04 	sts	0x0487, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
    13c4:	0e 94 99 17 	call	0x2f32	; 0x2f32 <rf_rx_off>
  return 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
}
    13ca:	08 95       	ret

000013cc <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
    13cc:	80 91 89 04 	lds	r24, 0x0489
    13d0:	90 91 8a 04 	lds	r25, 0x048A
    13d4:	08 95       	ret

000013d6 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
    13d6:	10 92 89 04 	sts	0x0489, r1
    13da:	10 92 8a 04 	sts	0x048A, r1
    13de:	10 92 8b 04 	sts	0x048B, r1
    13e2:	10 92 8c 04 	sts	0x048C, r1
  return NRK_OK;
}
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	08 95       	ret

000013ea <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	58 f0       	brcs	.+22     	; 0x1404 <_b_pow+0x1a>
    return 1;
  if (in > 7)
    13ee:	88 30       	cpi	r24, 0x08	; 8
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <_b_pow+0xa>
    in = 6;                     // cap it at 128 
    13f2:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
    13f4:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
    13f8:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    13fa:	2f 5f       	subi	r18, 0xFF	; 255
    13fc:	28 13       	cpse	r18, r24
    13fe:	fc cf       	rjmp	.-8      	; 0x13f8 <_b_pow+0xe>
    result = result * 2;
  return result;
    1400:	89 2f       	mov	r24, r25
    1402:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
    1406:	08 95       	ret

00001408 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
    1414:	80 91 7a 04 	lds	r24, 0x047A
    1418:	88 23       	and	r24, r24
    141a:	09 f4       	brne	.+2      	; 0x141e <_bmac_tx+0x16>
    141c:	43 c0       	rjmp	.+134    	; 0x14a4 <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
    141e:	8b e7       	ldi	r24, 0x7B	; 123
    1420:	94 e0       	ldi	r25, 0x04	; 4
    1422:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <_nrk_time_to_ticks>
    1426:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
    1428:	0e 94 e6 39 	call	0x73cc	; 0x73cc <rand>
    142c:	6a e0       	ldi	r22, 0x0A	; 10
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <__divmodhi4>
    1434:	bc 01       	movw	r22, r24
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	ce 01       	movw	r24, r28
    143c:	0e 94 be 38 	call	0x717c	; 0x717c <__udivmodhi4>
    1440:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
    1442:	0e 94 c9 2a 	call	0x5592	; 0x5592 <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
    1446:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
    1448:	0a e0       	ldi	r16, 0x0A	; 10
    144a:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
    144c:	0e 94 8a 09 	call	0x1314	; 0x1314 <_bmac_channel_check>
    1450:	d8 2f       	mov	r29, r24
      if (v == 1)
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	39 f1       	breq	.+78     	; 0x14a4 <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
    1456:	0e 94 e6 39 	call	0x73cc	; 0x73cc <rand>
    145a:	7c 01       	movw	r14, r24
    145c:	8c 2f       	mov	r24, r28
    145e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <_b_pow>
    1462:	68 2f       	mov	r22, r24
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	c7 01       	movw	r24, r14
    1468:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
    146c:	99 27       	eor	r25, r25
    146e:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <nrk_wait_until_next_n_periods>
      backoff_count++;
    1472:	cf 5f       	subi	r28, 0xFF	; 255
    1474:	c7 30       	cpi	r28, 0x07	; 7
    1476:	08 f0       	brcs	.+2      	; 0x147a <_bmac_tx+0x72>
    1478:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
    147a:	8b e7       	ldi	r24, 0x7B	; 123
    147c:	94 e0       	ldi	r25, 0x04	; 4
    147e:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <_nrk_time_to_ticks>
    1482:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
    1484:	0e 94 e6 39 	call	0x73cc	; 0x73cc <rand>
    1488:	b8 01       	movw	r22, r16
    148a:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <__divmodhi4>
    148e:	bc 01       	movw	r22, r24
    1490:	6f 5f       	subi	r22, 0xFF	; 255
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	c7 01       	movw	r24, r14
    1496:	0e 94 be 38 	call	0x717c	; 0x717c <__udivmodhi4>
    149a:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
    149c:	0e 94 c9 2a 	call	0x5592	; 0x5592 <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
    14a0:	dd 23       	and	r29, r29
    14a2:	a1 f2       	breq	.-88     	; 0x144c <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
    14a4:	10 92 b3 0b 	sts	0x0BB3, r1
  bmac_rfTxInfo.ackRequest = 0;
    14a8:	10 92 b4 0b 	sts	0x0BB4, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
    14ac:	20 91 7b 04 	lds	r18, 0x047B
    14b0:	30 91 7c 04 	lds	r19, 0x047C
    14b4:	88 ee       	ldi	r24, 0xE8	; 232
    14b6:	93 e0       	ldi	r25, 0x03	; 3
    14b8:	28 9f       	mul	r18, r24
    14ba:	e0 01       	movw	r28, r0
    14bc:	29 9f       	mul	r18, r25
    14be:	d0 0d       	add	r29, r0
    14c0:	38 9f       	mul	r19, r24
    14c2:	d0 0d       	add	r29, r0
    14c4:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    14c6:	60 91 7f 04 	lds	r22, 0x047F
    14ca:	70 91 80 04 	lds	r23, 0x0480
    14ce:	80 91 81 04 	lds	r24, 0x0481
    14d2:	90 91 82 04 	lds	r25, 0x0482
    14d6:	20 e4       	ldi	r18, 0x40	; 64
    14d8:	32 e4       	ldi	r19, 0x42	; 66
    14da:	4f e0       	ldi	r20, 0x0F	; 15
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    14e2:	c2 0f       	add	r28, r18
    14e4:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    14e6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    14ea:	be 01       	movw	r22, r28
    14ec:	8e ea       	ldi	r24, 0xAE	; 174
    14ee:	9b e0       	ldi	r25, 0x0B	; 11
    14f0:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <rf_tx_packet_repeat>
    14f4:	80 93 85 04 	sts	0x0485, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    14f8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <rf_rx_off>
  tx_data_ready = 0;
    14fc:	10 92 88 04 	sts	0x0488, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    1500:	80 91 48 15 	lds	r24, 0x1548
    1504:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <nrk_event_signal>
  return NRK_OK;
}
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	08 95       	ret

00001518 <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    1518:	80 91 86 04 	lds	r24, 0x0486
    151c:	81 11       	cpse	r24, r1
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    1520:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
    1524:	f9 cf       	rjmp	.-14     	; 0x1518 <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    1526:	80 91 ad 0b 	lds	r24, 0x0BAD
    152a:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
  if (v == NRK_ERROR)
    152e:	8f 3f       	cpi	r24, 0xFF	; 255
    1530:	21 f4       	brne	.+8      	; 0x153a <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1532:	8c e0       	ldi	r24, 0x0C	; 12
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    153a:	c1 2c       	mov	r12, r1
    153c:	d1 2c       	mov	r13, r1
    153e:	76 01       	movw	r14, r12
    1540:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    1542:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <rf_power_up>
    if (is_enabled) {
    1546:	80 91 83 04 	lds	r24, 0x0483
    154a:	88 23       	and	r24, r24
    154c:	69 f1       	breq	.+90     	; 0x15a8 <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    154e:	80 91 87 04 	lds	r24, 0x0487
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	41 f4       	brne	.+16     	; 0x1566 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
    1556:	0e 94 8a 09 	call	0x1314	; 0x1314 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    155a:	81 11       	cpse	r24, r1
    155c:	08 c0       	rjmp	.+16     	; 0x156e <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    155e:	0e 94 9e 09 	call	0x133c	; 0x133c <_bmac_rx>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	21 f4       	brne	.+8      	; 0x156e <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    1566:	80 91 bc 0d 	lds	r24, 0x0DBC
    156a:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    156e:	80 91 88 04 	lds	r24, 0x0488
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	11 f4       	brne	.+4      	; 0x157a <bmac_nw_task+0x62>
        _bmac_tx ();
    1576:	0e 94 04 0a 	call	0x1408	; 0x1408 <_bmac_tx>
      }
      rf_rx_off ();
    157a:	0e 94 99 17 	call	0x2f32	; 0x2f32 <rf_rx_off>
      rf_power_down ();
    157e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    1582:	20 91 7b 04 	lds	r18, 0x047B
    1586:	30 91 7c 04 	lds	r19, 0x047C
    158a:	40 91 7d 04 	lds	r20, 0x047D
    158e:	50 91 7e 04 	lds	r21, 0x047E
    1592:	60 91 7f 04 	lds	r22, 0x047F
    1596:	70 91 80 04 	lds	r23, 0x0480
    159a:	80 91 81 04 	lds	r24, 0x0481
    159e:	90 91 82 04 	lds	r25, 0x0482
    15a2:	0e 94 1e 2b 	call	0x563c	; 0x563c <nrk_wait>
    15a6:	cd cf       	rjmp	.-102    	; 0x1542 <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    15a8:	80 91 ad 0b 	lds	r24, 0x0BAD
    15ac:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    15b0:	c7 01       	movw	r24, r14
    15b2:	b6 01       	movw	r22, r12
    15b4:	00 90 ad 0b 	lds	r0, 0x0BAD
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <bmac_nw_task+0xaa>
    15ba:	66 0f       	add	r22, r22
    15bc:	77 1f       	adc	r23, r23
    15be:	88 1f       	adc	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	d2 f7       	brpl	.-12     	; 0x15ba <bmac_nw_task+0xa2>
    15c6:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	00 90 ad 0b 	lds	r0, 0x0BAD
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <bmac_nw_task+0xc4>
    15d4:	b6 95       	lsr	r27
    15d6:	a7 95       	ror	r26
    15d8:	97 95       	ror	r25
    15da:	87 95       	ror	r24
    15dc:	0a 94       	dec	r0
    15de:	d2 f7       	brpl	.-12     	; 0x15d4 <bmac_nw_task+0xbc>
    15e0:	80 ff       	sbrs	r24, 0
    15e2:	e2 cf       	rjmp	.-60     	; 0x15a8 <bmac_nw_task+0x90>
    15e4:	ae cf       	rjmp	.-164    	; 0x1542 <bmac_nw_task+0x2a>

000015e6 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    15e6:	6c e8       	ldi	r22, 0x8C	; 140
    15e8:	7a e0       	ldi	r23, 0x0A	; 10
    15ea:	8d e0       	ldi	r24, 0x0D	; 13
    15ec:	95 e0       	ldi	r25, 0x05	; 5
    15ee:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	50 e0       	ldi	r21, 0x00	; 0
    15f6:	6d e8       	ldi	r22, 0x8D	; 141
    15f8:	74 e0       	ldi	r23, 0x04	; 4
    15fa:	8d e0       	ldi	r24, 0x0D	; 13
    15fc:	95 e0       	ldi	r25, 0x05	; 5
    15fe:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    1602:	ed e0       	ldi	r30, 0x0D	; 13
    1604:	f5 e0       	ldi	r31, 0x05	; 5
    1606:	84 e1       	ldi	r24, 0x14	; 20
    1608:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    160e:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    1610:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    1612:	13 86       	std	Z+11, r1	; 0x0b
    1614:	14 86       	std	Z+12, r1	; 0x0c
    1616:	15 86       	std	Z+13, r1	; 0x0d
    1618:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	9d e2       	ldi	r25, 0x2D	; 45
    161e:	a1 e3       	ldi	r26, 0x31	; 49
    1620:	b1 e0       	ldi	r27, 0x01	; 1
    1622:	87 87       	std	Z+15, r24	; 0x0f
    1624:	90 8b       	std	Z+16, r25	; 0x10
    1626:	a1 8b       	std	Z+17, r26	; 0x11
    1628:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    162a:	13 8a       	std	Z+19, r1	; 0x13
    162c:	14 8a       	std	Z+20, r1	; 0x14
    162e:	15 8a       	std	Z+21, r1	; 0x15
    1630:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    1632:	17 8a       	std	Z+23, r1	; 0x17
    1634:	10 8e       	std	Z+24, r1	; 0x18
    1636:	11 8e       	std	Z+25, r1	; 0x19
    1638:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    163a:	13 8e       	std	Z+27, r1	; 0x1b
    163c:	14 8e       	std	Z+28, r1	; 0x1c
    163e:	15 8e       	std	Z+29, r1	; 0x1d
    1640:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    1642:	17 8e       	std	Z+31, r1	; 0x1f
    1644:	10 a2       	std	Z+32, r1	; 0x20
    1646:	11 a2       	std	Z+33, r1	; 0x21
    1648:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    164a:	cf 01       	movw	r24, r30
    164c:	0c 94 90 29 	jmp	0x5320	; 0x5320 <nrk_activate_task>

00001650 <open>:
}

int8_t open(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    // Note that here nothing needs to be done for the I2C. This is the original
    // code for the firefly 2.2 board driver
	if (is_open == 1) return NRK_ERROR;
    1650:	80 91 7a 15 	lds	r24, 0x157A
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	11 f4       	brne	.+4      	; 0x165c <open+0xc>
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	08 95       	ret
    is_open = 1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	80 93 7a 15 	sts	0x157A, r24
    if (opt & READ_FLAG) {
    1662:	60 ff       	sbrs	r22, 0
    1664:	18 c0       	rjmp	.+48     	; 0x1696 <open+0x46>
        // Turn on Sensor Node Power
        //PORTE &= ~(PWR_CTRL_MASK);
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_set(PWR_CTRL_PIN);
    1666:	80 91 29 02 	lds	r24, 0x0229
    166a:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <nrk_gpio_set>
        channel = 0;
    166e:	10 92 7f 15 	sts	0x157F, r1
        ADC_SET_CHANNEL(0);
    1672:	80 91 7c 00 	lds	r24, 0x007C
    1676:	80 7e       	andi	r24, 0xE0	; 224
    1678:	80 93 7c 00 	sts	0x007C, r24
    167c:	80 91 7c 00 	lds	r24, 0x007C
    1680:	90 91 7c 00 	lds	r25, 0x007C
    1684:	80 7e       	andi	r24, 0xE0	; 224
    1686:	89 2b       	or	r24, r25
    1688:	80 93 7c 00 	sts	0x007C, r24
        nrk_spin_wait_us(ADC_STARTUP_DELAY);
    168c:	88 ee       	ldi	r24, 0xE8	; 232
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	0e 94 28 32 	call	0x6450	; 0x6450 <nrk_spin_wait_us>
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <open+0x50>
    1696:	86 2f       	mov	r24, r22
    1698:	86 70       	andi	r24, 0x06	; 6
        return NRK_OK;
    }
    if (opt & WRITE_FLAG) {
        return NRK_ERROR;
    }
    if (opt & APPEND_FLAG) {
    169a:	f1 f6       	brne	.-68     	; 0x1658 <open+0x8>
        return NRK_ERROR;
    }
    if (((opt)&(READ_FLAG | WRITE_FLAG | APPEND_FLAG)) == 0)
    169c:	67 70       	andi	r22, 0x07	; 7
    169e:	e1 f2       	breq	.-72     	; 0x1658 <open+0x8>
        return NRK_ERROR;
    else return NRK_OK;
    16a0:	81 e0       	ldi	r24, 0x01	; 1

}
    16a2:	08 95       	ret

000016a4 <close>:

int8_t close(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    // Turn off sensor power
    //PORTE |= PWR_CTRL_MASK;
    nrk_gpio_clr(PWR_CTRL_PIN);
    16a4:	80 91 29 02 	lds	r24, 0x0229
    16a8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <nrk_gpio_clr>
    //PORTE &= ~(PWR_CTRL_MASK);
    	is_open = 0;
    16ac:	10 92 7a 15 	sts	0x157A, r1
    close_i2c(); // Shut down the I2C
    16b0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <close_i2c>
    ADC_DISABLE();
    16b4:	ea e7       	ldi	r30, 0x7A	; 122
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8f 77       	andi	r24, 0x7F	; 127
    16bc:	80 83       	st	Z, r24
    return NRK_OK;
}
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	08 95       	ret

000016c2 <get_status>:

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    16c2:	61 30       	cpi	r22, 0x01	; 1
    16c4:	19 f4       	brne	.+6      	; 0x16cc <get_status+0xa>
    16c6:	80 91 7f 15 	lds	r24, 0x157F
    16ca:	08 95       	ret
    return NRK_ERROR;
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
}
    16ce:	08 95       	ret

000016d0 <set_status>:
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    // use "key" and "value" here
    if (key == SENSOR_SELECT) {
    16d0:	61 30       	cpi	r22, 0x01	; 1
    16d2:	91 f5       	brne	.+100    	; 0x1738 <set_status+0x68>
        // Set to audio channel if it is an average value
        if (value == AUDIO_P2P) {
    16d4:	2c 30       	cpi	r18, 0x0C	; 12
    16d6:	81 f4       	brne	.+32     	; 0x16f8 <set_status+0x28>
            channel = value;
    16d8:	20 93 7f 15 	sts	0x157F, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(AUDIO);
    16dc:	80 91 7c 00 	lds	r24, 0x007C
    16e0:	80 7e       	andi	r24, 0xE0	; 224
    16e2:	80 93 7c 00 	sts	0x007C, r24
    16e6:	90 91 7c 00 	lds	r25, 0x007C
    16ea:	20 91 7c 00 	lds	r18, 0x007C
    16ee:	89 2f       	mov	r24, r25
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	80 7e       	andi	r24, 0xE0	; 224
    16f4:	83 60       	ori	r24, 0x03	; 3
    16f6:	17 c0       	rjmp	.+46     	; 0x1726 <set_status+0x56>
            nrk_spin_wait_us(ADC_SETUP_DELAY);
            return NRK_OK;

        } else {
            if (value > 13) { // Update for all of the sensors
    16f8:	2e 30       	cpi	r18, 0x0E	; 14
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <set_status+0x34>
                _nrk_errno_set(1);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
    1702:	1a c0       	rjmp	.+52     	; 0x1738 <set_status+0x68>
                return NRK_ERROR;
            }
            channel = value;
    1704:	20 93 7f 15 	sts	0x157F, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(channel);
    1708:	80 91 7c 00 	lds	r24, 0x007C
    170c:	80 7e       	andi	r24, 0xE0	; 224
    170e:	80 93 7c 00 	sts	0x007C, r24
    1712:	90 91 7c 00 	lds	r25, 0x007C
    1716:	20 91 7c 00 	lds	r18, 0x007C
    171a:	89 2f       	mov	r24, r25
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	80 7e       	andi	r24, 0xE0	; 224
    1720:	30 91 7f 15 	lds	r19, 0x157F
    1724:	83 2b       	or	r24, r19
    1726:	82 2b       	or	r24, r18
    1728:	80 93 7c 00 	sts	0x007C, r24
            nrk_spin_wait_us(ADC_SETUP_DELAY);
    172c:	88 ec       	ldi	r24, 0xC8	; 200
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 28 32 	call	0x6450	; 0x6450 <nrk_spin_wait_us>
            return NRK_OK;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	08 95       	ret
        }
    }
    return NRK_ERROR;
    1738:	8f ef       	ldi	r24, 0xFF	; 255
}
    173a:	08 95       	ret

0000173c <get_eeprom_values>:

void get_eeprom_values(){
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	66 97       	sbiw	r28, 0x16	; 22
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
   uint8_t raw_eeprom_data[22]; // Buffer for storing the raw values being returned
   int j = 0;
   int rv;

   // Get the values
  rv = ee24xx_read_bytes(0xAA, 22, raw_eeprom_data);
    1750:	ae 01       	movw	r20, r28
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	66 e1       	ldi	r22, 0x16	; 22
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	8a ea       	ldi	r24, 0xAA	; 170
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <ee24xx_read_bytes>
    1762:	fe 01       	movw	r30, r28
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	a0 e5       	ldi	r26, 0x50	; 80
    1768:	b5 e1       	ldi	r27, 0x15	; 21
    176a:	9e 01       	movw	r18, r28
    176c:	29 5e       	subi	r18, 0xE9	; 233
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
      eeprom_values[j] = ((raw_eeprom_data[2*j] | 0x0000) << 8) |
    1770:	80 81       	ld	r24, Z
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	98 2f       	mov	r25, r24
    1776:	88 27       	eor	r24, r24
    1778:	41 81       	ldd	r20, Z+1	; 0x01
    177a:	84 2b       	or	r24, r20
    177c:	8d 93       	st	X+, r24
    177e:	9d 93       	st	X+, r25
    1780:	32 96       	adiw	r30, 0x02	; 2
      //  printf("%02x ", raw_eeprom_data[j]);
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
    1782:	e2 17       	cp	r30, r18
    1784:	f3 07       	cpc	r31, r19
    1786:	a1 f7       	brne	.-24     	; 0x1770 <get_eeprom_values+0x34>
      printf("MC: %i\r\n", MC);
      printf("MD: %i\r\n", MD);
      printf("-------------------------------------------------\r\n");
  }
  */
}
    1788:	66 96       	adiw	r28, 0x16	; 22
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <init_adc>:
    return val;
}
*/
void init_adc() {
    // Initialize values here
    ADC_INIT();
    179a:	ea e7       	ldi	r30, 0x7A	; 122
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	80 83       	st	Z, r24
    ADC_ENABLE();
    17a2:	80 81       	ld	r24, Z
    17a4:	80 68       	ori	r24, 0x80	; 128
    17a6:	80 83       	st	Z, r24
    channel = 0;
    17a8:	10 92 7f 15 	sts	0x157F, r1
    ADC_SET_CHANNEL(0);
    17ac:	ac e7       	ldi	r26, 0x7C	; 124
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	8c 91       	ld	r24, X
    17b2:	80 7e       	andi	r24, 0xE0	; 224
    17b4:	8c 93       	st	X, r24
    17b6:	8c 91       	ld	r24, X
    17b8:	9c 91       	ld	r25, X
    17ba:	80 7e       	andi	r24, 0xE0	; 224
    17bc:	89 2b       	or	r24, r25
    17be:	8c 93       	st	X, r24
    ADC_DISABLE();
    17c0:	80 81       	ld	r24, Z
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	80 83       	st	Z, r24
    17c6:	08 95       	ret

000017c8 <init>:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}

int8_t init(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    17c8:	cf 93       	push	r28
        // For handling the ADC
        // Set the pwr ctrl pin as output
	//DDRE = 0;
        //DDRE |= PWR_CTRL_MASK;
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_direction(PWR_CTRL_PIN, NRK_PIN_OUTPUT);
    17ca:	c0 91 29 02 	lds	r28, 0x0229
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	8c 2f       	mov	r24, r28
    17d2:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <nrk_gpio_direction>
        //nrk_gpio_clr(PWR_CTRL_PIN);
        nrk_gpio_set(PWR_CTRL_PIN);
    17d6:	8c 2f       	mov	r24, r28
    17d8:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <nrk_gpio_set>
	// Input for motion detector
        nrk_gpio_direction(NRK_PORTF_6, NRK_PIN_INPUT );
    17dc:	c0 91 14 02 	lds	r28, 0x0214
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	8c 2f       	mov	r24, r28
    17e4:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTF_6);
    17e8:	8c 2f       	mov	r24, r28
    17ea:	0e 94 75 1d 	call	0x3aea	; 0x3aea <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
    17ee:	c0 91 2a 02 	lds	r28, 0x022A
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	8c 2f       	mov	r24, r28
    17f6:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
    17fa:	8c 2f       	mov	r24, r28
    17fc:	0e 94 75 1d 	call	0x3aea	; 0x3aea <nrk_gpio_clr>
	nrk_gpio_pullups(0);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	0e 94 3d 20 	call	0x407a	; 0x407a <nrk_gpio_pullups>

        init_adc();
    1806:	0e 94 cd 0b 	call	0x179a	; 0x179a <init_adc>
        
        // For handling the I2C
         init_i2c();
    180a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <init_i2c>

	set_i2c_device(BOSCH_EEPROM_ADDRESS);
    180e:	8e ee       	ldi	r24, 0xEE	; 238
    1810:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <set_i2c_device>
        get_eeprom_values();
    1814:	0e 94 9e 0b 	call	0x173c	; 0x173c <get_eeprom_values>
        is_open = 0;
    1818:	10 92 7a 15 	sts	0x157A, r1
        return 1;
    
}
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <delay>:
    ADC_GET_SAMPLE_10(adc_val);
    return adc_val;
}

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0c 94 28 32 	jmp	0x6450	; 0x6450 <nrk_spin_wait_us>

0000182a <get_adc_val>:
    ADC_DISABLE();
}

uint16_t get_adc_val() {
    uint16_t adc_val;
    ADC_SAMPLE_SINGLE();
    182a:	80 91 7a 00 	lds	r24, 0x007A
    182e:	80 64       	ori	r24, 0x40	; 64
    1830:	80 93 7a 00 	sts	0x007A, r24
    1834:	80 91 7a 00 	lds	r24, 0x007A
    1838:	84 ff       	sbrs	r24, 4
    183a:	fc cf       	rjmp	.-8      	; 0x1834 <get_adc_val+0xa>
    delay();
    183c:	0e 94 11 0c 	call	0x1822	; 0x1822 <delay>
    ADC_GET_SAMPLE_10(adc_val);
    1840:	80 91 78 00 	lds	r24, 0x0078
    1844:	20 91 79 00 	lds	r18, 0x0079
    1848:	90 e0       	ldi	r25, 0x00	; 0
    return adc_val;
}
    184a:	92 2b       	or	r25, r18
    184c:	08 95       	ret

0000184e <calc_true_press>:

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
}

int32_t calc_true_press(uint8_t oss){
    184e:	4f 92       	push	r4
    1850:	5f 92       	push	r5
    1852:	6f 92       	push	r6
    1854:	7f 92       	push	r7
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	28 97       	sbiw	r28, 0x08	; 8
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	18 2f       	mov	r17, r24

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
    187e:	c0 90 76 15 	lds	r12, 0x1576
    1882:	d0 90 77 15 	lds	r13, 0x1577
    1886:	e0 90 78 15 	lds	r14, 0x1578
    188a:	f0 90 79 15 	lds	r15, 0x1579
    188e:	20 ea       	ldi	r18, 0xA0	; 160
    1890:	c2 1a       	sub	r12, r18
    1892:	2f e0       	ldi	r18, 0x0F	; 15
    1894:	d2 0a       	sbc	r13, r18
    1896:	e1 08       	sbc	r14, r1
    1898:	f1 08       	sbc	r15, r1
    189a:	c0 92 66 15 	sts	0x1566, r12
    189e:	d0 92 67 15 	sts	0x1567, r13
    18a2:	e0 92 68 15 	sts	0x1568, r14
    18a6:	f0 92 69 15 	sts	0x1569, r15
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
    18aa:	a7 01       	movw	r20, r14
    18ac:	96 01       	movw	r18, r12
    18ae:	c7 01       	movw	r24, r14
    18b0:	b6 01       	movw	r22, r12
    18b2:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    18b6:	4b 01       	movw	r8, r22
    18b8:	5c 01       	movw	r10, r24
    18ba:	5c e0       	ldi	r21, 0x0C	; 12
    18bc:	b5 94       	asr	r11
    18be:	a7 94       	ror	r10
    18c0:	97 94       	ror	r9
    18c2:	87 94       	ror	r8
    18c4:	5a 95       	dec	r21
    18c6:	d1 f7       	brne	.-12     	; 0x18bc <calc_true_press+0x6e>
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
    18c8:	40 91 50 15 	lds	r20, 0x1550
    18cc:	50 91 51 15 	lds	r21, 0x1551
    18d0:	66 27       	eor	r22, r22
    18d2:	57 fd       	sbrc	r21, 7
    18d4:	60 95       	com	r22
    18d6:	76 2f       	mov	r23, r22
    18d8:	db 01       	movw	r26, r22
    18da:	ca 01       	movw	r24, r20
    18dc:	62 e0       	ldi	r22, 0x02	; 2
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	aa 1f       	adc	r26, r26
    18e4:	bb 1f       	adc	r27, r27
    18e6:	6a 95       	dec	r22
    18e8:	d1 f7       	brne	.-12     	; 0x18de <calc_true_press+0x90>
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	ab 83       	std	Y+3, r26	; 0x03
    18f0:	bc 83       	std	Y+4, r27	; 0x04

int32_t calc_true_press(uint8_t oss){

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
    18f2:	a0 91 5e 15 	lds	r26, 0x155E
    18f6:	b0 91 5f 15 	lds	r27, 0x155F
    18fa:	a5 01       	movw	r20, r10
    18fc:	94 01       	movw	r18, r8
    18fe:	0e 94 9a 38 	call	0x7134	; 0x7134 <__mulshisi3>
    1902:	41 2c       	mov	r4, r1
    1904:	e8 e0       	ldi	r30, 0x08	; 8
    1906:	5e 2e       	mov	r5, r30
    1908:	61 2c       	mov	r6, r1
    190a:	71 2c       	mov	r7, r1
    190c:	a3 01       	movw	r20, r6
    190e:	92 01       	movw	r18, r4
    1910:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1914:	2d 83       	std	Y+5, r18	; 0x05
    1916:	3e 83       	std	Y+6, r19	; 0x06
    1918:	4f 83       	std	Y+7, r20	; 0x07
    191a:	58 87       	std	Y+8, r21	; 0x08
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
    191c:	a0 91 52 15 	lds	r26, 0x1552
    1920:	b0 91 53 15 	lds	r27, 0x1553
    1924:	a7 01       	movw	r20, r14
    1926:	96 01       	movw	r18, r12
    1928:	0e 94 9a 38 	call	0x7134	; 0x7134 <__mulshisi3>
    192c:	a3 01       	movw	r20, r6
    192e:	92 01       	movw	r18, r4
    1930:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	af 81       	ldd	r26, Y+7	; 0x07
    193a:	b8 85       	ldd	r27, Y+8	; 0x08
    193c:	82 0f       	add	r24, r18
    193e:	93 1f       	adc	r25, r19
    1940:	a4 1f       	adc	r26, r20
    1942:	b5 1f       	adc	r27, r21
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
    1944:	29 81       	ldd	r18, Y+1	; 0x01
    1946:	3a 81       	ldd	r19, Y+2	; 0x02
    1948:	4b 81       	ldd	r20, Y+3	; 0x03
    194a:	5c 81       	ldd	r21, Y+4	; 0x04
    194c:	82 0f       	add	r24, r18
    194e:	93 1f       	adc	r25, r19
    1950:	a4 1f       	adc	r26, r20
    1952:	b5 1f       	adc	r27, r21
    1954:	01 2e       	mov	r0, r17
    1956:	04 c0       	rjmp	.+8      	; 0x1960 <calc_true_press+0x112>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	aa 1f       	adc	r26, r26
    195e:	bb 1f       	adc	r27, r27
    1960:	0a 94       	dec	r0
    1962:	d2 f7       	brpl	.-12     	; 0x1958 <calc_true_press+0x10a>
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	6e 5f       	subi	r22, 0xFE	; 254
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	8f 4f       	sbci	r24, 0xFF	; 255
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	f4 e0       	ldi	r31, 0x04	; 4
    1972:	4f 2e       	mov	r4, r31
    1974:	51 2c       	mov	r5, r1
    1976:	61 2c       	mov	r6, r1
    1978:	71 2c       	mov	r7, r1
    197a:	a3 01       	movw	r20, r6
    197c:	92 01       	movw	r18, r4
    197e:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1982:	29 83       	std	Y+1, r18	; 0x01
    1984:	3a 83       	std	Y+2, r19	; 0x02
    1986:	4b 83       	std	Y+3, r20	; 0x03
    1988:	5c 83       	std	Y+4, r21	; 0x04
    198a:	20 93 95 15 	sts	0x1595, r18
    198e:	30 93 96 15 	sts	0x1596, r19
    1992:	40 93 97 15 	sts	0x1597, r20
    1996:	50 93 98 15 	sts	0x1598, r21
//    X1 = AC3 * B6 / pow(2,13);                          if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = AC3 * B6 / 8192;                          if(DEBUG) printf("X1 %li\r\n", X1);
    199a:	a0 91 54 15 	lds	r26, 0x1554
    199e:	b0 91 55 15 	lds	r27, 0x1555
    19a2:	a7 01       	movw	r20, r14
    19a4:	96 01       	movw	r18, r12
    19a6:	0e 94 9a 38 	call	0x7134	; 0x7134 <__mulshisi3>
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e2       	ldi	r19, 0x20	; 32
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    19b6:	69 01       	movw	r12, r18
    19b8:	7a 01       	movw	r14, r20
//    X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);      if(DEBUG) printf("X2 %li\r\n", X2);
    X2 = (B1 * (B6 * B6 / 4096)) / 65536;      if(DEBUG) printf("X2 %li\r\n", X2);
    19ba:	a0 91 5c 15 	lds	r26, 0x155C
    19be:	b0 91 5d 15 	lds	r27, 0x155D
    19c2:	a5 01       	movw	r20, r10
    19c4:	94 01       	movw	r18, r8
    19c6:	0e 94 9a 38 	call	0x7134	; 0x7134 <__mulshisi3>
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
//    X3 = ((X1 + X2) + 2) / pow(2,2);                    if(DEBUG) printf("X3 %li\r\n", X3);
    X3 = ((X1 + X2) + 2) / 4;                    if(DEBUG) printf("X3 %li\r\n", X3);
    19d6:	d7 01       	movw	r26, r14
    19d8:	c6 01       	movw	r24, r12
    19da:	82 0f       	add	r24, r18
    19dc:	93 1f       	adc	r25, r19
    19de:	a4 1f       	adc	r26, r20
    19e0:	b5 1f       	adc	r27, r21
    19e2:	bc 01       	movw	r22, r24
    19e4:	cd 01       	movw	r24, r26
    19e6:	6e 5f       	subi	r22, 0xFE	; 254
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	8f 4f       	sbci	r24, 0xFF	; 255
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	a3 01       	movw	r20, r6
    19f0:	92 01       	movw	r18, r4
    19f2:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    19f6:	20 93 80 15 	sts	0x1580, r18
    19fa:	30 93 81 15 	sts	0x1581, r19
    19fe:	40 93 82 15 	sts	0x1582, r20
    1a02:	50 93 83 15 	sts	0x1583, r21
//    B4 = AC4 * (X3 + 32768) / pow(2,15);                if(DEBUG) printf("B4 %lu\r\n", B4);
    B4 = AC4 * (X3 + 32768) / 32768;                if(DEBUG) printf("B4 %lu\r\n", B4);
    1a06:	a0 91 56 15 	lds	r26, 0x1556
    1a0a:	b0 91 57 15 	lds	r27, 0x1557
    1a0e:	30 58       	subi	r19, 0x80	; 128
    1a10:	4f 4f       	sbci	r20, 0xFF	; 255
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e8       	ldi	r19, 0x80	; 128
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	50 e0       	ldi	r21, 0x00	; 0
    1a20:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1a24:	69 01       	movw	r12, r18
    1a26:	7a 01       	movw	r14, r20
    1a28:	20 93 84 15 	sts	0x1584, r18
    1a2c:	30 93 85 15 	sts	0x1585, r19
    1a30:	40 93 86 15 	sts	0x1586, r20
    1a34:	50 93 87 15 	sts	0x1587, r21
    B7 = (UP - B3) * (50000 >> oss);                    if(DEBUG) printf("B7 %lu\r\n", B7);
    1a38:	80 91 8d 15 	lds	r24, 0x158D
    1a3c:	90 91 8e 15 	lds	r25, 0x158E
    1a40:	a0 91 8f 15 	lds	r26, 0x158F
    1a44:	b0 91 90 15 	lds	r27, 0x1590
    1a48:	9c 01       	movw	r18, r24
    1a4a:	ad 01       	movw	r20, r26
    1a4c:	89 80       	ldd	r8, Y+1	; 0x01
    1a4e:	9a 80       	ldd	r9, Y+2	; 0x02
    1a50:	ab 80       	ldd	r10, Y+3	; 0x03
    1a52:	bc 80       	ldd	r11, Y+4	; 0x04
    1a54:	28 19       	sub	r18, r8
    1a56:	39 09       	sbc	r19, r9
    1a58:	4a 09       	sbc	r20, r10
    1a5a:	5b 09       	sbc	r21, r11
    1a5c:	80 e5       	ldi	r24, 0x50	; 80
    1a5e:	93 ec       	ldi	r25, 0xC3	; 195
    1a60:	a0 e0       	ldi	r26, 0x00	; 0
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <calc_true_press+0x224>
    1a6a:	95 95       	asr	r25
    1a6c:	87 95       	ror	r24
    1a6e:	77 95       	ror	r23
    1a70:	67 95       	ror	r22
    1a72:	1a 95       	dec	r17
    1a74:	d2 f7       	brpl	.-12     	; 0x1a6a <calc_true_press+0x21c>
    1a76:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    1a7a:	60 93 89 15 	sts	0x1589, r22
    1a7e:	70 93 8a 15 	sts	0x158A, r23
    1a82:	80 93 8b 15 	sts	0x158B, r24
    1a86:	90 93 8c 15 	sts	0x158C, r25

    if(B7 < 0x80000000)
    1a8a:	97 fd       	sbrc	r25, 7
    1a8c:	11 c0       	rjmp	.+34     	; 0x1ab0 <calc_true_press+0x262>
       P = (B7 * 2)/ B4;
    1a8e:	66 0f       	add	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	a7 01       	movw	r20, r14
    1a98:	96 01       	movw	r18, r12
    1a9a:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    1a9e:	20 93 91 15 	sts	0x1591, r18
    1aa2:	30 93 92 15 	sts	0x1592, r19
    1aa6:	40 93 93 15 	sts	0x1593, r20
    1aaa:	50 93 94 15 	sts	0x1594, r21
    1aae:	12 c0       	rjmp	.+36     	; 0x1ad4 <calc_true_press+0x286>
    else
        P = (B7 / B4) * 2;
    1ab0:	a7 01       	movw	r20, r14
    1ab2:	96 01       	movw	r18, r12
    1ab4:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    1ab8:	da 01       	movw	r26, r20
    1aba:	c9 01       	movw	r24, r18
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	aa 1f       	adc	r26, r26
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	80 93 91 15 	sts	0x1591, r24
    1ac8:	90 93 92 15 	sts	0x1592, r25
    1acc:	a0 93 93 15 	sts	0x1593, r26
    1ad0:	b0 93 94 15 	sts	0x1594, r27
                                                        if(DEBUG) printf("P %li\r\n", P);
    X1 = (P / 256) * (P / 256);               if(DEBUG) printf("X1 %li\r\n", X1);
    1ad4:	c0 90 91 15 	lds	r12, 0x1591
    1ad8:	d0 90 92 15 	lds	r13, 0x1592
    1adc:	e0 90 93 15 	lds	r14, 0x1593
    1ae0:	f0 90 94 15 	lds	r15, 0x1594
    1ae4:	c7 01       	movw	r24, r14
    1ae6:	b6 01       	movw	r22, r12
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	31 e0       	ldi	r19, 0x01	; 1
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1af4:	ca 01       	movw	r24, r20
    1af6:	b9 01       	movw	r22, r18
    1af8:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
//    X1 = (P / pow(2,8)) * (P / pow(2,8));               if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (X1 * 3038) / 65536;                       if(DEBUG) printf("X1 %li\r\n", X1);
    1b00:	ae ed       	ldi	r26, 0xDE	; 222
    1b02:	bb e0       	ldi	r27, 0x0B	; 11
    1b04:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    1b08:	4c 01       	movw	r8, r24
    1b0a:	bb 24       	eor	r11, r11
    1b0c:	97 fc       	sbrc	r9, 7
    1b0e:	b0 94       	com	r11
    1b10:	ab 2c       	mov	r10, r11
    1b12:	80 92 7b 15 	sts	0x157B, r8
    1b16:	90 92 7c 15 	sts	0x157C, r9
    1b1a:	a0 92 7d 15 	sts	0x157D, r10
    1b1e:	b0 92 7e 15 	sts	0x157E, r11
//    X1 = (X1 * 3038) / pow(2,16);                       if(DEBUG) printf("X1 %li\r\n", X1);
    X2 = (-7357 * P ) / 65536;                      if(DEBUG) printf("X2 %li\r\n", X2);
    1b22:	a3 e4       	ldi	r26, 0x43	; 67
    1b24:	b3 ee       	ldi	r27, 0xE3	; 227
    1b26:	a7 01       	movw	r20, r14
    1b28:	96 01       	movw	r18, r12
    1b2a:	0e 94 9d 38 	call	0x713a	; 0x713a <__mulohisi3>
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1b3a:	20 93 6e 15 	sts	0x156E, r18
    1b3e:	30 93 6f 15 	sts	0x156F, r19
    1b42:	40 93 70 15 	sts	0x1570, r20
    1b46:	50 93 71 15 	sts	0x1571, r21
//	X2 = (-7357 * P ) / pow(2,16);                      if(DEBUG) printf("X2 %li\r\n", X2);
//    P = P + (X1 + X2 + 3791) / pow(2,4);                if(DEBUG) printf("P %li\r\n", P);
    P = P + (X1 + X2 + 3791) / 16;                if(DEBUG) printf("P %li\r\n", P);
    1b4a:	d5 01       	movw	r26, r10
    1b4c:	c4 01       	movw	r24, r8
    1b4e:	82 0f       	add	r24, r18
    1b50:	93 1f       	adc	r25, r19
    1b52:	a4 1f       	adc	r26, r20
    1b54:	b5 1f       	adc	r27, r21
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	61 53       	subi	r22, 0x31	; 49
    1b5c:	71 4f       	sbci	r23, 0xF1	; 241
    1b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b60:	9f 4f       	sbci	r25, 0xFF	; 255
    1b62:	20 e1       	ldi	r18, 0x10	; 16
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1b6e:	c7 01       	movw	r24, r14
    1b70:	b6 01       	movw	r22, r12
    1b72:	62 0f       	add	r22, r18
    1b74:	73 1f       	adc	r23, r19
    1b76:	84 1f       	adc	r24, r20
    1b78:	95 1f       	adc	r25, r21
    1b7a:	60 93 91 15 	sts	0x1591, r22
    1b7e:	70 93 92 15 	sts	0x1592, r23
    1b82:	80 93 93 15 	sts	0x1593, r24
    1b86:	90 93 94 15 	sts	0x1594, r25

    if(DEBUG) printf("Pressure is %li Pascals\r\n", P);

    return P;

}
    1b8a:	28 96       	adiw	r28, 0x08	; 8
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	df 90       	pop	r13
    1ba2:	cf 90       	pop	r12
    1ba4:	bf 90       	pop	r11
    1ba6:	af 90       	pop	r10
    1ba8:	9f 90       	pop	r9
    1baa:	8f 90       	pop	r8
    1bac:	7f 90       	pop	r7
    1bae:	6f 90       	pop	r6
    1bb0:	5f 90       	pop	r5
    1bb2:	4f 90       	pop	r4
    1bb4:	08 95       	ret

00001bb6 <calc_true_temp>:


inline int32_t calc_true_temp(){
    1bb6:	cf 92       	push	r12
    1bb8:	df 92       	push	r13
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29

    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)32768;
    1bc6:	c0 e5       	ldi	r28, 0x50	; 80
    1bc8:	d5 e1       	ldi	r29, 0x15	; 21
    1bca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bce:	40 91 6a 15 	lds	r20, 0x156A
    1bd2:	50 91 6b 15 	lds	r21, 0x156B
    1bd6:	60 91 6c 15 	lds	r22, 0x156C
    1bda:	70 91 6d 15 	lds	r23, 0x156D
    1bde:	9a 01       	movw	r18, r20
    1be0:	ab 01       	movw	r20, r22
    1be2:	28 1b       	sub	r18, r24
    1be4:	39 0b       	sbc	r19, r25
    1be6:	41 09       	sbc	r20, r1
    1be8:	51 09       	sbc	r21, r1
    1bea:	a8 85       	ldd	r26, Y+8	; 0x08
    1bec:	b9 85       	ldd	r27, Y+9	; 0x09
    1bee:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e8       	ldi	r19, 0x80	; 128
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1bfe:	69 01       	movw	r12, r18
    1c00:	7a 01       	movw	r14, r20
    1c02:	20 93 7b 15 	sts	0x157B, r18
    1c06:	30 93 7c 15 	sts	0x157C, r19
    1c0a:	40 93 7d 15 	sts	0x157D, r20
    1c0e:	50 93 7e 15 	sts	0x157E, r21
//    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)pow(2,15);
if(DEBUG) printf("X1 %li\r\n", X1);
//    X2 = (int32_t) MC * pow(2,11) / (X1 + MD);
    X2 = (int32_t) MC * 2048 / (X1 + MD);
    1c12:	6a 89       	ldd	r22, Y+18	; 0x12
    1c14:	7b 89       	ldd	r23, Y+19	; 0x13
    1c16:	cb 01       	movw	r24, r22
    1c18:	aa 27       	eor	r26, r26
    1c1a:	97 fd       	sbrc	r25, 7
    1c1c:	a0 95       	com	r26
    1c1e:	ba 2f       	mov	r27, r26
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	2b e0       	ldi	r18, 0x0B	; 11
    1c26:	66 0f       	add	r22, r22
    1c28:	77 1f       	adc	r23, r23
    1c2a:	88 1f       	adc	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	2a 95       	dec	r18
    1c30:	d1 f7       	brne	.-12     	; 0x1c26 <calc_true_temp+0x70>
    1c32:	0c 89       	ldd	r16, Y+20	; 0x14
    1c34:	1d 89       	ldd	r17, Y+21	; 0x15
    1c36:	22 27       	eor	r18, r18
    1c38:	17 fd       	sbrc	r17, 7
    1c3a:	20 95       	com	r18
    1c3c:	32 2f       	mov	r19, r18
    1c3e:	a9 01       	movw	r20, r18
    1c40:	98 01       	movw	r18, r16
    1c42:	2c 0d       	add	r18, r12
    1c44:	3d 1d       	adc	r19, r13
    1c46:	4e 1d       	adc	r20, r14
    1c48:	5f 1d       	adc	r21, r15
    1c4a:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1c4e:	20 93 6e 15 	sts	0x156E, r18
    1c52:	30 93 6f 15 	sts	0x156F, r19
    1c56:	40 93 70 15 	sts	0x1570, r20
    1c5a:	50 93 71 15 	sts	0x1571, r21
if(DEBUG) printf("X2 %li\r\n", X2);
    B5 = X1 + X2;
    1c5e:	d7 01       	movw	r26, r14
    1c60:	c6 01       	movw	r24, r12
    1c62:	82 0f       	add	r24, r18
    1c64:	93 1f       	adc	r25, r19
    1c66:	a4 1f       	adc	r26, r20
    1c68:	b5 1f       	adc	r27, r21
    1c6a:	80 93 76 15 	sts	0x1576, r24
    1c6e:	90 93 77 15 	sts	0x1577, r25
    1c72:	a0 93 78 15 	sts	0x1578, r26
    1c76:	b0 93 79 15 	sts	0x1579, r27
if(DEBUG) printf("B5 %li\r\n", B5);
//    T = (B5 + 8) / pow(2,4);
    T = (B5 + 8) / 16;
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	68 5f       	subi	r22, 0xF8	; 248
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	20 e1       	ldi	r18, 0x10	; 16
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    1c92:	20 93 72 15 	sts	0x1572, r18
    1c96:	30 93 73 15 	sts	0x1573, r19
    1c9a:	40 93 74 15 	sts	0x1574, r20
    1c9e:	50 93 75 15 	sts	0x1575, r21
if(DEBUG) printf("XT %li\r\n", T);

    if(DEBUG) printf("Temperature is %li /10 degrees Celcius.\r\n", T);

    return T;
}
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	08 95       	ret

00001cb8 <read_uncomp_temp>:

void read_uncomp_temp(){
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <read_uncomp_temp+0x6>
    1cbe:	1f 92       	push	r1
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62

    uint8_t write_buf[1];
    uint8_t rx_buf[2];
    uint8_t i;

    write_buf[0] = 0x2E;
    1cc4:	8e e2       	ldi	r24, 0x2E	; 46
    1cc6:	8b 83       	std	Y+3, r24	; 0x03

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, 1, write_buf);
    1cc8:	ae 01       	movw	r20, r28
    1cca:	4d 5f       	subi	r20, 0xFD	; 253
    1ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	84 ef       	ldi	r24, 0xF4	; 244
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 0f 11 	call	0x221e	; 0x221e <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
 //   nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
    1cda:	84 e9       	ldi	r24, 0x94	; 148
    1cdc:	91 e1       	ldi	r25, 0x11	; 17
    1cde:	0e 94 28 32 	call	0x6450	; 0x6450 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7
    ee24xx_read_bytes(0xF6, 2, rx_buf);
    1ce2:	ae 01       	movw	r20, r28
    1ce4:	4f 5f       	subi	r20, 0xFF	; 255
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	86 ef       	ldi	r24, 0xF6	; 246
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <ee24xx_read_bytes>
//    if(DEBUG){
  //      for(i = 0; i < 2; i++)
  //          printf("uncomp_temp[%i] is %u\r\n", i, rx_buf[i]);
  //  }

    UT = (((uint16_t)rx_buf[0] | 0x0000) << 8) | ((uint16_t)rx_buf[1]);
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	98 2f       	mov	r25, r24
    1cfa:	88 27       	eor	r24, r24
    1cfc:	2a 81       	ldd	r18, Y+2	; 0x02
    1cfe:	82 2b       	or	r24, r18
    1d00:	a0 e0       	ldi	r26, 0x00	; 0
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	80 93 6a 15 	sts	0x156A, r24
    1d08:	90 93 6b 15 	sts	0x156B, r25
    1d0c:	a0 93 6c 15 	sts	0x156C, r26
    1d10:	b0 93 6d 15 	sts	0x156D, r27

//    if(DEBUG)
  //   printf("UT is %i\r\n", UT);

}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	08 95       	ret

00001d20 <calc_temp>:


int32_t calc_temp(){
    read_uncomp_temp();
    1d20:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <read_uncomp_temp>
    return calc_true_temp();
    1d24:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <calc_true_temp>

00001d28 <read_uncomp_press>:
int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
}

void read_uncomp_press(uint8_t oss){
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <read_uncomp_press+0x8>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <read_uncomp_press+0xa>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	18 2f       	mov	r17, r24

    uint8_t write_buf[1]; // Used to send a value to the Bosch sensor
    uint8_t rx_buf[3]; // Used to store the received values from the sensor
    uint8_t i;

    write_buf[0] = 0x34 + (oss << 6);
    1d38:	82 95       	swap	r24
    1d3a:	88 0f       	add	r24, r24
    1d3c:	88 0f       	add	r24, r24
    1d3e:	80 7c       	andi	r24, 0xC0	; 192
    1d40:	8c 5c       	subi	r24, 0xCC	; 204
    1d42:	8c 83       	std	Y+4, r24	; 0x04

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, sizeof(write_buf), write_buf);
    1d44:	ae 01       	movw	r20, r28
    1d46:	4c 5f       	subi	r20, 0xFC	; 252
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	84 ef       	ldi	r24, 0xF4	; 244
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 0f 11 	call	0x221e	; 0x221e <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
//    nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
    1d56:	84 e9       	ldi	r24, 0x94	; 148
    1d58:	91 e1       	ldi	r25, 0x11	; 17
    1d5a:	0e 94 28 32 	call	0x6450	; 0x6450 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7, 0xF8
    ee24xx_read_bytes(PRESS_BASE_REGISTER, sizeof(rx_buf), rx_buf);
    1d5e:	ae 01       	movw	r20, r28
    1d60:	4f 5f       	subi	r20, 0xFF	; 255
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	63 e0       	ldi	r22, 0x03	; 3
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	86 ef       	ldi	r24, 0xF6	; 246
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <ee24xx_read_bytes>
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
    1d70:	2a 81       	ldd	r18, Y+2	; 0x02
            printf("uncomp_press[%i] is %u\r\n", i, rx_buf[i]);
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e0       	ldi	r26, 0x00	; 0
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	99 27       	eor	r25, r25
    1d7e:	88 27       	eor	r24, r24
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
    1d80:	92 2b       	or	r25, r18
     UP = UP  + rx_buf[2];
    1d82:	2b 81       	ldd	r18, Y+3	; 0x03
    1d84:	82 0f       	add	r24, r18
    1d86:	91 1d       	adc	r25, r1
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	b1 1d       	adc	r27, r1
     UP = UP >> (8-oss);
    1d8c:	28 e0       	ldi	r18, 0x08	; 8
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	21 1b       	sub	r18, r17
    1d92:	31 09       	sbc	r19, r1
    1d94:	04 c0       	rjmp	.+8      	; 0x1d9e <read_uncomp_press+0x76>
    1d96:	b5 95       	asr	r27
    1d98:	a7 95       	ror	r26
    1d9a:	97 95       	ror	r25
    1d9c:	87 95       	ror	r24
    1d9e:	2a 95       	dec	r18
    1da0:	d2 f7       	brpl	.-12     	; 0x1d96 <read_uncomp_press+0x6e>
    1da2:	80 93 8d 15 	sts	0x158D, r24
    1da6:	90 93 8e 15 	sts	0x158E, r25
    1daa:	a0 93 8f 15 	sts	0x158F, r26
    1dae:	b0 93 90 15 	sts	0x1590, r27

 //    if(DEBUG)
 //    printf("UP is %li\r\n", UP);

}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	08 95       	ret

00001dc2 <calc_press>:
    read_uncomp_temp();
    return calc_true_temp();
}


int32_t calc_press(uint8_t oss){
    1dc2:	cf 93       	push	r28
    1dc4:	c8 2f       	mov	r28, r24
    read_uncomp_press(oss);
    1dc6:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <read_uncomp_press>
    return calc_true_press(oss);
    1dca:	8c 2f       	mov	r24, r28
}
    1dcc:	cf 91       	pop	r28
}


int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
    1dce:	0c 94 27 0c 	jmp	0x184e	; 0x184e <calc_true_press>

00001dd2 <read>:
        return NRK_ERROR;
    else return NRK_OK;

}

int8_t read(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29

    int32_t value_from_sensor;



    ADC_ENABLE();
    1de4:	80 91 7a 00 	lds	r24, 0x007A
    1de8:	80 68       	ori	r24, 0x80	; 128
    1dea:	80 93 7a 00 	sts	0x007A, r24
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	82 0f       	add	r24, r18
    1df2:	82 30       	cpi	r24, 0x02	; 2
    1df4:	18 f0       	brcs	.+6      	; 0x1dfc <read+0x2a>
    1df6:	24 30       	cpi	r18, 0x04	; 4
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <read+0x2a>
    1dfa:	a8 c0       	rjmp	.+336    	; 0x1f4c <read+0x17a>
    1dfc:	12 2f       	mov	r17, r18
    1dfe:	ea 01       	movw	r28, r20
    if ((channel != TEMP2) && (channel != PRESS) && channel <= 7) {
    1e00:	80 91 7f 15 	lds	r24, 0x157F
    1e04:	88 30       	cpi	r24, 0x08	; 8
    1e06:	78 f4       	brcc	.+30     	; 0x1e26 <read+0x54>
        /* Conversion to 8-bit value*/
        uint16_t val = get_adc_val();
    1e08:	0e 94 15 0c 	call	0x182a	; 0x182a <get_adc_val>

        if (size == 2) {
    1e0c:	12 30       	cpi	r17, 0x02	; 2
    1e0e:	19 f4       	brne	.+6      	; 0x1e16 <read+0x44>
            buffer[count] = val & 0xFF;
    1e10:	88 83       	st	Y, r24
            count++;
            buffer[count] = (val >> 8) & 0xFF;
    1e12:	99 83       	std	Y+1, r25	; 0x01
    1e14:	1e c0       	rjmp	.+60     	; 0x1e52 <read+0x80>
        }

        if (size == 1) {
    1e16:	11 30       	cpi	r17, 0x01	; 1
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <read+0x4a>
    1e1a:	7a c0       	rjmp	.+244    	; 0x1f10 <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	96 95       	lsr	r25
    1e22:	87 95       	ror	r24
    1e24:	1e c0       	rjmp	.+60     	; 0x1e62 <read+0x90>
        }


    } else if (channel == MOTION ){
    1e26:	8d 30       	cpi	r24, 0x0D	; 13
    1e28:	f1 f4       	brne	.+60     	; 0x1e66 <read+0x94>

	// Pull the pin low to dissipate charge otherwise it always floats high
	// In the future, we either need a buffer or a tiny pull down 
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_OUTPUT);
    1e2a:	f0 90 2a 02 	lds	r15, 0x022A
    1e2e:	61 e0       	ldi	r22, 0x01	; 1
    1e30:	8f 2d       	mov	r24, r15
    1e32:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
    1e36:	8f 2d       	mov	r24, r15
    1e38:	0e 94 75 1d 	call	0x3aea	; 0x3aea <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	8f 2d       	mov	r24, r15
    1e40:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <nrk_gpio_direction>
	if(size==2) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); count++; buffer[count]=0;  }
    1e44:	12 30       	cpi	r17, 0x02	; 2
    1e46:	39 f4       	brne	.+14     	; 0x1e56 <read+0x84>
    1e48:	8f 2d       	mov	r24, r15
    1e4a:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <nrk_gpio_get>
    1e4e:	88 83       	st	Y, r24
    1e50:	19 82       	std	Y+1, r1	; 0x01
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	74 c0       	rjmp	.+232    	; 0x1f3e <read+0x16c>
	if(size==1) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); }
    1e56:	11 30       	cpi	r17, 0x01	; 1
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <read+0x8a>
    1e5a:	5a c0       	rjmp	.+180    	; 0x1f10 <read+0x13e>
    1e5c:	8f 2d       	mov	r24, r15
    1e5e:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <nrk_gpio_get>
    1e62:	88 83       	st	Y, r24
    1e64:	55 c0       	rjmp	.+170    	; 0x1f10 <read+0x13e>
     } 
	else if (channel == AUDIO_P2P) {
    1e66:	8c 30       	cpi	r24, 0x0C	; 12
    1e68:	b9 f5       	brne	.+110    	; 0x1ed8 <read+0x106>
    1e6a:	a1 2c       	mov	r10, r1
    1e6c:	bb 24       	eor	r11, r11
    1e6e:	b3 94       	inc	r11
    1e70:	e1 2c       	mov	r14, r1
    1e72:	f1 2c       	mov	r15, r1
    1e74:	cc 24       	eor	r12, r12
    1e76:	c3 94       	inc	r12
    1e78:	64 e0       	ldi	r22, 0x04	; 4
    1e7a:	d6 2e       	mov	r13, r22
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
            // 10ms snapshot at around 11KHz measured on scope
	    ADC_SAMPLE_SINGLE();
    1e7c:	80 91 7a 00 	lds	r24, 0x007A
    1e80:	80 64       	ori	r24, 0x40	; 64
    1e82:	80 93 7a 00 	sts	0x007A, r24
    1e86:	80 91 7a 00 	lds	r24, 0x007A
    1e8a:	84 ff       	sbrs	r24, 4
    1e8c:	fc cf       	rjmp	.-8      	; 0x1e86 <read+0xb4>
            nrk_spin_wait_us(32);
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 28 32 	call	0x6450	; 0x6450 <nrk_spin_wait_us>
    	    ADC_GET_SAMPLE_10(val);
    1e96:	80 91 78 00 	lds	r24, 0x0078
    1e9a:	20 91 79 00 	lds	r18, 0x0079
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	92 2b       	or	r25, r18
    1ea2:	8c 15       	cp	r24, r12
    1ea4:	9d 05       	cpc	r25, r13
    1ea6:	08 f4       	brcc	.+2      	; 0x1eaa <read+0xd8>
    1ea8:	6c 01       	movw	r12, r24
    1eaa:	e8 16       	cp	r14, r24
    1eac:	f9 06       	cpc	r15, r25
    1eae:	08 f4       	brcc	.+2      	; 0x1eb2 <read+0xe0>
    1eb0:	7c 01       	movw	r14, r24
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	a8 1a       	sub	r10, r24
    1eb6:	b1 08       	sbc	r11, r1
        //uint16_t val=get_adc_val();
        uint16_t val, min, max;
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
    1eb8:	09 f7       	brne	.-62     	; 0x1e7c <read+0xaa>
            nrk_spin_wait_us(32);
    	    ADC_GET_SAMPLE_10(val);
            if (val < min)min = val;
            if (val > max)max = val;
        }
        val = max - min;
    1eba:	ec 18       	sub	r14, r12
    1ebc:	fd 08       	sbc	r15, r13
        if (size == 2) {
    1ebe:	12 30       	cpi	r17, 0x02	; 2
    1ec0:	19 f4       	brne	.+6      	; 0x1ec8 <read+0xf6>
            buffer[count] = val & 0xFF;
    1ec2:	e8 82       	st	Y, r14
            count++;
            buffer[count] = (val >> 8) & 0xFF;
    1ec4:	f9 82       	std	Y+1, r15	; 0x01
    1ec6:	c5 cf       	rjmp	.-118    	; 0x1e52 <read+0x80>
        }

        if (size == 1) {
    1ec8:	11 30       	cpi	r17, 0x01	; 1
    1eca:	11 f5       	brne	.+68     	; 0x1f10 <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
    1ecc:	f6 94       	lsr	r15
    1ece:	e7 94       	ror	r14
    1ed0:	f6 94       	lsr	r15
    1ed2:	e7 94       	ror	r14
    1ed4:	e8 82       	st	Y, r14
    1ed6:	1c c0       	rjmp	.+56     	; 0x1f10 <read+0x13e>
        }
    }
    else if(channel == HUMIDITY)
    1ed8:	8b 30       	cpi	r24, 0x0B	; 11
    1eda:	e1 f4       	brne	.+56     	; 0x1f14 <read+0x142>
    {
	h_cnt=0;
    1edc:	10 92 88 15 	sts	0x1588, r1
	// Port F.2
	// Wait while pin is high
	do{
	}while((PINF & 0x4) == 0x4 );
    1ee0:	7a 99       	sbic	0x0f, 2	; 15
    1ee2:	fe cf       	rjmp	.-4      	; 0x1ee0 <read+0x10e>
	// Wait while pin is low
	do{
	}while((PINF & 0x4) == 0 );
    1ee4:	7a 9b       	sbis	0x0f, 2	; 15
    1ee6:	fe cf       	rjmp	.-4      	; 0x1ee4 <read+0x112>
	//_nrk_high_speed_timer_stop();
	//_nrk_high_speed_timer_reset();
	//_nrk_high_speed_timer_start();
	do{
	// Make h_cnt only 8 bit so it accumulates faster
	h_cnt++;
    1ee8:	80 91 88 15 	lds	r24, 0x1588
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	80 93 88 15 	sts	0x1588, r24
	}while((PINF & 0x4) == 0x4 );
    1ef2:	7a 99       	sbic	0x0f, 2	; 15
    1ef4:	f9 cf       	rjmp	.-14     	; 0x1ee8 <read+0x116>
//	h_cnt=_nrk_high_speed_timer_get();
	buffer[0]=h_cnt&0xff;
    1ef6:	88 83       	st	Y, r24
	buffer[1]=h_cnt >> 8;
    1ef8:	80 91 88 15 	lds	r24, 0x1588
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	19 82       	std	Y+1, r1	; 0x01
	buffer[2]=h_cnt >> 16;
    1f00:	33 0f       	add	r19, r19
    1f02:	22 0b       	sbc	r18, r18
    1f04:	32 2f       	mov	r19, r18
    1f06:	2a 83       	std	Y+2, r18	; 0x02
	buffer[3]=h_cnt >> 24;
    1f08:	99 0f       	add	r25, r25
    1f0a:	88 0b       	sbc	r24, r24
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
    int32_t value_from_sensor;



    ADC_ENABLE();
    uint8_t count = 0;
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	15 c0       	rjmp	.+42     	; 0x1f3e <read+0x16c>
	buffer[3]=h_cnt >> 24;

    }
    // Here the special cases of the I2C sensors (pressure and temperature)
    // are dealt with
    else if(channel == TEMP2 || channel == PRESS){
    1f14:	97 ef       	ldi	r25, 0xF7	; 247
    1f16:	98 0f       	add	r25, r24
    1f18:	92 30       	cpi	r25, 0x02	; 2
    1f1a:	d0 f7       	brcc	.-12     	; 0x1f10 <read+0x13e>

        // Size must be 2 for these measurements. If the user has specified 1,
        // give them a zero to indicate something is wrong
        if(size != 4)
    1f1c:	24 30       	cpi	r18, 0x04	; 4
    1f1e:	b1 f4       	brne	.+44     	; 0x1f4c <read+0x17a>
            return 0;

        if(channel == TEMP2)
    1f20:	8a 30       	cpi	r24, 0x0A	; 10
    1f22:	19 f4       	brne	.+6      	; 0x1f2a <read+0x158>
	{
            value_from_sensor = calc_temp();
    1f24:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <calc_temp>
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <read+0x162>
	}
	    else{
            calc_temp(); /* Note this is neccessary because the pressure calculations depend upon the
    1f2a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <calc_temp>
             raw temperature values*/
            value_from_sensor = calc_press(0); // OSS hard coded to 0 for now, doesn't really matter
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <calc_press>
        }
        // Now break up the value to fit in the buffer
        buffer[count] = value_from_sensor & 0xFF;
    1f34:	68 83       	st	Y, r22
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
    1f36:	79 83       	std	Y+1, r23	; 0x01
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
    1f38:	8a 83       	std	Y+2, r24	; 0x02
        count++;
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;
    1f3a:	9b 83       	std	Y+3, r25	; 0x03
        buffer[count] = value_from_sensor & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
        count++;
    1f3c:	83 e0       	ldi	r24, 0x03	; 3
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;

    }

    ADC_DISABLE();
    1f3e:	90 91 7a 00 	lds	r25, 0x007A
    1f42:	9f 77       	andi	r25, 0x7F	; 127
    1f44:	90 93 7a 00 	sts	0x007A, r25
    count++;
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	01 c0       	rjmp	.+2      	; 0x1f4e <read+0x17c>
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    ADC_DISABLE();
    count++;
    return count;


}
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	ff 90       	pop	r15
    1f56:	ef 90       	pop	r14
    1f58:	df 90       	pop	r13
    1f5a:	cf 90       	pop	r12
    1f5c:	bf 90       	pop	r11
    1f5e:	af 90       	pop	r10
    1f60:	08 95       	ret

00001f62 <dev_manager_ff3_sensors>:



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    1f62:	82 30       	cpi	r24, 0x02	; 2
    1f64:	99 f0       	breq	.+38     	; 0x1f8c <dev_manager_ff3_sensors+0x2a>
    1f66:	38 f4       	brcc	.+14     	; 0x1f76 <dev_manager_ff3_sensors+0x14>
    1f68:	88 23       	and	r24, r24
    1f6a:	69 f0       	breq	.+26     	; 0x1f86 <dev_manager_ff3_sensors+0x24>
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	c9 f4       	brne	.+50     	; 0x1fa2 <dev_manager_ff3_sensors+0x40>

        case INIT:
            return init(action, opt, buffer, size);

        case OPEN:
            return open(action, opt, buffer, size);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <open>



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    1f76:	84 30       	cpi	r24, 0x04	; 4
    1f78:	89 f0       	breq	.+34     	; 0x1f9c <dev_manager_ff3_sensors+0x3a>
    1f7a:	58 f0       	brcs	.+22     	; 0x1f92 <dev_manager_ff3_sensors+0x30>
    1f7c:	85 30       	cpi	r24, 0x05	; 5
    1f7e:	89 f4       	brne	.+34     	; 0x1fa2 <dev_manager_ff3_sensors+0x40>

        case OPEN:
            return open(action, opt, buffer, size);

        case READ:
            return read(action, opt, buffer, size);
    1f80:	85 e0       	ldi	r24, 0x05	; 5
    1f82:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <read>
         * well as the I2C methods of getting inputs, even though only one of
         * them will be used at any given time.
         */

        case INIT:
            return init(action, opt, buffer, size);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <init>

        case READ:
            return read(action, opt, buffer, size);

        case CLOSE:
            return close(action, opt, buffer, size);
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <close>

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    1f92:	61 30       	cpi	r22, 0x01	; 1
    1f94:	61 f4       	brne	.+24     	; 0x1fae <dev_manager_ff3_sensors+0x4c>
    1f96:	80 91 7f 15 	lds	r24, 0x157F
    1f9a:	08 95       	ret

        case GET_STATUS:
            return get_status(action, opt, buffer, size);

        case SET_STATUS:
            return set_status(action, opt, buffer, size);
    1f9c:	84 e0       	ldi	r24, 0x04	; 4
    1f9e:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <set_status>

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	8c e0       	ldi	r24, 0x0C	; 12
    1fa6:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
            return 0;
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	08 95       	ret
    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    return NRK_ERROR;
    1fae:	8f ef       	ldi	r24, 0xFF	; 255

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}
    1fb0:	08 95       	ret

00001fb2 <set_i2c_device>:

uint8_t i2c_address; // The address of the slave node to write to

void set_i2c_device(uint8_t address)
{
    i2c_address = address;
    1fb2:	80 93 9a 15 	sts	0x159A, r24
    1fb6:	08 95       	ret

00001fb8 <init_i2c>:
{

  // Set up the SCL frequency
  // To operate at a clock frequency of 1 MHz, set TWBR and TWPS to 0
  // TODO: Generalize later
  TWBR = 0x02; // TWI Bit Rate Register
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	80 93 b8 00 	sts	0x00B8, r24
  TWSR = 0x00; // TWPS is the value of the prescaler in the TWI status register (the 2 LSB)
    1fbe:	10 92 b9 00 	sts	0x00B9, r1

  // Enable the SCL/SDA
  PRR0 = PRR0 & 0x7F; // Set the MSB in PRRO to 0 (see page 378)
    1fc2:	e4 e6       	ldi	r30, 0x64	; 100
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 77       	andi	r24, 0x7F	; 127
    1fca:	80 83       	st	Z, r24
  TWCR = TWCR | 0x04; // Set the TWEN bit in the TWCR (see page 196)
    1fcc:	ec eb       	ldi	r30, 0xBC	; 188
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	84 60       	ori	r24, 0x04	; 4
    1fd4:	80 83       	st	Z, r24
    1fd6:	08 95       	ret

00001fd8 <close_i2c>:

}

void close_i2c(void)
{
   PRR0 = PRR0 & 0xFF; // Set the MSB in PRRO to 1 (see page 378)
    1fd8:	e4 e6       	ldi	r30, 0x64	; 100
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	80 83       	st	Z, r24
   TWCR = TWCR & 0xFB; // Set the TWEN bit in the TWCR (see page 196)
    1fe0:	ec eb       	ldi	r30, 0xBC	; 188
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8b 7f       	andi	r24, 0xFB	; 251
    1fe8:	80 83       	st	Z, r24
    1fea:	08 95       	ret

00001fec <ee24xx_read_bytes>:

  uint8_t sla, twcr, n = 0;
  int rv = 0;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    1fec:	97 70       	andi	r25, 0x07	; 7
    1fee:	99 0f       	add	r25, r25
    1ff0:	20 91 9a 15 	lds	r18, 0x159A
    1ff4:	92 2b       	or	r25, r18
    1ff6:	35 e6       	ldi	r19, 0x65	; 101
  restart:
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1ff8:	f4 ea       	ldi	r31, 0xA4	; 164
    1ffa:	a4 ea       	ldi	r26, 0xA4	; 164
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1ffc:	e4 e8       	ldi	r30, 0x84	; 132
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    1ffe:	b9 2f       	mov	r27, r25
    2000:	b1 60       	ori	r27, 0x01	; 1
    2002:	31 50       	subi	r19, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
  restart:
  if (n++ >= MAX_ITER)
    2004:	09 f4       	brne	.+2      	; 0x2008 <ee24xx_read_bytes+0x1c>
    2006:	8e c0       	rjmp	.+284    	; 0x2124 <ee24xx_read_bytes+0x138>
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    2008:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    200c:	20 91 bc 00 	lds	r18, 0x00BC
    2010:	27 ff       	sbrs	r18, 7
    2012:	fc cf       	rjmp	.-8      	; 0x200c <ee24xx_read_bytes+0x20>
  switch ((twst = TW_STATUS))
    2014:	20 91 b9 00 	lds	r18, 0x00B9
    2018:	28 7f       	andi	r18, 0xF8	; 248
    201a:	20 93 99 15 	sts	0x1599, r18
    201e:	20 31       	cpi	r18, 0x10	; 16
    2020:	29 f0       	breq	.+10     	; 0x202c <ee24xx_read_bytes+0x40>
    2022:	28 33       	cpi	r18, 0x38	; 56
    2024:	89 f3       	breq	.-30     	; 0x2008 <ee24xx_read_bytes+0x1c>
    2026:	28 30       	cpi	r18, 0x08	; 8
    2028:	09 f0       	breq	.+2      	; 0x202c <ee24xx_read_bytes+0x40>
    202a:	7c c0       	rjmp	.+248    	; 0x2124 <ee24xx_read_bytes+0x138>
				/* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    202c:	90 93 bb 00 	sts	0x00BB, r25
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    2030:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    2034:	20 91 bc 00 	lds	r18, 0x00BC
    2038:	27 ff       	sbrs	r18, 7
    203a:	fc cf       	rjmp	.-8      	; 0x2034 <ee24xx_read_bytes+0x48>
  switch ((twst = TW_STATUS))
    203c:	20 91 b9 00 	lds	r18, 0x00B9
    2040:	28 7f       	andi	r18, 0xF8	; 248
    2042:	20 93 99 15 	sts	0x1599, r18
    2046:	20 32       	cpi	r18, 0x20	; 32
    2048:	e1 f2       	breq	.-72     	; 0x2002 <ee24xx_read_bytes+0x16>
    204a:	28 33       	cpi	r18, 0x38	; 56
    204c:	e9 f2       	breq	.-70     	; 0x2008 <ee24xx_read_bytes+0x1c>
    204e:	28 31       	cpi	r18, 0x18	; 24
    2050:	09 f0       	breq	.+2      	; 0x2054 <ee24xx_read_bytes+0x68>
    2052:	61 c0       	rjmp	.+194    	; 0x2116 <ee24xx_read_bytes+0x12a>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    2054:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    2058:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    205c:	20 91 bc 00 	lds	r18, 0x00BC
    2060:	27 ff       	sbrs	r18, 7
    2062:	fc cf       	rjmp	.-8      	; 0x205c <ee24xx_read_bytes+0x70>
  switch ((twst = TW_STATUS))
    2064:	20 91 b9 00 	lds	r18, 0x00B9
    2068:	28 7f       	andi	r18, 0xF8	; 248
    206a:	20 93 99 15 	sts	0x1599, r18
    206e:	20 33       	cpi	r18, 0x30	; 48
    2070:	09 f4       	brne	.+2      	; 0x2074 <ee24xx_read_bytes+0x88>
    2072:	4e c0       	rjmp	.+156    	; 0x2110 <ee24xx_read_bytes+0x124>
    2074:	28 33       	cpi	r18, 0x38	; 56
    2076:	41 f2       	breq	.-112    	; 0x2008 <ee24xx_read_bytes+0x1c>
    2078:	28 32       	cpi	r18, 0x28	; 40
    207a:	09 f0       	breq	.+2      	; 0x207e <ee24xx_read_bytes+0x92>
    207c:	4c c0       	rjmp	.+152    	; 0x2116 <ee24xx_read_bytes+0x12a>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
    207e:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    2082:	20 91 bc 00 	lds	r18, 0x00BC
    2086:	27 ff       	sbrs	r18, 7
    2088:	fc cf       	rjmp	.-8      	; 0x2082 <ee24xx_read_bytes+0x96>
  switch ((twst = TW_STATUS))
    208a:	20 91 b9 00 	lds	r18, 0x00B9
    208e:	28 7f       	andi	r18, 0xF8	; 248
    2090:	20 93 99 15 	sts	0x1599, r18
    2094:	20 31       	cpi	r18, 0x10	; 16
    2096:	29 f0       	breq	.+10     	; 0x20a2 <ee24xx_read_bytes+0xb6>
    2098:	28 33       	cpi	r18, 0x38	; 56
    209a:	09 f4       	brne	.+2      	; 0x209e <ee24xx_read_bytes+0xb2>
    209c:	b5 cf       	rjmp	.-150    	; 0x2008 <ee24xx_read_bytes+0x1c>
    209e:	28 30       	cpi	r18, 0x08	; 8
    20a0:	d1 f5       	brne	.+116    	; 0x2116 <ee24xx_read_bytes+0x12a>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    20a2:	b0 93 bb 00 	sts	0x00BB, r27
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    20a6:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    20aa:	20 91 bc 00 	lds	r18, 0x00BC
    20ae:	27 ff       	sbrs	r18, 7
    20b0:	fc cf       	rjmp	.-8      	; 0x20aa <ee24xx_read_bytes+0xbe>
  switch ((twst = TW_STATUS))
    20b2:	20 91 b9 00 	lds	r18, 0x00B9
    20b6:	28 7f       	andi	r18, 0xF8	; 248
    20b8:	20 93 99 15 	sts	0x1599, r18
    20bc:	20 34       	cpi	r18, 0x40	; 64
    20be:	29 f0       	breq	.+10     	; 0x20ca <ee24xx_read_bytes+0xde>
    20c0:	28 34       	cpi	r18, 0x48	; 72
    20c2:	31 f1       	breq	.+76     	; 0x2110 <ee24xx_read_bytes+0x124>
    20c4:	28 33       	cpi	r18, 0x38	; 56
    20c6:	39 f5       	brne	.+78     	; 0x2116 <ee24xx_read_bytes+0x12a>
    20c8:	9f cf       	rjmp	.-194    	; 0x2008 <ee24xx_read_bytes+0x1c>
    20ca:	fa 01       	movw	r30, r20
    20cc:	94 ec       	ldi	r25, 0xC4	; 196
    20ce:	9f 01       	movw	r18, r30
    20d0:	24 1b       	sub	r18, r20
    20d2:	35 0b       	sbc	r19, r21

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    20d4:	16 16       	cp	r1, r22
    20d6:	17 06       	cpc	r1, r23
    20d8:	04 f5       	brge	.+64     	; 0x211a <ee24xx_read_bytes+0x12e>
       len > 0;
       len--)
    {
      if (len == 1)
    20da:	61 30       	cpi	r22, 0x01	; 1
    20dc:	71 05       	cpc	r23, r1
    20de:	09 f4       	brne	.+2      	; 0x20e2 <ee24xx_read_bytes+0xf6>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
    20e0:	94 e8       	ldi	r25, 0x84	; 132
      TWCR = twcr;		/* clear int to start transmission */
    20e2:	90 93 bc 00 	sts	0x00BC, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    20e6:	80 91 bc 00 	lds	r24, 0x00BC
    20ea:	87 ff       	sbrs	r24, 7
    20ec:	fc cf       	rjmp	.-8      	; 0x20e6 <ee24xx_read_bytes+0xfa>
      switch ((twst = TW_STATUS))
    20ee:	80 91 b9 00 	lds	r24, 0x00B9
    20f2:	88 7f       	andi	r24, 0xF8	; 248
    20f4:	80 93 99 15 	sts	0x1599, r24
    20f8:	80 35       	cpi	r24, 0x50	; 80
    20fa:	21 f0       	breq	.+8      	; 0x2104 <ee24xx_read_bytes+0x118>
    20fc:	88 35       	cpi	r24, 0x58	; 88
    20fe:	59 f4       	brne	.+22     	; 0x2116 <ee24xx_read_bytes+0x12a>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	70 e0       	ldi	r23, 0x00	; 0
	  /* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
    2104:	80 91 bb 00 	lds	r24, 0x00BB
    2108:	81 93       	st	Z+, r24
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
       len > 0;
       len--)
    210a:	61 50       	subi	r22, 0x01	; 1
    210c:	71 09       	sbc	r23, r1
    210e:	df cf       	rjmp	.-66     	; 0x20ce <ee24xx_read_bytes+0xe2>
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{


  uint8_t sla, twcr, n = 0;
  int rv = 0;
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	02 c0       	rjmp	.+4      	; 0x211a <ee24xx_read_bytes+0x12e>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    2116:	2f ef       	ldi	r18, 0xFF	; 255
    2118:	3f ef       	ldi	r19, 0xFF	; 255
	  goto error;
	}
    }
  quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    211a:	84 e9       	ldi	r24, 0x94	; 148
    211c:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    2120:	c9 01       	movw	r24, r18
    2122:	08 95       	ret

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    2128:	08 95       	ret

0000212a <ee24xx_write_page>:
 * actual number of data byte written.  It is up to the caller to
 * re-invoke it in order to write further data.
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
    212a:	9c 01       	movw	r18, r24
  int rv = 0;
  uint16_t endaddr;



  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    212c:	68 0f       	add	r22, r24
    212e:	79 1f       	adc	r23, r25
    2130:	87 60       	ori	r24, 0x07	; 7
    2132:	68 17       	cp	r22, r24
    2134:	79 07       	cpc	r23, r25
    2136:	18 f0       	brcs	.+6      	; 0x213e <ee24xx_write_page+0x14>
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
    2138:	bc 01       	movw	r22, r24
    213a:	6f 5f       	subi	r22, 0xFF	; 255
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    213e:	83 2f       	mov	r24, r19
    2140:	87 70       	andi	r24, 0x07	; 7
    2142:	88 0f       	add	r24, r24
    2144:	90 91 9a 15 	lds	r25, 0x159A
    2148:	89 2b       	or	r24, r25
    214a:	e5 e6       	ldi	r30, 0x65	; 101
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    214c:	a4 ea       	ldi	r26, 0xA4	; 164
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    214e:	f4 e8       	ldi	r31, 0x84	; 132
    2150:	e1 50       	subi	r30, 0x01	; 1

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);

  restart:
  if (n++ >= MAX_ITER)
    2152:	09 f4       	brne	.+2      	; 0x2156 <ee24xx_write_page+0x2c>
    2154:	61 c0       	rjmp	.+194    	; 0x2218 <ee24xx_write_page+0xee>
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    2156:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    215a:	90 91 bc 00 	lds	r25, 0x00BC
    215e:	97 ff       	sbrs	r25, 7
    2160:	fc cf       	rjmp	.-8      	; 0x215a <ee24xx_write_page+0x30>
  switch ((twst = TW_STATUS))
    2162:	90 91 b9 00 	lds	r25, 0x00B9
    2166:	98 7f       	andi	r25, 0xF8	; 248
    2168:	90 93 99 15 	sts	0x1599, r25
    216c:	90 31       	cpi	r25, 0x10	; 16
    216e:	29 f0       	breq	.+10     	; 0x217a <ee24xx_write_page+0x50>
    2170:	98 33       	cpi	r25, 0x38	; 56
    2172:	89 f3       	breq	.-30     	; 0x2156 <ee24xx_write_page+0x2c>
    2174:	98 30       	cpi	r25, 0x08	; 8
    2176:	09 f0       	breq	.+2      	; 0x217a <ee24xx_write_page+0x50>
    2178:	4f c0       	rjmp	.+158    	; 0x2218 <ee24xx_write_page+0xee>
        return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    217a:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    217e:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    2182:	90 91 bc 00 	lds	r25, 0x00BC
    2186:	97 ff       	sbrs	r25, 7
    2188:	fc cf       	rjmp	.-8      	; 0x2182 <ee24xx_write_page+0x58>
  switch ((twst = TW_STATUS))
    218a:	90 91 b9 00 	lds	r25, 0x00B9
    218e:	98 7f       	andi	r25, 0xF8	; 248
    2190:	90 93 99 15 	sts	0x1599, r25
    2194:	90 32       	cpi	r25, 0x20	; 32
    2196:	e1 f2       	breq	.-72     	; 0x2150 <ee24xx_write_page+0x26>
    2198:	98 33       	cpi	r25, 0x38	; 56
    219a:	e9 f2       	breq	.-70     	; 0x2156 <ee24xx_write_page+0x2c>
    219c:	98 31       	cpi	r25, 0x18	; 24
    219e:	a9 f5       	brne	.+106    	; 0x220a <ee24xx_write_page+0xe0>

    default:
        goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    21a0:	20 93 bb 00 	sts	0x00BB, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    21a4:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    21a8:	90 91 bc 00 	lds	r25, 0x00BC
    21ac:	97 ff       	sbrs	r25, 7
    21ae:	fc cf       	rjmp	.-8      	; 0x21a8 <ee24xx_write_page+0x7e>
  switch ((twst = TW_STATUS))
    21b0:	90 91 b9 00 	lds	r25, 0x00B9
    21b4:	98 7f       	andi	r25, 0xF8	; 248
    21b6:	90 93 99 15 	sts	0x1599, r25
    21ba:	90 33       	cpi	r25, 0x30	; 48
    21bc:	19 f1       	breq	.+70     	; 0x2204 <ee24xx_write_page+0xda>
    21be:	98 33       	cpi	r25, 0x38	; 56
    21c0:	51 f2       	breq	.-108    	; 0x2156 <ee24xx_write_page+0x2c>
    21c2:	98 32       	cpi	r25, 0x28	; 40
    21c4:	11 f5       	brne	.+68     	; 0x220a <ee24xx_write_page+0xe0>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
    21c6:	62 1b       	sub	r22, r18
    21c8:	73 0b       	sbc	r23, r19
    21ca:	fa 01       	movw	r30, r20
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    21d0:	44 e8       	ldi	r20, 0x84	; 132
    21d2:	cb 01       	movw	r24, r22
    21d4:	82 1b       	sub	r24, r18
    21d6:	93 0b       	sbc	r25, r19
    default:

        goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    21d8:	18 16       	cp	r1, r24
    21da:	19 06       	cpc	r1, r25
    21dc:	c4 f4       	brge	.+48     	; 0x220e <ee24xx_write_page+0xe4>
    {
      TWDR = *buf++;
    21de:	81 91       	ld	r24, Z+
    21e0:	80 93 bb 00 	sts	0x00BB, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    21e4:	40 93 bc 00 	sts	0x00BC, r20
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    21e8:	80 91 bc 00 	lds	r24, 0x00BC
    21ec:	87 ff       	sbrs	r24, 7
    21ee:	fc cf       	rjmp	.-8      	; 0x21e8 <ee24xx_write_page+0xbe>
      switch ((twst = TW_STATUS))
    21f0:	80 91 b9 00 	lds	r24, 0x00B9
    21f4:	88 7f       	andi	r24, 0xF8	; 248
    21f6:	80 93 99 15 	sts	0x1599, r24
    21fa:	88 32       	cpi	r24, 0x28	; 40
    21fc:	31 f4       	brne	.+12     	; 0x220a <ee24xx_write_page+0xe0>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
    21fe:	2f 5f       	subi	r18, 0xFF	; 255
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	e7 cf       	rjmp	.-50     	; 0x21d2 <ee24xx_write_page+0xa8>
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	02 c0       	rjmp	.+4      	; 0x220e <ee24xx_write_page+0xe4>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    220a:	2f ef       	ldi	r18, 0xFF	; 255
    220c:	3f ef       	ldi	r19, 0xFF	; 255
	default:
            goto error;
	}
    }
  quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    220e:	84 e9       	ldi	r24, 0x94	; 148
    2210:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    2214:	c9 01       	movw	r24, r18
    2216:	08 95       	ret

    case TW_MT_ARB_LOST:
      goto begin;

    default:
        return -1;		/* error: not in start condition */
    2218:	8f ef       	ldi	r24, 0xFF	; 255
    221a:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    221c:	08 95       	ret

0000221e <ee24xx_write_bytes>:
 * function until either an error has been returned, or all bytes
 * have been written.
 */
int
ee24xx_write_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{
    221e:	cf 92       	push	r12
    2220:	df 92       	push	r13
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	6c 01       	movw	r12, r24
    2230:	8b 01       	movw	r16, r22
    2232:	7a 01       	movw	r14, r20
  int rv, total;



  total = 0;
    2234:	c0 e0       	ldi	r28, 0x00	; 0
    2236:	d0 e0       	ldi	r29, 0x00	; 0
    {
#if DEBUG
      printf("Calling ee24xx_write_page(%d, %d, %p)",
	     eeaddr, len, buf);
#endif
      rv = ee24xx_write_page(eeaddr, len, buf);
    2238:	a7 01       	movw	r20, r14
    223a:	b8 01       	movw	r22, r16
    223c:	c6 01       	movw	r24, r12
    223e:	0e 94 95 10 	call	0x212a	; 0x212a <ee24xx_write_page>
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
    2242:	8f 3f       	cpi	r24, 0xFF	; 255
    2244:	2f ef       	ldi	r18, 0xFF	; 255
    2246:	92 07       	cpc	r25, r18
    2248:	69 f0       	breq	.+26     	; 0x2264 <ee24xx_write_bytes+0x46>
	return -1;
      eeaddr += rv;
    224a:	c8 0e       	add	r12, r24
    224c:	d9 1e       	adc	r13, r25
      len -= rv;
    224e:	08 1b       	sub	r16, r24
    2250:	19 0b       	sbc	r17, r25
      buf += rv;
    2252:	e8 0e       	add	r14, r24
    2254:	f9 1e       	adc	r15, r25
      total += rv;
    2256:	c8 0f       	add	r28, r24
    2258:	d9 1f       	adc	r29, r25
    }
  while (len > 0);
    225a:	10 16       	cp	r1, r16
    225c:	11 06       	cpc	r1, r17
    225e:	64 f3       	brlt	.-40     	; 0x2238 <ee24xx_write_bytes+0x1a>

  return total;
    2260:	ce 01       	movw	r24, r28
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <ee24xx_write_bytes+0x4a>
      rv = ee24xx_write_page(eeaddr, len, buf);
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
	return -1;
    2264:	8f ef       	ldi	r24, 0xFF	; 255
    2266:	9f ef       	ldi	r25, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
    2268:	df 91       	pop	r29
    226a:	cf 91       	pop	r28
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	ef 90       	pop	r14
    2274:	df 90       	pop	r13
    2276:	cf 90       	pop	r12
    2278:	08 95       	ret

0000227a <error>:

void
error(void)
{

  printf("error: TWI status %#x\n", twst);
    227a:	80 91 99 15 	lds	r24, 0x1599
    227e:	1f 92       	push	r1
    2280:	8f 93       	push	r24
    2282:	84 e8       	ldi	r24, 0x84	; 132
    2284:	92 e0       	ldi	r25, 0x02	; 2
    2286:	9f 93       	push	r25
    2288:	8f 93       	push	r24
    228a:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	08 95       	ret

00002298 <assemble_serv_packet>:
/*
Assemble packet to go to the server.
Right now the server is looking for ":"
*/
void assemble_serv_packet(uint8_t *tx_buf, packet *tx)
{
    2298:	fb 01       	movw	r30, r22
    switch(tx->type)
    229a:	21 81       	ldd	r18, Z+1	; 0x01
    229c:	25 30       	cpi	r18, 0x05	; 5
    229e:	19 f1       	breq	.+70     	; 0x22e6 <assemble_serv_packet+0x4e>
    22a0:	26 30       	cpi	r18, 0x06	; 6
    22a2:	09 f0       	breq	.+2      	; 0x22a6 <assemble_serv_packet+0xe>
    22a4:	45 c0       	rjmp	.+138    	; 0x2330 <assemble_serv_packet+0x98>
        case MSG_CMD:
        {
            // msg_cmd from server has num_hops of 0.
            // cmd type message will only have "ON/OFF" payload value.
            // Will this ever happen? 
            sprintf(tx_buf, "%d:%d:%d:%d:%d", tx->source_id, tx->seq_num, tx->type, tx->num_hops, tx->payload[0]);
    22a6:	31 85       	ldd	r19, Z+9	; 0x09
    22a8:	1f 92       	push	r1
    22aa:	3f 93       	push	r19
    22ac:	34 81       	ldd	r19, Z+4	; 0x04
    22ae:	1f 92       	push	r1
    22b0:	3f 93       	push	r19
    22b2:	1f 92       	push	r1
    22b4:	2f 93       	push	r18
    22b6:	23 81       	ldd	r18, Z+3	; 0x03
    22b8:	2f 93       	push	r18
    22ba:	22 81       	ldd	r18, Z+2	; 0x02
    22bc:	2f 93       	push	r18
    22be:	20 81       	ld	r18, Z
    22c0:	1f 92       	push	r1
    22c2:	2f 93       	push	r18
    22c4:	2b e9       	ldi	r18, 0x9B	; 155
    22c6:	32 e0       	ldi	r19, 0x02	; 2
    22c8:	3f 93       	push	r19
    22ca:	2f 93       	push	r18
    22cc:	9f 93       	push	r25
    22ce:	8f 93       	push	r24
    22d0:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <sprintf>
            break;
    22d4:	8d b7       	in	r24, 0x3d	; 61
    22d6:	9e b7       	in	r25, 0x3e	; 62
    22d8:	0e 96       	adiw	r24, 0x0e	; 14
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	9e bf       	out	0x3e, r25	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	8d bf       	out	0x3d, r24	; 61
    22e4:	08 95       	ret
        }

        case MSG_DATA:
        {
            // NEED TO TEST
            sprintf(tx_buf, "%d:%d:%d:%d:%d,%d,%d", tx->source_id, tx->seq_num, tx->type, tx->num_hops, 
    22e6:	35 85       	ldd	r19, Z+13	; 0x0d
    22e8:	1f 92       	push	r1
    22ea:	3f 93       	push	r19
    22ec:	33 85       	ldd	r19, Z+11	; 0x0b
    22ee:	1f 92       	push	r1
    22f0:	3f 93       	push	r19
    22f2:	31 85       	ldd	r19, Z+9	; 0x09
    22f4:	1f 92       	push	r1
    22f6:	3f 93       	push	r19
    22f8:	34 81       	ldd	r19, Z+4	; 0x04
    22fa:	1f 92       	push	r1
    22fc:	3f 93       	push	r19
    22fe:	1f 92       	push	r1
    2300:	2f 93       	push	r18
    2302:	23 81       	ldd	r18, Z+3	; 0x03
    2304:	2f 93       	push	r18
    2306:	22 81       	ldd	r18, Z+2	; 0x02
    2308:	2f 93       	push	r18
    230a:	20 81       	ld	r18, Z
    230c:	1f 92       	push	r1
    230e:	2f 93       	push	r18
    2310:	2a ea       	ldi	r18, 0xAA	; 170
    2312:	32 e0       	ldi	r19, 0x02	; 2
    2314:	3f 93       	push	r19
    2316:	2f 93       	push	r18
    2318:	9f 93       	push	r25
    231a:	8f 93       	push	r24
    231c:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <sprintf>
    2320:	8d b7       	in	r24, 0x3d	; 61
    2322:	9e b7       	in	r25, 0x3e	; 62
    2324:	42 96       	adiw	r24, 0x12	; 18
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	9e bf       	out	0x3e, r25	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	8d bf       	out	0x3d, r24	; 61
    2330:	08 95       	ret

00002332 <assemble_packet>:
/*
Assemble packet to go to the network.
Use network format.
*/
uint8_t assemble_packet(uint8_t *tx_buf, packet *tx)
{
    2332:	dc 01       	movw	r26, r24
    2334:	fb 01       	movw	r30, r22
    uint8_t length = 0;
    switch(tx->type)
    2336:	81 81       	ldd	r24, Z+1	; 0x01
    2338:	85 30       	cpi	r24, 0x05	; 5
    233a:	11 f1       	breq	.+68     	; 0x2380 <assemble_packet+0x4e>
    233c:	86 30       	cpi	r24, 0x06	; 6
    233e:	09 f0       	breq	.+2      	; 0x2342 <assemble_packet+0x10>
    2340:	46 c0       	rjmp	.+140    	; 0x23ce <assemble_packet+0x9c>
        case MSG_CMD:
        {
            length = 8;
            // msg_cmd from server has hop_num of 0.
            // cmd type message will only have "ON/OFF" payload value.
            tx_buf[0] = tx->source_id;
    2342:	80 81       	ld	r24, Z
    2344:	8c 93       	st	X, r24
            tx_buf[1] = tx->seq_num;
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	11 96       	adiw	r26, 0x01	; 1
    234a:	8c 93       	st	X, r24
    234c:	11 97       	sbiw	r26, 0x01	; 1
            tx_buf[2] = tx->type;
    234e:	81 81       	ldd	r24, Z+1	; 0x01
    2350:	12 96       	adiw	r26, 0x02	; 2
    2352:	8c 93       	st	X, r24
    2354:	12 97       	sbiw	r26, 0x02	; 2
            tx_buf[3] = tx->num_hops;
    2356:	84 81       	ldd	r24, Z+4	; 0x04
    2358:	13 96       	adiw	r26, 0x03	; 3
    235a:	8c 93       	st	X, r24
    235c:	13 97       	sbiw	r26, 0x03	; 3
            tx_buf[4] = tx->payload[0];
    235e:	81 85       	ldd	r24, Z+9	; 0x09
    2360:	14 96       	adiw	r26, 0x04	; 4
    2362:	8c 93       	st	X, r24
    2364:	14 97       	sbiw	r26, 0x04	; 4
            tx_buf[5] = tx->payload[1];
    2366:	82 85       	ldd	r24, Z+10	; 0x0a
    2368:	15 96       	adiw	r26, 0x05	; 5
    236a:	8c 93       	st	X, r24
    236c:	15 97       	sbiw	r26, 0x05	; 5
            tx_buf[6] = tx->payload[2];
    236e:	83 85       	ldd	r24, Z+11	; 0x0b
    2370:	16 96       	adiw	r26, 0x06	; 6
    2372:	8c 93       	st	X, r24
    2374:	16 97       	sbiw	r26, 0x06	; 6
            tx_buf[7] = tx->payload[3];
    2376:	84 85       	ldd	r24, Z+12	; 0x0c
    2378:	17 96       	adiw	r26, 0x07	; 7
    237a:	8c 93       	st	X, r24
    uint8_t length = 0;
    switch(tx->type)
    {
        case MSG_CMD:
        {
            length = 8;
    237c:	88 e0       	ldi	r24, 0x08	; 8
            tx_buf[3] = tx->num_hops;
            tx_buf[4] = tx->payload[0];
            tx_buf[5] = tx->payload[1];
            tx_buf[6] = tx->payload[2];
            tx_buf[7] = tx->payload[3];
            break;
    237e:	08 95       	ret
            length = 10;
            // NEED TO TEST/DEVELOP!!
            // MISSING NUMBER HOPS
            // msg_cmd from server has hop_num of 0.
            // cmd type message will only have "ON/OFF" payload value.
            tx_buf[0] = tx->source_id;
    2380:	80 81       	ld	r24, Z
    2382:	8c 93       	st	X, r24
            tx_buf[1] = tx->seq_num;
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	11 96       	adiw	r26, 0x01	; 1
    2388:	8c 93       	st	X, r24
    238a:	11 97       	sbiw	r26, 0x01	; 1
            tx_buf[2] = tx->type;
    238c:	81 81       	ldd	r24, Z+1	; 0x01
    238e:	12 96       	adiw	r26, 0x02	; 2
    2390:	8c 93       	st	X, r24
    2392:	12 97       	sbiw	r26, 0x02	; 2
            tx_buf[3] = tx->num_hops;
    2394:	84 81       	ldd	r24, Z+4	; 0x04
    2396:	13 96       	adiw	r26, 0x03	; 3
    2398:	8c 93       	st	X, r24
    239a:	13 97       	sbiw	r26, 0x03	; 3
            tx_buf[4] = tx->payload[0];
    239c:	81 85       	ldd	r24, Z+9	; 0x09
    239e:	14 96       	adiw	r26, 0x04	; 4
    23a0:	8c 93       	st	X, r24
    23a2:	14 97       	sbiw	r26, 0x04	; 4
            tx_buf[5] = tx->payload[1];
    23a4:	82 85       	ldd	r24, Z+10	; 0x0a
    23a6:	15 96       	adiw	r26, 0x05	; 5
    23a8:	8c 93       	st	X, r24
    23aa:	15 97       	sbiw	r26, 0x05	; 5
            tx_buf[6] = tx->payload[2];
    23ac:	83 85       	ldd	r24, Z+11	; 0x0b
    23ae:	16 96       	adiw	r26, 0x06	; 6
    23b0:	8c 93       	st	X, r24
    23b2:	16 97       	sbiw	r26, 0x06	; 6
            tx_buf[7] = tx->payload[3];
    23b4:	84 85       	ldd	r24, Z+12	; 0x0c
    23b6:	17 96       	adiw	r26, 0x07	; 7
    23b8:	8c 93       	st	X, r24
    23ba:	17 97       	sbiw	r26, 0x07	; 7
            tx_buf[8] = tx->payload[4];
    23bc:	85 85       	ldd	r24, Z+13	; 0x0d
    23be:	18 96       	adiw	r26, 0x08	; 8
    23c0:	8c 93       	st	X, r24
    23c2:	18 97       	sbiw	r26, 0x08	; 8
            tx_buf[9] = tx->payload[5];
    23c4:	86 85       	ldd	r24, Z+14	; 0x0e
    23c6:	19 96       	adiw	r26, 0x09	; 9
    23c8:	8c 93       	st	X, r24
            break;
        }

        case MSG_DATA:
        {
            length = 10;
    23ca:	8a e0       	ldi	r24, 0x0A	; 10
    23cc:	08 95       	ret
Assemble packet to go to the network.
Use network format.
*/
uint8_t assemble_packet(uint8_t *tx_buf, packet *tx)
{
    uint8_t length = 0;
    23ce:	80 e0       	ldi	r24, 0x00	; 0
          tx->num_hops, tx->sensor_sample_rate, tx->neighbor_update_rate);*/
            break;
        }
    }
    return length;
    23d0:	08 95       	ret

000023d2 <in_light_pool>:
 * @param lp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_light_pool(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    23d2:	fc 01       	movw	r30, r24
    23d4:	21 91       	ld	r18, Z+
    23d6:	cf 01       	movw	r24, r30
    23d8:	3e 2f       	mov	r19, r30
    23da:	38 1b       	sub	r19, r24
    23dc:	32 17       	cp	r19, r18
    23de:	28 f4       	brcc	.+10     	; 0x23ea <in_light_pool+0x18>
        if(lp->node_id[i] == node_address) {
    23e0:	31 91       	ld	r19, Z+
    23e2:	36 13       	cpse	r19, r22
    23e4:	f9 cf       	rjmp	.-14     	; 0x23d8 <in_light_pool+0x6>
            return 1;
    23e6:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    23e8:	08 95       	ret
    for(uint8_t i = 0; i < lp->size; i++) {
        if(lp->node_id[i] == node_address) {
            return 1;
        }
    }
    return -1;
    23ea:	8f ef       	ldi	r24, 0xFF	; 255
    23ec:	08 95       	ret

000023ee <get_light_pool_index>:
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    23ee:	fc 01       	movw	r30, r24
    23f0:	81 91       	ld	r24, Z+
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	98 17       	cp	r25, r24
    23f6:	39 f0       	breq	.+14     	; 0x2406 <get_light_pool_index+0x18>
        if(lp->node_id[i] == node_address) {
    23f8:	21 91       	ld	r18, Z+
    23fa:	26 13       	cpse	r18, r22
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <get_light_pool_index+0x14>
            return i;
    23fe:	89 2f       	mov	r24, r25
    2400:	08 95       	ret
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    2402:	9f 5f       	subi	r25, 0xFF	; 255
    2404:	f7 cf       	rjmp	.-18     	; 0x23f4 <get_light_pool_index+0x6>
        if(lp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    2406:	8f ef       	ldi	r24, 0xFF	; 255
}
    2408:	08 95       	ret

0000240a <add_to_light_pool>:
 * @param lp - light pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param light_value - light value of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    if((lp->size < MAX_POOL) && (in_light_pool(lp, node_address) == -1)) {
    2416:	fc 01       	movw	r30, r24
    2418:	c0 81       	ld	r28, Z
    241a:	c8 30       	cpi	r28, 0x08	; 8
    241c:	d8 f4       	brcc	.+54     	; 0x2454 <add_to_light_pool+0x4a>
    241e:	7a 01       	movw	r14, r20
    2420:	d6 2f       	mov	r29, r22
    2422:	8c 01       	movw	r16, r24
    2424:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <in_light_pool>
    2428:	8f 3f       	cpi	r24, 0xFF	; 255
    242a:	a1 f4       	brne	.+40     	; 0x2454 <add_to_light_pool+0x4a>
        uint8_t index = lp->size;
        lp->size++;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	8c 0f       	add	r24, r28
    2430:	f8 01       	movw	r30, r16
    2432:	80 83       	st	Z, r24
        lp->node_id[index] = node_address;
    2434:	2c 2f       	mov	r18, r28
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	e2 0f       	add	r30, r18
    243a:	f3 1f       	adc	r31, r19
    243c:	d1 83       	std	Z+1, r29	; 0x01
        lp->light_values[index] = light_value;
    243e:	2e 5f       	subi	r18, 0xFE	; 254
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	f8 01       	movw	r30, r16
    2448:	e2 0f       	add	r30, r18
    244a:	f3 1f       	adc	r31, r19
    244c:	f1 82       	std	Z+1, r15	; 0x01
    244e:	e0 82       	st	Z, r14
        return 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <add_to_light_pool+0x4c>
    }
    return -1;
    2454:	8f ef       	ldi	r24, 0xFF	; 255
}
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	ff 90       	pop	r15
    2460:	ef 90       	pop	r14
    2462:	08 95       	ret

00002464 <update_light_pool>:
 * @param lp - light pool to be updated
 * @param node_address - node whose light value needs updating
 * @param light_value - new light value of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	ec 01       	movw	r28, r24
    2470:	16 2f       	mov	r17, r22
    2472:	7a 01       	movw	r14, r20
    int8_t in_lp, index;
    
    in_lp = in_light_pool(lp, node_address);
    2474:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <in_light_pool>
    if(in_lp == -1) {
    2478:	8f 3f       	cpi	r24, 0xFF	; 255
    247a:	31 f4       	brne	.+12     	; 0x2488 <update_light_pool+0x24>
        add_to_light_pool(lp, node_address, light_value);
    247c:	a7 01       	movw	r20, r14
    247e:	61 2f       	mov	r22, r17
    2480:	ce 01       	movw	r24, r28
    2482:	0e 94 05 12 	call	0x240a	; 0x240a <add_to_light_pool>
    2486:	0d c0       	rjmp	.+26     	; 0x24a2 <update_light_pool+0x3e>
        return 1;
    } else {
        index = get_light_pool_index(lp, node_address);
    2488:	61 2f       	mov	r22, r17
    248a:	ce 01       	movw	r24, r28
    248c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <get_light_pool_index>
        if(index >= 0) {
    2490:	87 fd       	sbrc	r24, 7
    2492:	09 c0       	rjmp	.+18     	; 0x24a6 <update_light_pool+0x42>
            lp->light_values[index] = light_value;
    2494:	92 e0       	ldi	r25, 0x02	; 2
    2496:	89 02       	muls	r24, r25
    2498:	c0 0d       	add	r28, r0
    249a:	d1 1d       	adc	r29, r1
    249c:	11 24       	eor	r1, r1
    249e:	fd 82       	std	Y+5, r15	; 0x05
    24a0:	ec 82       	std	Y+4, r14	; 0x04
            return 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <update_light_pool+0x44>
        }        
    }

    return -1;
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
}
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	1f 91       	pop	r17
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	08 95       	ret

000024b4 <print_light_pool>:

void print_light_pool(light_pool_t *lp) {
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	8c 01       	movw	r16, r24
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    24c0:	8b ee       	ldi	r24, 0xEB	; 235
    24c2:	92 e0       	ldi	r25, 0x02	; 2
    24c4:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
    for(uint8_t k = 0; k < lp->size; k++) {
    24c8:	c0 e0       	ldi	r28, 0x00	; 0
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    24ca:	9f eb       	ldi	r25, 0xBF	; 191
    24cc:	e9 2e       	mov	r14, r25
    24ce:	92 e0       	ldi	r25, 0x02	; 2
    24d0:	f9 2e       	mov	r15, r25
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    24d2:	f8 01       	movw	r30, r16
    24d4:	80 81       	ld	r24, Z
    24d6:	c8 17       	cp	r28, r24
    24d8:	f0 f4       	brcc	.+60     	; 0x2516 <print_light_pool+0x62>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    24da:	2c 2f       	mov	r18, r28
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	f9 01       	movw	r30, r18
    24e0:	32 96       	adiw	r30, 0x02	; 2
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	e0 0f       	add	r30, r16
    24e8:	f1 1f       	adc	r31, r17
    24ea:	81 81       	ldd	r24, Z+1	; 0x01
    24ec:	8f 93       	push	r24
    24ee:	80 81       	ld	r24, Z
    24f0:	8f 93       	push	r24
    24f2:	f8 01       	movw	r30, r16
    24f4:	e2 0f       	add	r30, r18
    24f6:	f3 1f       	adc	r31, r19
    24f8:	81 81       	ldd	r24, Z+1	; 0x01
    24fa:	1f 92       	push	r1
    24fc:	8f 93       	push	r24
    24fe:	ff 92       	push	r15
    2500:	ef 92       	push	r14
    2502:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    2506:	cf 5f       	subi	r28, 0xFF	; 255
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	de cf       	rjmp	.-68     	; 0x24d2 <print_light_pool+0x1e>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    }
    2516:	cf 91       	pop	r28
    2518:	1f 91       	pop	r17
    251a:	0f 91       	pop	r16
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	08 95       	ret

00002522 <init_neighbor_table>:

/*** NEIGHBOR TABLE OPERATIONS ***/
/**
 * init_neighbor_table
 */
void init_neighbor_table(neighbor_table_t *nt) {
    2522:	fc 01       	movw	r30, r24
    nt->size = 0;
    2524:	10 82       	st	Z, r1

    // need to actually force id values to 0 because when we send our the neighbor packet...
    // we send all 4 items. Therefore an old value can still be in [3] but the size could be 2.
    for(uint8_t i = 0; i < MAX_NEIGHBOR_TABLE; i++)
    {
        nt->neighbors[i].id = 0;
    2526:	12 82       	std	Z+2, r1	; 0x02
    2528:	13 82       	std	Z+3, r1	; 0x03
    252a:	14 82       	std	Z+4, r1	; 0x04
    252c:	08 95       	ret

0000252e <in_neighbor_table>:
 * @param nt - neighbor table to search
 * @param node_address - node to search for
 * @returns '1' if node is found, '-1' otherwise
 */
int8_t in_neighbor_table(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    252e:	fc 01       	movw	r30, r24
    2530:	20 81       	ld	r18, Z
    2532:	02 96       	adiw	r24, 0x02	; 2
    2534:	fc 01       	movw	r30, r24
    2536:	3e 2f       	mov	r19, r30
    2538:	38 1b       	sub	r19, r24
    253a:	32 17       	cp	r19, r18
    253c:	28 f4       	brcc	.+10     	; 0x2548 <in_neighbor_table+0x1a>
        if(nt->neighbors[i].id == node_address) {
    253e:	31 91       	ld	r19, Z+
    2540:	36 13       	cpse	r19, r22
    2542:	f9 cf       	rjmp	.-14     	; 0x2536 <in_neighbor_table+0x8>
            return 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    2546:	08 95       	ret
    for(uint8_t i = 0; i < nt->size; i++) {
        if(nt->neighbors[i].id == node_address) {
            return 1;
        }
    }
    return -1;
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	08 95       	ret

0000254c <add_neighbor>:
}

void add_neighbor(neighbor_table_t *nt, neighbor_t new_neighbor) {
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ec 01       	movw	r28, r24
    2554:	16 2f       	mov	r17, r22
    uint8_t in_nt = in_neighbor_table(nt, new_neighbor.id);
    printf("neighbor table size %d\r\n", nt->size);
    2556:	88 81       	ld	r24, Y
    2558:	1f 92       	push	r1
    255a:	8f 93       	push	r24
    255c:	88 ed       	ldi	r24, 0xD8	; 216
    255e:	92 e0       	ldi	r25, 0x02	; 2
    2560:	9f 93       	push	r25
    2562:	8f 93       	push	r24
    2564:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    if((nt->size < MAX_NEIGHBOR_TABLE) && (in_nt != -1))
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	88 81       	ld	r24, Y
    2572:	83 30       	cpi	r24, 0x03	; 3
    2574:	a0 f4       	brcc	.+40     	; 0x259e <add_neighbor+0x52>
    {
        printf("new neighbor %d\r\n", new_neighbor.id);
    2576:	1f 92       	push	r1
    2578:	1f 93       	push	r17
    257a:	81 ef       	ldi	r24, 0xF1	; 241
    257c:	92 e0       	ldi	r25, 0x02	; 2
    257e:	9f 93       	push	r25
    2580:	8f 93       	push	r24
    2582:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
        nt->neighbors[nt->size] = new_neighbor;
    2586:	88 81       	ld	r24, Y
    2588:	fe 01       	movw	r30, r28
    258a:	e8 0f       	add	r30, r24
    258c:	f1 1d       	adc	r31, r1
    258e:	12 83       	std	Z+2, r17	; 0x02
        nt->size++;
    2590:	88 81       	ld	r24, Y
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	88 83       	st	Y, r24
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    }
}
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	1f 91       	pop	r17
    25a4:	08 95       	ret

000025a6 <get_neighbor_table_index>:
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    25a6:	fc 01       	movw	r30, r24
    25a8:	20 81       	ld	r18, Z
    25aa:	32 96       	adiw	r30, 0x02	; 2
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	82 17       	cp	r24, r18
    25b0:	29 f0       	breq	.+10     	; 0x25bc <get_neighbor_table_index+0x16>
        if(nt->neighbors[i].id == node_address) {
    25b2:	91 91       	ld	r25, Z+
    25b4:	96 17       	cp	r25, r22
    25b6:	19 f0       	breq	.+6      	; 0x25be <get_neighbor_table_index+0x18>
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    25b8:	8f 5f       	subi	r24, 0xFF	; 255
    25ba:	f9 cf       	rjmp	.-14     	; 0x25ae <get_neighbor_table_index+0x8>
        if(nt->neighbors[i].id == node_address) {
            return i;
        }
    }
    return -1;
    25bc:	8f ef       	ldi	r24, 0xFF	; 255
}
    25be:	08 95       	ret

000025c0 <print_neighbor_table>:
}*

/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    25c0:	af 92       	push	r10
    25c2:	bf 92       	push	r11
    25c4:	df 92       	push	r13
    25c6:	ef 92       	push	r14
    25c8:	ff 92       	push	r15
    25ca:	0f 93       	push	r16
    25cc:	1f 93       	push	r17
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	ec 01       	movw	r28, r24
    printf("[");
    25d4:	8b e5       	ldi	r24, 0x5B	; 91
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 c6 3a 	call	0x758c	; 0x758c <putchar>
    for (uint8_t i=0; i < nt->size; i++) {
    25dc:	d1 2c       	mov	r13, r1
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
    25de:	0c eb       	ldi	r16, 0xBC	; 188
    25e0:	12 e0       	ldi	r17, 0x02	; 2
        if (i < (nt->size-1))
            printf(", ");
    25e2:	83 e0       	ldi	r24, 0x03	; 3
    25e4:	e8 2e       	mov	r14, r24
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	f8 2e       	mov	r15, r24
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    25ea:	88 81       	ld	r24, Y
    25ec:	d8 16       	cp	r13, r24
    25ee:	f8 f4       	brcc	.+62     	; 0x262e <print_neighbor_table+0x6e>
        uint8_t node_id = nt->neighbors[i].id;
    25f0:	ad 2c       	mov	r10, r13
    25f2:	b1 2c       	mov	r11, r1
    25f4:	fe 01       	movw	r30, r28
    25f6:	ea 0d       	add	r30, r10
    25f8:	fb 1d       	adc	r31, r11
        printf("%d", node_id);
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	1f 92       	push	r1
    25fe:	8f 93       	push	r24
    2600:	1f 93       	push	r17
    2602:	0f 93       	push	r16
    2604:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
        if (i < (nt->size-1))
    2608:	28 81       	ld	r18, Y
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	21 50       	subi	r18, 0x01	; 1
    260e:	31 09       	sbc	r19, r1
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	a2 16       	cp	r10, r18
    261a:	b3 06       	cpc	r11, r19
    261c:	34 f4       	brge	.+12     	; 0x262a <print_neighbor_table+0x6a>
            printf(", ");
    261e:	ff 92       	push	r15
    2620:	ef 92       	push	r14
    2622:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    262a:	d3 94       	inc	r13
    262c:	de cf       	rjmp	.-68     	; 0x25ea <print_neighbor_table+0x2a>
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    262e:	84 ec       	ldi	r24, 0xC4	; 196
    2630:	93 e0       	ldi	r25, 0x03	; 3
}
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	bf 90       	pop	r11
    2642:	af 90       	pop	r10
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    2644:	0c 94 cc 3a 	jmp	0x7598	; 0x7598 <puts>

00002648 <in_neighbor_graph>:
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    2648:	fc 01       	movw	r30, r24
    264a:	30 81       	ld	r19, Z
    264c:	02 96       	adiw	r24, 0x02	; 2
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	23 17       	cp	r18, r19
    2652:	41 f0       	breq	.+16     	; 0x2664 <in_neighbor_graph+0x1c>
    2654:	05 96       	adiw	r24, 0x05	; 5
    2656:	fc 01       	movw	r30, r24
    2658:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    265a:	40 81       	ld	r20, Z
    265c:	46 17       	cp	r20, r22
    265e:	21 f0       	breq	.+8      	; 0x2668 <in_neighbor_graph+0x20>
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    2660:	2f 5f       	subi	r18, 0xFF	; 255
    2662:	f6 cf       	rjmp	.-20     	; 0x2650 <in_neighbor_graph+0x8>
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
        }
    }
    return -1;
    2664:	8f ef       	ldi	r24, 0xFF	; 255
    2666:	08 95       	ret
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    266a:	08 95       	ret

0000266c <get_neighbor_graph_index>:
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    266c:	fc 01       	movw	r30, r24
    266e:	40 81       	ld	r20, Z
    2670:	9c 01       	movw	r18, r24
    2672:	2e 5f       	subi	r18, 0xFE	; 254
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	84 17       	cp	r24, r20
    267a:	49 f0       	breq	.+18     	; 0x268e <get_neighbor_graph_index+0x22>
    267c:	2b 5f       	subi	r18, 0xFB	; 251
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	f9 01       	movw	r30, r18
    2682:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    2684:	90 81       	ld	r25, Z
    2686:	96 17       	cp	r25, r22
    2688:	19 f0       	breq	.+6      	; 0x2690 <get_neighbor_graph_index+0x24>
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    268a:	8f 5f       	subi	r24, 0xFF	; 255
    268c:	f5 cf       	rjmp	.-22     	; 0x2678 <get_neighbor_graph_index+0xc>
        if(ng->neighbor_tables[i].origin == node_address) {
            return i;
        }
    }
    return -1;
    268e:	8f ef       	ldi	r24, 0xFF	; 255
}
    2690:	08 95       	ret

00002692 <add_to_neighbor_graph>:
 *
 * @param ng - neighbor graph to which to add
 * @param new_table - new neighbor table to add to the neighbor graph
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	dc 01       	movw	r26, r24
    2698:	fb 01       	movw	r30, r22
    //printf("     add %d to neighbor_graph\r\n", nt->origin);
    if((ng->size < MAX_GRAPH)) {
    269a:	8c 91       	ld	r24, X
    269c:	88 30       	cpi	r24, 0x08	; 8
    269e:	00 f5       	brcc	.+64     	; 0x26e0 <add_to_neighbor_graph+0x4e>
        uint8_t index = ng->size;
        ng->size++;
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	98 0f       	add	r25, r24
    26a4:	9c 93       	st	X, r25
        ng->neighbor_tables[index].size = nt->size;
    26a6:	90 81       	ld	r25, Z
    26a8:	45 e0       	ldi	r20, 0x05	; 5
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	ed 01       	movw	r28, r26
    26b0:	48 9f       	mul	r20, r24
    26b2:	c0 0d       	add	r28, r0
    26b4:	d1 1d       	adc	r29, r1
    26b6:	11 24       	eor	r1, r1
    26b8:	99 83       	std	Y+1, r25	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    26ba:	81 81       	ldd	r24, Z+1	; 0x01
    26bc:	8a 83       	std	Y+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    26be:	82 81       	ldd	r24, Z+2	; 0x02
    26c0:	8b 83       	std	Y+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    26c2:	83 81       	ldd	r24, Z+3	; 0x03
    26c4:	8c 83       	std	Y+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    26c6:	54 81       	ldd	r21, Z+4	; 0x04
    26c8:	2f 5f       	subi	r18, 0xFF	; 255
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	42 9f       	mul	r20, r18
    26ce:	c0 01       	movw	r24, r0
    26d0:	43 9f       	mul	r20, r19
    26d2:	90 0d       	add	r25, r0
    26d4:	11 24       	eor	r1, r1
    26d6:	a8 0f       	add	r26, r24
    26d8:	b9 1f       	adc	r27, r25
    26da:	5c 93       	st	X, r21
        return 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <add_to_neighbor_graph+0x50>
    }
    return -1;
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
}
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	08 95       	ret

000026e8 <update_neighbor_graph>:
 * 
 * @param ng - neighbor graph to update
 * @param nt - neighbor table to update
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	8c 01       	movw	r16, r24
    26f4:	eb 01       	movw	r28, r22
    int8_t in_ng, index;
    
    in_ng = in_neighbor_graph(ng, nt->origin);
    26f6:	f9 80       	ldd	r15, Y+1	; 0x01
    26f8:	6f 2d       	mov	r22, r15
    26fa:	0e 94 24 13 	call	0x2648	; 0x2648 <in_neighbor_graph>
    if(in_ng == -1) {
    26fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2700:	29 f4       	brne	.+10     	; 0x270c <update_neighbor_graph+0x24>
        add_to_neighbor_graph(ng, nt);
    2702:	be 01       	movw	r22, r28
    2704:	c8 01       	movw	r24, r16
    2706:	0e 94 49 13 	call	0x2692	; 0x2692 <add_to_neighbor_graph>
        return 1;
    270a:	24 c0       	rjmp	.+72     	; 0x2754 <update_neighbor_graph+0x6c>
    } else {
        index = get_neighbor_graph_index(ng, nt->origin);
    270c:	6f 2d       	mov	r22, r15
    270e:	c8 01       	movw	r24, r16
    2710:	0e 94 36 13 	call	0x266c	; 0x266c <get_neighbor_graph_index>
        ng->neighbor_tables[index].size = nt->size;
    2714:	28 2f       	mov	r18, r24
    2716:	33 27       	eor	r19, r19
    2718:	27 fd       	sbrc	r18, 7
    271a:	30 95       	com	r19
    271c:	88 81       	ld	r24, Y
    271e:	45 e0       	ldi	r20, 0x05	; 5
    2720:	42 9f       	mul	r20, r18
    2722:	f0 01       	movw	r30, r0
    2724:	43 9f       	mul	r20, r19
    2726:	f0 0d       	add	r31, r0
    2728:	11 24       	eor	r1, r1
    272a:	e0 0f       	add	r30, r16
    272c:	f1 1f       	adc	r31, r17
    272e:	81 83       	std	Z+1, r24	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	82 83       	std	Z+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	83 83       	std	Z+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	84 83       	std	Z+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    273c:	5c 81       	ldd	r21, Y+4	; 0x04
    273e:	2f 5f       	subi	r18, 0xFF	; 255
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	42 9f       	mul	r20, r18
    2744:	c0 01       	movw	r24, r0
    2746:	43 9f       	mul	r20, r19
    2748:	90 0d       	add	r25, r0
    274a:	11 24       	eor	r1, r1
    274c:	f8 01       	movw	r30, r16
    274e:	e8 0f       	add	r30, r24
    2750:	f9 1f       	adc	r31, r25
    2752:	50 83       	st	Z, r21
        return 1;
    }
    return -1;
}
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	ff 90       	pop	r15
    2760:	08 95       	ret

00002762 <print_neighbor_graph>:
 * print_neighbor_graph:
 *  - print the current neighbor information
 * 
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    2762:	ef 92       	push	r14
    2764:	ff 92       	push	r15
    2766:	0f 93       	push	r16
    2768:	1f 93       	push	r17
    276a:	cf 93       	push	r28
    276c:	df 93       	push	r29
    276e:	8c 01       	movw	r16, r24
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    2770:	85 e0       	ldi	r24, 0x05	; 5
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
    for(uint8_t i = 0; i < ng->size; i++) {
    2778:	c0 e0       	ldi	r28, 0x00	; 0
        nt = ng->neighbor_tables[i];
    277a:	d5 e0       	ldi	r29, 0x05	; 5
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    277c:	86 e0       	ldi	r24, 0x06	; 6
    277e:	e8 2e       	mov	r14, r24
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	f8 2e       	mov	r15, r24
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    2784:	f8 01       	movw	r30, r16
    2786:	80 81       	ld	r24, Z
    2788:	c8 17       	cp	r28, r24
    278a:	00 f5       	brcc	.+64     	; 0x27cc <print_neighbor_graph+0x6a>
        nt = ng->neighbor_tables[i];
    278c:	f8 01       	movw	r30, r16
    278e:	dc 9f       	mul	r29, r28
    2790:	e0 0d       	add	r30, r0
    2792:	f1 1d       	adc	r31, r1
    2794:	11 24       	eor	r1, r1
    2796:	31 96       	adiw	r30, 0x01	; 1
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    2798:	84 81       	ldd	r24, Z+4	; 0x04
    279a:	1f 92       	push	r1
    279c:	8f 93       	push	r24
    279e:	83 81       	ldd	r24, Z+3	; 0x03
    27a0:	1f 92       	push	r1
    27a2:	8f 93       	push	r24
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	1f 92       	push	r1
    27a8:	8f 93       	push	r24
    27aa:	81 81       	ldd	r24, Z+1	; 0x01
    27ac:	1f 92       	push	r1
    27ae:	8f 93       	push	r24
    27b0:	ff 92       	push	r15
    27b2:	ef 92       	push	r14
    27b4:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    27b8:	cf 5f       	subi	r28, 0xFF	; 255
    27ba:	8d b7       	in	r24, 0x3d	; 61
    27bc:	9e b7       	in	r25, 0x3e	; 62
    27be:	0a 96       	adiw	r24, 0x0a	; 10
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	9e bf       	out	0x3e, r25	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	8d bf       	out	0x3d, r24	; 61
    27ca:	dc cf       	rjmp	.-72     	; 0x2784 <print_neighbor_graph+0x22>
        nt = ng->neighbor_tables[i];
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    }
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	08 95       	ret

000027da <print_packet>:
 */
 
#include <parser.h>

void print_packet(packet *p)
{
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	ec 01       	movw	r28, r24
    printf("[source_id: %d]", p->source_id);
    27e0:	88 81       	ld	r24, Y
    27e2:	1f 92       	push	r1
    27e4:	8f 93       	push	r24
    27e6:	8d e2       	ldi	r24, 0x2D	; 45
    27e8:	93 e0       	ldi	r25, 0x03	; 3
    27ea:	9f 93       	push	r25
    27ec:	8f 93       	push	r24
    27ee:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    printf("[seq_num: %d]", p->seq_num);
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	8f 93       	push	r24
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	8f 93       	push	r24
    27fa:	8d e3       	ldi	r24, 0x3D	; 61
    27fc:	93 e0       	ldi	r25, 0x03	; 3
    27fe:	9f 93       	push	r25
    2800:	8f 93       	push	r24
    2802:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    printf("[msg_type: %d]", p->type);
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	1f 92       	push	r1
    280a:	8f 93       	push	r24
    280c:	8b e4       	ldi	r24, 0x4B	; 75
    280e:	93 e0       	ldi	r25, 0x03	; 3
    2810:	9f 93       	push	r25
    2812:	8f 93       	push	r24
    2814:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    printf("[num_hops: %d]", p->num_hops);
    2818:	8c 81       	ldd	r24, Y+4	; 0x04
    281a:	1f 92       	push	r1
    281c:	8f 93       	push	r24
    281e:	8a e5       	ldi	r24, 0x5A	; 90
    2820:	93 e0       	ldi	r25, 0x03	; 3
    2822:	9f 93       	push	r25
    2824:	8f 93       	push	r24
    2826:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    switch(p->type)
    282a:	8d b7       	in	r24, 0x3d	; 61
    282c:	9e b7       	in	r25, 0x3e	; 62
    282e:	40 96       	adiw	r24, 0x10	; 16
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	9e bf       	out	0x3e, r25	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	8d bf       	out	0x3d, r24	; 61
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	85 30       	cpi	r24, 0x05	; 5
    283e:	d1 f0       	breq	.+52     	; 0x2874 <print_packet+0x9a>
    2840:	86 30       	cpi	r24, 0x06	; 6
    2842:	79 f5       	brne	.+94     	; 0x28a2 <print_packet+0xc8>
    {
        case MSG_CMD:
        {
            printf("[payload:%d,%d,%d]\r\n", (uint16_t)p->payload[0], p->payload[2], p->payload[3]);
    2844:	8c 85       	ldd	r24, Y+12	; 0x0c
    2846:	1f 92       	push	r1
    2848:	8f 93       	push	r24
    284a:	8b 85       	ldd	r24, Y+11	; 0x0b
    284c:	1f 92       	push	r1
    284e:	8f 93       	push	r24
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	1f 92       	push	r1
    2854:	8f 93       	push	r24
    2856:	89 e6       	ldi	r24, 0x69	; 105
    2858:	93 e0       	ldi	r25, 0x03	; 3
    285a:	9f 93       	push	r25
    285c:	8f 93       	push	r24
    285e:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
            break;
    2862:	8d b7       	in	r24, 0x3d	; 61
    2864:	9e b7       	in	r25, 0x3e	; 62
    2866:	08 96       	adiw	r24, 0x08	; 8
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	9e bf       	out	0x3e, r25	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	8d bf       	out	0x3d, r24	; 61
    2872:	17 c0       	rjmp	.+46     	; 0x28a2 <print_packet+0xc8>
        }

        case MSG_DATA:
        {
            printf("[payload:%d, %d, %d]\r\n", (uint16_t)p->payload[DATA_PWR_INDEX], 
    2874:	8d 85       	ldd	r24, Y+13	; 0x0d
    2876:	1f 92       	push	r1
    2878:	8f 93       	push	r24
    287a:	8b 85       	ldd	r24, Y+11	; 0x0b
    287c:	1f 92       	push	r1
    287e:	8f 93       	push	r24
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	1f 92       	push	r1
    2884:	8f 93       	push	r24
    2886:	8e e7       	ldi	r24, 0x7E	; 126
    2888:	93 e0       	ldi	r25, 0x03	; 3
    288a:	9f 93       	push	r25
    288c:	8f 93       	push	r24
    288e:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
                (uint16_t)p->payload[DATA_TEMP_INDEX],(uint16_t)p->payload[DATA_LIGHT_INDEX]);
            break;
    2892:	8d b7       	in	r24, 0x3d	; 61
    2894:	9e b7       	in	r25, 0x3e	; 62
    2896:	08 96       	adiw	r24, 0x08	; 8
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	9e bf       	out	0x3e, r25	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	8d bf       	out	0x3d, r24	; 61
        }

        default:{
        }
    }
}
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <parse_serv_msg>:

packet format:
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    28a8:	6f 92       	push	r6
    28aa:	7f 92       	push	r7
    28ac:	8f 92       	push	r8
    28ae:	9f 92       	push	r9
    28b0:	af 92       	push	r10
    28b2:	bf 92       	push	r11
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ff 92       	push	r15
    28ba:	0f 93       	push	r16
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	69 97       	sbiw	r28, 0x19	; 25
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	8c 01       	movw	r16, r24
    28d4:	3b 01       	movw	r6, r22
    uint8_t pos = 0;
    uint8_t item = 0;
    uint8_t temp_buf[MAX_BUF_SIZE];
    uint16_t value = 0;
    for (int x = 0; x < len; x ++){
    28d6:	4b 01       	movw	r8, r22
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    uint8_t pos = 0;
    uint8_t item = 0;
    28d8:	20 e0       	ldi	r18, 0x00	; 0
packet format:
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    uint8_t pos = 0;
    28da:	f1 2c       	mov	r15, r1
    uint8_t item = 0;
    uint8_t temp_buf[MAX_BUF_SIZE];
    uint16_t value = 0;
    for (int x = 0; x < len; x ++){
    28dc:	a4 2e       	mov	r10, r20
    28de:	b1 2c       	mov	r11, r1
    28e0:	ce 01       	movw	r24, r28
    28e2:	01 96       	adiw	r24, 0x01	; 1
    28e4:	6c 01       	movw	r12, r24
    28e6:	c4 01       	movw	r24, r8
    28e8:	86 19       	sub	r24, r6
    28ea:	97 09       	sbc	r25, r7
    28ec:	8a 15       	cp	r24, r10
    28ee:	9b 05       	cpc	r25, r11
    28f0:	6c f5       	brge	.+90     	; 0x294c <parse_serv_msg+0xa4>
        if(src[x] == ':')
    28f2:	f4 01       	movw	r30, r8
    28f4:	81 91       	ld	r24, Z+
    28f6:	4f 01       	movw	r8, r30
    28f8:	8a 33       	cpi	r24, 0x3A	; 58
    28fa:	11 f5       	brne	.+68     	; 0x2940 <parse_serv_msg+0x98>
        {
            value = atoi(temp_buf);
    28fc:	c6 01       	movw	r24, r12
    28fe:	29 8f       	std	Y+25, r18	; 0x19
    2900:	0e 94 f5 39 	call	0x73ea	; 0x73ea <atoi>
            //printf("parsed value = %d \r\n", value);
            switch(item)
    2904:	29 8d       	ldd	r18, Y+25	; 0x19
    2906:	21 30       	cpi	r18, 0x01	; 1
    2908:	59 f0       	breq	.+22     	; 0x2920 <parse_serv_msg+0x78>
    290a:	38 f0       	brcs	.+14     	; 0x291a <parse_serv_msg+0x72>
    290c:	22 30       	cpi	r18, 0x02	; 2
    290e:	61 f0       	breq	.+24     	; 0x2928 <parse_serv_msg+0x80>
    2910:	23 30       	cpi	r18, 0x03	; 3
    2912:	61 f4       	brne	.+24     	; 0x292c <parse_serv_msg+0x84>
                }

                case 3: // hop_num
                {
                    // get message hop number
                     parsed_packet->num_hops = value;
    2914:	f8 01       	movw	r30, r16
    2916:	84 83       	std	Z+4, r24	; 0x04
                    break;
    2918:	09 c0       	rjmp	.+18     	; 0x292c <parse_serv_msg+0x84>
            //printf("parsed value = %d \r\n", value);
            switch(item)
            {
                case 0: // mac_addr
                {
                    parsed_packet->source_id = value;
    291a:	f8 01       	movw	r30, r16
    291c:	80 83       	st	Z, r24
                    break;
    291e:	06 c0       	rjmp	.+12     	; 0x292c <parse_serv_msg+0x84>
                }

                case 1: // seq_num
                {              
                     // get seq_num
                     parsed_packet->seq_num = value;
    2920:	f8 01       	movw	r30, r16
    2922:	82 83       	std	Z+2, r24	; 0x02
    2924:	93 83       	std	Z+3, r25	; 0x03
                    break;
    2926:	02 c0       	rjmp	.+4      	; 0x292c <parse_serv_msg+0x84>
                }

                case 2: // msg_id
                {
                    // get message type
                    parsed_packet->type = value;
    2928:	f8 01       	movw	r30, r16
    292a:	81 83       	std	Z+1, r24	; 0x01

packet format:
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    292c:	f6 01       	movw	r30, r12
    292e:	8e 2f       	mov	r24, r30
    2930:	8c 19       	sub	r24, r12
                     parsed_packet->num_hops = value;
                    break;
                }
            }
            // clear buffer
            for(uint8_t i = 0; i < pos; i ++)
    2932:	8f 15       	cp	r24, r15
    2934:	10 f4       	brcc	.+4      	; 0x293a <parse_serv_msg+0x92>
            {
                temp_buf[i] = 0;
    2936:	11 92       	st	Z+, r1
    2938:	fa cf       	rjmp	.-12     	; 0x292e <parse_serv_msg+0x86>
            }
            item += 1;
    293a:	2f 5f       	subi	r18, 0xFF	; 255
            pos = 0;
    293c:	f1 2c       	mov	r15, r1
    293e:	d3 cf       	rjmp	.-90     	; 0x28e6 <parse_serv_msg+0x3e>
        }
        else{
            temp_buf[pos] = src[x];
    2940:	f6 01       	movw	r30, r12
    2942:	ef 0d       	add	r30, r15
    2944:	f1 1d       	adc	r31, r1
    2946:	80 83       	st	Z, r24
            pos += 1;
    2948:	f3 94       	inc	r15
    294a:	cd cf       	rjmp	.-102    	; 0x28e6 <parse_serv_msg+0x3e>
    Payload has not been parsed into packet.
    Once the loop has gone through the length of the message, 
    the payload will be stored in temp_buf. 
    Need to parse payload depending on message type
    */
    switch(parsed_packet->type)
    294c:	f8 01       	movw	r30, r16
    294e:	81 81       	ldd	r24, Z+1	; 0x01
    2950:	86 30       	cpi	r24, 0x06	; 6
    2952:	39 f0       	breq	.+14     	; 0x2962 <parse_serv_msg+0xba>
    2954:	18 f4       	brcc	.+6      	; 0x295c <parse_serv_msg+0xb4>
    2956:	85 30       	cpi	r24, 0x05	; 5
    2958:	b1 f0       	breq	.+44     	; 0x2986 <parse_serv_msg+0xde>
    295a:	11 c0       	rjmp	.+34     	; 0x297e <parse_serv_msg+0xd6>
    295c:	89 30       	cpi	r24, 0x09	; 9
    295e:	78 f4       	brcc	.+30     	; 0x297e <parse_serv_msg+0xd6>
    2960:	12 c0       	rjmp	.+36     	; 0x2986 <parse_serv_msg+0xde>
    {
        case MSG_CMD:
        {
            parsed_packet->payload[0] = temp_buf[0] - '0';
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	80 53       	subi	r24, 0x30	; 48
    2966:	f8 01       	movw	r30, r16
    2968:	81 87       	std	Z+9, r24	; 0x09
            parsed_packet->payload[1] = temp_buf[1] - '0';
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	80 53       	subi	r24, 0x30	; 48
    296e:	82 87       	std	Z+10, r24	; 0x0a
            parsed_packet->payload[2] = temp_buf[2] - '0';
    2970:	8b 81       	ldd	r24, Y+3	; 0x03
    2972:	80 53       	subi	r24, 0x30	; 48
    2974:	83 87       	std	Z+11, r24	; 0x0b
            parsed_packet->payload[3] = temp_buf[3] - '0';
    2976:	8c 81       	ldd	r24, Y+4	; 0x04
    2978:	80 53       	subi	r24, 0x30	; 48
    297a:	84 87       	std	Z+12, r24	; 0x0c
            break;
    297c:	04 c0       	rjmp	.+8      	; 0x2986 <parse_serv_msg+0xde>
            // what is the payload going to look like here?
            break;
        }

        default:{
            printf("invalid msg_type \r\n");
    297e:	85 e9       	ldi	r24, 0x95	; 149
    2980:	93 e0       	ldi	r25, 0x03	; 3
    2982:	0e 94 cc 3a 	call	0x7598	; 0x7598 <puts>
        }
    }
}
    2986:	69 96       	adiw	r28, 0x19	; 25
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	bf 90       	pop	r11
    29a2:	af 90       	pop	r10
    29a4:	9f 90       	pop	r9
    29a6:	8f 90       	pop	r8
    29a8:	7f 90       	pop	r7
    29aa:	6f 90       	pop	r6
    29ac:	08 95       	ret

000029ae <parse_msg>:
src - the pointer to the received data buffer
len - the length of the received data buffer
msg_type - the type of message
*/
void parse_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    29ae:	fc 01       	movw	r30, r24
    29b0:	db 01       	movw	r26, r22
    uint8_t pos = 0;
    uint8_t item = 0;
    uint8_t temp_buf[MAX_BUF_SIZE];

    parsed_packet->source_id = src[0];
    29b2:	8c 91       	ld	r24, X
    29b4:	80 83       	st	Z, r24
    parsed_packet->seq_num = src[1];
    29b6:	11 96       	adiw	r26, 0x01	; 1
    29b8:	8c 91       	ld	r24, X
    29ba:	11 97       	sbiw	r26, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	93 83       	std	Z+3, r25	; 0x03
    29c0:	82 83       	std	Z+2, r24	; 0x02
    parsed_packet->type = src[2];
    29c2:	12 96       	adiw	r26, 0x02	; 2
    29c4:	8c 91       	ld	r24, X
    29c6:	12 97       	sbiw	r26, 0x02	; 2
    29c8:	81 83       	std	Z+1, r24	; 0x01
    parsed_packet->num_hops = src[3];
    29ca:	13 96       	adiw	r26, 0x03	; 3
    29cc:	9c 91       	ld	r25, X
    29ce:	13 97       	sbiw	r26, 0x03	; 3
    29d0:	94 83       	std	Z+4, r25	; 0x04
    Payload has not been parsed into packet.
    Once the loop has gone through the length of the message, 
    the payload will be stored in temp_buf. 
    Need to parse payload depending on message type
    */
    switch(parsed_packet->type)
    29d2:	86 30       	cpi	r24, 0x06	; 6
    29d4:	91 f0       	breq	.+36     	; 0x29fa <parse_msg+0x4c>
    29d6:	70 f4       	brcc	.+28     	; 0x29f4 <parse_msg+0x46>
    29d8:	85 30       	cpi	r24, 0x05	; 5
    29da:	f9 f4       	brne	.+62     	; 0x2a1a <parse_msg+0x6c>
            break;
        }

        case MSG_DATA:
        {
            parsed_packet->payload[DATA_PWR_INDEX] = (uint16_t)src[4];
    29dc:	14 96       	adiw	r26, 0x04	; 4
    29de:	8c 91       	ld	r24, X
    29e0:	14 97       	sbiw	r26, 0x04	; 4
    29e2:	81 87       	std	Z+9, r24	; 0x09
            parsed_packet->payload[DATA_TEMP_INDEX] = (uint16_t)src[6];
    29e4:	16 96       	adiw	r26, 0x06	; 6
    29e6:	8c 91       	ld	r24, X
    29e8:	16 97       	sbiw	r26, 0x06	; 6
    29ea:	83 87       	std	Z+11, r24	; 0x0b
            parsed_packet->payload[DATA_LIGHT_INDEX] = (uint16_t)src[8];
    29ec:	18 96       	adiw	r26, 0x08	; 8
    29ee:	8c 91       	ld	r24, X
    29f0:	85 87       	std	Z+13, r24	; 0x0d
            //printf("payload:%d,%d,%d\r\n", src[4],src[6],src[8]);
            break;
    29f2:	08 95       	ret
    Payload has not been parsed into packet.
    Once the loop has gone through the length of the message, 
    the payload will be stored in temp_buf. 
    Need to parse payload depending on message type
    */
    switch(parsed_packet->type)
    29f4:	89 30       	cpi	r24, 0x09	; 9
    29f6:	a8 f0       	brcs	.+42     	; 0x2a22 <parse_msg+0x74>
    29f8:	10 c0       	rjmp	.+32     	; 0x2a1a <parse_msg+0x6c>
    {
        case MSG_CMD:
        {
            parsed_packet->payload[0] = src[4];
    29fa:	14 96       	adiw	r26, 0x04	; 4
    29fc:	8c 91       	ld	r24, X
    29fe:	14 97       	sbiw	r26, 0x04	; 4
    2a00:	81 87       	std	Z+9, r24	; 0x09
            parsed_packet->payload[1] = src[5];
    2a02:	15 96       	adiw	r26, 0x05	; 5
    2a04:	8c 91       	ld	r24, X
    2a06:	15 97       	sbiw	r26, 0x05	; 5
    2a08:	82 87       	std	Z+10, r24	; 0x0a
            parsed_packet->payload[2] = src[6];
    2a0a:	16 96       	adiw	r26, 0x06	; 6
    2a0c:	8c 91       	ld	r24, X
    2a0e:	16 97       	sbiw	r26, 0x06	; 6
    2a10:	83 87       	std	Z+11, r24	; 0x0b
            parsed_packet->payload[3] = src[7];
    2a12:	17 96       	adiw	r26, 0x07	; 7
    2a14:	8c 91       	ld	r24, X
    2a16:	84 87       	std	Z+12, r24	; 0x0c
            break;
    2a18:	08 95       	ret
            // what is the payload going to look like here?
            break;
        }

        default:{
            printf("invalid msg_type \r\n");
    2a1a:	85 e9       	ldi	r24, 0x95	; 149
    2a1c:	93 e0       	ldi	r25, 0x03	; 3
    2a1e:	0c 94 cc 3a 	jmp	0x7598	; 0x7598 <puts>
    2a22:	08 95       	ret

00002a24 <sample_light>:
 * Kedar Amladi // kamladi. Daniel Santoro // ddsantor. Adam Selevan // aselevan.
 */
 
#include <sample_sensor.h>

uint16_t sample_light(){
    2a24:	1f 93       	push	r17
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <sample_light+0x8>
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    uint8_t fd;
    int8_t val;
    uint16_t light;
    
    // Open ADC device as read 
    fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
    2a30:	65 e0       	ldi	r22, 0x05	; 5
    2a32:	83 e0       	ldi	r24, 0x03	; 3
    2a34:	0e 94 4f 31 	call	0x629e	; 0x629e <nrk_open>
    2a38:	18 2f       	mov	r17, r24
    if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
    
    // state actions
    val = nrk_set_status(fd,SENSOR_SELECT,LIGHT);
    2a3a:	41 e0       	ldi	r20, 0x01	; 1
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	0e 94 ee 31 	call	0x63dc	; 0x63dc <nrk_set_status>
    val = nrk_read(fd,&light,2);
    2a42:	42 e0       	ldi	r20, 0x02	; 2
    2a44:	be 01       	movw	r22, r28
    2a46:	6f 5f       	subi	r22, 0xFF	; 255
    2a48:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <nrk_read>
    //printf("...light/threshold=%d/%d\r\n",light, light_threshold);
    
    nrk_close(fd); // power down sensor for power savings
    2a50:	81 2f       	mov	r24, r17
    2a52:	0e 94 96 31 	call	0x632c	; 0x632c <nrk_close>
    
    return light;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	08 95       	ret

00002a66 <in_sequence_pool>:
 * @param sp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_sequence_pool(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    2a66:	fc 01       	movw	r30, r24
    2a68:	21 91       	ld	r18, Z+
    2a6a:	cf 01       	movw	r24, r30
    2a6c:	3e 2f       	mov	r19, r30
    2a6e:	38 1b       	sub	r19, r24
    2a70:	32 17       	cp	r19, r18
    2a72:	28 f4       	brcc	.+10     	; 0x2a7e <in_sequence_pool+0x18>
        if(sp->node_id[i] == node_address) {
    2a74:	31 91       	ld	r19, Z+
    2a76:	36 13       	cpse	r19, r22
    2a78:	f9 cf       	rjmp	.-14     	; 0x2a6c <in_sequence_pool+0x6>
            return (int8_t)1;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return (int8_t)-1;
}
    2a7c:	08 95       	ret
    for(uint8_t i = 0; i < sp->size; i++) {
        if(sp->node_id[i] == node_address) {
            return (int8_t)1;
        }
    }
    return (int8_t)-1;
    2a7e:	8f ef       	ldi	r24, 0xFF	; 255
    2a80:	08 95       	ret

00002a82 <get_sequence_pool_index>:
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    2a82:	fc 01       	movw	r30, r24
    2a84:	81 91       	ld	r24, Z+
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	98 17       	cp	r25, r24
    2a8a:	39 f0       	breq	.+14     	; 0x2a9a <get_sequence_pool_index+0x18>
        if(sp->node_id[i] == node_address) {
    2a8c:	21 91       	ld	r18, Z+
    2a8e:	26 13       	cpse	r18, r22
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <get_sequence_pool_index+0x14>
            return i;
    2a92:	89 2f       	mov	r24, r25
    2a94:	08 95       	ret
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    2a96:	9f 5f       	subi	r25, 0xFF	; 255
    2a98:	f7 cf       	rjmp	.-18     	; 0x2a88 <get_sequence_pool_index+0x6>
        if(sp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    2a9a:	8f ef       	ldi	r24, 0xFF	; 255
}
    2a9c:	08 95       	ret

00002a9e <get_sequence_number>:

uint16_t get_sequence_number(sequence_pool_t *sp, uint8_t node_address) {
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	ec 01       	movw	r28, r24
    int8_t index = get_sequence_pool_index(sp, node_address);
    2aa4:	0e 94 41 15 	call	0x2a82	; 0x2a82 <get_sequence_pool_index>
    if(index != -1) {
    2aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aaa:	41 f0       	breq	.+16     	; 0x2abc <get_sequence_number+0x1e>
        return sp->seq_nums[index];
    2aac:	92 e0       	ldi	r25, 0x02	; 2
    2aae:	89 02       	muls	r24, r25
    2ab0:	c0 0d       	add	r28, r0
    2ab2:	d1 1d       	adc	r29, r1
    2ab4:	11 24       	eor	r1, r1
    2ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <get_sequence_number+0x22>
    }
    return 0;
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	90 e0       	ldi	r25, 0x00	; 0
}
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	08 95       	ret

00002ac6 <add_to_sequence_pool>:
 * @param sp - sequence pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param seq_num - sequence number of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    2ac6:	ef 92       	push	r14
    2ac8:	ff 92       	push	r15
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    if((sp->size < MAX_POOL) && (in_sequence_pool(sp, node_address) == -1)) {
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	c0 81       	ld	r28, Z
    2ad6:	c8 30       	cpi	r28, 0x08	; 8
    2ad8:	d8 f4       	brcc	.+54     	; 0x2b10 <add_to_sequence_pool+0x4a>
    2ada:	7a 01       	movw	r14, r20
    2adc:	d6 2f       	mov	r29, r22
    2ade:	8c 01       	movw	r16, r24
    2ae0:	0e 94 33 15 	call	0x2a66	; 0x2a66 <in_sequence_pool>
    2ae4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ae6:	a1 f4       	brne	.+40     	; 0x2b10 <add_to_sequence_pool+0x4a>
        uint8_t index = sp->size;
        sp->size++;
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	8c 0f       	add	r24, r28
    2aec:	f8 01       	movw	r30, r16
    2aee:	80 83       	st	Z, r24
        sp->node_id[index] = node_address;
    2af0:	2c 2f       	mov	r18, r28
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	e2 0f       	add	r30, r18
    2af6:	f3 1f       	adc	r31, r19
    2af8:	d1 83       	std	Z+1, r29	; 0x01
        sp->seq_nums[index] = seq_num;
    2afa:	2e 5f       	subi	r18, 0xFE	; 254
    2afc:	3f 4f       	sbci	r19, 0xFF	; 255
    2afe:	22 0f       	add	r18, r18
    2b00:	33 1f       	adc	r19, r19
    2b02:	f8 01       	movw	r30, r16
    2b04:	e2 0f       	add	r30, r18
    2b06:	f3 1f       	adc	r31, r19
    2b08:	f1 82       	std	Z+1, r15	; 0x01
    2b0a:	e0 82       	st	Z, r14
        return 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	01 c0       	rjmp	.+2      	; 0x2b12 <add_to_sequence_pool+0x4c>
    }
    return -1;
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	08 95       	ret

00002b20 <update_sequence_pool>:
 * @param sp - sequence pool to be updated
 * @param node_address - node whose sequence number needs updating
 * @param seq_num - new sequence number of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	ec 01       	movw	r28, r24
    2b2a:	8a 01       	movw	r16, r20
    int8_t index = get_sequence_pool_index(sp, node_address);
    2b2c:	0e 94 41 15 	call	0x2a82	; 0x2a82 <get_sequence_pool_index>
    if(index >= 0) {
    2b30:	87 fd       	sbrc	r24, 7
    2b32:	09 c0       	rjmp	.+18     	; 0x2b46 <update_sequence_pool+0x26>
        sp->seq_nums[index] = seq_num;
    2b34:	92 e0       	ldi	r25, 0x02	; 2
    2b36:	89 02       	muls	r24, r25
    2b38:	c0 0d       	add	r28, r0
    2b3a:	d1 1d       	adc	r29, r1
    2b3c:	11 24       	eor	r1, r1
    2b3e:	1d 83       	std	Y+5, r17	; 0x05
    2b40:	0c 83       	std	Y+4, r16	; 0x04
        return 1;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	01 c0       	rjmp	.+2      	; 0x2b48 <update_sequence_pool+0x28>
    }
    return -1;
    2b46:	8f ef       	ldi	r24, 0xFF	; 255
}
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	08 95       	ret

00002b52 <packet_queue_init>:

#include <packet_queue.h>

void packet_queue_init(packet_queue* pq) {
	pq->front = 0;
    2b52:	fc 01       	movw	r30, r24
    2b54:	e8 57       	subi	r30, 0x78	; 120
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	10 82       	st	Z, r1
	pq->back = 0;
    2b5a:	31 96       	adiw	r30, 0x01	; 1
    2b5c:	10 82       	st	Z, r1
	pq->size = 0;
    2b5e:	31 96       	adiw	r30, 0x01	; 1
    2b60:	10 82       	st	Z, r1
    2b62:	08 95       	ret

00002b64 <push>:
}

// NEED TO test for all types of payload
void push(packet_queue* pq, packet* p) {
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	fc 01       	movw	r30, r24
    2b6a:	db 01       	movw	r26, r22
	if(pq->size < MAX_PACKET_BUFFER) {
    2b6c:	ec 01       	movw	r28, r24
    2b6e:	c6 57       	subi	r28, 0x76	; 118
    2b70:	df 4f       	sbci	r29, 0xFF	; 255
    2b72:	98 81       	ld	r25, Y
    2b74:	98 30       	cpi	r25, 0x08	; 8
    2b76:	d8 f5       	brcc	.+118    	; 0x2bee <push+0x8a>
		pq->size++;
    2b78:	9f 5f       	subi	r25, 0xFF	; 255
    2b7a:	98 83       	st	Y, r25

		pq->buffer[pq->back].type 			= p->type;
    2b7c:	21 97       	sbiw	r28, 0x01	; 1
    2b7e:	98 81       	ld	r25, Y
    2b80:	11 96       	adiw	r26, 0x01	; 1
    2b82:	8c 91       	ld	r24, X
    2b84:	11 97       	sbiw	r26, 0x01	; 1
    2b86:	21 e1       	ldi	r18, 0x11	; 17
    2b88:	92 9f       	mul	r25, r18
    2b8a:	e0 0d       	add	r30, r0
    2b8c:	f1 1d       	adc	r31, r1
    2b8e:	11 24       	eor	r1, r1
    2b90:	81 83       	std	Z+1, r24	; 0x01
		pq->buffer[pq->back].source_id 		= p->source_id;
    2b92:	8c 91       	ld	r24, X
    2b94:	80 83       	st	Z, r24
		pq->buffer[pq->back].seq_num 		= p->seq_num;
    2b96:	12 96       	adiw	r26, 0x02	; 2
    2b98:	2d 91       	ld	r18, X+
    2b9a:	3c 91       	ld	r19, X
    2b9c:	13 97       	sbiw	r26, 0x03	; 3
    2b9e:	33 83       	std	Z+3, r19	; 0x03
    2ba0:	22 83       	std	Z+2, r18	; 0x02
		pq->buffer[pq->back].num_hops 		= p->num_hops;
    2ba2:	14 96       	adiw	r26, 0x04	; 4
    2ba4:	8c 91       	ld	r24, X
    2ba6:	14 97       	sbiw	r26, 0x04	; 4
    2ba8:	84 83       	std	Z+4, r24	; 0x04

		pq->buffer[pq->back].payload[0]	= p->payload[0];
    2baa:	19 96       	adiw	r26, 0x09	; 9
    2bac:	8c 91       	ld	r24, X
    2bae:	19 97       	sbiw	r26, 0x09	; 9
    2bb0:	81 87       	std	Z+9, r24	; 0x09
		pq->buffer[pq->back].payload[1]	= p->payload[1];
    2bb2:	1a 96       	adiw	r26, 0x0a	; 10
    2bb4:	8c 91       	ld	r24, X
    2bb6:	1a 97       	sbiw	r26, 0x0a	; 10
    2bb8:	82 87       	std	Z+10, r24	; 0x0a
		pq->buffer[pq->back].payload[2]	= p->payload[2];
    2bba:	1b 96       	adiw	r26, 0x0b	; 11
    2bbc:	8c 91       	ld	r24, X
    2bbe:	1b 97       	sbiw	r26, 0x0b	; 11
    2bc0:	83 87       	std	Z+11, r24	; 0x0b
		pq->buffer[pq->back].payload[3]	= p->payload[3];
    2bc2:	1c 96       	adiw	r26, 0x0c	; 12
    2bc4:	8c 91       	ld	r24, X
    2bc6:	1c 97       	sbiw	r26, 0x0c	; 12
    2bc8:	84 87       	std	Z+12, r24	; 0x0c
		pq->buffer[pq->back].payload[4]	= p->payload[4];
    2bca:	1d 96       	adiw	r26, 0x0d	; 13
    2bcc:	8c 91       	ld	r24, X
    2bce:	1d 97       	sbiw	r26, 0x0d	; 13
    2bd0:	85 87       	std	Z+13, r24	; 0x0d
		pq->buffer[pq->back].payload[5]	= p->payload[5];
    2bd2:	1e 96       	adiw	r26, 0x0e	; 14
    2bd4:	8c 91       	ld	r24, X
    2bd6:	1e 97       	sbiw	r26, 0x0e	; 14
    2bd8:	86 87       	std	Z+14, r24	; 0x0e
		pq->buffer[pq->back].payload[6]	= p->payload[6];
    2bda:	1f 96       	adiw	r26, 0x0f	; 15
    2bdc:	8c 91       	ld	r24, X
    2bde:	1f 97       	sbiw	r26, 0x0f	; 15
    2be0:	87 87       	std	Z+15, r24	; 0x0f
		pq->buffer[pq->back].payload[7]	= p->payload[7];
    2be2:	50 96       	adiw	r26, 0x10	; 16
    2be4:	8c 91       	ld	r24, X
    2be6:	80 8b       	std	Z+16, r24	; 0x10

		pq->back++;
    2be8:	9f 5f       	subi	r25, 0xFF	; 255
		pq->back %= MAX_PACKET_BUFFER;
    2bea:	97 70       	andi	r25, 0x07	; 7
    2bec:	98 83       	st	Y, r25
	}
	return;
}
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	08 95       	ret

00002bf4 <pop>:

// NEED To test for all types of payload
void pop(packet_queue* pq, packet* p) {
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	db 01       	movw	r26, r22
	if(pq->size > 0) {
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	66 57       	subi	r22, 0x76	; 118
    2bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2c00:	eb 01       	movw	r28, r22
    2c02:	28 81       	ld	r18, Y
    2c04:	22 23       	and	r18, r18
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <pop+0x16>
    2c08:	8e c0       	rjmp	.+284    	; 0x2d26 <pop+0x132>
		p->type 		= pq->buffer[pq->front].type;
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e8 57       	subi	r30, 0x78	; 120
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	30 81       	ld	r19, Z
    2c12:	21 e1       	ldi	r18, 0x11	; 17
    2c14:	ac 01       	movw	r20, r24
    2c16:	23 9f       	mul	r18, r19
    2c18:	40 0d       	add	r20, r0
    2c1a:	51 1d       	adc	r21, r1
    2c1c:	11 24       	eor	r1, r1
    2c1e:	ea 01       	movw	r28, r20
    2c20:	39 81       	ldd	r19, Y+1	; 0x01
    2c22:	11 96       	adiw	r26, 0x01	; 1
    2c24:	3c 93       	st	X, r19
    2c26:	11 97       	sbiw	r26, 0x01	; 1
		p->source_id 	= pq->buffer[pq->front].source_id;
    2c28:	30 81       	ld	r19, Z
    2c2a:	ac 01       	movw	r20, r24
    2c2c:	23 9f       	mul	r18, r19
    2c2e:	40 0d       	add	r20, r0
    2c30:	51 1d       	adc	r21, r1
    2c32:	11 24       	eor	r1, r1
    2c34:	ea 01       	movw	r28, r20
    2c36:	38 81       	ld	r19, Y
    2c38:	3c 93       	st	X, r19
		p->seq_num 		= pq->buffer[pq->front].seq_num;
    2c3a:	30 81       	ld	r19, Z
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	23 9f       	mul	r18, r19
    2c40:	40 0d       	add	r20, r0
    2c42:	51 1d       	adc	r21, r1
    2c44:	11 24       	eor	r1, r1
    2c46:	ea 01       	movw	r28, r20
    2c48:	4a 81       	ldd	r20, Y+2	; 0x02
    2c4a:	5b 81       	ldd	r21, Y+3	; 0x03
    2c4c:	13 96       	adiw	r26, 0x03	; 3
    2c4e:	5c 93       	st	X, r21
    2c50:	4e 93       	st	-X, r20
    2c52:	12 97       	sbiw	r26, 0x02	; 2
		p->num_hops 	= pq->buffer[pq->front].num_hops;
    2c54:	30 81       	ld	r19, Z
    2c56:	ac 01       	movw	r20, r24
    2c58:	23 9f       	mul	r18, r19
    2c5a:	40 0d       	add	r20, r0
    2c5c:	51 1d       	adc	r21, r1
    2c5e:	11 24       	eor	r1, r1
    2c60:	ea 01       	movw	r28, r20
    2c62:	3c 81       	ldd	r19, Y+4	; 0x04
    2c64:	14 96       	adiw	r26, 0x04	; 4
    2c66:	3c 93       	st	X, r19
    2c68:	14 97       	sbiw	r26, 0x04	; 4

		p->payload[0]	= pq->buffer[pq->front].payload[0];
    2c6a:	30 81       	ld	r19, Z
    2c6c:	ac 01       	movw	r20, r24
    2c6e:	23 9f       	mul	r18, r19
    2c70:	40 0d       	add	r20, r0
    2c72:	51 1d       	adc	r21, r1
    2c74:	11 24       	eor	r1, r1
    2c76:	ea 01       	movw	r28, r20
    2c78:	39 85       	ldd	r19, Y+9	; 0x09
    2c7a:	19 96       	adiw	r26, 0x09	; 9
    2c7c:	3c 93       	st	X, r19
    2c7e:	19 97       	sbiw	r26, 0x09	; 9
		p->payload[1]	= pq->buffer[pq->front].payload[1];
    2c80:	30 81       	ld	r19, Z
    2c82:	ac 01       	movw	r20, r24
    2c84:	23 9f       	mul	r18, r19
    2c86:	40 0d       	add	r20, r0
    2c88:	51 1d       	adc	r21, r1
    2c8a:	11 24       	eor	r1, r1
    2c8c:	ea 01       	movw	r28, r20
    2c8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c90:	1a 96       	adiw	r26, 0x0a	; 10
    2c92:	3c 93       	st	X, r19
    2c94:	1a 97       	sbiw	r26, 0x0a	; 10
		p->payload[2]	= pq->buffer[pq->front].payload[2];
    2c96:	30 81       	ld	r19, Z
    2c98:	ac 01       	movw	r20, r24
    2c9a:	23 9f       	mul	r18, r19
    2c9c:	40 0d       	add	r20, r0
    2c9e:	51 1d       	adc	r21, r1
    2ca0:	11 24       	eor	r1, r1
    2ca2:	ea 01       	movw	r28, r20
    2ca4:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ca6:	1b 96       	adiw	r26, 0x0b	; 11
    2ca8:	3c 93       	st	X, r19
    2caa:	1b 97       	sbiw	r26, 0x0b	; 11
		p->payload[3]	= pq->buffer[pq->front].payload[3];
    2cac:	30 81       	ld	r19, Z
    2cae:	ac 01       	movw	r20, r24
    2cb0:	23 9f       	mul	r18, r19
    2cb2:	40 0d       	add	r20, r0
    2cb4:	51 1d       	adc	r21, r1
    2cb6:	11 24       	eor	r1, r1
    2cb8:	ea 01       	movw	r28, r20
    2cba:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cbc:	1c 96       	adiw	r26, 0x0c	; 12
    2cbe:	3c 93       	st	X, r19
    2cc0:	1c 97       	sbiw	r26, 0x0c	; 12
		p->payload[4]	= pq->buffer[pq->front].payload[4];
    2cc2:	30 81       	ld	r19, Z
    2cc4:	ac 01       	movw	r20, r24
    2cc6:	23 9f       	mul	r18, r19
    2cc8:	40 0d       	add	r20, r0
    2cca:	51 1d       	adc	r21, r1
    2ccc:	11 24       	eor	r1, r1
    2cce:	ea 01       	movw	r28, r20
    2cd0:	3d 85       	ldd	r19, Y+13	; 0x0d
    2cd2:	1d 96       	adiw	r26, 0x0d	; 13
    2cd4:	3c 93       	st	X, r19
    2cd6:	1d 97       	sbiw	r26, 0x0d	; 13
		p->payload[5]	= pq->buffer[pq->front].payload[5];
    2cd8:	30 81       	ld	r19, Z
    2cda:	ac 01       	movw	r20, r24
    2cdc:	23 9f       	mul	r18, r19
    2cde:	40 0d       	add	r20, r0
    2ce0:	51 1d       	adc	r21, r1
    2ce2:	11 24       	eor	r1, r1
    2ce4:	ea 01       	movw	r28, r20
    2ce6:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ce8:	1e 96       	adiw	r26, 0x0e	; 14
    2cea:	3c 93       	st	X, r19
    2cec:	1e 97       	sbiw	r26, 0x0e	; 14
		p->payload[6]	= pq->buffer[pq->front].payload[6];
    2cee:	30 81       	ld	r19, Z
    2cf0:	ac 01       	movw	r20, r24
    2cf2:	23 9f       	mul	r18, r19
    2cf4:	40 0d       	add	r20, r0
    2cf6:	51 1d       	adc	r21, r1
    2cf8:	11 24       	eor	r1, r1
    2cfa:	ea 01       	movw	r28, r20
    2cfc:	3f 85       	ldd	r19, Y+15	; 0x0f
    2cfe:	1f 96       	adiw	r26, 0x0f	; 15
    2d00:	3c 93       	st	X, r19
    2d02:	1f 97       	sbiw	r26, 0x0f	; 15
		p->payload[7]	= pq->buffer[pq->front].payload[7];
    2d04:	30 81       	ld	r19, Z
    2d06:	23 9f       	mul	r18, r19
    2d08:	80 0d       	add	r24, r0
    2d0a:	91 1d       	adc	r25, r1
    2d0c:	11 24       	eor	r1, r1
    2d0e:	ec 01       	movw	r28, r24
    2d10:	88 89       	ldd	r24, Y+16	; 0x10
    2d12:	50 96       	adiw	r26, 0x10	; 16
    2d14:	8c 93       	st	X, r24

		pq->size--;
    2d16:	db 01       	movw	r26, r22
    2d18:	8c 91       	ld	r24, X
    2d1a:	81 50       	subi	r24, 0x01	; 1
    2d1c:	8c 93       	st	X, r24
		pq->front++;
    2d1e:	80 81       	ld	r24, Z
    2d20:	8f 5f       	subi	r24, 0xFF	; 255
		pq->front %= MAX_PACKET_BUFFER;	
    2d22:	87 70       	andi	r24, 0x07	; 7
    2d24:	80 83       	st	Z, r24
	}
}
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	08 95       	ret

00002d2c <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    2d2c:	90 91 41 01 	lds	r25, 0x0141
    2d30:	9f 71       	andi	r25, 0x1F	; 31
    2d32:	9f 31       	cpi	r25, 0x1F	; 31
    2d34:	d9 f3       	breq	.-10     	; 0x2d2c <rf_cmd>
		continue;
	TRX_STATE = cmd;
    2d36:	80 93 42 01 	sts	0x0142, r24
    2d3a:	08 95       	ret

00002d3c <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	80 93 a1 15 	sts	0x15A1, r24
    2d42:	08 95       	ret

00002d44 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    2d44:	10 92 a1 15 	sts	0x15A1, r1
    2d48:	08 95       	ret

00002d4a <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    2d4a:	80 91 41 01 	lds	r24, 0x0141
    2d4e:	8f 71       	andi	r24, 0x1F	; 31
    2d50:	8f 31       	cpi	r24, 0x1F	; 31
    2d52:	d9 f3       	breq	.-10     	; 0x2d4a <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    2d54:	80 91 41 01 	lds	r24, 0x0141
    2d58:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    2d5a:	e1 f0       	breq	.+56     	; 0x2d94 <rf_power_down+0x4a>
    2d5c:	8f 30       	cpi	r24, 0x0F	; 15
    2d5e:	d1 f0       	breq	.+52     	; 0x2d94 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    2d60:	80 91 41 01 	lds	r24, 0x0141
    2d64:	8f 71       	andi	r24, 0x1F	; 31
    2d66:	88 30       	cpi	r24, 0x08	; 8
    2d68:	31 f4       	brne	.+12     	; 0x2d76 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    2d6a:	80 91 39 01 	lds	r24, 0x0139
    2d6e:	82 60       	ori	r24, 0x02	; 2
    2d70:	80 93 39 01 	sts	0x0139, r24
    2d74:	0b c0       	rjmp	.+22     	; 0x2d8c <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    2d76:	88 e0       	ldi	r24, 0x08	; 8
    2d78:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    2d7c:	80 91 41 01 	lds	r24, 0x0141
    2d80:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    2d82:	88 30       	cpi	r24, 0x08	; 8
    2d84:	d9 f7       	brne	.-10     	; 0x2d7c <rf_power_down+0x32>
    2d86:	f1 cf       	rjmp	.-30     	; 0x2d6a <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    2d88:	8f 30       	cpi	r24, 0x0F	; 15
    2d8a:	21 f0       	breq	.+8      	; 0x2d94 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    2d8c:	80 91 41 01 	lds	r24, 0x0141
    2d90:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    2d92:	d1 f7       	brne	.-12     	; 0x2d88 <rf_power_down+0x3e>
    2d94:	08 95       	ret

00002d96 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    2d96:	80 91 41 01 	lds	r24, 0x0141
    2d9a:	8f 71       	andi	r24, 0x1F	; 31
    2d9c:	8f 31       	cpi	r24, 0x1F	; 31
    2d9e:	d9 f3       	breq	.-10     	; 0x2d96 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    2da0:	80 91 41 01 	lds	r24, 0x0141
    2da4:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    2da6:	11 f0       	breq	.+4      	; 0x2dac <rf_power_up+0x16>
    2da8:	8f 30       	cpi	r24, 0x0F	; 15
    2daa:	51 f4       	brne	.+20     	; 0x2dc0 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    2dac:	80 91 39 01 	lds	r24, 0x0139
    2db0:	8d 7f       	andi	r24, 0xFD	; 253
    2db2:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    2db6:	80 91 41 01 	lds	r24, 0x0141
    2dba:	8f 71       	andi	r24, 0x1F	; 31
    2dbc:	88 30       	cpi	r24, 0x08	; 8
    2dbe:	d9 f7       	brne	.-10     	; 0x2db6 <rf_power_up+0x20>
    2dc0:	08 95       	ret

00002dc2 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    2dc2:	e5 e4       	ldi	r30, 0x45	; 69
    2dc4:	f1 e0       	ldi	r31, 0x01	; 1
    2dc6:	90 81       	ld	r25, Z
    2dc8:	90 7f       	andi	r25, 0xF0	; 240
    2dca:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    2dcc:	90 81       	ld	r25, Z
    2dce:	8f 70       	andi	r24, 0x0F	; 15
    2dd0:	98 2b       	or	r25, r24
    2dd2:	90 83       	st	Z, r25
    2dd4:	08 95       	ret

00002dd6 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    2dd6:	e7 e5       	ldi	r30, 0x57	; 87
    2dd8:	f1 e0       	ldi	r31, 0x01	; 1
    2dda:	80 81       	ld	r24, Z
    2ddc:	8d 7f       	andi	r24, 0xFD	; 253
    2dde:	80 83       	st	Z, r24
    2de0:	08 95       	ret

00002de2 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    2de2:	e7 e5       	ldi	r30, 0x57	; 87
    2de4:	f1 e0       	ldi	r31, 0x01	; 1
    2de6:	80 81       	ld	r24, Z
    2de8:	82 60       	ori	r24, 0x02	; 2
    2dea:	80 83       	st	Z, r24
    2dec:	08 95       	ret

00002dee <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    2dee:	ee e6       	ldi	r30, 0x6E	; 110
    2df0:	f1 e0       	ldi	r31, 0x01	; 1
    2df2:	80 81       	ld	r24, Z
    2df4:	8f 7e       	andi	r24, 0xEF	; 239
    2df6:	80 83       	st	Z, r24
    2df8:	08 95       	ret

00002dfa <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    2dfa:	ee e6       	ldi	r30, 0x6E	; 110
    2dfc:	f1 e0       	ldi	r31, 0x01	; 1
    2dfe:	80 81       	ld	r24, Z
    2e00:	80 61       	ori	r24, 0x10	; 16
    2e02:	80 83       	st	Z, r24
    2e04:	08 95       	ret

00002e06 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    2e06:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    2e0a:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    2e0e:	90 93 ab 15 	sts	0x15AB, r25
    2e12:	80 93 aa 15 	sts	0x15AA, r24
    2e16:	08 95       	ret

00002e18 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    2e18:	90 93 a5 15 	sts	0x15A5, r25
    2e1c:	80 93 a4 15 	sts	0x15A4, r24
	PHY_CC_CCA &= ~(0x1F);
    2e20:	e8 e4       	ldi	r30, 0x48	; 72
    2e22:	f1 e0       	ldi	r31, 0x01	; 1
    2e24:	80 81       	ld	r24, Z
    2e26:	80 7e       	andi	r24, 0xE0	; 224
    2e28:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    2e2a:	80 81       	ld	r24, Z
    2e2c:	68 2b       	or	r22, r24
    2e2e:	60 83       	st	Z, r22
    2e30:	08 95       	ret

00002e32 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    2e32:	90 93 33 05 	sts	0x0533, r25
    2e36:	80 93 32 05 	sts	0x0532, r24
    2e3a:	08 95       	ret

00002e3c <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    2e3c:	90 93 31 05 	sts	0x0531, r25
    2e40:	80 93 30 05 	sts	0x0530, r24
    2e44:	08 95       	ret

00002e46 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	fc 01       	movw	r30, r24
    2e50:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    2e52:	80 e2       	ldi	r24, 0x20	; 32
    2e54:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    2e58:	80 ec       	ldi	r24, 0xC0	; 192
    2e5a:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    2e5e:	60 62       	ori	r22, 0x20	; 32
    2e60:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    2e64:	85 ec       	ldi	r24, 0xC5	; 197
    2e66:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    2e6a:	87 ea       	ldi	r24, 0xA7	; 167
    2e6c:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    2e70:	80 e8       	ldi	r24, 0x80	; 128
    2e72:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    2e76:	20 93 60 01 	sts	0x0160, r18
    2e7a:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    2e7e:	40 93 62 01 	sts	0x0162, r20
    2e82:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    2e86:	c6 e4       	ldi	r28, 0x46	; 70
    2e88:	d1 e0       	ldi	r29, 0x01	; 1
    2e8a:	08 81       	ld	r16, Y
    2e8c:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    2e8e:	98 81       	ld	r25, Y
    2e90:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    2e92:	30 2f       	mov	r19, r16
    2e94:	32 95       	swap	r19
    2e96:	36 95       	lsr	r19
    2e98:	37 70       	andi	r19, 0x07	; 7
    2e9a:	60 e4       	ldi	r22, 0x40	; 64
    2e9c:	36 9f       	mul	r19, r22
    2e9e:	80 01       	movw	r16, r0
    2ea0:	11 24       	eor	r1, r1
    2ea2:	22 95       	swap	r18
    2ea4:	26 95       	lsr	r18
    2ea6:	23 70       	andi	r18, 0x03	; 3
    2ea8:	62 2f       	mov	r22, r18
    2eaa:	60 2b       	or	r22, r16
    2eac:	82 95       	swap	r24
    2eae:	86 95       	lsr	r24
    2eb0:	83 70       	andi	r24, 0x03	; 3
    2eb2:	70 e1       	ldi	r23, 0x10	; 16
    2eb4:	87 9f       	mul	r24, r23
    2eb6:	90 01       	movw	r18, r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    2ebc:	92 95       	swap	r25
    2ebe:	96 95       	lsr	r25
    2ec0:	93 70       	andi	r25, 0x03	; 3
    2ec2:	84 e0       	ldi	r24, 0x04	; 4
    2ec4:	98 9f       	mul	r25, r24
    2ec6:	b0 01       	movw	r22, r0
    2ec8:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    2eca:	62 2b       	or	r22, r18
    2ecc:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    2ed0:	88 81       	ld	r24, Y
    2ed2:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    2ed4:	92 95       	swap	r25
    2ed6:	96 95       	lsr	r25
    2ed8:	93 70       	andi	r25, 0x03	; 3
    2eda:	39 2f       	mov	r19, r25
    2edc:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    2ede:	98 2f       	mov	r25, r24
    2ee0:	92 95       	swap	r25
    2ee2:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    2ee4:	93 2b       	or	r25, r19
    2ee6:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    2eea:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    2eee:	8f ef       	ldi	r24, 0xFF	; 255
    2ef0:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    2ef4:	c4 ea       	ldi	r28, 0xA4	; 164
    2ef6:	d5 e1       	ldi	r29, 0x15	; 21
    2ef8:	f9 83       	std	Y+1, r31	; 0x01
    2efa:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    2efc:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    2efe:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    2f00:	5d 83       	std	Y+5, r21	; 0x05
    2f02:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    2f04:	bf 83       	std	Y+7, r27	; 0x07
    2f06:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    2f08:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	80 93 c6 15 	sts	0x15C6, r24
	rx_ready = 0;
    2f10:	10 92 e5 15 	sts	0x15E5, r1
	tx_done = 0;
    2f14:	10 92 b5 15 	sts	0x15B5, r1

	use_glossy = 0;
    2f18:	10 92 a1 15 	sts	0x15A1, r1

} // rf_init() 
    2f1c:	df 91       	pop	r29
    2f1e:	cf 91       	pop	r28
    2f20:	1f 91       	pop	r17
    2f22:	0f 91       	pop	r16
    2f24:	08 95       	ret

00002f26 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    2f26:	86 e1       	ldi	r24, 0x16	; 22
    2f28:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <rf_cmd>

00002f2c <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    2f2c:	86 e1       	ldi	r24, 0x16	; 22
    2f2e:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <rf_cmd>

00002f32 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    2f32:	88 e0       	ldi	r24, 0x08	; 8
    2f34:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>
	rx_ready = 0;
    2f38:	10 92 e5 15 	sts	0x15E5, r1
    2f3c:	08 95       	ret

00002f3e <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    2f3e:	3f 92       	push	r3
    2f40:	4f 92       	push	r4
    2f42:	5f 92       	push	r5
    2f44:	6f 92       	push	r6
    2f46:	7f 92       	push	r7
    2f48:	8f 92       	push	r8
    2f4a:	9f 92       	push	r9
    2f4c:	af 92       	push	r10
    2f4e:	bf 92       	push	r11
    2f50:	cf 92       	push	r12
    2f52:	df 92       	push	r13
    2f54:	ef 92       	push	r14
    2f56:	ff 92       	push	r15
    2f58:	0f 93       	push	r16
    2f5a:	1f 93       	push	r17
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    2f62:	80 91 c6 15 	lds	r24, 0x15C6
    2f66:	81 11       	cpse	r24, r1
    2f68:	02 c0       	rjmp	.+4      	; 0x2f6e <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	26 c1       	rjmp	.+588    	; 0x31ba <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    2f6e:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    2f70:	80 91 a6 15 	lds	r24, 0x15A6
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	80 93 a6 15 	sts	0x15A6, r24
	machead->fcf = fcf;
    2f7a:	90 91 81 01 	lds	r25, 0x0181
    2f7e:	90 7e       	andi	r25, 0xE0	; 224
    2f80:	91 60       	ori	r25, 0x01	; 1
    2f82:	20 fb       	bst	r18, 0
    2f84:	95 f9       	bld	r25, 5
    2f86:	9f 73       	andi	r25, 0x3F	; 63
    2f88:	90 64       	ori	r25, 0x40	; 64
    2f8a:	90 93 81 01 	sts	0x0181, r25
    2f8e:	88 e8       	ldi	r24, 0x88	; 136
    2f90:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    2f94:	80 91 a1 15 	lds	r24, 0x15A1
    2f98:	88 23       	and	r24, r24
    2f9a:	d1 f0       	breq	.+52     	; 0x2fd0 <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    2f9c:	8f ef       	ldi	r24, 0xFF	; 255
    2f9e:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    2fa2:	8a ea       	ldi	r24, 0xAA	; 170
    2fa4:	9a ea       	ldi	r25, 0xAA	; 170
    2fa6:	90 93 89 01 	sts	0x0189, r25
    2faa:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    2fae:	8f ef       	ldi	r24, 0xFF	; 255
    2fb0:	9f ef       	ldi	r25, 0xFF	; 255
    2fb2:	90 93 87 01 	sts	0x0187, r25
    2fb6:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    2fba:	20 91 63 01 	lds	r18, 0x0163
    2fbe:	80 91 62 01 	lds	r24, 0x0162
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	92 2b       	or	r25, r18
    2fc6:	90 93 85 01 	sts	0x0185, r25
    2fca:	80 93 84 01 	sts	0x0184, r24
    2fce:	1e c0       	rjmp	.+60     	; 0x300c <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    2fd0:	80 91 a6 15 	lds	r24, 0x15A6
    2fd4:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    2fd8:	80 91 61 01 	lds	r24, 0x0161
    2fdc:	20 91 60 01 	lds	r18, 0x0160
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	38 2b       	or	r19, r24
    2fe4:	30 93 89 01 	sts	0x0189, r19
    2fe8:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    2fec:	88 81       	ld	r24, Y
    2fee:	99 81       	ldd	r25, Y+1	; 0x01
    2ff0:	90 93 87 01 	sts	0x0187, r25
    2ff4:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    2ff8:	80 91 63 01 	lds	r24, 0x0163
    2ffc:	20 91 62 01 	lds	r18, 0x0162
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	38 2b       	or	r19, r24
    3004:	30 93 85 01 	sts	0x0185, r19
    3008:	20 93 84 01 	sts	0x0184, r18
    300c:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    300e:	4a 81       	ldd	r20, Y+2	; 0x02
    3010:	55 27       	eor	r21, r21
    3012:	47 fd       	sbrc	r20, 7
    3014:	50 95       	com	r21
    3016:	6b 81       	ldd	r22, Y+3	; 0x03
    3018:	7c 81       	ldd	r23, Y+4	; 0x04
    301a:	8a e8       	ldi	r24, 0x8A	; 138
    301c:	91 e0       	ldi	r25, 0x01	; 1
    301e:	0e 94 1e 3a 	call	0x743c	; 0x743c <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	85 5f       	subi	r24, 0xF5	; 245
    3026:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    302a:	80 91 41 01 	lds	r24, 0x0141
    302e:	98 2f       	mov	r25, r24
    3030:	9f 71       	andi	r25, 0x1F	; 31
    3032:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    3034:	9f ef       	ldi	r25, 0xFF	; 255
    3036:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    3038:	92 30       	cpi	r25, 0x02	; 2
    303a:	b8 f3       	brcs	.-18     	; 0x302a <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    303c:	91 e1       	ldi	r25, 0x11	; 17
    303e:	39 16       	cp	r3, r25
    3040:	a1 f3       	breq	.-24     	; 0x302a <rf_tx_packet_repeat+0xec>
    3042:	92 e1       	ldi	r25, 0x12	; 18
    3044:	39 16       	cp	r3, r25
    3046:	89 f3       	breq	.-30     	; 0x302a <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    3048:	9f e1       	ldi	r25, 0x1F	; 31
    304a:	39 16       	cp	r3, r25
    304c:	71 f3       	breq	.-36     	; 0x302a <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    304e:	98 ef       	ldi	r25, 0xF8	; 248
    3050:	93 0d       	add	r25, r3
    3052:	92 30       	cpi	r25, 0x02	; 2
    3054:	20 f0       	brcs	.+8      	; 0x305e <rf_tx_packet_repeat+0x120>
    3056:	8f 70       	andi	r24, 0x0F	; 15
    3058:	86 30       	cpi	r24, 0x06	; 6
    305a:	09 f0       	breq	.+2      	; 0x305e <rf_tx_packet_repeat+0x120>
    305c:	86 cf       	rjmp	.-244    	; 0x2f6a <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    305e:	86 e1       	ldi	r24, 0x16	; 22
    3060:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    3064:	8d 81       	ldd	r24, Y+5	; 0x05
    3066:	81 11       	cpse	r24, r1
    3068:	0a c0       	rjmp	.+20     	; 0x307e <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    306a:	89 e0       	ldi	r24, 0x09	; 9
    306c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>
	if(pRTI->ackRequest)
    3070:	8e 81       	ldd	r24, Y+6	; 0x06
    3072:	88 23       	and	r24, r24
    3074:	91 f0       	breq	.+36     	; 0x309a <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    3076:	89 e1       	ldi	r24, 0x19	; 25
    3078:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>
    307c:	0e c0       	rjmp	.+28     	; 0x309a <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    307e:	80 91 48 01 	lds	r24, 0x0148
    3082:	80 68       	ori	r24, 0x80	; 128
    3084:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    3088:	80 91 41 01 	lds	r24, 0x0141
    308c:	87 ff       	sbrs	r24, 7
    308e:	fc cf       	rjmp	.-8      	; 0x3088 <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    3090:	80 91 41 01 	lds	r24, 0x0141
    3094:	86 ff       	sbrs	r24, 6
    3096:	69 cf       	rjmp	.-302    	; 0x2f6a <rf_tx_packet_repeat+0x2c>
    3098:	e8 cf       	rjmp	.-48     	; 0x306a <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    309a:	61 14       	cp	r6, r1
    309c:	71 04       	cpc	r7, r1
    309e:	a9 f1       	breq	.+106    	; 0x310a <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    30a0:	8d ea       	ldi	r24, 0xAD	; 173
    30a2:	95 e1       	ldi	r25, 0x15	; 21
    30a4:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <nrk_time_get>
		target_t.secs = curr_t.secs;
    30a8:	80 91 ad 15 	lds	r24, 0x15AD
    30ac:	90 91 ae 15 	lds	r25, 0x15AE
    30b0:	a0 91 af 15 	lds	r26, 0x15AF
    30b4:	b0 91 b0 15 	lds	r27, 0x15B0
    30b8:	80 93 c7 15 	sts	0x15C7, r24
    30bc:	90 93 c8 15 	sts	0x15C8, r25
    30c0:	a0 93 c9 15 	sts	0x15C9, r26
    30c4:	b0 93 ca 15 	sts	0x15CA, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    30c8:	d3 01       	movw	r26, r6
    30ca:	20 e4       	ldi	r18, 0x40	; 64
    30cc:	32 e4       	ldi	r19, 0x42	; 66
    30ce:	4f e0       	ldi	r20, 0x0F	; 15
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    30d6:	00 91 b1 15 	lds	r16, 0x15B1
    30da:	10 91 b2 15 	lds	r17, 0x15B2
    30de:	20 91 b3 15 	lds	r18, 0x15B3
    30e2:	30 91 b4 15 	lds	r19, 0x15B4
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	80 0f       	add	r24, r16
    30ec:	91 1f       	adc	r25, r17
    30ee:	a2 1f       	adc	r26, r18
    30f0:	b3 1f       	adc	r27, r19
    30f2:	80 93 cb 15 	sts	0x15CB, r24
    30f6:	90 93 cc 15 	sts	0x15CC, r25
    30fa:	a0 93 cd 15 	sts	0x15CD, r26
    30fe:	b0 93 ce 15 	sts	0x15CE, r27
		nrk_time_compact_nanos(&target_t);
    3102:	87 ec       	ldi	r24, 0xC7	; 199
    3104:	95 e1       	ldi	r25, 0x15	; 21
    3106:	0e 94 ba 2c 	call	0x5974	; 0x5974 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    310a:	10 92 b5 15 	sts	0x15B5, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    310e:	82 e0       	ldi	r24, 0x02	; 2
    3110:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    3114:	41 2c       	mov	r4, r1
    3116:	51 2c       	mov	r5, r1
    3118:	80 91 b5 15 	lds	r24, 0x15B5
    311c:	81 11       	cpse	r24, r1
    311e:	08 c0       	rjmp	.+16     	; 0x3130 <rf_tx_packet_repeat+0x1f2>
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	48 1a       	sub	r4, r24
    3124:	58 0a       	sbc	r5, r24
    3126:	98 ee       	ldi	r25, 0xE8	; 232
    3128:	49 16       	cp	r4, r25
    312a:	9d ef       	ldi	r25, 0xFD	; 253
    312c:	59 06       	cpc	r5, r25
    312e:	a1 f7       	brne	.-24     	; 0x3118 <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    3130:	61 14       	cp	r6, r1
    3132:	71 04       	cpc	r7, r1
    3134:	21 f4       	brne	.+8      	; 0x313e <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    3136:	8e 81       	ldd	r24, Y+6	; 0x06
    3138:	81 11       	cpse	r24, r1
    313a:	2d c0       	rjmp	.+90     	; 0x3196 <rf_tx_packet_repeat+0x258>
    313c:	32 c0       	rjmp	.+100    	; 0x31a2 <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    313e:	8d ea       	ldi	r24, 0xAD	; 173
    3140:	95 e1       	ldi	r25, 0x15	; 21
    3142:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    3146:	80 90 ad 15 	lds	r8, 0x15AD
    314a:	90 90 ae 15 	lds	r9, 0x15AE
    314e:	a0 90 af 15 	lds	r10, 0x15AF
    3152:	b0 90 b0 15 	lds	r11, 0x15B0
    3156:	c0 90 b1 15 	lds	r12, 0x15B1
    315a:	d0 90 b2 15 	lds	r13, 0x15B2
    315e:	e0 90 b3 15 	lds	r14, 0x15B3
    3162:	f0 90 b4 15 	lds	r15, 0x15B4
    3166:	00 91 c7 15 	lds	r16, 0x15C7
    316a:	10 91 c8 15 	lds	r17, 0x15C8
    316e:	20 91 c9 15 	lds	r18, 0x15C9
    3172:	30 91 ca 15 	lds	r19, 0x15CA
    3176:	40 91 cb 15 	lds	r20, 0x15CB
    317a:	50 91 cc 15 	lds	r21, 0x15CC
    317e:	60 91 cd 15 	lds	r22, 0x15CD
    3182:	70 91 ce 15 	lds	r23, 0x15CE
    3186:	86 ee       	ldi	r24, 0xE6	; 230
    3188:	95 e1       	ldi	r25, 0x15	; 21
    318a:	0e 94 2e 2c 	call	0x585c	; 0x585c <nrk_time_sub>
    318e:	8f 3f       	cpi	r24, 0xFF	; 255
    3190:	09 f0       	breq	.+2      	; 0x3194 <rf_tx_packet_repeat+0x256>
    3192:	bb cf       	rjmp	.-138    	; 0x310a <rf_tx_packet_repeat+0x1cc>
    3194:	d0 cf       	rjmp	.-96     	; 0x3136 <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    3196:	80 91 42 01 	lds	r24, 0x0142
    319a:	82 95       	swap	r24
    319c:	86 95       	lsr	r24
    319e:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    31a0:	39 f4       	brne	.+14     	; 0x31b0 <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    31a2:	88 ee       	ldi	r24, 0xE8	; 232
    31a4:	48 16       	cp	r4, r24
    31a6:	8d ef       	ldi	r24, 0xFD	; 253
    31a8:	58 06       	cpc	r5, r24
    31aa:	11 f0       	breq	.+4      	; 0x31b0 <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    31ac:	c1 e0       	ldi	r28, 0x01	; 1
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <rf_tx_packet_repeat+0x274>
    31b0:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    31b2:	83 2d       	mov	r24, r3
    31b4:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    31b8:	8c 2f       	mov	r24, r28
}
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	ff 90       	pop	r15
    31c4:	ef 90       	pop	r14
    31c6:	df 90       	pop	r13
    31c8:	cf 90       	pop	r12
    31ca:	bf 90       	pop	r11
    31cc:	af 90       	pop	r10
    31ce:	9f 90       	pop	r9
    31d0:	8f 90       	pop	r8
    31d2:	7f 90       	pop	r7
    31d4:	6f 90       	pop	r6
    31d6:	5f 90       	pop	r5
    31d8:	4f 90       	pop	r4
    31da:	3f 90       	pop	r3
    31dc:	08 95       	ret

000031de <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <rf_tx_packet_repeat>

000031e6 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    31ea:	80 91 c6 15 	lds	r24, 0x15C6
    31ee:	88 23       	and	r24, r24
    31f0:	41 f1       	breq	.+80     	; 0x3242 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    31f2:	80 91 41 01 	lds	r24, 0x0141
    31f6:	c8 2f       	mov	r28, r24
    31f8:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    31fa:	9f ef       	ldi	r25, 0xFF	; 255
    31fc:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    31fe:	92 30       	cpi	r25, 0x02	; 2
    3200:	c0 f3       	brcs	.-16     	; 0x31f2 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    3202:	c1 31       	cpi	r28, 0x11	; 17
    3204:	b1 f3       	breq	.-20     	; 0x31f2 <rf_cca_check+0xc>
    3206:	c2 31       	cpi	r28, 0x12	; 18
    3208:	a1 f3       	breq	.-24     	; 0x31f2 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    320a:	cf 31       	cpi	r28, 0x1F	; 31
    320c:	91 f3       	breq	.-28     	; 0x31f2 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    320e:	c8 30       	cpi	r28, 0x08	; 8
    3210:	19 f0       	breq	.+6      	; 0x3218 <rf_cca_check+0x32>
    3212:	8f 70       	andi	r24, 0x0F	; 15
    3214:	86 30       	cpi	r24, 0x06	; 6
    3216:	a9 f4       	brne	.+42     	; 0x3242 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    3218:	86 e1       	ldi	r24, 0x16	; 22
    321a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    321e:	80 91 48 01 	lds	r24, 0x0148
    3222:	80 68       	ori	r24, 0x80	; 128
    3224:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    3228:	80 91 41 01 	lds	r24, 0x0141
    322c:	87 ff       	sbrs	r24, 7
    322e:	fc cf       	rjmp	.-8      	; 0x3228 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    3230:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    3234:	8c 2f       	mov	r24, r28
    3236:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    323a:	d6 fb       	bst	r29, 6
    323c:	88 27       	eor	r24, r24
    323e:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    3240:	01 c0       	rjmp	.+2      	; 0x3244 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    3242:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	08 95       	ret

0000324a <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    324a:	80 91 c6 15 	lds	r24, 0x15C6
    324e:	88 23       	and	r24, r24
    3250:	09 f4       	brne	.+2      	; 0x3254 <rf_rx_packet_nonblock+0xa>
    3252:	a0 c0       	rjmp	.+320    	; 0x3394 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    3254:	80 91 e5 15 	lds	r24, 0x15E5
    3258:	88 23       	and	r24, r24
    325a:	09 f4       	brne	.+2      	; 0x325e <rf_rx_packet_nonblock+0x14>
    325c:	99 c0       	rjmp	.+306    	; 0x3390 <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    325e:	80 91 7b 01 	lds	r24, 0x017B
    3262:	e0 91 a4 15 	lds	r30, 0x15A4
    3266:	f0 91 a5 15 	lds	r31, 0x15A5
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	02 97       	sbiw	r24, 0x02	; 2
    326e:	24 81       	ldd	r18, Z+4	; 0x04
    3270:	33 27       	eor	r19, r19
    3272:	27 fd       	sbrc	r18, 7
    3274:	30 95       	com	r19
    3276:	28 17       	cp	r18, r24
    3278:	39 07       	cpc	r19, r25
    327a:	0c f4       	brge	.+2      	; 0x327e <rf_rx_packet_nonblock+0x34>
    327c:	8b c0       	rjmp	.+278    	; 0x3394 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    327e:	e0 91 a4 15 	lds	r30, 0x15A4
    3282:	f0 91 a5 15 	lds	r31, 0x15A5
    3286:	80 91 82 01 	lds	r24, 0x0182
    328a:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    328c:	e0 91 a4 15 	lds	r30, 0x15A4
    3290:	f0 91 a5 15 	lds	r31, 0x15A5
    3294:	80 91 87 01 	lds	r24, 0x0187
    3298:	90 91 88 01 	lds	r25, 0x0188
    329c:	92 83       	std	Z+2, r25	; 0x02
    329e:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    32a0:	e0 91 a4 15 	lds	r30, 0x15A4
    32a4:	f0 91 a5 15 	lds	r31, 0x15A5
    32a8:	80 91 7b 01 	lds	r24, 0x017B
    32ac:	8b 50       	subi	r24, 0x0B	; 11
    32ae:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    32b0:	a0 91 a4 15 	lds	r26, 0x15A4
    32b4:	b0 91 a5 15 	lds	r27, 0x15A5
    32b8:	e0 91 a4 15 	lds	r30, 0x15A4
    32bc:	f0 91 a5 15 	lds	r31, 0x15A5
    32c0:	13 96       	adiw	r26, 0x03	; 3
    32c2:	9c 91       	ld	r25, X
    32c4:	84 81       	ldd	r24, Z+4	; 0x04
    32c6:	89 17       	cp	r24, r25
    32c8:	3c f0       	brlt	.+14     	; 0x32d8 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    32ca:	e0 91 a4 15 	lds	r30, 0x15A4
    32ce:	f0 91 a5 15 	lds	r31, 0x15A5
    32d2:	83 81       	ldd	r24, Z+3	; 0x03
    32d4:	87 ff       	sbrs	r24, 7
    32d6:	0d c0       	rjmp	.+26     	; 0x32f2 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    32d8:	10 92 e5 15 	sts	0x15E5, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    32dc:	80 91 4c 01 	lds	r24, 0x014C
    32e0:	8f 77       	andi	r24, 0x7F	; 127
    32e2:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    32e6:	80 91 4c 01 	lds	r24, 0x014C
    32ea:	80 68       	ori	r24, 0x80	; 128
    32ec:	80 93 4c 01 	sts	0x014C, r24
    32f0:	51 c0       	rjmp	.+162    	; 0x3394 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    32f2:	a0 91 a4 15 	lds	r26, 0x15A4
    32f6:	b0 91 a5 15 	lds	r27, 0x15A5
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    32fa:	e0 91 a4 15 	lds	r30, 0x15A4
    32fe:	f0 91 a5 15 	lds	r31, 0x15A5
    3302:	13 96       	adiw	r26, 0x03	; 3
    3304:	4c 91       	ld	r20, X
    3306:	55 27       	eor	r21, r21
    3308:	47 fd       	sbrc	r20, 7
    330a:	50 95       	com	r21
    330c:	69 e8       	ldi	r22, 0x89	; 137
    330e:	71 e0       	ldi	r23, 0x01	; 1
    3310:	85 81       	ldd	r24, Z+5	; 0x05
    3312:	96 81       	ldd	r25, Z+6	; 0x06
    3314:	0e 94 1e 3a 	call	0x743c	; 0x743c <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    3318:	e0 91 a4 15 	lds	r30, 0x15A4
    331c:	f0 91 a5 15 	lds	r31, 0x15A5
    3320:	80 91 80 01 	lds	r24, 0x0180
    3324:	85 fb       	bst	r24, 5
    3326:	88 27       	eor	r24, r24
    3328:	80 f9       	bld	r24, 0
    332a:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    332c:	e0 91 a4 15 	lds	r30, 0x15A4
    3330:	f0 91 a5 15 	lds	r31, 0x15A5
    3334:	80 91 47 01 	lds	r24, 0x0147
    3338:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    333a:	e0 91 a4 15 	lds	r30, 0x15A4
    333e:	f0 91 a5 15 	lds	r31, 0x15A5
    3342:	80 91 46 01 	lds	r24, 0x0146
    3346:	86 95       	lsr	r24
    3348:	86 95       	lsr	r24
    334a:	86 95       	lsr	r24
    334c:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    334e:	e0 91 a4 15 	lds	r30, 0x15A4
    3352:	f0 91 a5 15 	lds	r31, 0x15A5
    3356:	80 91 47 01 	lds	r24, 0x0147
    335a:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    335c:	a0 91 a4 15 	lds	r26, 0x15A4
    3360:	b0 91 a5 15 	lds	r27, 0x15A5
    3364:	e0 91 7b 01 	lds	r30, 0x017B
    3368:	f0 e0       	ldi	r31, 0x00	; 0
    336a:	e0 58       	subi	r30, 0x80	; 128
    336c:	fe 4f       	sbci	r31, 0xFE	; 254
    336e:	80 81       	ld	r24, Z
    3370:	1b 96       	adiw	r26, 0x0b	; 11
    3372:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    3374:	10 92 e5 15 	sts	0x15E5, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    3378:	80 91 4c 01 	lds	r24, 0x014C
    337c:	8f 77       	andi	r24, 0x7F	; 127
    337e:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    3382:	80 91 4c 01 	lds	r24, 0x014C
    3386:	80 68       	ori	r24, 0x80	; 128
    3388:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    3394:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    3396:	08 95       	ret

00003398 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    3398:	1f 92       	push	r1
    339a:	0f 92       	push	r0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    33a4:	80 e8       	ldi	r24, 0x80	; 128
    33a6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    33aa:	8f 91       	pop	r24
    33ac:	0f 90       	pop	r0
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	0f 90       	pop	r0
    33b2:	1f 90       	pop	r1
    33b4:	18 95       	reti

000033b6 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    33b6:	1f 92       	push	r1
    33b8:	0f 92       	push	r0
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	0f 92       	push	r0
    33be:	11 24       	eor	r1, r1
    33c0:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	80 93 b5 15 	sts	0x15B5, r24
	IRQ_STATUS = (1 << TX_END);
    33c8:	80 e4       	ldi	r24, 0x40	; 64
    33ca:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    33ce:	8f 91       	pop	r24
    33d0:	0f 90       	pop	r0
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	0f 90       	pop	r0
    33d6:	1f 90       	pop	r1
    33d8:	18 95       	reti

000033da <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    33da:	1f 92       	push	r1
    33dc:	0f 92       	push	r0
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	0f 92       	push	r0
    33e2:	11 24       	eor	r1, r1
    33e4:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    33e6:	80 e2       	ldi	r24, 0x20	; 32
    33e8:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    33ec:	8f 91       	pop	r24
    33ee:	0f 90       	pop	r0
    33f0:	0f be       	out	0x3f, r0	; 63
    33f2:	0f 90       	pop	r0
    33f4:	1f 90       	pop	r1
    33f6:	18 95       	reti

000033f8 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    33f8:	1f 92       	push	r1
    33fa:	0f 92       	push	r0
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	0f 92       	push	r0
    3400:	11 24       	eor	r1, r1
    3402:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    3404:	80 e1       	ldi	r24, 0x10	; 16
    3406:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    340a:	8f 91       	pop	r24
    340c:	0f 90       	pop	r0
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	0f 90       	pop	r0
    3412:	1f 90       	pop	r1
    3414:	18 95       	reti

00003416 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    3416:	1f 92       	push	r1
    3418:	0f 92       	push	r0
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	0f 92       	push	r0
    341e:	11 24       	eor	r1, r1
    3420:	0b b6       	in	r0, 0x3b	; 59
    3422:	0f 92       	push	r0
    3424:	2f 93       	push	r18
    3426:	3f 93       	push	r19
    3428:	4f 93       	push	r20
    342a:	5f 93       	push	r21
    342c:	6f 93       	push	r22
    342e:	7f 93       	push	r23
    3430:	8f 93       	push	r24
    3432:	9f 93       	push	r25
    3434:	af 93       	push	r26
    3436:	bf 93       	push	r27
    3438:	ef 93       	push	r30
    343a:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    343c:	84 e0       	ldi	r24, 0x04	; 4
    343e:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    3442:	e0 91 32 05 	lds	r30, 0x0532
    3446:	f0 91 33 05 	lds	r31, 0x0533
    344a:	30 97       	sbiw	r30, 0x00	; 0
    344c:	09 f0       	breq	.+2      	; 0x3450 <__vector_59+0x3a>
		rx_start_func();
    344e:	09 95       	icall

	return;
}
    3450:	ff 91       	pop	r31
    3452:	ef 91       	pop	r30
    3454:	bf 91       	pop	r27
    3456:	af 91       	pop	r26
    3458:	9f 91       	pop	r25
    345a:	8f 91       	pop	r24
    345c:	7f 91       	pop	r23
    345e:	6f 91       	pop	r22
    3460:	5f 91       	pop	r21
    3462:	4f 91       	pop	r20
    3464:	3f 91       	pop	r19
    3466:	2f 91       	pop	r18
    3468:	0f 90       	pop	r0
    346a:	0b be       	out	0x3b, r0	; 59
    346c:	0f 90       	pop	r0
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	0f 90       	pop	r0
    3472:	1f 90       	pop	r1
    3474:	18 95       	reti

00003476 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    3476:	1f 92       	push	r1
    3478:	0f 92       	push	r0
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	0f 92       	push	r0
    347e:	11 24       	eor	r1, r1
    3480:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    3488:	8f 91       	pop	r24
    348a:	0f 90       	pop	r0
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	0f 90       	pop	r0
    3490:	1f 90       	pop	r1
    3492:	18 95       	reti

00003494 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    3494:	1f 92       	push	r1
    3496:	0f 92       	push	r0
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	0f 92       	push	r0
    349c:	11 24       	eor	r1, r1
    349e:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    34a6:	8f 91       	pop	r24
    34a8:	0f 90       	pop	r0
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	0f 90       	pop	r0
    34ae:	1f 90       	pop	r1
    34b0:	18 95       	reti

000034b2 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    34b2:	e9 e4       	ldi	r30, 0x49	; 73
    34b4:	f1 e0       	ldi	r31, 0x01	; 1
    34b6:	90 81       	ld	r25, Z
    34b8:	90 7f       	andi	r25, 0xF0	; 240
    34ba:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    34bc:	90 81       	ld	r25, Z
    34be:	8f 70       	andi	r24, 0x0F	; 15
    34c0:	98 2b       	or	r25, r24
    34c2:	90 83       	st	Z, r25
    34c4:	08 95       	ret

000034c6 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    34c6:	8f ef       	ldi	r24, 0xFF	; 255
    34c8:	08 95       	ret

000034ca <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    34ca:	08 95       	ret

000034cc <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    34cc:	08 95       	ret

000034ce <rf_security_disable>:
}



void rf_security_disable()
{
    34ce:	08 95       	ret

000034d0 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    34d0:	8f ef       	ldi	r24, 0xFF	; 255
    34d2:	08 95       	ret

000034d4 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    34d4:	80 91 9f 15 	lds	r24, 0x159F
    34d8:	90 91 a0 15 	lds	r25, 0x15A0
    34dc:	08 95       	ret

000034de <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	08 95       	ret

000034e2 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    34e2:	08 95       	ret

000034e4 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	08 95       	ret

000034e8 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	08 95       	ret

000034ec <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	08 95       	ret

000034f0 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    34f0:	08 95       	ret

000034f2 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    34f2:	08 95       	ret

000034f4 <rf_test_mode>:
}



void rf_test_mode()
{
    34f4:	08 95       	ret

000034f6 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    34f6:	08 95       	ret

000034f8 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    34f8:	08 95       	ret

000034fa <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    34fa:	08 95       	ret

000034fc <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    34fc:	08 95       	ret

000034fe <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    34fe:	08 95       	ret

00003500 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    3500:	e7 e3       	ldi	r30, 0x37	; 55
    3502:	f1 e0       	ldi	r31, 0x01	; 1
    3504:	80 81       	ld	r24, Z
    3506:	83 60       	ori	r24, 0x03	; 3
    3508:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    350a:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    350c:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    350e:	8d b1       	in	r24, 0x0d	; 13
    3510:	80 6e       	ori	r24, 0xE0	; 224
    3512:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    3514:	8e b1       	in	r24, 0x0e	; 14
    3516:	80 6e       	ori	r24, 0xE0	; 224
    3518:	8e b9       	out	0x0e, r24	; 14
    351a:	08 95       	ret

0000351c <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    351c:	e7 e3       	ldi	r30, 0x37	; 55
    351e:	f1 e0       	ldi	r31, 0x01	; 1
    3520:	80 81       	ld	r24, Z
    3522:	83 60       	ori	r24, 0x03	; 3
    3524:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    3526:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    3528:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    352a:	8d b1       	in	r24, 0x0d	; 13
    352c:	80 6e       	ori	r24, 0xE0	; 224
    352e:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    3530:	8e b1       	in	r24, 0x0e	; 14
    3532:	80 6e       	ori	r24, 0xE0	; 224
    3534:	8e b9       	out	0x0e, r24	; 14
    3536:	08 95       	ret

00003538 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    3538:	cf 92       	push	r12
    353a:	df 92       	push	r13
    353c:	ef 92       	push	r14
    353e:	ff 92       	push	r15
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	cf 93       	push	r28
    3546:	df 93       	push	r29
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	27 97       	sbiw	r28, 0x07	; 7
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    3558:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    355c:	e0 91 a4 15 	lds	r30, 0x15A4
    3560:	f0 91 a5 15 	lds	r31, 0x15A5
    3564:	c0 80       	ld	r12, Z
    3566:	d3 80       	ldd	r13, Z+3	; 0x03
    3568:	e5 80       	ldd	r14, Z+5	; 0x05
    356a:	f6 80       	ldd	r15, Z+6	; 0x06
    356c:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    356e:	0e 94 25 19 	call	0x324a	; 0x324a <rf_rx_packet_nonblock>
	if (err < 1) {
    3572:	18 16       	cp	r1, r24
    3574:	1c f0       	brlt	.+6      	; 0x357c <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    3576:	88 ea       	ldi	r24, 0xA8	; 168
    3578:	93 e0       	ldi	r25, 0x03	; 3
    357a:	06 c0       	rjmp	.+12     	; 0x3588 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    357c:	f7 01       	movw	r30, r14
    357e:	10 81       	ld	r17, Z
	if (ttl == 0) {
    3580:	11 11       	cpse	r17, r1
    3582:	07 c0       	rjmp	.+14     	; 0x3592 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    3584:	87 ec       	ldi	r24, 0xC7	; 199
    3586:	93 e0       	ldi	r25, 0x03	; 3
    3588:	0e 94 cc 3a 	call	0x7598	; 0x7598 <puts>
#endif
		nrk_int_enable();
    358c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
		return;
    3590:	31 c0       	rjmp	.+98     	; 0x35f4 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    3592:	15 30       	cpi	r17, 0x05	; 5
    3594:	21 f4       	brne	.+8      	; 0x359e <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    3596:	8a e0       	ldi	r24, 0x0A	; 10
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	0e 94 c6 3a 	call	0x758c	; 0x758c <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    359e:	c7 01       	movw	r24, r14
    35a0:	01 96       	adiw	r24, 0x01	; 1
    35a2:	9f 93       	push	r25
    35a4:	8f 93       	push	r24
    35a6:	80 2f       	mov	r24, r16
    35a8:	99 27       	eor	r25, r25
    35aa:	87 fd       	sbrc	r24, 7
    35ac:	90 95       	com	r25
    35ae:	9f 93       	push	r25
    35b0:	0f 93       	push	r16
    35b2:	1f 92       	push	r1
    35b4:	1f 93       	push	r17
    35b6:	1f 92       	push	r1
    35b8:	cf 92       	push	r12
    35ba:	89 ee       	ldi	r24, 0xE9	; 233
    35bc:	93 e0       	ldi	r25, 0x03	; 3
    35be:	9f 93       	push	r25
    35c0:	8f 93       	push	r24
    35c2:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    35c6:	fd 82       	std	Y+5, r15	; 0x05
    35c8:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    35ca:	11 50       	subi	r17, 0x01	; 1
    35cc:	f7 01       	movw	r30, r14
    35ce:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    35d0:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    35d2:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    35d4:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    35d6:	8f ef       	ldi	r24, 0xFF	; 255
    35d8:	9f ef       	ldi	r25, 0xFF	; 255
    35da:	9a 83       	std	Y+2, r25	; 0x02
    35dc:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    35de:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    35e2:	ce 01       	movw	r24, r28
    35e4:	01 96       	adiw	r24, 0x01	; 1
    35e6:	0e 94 ef 18 	call	0x31de	; 0x31de <rf_tx_packet>
#endif
	return;
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
}
    35f4:	27 96       	adiw	r28, 0x07	; 7
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	0f be       	out	0x3f, r0	; 63
    35fe:	cd bf       	out	0x3d, r28	; 61
    3600:	df 91       	pop	r29
    3602:	cf 91       	pop	r28
    3604:	1f 91       	pop	r17
    3606:	0f 91       	pop	r16
    3608:	ff 90       	pop	r15
    360a:	ef 90       	pop	r14
    360c:	df 90       	pop	r13
    360e:	cf 90       	pop	r12
    3610:	08 95       	ret

00003612 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    3612:	1f 92       	push	r1
    3614:	0f 92       	push	r0
    3616:	0f b6       	in	r0, 0x3f	; 63
    3618:	0f 92       	push	r0
    361a:	11 24       	eor	r1, r1
    361c:	0b b6       	in	r0, 0x3b	; 59
    361e:	0f 92       	push	r0
    3620:	2f 93       	push	r18
    3622:	3f 93       	push	r19
    3624:	4f 93       	push	r20
    3626:	5f 93       	push	r21
    3628:	6f 93       	push	r22
    362a:	7f 93       	push	r23
    362c:	8f 93       	push	r24
    362e:	9f 93       	push	r25
    3630:	af 93       	push	r26
    3632:	bf 93       	push	r27
    3634:	ef 93       	push	r30
    3636:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 91 7b 01 	lds	r25, 0x017B
    363e:	89 17       	cp	r24, r25
    3640:	10 f4       	brcc	.+4      	; 0x3646 <__vector_60+0x34>
    3642:	8f 5f       	subi	r24, 0xFF	; 255
    3644:	fa cf       	rjmp	.-12     	; 0x363a <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    3646:	80 91 46 01 	lds	r24, 0x0146
    364a:	87 ff       	sbrs	r24, 7
    364c:	04 c0       	rjmp	.+8      	; 0x3656 <__vector_60+0x44>
		rx_ready = 1;
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	80 93 e5 15 	sts	0x15E5, r24
    3654:	04 c0       	rjmp	.+8      	; 0x365e <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    3656:	82 e1       	ldi	r24, 0x12	; 18
    3658:	94 e0       	ldi	r25, 0x04	; 4
    365a:	0e 94 cc 3a 	call	0x7598	; 0x7598 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    365e:	88 e0       	ldi	r24, 0x08	; 8
    3660:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    3664:	80 91 46 01 	lds	r24, 0x0146
    3668:	87 ff       	sbrs	r24, 7
    366a:	05 c0       	rjmp	.+10     	; 0x3676 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    366c:	80 91 a1 15 	lds	r24, 0x15A1
    3670:	81 11       	cpse	r24, r1
    3672:	0e 94 9c 1a 	call	0x3538	; 0x3538 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    3676:	e0 91 30 05 	lds	r30, 0x0530
    367a:	f0 91 31 05 	lds	r31, 0x0531
    367e:	30 97       	sbiw	r30, 0x00	; 0
    3680:	09 f0       	breq	.+2      	; 0x3684 <__vector_60+0x72>
		rx_end_func();
    3682:	09 95       	icall

	return;
}
    3684:	ff 91       	pop	r31
    3686:	ef 91       	pop	r30
    3688:	bf 91       	pop	r27
    368a:	af 91       	pop	r26
    368c:	9f 91       	pop	r25
    368e:	8f 91       	pop	r24
    3690:	7f 91       	pop	r23
    3692:	6f 91       	pop	r22
    3694:	5f 91       	pop	r21
    3696:	4f 91       	pop	r20
    3698:	3f 91       	pop	r19
    369a:	2f 91       	pop	r18
    369c:	0f 90       	pop	r0
    369e:	0b be       	out	0x3b, r0	; 59
    36a0:	0f 90       	pop	r0
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	0f 90       	pop	r0
    36a6:	1f 90       	pop	r1
    36a8:	18 95       	reti

000036aa <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    36aa:	a6 eb       	ldi	r26, 0xB6	; 182
    36ac:	b5 e1       	ldi	r27, 0x15	; 21
    36ae:	fc 01       	movw	r30, r24
    36b0:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    36b2:	20 81       	ld	r18, Z
    36b4:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    36b6:	21 91       	ld	r18, Z+
    36b8:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    36bc:	e8 17       	cp	r30, r24
    36be:	f9 07       	cpc	r31, r25
    36c0:	c1 f7       	brne	.-16     	; 0x36b2 <aes_setkey+0x8>
    36c2:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    36c4:	10 92 3e 01 	sts	0x013E, r1
    36c8:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    36ca:	e1 f7       	brne	.-8      	; 0x36c4 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    36cc:	80 e8       	ldi	r24, 0x80	; 128
    36ce:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    36d2:	80 91 3d 01 	lds	r24, 0x013D
    36d6:	80 ff       	sbrs	r24, 0
    36d8:	fc cf       	rjmp	.-8      	; 0x36d2 <aes_setkey+0x28>
    36da:	ef ec       	ldi	r30, 0xCF	; 207
    36dc:	f5 e1       	ldi	r31, 0x15	; 21
    36de:	80 e1       	ldi	r24, 0x10	; 16
    36e0:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    36e2:	90 91 3f 01 	lds	r25, 0x013F
    36e6:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    36e8:	8e 13       	cpse	r24, r30
    36ea:	fb cf       	rjmp	.-10     	; 0x36e2 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    36ec:	08 95       	ret

000036ee <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    36f4:	66 23       	and	r22, r22
    36f6:	09 f4       	brne	.+2      	; 0x36fa <aes_encrypt+0xc>
    36f8:	45 c0       	rjmp	.+138    	; 0x3784 <aes_encrypt+0x96>
    36fa:	86 2f       	mov	r24, r22
    36fc:	8f 70       	andi	r24, 0x0F	; 15
    36fe:	09 f0       	breq	.+2      	; 0x3702 <aes_encrypt+0x14>
    3700:	41 c0       	rjmp	.+130    	; 0x3784 <aes_encrypt+0x96>
    3702:	e6 eb       	ldi	r30, 0xB6	; 182
    3704:	f5 e1       	ldi	r31, 0x15	; 21
    3706:	90 e1       	ldi	r25, 0x10	; 16
    3708:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    370a:	21 91       	ld	r18, Z+
    370c:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    3710:	9e 13       	cpse	r25, r30
    3712:	fb cf       	rjmp	.-10     	; 0x370a <aes_encrypt+0x1c>
    3714:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    3716:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    3718:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    371a:	40 e1       	ldi	r20, 0x10	; 16
    371c:	94 9f       	mul	r25, r20
    371e:	90 01       	movw	r18, r0
    3720:	11 24       	eor	r1, r1
    3722:	26 17       	cp	r18, r22
    3724:	37 07       	cpc	r19, r23
    3726:	7c f5       	brge	.+94     	; 0x3786 <aes_encrypt+0x98>
      if(i==0)
    3728:	91 11       	cpse	r25, r1
    372a:	03 c0       	rjmp	.+6      	; 0x3732 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    372c:	10 92 3c 01 	sts	0x013C, r1
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    3732:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    3736:	40 e0       	ldi	r20, 0x00	; 0
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	2a 0f       	add	r18, r26
    373c:	3b 1f       	adc	r19, r27
    373e:	e9 01       	movw	r28, r18
    3740:	c4 0f       	add	r28, r20
    3742:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    3744:	f8 81       	ld	r31, Y
    3746:	f0 93 3e 01 	sts	0x013E, r31
    374a:	4f 5f       	subi	r20, 0xFF	; 255
    374c:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    374e:	40 31       	cpi	r20, 0x10	; 16
    3750:	51 05       	cpc	r21, r1
    3752:	a9 f7       	brne	.-22     	; 0x373e <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    3754:	40 91 3c 01 	lds	r20, 0x013C
    3758:	40 68       	ori	r20, 0x80	; 128
    375a:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    375e:	40 91 3d 01 	lds	r20, 0x013D
    3762:	40 ff       	sbrs	r20, 0
    3764:	fc cf       	rjmp	.-8      	; 0x375e <aes_encrypt+0x70>
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    376a:	f0 91 3e 01 	lds	r31, 0x013E
    376e:	e9 01       	movw	r28, r18
    3770:	c4 0f       	add	r28, r20
    3772:	d5 1f       	adc	r29, r21
    3774:	f8 83       	st	Y, r31
    3776:	4f 5f       	subi	r20, 0xFF	; 255
    3778:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    377a:	40 31       	cpi	r20, 0x10	; 16
    377c:	51 05       	cpc	r21, r1
    377e:	a9 f7       	brne	.-22     	; 0x376a <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    3780:	9f 5f       	subi	r25, 0xFF	; 255
    3782:	cb cf       	rjmp	.-106    	; 0x371a <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    3784:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    378c:	0f 93       	push	r16
    378e:	1f 93       	push	r17
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    3796:	61 30       	cpi	r22, 0x01	; 1
    3798:	09 f4       	brne	.+2      	; 0x379c <aes_decrypt+0x10>
    379a:	58 c0       	rjmp	.+176    	; 0x384c <aes_decrypt+0xc0>
    379c:	86 2f       	mov	r24, r22
    379e:	8f 70       	andi	r24, 0x0F	; 15
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <aes_decrypt+0x18>
    37a2:	54 c0       	rjmp	.+168    	; 0x384c <aes_decrypt+0xc0>
    37a4:	ef ec       	ldi	r30, 0xCF	; 207
    37a6:	f5 e1       	ldi	r31, 0x15	; 21
    37a8:	90 e1       	ldi	r25, 0x10	; 16
    37aa:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    37ac:	21 91       	ld	r18, Z+
    37ae:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    37b2:	9e 13       	cpse	r25, r30
    37b4:	fb cf       	rjmp	.-10     	; 0x37ac <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    37b6:	62 95       	swap	r22
    37b8:	6f 70       	andi	r22, 0x0F	; 15
    37ba:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    37bc:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    37be:	6f 3f       	cpi	r22, 0xFF	; 255
    37c0:	09 f4       	brne	.+2      	; 0x37c4 <aes_decrypt+0x38>
    37c2:	45 c0       	rjmp	.+138    	; 0x384e <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    37c4:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    37c8:	46 2f       	mov	r20, r22
    37ca:	55 27       	eor	r21, r21
    37cc:	47 fd       	sbrc	r20, 7
    37ce:	50 95       	com	r21
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	ed 01       	movw	r28, r26
    37d6:	90 e1       	ldi	r25, 0x10	; 16
    37d8:	69 02       	muls	r22, r25
    37da:	c0 0d       	add	r28, r0
    37dc:	d1 1d       	adc	r29, r1
    37de:	11 24       	eor	r1, r1
    37e0:	fe 01       	movw	r30, r28
    37e2:	e2 0f       	add	r30, r18
    37e4:	f3 1f       	adc	r31, r19
    37e6:	90 81       	ld	r25, Z
    37e8:	90 93 3e 01 	sts	0x013E, r25
    37ec:	2f 5f       	subi	r18, 0xFF	; 255
    37ee:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    37f0:	20 31       	cpi	r18, 0x10	; 16
    37f2:	31 05       	cpc	r19, r1
    37f4:	a9 f7       	brne	.-22     	; 0x37e0 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    37f6:	90 91 3c 01 	lds	r25, 0x013C
    37fa:	90 68       	ori	r25, 0x80	; 128
    37fc:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    3800:	90 91 3d 01 	lds	r25, 0x013D
    3804:	90 ff       	sbrs	r25, 0
    3806:	fc cf       	rjmp	.-8      	; 0x3800 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    3808:	41 50       	subi	r20, 0x01	; 1
    380a:	51 09       	sbc	r21, r1
    380c:	94 e0       	ldi	r25, 0x04	; 4
    380e:	44 0f       	add	r20, r20
    3810:	55 1f       	adc	r21, r21
    3812:	9a 95       	dec	r25
    3814:	e1 f7       	brne	.-8      	; 0x380e <aes_decrypt+0x82>
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    381a:	90 91 3e 01 	lds	r25, 0x013E
    381e:	8e 01       	movw	r16, r28
    3820:	02 0f       	add	r16, r18
    3822:	13 1f       	adc	r17, r19
    3824:	f8 01       	movw	r30, r16
    3826:	90 83       	st	Z, r25
         if(i!=0)
    3828:	66 23       	and	r22, r22
    382a:	49 f0       	breq	.+18     	; 0x383e <aes_decrypt+0xb2>
    382c:	f9 01       	movw	r30, r18
    382e:	e4 0f       	add	r30, r20
    3830:	f5 1f       	adc	r31, r21
    3832:	ea 0f       	add	r30, r26
    3834:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    3836:	e0 81       	ld	r30, Z
    3838:	9e 27       	eor	r25, r30
    383a:	f8 01       	movw	r30, r16
    383c:	90 83       	st	Z, r25
    383e:	2f 5f       	subi	r18, 0xFF	; 255
    3840:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    3842:	20 31       	cpi	r18, 0x10	; 16
    3844:	31 05       	cpc	r19, r1
    3846:	49 f7       	brne	.-46     	; 0x381a <aes_decrypt+0x8e>
    3848:	61 50       	subi	r22, 0x01	; 1
    384a:	b9 cf       	rjmp	.-142    	; 0x37be <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    384e:	df 91       	pop	r29
    3850:	cf 91       	pop	r28
    3852:	1f 91       	pop	r17
    3854:	0f 91       	pop	r16
    3856:	08 95       	ret

00003858 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    3858:	90 91 c0 00 	lds	r25, 0x00C0
    385c:	95 ff       	sbrs	r25, 5
    385e:	fc cf       	rjmp	.-8      	; 0x3858 <putc0>
    3860:	90 91 c0 00 	lds	r25, 0x00C0
    3864:	9f 7d       	andi	r25, 0xDF	; 223
    3866:	90 93 c0 00 	sts	0x00C0, r25
    386a:	80 93 c6 00 	sts	0x00C6, r24
    386e:	08 95       	ret

00003870 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    3870:	1f 92       	push	r1
    3872:	0f 92       	push	r0
    3874:	0f b6       	in	r0, 0x3f	; 63
    3876:	0f 92       	push	r0
    3878:	11 24       	eor	r1, r1
    387a:	0b b6       	in	r0, 0x3b	; 59
    387c:	0f 92       	push	r0
    387e:	2f 93       	push	r18
    3880:	3f 93       	push	r19
    3882:	4f 93       	push	r20
    3884:	5f 93       	push	r21
    3886:	6f 93       	push	r22
    3888:	7f 93       	push	r23
    388a:	8f 93       	push	r24
    388c:	9f 93       	push	r25
    388e:	af 93       	push	r26
    3890:	bf 93       	push	r27
    3892:	ef 93       	push	r30
    3894:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    3896:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    389a:	80 91 c0 00 	lds	r24, 0x00C0
    389e:	87 ff       	sbrs	r24, 7
    38a0:	fc cf       	rjmp	.-8      	; 0x389a <__vector_25+0x2a>
    38a2:	80 91 c0 00 	lds	r24, 0x00C0
    38a6:	8f 77       	andi	r24, 0x7F	; 127
    38a8:	80 93 c0 00 	sts	0x00C0, r24
    38ac:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    38b0:	80 91 45 05 	lds	r24, 0x0545
    38b4:	90 91 46 05 	lds	r25, 0x0546
    38b8:	fc 01       	movw	r30, r24
    38ba:	eb 5c       	subi	r30, 0xCB	; 203
    38bc:	fa 4f       	sbci	r31, 0xFA	; 250
    38be:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    38c0:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    38c2:	80 31       	cpi	r24, 0x10	; 16
    38c4:	91 05       	cpc	r25, r1
    38c6:	29 f0       	breq	.+10     	; 0x38d2 <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    38c8:	90 93 46 05 	sts	0x0546, r25
    38cc:	80 93 45 05 	sts	0x0545, r24
    38d0:	04 c0       	rjmp	.+8      	; 0x38da <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    38d2:	10 92 46 05 	sts	0x0546, r1
    38d6:	10 92 45 05 	sts	0x0545, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    38da:	80 91 34 05 	lds	r24, 0x0534
    38de:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <nrk_event_signal>
CLEAR_UART0_RX_INT();
    38e2:	80 91 c0 00 	lds	r24, 0x00C0
    38e6:	8f 77       	andi	r24, 0x7F	; 127
    38e8:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    38ec:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
}
    38f0:	ff 91       	pop	r31
    38f2:	ef 91       	pop	r30
    38f4:	bf 91       	pop	r27
    38f6:	af 91       	pop	r26
    38f8:	9f 91       	pop	r25
    38fa:	8f 91       	pop	r24
    38fc:	7f 91       	pop	r23
    38fe:	6f 91       	pop	r22
    3900:	5f 91       	pop	r21
    3902:	4f 91       	pop	r20
    3904:	3f 91       	pop	r19
    3906:	2f 91       	pop	r18
    3908:	0f 90       	pop	r0
    390a:	0b be       	out	0x3b, r0	; 59
    390c:	0f 90       	pop	r0
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	0f 90       	pop	r0
    3912:	1f 90       	pop	r1
    3914:	18 95       	reti

00003916 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    3916:	81 11       	cpse	r24, r1
    3918:	0d c0       	rjmp	.+26     	; 0x3934 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	40 91 47 05 	lds	r20, 0x0547
    3920:	50 91 48 05 	lds	r21, 0x0548
    3924:	20 91 45 05 	lds	r18, 0x0545
    3928:	30 91 46 05 	lds	r19, 0x0546
    392c:	42 17       	cp	r20, r18
    392e:	53 07       	cpc	r21, r19
    3930:	51 f4       	brne	.+20     	; 0x3946 <nrk_uart_data_ready+0x30>
    3932:	08 c0       	rjmp	.+16     	; 0x3944 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    3934:	81 30       	cpi	r24, 0x01	; 1
    3936:	31 f4       	brne	.+12     	; 0x3944 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    3938:	80 91 c8 00 	lds	r24, 0x00C8
    393c:	88 1f       	adc	r24, r24
    393e:	88 27       	eor	r24, r24
    3940:	88 1f       	adc	r24, r24
    3942:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    3944:	80 e0       	ldi	r24, 0x00	; 0
}
    3946:	08 95       	ret

00003948 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3948:	80 91 34 05 	lds	r24, 0x0534
    394c:	8f 3f       	cpi	r24, 0xFF	; 255
    394e:	19 f4       	brne	.+6      	; 0x3956 <nrk_uart_rx_signal_get+0xe>
    3950:	8e e0       	ldi	r24, 0x0E	; 14
    3952:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_error_add>
   return uart_rx_signal;
}
    3956:	80 91 34 05 	lds	r24, 0x0534
    395a:	08 95       	ret

0000395c <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    3960:	fc 01       	movw	r30, r24
    3962:	24 91       	lpm	r18, Z
    3964:	ec 01       	movw	r28, r24
    3966:	21 96       	adiw	r28, 0x01	; 1
    3968:	22 23       	and	r18, r18
    396a:	51 f0       	breq	.+20     	; 0x3980 <nrk_kprintf+0x24>
        putchar(c);
    396c:	60 91 72 17 	lds	r22, 0x1772
    3970:	70 91 73 17 	lds	r23, 0x1773
    3974:	82 2f       	mov	r24, r18
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    397c:	ce 01       	movw	r24, r28
    397e:	f0 cf       	rjmp	.-32     	; 0x3960 <nrk_kprintf+0x4>
}
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	08 95       	ret

00003986 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    3986:	20 91 47 05 	lds	r18, 0x0547
    398a:	30 91 48 05 	lds	r19, 0x0548
    398e:	80 91 45 05 	lds	r24, 0x0545
    3992:	90 91 46 05 	lds	r25, 0x0546
    3996:	28 17       	cp	r18, r24
    3998:	39 07       	cpc	r19, r25
    399a:	69 f4       	brne	.+26     	; 0x39b6 <getc0+0x30>
    399c:	80 91 34 05 	lds	r24, 0x0534
    39a0:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <nrk_signal_register>
    39a4:	60 91 34 05 	lds	r22, 0x0534
    39a8:	77 27       	eor	r23, r23
    39aa:	67 fd       	sbrc	r22, 7
    39ac:	70 95       	com	r23
    39ae:	87 2f       	mov	r24, r23
    39b0:	97 2f       	mov	r25, r23
    39b2:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    39b6:	6f 3f       	cpi	r22, 0xFF	; 255
    39b8:	21 f4       	brne	.+8      	; 0x39c2 <getc0+0x3c>
    39ba:	89 e1       	ldi	r24, 0x19	; 25
    39bc:	93 e0       	ldi	r25, 0x03	; 3
    39be:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    39c2:	20 91 47 05 	lds	r18, 0x0547
    39c6:	30 91 48 05 	lds	r19, 0x0548
    39ca:	f9 01       	movw	r30, r18
    39cc:	eb 5c       	subi	r30, 0xCB	; 203
    39ce:	fa 4f       	sbci	r31, 0xFA	; 250
    39d0:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    39d2:	2f 5f       	subi	r18, 0xFF	; 255
    39d4:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    39d6:	20 31       	cpi	r18, 0x10	; 16
    39d8:	31 05       	cpc	r19, r1
    39da:	28 f4       	brcc	.+10     	; 0x39e6 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    39dc:	30 93 48 05 	sts	0x0548, r19
    39e0:	20 93 47 05 	sts	0x0547, r18
    39e4:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    39e6:	10 92 48 05 	sts	0x0548, r1
    39ea:	10 92 47 05 	sts	0x0547, r1

   return tmp;
}
    39ee:	08 95       	ret

000039f0 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    39f0:	86 e0       	ldi	r24, 0x06	; 6
    39f2:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    39f4:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    39f6:	88 ef       	ldi	r24, 0xF8	; 248
    39f8:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    39fa:	80 ef       	ldi	r24, 0xF0	; 240
    39fc:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    39fe:	82 e0       	ldi	r24, 0x02	; 2
    3a00:	8d b9       	out	0x0d, r24	; 13
    3a02:	08 95       	ret

00003a04 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    3a04:	0c 94 f8 1c 	jmp	0x39f0	; 0x39f0 <PORT_INIT>

00003a08 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3a08:	8f 3f       	cpi	r24, 0xFF	; 255
    3a0a:	09 f4       	brne	.+2      	; 0x3a0e <nrk_gpio_set+0x6>
    3a0c:	6c c0       	rjmp	.+216    	; 0x3ae6 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    3a0e:	e8 2f       	mov	r30, r24
    3a10:	e7 70       	andi	r30, 0x07	; 7
    3a12:	4e 2f       	mov	r20, r30
    3a14:	50 e0       	ldi	r21, 0x00	; 0
    3a16:	47 30       	cpi	r20, 0x07	; 7
    3a18:	51 05       	cpc	r21, r1
    3a1a:	08 f0       	brcs	.+2      	; 0x3a1e <nrk_gpio_set+0x16>
    3a1c:	64 c0       	rjmp	.+200    	; 0x3ae6 <nrk_gpio_set+0xde>
    3a1e:	fa 01       	movw	r30, r20
    3a20:	e0 57       	subi	r30, 0x70	; 112
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	86 95       	lsr	r24
    3a26:	86 95       	lsr	r24
    3a28:	86 95       	lsr	r24
    3a2a:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3a2e:	42 b1       	in	r20, 0x02	; 2
    3a30:	21 e0       	ldi	r18, 0x01	; 1
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	b9 01       	movw	r22, r18
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <nrk_gpio_set+0x34>
    3a38:	66 0f       	add	r22, r22
    3a3a:	77 1f       	adc	r23, r23
    3a3c:	8a 95       	dec	r24
    3a3e:	e2 f7       	brpl	.-8      	; 0x3a38 <nrk_gpio_set+0x30>
    3a40:	cb 01       	movw	r24, r22
    3a42:	84 2b       	or	r24, r20
    3a44:	82 b9       	out	0x02, r24	; 2
    3a46:	4d c0       	rjmp	.+154    	; 0x3ae2 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3a48:	45 b1       	in	r20, 0x05	; 5
    3a4a:	21 e0       	ldi	r18, 0x01	; 1
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	b9 01       	movw	r22, r18
    3a50:	02 c0       	rjmp	.+4      	; 0x3a56 <nrk_gpio_set+0x4e>
    3a52:	66 0f       	add	r22, r22
    3a54:	77 1f       	adc	r23, r23
    3a56:	8a 95       	dec	r24
    3a58:	e2 f7       	brpl	.-8      	; 0x3a52 <nrk_gpio_set+0x4a>
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	84 2b       	or	r24, r20
    3a5e:	85 b9       	out	0x05, r24	; 5
    3a60:	40 c0       	rjmp	.+128    	; 0x3ae2 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3a62:	48 b1       	in	r20, 0x08	; 8
    3a64:	21 e0       	ldi	r18, 0x01	; 1
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	b9 01       	movw	r22, r18
    3a6a:	02 c0       	rjmp	.+4      	; 0x3a70 <nrk_gpio_set+0x68>
    3a6c:	66 0f       	add	r22, r22
    3a6e:	77 1f       	adc	r23, r23
    3a70:	8a 95       	dec	r24
    3a72:	e2 f7       	brpl	.-8      	; 0x3a6c <nrk_gpio_set+0x64>
    3a74:	cb 01       	movw	r24, r22
    3a76:	84 2b       	or	r24, r20
    3a78:	88 b9       	out	0x08, r24	; 8
    3a7a:	33 c0       	rjmp	.+102    	; 0x3ae2 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3a7c:	4b b1       	in	r20, 0x0b	; 11
    3a7e:	21 e0       	ldi	r18, 0x01	; 1
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	b9 01       	movw	r22, r18
    3a84:	02 c0       	rjmp	.+4      	; 0x3a8a <nrk_gpio_set+0x82>
    3a86:	66 0f       	add	r22, r22
    3a88:	77 1f       	adc	r23, r23
    3a8a:	8a 95       	dec	r24
    3a8c:	e2 f7       	brpl	.-8      	; 0x3a86 <nrk_gpio_set+0x7e>
    3a8e:	cb 01       	movw	r24, r22
    3a90:	84 2b       	or	r24, r20
    3a92:	8b b9       	out	0x0b, r24	; 11
    3a94:	26 c0       	rjmp	.+76     	; 0x3ae2 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3a96:	4e b1       	in	r20, 0x0e	; 14
    3a98:	21 e0       	ldi	r18, 0x01	; 1
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	b9 01       	movw	r22, r18
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <nrk_gpio_set+0x9c>
    3aa0:	66 0f       	add	r22, r22
    3aa2:	77 1f       	adc	r23, r23
    3aa4:	8a 95       	dec	r24
    3aa6:	e2 f7       	brpl	.-8      	; 0x3aa0 <nrk_gpio_set+0x98>
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	84 2b       	or	r24, r20
    3aac:	8e b9       	out	0x0e, r24	; 14
    3aae:	19 c0       	rjmp	.+50     	; 0x3ae2 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3ab0:	41 b3       	in	r20, 0x11	; 17
    3ab2:	21 e0       	ldi	r18, 0x01	; 1
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	b9 01       	movw	r22, r18
    3ab8:	02 c0       	rjmp	.+4      	; 0x3abe <nrk_gpio_set+0xb6>
    3aba:	66 0f       	add	r22, r22
    3abc:	77 1f       	adc	r23, r23
    3abe:	8a 95       	dec	r24
    3ac0:	e2 f7       	brpl	.-8      	; 0x3aba <nrk_gpio_set+0xb2>
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	84 2b       	or	r24, r20
    3ac6:	81 bb       	out	0x11, r24	; 17
    3ac8:	0c c0       	rjmp	.+24     	; 0x3ae2 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3aca:	44 b3       	in	r20, 0x14	; 20
    3acc:	21 e0       	ldi	r18, 0x01	; 1
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	b9 01       	movw	r22, r18
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <nrk_gpio_set+0xd0>
    3ad4:	66 0f       	add	r22, r22
    3ad6:	77 1f       	adc	r23, r23
    3ad8:	8a 95       	dec	r24
    3ada:	e2 f7       	brpl	.-8      	; 0x3ad4 <nrk_gpio_set+0xcc>
    3adc:	cb 01       	movw	r24, r22
    3ade:	84 2b       	or	r24, r20
    3ae0:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3ae4:	08 95       	ret
                default: return -1;
    3ae6:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    3ae8:	08 95       	ret

00003aea <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3aea:	8f 3f       	cpi	r24, 0xFF	; 255
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <nrk_gpio_clr+0x6>
    3aee:	65 c0       	rjmp	.+202    	; 0x3bba <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    3af0:	e8 2f       	mov	r30, r24
    3af2:	e7 70       	andi	r30, 0x07	; 7
    3af4:	4e 2f       	mov	r20, r30
    3af6:	50 e0       	ldi	r21, 0x00	; 0
    3af8:	47 30       	cpi	r20, 0x07	; 7
    3afa:	51 05       	cpc	r21, r1
    3afc:	08 f0       	brcs	.+2      	; 0x3b00 <nrk_gpio_clr+0x16>
    3afe:	5d c0       	rjmp	.+186    	; 0x3bba <nrk_gpio_clr+0xd0>
    3b00:	fa 01       	movw	r30, r20
    3b02:	e9 56       	subi	r30, 0x69	; 105
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	86 95       	lsr	r24
    3b08:	86 95       	lsr	r24
    3b0a:	86 95       	lsr	r24
    3b0c:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    3b10:	42 b1       	in	r20, 0x02	; 2
    3b12:	21 e0       	ldi	r18, 0x01	; 1
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	b9 01       	movw	r22, r18
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <nrk_gpio_clr+0x34>
    3b1a:	66 0f       	add	r22, r22
    3b1c:	77 1f       	adc	r23, r23
    3b1e:	8a 95       	dec	r24
    3b20:	e2 f7       	brpl	.-8      	; 0x3b1a <nrk_gpio_clr+0x30>
    3b22:	cb 01       	movw	r24, r22
    3b24:	80 95       	com	r24
    3b26:	84 23       	and	r24, r20
    3b28:	82 b9       	out	0x02, r24	; 2
    3b2a:	45 c0       	rjmp	.+138    	; 0x3bb6 <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    3b2c:	45 b1       	in	r20, 0x05	; 5
    3b2e:	21 e0       	ldi	r18, 0x01	; 1
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	b9 01       	movw	r22, r18
    3b34:	02 c0       	rjmp	.+4      	; 0x3b3a <nrk_gpio_clr+0x50>
    3b36:	66 0f       	add	r22, r22
    3b38:	77 1f       	adc	r23, r23
    3b3a:	8a 95       	dec	r24
    3b3c:	e2 f7       	brpl	.-8      	; 0x3b36 <nrk_gpio_clr+0x4c>
    3b3e:	cb 01       	movw	r24, r22
    3b40:	80 95       	com	r24
    3b42:	84 23       	and	r24, r20
    3b44:	85 b9       	out	0x05, r24	; 5
    3b46:	37 c0       	rjmp	.+110    	; 0x3bb6 <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3b48:	48 b1       	in	r20, 0x08	; 8
    3b4a:	21 e0       	ldi	r18, 0x01	; 1
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	b9 01       	movw	r22, r18
    3b50:	02 c0       	rjmp	.+4      	; 0x3b56 <nrk_gpio_clr+0x6c>
    3b52:	66 0f       	add	r22, r22
    3b54:	77 1f       	adc	r23, r23
    3b56:	8a 95       	dec	r24
    3b58:	e2 f7       	brpl	.-8      	; 0x3b52 <nrk_gpio_clr+0x68>
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	80 95       	com	r24
    3b5e:	84 23       	and	r24, r20
    3b60:	88 b9       	out	0x08, r24	; 8
    3b62:	29 c0       	rjmp	.+82     	; 0x3bb6 <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3b64:	4b b1       	in	r20, 0x0b	; 11
    3b66:	21 e0       	ldi	r18, 0x01	; 1
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	b9 01       	movw	r22, r18
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <nrk_gpio_clr+0x88>
    3b6e:	66 0f       	add	r22, r22
    3b70:	77 1f       	adc	r23, r23
    3b72:	8a 95       	dec	r24
    3b74:	e2 f7       	brpl	.-8      	; 0x3b6e <nrk_gpio_clr+0x84>
    3b76:	cb 01       	movw	r24, r22
    3b78:	80 95       	com	r24
    3b7a:	84 23       	and	r24, r20
    3b7c:	8b b9       	out	0x0b, r24	; 11
    3b7e:	1b c0       	rjmp	.+54     	; 0x3bb6 <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3b80:	4e b1       	in	r20, 0x0e	; 14
    3b82:	21 e0       	ldi	r18, 0x01	; 1
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	b9 01       	movw	r22, r18
    3b88:	02 c0       	rjmp	.+4      	; 0x3b8e <nrk_gpio_clr+0xa4>
    3b8a:	66 0f       	add	r22, r22
    3b8c:	77 1f       	adc	r23, r23
    3b8e:	8a 95       	dec	r24
    3b90:	e2 f7       	brpl	.-8      	; 0x3b8a <nrk_gpio_clr+0xa0>
    3b92:	cb 01       	movw	r24, r22
    3b94:	80 95       	com	r24
    3b96:	84 23       	and	r24, r20
    3b98:	8e b9       	out	0x0e, r24	; 14
    3b9a:	0d c0       	rjmp	.+26     	; 0x3bb6 <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3b9c:	41 b3       	in	r20, 0x11	; 17
    3b9e:	21 e0       	ldi	r18, 0x01	; 1
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	b9 01       	movw	r22, r18
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <nrk_gpio_clr+0xc0>
    3ba6:	66 0f       	add	r22, r22
    3ba8:	77 1f       	adc	r23, r23
    3baa:	8a 95       	dec	r24
    3bac:	e2 f7       	brpl	.-8      	; 0x3ba6 <nrk_gpio_clr+0xbc>
    3bae:	cb 01       	movw	r24, r22
    3bb0:	80 95       	com	r24
    3bb2:	84 23       	and	r24, r20
    3bb4:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3bb8:	08 95       	ret
                default: return -1;
    3bba:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    3bbc:	08 95       	ret

00003bbe <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    3bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    3bc0:	31 f1       	breq	.+76     	; 0x3c0e <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    3bc2:	e8 2f       	mov	r30, r24
    3bc4:	e7 70       	andi	r30, 0x07	; 7
    3bc6:	4e 2f       	mov	r20, r30
    3bc8:	50 e0       	ldi	r21, 0x00	; 0
    3bca:	47 30       	cpi	r20, 0x07	; 7
    3bcc:	51 05       	cpc	r21, r1
    3bce:	f8 f4       	brcc	.+62     	; 0x3c0e <nrk_gpio_get+0x50>
    3bd0:	fa 01       	movw	r30, r20
    3bd2:	e2 56       	subi	r30, 0x62	; 98
    3bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd6:	28 2f       	mov	r18, r24
    3bd8:	26 95       	lsr	r18
    3bda:	26 95       	lsr	r18
    3bdc:	26 95       	lsr	r18
    3bde:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    3be2:	90 b1       	in	r25, 0x00	; 0
    3be4:	0b c0       	rjmp	.+22     	; 0x3bfc <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    3be6:	93 b1       	in	r25, 0x03	; 3
    3be8:	09 c0       	rjmp	.+18     	; 0x3bfc <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    3bea:	96 b1       	in	r25, 0x06	; 6
    3bec:	07 c0       	rjmp	.+14     	; 0x3bfc <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    3bee:	99 b1       	in	r25, 0x09	; 9
    3bf0:	05 c0       	rjmp	.+10     	; 0x3bfc <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    3bf2:	9c b1       	in	r25, 0x0c	; 12
    3bf4:	03 c0       	rjmp	.+6      	; 0x3bfc <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    3bf6:	9f b1       	in	r25, 0x0f	; 15
    3bf8:	01 c0       	rjmp	.+2      	; 0x3bfc <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    3bfa:	92 b3       	in	r25, 0x12	; 18
    3bfc:	89 2f       	mov	r24, r25
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	02 c0       	rjmp	.+4      	; 0x3c06 <nrk_gpio_get+0x48>
    3c02:	95 95       	asr	r25
    3c04:	87 95       	ror	r24
    3c06:	2a 95       	dec	r18
    3c08:	e2 f7       	brpl	.-8      	; 0x3c02 <nrk_gpio_get+0x44>
    3c0a:	81 70       	andi	r24, 0x01	; 1
    3c0c:	08 95       	ret
                default: return -1;
    3c0e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    3c10:	08 95       	ret

00003c12 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    3c12:	8f 3f       	cpi	r24, 0xFF	; 255
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <nrk_gpio_toggle+0x6>
    3c16:	06 c1       	rjmp	.+524    	; 0x3e24 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    3c18:	e8 2f       	mov	r30, r24
    3c1a:	e7 70       	andi	r30, 0x07	; 7
    3c1c:	4e 2f       	mov	r20, r30
    3c1e:	50 e0       	ldi	r21, 0x00	; 0
    3c20:	47 30       	cpi	r20, 0x07	; 7
    3c22:	51 05       	cpc	r21, r1
    3c24:	08 f0       	brcs	.+2      	; 0x3c28 <nrk_gpio_toggle+0x16>
    3c26:	fe c0       	rjmp	.+508    	; 0x3e24 <nrk_gpio_toggle+0x212>
    3c28:	fa 01       	movw	r30, r20
    3c2a:	eb 55       	subi	r30, 0x5B	; 91
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	86 95       	lsr	r24
    3c30:	86 95       	lsr	r24
    3c32:	86 95       	lsr	r24
    3c34:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    3c38:	20 b1       	in	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	08 2e       	mov	r0, r24
    3c3e:	02 c0       	rjmp	.+4      	; 0x3c44 <nrk_gpio_toggle+0x32>
    3c40:	35 95       	asr	r19
    3c42:	27 95       	ror	r18
    3c44:	0a 94       	dec	r0
    3c46:	e2 f7       	brpl	.-8      	; 0x3c40 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    3c48:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    3c4a:	20 fd       	sbrc	r18, 0
    3c4c:	0b c0       	rjmp	.+22     	; 0x3c64 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    3c4e:	21 e0       	ldi	r18, 0x01	; 1
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	b9 01       	movw	r22, r18
    3c54:	02 c0       	rjmp	.+4      	; 0x3c5a <nrk_gpio_toggle+0x48>
    3c56:	66 0f       	add	r22, r22
    3c58:	77 1f       	adc	r23, r23
    3c5a:	8a 95       	dec	r24
    3c5c:	e2 f7       	brpl	.-8      	; 0x3c56 <nrk_gpio_toggle+0x44>
    3c5e:	cb 01       	movw	r24, r22
    3c60:	84 2b       	or	r24, r20
    3c62:	0b c0       	rjmp	.+22     	; 0x3c7a <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    3c64:	21 e0       	ldi	r18, 0x01	; 1
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	b9 01       	movw	r22, r18
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <nrk_gpio_toggle+0x5e>
    3c6c:	66 0f       	add	r22, r22
    3c6e:	77 1f       	adc	r23, r23
    3c70:	8a 95       	dec	r24
    3c72:	e2 f7       	brpl	.-8      	; 0x3c6c <nrk_gpio_toggle+0x5a>
    3c74:	cb 01       	movw	r24, r22
    3c76:	80 95       	com	r24
    3c78:	84 23       	and	r24, r20
    3c7a:	82 b9       	out	0x02, r24	; 2
    3c7c:	16 c0       	rjmp	.+44     	; 0x3caa <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    3c7e:	23 b1       	in	r18, 0x03	; 3
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	08 2e       	mov	r0, r24
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <nrk_gpio_toggle+0x78>
    3c86:	35 95       	asr	r19
    3c88:	27 95       	ror	r18
    3c8a:	0a 94       	dec	r0
    3c8c:	e2 f7       	brpl	.-8      	; 0x3c86 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    3c8e:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    3c90:	20 fd       	sbrc	r18, 0
    3c92:	0d c0       	rjmp	.+26     	; 0x3cae <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    3c94:	21 e0       	ldi	r18, 0x01	; 1
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	b9 01       	movw	r22, r18
    3c9a:	02 c0       	rjmp	.+4      	; 0x3ca0 <nrk_gpio_toggle+0x8e>
    3c9c:	66 0f       	add	r22, r22
    3c9e:	77 1f       	adc	r23, r23
    3ca0:	8a 95       	dec	r24
    3ca2:	e2 f7       	brpl	.-8      	; 0x3c9c <nrk_gpio_toggle+0x8a>
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	84 2b       	or	r24, r20
    3ca8:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    3cae:	21 e0       	ldi	r18, 0x01	; 1
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	b9 01       	movw	r22, r18
    3cb4:	02 c0       	rjmp	.+4      	; 0x3cba <nrk_gpio_toggle+0xa8>
    3cb6:	66 0f       	add	r22, r22
    3cb8:	77 1f       	adc	r23, r23
    3cba:	8a 95       	dec	r24
    3cbc:	e2 f7       	brpl	.-8      	; 0x3cb6 <nrk_gpio_toggle+0xa4>
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	80 95       	com	r24
    3cc2:	84 23       	and	r24, r20
    3cc4:	f1 cf       	rjmp	.-30     	; 0x3ca8 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    3cc6:	26 b1       	in	r18, 0x06	; 6
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	08 2e       	mov	r0, r24
    3ccc:	02 c0       	rjmp	.+4      	; 0x3cd2 <nrk_gpio_toggle+0xc0>
    3cce:	35 95       	asr	r19
    3cd0:	27 95       	ror	r18
    3cd2:	0a 94       	dec	r0
    3cd4:	e2 f7       	brpl	.-8      	; 0x3cce <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    3cd6:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    3cd8:	20 fd       	sbrc	r18, 0
    3cda:	0b c0       	rjmp	.+22     	; 0x3cf2 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    3cdc:	21 e0       	ldi	r18, 0x01	; 1
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	b9 01       	movw	r22, r18
    3ce2:	02 c0       	rjmp	.+4      	; 0x3ce8 <nrk_gpio_toggle+0xd6>
    3ce4:	66 0f       	add	r22, r22
    3ce6:	77 1f       	adc	r23, r23
    3ce8:	8a 95       	dec	r24
    3cea:	e2 f7       	brpl	.-8      	; 0x3ce4 <nrk_gpio_toggle+0xd2>
    3cec:	cb 01       	movw	r24, r22
    3cee:	84 2b       	or	r24, r20
    3cf0:	0b c0       	rjmp	.+22     	; 0x3d08 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    3cf2:	21 e0       	ldi	r18, 0x01	; 1
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	b9 01       	movw	r22, r18
    3cf8:	02 c0       	rjmp	.+4      	; 0x3cfe <nrk_gpio_toggle+0xec>
    3cfa:	66 0f       	add	r22, r22
    3cfc:	77 1f       	adc	r23, r23
    3cfe:	8a 95       	dec	r24
    3d00:	e2 f7       	brpl	.-8      	; 0x3cfa <nrk_gpio_toggle+0xe8>
    3d02:	cb 01       	movw	r24, r22
    3d04:	80 95       	com	r24
    3d06:	84 23       	and	r24, r20
    3d08:	88 b9       	out	0x08, r24	; 8
    3d0a:	cf cf       	rjmp	.-98     	; 0x3caa <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    3d0c:	29 b1       	in	r18, 0x09	; 9
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	08 2e       	mov	r0, r24
    3d12:	02 c0       	rjmp	.+4      	; 0x3d18 <nrk_gpio_toggle+0x106>
    3d14:	35 95       	asr	r19
    3d16:	27 95       	ror	r18
    3d18:	0a 94       	dec	r0
    3d1a:	e2 f7       	brpl	.-8      	; 0x3d14 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    3d1c:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    3d1e:	20 fd       	sbrc	r18, 0
    3d20:	0b c0       	rjmp	.+22     	; 0x3d38 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    3d22:	21 e0       	ldi	r18, 0x01	; 1
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	b9 01       	movw	r22, r18
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <nrk_gpio_toggle+0x11c>
    3d2a:	66 0f       	add	r22, r22
    3d2c:	77 1f       	adc	r23, r23
    3d2e:	8a 95       	dec	r24
    3d30:	e2 f7       	brpl	.-8      	; 0x3d2a <nrk_gpio_toggle+0x118>
    3d32:	cb 01       	movw	r24, r22
    3d34:	84 2b       	or	r24, r20
    3d36:	0b c0       	rjmp	.+22     	; 0x3d4e <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    3d38:	21 e0       	ldi	r18, 0x01	; 1
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	b9 01       	movw	r22, r18
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <nrk_gpio_toggle+0x132>
    3d40:	66 0f       	add	r22, r22
    3d42:	77 1f       	adc	r23, r23
    3d44:	8a 95       	dec	r24
    3d46:	e2 f7       	brpl	.-8      	; 0x3d40 <nrk_gpio_toggle+0x12e>
    3d48:	cb 01       	movw	r24, r22
    3d4a:	80 95       	com	r24
    3d4c:	84 23       	and	r24, r20
    3d4e:	8b b9       	out	0x0b, r24	; 11
    3d50:	ac cf       	rjmp	.-168    	; 0x3caa <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    3d52:	2c b1       	in	r18, 0x0c	; 12
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	08 2e       	mov	r0, r24
    3d58:	02 c0       	rjmp	.+4      	; 0x3d5e <nrk_gpio_toggle+0x14c>
    3d5a:	35 95       	asr	r19
    3d5c:	27 95       	ror	r18
    3d5e:	0a 94       	dec	r0
    3d60:	e2 f7       	brpl	.-8      	; 0x3d5a <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3d62:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    3d64:	20 fd       	sbrc	r18, 0
    3d66:	0b c0       	rjmp	.+22     	; 0x3d7e <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3d68:	21 e0       	ldi	r18, 0x01	; 1
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	b9 01       	movw	r22, r18
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <nrk_gpio_toggle+0x162>
    3d70:	66 0f       	add	r22, r22
    3d72:	77 1f       	adc	r23, r23
    3d74:	8a 95       	dec	r24
    3d76:	e2 f7       	brpl	.-8      	; 0x3d70 <nrk_gpio_toggle+0x15e>
    3d78:	cb 01       	movw	r24, r22
    3d7a:	84 2b       	or	r24, r20
    3d7c:	0b c0       	rjmp	.+22     	; 0x3d94 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    3d7e:	21 e0       	ldi	r18, 0x01	; 1
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	b9 01       	movw	r22, r18
    3d84:	02 c0       	rjmp	.+4      	; 0x3d8a <nrk_gpio_toggle+0x178>
    3d86:	66 0f       	add	r22, r22
    3d88:	77 1f       	adc	r23, r23
    3d8a:	8a 95       	dec	r24
    3d8c:	e2 f7       	brpl	.-8      	; 0x3d86 <nrk_gpio_toggle+0x174>
    3d8e:	cb 01       	movw	r24, r22
    3d90:	80 95       	com	r24
    3d92:	84 23       	and	r24, r20
    3d94:	8e b9       	out	0x0e, r24	; 14
    3d96:	89 cf       	rjmp	.-238    	; 0x3caa <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    3d98:	2f b1       	in	r18, 0x0f	; 15
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	08 2e       	mov	r0, r24
    3d9e:	02 c0       	rjmp	.+4      	; 0x3da4 <nrk_gpio_toggle+0x192>
    3da0:	35 95       	asr	r19
    3da2:	27 95       	ror	r18
    3da4:	0a 94       	dec	r0
    3da6:	e2 f7       	brpl	.-8      	; 0x3da0 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    3da8:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    3daa:	20 fd       	sbrc	r18, 0
    3dac:	0b c0       	rjmp	.+22     	; 0x3dc4 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    3dae:	21 e0       	ldi	r18, 0x01	; 1
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	b9 01       	movw	r22, r18
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <nrk_gpio_toggle+0x1a8>
    3db6:	66 0f       	add	r22, r22
    3db8:	77 1f       	adc	r23, r23
    3dba:	8a 95       	dec	r24
    3dbc:	e2 f7       	brpl	.-8      	; 0x3db6 <nrk_gpio_toggle+0x1a4>
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	84 2b       	or	r24, r20
    3dc2:	0b c0       	rjmp	.+22     	; 0x3dda <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    3dc4:	21 e0       	ldi	r18, 0x01	; 1
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	b9 01       	movw	r22, r18
    3dca:	02 c0       	rjmp	.+4      	; 0x3dd0 <nrk_gpio_toggle+0x1be>
    3dcc:	66 0f       	add	r22, r22
    3dce:	77 1f       	adc	r23, r23
    3dd0:	8a 95       	dec	r24
    3dd2:	e2 f7       	brpl	.-8      	; 0x3dcc <nrk_gpio_toggle+0x1ba>
    3dd4:	cb 01       	movw	r24, r22
    3dd6:	80 95       	com	r24
    3dd8:	84 23       	and	r24, r20
    3dda:	81 bb       	out	0x11, r24	; 17
    3ddc:	66 cf       	rjmp	.-308    	; 0x3caa <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    3dde:	22 b3       	in	r18, 0x12	; 18
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	08 2e       	mov	r0, r24
    3de4:	02 c0       	rjmp	.+4      	; 0x3dea <nrk_gpio_toggle+0x1d8>
    3de6:	35 95       	asr	r19
    3de8:	27 95       	ror	r18
    3dea:	0a 94       	dec	r0
    3dec:	e2 f7       	brpl	.-8      	; 0x3de6 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    3dee:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    3df0:	20 fd       	sbrc	r18, 0
    3df2:	0b c0       	rjmp	.+22     	; 0x3e0a <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    3df4:	21 e0       	ldi	r18, 0x01	; 1
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	b9 01       	movw	r22, r18
    3dfa:	02 c0       	rjmp	.+4      	; 0x3e00 <nrk_gpio_toggle+0x1ee>
    3dfc:	66 0f       	add	r22, r22
    3dfe:	77 1f       	adc	r23, r23
    3e00:	8a 95       	dec	r24
    3e02:	e2 f7       	brpl	.-8      	; 0x3dfc <nrk_gpio_toggle+0x1ea>
    3e04:	cb 01       	movw	r24, r22
    3e06:	84 2b       	or	r24, r20
    3e08:	0b c0       	rjmp	.+22     	; 0x3e20 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    3e0a:	21 e0       	ldi	r18, 0x01	; 1
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	b9 01       	movw	r22, r18
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <nrk_gpio_toggle+0x204>
    3e12:	66 0f       	add	r22, r22
    3e14:	77 1f       	adc	r23, r23
    3e16:	8a 95       	dec	r24
    3e18:	e2 f7       	brpl	.-8      	; 0x3e12 <nrk_gpio_toggle+0x200>
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	80 95       	com	r24
    3e1e:	84 23       	and	r24, r20
    3e20:	84 bb       	out	0x14, r24	; 20
    3e22:	43 cf       	rjmp	.-378    	; 0x3caa <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    3e24:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    3e26:	08 95       	ret

00003e28 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3e28:	8f 3f       	cpi	r24, 0xFF	; 255
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <nrk_gpio_direction+0x6>
    3e2c:	d5 c0       	rjmp	.+426    	; 0x3fd8 <nrk_gpio_direction+0x1b0>
    3e2e:	e8 2f       	mov	r30, r24
    3e30:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    3e32:	4e 2f       	mov	r20, r30
    3e34:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    3e36:	61 11       	cpse	r22, r1
    3e38:	67 c0       	rjmp	.+206    	; 0x3f08 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    3e3a:	47 30       	cpi	r20, 0x07	; 7
    3e3c:	51 05       	cpc	r21, r1
    3e3e:	08 f0       	brcs	.+2      	; 0x3e42 <nrk_gpio_direction+0x1a>
    3e40:	cb c0       	rjmp	.+406    	; 0x3fd8 <nrk_gpio_direction+0x1b0>
    3e42:	fa 01       	movw	r30, r20
    3e44:	e4 55       	subi	r30, 0x54	; 84
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	86 95       	lsr	r24
    3e4a:	86 95       	lsr	r24
    3e4c:	86 95       	lsr	r24
    3e4e:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    3e52:	41 b1       	in	r20, 0x01	; 1
    3e54:	21 e0       	ldi	r18, 0x01	; 1
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	b9 01       	movw	r22, r18
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <nrk_gpio_direction+0x38>
    3e5c:	66 0f       	add	r22, r22
    3e5e:	77 1f       	adc	r23, r23
    3e60:	8a 95       	dec	r24
    3e62:	e2 f7       	brpl	.-8      	; 0x3e5c <nrk_gpio_direction+0x34>
    3e64:	cb 01       	movw	r24, r22
    3e66:	80 95       	com	r24
    3e68:	84 23       	and	r24, r20
    3e6a:	65 c0       	rjmp	.+202    	; 0x3f36 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    3e6c:	44 b1       	in	r20, 0x04	; 4
    3e6e:	21 e0       	ldi	r18, 0x01	; 1
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	b9 01       	movw	r22, r18
    3e74:	02 c0       	rjmp	.+4      	; 0x3e7a <nrk_gpio_direction+0x52>
    3e76:	66 0f       	add	r22, r22
    3e78:	77 1f       	adc	r23, r23
    3e7a:	8a 95       	dec	r24
    3e7c:	e2 f7       	brpl	.-8      	; 0x3e76 <nrk_gpio_direction+0x4e>
    3e7e:	cb 01       	movw	r24, r22
    3e80:	80 95       	com	r24
    3e82:	84 23       	and	r24, r20
    3e84:	65 c0       	rjmp	.+202    	; 0x3f50 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    3e86:	47 b1       	in	r20, 0x07	; 7
    3e88:	21 e0       	ldi	r18, 0x01	; 1
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	b9 01       	movw	r22, r18
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <nrk_gpio_direction+0x6c>
    3e90:	66 0f       	add	r22, r22
    3e92:	77 1f       	adc	r23, r23
    3e94:	8a 95       	dec	r24
    3e96:	e2 f7       	brpl	.-8      	; 0x3e90 <nrk_gpio_direction+0x68>
    3e98:	cb 01       	movw	r24, r22
    3e9a:	80 95       	com	r24
    3e9c:	84 23       	and	r24, r20
    3e9e:	65 c0       	rjmp	.+202    	; 0x3f6a <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    3ea0:	4a b1       	in	r20, 0x0a	; 10
    3ea2:	21 e0       	ldi	r18, 0x01	; 1
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	b9 01       	movw	r22, r18
    3ea8:	02 c0       	rjmp	.+4      	; 0x3eae <nrk_gpio_direction+0x86>
    3eaa:	66 0f       	add	r22, r22
    3eac:	77 1f       	adc	r23, r23
    3eae:	8a 95       	dec	r24
    3eb0:	e2 f7       	brpl	.-8      	; 0x3eaa <nrk_gpio_direction+0x82>
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	80 95       	com	r24
    3eb6:	84 23       	and	r24, r20
    3eb8:	65 c0       	rjmp	.+202    	; 0x3f84 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    3eba:	4d b1       	in	r20, 0x0d	; 13
    3ebc:	21 e0       	ldi	r18, 0x01	; 1
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	b9 01       	movw	r22, r18
    3ec2:	02 c0       	rjmp	.+4      	; 0x3ec8 <nrk_gpio_direction+0xa0>
    3ec4:	66 0f       	add	r22, r22
    3ec6:	77 1f       	adc	r23, r23
    3ec8:	8a 95       	dec	r24
    3eca:	e2 f7       	brpl	.-8      	; 0x3ec4 <nrk_gpio_direction+0x9c>
    3ecc:	cb 01       	movw	r24, r22
    3ece:	80 95       	com	r24
    3ed0:	84 23       	and	r24, r20
    3ed2:	65 c0       	rjmp	.+202    	; 0x3f9e <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    3ed4:	40 b3       	in	r20, 0x10	; 16
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	b9 01       	movw	r22, r18
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <nrk_gpio_direction+0xba>
    3ede:	66 0f       	add	r22, r22
    3ee0:	77 1f       	adc	r23, r23
    3ee2:	8a 95       	dec	r24
    3ee4:	e2 f7       	brpl	.-8      	; 0x3ede <nrk_gpio_direction+0xb6>
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	80 95       	com	r24
    3eea:	84 23       	and	r24, r20
    3eec:	65 c0       	rjmp	.+202    	; 0x3fb8 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    3eee:	43 b3       	in	r20, 0x13	; 19
    3ef0:	21 e0       	ldi	r18, 0x01	; 1
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	b9 01       	movw	r22, r18
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <nrk_gpio_direction+0xd4>
    3ef8:	66 0f       	add	r22, r22
    3efa:	77 1f       	adc	r23, r23
    3efc:	8a 95       	dec	r24
    3efe:	e2 f7       	brpl	.-8      	; 0x3ef8 <nrk_gpio_direction+0xd0>
    3f00:	cb 01       	movw	r24, r22
    3f02:	80 95       	com	r24
    3f04:	84 23       	and	r24, r20
    3f06:	65 c0       	rjmp	.+202    	; 0x3fd2 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    3f08:	47 30       	cpi	r20, 0x07	; 7
    3f0a:	51 05       	cpc	r21, r1
    3f0c:	08 f0       	brcs	.+2      	; 0x3f10 <nrk_gpio_direction+0xe8>
    3f0e:	64 c0       	rjmp	.+200    	; 0x3fd8 <nrk_gpio_direction+0x1b0>
    3f10:	fa 01       	movw	r30, r20
    3f12:	ed 54       	subi	r30, 0x4D	; 77
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	86 95       	lsr	r24
    3f18:	86 95       	lsr	r24
    3f1a:	86 95       	lsr	r24
    3f1c:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    3f20:	41 b1       	in	r20, 0x01	; 1
    3f22:	21 e0       	ldi	r18, 0x01	; 1
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	b9 01       	movw	r22, r18
    3f28:	02 c0       	rjmp	.+4      	; 0x3f2e <nrk_gpio_direction+0x106>
    3f2a:	66 0f       	add	r22, r22
    3f2c:	77 1f       	adc	r23, r23
    3f2e:	8a 95       	dec	r24
    3f30:	e2 f7       	brpl	.-8      	; 0x3f2a <nrk_gpio_direction+0x102>
    3f32:	cb 01       	movw	r24, r22
    3f34:	84 2b       	or	r24, r20
    3f36:	81 b9       	out	0x01, r24	; 1
    3f38:	4d c0       	rjmp	.+154    	; 0x3fd4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    3f3a:	44 b1       	in	r20, 0x04	; 4
    3f3c:	21 e0       	ldi	r18, 0x01	; 1
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	b9 01       	movw	r22, r18
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <nrk_gpio_direction+0x120>
    3f44:	66 0f       	add	r22, r22
    3f46:	77 1f       	adc	r23, r23
    3f48:	8a 95       	dec	r24
    3f4a:	e2 f7       	brpl	.-8      	; 0x3f44 <nrk_gpio_direction+0x11c>
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	84 2b       	or	r24, r20
    3f50:	84 b9       	out	0x04, r24	; 4
    3f52:	40 c0       	rjmp	.+128    	; 0x3fd4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    3f54:	47 b1       	in	r20, 0x07	; 7
    3f56:	21 e0       	ldi	r18, 0x01	; 1
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	b9 01       	movw	r22, r18
    3f5c:	02 c0       	rjmp	.+4      	; 0x3f62 <nrk_gpio_direction+0x13a>
    3f5e:	66 0f       	add	r22, r22
    3f60:	77 1f       	adc	r23, r23
    3f62:	8a 95       	dec	r24
    3f64:	e2 f7       	brpl	.-8      	; 0x3f5e <nrk_gpio_direction+0x136>
    3f66:	cb 01       	movw	r24, r22
    3f68:	84 2b       	or	r24, r20
    3f6a:	87 b9       	out	0x07, r24	; 7
    3f6c:	33 c0       	rjmp	.+102    	; 0x3fd4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    3f6e:	4a b1       	in	r20, 0x0a	; 10
    3f70:	21 e0       	ldi	r18, 0x01	; 1
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	b9 01       	movw	r22, r18
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <nrk_gpio_direction+0x154>
    3f78:	66 0f       	add	r22, r22
    3f7a:	77 1f       	adc	r23, r23
    3f7c:	8a 95       	dec	r24
    3f7e:	e2 f7       	brpl	.-8      	; 0x3f78 <nrk_gpio_direction+0x150>
    3f80:	cb 01       	movw	r24, r22
    3f82:	84 2b       	or	r24, r20
    3f84:	8a b9       	out	0x0a, r24	; 10
    3f86:	26 c0       	rjmp	.+76     	; 0x3fd4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    3f88:	4d b1       	in	r20, 0x0d	; 13
    3f8a:	21 e0       	ldi	r18, 0x01	; 1
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	b9 01       	movw	r22, r18
    3f90:	02 c0       	rjmp	.+4      	; 0x3f96 <nrk_gpio_direction+0x16e>
    3f92:	66 0f       	add	r22, r22
    3f94:	77 1f       	adc	r23, r23
    3f96:	8a 95       	dec	r24
    3f98:	e2 f7       	brpl	.-8      	; 0x3f92 <nrk_gpio_direction+0x16a>
    3f9a:	cb 01       	movw	r24, r22
    3f9c:	84 2b       	or	r24, r20
    3f9e:	8d b9       	out	0x0d, r24	; 13
    3fa0:	19 c0       	rjmp	.+50     	; 0x3fd4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    3fa2:	40 b3       	in	r20, 0x10	; 16
    3fa4:	21 e0       	ldi	r18, 0x01	; 1
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	b9 01       	movw	r22, r18
    3faa:	02 c0       	rjmp	.+4      	; 0x3fb0 <nrk_gpio_direction+0x188>
    3fac:	66 0f       	add	r22, r22
    3fae:	77 1f       	adc	r23, r23
    3fb0:	8a 95       	dec	r24
    3fb2:	e2 f7       	brpl	.-8      	; 0x3fac <nrk_gpio_direction+0x184>
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	84 2b       	or	r24, r20
    3fb8:	80 bb       	out	0x10, r24	; 16
    3fba:	0c c0       	rjmp	.+24     	; 0x3fd4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    3fbc:	43 b3       	in	r20, 0x13	; 19
    3fbe:	21 e0       	ldi	r18, 0x01	; 1
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	b9 01       	movw	r22, r18
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <nrk_gpio_direction+0x1a2>
    3fc6:	66 0f       	add	r22, r22
    3fc8:	77 1f       	adc	r23, r23
    3fca:	8a 95       	dec	r24
    3fcc:	e2 f7       	brpl	.-8      	; 0x3fc6 <nrk_gpio_direction+0x19e>
    3fce:	cb 01       	movw	r24, r22
    3fd0:	84 2b       	or	r24, r20
    3fd2:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    3fd6:	08 95       	ret
                        default: return -1;
    3fd8:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    3fda:	08 95       	ret

00003fdc <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    3fdc:	81 11       	cpse	r24, r1
    3fde:	06 c0       	rjmp	.+12     	; 0x3fec <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    3fe0:	80 b1       	in	r24, 0x00	; 0
    3fe2:	86 95       	lsr	r24
    3fe4:	81 70       	andi	r24, 0x01	; 1
    3fe6:	91 e0       	ldi	r25, 0x01	; 1
    3fe8:	89 27       	eor	r24, r25
    3fea:	08 95       	ret
	} 
return -1;
    3fec:	8f ef       	ldi	r24, 0xFF	; 255
}
    3fee:	08 95       	ret

00003ff0 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	11 f4       	brne	.+4      	; 0x3ff8 <nrk_led_toggle+0x8>
    3ff4:	83 e2       	ldi	r24, 0x23	; 35
    3ff6:	0d c0       	rjmp	.+26     	; 0x4012 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    3ff8:	81 30       	cpi	r24, 0x01	; 1
    3ffa:	91 05       	cpc	r25, r1
    3ffc:	11 f4       	brne	.+4      	; 0x4002 <nrk_led_toggle+0x12>
    3ffe:	8b e2       	ldi	r24, 0x2B	; 43
    4000:	08 c0       	rjmp	.+16     	; 0x4012 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    4002:	82 30       	cpi	r24, 0x02	; 2
    4004:	91 05       	cpc	r25, r1
    4006:	11 f4       	brne	.+4      	; 0x400c <nrk_led_toggle+0x1c>
    4008:	83 e3       	ldi	r24, 0x33	; 51
    400a:	03 c0       	rjmp	.+6      	; 0x4012 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    400c:	03 97       	sbiw	r24, 0x03	; 3
    400e:	29 f4       	brne	.+10     	; 0x401a <nrk_led_toggle+0x2a>
    4010:	8b e3       	ldi	r24, 0x3B	; 59
    4012:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <nrk_gpio_toggle>
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	08 95       	ret
return -1;
    401a:	8f ef       	ldi	r24, 0xFF	; 255
}
    401c:	08 95       	ret

0000401e <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    401e:	00 97       	sbiw	r24, 0x00	; 0
    4020:	11 f4       	brne	.+4      	; 0x4026 <nrk_led_clr+0x8>
    4022:	83 e2       	ldi	r24, 0x23	; 35
    4024:	0d c0       	rjmp	.+26     	; 0x4040 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    4026:	81 30       	cpi	r24, 0x01	; 1
    4028:	91 05       	cpc	r25, r1
    402a:	11 f4       	brne	.+4      	; 0x4030 <nrk_led_clr+0x12>
    402c:	8b e2       	ldi	r24, 0x2B	; 43
    402e:	08 c0       	rjmp	.+16     	; 0x4040 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    4030:	82 30       	cpi	r24, 0x02	; 2
    4032:	91 05       	cpc	r25, r1
    4034:	11 f4       	brne	.+4      	; 0x403a <nrk_led_clr+0x1c>
    4036:	83 e3       	ldi	r24, 0x33	; 51
    4038:	03 c0       	rjmp	.+6      	; 0x4040 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    403a:	03 97       	sbiw	r24, 0x03	; 3
    403c:	29 f4       	brne	.+10     	; 0x4048 <nrk_led_clr+0x2a>
    403e:	8b e3       	ldi	r24, 0x3B	; 59
    4040:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <nrk_gpio_set>
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	08 95       	ret
return -1;
    4048:	8f ef       	ldi	r24, 0xFF	; 255
}
    404a:	08 95       	ret

0000404c <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	11 f4       	brne	.+4      	; 0x4054 <nrk_led_set+0x8>
    4050:	83 e2       	ldi	r24, 0x23	; 35
    4052:	0d c0       	rjmp	.+26     	; 0x406e <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    4054:	81 30       	cpi	r24, 0x01	; 1
    4056:	91 05       	cpc	r25, r1
    4058:	11 f4       	brne	.+4      	; 0x405e <nrk_led_set+0x12>
    405a:	8b e2       	ldi	r24, 0x2B	; 43
    405c:	08 c0       	rjmp	.+16     	; 0x406e <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    405e:	82 30       	cpi	r24, 0x02	; 2
    4060:	91 05       	cpc	r25, r1
    4062:	11 f4       	brne	.+4      	; 0x4068 <nrk_led_set+0x1c>
    4064:	83 e3       	ldi	r24, 0x33	; 51
    4066:	03 c0       	rjmp	.+6      	; 0x406e <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    4068:	03 97       	sbiw	r24, 0x03	; 3
    406a:	29 f4       	brne	.+10     	; 0x4076 <nrk_led_set+0x2a>
    406c:	8b e3       	ldi	r24, 0x3B	; 59
    406e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <nrk_gpio_clr>
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	08 95       	ret
return -1;
    4076:	8f ef       	ldi	r24, 0xFF	; 255
}
    4078:	08 95       	ret

0000407a <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    407a:	88 23       	and	r24, r24
    407c:	19 f0       	breq	.+6      	; 0x4084 <nrk_gpio_pullups+0xa>
    407e:	85 b7       	in	r24, 0x35	; 53
    4080:	8f 7e       	andi	r24, 0xEF	; 239
    4082:	02 c0       	rjmp	.+4      	; 0x4088 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    4084:	85 b7       	in	r24, 0x35	; 53
    4086:	80 61       	ori	r24, 0x10	; 16
    4088:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    408a:	81 e0       	ldi	r24, 0x01	; 1
    408c:	08 95       	ret

0000408e <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    408e:	90 91 c8 00 	lds	r25, 0x00C8
    4092:	95 ff       	sbrs	r25, 5
    4094:	fc cf       	rjmp	.-8      	; 0x408e <putc1>
    4096:	80 93 ce 00 	sts	0x00CE, r24
    409a:	08 95       	ret

0000409c <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    409c:	90 93 c5 00 	sts	0x00C5, r25
    40a0:	80 93 c4 00 	sts	0x00C4, r24
    40a4:	86 e0       	ldi	r24, 0x06	; 6
    40a6:	80 93 c2 00 	sts	0x00C2, r24
    40aa:	e1 ec       	ldi	r30, 0xC1	; 193
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	8b 7f       	andi	r24, 0xFB	; 251
    40b2:	80 83       	st	Z, r24
    40b4:	a0 ec       	ldi	r26, 0xC0	; 192
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	8c 91       	ld	r24, X
    40ba:	82 60       	ori	r24, 0x02	; 2
    40bc:	8c 93       	st	X, r24
ENABLE_UART0();
    40be:	80 81       	ld	r24, Z
    40c0:	88 61       	ori	r24, 0x18	; 24
    40c2:	80 83       	st	Z, r24
    40c4:	08 95       	ret

000040c6 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    40c6:	90 93 cd 00 	sts	0x00CD, r25
    40ca:	80 93 cc 00 	sts	0x00CC, r24
    40ce:	86 e0       	ldi	r24, 0x06	; 6
    40d0:	80 93 ca 00 	sts	0x00CA, r24
    40d4:	e9 ec       	ldi	r30, 0xC9	; 201
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	80 81       	ld	r24, Z
    40da:	8b 7f       	andi	r24, 0xFB	; 251
    40dc:	80 83       	st	Z, r24
    40de:	a8 ec       	ldi	r26, 0xC8	; 200
    40e0:	b0 e0       	ldi	r27, 0x00	; 0
    40e2:	8c 91       	ld	r24, X
    40e4:	82 60       	ori	r24, 0x02	; 2
    40e6:	8c 93       	st	X, r24
ENABLE_UART1();
    40e8:	80 81       	ld	r24, Z
    40ea:	88 61       	ori	r24, 0x18	; 24
    40ec:	80 83       	st	Z, r24
    40ee:	08 95       	ret

000040f0 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    40f0:	0e 94 4e 20 	call	0x409c	; 0x409c <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    40f4:	63 ec       	ldi	r22, 0xC3	; 195
    40f6:	7c e1       	ldi	r23, 0x1C	; 28
    40f8:	8c e2       	ldi	r24, 0x2C	; 44
    40fa:	9c e1       	ldi	r25, 0x1C	; 28
    40fc:	0e 94 2f 3a 	call	0x745e	; 0x745e <fdevopen>
    4100:	90 93 73 17 	sts	0x1773, r25
    4104:	80 93 72 17 	sts	0x1772, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    4108:	63 ec       	ldi	r22, 0xC3	; 195
    410a:	7c e1       	ldi	r23, 0x1C	; 28
    410c:	8c e2       	ldi	r24, 0x2C	; 44
    410e:	9c e1       	ldi	r25, 0x1C	; 28
    4110:	0e 94 2f 3a 	call	0x745e	; 0x745e <fdevopen>
    4114:	90 93 71 17 	sts	0x1771, r25
    4118:	80 93 70 17 	sts	0x1770, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    411c:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <nrk_signal_create>
    4120:	80 93 34 05 	sts	0x0534, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    4124:	8f 3f       	cpi	r24, 0xFF	; 255
    4126:	19 f4       	brne	.+6      	; 0x412e <nrk_setup_uart+0x3e>
    4128:	8e e0       	ldi	r24, 0x0E	; 14
    412a:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_error_add>
   uart_rx_buf_start=0;
    412e:	10 92 48 05 	sts	0x0548, r1
    4132:	10 92 47 05 	sts	0x0547, r1
   uart_rx_buf_end=0;
    4136:	10 92 46 05 	sts	0x0546, r1
    413a:	10 92 45 05 	sts	0x0545, r1
   ENABLE_UART0_RX_INT();
    413e:	80 91 c1 00 	lds	r24, 0x00C1
    4142:	80 68       	ori	r24, 0x80	; 128
    4144:	80 93 c1 00 	sts	0x00C1, r24
    4148:	08 95       	ret

0000414a <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    414a:	80 91 c8 00 	lds	r24, 0x00C8
    414e:	87 ff       	sbrs	r24, 7
    4150:	fc cf       	rjmp	.-8      	; 0x414a <getc1>
    4152:	80 91 c8 00 	lds	r24, 0x00C8
    4156:	8f 77       	andi	r24, 0x7F	; 127
    4158:	80 93 c8 00 	sts	0x00C8, r24
    415c:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    4160:	08 95       	ret

00004162 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	d1 f7       	brne	.-12     	; 0x4162 <halWait>

} // halWait
    416e:	08 95       	ret

00004170 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    4170:	0c 94 8a 3b 	jmp	0x7714	; 0x7714 <__eerd_byte_m128rfa1>

00004174 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    4174:	0e 94 92 3b 	call	0x7724	; 0x7724 <__eewr_byte_m128rfa1>
}
    4178:	08 95       	ret

0000417a <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    417a:	ef 92       	push	r14
    417c:	ff 92       	push	r15
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	cf 93       	push	r28
    4184:	df 93       	push	r29
    4186:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    4190:	18 2f       	mov	r17, r24
    4192:	f7 01       	movw	r30, r14
    4194:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    419e:	08 2f       	mov	r16, r24
    41a0:	f7 01       	movw	r30, r14
    41a2:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    41a4:	82 e0       	ldi	r24, 0x02	; 2
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    41ac:	d8 2f       	mov	r29, r24
    41ae:	f7 01       	movw	r30, r14
    41b0:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    41b2:	83 e0       	ldi	r24, 0x03	; 3
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    41ba:	c8 2f       	mov	r28, r24
    41bc:	f7 01       	movw	r30, r14
    41be:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    41c0:	84 e0       	ldi	r24, 0x04	; 4
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    41c8:	10 0f       	add	r17, r16
    41ca:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    41cc:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    41ce:	8c 17       	cp	r24, r28
    41d0:	11 f0       	breq	.+4      	; 0x41d6 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    41d2:	8f ef       	ldi	r24, 0xFF	; 255
    41d4:	01 c0       	rjmp	.+2      	; 0x41d8 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    41d6:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	1f 91       	pop	r17
    41de:	0f 91       	pop	r16
    41e0:	ff 90       	pop	r15
    41e2:	ef 90       	pop	r14
    41e4:	08 95       	ret

000041e6 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    41ec:	85 e0       	ldi	r24, 0x05	; 5
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    41f4:	88 83       	st	Y, r24
return NRK_OK;
}
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	df 91       	pop	r29
    41fa:	cf 91       	pop	r28
    41fc:	08 95       	ret

000041fe <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    41fe:	fc 01       	movw	r30, r24
    4200:	60 81       	ld	r22, Z
    4202:	86 e0       	ldi	r24, 0x06	; 6
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	0e 94 92 3b 	call	0x7724	; 0x7724 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	08 95       	ret

0000420e <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    4214:	86 e0       	ldi	r24, 0x06	; 6
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    421c:	88 83       	st	Y, r24
  return NRK_OK;
}
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	df 91       	pop	r29
    4222:	cf 91       	pop	r28
    4224:	08 95       	ret

00004226 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	8c 01       	movw	r16, r24
    4230:	c0 e0       	ldi	r28, 0x00	; 0
    4232:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    4234:	ce 01       	movw	r24, r28
    4236:	08 96       	adiw	r24, 0x08	; 8
    4238:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    423c:	f8 01       	movw	r30, r16
    423e:	81 93       	st	Z+, r24
    4240:	8f 01       	movw	r16, r30
    4242:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    4244:	c0 31       	cpi	r28, 0x10	; 16
    4246:	d1 05       	cpc	r29, r1
    4248:	a9 f7       	brne	.-22     	; 0x4234 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	0f 91       	pop	r16
    4254:	08 95       	ret

00004256 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	8c 01       	movw	r16, r24
    4260:	c0 e0       	ldi	r28, 0x00	; 0
    4262:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    4264:	f8 01       	movw	r30, r16
    4266:	61 91       	ld	r22, Z+
    4268:	8f 01       	movw	r16, r30
    426a:	ce 01       	movw	r24, r28
    426c:	08 96       	adiw	r24, 0x08	; 8
    426e:	0e 94 92 3b 	call	0x7724	; 0x7724 <__eewr_byte_m128rfa1>
    4272:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    4274:	c0 31       	cpi	r28, 0x10	; 16
    4276:	d1 05       	cpc	r29, r1
    4278:	a9 f7       	brne	.-22     	; 0x4264 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	08 95       	ret

00004286 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    4286:	cf 93       	push	r28
    4288:	df 93       	push	r29
    428a:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    428c:	87 e0       	ldi	r24, 0x07	; 7
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	0e 94 8a 3b 	call	0x7714	; 0x7714 <__eerd_byte_m128rfa1>
    4294:	88 83       	st	Y, r24
  return NRK_OK;
}
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	08 95       	ret

0000429e <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    429e:	fc 01       	movw	r30, r24
    42a0:	60 81       	ld	r22, Z
    42a2:	87 e0       	ldi	r24, 0x07	; 7
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 92 3b 	call	0x7724	; 0x7724 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	08 95       	ret

000042ae <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    42ae:	f8 94       	cli
    42b0:	08 95       	ret

000042b2 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    42b2:	78 94       	sei
    42b4:	08 95       	ret

000042b6 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    42b6:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
while(1);
    42ba:	ff cf       	rjmp	.-2      	; 0x42ba <nrk_halt+0x4>

000042bc <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    42bc:	1f 93       	push	r17
    42be:	cf 93       	push	r28
    42c0:	df 93       	push	r29
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
    42c6:	a3 97       	sbiw	r28, 0x23	; 35
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	f8 94       	cli
    42cc:	de bf       	out	0x3e, r29	; 62
    42ce:	0f be       	out	0x3f, r0	; 63
    42d0:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    42d2:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <nrk_signal_create>
    42d6:	80 93 26 17 	sts	0x1726, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    42da:	8f 3f       	cpi	r24, 0xFF	; 255
    42dc:	21 f4       	brne	.+8      	; 0x42e6 <nrk_init+0x2a>
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	8e e0       	ldi	r24, 0x0E	; 14
    42e2:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    42e6:	0e 94 f2 33 	call	0x67e4	; 0x67e4 <_nrk_startup_error>
    42ea:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    42ec:	80 ff       	sbrs	r24, 0
    42ee:	04 c0       	rjmp	.+8      	; 0x42f8 <nrk_init+0x3c>
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	86 e0       	ldi	r24, 0x06	; 6
    42f4:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    42f8:	11 ff       	sbrs	r17, 1
    42fa:	04 c0       	rjmp	.+8      	; 0x4304 <nrk_init+0x48>
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	84 e1       	ldi	r24, 0x14	; 20
    4300:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    4304:	12 ff       	sbrs	r17, 2
    4306:	04 c0       	rjmp	.+8      	; 0x4310 <nrk_init+0x54>
    4308:	60 e0       	ldi	r22, 0x00	; 0
    430a:	83 e1       	ldi	r24, 0x13	; 19
    430c:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    4310:	10 92 29 17 	sts	0x1729, r1
    nrk_cur_task_TCB = NULL;
    4314:	10 92 37 17 	sts	0x1737, r1
    4318:	10 92 36 17 	sts	0x1736, r1
    
    nrk_high_ready_TCB = NULL;
    431c:	10 92 28 17 	sts	0x1728, r1
    4320:	10 92 27 17 	sts	0x1727, r1
    nrk_high_ready_prio = 0; 
    4324:	10 92 38 17 	sts	0x1738, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    4328:	10 92 35 17 	sts	0x1735, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    432c:	8f ef       	ldi	r24, 0xFF	; 255
    432e:	80 93 1f 17 	sts	0x171F, r24
    nrk_sem_list[i].value=-1;
    4332:	80 93 21 17 	sts	0x1721, r24
    nrk_sem_list[i].resource_ceiling=-1;
    4336:	80 93 20 17 	sts	0x1720, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    433a:	80 93 22 17 	sts	0x1722, r24
    nrk_sem_list[i].value=-1;
    433e:	80 93 24 17 	sts	0x1724, r24
    nrk_sem_list[i].resource_ceiling=-1;
    4342:	80 93 23 17 	sts	0x1723, r24
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    434a:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    434c:	2f ef       	ldi	r18, 0xFF	; 255
    434e:	fc 01       	movw	r30, r24
    4350:	e0 51       	subi	r30, 0x10	; 16
    4352:	fa 4e       	sbci	r31, 0xEA	; 234
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    4354:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    4356:	20 87       	std	Z+8, r18	; 0x08
    4358:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    435a:	8d 32       	cpi	r24, 0x2D	; 45
    435c:	41 e0       	ldi	r20, 0x01	; 1
    435e:	94 07       	cpc	r25, r20
    4360:	b1 f7       	brne	.-20     	; 0x434e <nrk_init+0x92>
    4362:	e9 e3       	ldi	r30, 0x39	; 57
    4364:	f7 e1       	ldi	r31, 0x17	; 23
    4366:	cf 01       	movw	r24, r30
    4368:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    436a:	94 83       	std	Z+4, r25	; 0x04
    436c:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    436e:	f7 83       	std	Z+7, r31	; 0x07
    4370:	e6 83       	std	Z+6, r30	; 0x06
    4372:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    4374:	87 e1       	ldi	r24, 0x17	; 23
    4376:	ec 35       	cpi	r30, 0x5C	; 92
    4378:	f8 07       	cpc	r31, r24
    437a:	a9 f7       	brne	.-22     	; 0x4366 <nrk_init+0xaa>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    437c:	10 92 3b 17 	sts	0x173B, r1
    4380:	10 92 3a 17 	sts	0x173A, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    4384:	10 92 60 17 	sts	0x1760, r1
    4388:	10 92 5f 17 	sts	0x175F, r1
	_head_node = NULL;
    438c:	10 92 2c 17 	sts	0x172C, r1
    4390:	10 92 2b 17 	sts	0x172B, r1
	_free_node = &_nrk_readyQ[0];
    4394:	89 e3       	ldi	r24, 0x39	; 57
    4396:	97 e1       	ldi	r25, 0x17	; 23
    4398:	90 93 ef 15 	sts	0x15EF, r25
    439c:	80 93 ee 15 	sts	0x15EE, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    43a0:	6b e5       	ldi	r22, 0x5B	; 91
    43a2:	7e e2       	ldi	r23, 0x2E	; 46
    43a4:	ce 01       	movw	r24, r28
    43a6:	01 96       	adiw	r24, 0x01	; 1
    43a8:	0e 94 2a 36 	call	0x6c54	; 0x6c54 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	52 e0       	ldi	r21, 0x02	; 2
    43b0:	68 e4       	ldi	r22, 0x48	; 72
    43b2:	73 e1       	ldi	r23, 0x13	; 19
    43b4:	ce 01       	movw	r24, r28
    43b6:	01 96       	adiw	r24, 0x01	; 1
    43b8:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    43bc:	85 e5       	ldi	r24, 0x55	; 85
    43be:	80 93 48 13 	sts	0x1348, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    43c2:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    43c4:	1c 86       	std	Y+12, r1	; 0x0c
    43c6:	1d 86       	std	Y+13, r1	; 0x0d
    43c8:	1e 86       	std	Y+14, r1	; 0x0e
    43ca:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    43cc:	18 8a       	std	Y+16, r1	; 0x10
    43ce:	19 8a       	std	Y+17, r1	; 0x11
    43d0:	1a 8a       	std	Y+18, r1	; 0x12
    43d2:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    43d4:	1c 8a       	std	Y+20, r1	; 0x14
    43d6:	1d 8a       	std	Y+21, r1	; 0x15
    43d8:	1e 8a       	std	Y+22, r1	; 0x16
    43da:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    43dc:	18 8e       	std	Y+24, r1	; 0x18
    43de:	19 8e       	std	Y+25, r1	; 0x19
    43e0:	1a 8e       	std	Y+26, r1	; 0x1a
    43e2:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    43e4:	1c 8e       	std	Y+28, r1	; 0x1c
    43e6:	1d 8e       	std	Y+29, r1	; 0x1d
    43e8:	1e 8e       	std	Y+30, r1	; 0x1e
    43ea:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    43ec:	18 a2       	std	Y+32, r1	; 0x20
    43ee:	19 a2       	std	Y+33, r1	; 0x21
    43f0:	1a a2       	std	Y+34, r1	; 0x22
    43f2:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    43f8:	92 e0       	ldi	r25, 0x02	; 2
    43fa:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    43fc:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    43fe:	ce 01       	movw	r24, r28
    4400:	01 96       	adiw	r24, 0x01	; 1
    4402:	0e 94 90 29 	call	0x5320	; 0x5320 <nrk_activate_task>
	
}
    4406:	a3 96       	adiw	r28, 0x23	; 35
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	08 95       	ret

0000441a <nrk_start>:




void nrk_start (void)
{
    441a:	08 ef       	ldi	r16, 0xF8	; 248
    441c:	15 e1       	ldi	r17, 0x15	; 21
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    441e:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    4420:	f8 01       	movw	r30, r16
    4422:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    4424:	ff ef       	ldi	r31, 0xFF	; 255
    4426:	df 12       	cpse	r13, r31
    4428:	22 c0       	rjmp	.+68     	; 0x446e <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    442a:	cf 5f       	subi	r28, 0xFF	; 255
    442c:	05 5d       	subi	r16, 0xD5	; 213
    442e:	1f 4f       	sbci	r17, 0xFF	; 255
    4430:	c7 30       	cpi	r28, 0x07	; 7
    4432:	b1 f7       	brne	.-20     	; 0x4420 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    4434:	0e 94 7f 28 	call	0x50fe	; 0x50fe <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4438:	2b e2       	ldi	r18, 0x2B	; 43
    443a:	82 02       	muls	r24, r18
    443c:	c0 01       	movw	r24, r0
    443e:	11 24       	eor	r1, r1
    4440:	fc 01       	movw	r30, r24
    4442:	e0 51       	subi	r30, 0x10	; 16
    4444:	fa 4e       	sbci	r31, 0xEA	; 234
    4446:	82 85       	ldd	r24, Z+10	; 0x0a
    4448:	80 93 38 17 	sts	0x1738, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    444c:	f0 93 37 17 	sts	0x1737, r31
    4450:	e0 93 36 17 	sts	0x1736, r30
    4454:	f0 93 28 17 	sts	0x1728, r31
    4458:	e0 93 27 17 	sts	0x1727, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    445c:	80 93 29 17 	sts	0x1729, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    4460:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <nrk_target_start>
    nrk_stack_pointer_init(); 
    4464:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    4468:	0e 94 a4 36 	call	0x6d48	; 0x6d48 <nrk_start_high_ready_task>
    446c:	16 c0       	rjmp	.+44     	; 0x449a <nrk_start+0x80>
    446e:	88 ef       	ldi	r24, 0xF8	; 248
    4470:	e8 2e       	mov	r14, r24
    4472:	85 e1       	ldi	r24, 0x15	; 21
    4474:	f8 2e       	mov	r15, r24
    4476:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    4478:	cd 17       	cp	r28, r29
    447a:	41 f0       	breq	.+16     	; 0x448c <nrk_start+0x72>
    447c:	f7 01       	movw	r30, r14
    447e:	80 81       	ld	r24, Z
    4480:	d8 12       	cpse	r13, r24
    4482:	04 c0       	rjmp	.+8      	; 0x448c <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    4484:	6d 2d       	mov	r22, r13
    4486:	85 e0       	ldi	r24, 0x05	; 5
    4488:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    448c:	df 5f       	subi	r29, 0xFF	; 255
    448e:	fb e2       	ldi	r31, 0x2B	; 43
    4490:	ef 0e       	add	r14, r31
    4492:	f1 1c       	adc	r15, r1
    4494:	d7 30       	cpi	r29, 0x07	; 7
    4496:	81 f7       	brne	.-32     	; 0x4478 <nrk_start+0x5e>
    4498:	c8 cf       	rjmp	.-112    	; 0x442a <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    449a:	ff cf       	rjmp	.-2      	; 0x449a <nrk_start+0x80>

0000449c <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    449c:	cf 92       	push	r12
    449e:	df 92       	push	r13
    44a0:	ef 92       	push	r14
    44a2:	ff 92       	push	r15
    44a4:	0f 93       	push	r16
    44a6:	1f 93       	push	r17
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	ec 01       	movw	r28, r24
    44ae:	8b 01       	movw	r16, r22
    44b0:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    44b2:	89 85       	ldd	r24, Y+9	; 0x09
    44b4:	82 30       	cpi	r24, 0x02	; 2
    44b6:	21 f0       	breq	.+8      	; 0x44c0 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    44b8:	80 91 25 17 	lds	r24, 0x1725
    44bc:	88 83       	st	Y, r24
    44be:	01 c0       	rjmp	.+2      	; 0x44c2 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    44c0:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    44c2:	80 91 25 17 	lds	r24, 0x1725
    44c6:	87 30       	cpi	r24, 0x07	; 7
    44c8:	20 f0       	brcs	.+8      	; 0x44d2 <nrk_TCB_init+0x36>
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	87 e0       	ldi	r24, 0x07	; 7
    44ce:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    44d2:	89 85       	ldd	r24, Y+9	; 0x09
    44d4:	82 30       	cpi	r24, 0x02	; 2
    44d6:	29 f0       	breq	.+10     	; 0x44e2 <nrk_TCB_init+0x46>
    44d8:	80 91 25 17 	lds	r24, 0x1725
    44dc:	8f 5f       	subi	r24, 0xFF	; 255
    44de:	80 93 25 17 	sts	0x1725, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    44e2:	80 91 25 17 	lds	r24, 0x1725
    44e6:	81 11       	cpse	r24, r1
    44e8:	03 c0       	rjmp	.+6      	; 0x44f0 <nrk_TCB_init+0x54>
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	80 93 25 17 	sts	0x1725, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    44f0:	38 81       	ld	r19, Y
    44f2:	2b e2       	ldi	r18, 0x2B	; 43
    44f4:	32 03       	mulsu	r19, r18
    44f6:	f0 01       	movw	r30, r0
    44f8:	11 24       	eor	r1, r1
    44fa:	e0 51       	subi	r30, 0x10	; 16
    44fc:	fa 4e       	sbci	r31, 0xEA	; 234
    44fe:	11 83       	std	Z+1, r17	; 0x01
    4500:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    4502:	88 85       	ldd	r24, Y+8	; 0x08
    4504:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    4506:	38 81       	ld	r19, Y
    4508:	32 03       	mulsu	r19, r18
    450a:	f0 01       	movw	r30, r0
    450c:	11 24       	eor	r1, r1
    450e:	e0 51       	subi	r30, 0x10	; 16
    4510:	fa 4e       	sbci	r31, 0xEA	; 234
    4512:	83 e0       	ldi	r24, 0x03	; 3
    4514:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    4516:	38 81       	ld	r19, Y
    4518:	32 03       	mulsu	r19, r18
    451a:	f0 01       	movw	r30, r0
    451c:	11 24       	eor	r1, r1
    451e:	e0 51       	subi	r30, 0x10	; 16
    4520:	fa 4e       	sbci	r31, 0xEA	; 234
    4522:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    4524:	08 81       	ld	r16, Y
    4526:	02 03       	mulsu	r16, r18
    4528:	80 01       	movw	r16, r0
    452a:	11 24       	eor	r1, r1
    452c:	00 51       	subi	r16, 0x10	; 16
    452e:	1a 4e       	sbci	r17, 0xEA	; 234
    4530:	f8 01       	movw	r30, r16
    4532:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    4534:	ce 01       	movw	r24, r28
    4536:	0b 96       	adiw	r24, 0x0b	; 11
    4538:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <_nrk_time_to_ticks_long>
    453c:	f8 01       	movw	r30, r16
    453e:	61 a3       	std	Z+33, r22	; 0x21
    4540:	72 a3       	std	Z+34, r23	; 0x22
    4542:	83 a3       	std	Z+35, r24	; 0x23
    4544:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    4546:	8b 85       	ldd	r24, Y+11	; 0x0b
    4548:	9c 85       	ldd	r25, Y+12	; 0x0c
    454a:	ad 85       	ldd	r26, Y+13	; 0x0d
    454c:	be 85       	ldd	r27, Y+14	; 0x0e
    454e:	88 33       	cpi	r24, 0x38	; 56
    4550:	99 48       	sbci	r25, 0x89	; 137
    4552:	a1 44       	sbci	r26, 0x41	; 65
    4554:	b1 05       	cpc	r27, r1
    4556:	20 f0       	brcs	.+8      	; 0x4560 <nrk_TCB_init+0xc4>
    4558:	68 81       	ld	r22, Y
    455a:	86 e1       	ldi	r24, 0x16	; 22
    455c:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    4560:	c8 80       	ld	r12, Y
    4562:	dd 24       	eor	r13, r13
    4564:	c7 fc       	sbrc	r12, 7
    4566:	d0 94       	com	r13
    4568:	ce 01       	movw	r24, r28
    456a:	4b 96       	adiw	r24, 0x1b	; 27
    456c:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <_nrk_time_to_ticks_long>
    4570:	1b e2       	ldi	r17, 0x2B	; 43
    4572:	1c 9d       	mul	r17, r12
    4574:	f0 01       	movw	r30, r0
    4576:	1d 9d       	mul	r17, r13
    4578:	f0 0d       	add	r31, r0
    457a:	11 24       	eor	r1, r1
    457c:	e0 51       	subi	r30, 0x10	; 16
    457e:	fa 4e       	sbci	r31, 0xEA	; 234
    4580:	65 8b       	std	Z+21, r22	; 0x15
    4582:	76 8b       	std	Z+22, r23	; 0x16
    4584:	87 8b       	std	Z+23, r24	; 0x17
    4586:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    4588:	28 81       	ld	r18, Y
    458a:	21 03       	mulsu	r18, r17
    458c:	c0 01       	movw	r24, r0
    458e:	11 24       	eor	r1, r1
    4590:	9c 01       	movw	r18, r24
    4592:	20 51       	subi	r18, 0x10	; 16
    4594:	3a 4e       	sbci	r19, 0xEA	; 234
    4596:	69 01       	movw	r12, r18
    4598:	f9 01       	movw	r30, r18
    459a:	45 89       	ldd	r20, Z+21	; 0x15
    459c:	56 89       	ldd	r21, Z+22	; 0x16
    459e:	67 89       	ldd	r22, Z+23	; 0x17
    45a0:	70 8d       	ldd	r23, Z+24	; 0x18
    45a2:	81 a1       	ldd	r24, Z+33	; 0x21
    45a4:	92 a1       	ldd	r25, Z+34	; 0x22
    45a6:	a3 a1       	ldd	r26, Z+35	; 0x23
    45a8:	b4 a1       	ldd	r27, Z+36	; 0x24
    45aa:	84 0f       	add	r24, r20
    45ac:	95 1f       	adc	r25, r21
    45ae:	a6 1f       	adc	r26, r22
    45b0:	b7 1f       	adc	r27, r23
    45b2:	81 8f       	std	Z+25, r24	; 0x19
    45b4:	92 8f       	std	Z+26, r25	; 0x1a
    45b6:	a3 8f       	std	Z+27, r26	; 0x1b
    45b8:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    45ba:	ce 01       	movw	r24, r28
    45bc:	43 96       	adiw	r24, 0x13	; 19
    45be:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <_nrk_time_to_ticks_long>
    45c2:	f6 01       	movw	r30, r12
    45c4:	65 a3       	std	Z+37, r22	; 0x25
    45c6:	76 a3       	std	Z+38, r23	; 0x26
    45c8:	87 a3       	std	Z+39, r24	; 0x27
    45ca:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    45cc:	28 81       	ld	r18, Y
    45ce:	21 03       	mulsu	r18, r17
    45d0:	f0 01       	movw	r30, r0
    45d2:	11 24       	eor	r1, r1
    45d4:	e0 51       	subi	r30, 0x10	; 16
    45d6:	fa 4e       	sbci	r31, 0xEA	; 234
    45d8:	85 a1       	ldd	r24, Z+37	; 0x25
    45da:	96 a1       	ldd	r25, Z+38	; 0x26
    45dc:	a7 a1       	ldd	r26, Z+39	; 0x27
    45de:	b0 a5       	ldd	r27, Z+40	; 0x28
    45e0:	85 8f       	std	Z+29, r24	; 0x1d
    45e2:	96 8f       	std	Z+30, r25	; 0x1e
    45e4:	a7 8f       	std	Z+31, r26	; 0x1f
    45e6:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	92 a7       	std	Z+42, r25	; 0x2a
    45ee:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    45f0:	f3 82       	std	Z+3, r15	; 0x03
    45f2:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    45f4:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	ff 90       	pop	r15
    4600:	ef 90       	pop	r14
    4602:	df 90       	pop	r13
    4604:	cf 90       	pop	r12
    4606:	08 95       	ret

00004608 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    4608:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <_nrk_scheduler>

0000460c <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    460c:	85 e6       	ldi	r24, 0x65	; 101
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	08 95       	ret

00004612 <_nrk_errno_set>:
    4612:	e0 91 36 17 	lds	r30, 0x1736
    4616:	f0 91 37 17 	lds	r31, 0x1737
    461a:	84 87       	std	Z+12, r24	; 0x0c
    461c:	08 95       	ret

0000461e <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    461e:	e0 91 36 17 	lds	r30, 0x1736
    4622:	f0 91 37 17 	lds	r31, 0x1737
}
    4626:	84 85       	ldd	r24, Z+12	; 0x0c
    4628:	08 95       	ret

0000462a <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    462a:	fc 01       	movw	r30, r24
    if (error_num == 0)
    462c:	80 91 24 13 	lds	r24, 0x1324
    4630:	88 23       	and	r24, r24
    4632:	31 f0       	breq	.+12     	; 0x4640 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    4634:	db 01       	movw	r26, r22
    4636:	8c 93       	st	X, r24
    *task_id = error_task;
    4638:	80 91 6e 05 	lds	r24, 0x056E
    463c:	80 83       	st	Z, r24
    return 1;
    463e:	81 e0       	ldi	r24, 0x01	; 1
}
    4640:	08 95       	ret

00004642 <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    4642:	80 91 24 13 	lds	r24, 0x1324
    4646:	88 23       	and	r24, r24
    4648:	09 f4       	brne	.+2      	; 0x464c <nrk_error_print+0xa>
    464a:	84 c0       	rjmp	.+264    	; 0x4754 <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    464c:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    4650:	8a e5       	ldi	r24, 0x5A	; 90
    4652:	95 e0       	ldi	r25, 0x05	; 5
    4654:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
        printf ("%d", error_task);
    4658:	80 91 6e 05 	lds	r24, 0x056E
    465c:	1f 92       	push	r1
    465e:	8f 93       	push	r24
    4660:	8c eb       	ldi	r24, 0xBC	; 188
    4662:	92 e0       	ldi	r25, 0x02	; 2
    4664:	9f 93       	push	r25
    4666:	8f 93       	push	r24
    4668:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
        nrk_kprintf (PSTR ("): "));
    466c:	86 e5       	ldi	r24, 0x56	; 86
    466e:	95 e0       	ldi	r25, 0x05	; 5
    4670:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    4674:	0f 90       	pop	r0
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	80 91 24 13 	lds	r24, 0x1324
    4680:	88 31       	cpi	r24, 0x18	; 24
    4682:	10 f0       	brcs	.+4      	; 0x4688 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    4684:	10 92 24 13 	sts	0x1324, r1
        switch (error_num)
    4688:	e0 91 24 13 	lds	r30, 0x1324
    468c:	8e 2f       	mov	r24, r30
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	fc 01       	movw	r30, r24
    4692:	31 97       	sbiw	r30, 0x01	; 1
    4694:	e6 31       	cpi	r30, 0x16	; 22
    4696:	f1 05       	cpc	r31, r1
    4698:	08 f0       	brcs	.+2      	; 0x469c <nrk_error_print+0x5a>
    469a:	46 c0       	rjmp	.+140    	; 0x4728 <nrk_error_print+0xe6>
    469c:	e6 54       	subi	r30, 0x46	; 70
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    46a4:	8a e1       	ldi	r24, 0x1A	; 26
    46a6:	95 e0       	ldi	r25, 0x05	; 5
    46a8:	41 c0       	rjmp	.+130    	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    46aa:	83 ef       	ldi	r24, 0xF3	; 243
    46ac:	94 e0       	ldi	r25, 0x04	; 4
    46ae:	3e c0       	rjmp	.+124    	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    46b0:	8f ed       	ldi	r24, 0xDF	; 223
    46b2:	94 e0       	ldi	r25, 0x04	; 4
    46b4:	3b c0       	rjmp	.+118    	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    46b6:	89 ec       	ldi	r24, 0xC9	; 201
    46b8:	94 e0       	ldi	r25, 0x04	; 4
    46ba:	38 c0       	rjmp	.+112    	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    46bc:	8e ea       	ldi	r24, 0xAE	; 174
    46be:	94 e0       	ldi	r25, 0x04	; 4
    46c0:	35 c0       	rjmp	.+106    	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    46c2:	88 e9       	ldi	r24, 0x98	; 152
    46c4:	94 e0       	ldi	r25, 0x04	; 4
    46c6:	32 c0       	rjmp	.+100    	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    46c8:	80 e8       	ldi	r24, 0x80	; 128
    46ca:	94 e0       	ldi	r25, 0x04	; 4
    46cc:	2f c0       	rjmp	.+94     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    46ce:	8d e6       	ldi	r24, 0x6D	; 109
    46d0:	94 e0       	ldi	r25, 0x04	; 4
    46d2:	2c c0       	rjmp	.+88     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    46d4:	8a e5       	ldi	r24, 0x5A	; 90
    46d6:	94 e0       	ldi	r25, 0x04	; 4
    46d8:	29 c0       	rjmp	.+82     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    46da:	8c e3       	ldi	r24, 0x3C	; 60
    46dc:	94 e0       	ldi	r25, 0x04	; 4
    46de:	26 c0       	rjmp	.+76     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    46e0:	87 e1       	ldi	r24, 0x17	; 23
    46e2:	94 e0       	ldi	r25, 0x04	; 4
    46e4:	23 c0       	rjmp	.+70     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    46e6:	8b e0       	ldi	r24, 0x0B	; 11
    46e8:	94 e0       	ldi	r25, 0x04	; 4
    46ea:	20 c0       	rjmp	.+64     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    46ec:	80 ef       	ldi	r24, 0xF0	; 240
    46ee:	93 e0       	ldi	r25, 0x03	; 3
    46f0:	1d c0       	rjmp	.+58     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    46f2:	81 ee       	ldi	r24, 0xE1	; 225
    46f4:	93 e0       	ldi	r25, 0x03	; 3
    46f6:	1a c0       	rjmp	.+52     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    46f8:	8d ec       	ldi	r24, 0xCD	; 205
    46fa:	93 e0       	ldi	r25, 0x03	; 3
    46fc:	17 c0       	rjmp	.+46     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    46fe:	8c eb       	ldi	r24, 0xBC	; 188
    4700:	93 e0       	ldi	r25, 0x03	; 3
    4702:	14 c0       	rjmp	.+40     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    4704:	88 ea       	ldi	r24, 0xA8	; 168
    4706:	93 e0       	ldi	r25, 0x03	; 3
    4708:	11 c0       	rjmp	.+34     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    470a:	88 e8       	ldi	r24, 0x88	; 136
    470c:	93 e0       	ldi	r25, 0x03	; 3
    470e:	0e c0       	rjmp	.+28     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    4710:	80 e7       	ldi	r24, 0x70	; 112
    4712:	93 e0       	ldi	r25, 0x03	; 3
    4714:	0b c0       	rjmp	.+22     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    4716:	85 e5       	ldi	r24, 0x55	; 85
    4718:	93 e0       	ldi	r25, 0x03	; 3
    471a:	08 c0       	rjmp	.+16     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    471c:	84 e4       	ldi	r24, 0x44	; 68
    471e:	93 e0       	ldi	r25, 0x03	; 3
    4720:	05 c0       	rjmp	.+10     	; 0x472c <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    4722:	85 e3       	ldi	r24, 0x35	; 53
    4724:	93 e0       	ldi	r25, 0x03	; 3
    4726:	02 c0       	rjmp	.+4      	; 0x472c <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    4728:	8e e2       	ldi	r24, 0x2E	; 46
    472a:	93 e0       	ldi	r25, 0x03	; 3
    472c:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>
        }
        putchar ('\r');
    4730:	60 91 72 17 	lds	r22, 0x1772
    4734:	70 91 73 17 	lds	r23, 0x1773
    4738:	8d e0       	ldi	r24, 0x0D	; 13
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
        putchar ('\n');
    4740:	60 91 72 17 	lds	r22, 0x1772
    4744:	70 91 73 17 	lds	r23, 0x1773
    4748:	8a e0       	ldi	r24, 0x0A	; 10
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    4750:	10 92 24 13 	sts	0x1324, r1
    return t;
}
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	08 95       	ret

00004758 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    4758:	80 93 24 13 	sts	0x1324, r24
    error_task = nrk_cur_task_TCB->task_ID;
    475c:	e0 91 36 17 	lds	r30, 0x1736
    4760:	f0 91 37 17 	lds	r31, 0x1737
    4764:	80 85       	ldd	r24, Z+8	; 0x08
    4766:	80 93 6e 05 	sts	0x056E, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    476a:	0c 94 21 23 	jmp	0x4642	; 0x4642 <nrk_error_print>

0000476e <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    476e:	80 93 24 13 	sts	0x1324, r24
    error_task = task;
    4772:	60 93 6e 05 	sts	0x056E, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    4776:	0c 94 21 23 	jmp	0x4642	; 0x4642 <nrk_error_print>

0000477a <pause>:
    }

}

void pause()
{
    477a:	cf 93       	push	r28
    477c:	df 93       	push	r29
    477e:	1f 92       	push	r1
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    4784:	19 82       	std	Y+1, r1	; 0x01
    4786:	89 81       	ldd	r24, Y+1	; 0x01
    4788:	84 36       	cpi	r24, 0x64	; 100
    478a:	40 f4       	brcc	.+16     	; 0x479c <pause+0x22>
        nrk_spin_wait_us (2000);
    478c:	80 ed       	ldi	r24, 0xD0	; 208
    478e:	97 e0       	ldi	r25, 0x07	; 7
    4790:	0e 94 28 32 	call	0x6450	; 0x6450 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    4794:	89 81       	ldd	r24, Y+1	; 0x01
    4796:	8f 5f       	subi	r24, 0xFF	; 255
    4798:	89 83       	std	Y+1, r24	; 0x01
    479a:	f5 cf       	rjmp	.-22     	; 0x4786 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    479c:	0f 90       	pop	r0
    479e:	df 91       	pop	r29
    47a0:	cf 91       	pop	r28
    47a2:	08 95       	ret

000047a4 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	0e 94 26 20 	call	0x404c	; 0x404c <nrk_led_set>
    pause();
    47ac:	0e 94 bd 23 	call	0x477a	; 0x477a <pause>
    pause();
    47b0:	0e 94 bd 23 	call	0x477a	; 0x477a <pause>
    pause();
    47b4:	0e 94 bd 23 	call	0x477a	; 0x477a <pause>
    nrk_led_clr(GREEN_LED);
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
    pause();
    47c0:	0c 94 bd 23 	jmp	0x477a	; 0x477a <pause>

000047c4 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    47c4:	81 e0       	ldi	r24, 0x01	; 1
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	0e 94 26 20 	call	0x404c	; 0x404c <nrk_led_set>
    pause();
    47cc:	0e 94 bd 23 	call	0x477a	; 0x477a <pause>
    nrk_led_clr(GREEN_LED);
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
    pause();
    47d8:	0c 94 bd 23 	jmp	0x477a	; 0x477a <pause>

000047dc <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    47dc:	ff 92       	push	r15
    47de:	0f 93       	push	r16
    47e0:	1f 93       	push	r17
    47e2:	cf 93       	push	r28
    47e4:	df 93       	push	r29
    47e6:	00 d0       	rcall	.+0      	; 0x47e8 <blink_morse_code_error+0xc>
    47e8:	1f 92       	push	r1
    47ea:	cd b7       	in	r28, 0x3d	; 61
    47ec:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    47ee:	1f 92       	push	r1
    47f0:	8f 93       	push	r24
    47f2:	8c eb       	ldi	r24, 0xBC	; 188
    47f4:	92 e0       	ldi	r25, 0x02	; 2
    47f6:	9f 93       	push	r25
    47f8:	8f 93       	push	r24
    47fa:	8e 01       	movw	r16, r28
    47fc:	0f 5f       	subi	r16, 0xFF	; 255
    47fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4800:	1f 93       	push	r17
    4802:	0f 93       	push	r16
    4804:	0e 94 fc 3a 	call	0x75f8	; 0x75f8 <sprintf>

    for(i=0; i<strlen(str); i++ )
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	0f 90       	pop	r0
    480e:	0f 90       	pop	r0
    4810:	0f 90       	pop	r0
    4812:	0f 90       	pop	r0
    4814:	f1 2c       	mov	r15, r1
    4816:	f8 01       	movw	r30, r16
    4818:	01 90       	ld	r0, Z+
    481a:	00 20       	and	r0, r0
    481c:	e9 f7       	brne	.-6      	; 0x4818 <blink_morse_code_error+0x3c>
    481e:	31 97       	sbiw	r30, 0x01	; 1
    4820:	e0 1b       	sub	r30, r16
    4822:	f1 0b       	sbc	r31, r17
    4824:	8f 2d       	mov	r24, r15
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	8e 17       	cp	r24, r30
    482a:	9f 07       	cpc	r25, r31
    482c:	08 f0       	brcs	.+2      	; 0x4830 <blink_morse_code_error+0x54>
    482e:	5d c0       	rjmp	.+186    	; 0x48ea <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    4830:	f8 01       	movw	r30, r16
    4832:	e8 0f       	add	r30, r24
    4834:	f9 1f       	adc	r31, r25
    4836:	e0 81       	ld	r30, Z
    4838:	8e 2f       	mov	r24, r30
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	fc 01       	movw	r30, r24
    483e:	f0 97       	sbiw	r30, 0x30	; 48
    4840:	ea 30       	cpi	r30, 0x0A	; 10
    4842:	f1 05       	cpc	r31, r1
    4844:	08 f0       	brcs	.+2      	; 0x4848 <blink_morse_code_error+0x6c>
    4846:	49 c0       	rjmp	.+146    	; 0x48da <blink_morse_code_error+0xfe>
    4848:	e0 53       	subi	r30, 0x30	; 48
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	0c 94 86 39 	jmp	0x730c	; 0x730c <__tablejump2__>
        {
        case '0':
            blink_dash();
    4850:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
    4854:	02 c0       	rjmp	.+4      	; 0x485a <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    4856:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            blink_dash();
    485a:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    485e:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    4862:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    4866:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            break;
    486a:	37 c0       	rjmp	.+110    	; 0x48da <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    486c:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            blink_dot();
    4870:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
    4874:	f4 cf       	rjmp	.-24     	; 0x485e <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    4876:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            blink_dot();
    487a:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            blink_dot();
    487e:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
    4882:	ef cf       	rjmp	.-34     	; 0x4862 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    4884:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            blink_dot();
    4888:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            blink_dot();
    488c:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            blink_dot();
    4890:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
    4894:	e8 cf       	rjmp	.-48     	; 0x4866 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    4896:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
    489a:	02 c0       	rjmp	.+4      	; 0x48a0 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    489c:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dot();
    48a0:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
    48a4:	04 c0       	rjmp	.+8      	; 0x48ae <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    48a6:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    48aa:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dot();
    48ae:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
    48b2:	06 c0       	rjmp	.+12     	; 0x48c0 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    48b4:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    48b8:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    48bc:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dot();
    48c0:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
    48c4:	08 c0       	rjmp	.+16     	; 0x48d6 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    48c6:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    48ca:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    48ce:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dash();
    48d2:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <blink_dash>
            blink_dot();
    48d6:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <blink_dot>
            break;
        }
        pause();
    48da:	0e 94 bd 23 	call	0x477a	; 0x477a <pause>
        pause();
    48de:	0e 94 bd 23 	call	0x477a	; 0x477a <pause>
        pause();
    48e2:	0e 94 bd 23 	call	0x477a	; 0x477a <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    48e6:	f3 94       	inc	r15
    48e8:	96 cf       	rjmp	.-212    	; 0x4816 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    48ea:	0f 90       	pop	r0
    48ec:	0f 90       	pop	r0
    48ee:	0f 90       	pop	r0
    48f0:	df 91       	pop	r29
    48f2:	cf 91       	pop	r28
    48f4:	1f 91       	pop	r17
    48f6:	0f 91       	pop	r16
    48f8:	ff 90       	pop	r15
    48fa:	08 95       	ret

000048fc <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    48fc:	6f 92       	push	r6
    48fe:	7f 92       	push	r7
    4900:	8f 92       	push	r8
    4902:	9f 92       	push	r9
    4904:	af 92       	push	r10
    4906:	bf 92       	push	r11
    4908:	cf 92       	push	r12
    490a:	df 92       	push	r13
    490c:	ef 92       	push	r14
    490e:	ff 92       	push	r15
    4910:	0f 93       	push	r16
    4912:	1f 93       	push	r17
    4914:	cf 93       	push	r28
    4916:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    4918:	86 e6       	ldi	r24, 0x66	; 102
    491a:	95 e0       	ldi	r25, 0x05	; 5
    491c:	0e 94 ae 1c 	call	0x395c	; 0x395c <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    4920:	e0 91 36 17 	lds	r30, 0x1736
    4924:	f0 91 37 17 	lds	r31, 0x1737
    4928:	80 85       	ldd	r24, Z+8	; 0x08
    492a:	28 2f       	mov	r18, r24
    492c:	33 27       	eor	r19, r19
    492e:	27 fd       	sbrc	r18, 7
    4930:	30 95       	com	r19
    4932:	3f 93       	push	r19
    4934:	8f 93       	push	r24
    4936:	8b e2       	ldi	r24, 0x2B	; 43
    4938:	94 e0       	ldi	r25, 0x04	; 4
    493a:	9f 93       	push	r25
    493c:	8f 93       	push	r24
    493e:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    4942:	e0 91 36 17 	lds	r30, 0x1736
    4946:	f0 91 37 17 	lds	r31, 0x1737
    494a:	c2 81       	ldd	r28, Z+2	; 0x02
    494c:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    494e:	df 93       	push	r29
    4950:	cf 93       	push	r28
    4952:	8f e5       	ldi	r24, 0x5F	; 95
    4954:	94 e0       	ldi	r25, 0x04	; 4
    4956:	9f 93       	push	r25
    4958:	8f 93       	push	r24
    495a:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    printf( "canary = %x ",*stkc );
    495e:	88 81       	ld	r24, Y
    4960:	1f 92       	push	r1
    4962:	8f 93       	push	r24
    4964:	84 e3       	ldi	r24, 0x34	; 52
    4966:	94 e0       	ldi	r25, 0x04	; 4
    4968:	9f 93       	push	r25
    496a:	8f 93       	push	r24
    496c:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    4970:	e0 91 36 17 	lds	r30, 0x1736
    4974:	f0 91 37 17 	lds	r31, 0x1737
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    4978:	81 81       	ldd	r24, Z+1	; 0x01
    497a:	8f 93       	push	r24
    497c:	80 81       	ld	r24, Z
    497e:	8f 93       	push	r24
    4980:	81 e4       	ldi	r24, 0x41	; 65
    4982:	94 e0       	ldi	r25, 0x04	; 4
    4984:	9f 93       	push	r25
    4986:	8f 93       	push	r24
    4988:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    498c:	80 91 37 17 	lds	r24, 0x1737
    4990:	8f 93       	push	r24
    4992:	80 91 36 17 	lds	r24, 0x1736
    4996:	8f 93       	push	r24
    4998:	8b e4       	ldi	r24, 0x4B	; 75
    499a:	94 e0       	ldi	r25, 0x04	; 4
    499c:	9f 93       	push	r25
    499e:	8f 93       	push	r24
    49a0:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    49a4:	c0 ef       	ldi	r28, 0xF0	; 240
    49a6:	d5 e1       	ldi	r29, 0x15	; 21
    49a8:	ed b7       	in	r30, 0x3d	; 61
    49aa:	fe b7       	in	r31, 0x3e	; 62
    49ac:	74 96       	adiw	r30, 0x14	; 20
    49ae:	0f b6       	in	r0, 0x3f	; 63
    49b0:	f8 94       	cli
    49b2:	fe bf       	out	0x3e, r31	; 62
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	ed bf       	out	0x3d, r30	; 61
    49b8:	00 e0       	ldi	r16, 0x00	; 0
    49ba:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    49bc:	8b e5       	ldi	r24, 0x5B	; 91
    49be:	68 2e       	mov	r6, r24
    49c0:	84 e0       	ldi	r24, 0x04	; 4
    49c2:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    49c4:	94 e3       	ldi	r25, 0x34	; 52
    49c6:	89 2e       	mov	r8, r25
    49c8:	94 e0       	ldi	r25, 0x04	; 4
    49ca:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    49cc:	21 e4       	ldi	r18, 0x41	; 65
    49ce:	a2 2e       	mov	r10, r18
    49d0:	24 e0       	ldi	r18, 0x04	; 4
    49d2:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    49d4:	3b e4       	ldi	r19, 0x4B	; 75
    49d6:	c3 2e       	mov	r12, r19
    49d8:	34 e0       	ldi	r19, 0x04	; 4
    49da:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    49dc:	ea 80       	ldd	r14, Y+2	; 0x02
    49de:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    49e0:	ff 92       	push	r15
    49e2:	ef 92       	push	r14
    49e4:	1f 93       	push	r17
    49e6:	0f 93       	push	r16
    49e8:	7f 92       	push	r7
    49ea:	6f 92       	push	r6
    49ec:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
        printf( "canary = %x ",*stkc );
    49f0:	f7 01       	movw	r30, r14
    49f2:	80 81       	ld	r24, Z
    49f4:	1f 92       	push	r1
    49f6:	8f 93       	push	r24
    49f8:	9f 92       	push	r9
    49fa:	8f 92       	push	r8
    49fc:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	8f 93       	push	r24
    4a04:	88 81       	ld	r24, Y
    4a06:	8f 93       	push	r24
    4a08:	bf 92       	push	r11
    4a0a:	af 92       	push	r10
    4a0c:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    4a10:	df 93       	push	r29
    4a12:	cf 93       	push	r28
    4a14:	df 92       	push	r13
    4a16:	cf 92       	push	r12
    4a18:	0e 94 b2 3a 	call	0x7564	; 0x7564 <printf>
    4a1c:	0f 5f       	subi	r16, 0xFF	; 255
    4a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4a20:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    4a22:	ed b7       	in	r30, 0x3d	; 61
    4a24:	fe b7       	in	r31, 0x3e	; 62
    4a26:	72 96       	adiw	r30, 0x12	; 18
    4a28:	0f b6       	in	r0, 0x3f	; 63
    4a2a:	f8 94       	cli
    4a2c:	fe bf       	out	0x3e, r31	; 62
    4a2e:	0f be       	out	0x3f, r0	; 63
    4a30:	ed bf       	out	0x3d, r30	; 61
    4a32:	07 30       	cpi	r16, 0x07	; 7
    4a34:	11 05       	cpc	r17, r1
    4a36:	91 f6       	brne	.-92     	; 0x49dc <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    4a38:	df 91       	pop	r29
    4a3a:	cf 91       	pop	r28
    4a3c:	1f 91       	pop	r17
    4a3e:	0f 91       	pop	r16
    4a40:	ff 90       	pop	r15
    4a42:	ef 90       	pop	r14
    4a44:	df 90       	pop	r13
    4a46:	cf 90       	pop	r12
    4a48:	bf 90       	pop	r11
    4a4a:	af 90       	pop	r10
    4a4c:	9f 90       	pop	r9
    4a4e:	8f 90       	pop	r8
    4a50:	7f 90       	pop	r7
    4a52:	6f 90       	pop	r6
    4a54:	08 95       	ret

00004a56 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    4a56:	cf 93       	push	r28
    4a58:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    4a5a:	e0 91 36 17 	lds	r30, 0x1736
    4a5e:	f0 91 37 17 	lds	r31, 0x1737
    4a62:	c2 81       	ldd	r28, Z+2	; 0x02
    4a64:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    4a66:	88 81       	ld	r24, Y
    4a68:	85 35       	cpi	r24, 0x55	; 85
    4a6a:	39 f0       	breq	.+14     	; 0x4a7a <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    4a6c:	0e 94 7e 24 	call	0x48fc	; 0x48fc <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    4a70:	81 e0       	ldi	r24, 0x01	; 1
    4a72:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    4a76:	85 e5       	ldi	r24, 0x55	; 85
    4a78:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    4a7a:	e0 91 36 17 	lds	r30, 0x1736
    4a7e:	f0 91 37 17 	lds	r31, 0x1737
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    4a82:	80 81       	ld	r24, Z
    4a84:	91 81       	ldd	r25, Z+1	; 0x01
    4a86:	81 15       	cp	r24, r1
    4a88:	92 44       	sbci	r25, 0x42	; 66
    4a8a:	38 f0       	brcs	.+14     	; 0x4a9a <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    4a8c:	0e 94 7e 24 	call	0x48fc	; 0x48fc <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    4a90:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    4a92:	df 91       	pop	r29
    4a94:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    4a96:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <nrk_error_add>




#endif
}
    4a9a:	df 91       	pop	r29
    4a9c:	cf 91       	pop	r28
    4a9e:	08 95       	ret

00004aa0 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    4aa0:	2b e2       	ldi	r18, 0x2B	; 43
    4aa2:	82 02       	muls	r24, r18
    4aa4:	c0 01       	movw	r24, r0
    4aa6:	11 24       	eor	r1, r1
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	e0 51       	subi	r30, 0x10	; 16
    4aac:	fa 4e       	sbci	r31, 0xEA	; 234
    4aae:	a2 81       	ldd	r26, Z+2	; 0x02
    4ab0:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    4ab2:	8c 91       	ld	r24, X
    4ab4:	85 35       	cpi	r24, 0x55	; 85
    4ab6:	19 f0       	breq	.+6      	; 0x4abe <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    4ab8:	85 e5       	ldi	r24, 0x55	; 85
    4aba:	8c 93       	st	X, r24
    4abc:	08 c0       	rjmp	.+16     	; 0x4ace <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    4abe:	80 81       	ld	r24, Z
    4ac0:	91 81       	ldd	r25, Z+1	; 0x01
    4ac2:	81 15       	cp	r24, r1
    4ac4:	92 44       	sbci	r25, 0x42	; 66
    4ac6:	28 f0       	brcs	.+10     	; 0x4ad2 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    4ac8:	82 e1       	ldi	r24, 0x12	; 18
    4aca:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_error_add>
        return NRK_ERROR;
    4ace:	8f ef       	ldi	r24, 0xFF	; 255
    4ad0:	08 95       	ret
    }
#endif
    return NRK_OK;
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
}
    4ad4:	08 95       	ret

00004ad6 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    4ad6:	0f 93       	push	r16
    4ad8:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    4ada:	40 91 b5 0b 	lds	r20, 0x0BB5
    4ade:	50 91 b6 0b 	lds	r21, 0x0BB6
    4ae2:	60 91 b7 0b 	lds	r22, 0x0BB7
    4ae6:	70 91 b8 0b 	lds	r23, 0x0BB8
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	8a 01       	movw	r16, r20
    4af0:	9b 01       	movw	r18, r22
    4af2:	08 2e       	mov	r0, r24
    4af4:	04 c0       	rjmp	.+8      	; 0x4afe <nrk_signal_create+0x28>
    4af6:	36 95       	lsr	r19
    4af8:	27 95       	ror	r18
    4afa:	17 95       	ror	r17
    4afc:	07 95       	ror	r16
    4afe:	0a 94       	dec	r0
    4b00:	d2 f7       	brpl	.-12     	; 0x4af6 <nrk_signal_create+0x20>
    4b02:	00 fd       	sbrc	r16, 0
    4b04:	19 c0       	rjmp	.+50     	; 0x4b38 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    4b06:	01 e0       	ldi	r16, 0x01	; 1
    4b08:	10 e0       	ldi	r17, 0x00	; 0
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	08 2e       	mov	r0, r24
    4b10:	04 c0       	rjmp	.+8      	; 0x4b1a <nrk_signal_create+0x44>
    4b12:	00 0f       	add	r16, r16
    4b14:	11 1f       	adc	r17, r17
    4b16:	22 1f       	adc	r18, r18
    4b18:	33 1f       	adc	r19, r19
    4b1a:	0a 94       	dec	r0
    4b1c:	d2 f7       	brpl	.-12     	; 0x4b12 <nrk_signal_create+0x3c>
    4b1e:	40 2b       	or	r20, r16
    4b20:	51 2b       	or	r21, r17
    4b22:	62 2b       	or	r22, r18
    4b24:	73 2b       	or	r23, r19
    4b26:	40 93 b5 0b 	sts	0x0BB5, r20
    4b2a:	50 93 b6 0b 	sts	0x0BB6, r21
    4b2e:	60 93 b7 0b 	sts	0x0BB7, r22
    4b32:	70 93 b8 0b 	sts	0x0BB8, r23
			return i;
    4b36:	05 c0       	rjmp	.+10     	; 0x4b42 <nrk_signal_create+0x6c>
    4b38:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    4b3a:	80 32       	cpi	r24, 0x20	; 32
    4b3c:	91 05       	cpc	r25, r1
    4b3e:	b9 f6       	brne	.-82     	; 0x4aee <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    4b40:	8f ef       	ldi	r24, 0xFF	; 255


}
    4b42:	1f 91       	pop	r17
    4b44:	0f 91       	pop	r16
    4b46:	08 95       	ret

00004b48 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    4b48:	e0 91 36 17 	lds	r30, 0x1736
    4b4c:	f0 91 37 17 	lds	r31, 0x1737
    4b50:	65 85       	ldd	r22, Z+13	; 0x0d
    4b52:	76 85       	ldd	r23, Z+14	; 0x0e
    4b54:	87 85       	ldd	r24, Z+15	; 0x0f
    4b56:	90 89       	ldd	r25, Z+16	; 0x10
}
    4b58:	08 95       	ret

00004b5a <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    4b5a:	cf 92       	push	r12
    4b5c:	df 92       	push	r13
    4b5e:	ef 92       	push	r14
    4b60:	ff 92       	push	r15
    4b62:	0f 93       	push	r16
    4b64:	1f 93       	push	r17
    4b66:	cf 93       	push	r28
    4b68:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    4b6a:	c1 2c       	mov	r12, r1
    4b6c:	d1 2c       	mov	r13, r1
    4b6e:	76 01       	movw	r14, r12
    4b70:	c3 94       	inc	r12
    4b72:	08 2e       	mov	r0, r24
    4b74:	04 c0       	rjmp	.+8      	; 0x4b7e <nrk_signal_delete+0x24>
    4b76:	cc 0c       	add	r12, r12
    4b78:	dd 1c       	adc	r13, r13
    4b7a:	ee 1c       	adc	r14, r14
    4b7c:	ff 1c       	adc	r15, r15
    4b7e:	0a 94       	dec	r0
    4b80:	d2 f7       	brpl	.-12     	; 0x4b76 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    4b82:	40 91 b5 0b 	lds	r20, 0x0BB5
    4b86:	50 91 b6 0b 	lds	r21, 0x0BB6
    4b8a:	60 91 b7 0b 	lds	r22, 0x0BB7
    4b8e:	70 91 b8 0b 	lds	r23, 0x0BB8
    4b92:	4c 21       	and	r20, r12
    4b94:	5d 21       	and	r21, r13
    4b96:	6e 21       	and	r22, r14
    4b98:	7f 21       	and	r23, r15
    4b9a:	45 2b       	or	r20, r21
    4b9c:	46 2b       	or	r20, r22
    4b9e:	47 2b       	or	r20, r23
    4ba0:	09 f4       	brne	.+2      	; 0x4ba4 <nrk_signal_delete+0x4a>
    4ba2:	60 c0       	rjmp	.+192    	; 0x4c64 <nrk_signal_delete+0x10a>
    4ba4:	08 2f       	mov	r16, r24

	nrk_int_disable();
    4ba6:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    4baa:	e9 ef       	ldi	r30, 0xF9	; 249
    4bac:	f5 e1       	ldi	r31, 0x15	; 21
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4bae:	b7 01       	movw	r22, r14
    4bb0:	a6 01       	movw	r20, r12
    4bb2:	40 95       	com	r20
    4bb4:	50 95       	com	r21
    4bb6:	60 95       	com	r22
    4bb8:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4bba:	13 e0       	ldi	r17, 0x03	; 3
    4bbc:	df 01       	movw	r26, r30
    4bbe:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4bc0:	8c 91       	ld	r24, X
    4bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc4:	39 f1       	breq	.+78     	; 0x4c14 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    4bc6:	84 81       	ldd	r24, Z+4	; 0x04
    4bc8:	95 81       	ldd	r25, Z+5	; 0x05
    4bca:	a6 81       	ldd	r26, Z+6	; 0x06
    4bcc:	b7 81       	ldd	r27, Z+7	; 0x07
    4bce:	8c 15       	cp	r24, r12
    4bd0:	9d 05       	cpc	r25, r13
    4bd2:	ae 05       	cpc	r26, r14
    4bd4:	bf 05       	cpc	r27, r15
    4bd6:	51 f4       	brne	.+20     	; 0x4bec <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    4bd8:	10 86       	std	Z+8, r1	; 0x08
    4bda:	11 86       	std	Z+9, r1	; 0x09
    4bdc:	12 86       	std	Z+10, r1	; 0x0a
    4bde:	13 86       	std	Z+11, r1	; 0x0b
    4be0:	9f 01       	movw	r18, r30
    4be2:	22 50       	subi	r18, 0x02	; 2
    4be4:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    4be6:	e9 01       	movw	r28, r18
    4be8:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4bea:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4bec:	84 23       	and	r24, r20
    4bee:	95 23       	and	r25, r21
    4bf0:	a6 23       	and	r26, r22
    4bf2:	b7 23       	and	r27, r23
    4bf4:	84 83       	std	Z+4, r24	; 0x04
    4bf6:	95 83       	std	Z+5, r25	; 0x05
    4bf8:	a6 83       	std	Z+6, r26	; 0x06
    4bfa:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4bfc:	80 85       	ldd	r24, Z+8	; 0x08
    4bfe:	91 85       	ldd	r25, Z+9	; 0x09
    4c00:	a2 85       	ldd	r26, Z+10	; 0x0a
    4c02:	b3 85       	ldd	r27, Z+11	; 0x0b
    4c04:	84 23       	and	r24, r20
    4c06:	95 23       	and	r25, r21
    4c08:	a6 23       	and	r26, r22
    4c0a:	b7 23       	and	r27, r23
    4c0c:	80 87       	std	Z+8, r24	; 0x08
    4c0e:	91 87       	std	Z+9, r25	; 0x09
    4c10:	a2 87       	std	Z+10, r26	; 0x0a
    4c12:	b3 87       	std	Z+11, r27	; 0x0b
    4c14:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4c16:	d7 e1       	ldi	r29, 0x17	; 23
    4c18:	e6 32       	cpi	r30, 0x26	; 38
    4c1a:	fd 07       	cpc	r31, r29
    4c1c:	79 f6       	brne	.-98     	; 0x4bbc <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    4c1e:	8e ef       	ldi	r24, 0xFE	; 254
    4c20:	9f ef       	ldi	r25, 0xFF	; 255
    4c22:	af ef       	ldi	r26, 0xFF	; 255
    4c24:	bf ef       	ldi	r27, 0xFF	; 255
    4c26:	04 c0       	rjmp	.+8      	; 0x4c30 <nrk_signal_delete+0xd6>
    4c28:	88 0f       	add	r24, r24
    4c2a:	99 1f       	adc	r25, r25
    4c2c:	aa 1f       	adc	r26, r26
    4c2e:	bb 1f       	adc	r27, r27
    4c30:	0a 95       	dec	r16
    4c32:	d2 f7       	brpl	.-12     	; 0x4c28 <nrk_signal_delete+0xce>
    4c34:	40 91 b5 0b 	lds	r20, 0x0BB5
    4c38:	50 91 b6 0b 	lds	r21, 0x0BB6
    4c3c:	60 91 b7 0b 	lds	r22, 0x0BB7
    4c40:	70 91 b8 0b 	lds	r23, 0x0BB8
    4c44:	84 23       	and	r24, r20
    4c46:	95 23       	and	r25, r21
    4c48:	a6 23       	and	r26, r22
    4c4a:	b7 23       	and	r27, r23
    4c4c:	80 93 b5 0b 	sts	0x0BB5, r24
    4c50:	90 93 b6 0b 	sts	0x0BB6, r25
    4c54:	a0 93 b7 0b 	sts	0x0BB7, r26
    4c58:	b0 93 b8 0b 	sts	0x0BB8, r27
	nrk_int_enable();
    4c5c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>

	return NRK_OK;
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	01 c0       	rjmp	.+2      	; 0x4c66 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    4c64:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    4c66:	df 91       	pop	r29
    4c68:	cf 91       	pop	r28
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	ff 90       	pop	r15
    4c70:	ef 90       	pop	r14
    4c72:	df 90       	pop	r13
    4c74:	cf 90       	pop	r12
    4c76:	08 95       	ret

00004c78 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    4c78:	0f 93       	push	r16
    4c7a:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    4c7c:	41 e0       	ldi	r20, 0x01	; 1
    4c7e:	50 e0       	ldi	r21, 0x00	; 0
    4c80:	60 e0       	ldi	r22, 0x00	; 0
    4c82:	70 e0       	ldi	r23, 0x00	; 0
    4c84:	8a 01       	movw	r16, r20
    4c86:	9b 01       	movw	r18, r22
    4c88:	04 c0       	rjmp	.+8      	; 0x4c92 <nrk_signal_unregister+0x1a>
    4c8a:	00 0f       	add	r16, r16
    4c8c:	11 1f       	adc	r17, r17
    4c8e:	22 1f       	adc	r18, r18
    4c90:	33 1f       	adc	r19, r19
    4c92:	8a 95       	dec	r24
    4c94:	d2 f7       	brpl	.-12     	; 0x4c8a <nrk_signal_unregister+0x12>
    4c96:	d9 01       	movw	r26, r18
    4c98:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    4c9a:	e0 91 36 17 	lds	r30, 0x1736
    4c9e:	f0 91 37 17 	lds	r31, 0x1737
    4ca2:	45 85       	ldd	r20, Z+13	; 0x0d
    4ca4:	56 85       	ldd	r21, Z+14	; 0x0e
    4ca6:	67 85       	ldd	r22, Z+15	; 0x0f
    4ca8:	70 89       	ldd	r23, Z+16	; 0x10
    4caa:	04 23       	and	r16, r20
    4cac:	15 23       	and	r17, r21
    4cae:	26 23       	and	r18, r22
    4cb0:	37 23       	and	r19, r23
    4cb2:	01 2b       	or	r16, r17
    4cb4:	02 2b       	or	r16, r18
    4cb6:	03 2b       	or	r16, r19
    4cb8:	d1 f0       	breq	.+52     	; 0x4cee <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    4cba:	80 95       	com	r24
    4cbc:	90 95       	com	r25
    4cbe:	a0 95       	com	r26
    4cc0:	b0 95       	com	r27
    4cc2:	48 23       	and	r20, r24
    4cc4:	59 23       	and	r21, r25
    4cc6:	6a 23       	and	r22, r26
    4cc8:	7b 23       	and	r23, r27
    4cca:	45 87       	std	Z+13, r20	; 0x0d
    4ccc:	56 87       	std	Z+14, r21	; 0x0e
    4cce:	67 87       	std	Z+15, r22	; 0x0f
    4cd0:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    4cd2:	41 89       	ldd	r20, Z+17	; 0x11
    4cd4:	52 89       	ldd	r21, Z+18	; 0x12
    4cd6:	63 89       	ldd	r22, Z+19	; 0x13
    4cd8:	74 89       	ldd	r23, Z+20	; 0x14
    4cda:	84 23       	and	r24, r20
    4cdc:	95 23       	and	r25, r21
    4cde:	a6 23       	and	r26, r22
    4ce0:	b7 23       	and	r27, r23
    4ce2:	81 8b       	std	Z+17, r24	; 0x11
    4ce4:	92 8b       	std	Z+18, r25	; 0x12
    4ce6:	a3 8b       	std	Z+19, r26	; 0x13
    4ce8:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	01 c0       	rjmp	.+2      	; 0x4cf0 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    4cee:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    4cf0:	1f 91       	pop	r17
    4cf2:	0f 91       	pop	r16
    4cf4:	08 95       	ret

00004cf6 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    4cf6:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    4cf8:	40 91 b5 0b 	lds	r20, 0x0BB5
    4cfc:	50 91 b6 0b 	lds	r21, 0x0BB6
    4d00:	60 91 b7 0b 	lds	r22, 0x0BB7
    4d04:	70 91 b8 0b 	lds	r23, 0x0BB8
    4d08:	08 2e       	mov	r0, r24
    4d0a:	04 c0       	rjmp	.+8      	; 0x4d14 <nrk_signal_register+0x1e>
    4d0c:	76 95       	lsr	r23
    4d0e:	67 95       	ror	r22
    4d10:	57 95       	ror	r21
    4d12:	47 95       	ror	r20
    4d14:	0a 94       	dec	r0
    4d16:	d2 f7       	brpl	.-12     	; 0x4d0c <nrk_signal_register+0x16>
    4d18:	40 ff       	sbrs	r20, 0
    4d1a:	1d c0       	rjmp	.+58     	; 0x4d56 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    4d1c:	e0 91 36 17 	lds	r30, 0x1736
    4d20:	f0 91 37 17 	lds	r31, 0x1737
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	a0 e0       	ldi	r26, 0x00	; 0
    4d2a:	b0 e0       	ldi	r27, 0x00	; 0
    4d2c:	04 c0       	rjmp	.+8      	; 0x4d36 <nrk_signal_register+0x40>
    4d2e:	88 0f       	add	r24, r24
    4d30:	99 1f       	adc	r25, r25
    4d32:	aa 1f       	adc	r26, r26
    4d34:	bb 1f       	adc	r27, r27
    4d36:	2a 95       	dec	r18
    4d38:	d2 f7       	brpl	.-12     	; 0x4d2e <nrk_signal_register+0x38>
    4d3a:	45 85       	ldd	r20, Z+13	; 0x0d
    4d3c:	56 85       	ldd	r21, Z+14	; 0x0e
    4d3e:	67 85       	ldd	r22, Z+15	; 0x0f
    4d40:	70 89       	ldd	r23, Z+16	; 0x10
    4d42:	84 2b       	or	r24, r20
    4d44:	95 2b       	or	r25, r21
    4d46:	a6 2b       	or	r26, r22
    4d48:	b7 2b       	or	r27, r23
    4d4a:	85 87       	std	Z+13, r24	; 0x0d
    4d4c:	96 87       	std	Z+14, r25	; 0x0e
    4d4e:	a7 87       	std	Z+15, r26	; 0x0f
    4d50:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	08 95       	ret
	}
            
	return NRK_ERROR;
    4d56:	8f ef       	ldi	r24, 0xFF	; 255
}
    4d58:	08 95       	ret

00004d5a <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    4d5a:	cf 92       	push	r12
    4d5c:	df 92       	push	r13
    4d5e:	ef 92       	push	r14
    4d60:	ff 92       	push	r15
    4d62:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    4d64:	c1 2c       	mov	r12, r1
    4d66:	d1 2c       	mov	r13, r1
    4d68:	76 01       	movw	r14, r12
    4d6a:	c3 94       	inc	r12
    4d6c:	04 c0       	rjmp	.+8      	; 0x4d76 <nrk_event_signal+0x1c>
    4d6e:	cc 0c       	add	r12, r12
    4d70:	dd 1c       	adc	r13, r13
    4d72:	ee 1c       	adc	r14, r14
    4d74:	ff 1c       	adc	r15, r15
    4d76:	8a 95       	dec	r24
    4d78:	d2 f7       	brpl	.-12     	; 0x4d6e <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    4d7a:	80 91 b5 0b 	lds	r24, 0x0BB5
    4d7e:	90 91 b6 0b 	lds	r25, 0x0BB6
    4d82:	a0 91 b7 0b 	lds	r26, 0x0BB7
    4d86:	b0 91 b8 0b 	lds	r27, 0x0BB8
    4d8a:	8c 21       	and	r24, r12
    4d8c:	9d 21       	and	r25, r13
    4d8e:	ae 21       	and	r26, r14
    4d90:	bf 21       	and	r27, r15
    4d92:	89 2b       	or	r24, r25
    4d94:	8a 2b       	or	r24, r26
    4d96:	8b 2b       	or	r24, r27
    4d98:	11 f4       	brne	.+4      	; 0x4d9e <nrk_event_signal+0x44>
    4d9a:	81 e0       	ldi	r24, 0x01	; 1
    4d9c:	44 c0       	rjmp	.+136    	; 0x4e26 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    4d9e:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    4da2:	e7 ef       	ldi	r30, 0xF7	; 247
    4da4:	f5 e1       	ldi	r31, 0x15	; 21
    4da6:	a9 ef       	ldi	r26, 0xF9	; 249
    4da8:	b5 e1       	ldi	r27, 0x15	; 21

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    4daa:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4dac:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    4dae:	90 81       	ld	r25, Z
    4db0:	91 30       	cpi	r25, 0x01	; 1
    4db2:	b9 f4       	brne	.+46     	; 0x4de2 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    4db4:	42 85       	ldd	r20, Z+10	; 0x0a
    4db6:	53 85       	ldd	r21, Z+11	; 0x0b
    4db8:	64 85       	ldd	r22, Z+12	; 0x0c
    4dba:	75 85       	ldd	r23, Z+13	; 0x0d
    4dbc:	4c 21       	and	r20, r12
    4dbe:	5d 21       	and	r21, r13
    4dc0:	6e 21       	and	r22, r14
    4dc2:	7f 21       	and	r23, r15
    4dc4:	45 2b       	or	r20, r21
    4dc6:	46 2b       	or	r20, r22
    4dc8:	47 2b       	or	r20, r23
    4dca:	59 f0       	breq	.+22     	; 0x4de2 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4dcc:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    4dce:	16 86       	std	Z+14, r1	; 0x0e
    4dd0:	17 86       	std	Z+15, r1	; 0x0f
    4dd2:	10 8a       	std	Z+16, r1	; 0x10
    4dd4:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    4dd6:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    4dd8:	c2 86       	std	Z+10, r12	; 0x0a
    4dda:	d3 86       	std	Z+11, r13	; 0x0b
    4ddc:	e4 86       	std	Z+12, r14	; 0x0c
    4dde:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    4de0:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    4de2:	90 81       	ld	r25, Z
    4de4:	92 30       	cpi	r25, 0x02	; 2
    4de6:	a1 f4       	brne	.+40     	; 0x4e10 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    4de8:	42 85       	ldd	r20, Z+10	; 0x0a
    4dea:	53 85       	ldd	r21, Z+11	; 0x0b
    4dec:	64 85       	ldd	r22, Z+12	; 0x0c
    4dee:	75 85       	ldd	r23, Z+13	; 0x0d
    4df0:	4c 15       	cp	r20, r12
    4df2:	5d 05       	cpc	r21, r13
    4df4:	6e 05       	cpc	r22, r14
    4df6:	7f 05       	cpc	r23, r15
    4df8:	59 f4       	brne	.+22     	; 0x4e10 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4dfa:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    4dfc:	16 86       	std	Z+14, r1	; 0x0e
    4dfe:	17 86       	std	Z+15, r1	; 0x0f
    4e00:	10 8a       	std	Z+16, r1	; 0x10
    4e02:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    4e04:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    4e06:	12 86       	std	Z+10, r1	; 0x0a
    4e08:	13 86       	std	Z+11, r1	; 0x0b
    4e0a:	14 86       	std	Z+12, r1	; 0x0c
    4e0c:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    4e0e:	c1 e0       	ldi	r28, 0x01	; 1
    4e10:	bb 96       	adiw	r30, 0x2b	; 43
    4e12:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4e14:	97 e1       	ldi	r25, 0x17	; 23
    4e16:	e4 32       	cpi	r30, 0x24	; 36
    4e18:	f9 07       	cpc	r31, r25
    4e1a:	49 f6       	brne	.-110    	; 0x4dae <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    4e1c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
	if(event_occured)
    4e20:	c1 11       	cpse	r28, r1
    4e22:	05 c0       	rjmp	.+10     	; 0x4e2e <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    4e24:	82 e0       	ldi	r24, 0x02	; 2
    4e26:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
	return NRK_ERROR;
    4e2a:	8f ef       	ldi	r24, 0xFF	; 255
    4e2c:	01 c0       	rjmp	.+2      	; 0x4e30 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    4e30:	cf 91       	pop	r28
    4e32:	ff 90       	pop	r15
    4e34:	ef 90       	pop	r14
    4e36:	df 90       	pop	r13
    4e38:	cf 90       	pop	r12
    4e3a:	08 95       	ret

00004e3c <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    4e3c:	0f 93       	push	r16
    4e3e:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    4e40:	e0 91 36 17 	lds	r30, 0x1736
    4e44:	f0 91 37 17 	lds	r31, 0x1737
    4e48:	05 85       	ldd	r16, Z+13	; 0x0d
    4e4a:	16 85       	ldd	r17, Z+14	; 0x0e
    4e4c:	27 85       	ldd	r18, Z+15	; 0x0f
    4e4e:	30 89       	ldd	r19, Z+16	; 0x10
    4e50:	06 23       	and	r16, r22
    4e52:	17 23       	and	r17, r23
    4e54:	28 23       	and	r18, r24
    4e56:	39 23       	and	r19, r25
    4e58:	01 15       	cp	r16, r1
    4e5a:	11 05       	cpc	r17, r1
    4e5c:	21 05       	cpc	r18, r1
    4e5e:	31 05       	cpc	r19, r1
    4e60:	11 f1       	breq	.+68     	; 0x4ea6 <nrk_event_wait+0x6a>
    4e62:	dc 01       	movw	r26, r24
    4e64:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    4e66:	81 8b       	std	Z+17, r24	; 0x11
    4e68:	92 8b       	std	Z+18, r25	; 0x12
    4e6a:	a3 8b       	std	Z+19, r26	; 0x13
    4e6c:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    4e6e:	21 e0       	ldi	r18, 0x01	; 1
    4e70:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    4e72:	00 90 26 17 	lds	r0, 0x1726
    4e76:	04 c0       	rjmp	.+8      	; 0x4e80 <nrk_event_wait+0x44>
    4e78:	b6 95       	lsr	r27
    4e7a:	a7 95       	ror	r26
    4e7c:	97 95       	ror	r25
    4e7e:	87 95       	ror	r24
    4e80:	0a 94       	dec	r0
    4e82:	d2 f7       	brpl	.-12     	; 0x4e78 <nrk_event_wait+0x3c>
    4e84:	80 ff       	sbrs	r24, 0
    4e86:	03 c0       	rjmp	.+6      	; 0x4e8e <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    4e88:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <nrk_wait_until_nw>
    4e8c:	04 c0       	rjmp	.+8      	; 0x4e96 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	0e 94 c9 2a 	call	0x5592	; 0x5592 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    4e96:	e0 91 36 17 	lds	r30, 0x1736
    4e9a:	f0 91 37 17 	lds	r31, 0x1737
    4e9e:	01 89       	ldd	r16, Z+17	; 0x11
    4ea0:	12 89       	ldd	r17, Z+18	; 0x12
    4ea2:	23 89       	ldd	r18, Z+19	; 0x13
    4ea4:	34 89       	ldd	r19, Z+20	; 0x14
}
    4ea6:	c9 01       	movw	r24, r18
    4ea8:	b8 01       	movw	r22, r16
    4eaa:	1f 91       	pop	r17
    4eac:	0f 91       	pop	r16
    4eae:	08 95       	ret

00004eb0 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    4eb0:	90 91 35 17 	lds	r25, 0x1735
    4eb4:	91 11       	cpse	r25, r1
    4eb6:	1d c0       	rjmp	.+58     	; 0x4ef2 <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    4eb8:	90 91 1f 17 	lds	r25, 0x171F
    4ebc:	9f 3f       	cpi	r25, 0xFF	; 255
    4ebe:	31 f0       	breq	.+12     	; 0x4ecc <nrk_sem_create+0x1c>
    4ec0:	90 91 22 17 	lds	r25, 0x1722
    4ec4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ec6:	21 f0       	breq	.+8      	; 0x4ed0 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    4ec8:	e2 e0       	ldi	r30, 0x02	; 2
    4eca:	03 c0       	rjmp	.+6      	; 0x4ed2 <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    4ecc:	e0 e0       	ldi	r30, 0x00	; 0
    4ece:	01 c0       	rjmp	.+2      	; 0x4ed2 <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    4ed0:	e1 e0       	ldi	r30, 0x01	; 1
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    4ed2:	f0 e0       	ldi	r31, 0x00	; 0
    4ed4:	9f 01       	movw	r18, r30
    4ed6:	22 0f       	add	r18, r18
    4ed8:	33 1f       	adc	r19, r19
    4eda:	e2 0f       	add	r30, r18
    4edc:	f3 1f       	adc	r31, r19
    4ede:	e1 5e       	subi	r30, 0xE1	; 225
    4ee0:	f8 4e       	sbci	r31, 0xE8	; 232
    4ee2:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    4ee4:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    4ee6:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    4ee8:	81 e0       	ldi	r24, 0x01	; 1
    4eea:	80 93 35 17 	sts	0x1735, r24
	return	&nrk_sem_list[i];
    4eee:	cf 01       	movw	r24, r30
    4ef0:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    4ef6:	08 95       	ret

00004ef8 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4ef8:	27 e1       	ldi	r18, 0x17	; 23
    4efa:	8f 31       	cpi	r24, 0x1F	; 31
    4efc:	92 07       	cpc	r25, r18
    4efe:	29 f0       	breq	.+10     	; 0x4f0a <nrk_get_resource_index+0x12>
    4f00:	82 52       	subi	r24, 0x22	; 34
    4f02:	97 41       	sbci	r25, 0x17	; 23
    4f04:	21 f4       	brne	.+8      	; 0x4f0e <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	08 95       	ret
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    4f0c:	08 95       	ret
	return NRK_ERROR;
    4f0e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f10:	08 95       	ret

00004f12 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    4f12:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4f16:	8f 3f       	cpi	r24, 0xFF	; 255
    4f18:	11 f4       	brne	.+4      	; 0x4f1e <nrk_sem_query+0xc>
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	02 c0       	rjmp	.+4      	; 0x4f22 <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4f1e:	82 30       	cpi	r24, 0x02	; 2
    4f20:	21 f4       	brne	.+8      	; 0x4f2a <nrk_sem_query+0x18>
    4f22:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
    4f26:	8f ef       	ldi	r24, 0xFF	; 255
    4f28:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    4f2a:	99 27       	eor	r25, r25
    4f2c:	87 fd       	sbrc	r24, 7
    4f2e:	90 95       	com	r25
    4f30:	fc 01       	movw	r30, r24
    4f32:	ee 0f       	add	r30, r30
    4f34:	ff 1f       	adc	r31, r31
    4f36:	8e 0f       	add	r24, r30
    4f38:	9f 1f       	adc	r25, r31
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	e1 5e       	subi	r30, 0xE1	; 225
    4f3e:	f8 4e       	sbci	r31, 0xE8	; 232
    4f40:	82 81       	ldd	r24, Z+2	; 0x02
}
    4f42:	08 95       	ret

00004f44 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    4f44:	ef 92       	push	r14
    4f46:	ff 92       	push	r15
    4f48:	0f 93       	push	r16
    4f4a:	1f 93       	push	r17
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	1f 92       	push	r1
    4f52:	cd b7       	in	r28, 0x3d	; 61
    4f54:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    4f56:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f5c:	11 f4       	brne	.+4      	; 0x4f62 <nrk_sem_pend+0x1e>
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4f62:	82 30       	cpi	r24, 0x02	; 2
    4f64:	21 f4       	brne	.+8      	; 0x4f6e <nrk_sem_pend+0x2a>
    4f66:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
    4f6a:	8f ef       	ldi	r24, 0xFF	; 255
    4f6c:	41 c0       	rjmp	.+130    	; 0x4ff0 <nrk_sem_pend+0xac>
	
	nrk_int_disable();
    4f6e:	89 83       	std	Y+1, r24	; 0x01
    4f70:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    4f74:	89 81       	ldd	r24, Y+1	; 0x01
    4f76:	e8 2e       	mov	r14, r24
    4f78:	ff 24       	eor	r15, r15
    4f7a:	e7 fc       	sbrc	r14, 7
    4f7c:	f0 94       	com	r15
    4f7e:	87 01       	movw	r16, r14
    4f80:	00 0f       	add	r16, r16
    4f82:	11 1f       	adc	r17, r17
    4f84:	f8 01       	movw	r30, r16
    4f86:	ee 0d       	add	r30, r14
    4f88:	ff 1d       	adc	r31, r15
    4f8a:	e1 5e       	subi	r30, 0xE1	; 225
    4f8c:	f8 4e       	sbci	r31, 0xE8	; 232
    4f8e:	92 81       	ldd	r25, Z+2	; 0x02
    4f90:	91 11       	cpse	r25, r1
    4f92:	16 c0       	rjmp	.+44     	; 0x4fc0 <nrk_sem_pend+0x7c>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    4f94:	e0 91 36 17 	lds	r30, 0x1736
    4f98:	f0 91 37 17 	lds	r31, 0x1737
    4f9c:	97 81       	ldd	r25, Z+7	; 0x07
    4f9e:	92 60       	ori	r25, 0x02	; 2
    4fa0:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    4fa2:	99 27       	eor	r25, r25
    4fa4:	87 fd       	sbrc	r24, 7
    4fa6:	90 95       	com	r25
    4fa8:	a9 2f       	mov	r26, r25
    4faa:	b9 2f       	mov	r27, r25
    4fac:	81 8b       	std	Z+17, r24	; 0x11
    4fae:	92 8b       	std	Z+18, r25	; 0x12
    4fb0:	a3 8b       	std	Z+19, r26	; 0x13
    4fb2:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    4fb4:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	0e 94 c9 2a 	call	0x5592	; 0x5592 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    4fc0:	0e 0d       	add	r16, r14
    4fc2:	1f 1d       	adc	r17, r15
    4fc4:	d8 01       	movw	r26, r16
    4fc6:	a1 5e       	subi	r26, 0xE1	; 225
    4fc8:	b8 4e       	sbci	r27, 0xE8	; 232
    4fca:	12 96       	adiw	r26, 0x02	; 2
    4fcc:	8c 91       	ld	r24, X
    4fce:	12 97       	sbiw	r26, 0x02	; 2
    4fd0:	81 50       	subi	r24, 0x01	; 1
    4fd2:	12 96       	adiw	r26, 0x02	; 2
    4fd4:	8c 93       	st	X, r24
    4fd6:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    4fd8:	e0 91 36 17 	lds	r30, 0x1736
    4fdc:	f0 91 37 17 	lds	r31, 0x1737
    4fe0:	11 96       	adiw	r26, 0x01	; 1
    4fe2:	8c 91       	ld	r24, X
    4fe4:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    4fe6:	81 e0       	ldi	r24, 0x01	; 1
    4fe8:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    4fea:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>

	return NRK_OK;
    4fee:	81 e0       	ldi	r24, 0x01	; 1
}
    4ff0:	0f 90       	pop	r0
    4ff2:	df 91       	pop	r29
    4ff4:	cf 91       	pop	r28
    4ff6:	1f 91       	pop	r17
    4ff8:	0f 91       	pop	r16
    4ffa:	ff 90       	pop	r15
    4ffc:	ef 90       	pop	r14
    4ffe:	08 95       	ret

00005000 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    5000:	0f 93       	push	r16
    5002:	1f 93       	push	r17
    5004:	cf 93       	push	r28
    5006:	df 93       	push	r29
    5008:	1f 92       	push	r1
    500a:	cd b7       	in	r28, 0x3d	; 61
    500c:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    500e:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    5012:	8f 3f       	cpi	r24, 0xFF	; 255
    5014:	11 f4       	brne	.+4      	; 0x501a <nrk_sem_post+0x1a>
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	02 c0       	rjmp	.+4      	; 0x501e <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    501a:	82 30       	cpi	r24, 0x02	; 2
    501c:	21 f4       	brne	.+8      	; 0x5026 <nrk_sem_post+0x26>
    501e:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
    5022:	8f ef       	ldi	r24, 0xFF	; 255
    5024:	44 c0       	rjmp	.+136    	; 0x50ae <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    5026:	48 2f       	mov	r20, r24
    5028:	55 27       	eor	r21, r21
    502a:	47 fd       	sbrc	r20, 7
    502c:	50 95       	com	r21
    502e:	9a 01       	movw	r18, r20
    5030:	22 0f       	add	r18, r18
    5032:	33 1f       	adc	r19, r19
    5034:	24 0f       	add	r18, r20
    5036:	35 1f       	adc	r19, r21
    5038:	89 01       	movw	r16, r18
    503a:	01 5e       	subi	r16, 0xE1	; 225
    503c:	18 4e       	sbci	r17, 0xE8	; 232
    503e:	f8 01       	movw	r30, r16
    5040:	22 81       	ldd	r18, Z+2	; 0x02
    5042:	90 81       	ld	r25, Z
    5044:	29 17       	cp	r18, r25
    5046:	94 f5       	brge	.+100    	; 0x50ac <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    5048:	89 83       	std	Y+1, r24	; 0x01
    504a:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>

		nrk_sem_list[id].value++;
    504e:	f8 01       	movw	r30, r16
    5050:	92 81       	ldd	r25, Z+2	; 0x02
    5052:	9f 5f       	subi	r25, 0xFF	; 255
    5054:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    5056:	e0 91 36 17 	lds	r30, 0x1736
    505a:	f0 91 37 17 	lds	r31, 0x1737
    505e:	14 82       	std	Z+4, r1	; 0x04
    5060:	e7 ef       	ldi	r30, 0xF7	; 247
    5062:	f5 e1       	ldi	r31, 0x15	; 21

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    5064:	89 81       	ldd	r24, Y+1	; 0x01
    5066:	99 27       	eor	r25, r25
    5068:	87 fd       	sbrc	r24, 7
    506a:	90 95       	com	r25
    506c:	a9 2f       	mov	r26, r25
    506e:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    5070:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    5072:	30 81       	ld	r19, Z
    5074:	32 30       	cpi	r19, 0x02	; 2
    5076:	99 f4       	brne	.+38     	; 0x509e <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    5078:	42 85       	ldd	r20, Z+10	; 0x0a
    507a:	53 85       	ldd	r21, Z+11	; 0x0b
    507c:	64 85       	ldd	r22, Z+12	; 0x0c
    507e:	75 85       	ldd	r23, Z+13	; 0x0d
    5080:	48 17       	cp	r20, r24
    5082:	59 07       	cpc	r21, r25
    5084:	6a 07       	cpc	r22, r26
    5086:	7b 07       	cpc	r23, r27
    5088:	51 f4       	brne	.+20     	; 0x509e <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    508a:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    508c:	16 86       	std	Z+14, r1	; 0x0e
    508e:	17 86       	std	Z+15, r1	; 0x0f
    5090:	10 8a       	std	Z+16, r1	; 0x10
    5092:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    5094:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    5096:	12 86       	std	Z+10, r1	; 0x0a
    5098:	13 86       	std	Z+11, r1	; 0x0b
    509a:	14 86       	std	Z+12, r1	; 0x0c
    509c:	15 86       	std	Z+13, r1	; 0x0d
    509e:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    50a0:	37 e1       	ldi	r19, 0x17	; 23
    50a2:	e4 32       	cpi	r30, 0x24	; 36
    50a4:	f3 07       	cpc	r31, r19
    50a6:	29 f7       	brne	.-54     	; 0x5072 <nrk_sem_post+0x72>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    50a8:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
	}
		
return NRK_OK;
    50ac:	81 e0       	ldi	r24, 0x01	; 1
}
    50ae:	0f 90       	pop	r0
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	1f 91       	pop	r17
    50b6:	0f 91       	pop	r16
    50b8:	08 95       	ret

000050ba <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    50ba:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    50be:	8f 3f       	cpi	r24, 0xFF	; 255
    50c0:	11 f4       	brne	.+4      	; 0x50c6 <nrk_sem_delete+0xc>
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	02 c0       	rjmp	.+4      	; 0x50ca <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    50c6:	82 30       	cpi	r24, 0x02	; 2
    50c8:	21 f4       	brne	.+8      	; 0x50d2 <nrk_sem_delete+0x18>
    50ca:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
    50ce:	8f ef       	ldi	r24, 0xFF	; 255
    50d0:	08 95       	ret

	nrk_sem_list[id].count=-1;
    50d2:	99 27       	eor	r25, r25
    50d4:	87 fd       	sbrc	r24, 7
    50d6:	90 95       	com	r25
    50d8:	fc 01       	movw	r30, r24
    50da:	ee 0f       	add	r30, r30
    50dc:	ff 1f       	adc	r31, r31
    50de:	8e 0f       	add	r24, r30
    50e0:	9f 1f       	adc	r25, r31
    50e2:	fc 01       	movw	r30, r24
    50e4:	e1 5e       	subi	r30, 0xE1	; 225
    50e6:	f8 4e       	sbci	r31, 0xE8	; 232
    50e8:	8f ef       	ldi	r24, 0xFF	; 255
    50ea:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    50ec:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    50ee:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    50f0:	80 91 35 17 	lds	r24, 0x1735
    50f4:	81 50       	subi	r24, 0x01	; 1
    50f6:	80 93 35 17 	sts	0x1735, r24
return NRK_OK;
    50fa:	81 e0       	ldi	r24, 0x01	; 1
}
    50fc:	08 95       	ret

000050fe <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    50fe:	e0 91 2b 17 	lds	r30, 0x172B
    5102:	f0 91 2c 17 	lds	r31, 0x172C
}
    5106:	80 81       	ld	r24, Z
    5108:	08 95       	ret

0000510a <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    510a:	e0 91 2b 17 	lds	r30, 0x172B
    510e:	f0 91 2c 17 	lds	r31, 0x172C
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    5112:	30 97       	sbiw	r30, 0x00	; 0
    5114:	21 f0       	breq	.+8      	; 0x511e <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    5116:	03 80       	ldd	r0, Z+3	; 0x03
    5118:	f4 81       	ldd	r31, Z+4	; 0x04
    511a:	e0 2d       	mov	r30, r0
    511c:	fa cf       	rjmp	.-12     	; 0x5112 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    511e:	08 95       	ret

00005120 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    5120:	af 92       	push	r10
    5122:	bf 92       	push	r11
    5124:	cf 92       	push	r12
    5126:	df 92       	push	r13
    5128:	ef 92       	push	r14
    512a:	ff 92       	push	r15
    512c:	0f 93       	push	r16
    512e:	1f 93       	push	r17
    5130:	cf 93       	push	r28
    5132:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    5134:	e0 91 ee 15 	lds	r30, 0x15EE
    5138:	f0 91 ef 15 	lds	r31, 0x15EF
    513c:	30 97       	sbiw	r30, 0x00	; 0
    513e:	09 f4       	brne	.+2      	; 0x5142 <nrk_add_to_readyQ+0x22>
    5140:	94 c0       	rjmp	.+296    	; 0x526a <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    5142:	00 91 2b 17 	lds	r16, 0x172B
    5146:	10 91 2c 17 	lds	r17, 0x172C
    CurNode = _free_node;

    if (_head_node != NULL)
    514a:	01 15       	cp	r16, r1
    514c:	11 05       	cpc	r17, r1
    514e:	09 f4       	brne	.+2      	; 0x5152 <nrk_add_to_readyQ+0x32>
    5150:	4c c0       	rjmp	.+152    	; 0x51ea <nrk_add_to_readyQ+0xca>
    5152:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    5154:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    5156:	58 2f       	mov	r21, r24
    5158:	54 03       	mulsu	r21, r20
    515a:	90 01       	movw	r18, r0
    515c:	11 24       	eor	r1, r1
    515e:	20 51       	subi	r18, 0x10	; 16
    5160:	3a 4e       	sbci	r19, 0xEA	; 234
    5162:	79 01       	movw	r14, r18
    5164:	9a e0       	ldi	r25, 0x0A	; 10
    5166:	e9 0e       	add	r14, r25
    5168:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    516a:	69 01       	movw	r12, r18
    516c:	c4 e0       	ldi	r28, 0x04	; 4
    516e:	cc 0e       	add	r12, r28
    5170:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    5172:	59 01       	movw	r10, r18
    5174:	db e0       	ldi	r29, 0x0B	; 11
    5176:	ad 0e       	add	r10, r29
    5178:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    517a:	2c 91       	ld	r18, X
    517c:	30 e0       	ldi	r19, 0x00	; 0
    517e:	42 9f       	mul	r20, r18
    5180:	b0 01       	movw	r22, r0
    5182:	43 9f       	mul	r20, r19
    5184:	70 0d       	add	r23, r0
    5186:	11 24       	eor	r1, r1
    5188:	60 51       	subi	r22, 0x10	; 16
    518a:	7a 4e       	sbci	r23, 0xEA	; 234
    518c:	eb 01       	movw	r28, r22
    518e:	9c 81       	ldd	r25, Y+4	; 0x04
    5190:	99 23       	and	r25, r25
    5192:	29 f0       	breq	.+10     	; 0x519e <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    5194:	5b 85       	ldd	r21, Y+11	; 0x0b
    5196:	e7 01       	movw	r28, r14
    5198:	98 81       	ld	r25, Y
    519a:	59 17       	cp	r21, r25
    519c:	40 f1       	brcs	.+80     	; 0x51ee <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    519e:	e6 01       	movw	r28, r12
    51a0:	98 81       	ld	r25, Y
    51a2:	99 23       	and	r25, r25
    51a4:	69 f0       	breq	.+26     	; 0x51c0 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    51a6:	42 9f       	mul	r20, r18
    51a8:	b0 01       	movw	r22, r0
    51aa:	43 9f       	mul	r20, r19
    51ac:	70 0d       	add	r23, r0
    51ae:	11 24       	eor	r1, r1
    51b0:	60 51       	subi	r22, 0x10	; 16
    51b2:	7a 4e       	sbci	r23, 0xEA	; 234
    51b4:	eb 01       	movw	r28, r22
    51b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    51b8:	e5 01       	movw	r28, r10
    51ba:	98 81       	ld	r25, Y
    51bc:	59 17       	cp	r21, r25
    51be:	b8 f0       	brcs	.+46     	; 0x51ee <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    51c0:	42 9f       	mul	r20, r18
    51c2:	b0 01       	movw	r22, r0
    51c4:	43 9f       	mul	r20, r19
    51c6:	70 0d       	add	r23, r0
    51c8:	11 24       	eor	r1, r1
    51ca:	9b 01       	movw	r18, r22
    51cc:	20 51       	subi	r18, 0x10	; 16
    51ce:	3a 4e       	sbci	r19, 0xEA	; 234
    51d0:	e9 01       	movw	r28, r18
    51d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    51d4:	e7 01       	movw	r28, r14
    51d6:	98 81       	ld	r25, Y
    51d8:	29 17       	cp	r18, r25
    51da:	48 f0       	brcs	.+18     	; 0x51ee <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    51dc:	13 96       	adiw	r26, 0x03	; 3
    51de:	0d 90       	ld	r0, X+
    51e0:	bc 91       	ld	r27, X
    51e2:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    51e4:	10 97       	sbiw	r26, 0x00	; 0
    51e6:	49 f6       	brne	.-110    	; 0x517a <nrk_add_to_readyQ+0x5a>
    51e8:	02 c0       	rjmp	.+4      	; 0x51ee <nrk_add_to_readyQ+0xce>
    51ea:	a0 e0       	ldi	r26, 0x00	; 0
    51ec:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    51ee:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    51f0:	c3 81       	ldd	r28, Z+3	; 0x03
    51f2:	d4 81       	ldd	r29, Z+4	; 0x04
    51f4:	d0 93 ef 15 	sts	0x15EF, r29
    51f8:	c0 93 ee 15 	sts	0x15EE, r28

    if (NextNode == _head_node)
    51fc:	a0 17       	cp	r26, r16
    51fe:	b1 07       	cpc	r27, r17
    5200:	b1 f4       	brne	.+44     	; 0x522e <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    5202:	10 97       	sbiw	r26, 0x00	; 0
    5204:	49 f0       	breq	.+18     	; 0x5218 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    5206:	b4 83       	std	Z+4, r27	; 0x04
    5208:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    520a:	12 82       	std	Z+2, r1	; 0x02
    520c:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    520e:	12 96       	adiw	r26, 0x02	; 2
    5210:	fc 93       	st	X, r31
    5212:	ee 93       	st	-X, r30
    5214:	11 97       	sbiw	r26, 0x01	; 1
    5216:	06 c0       	rjmp	.+12     	; 0x5224 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    5218:	14 82       	std	Z+4, r1	; 0x04
    521a:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    521c:	12 82       	std	Z+2, r1	; 0x02
    521e:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    5220:	fa 83       	std	Y+2, r31	; 0x02
    5222:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    5224:	f0 93 2c 17 	sts	0x172C, r31
    5228:	e0 93 2b 17 	sts	0x172B, r30
    522c:	1e c0       	rjmp	.+60     	; 0x526a <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    522e:	ac 17       	cp	r26, r28
    5230:	bd 07       	cpc	r27, r29
    5232:	79 f0       	breq	.+30     	; 0x5252 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    5234:	11 96       	adiw	r26, 0x01	; 1
    5236:	8d 91       	ld	r24, X+
    5238:	9c 91       	ld	r25, X
    523a:	12 97       	sbiw	r26, 0x02	; 2
    523c:	92 83       	std	Z+2, r25	; 0x02
    523e:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    5240:	b4 83       	std	Z+4, r27	; 0x04
    5242:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    5244:	11 96       	adiw	r26, 0x01	; 1
    5246:	cd 91       	ld	r28, X+
    5248:	dc 91       	ld	r29, X
    524a:	12 97       	sbiw	r26, 0x02	; 2
    524c:	fc 83       	std	Y+4, r31	; 0x04
    524e:	eb 83       	std	Y+3, r30	; 0x03
    5250:	08 c0       	rjmp	.+16     	; 0x5262 <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    5252:	14 82       	std	Z+4, r1	; 0x04
    5254:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    5256:	11 96       	adiw	r26, 0x01	; 1
    5258:	8d 91       	ld	r24, X+
    525a:	9c 91       	ld	r25, X
    525c:	12 97       	sbiw	r26, 0x02	; 2
    525e:	92 83       	std	Z+2, r25	; 0x02
    5260:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    5262:	12 96       	adiw	r26, 0x02	; 2
    5264:	fc 93       	st	X, r31
    5266:	ee 93       	st	-X, r30
    5268:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    526a:	df 91       	pop	r29
    526c:	cf 91       	pop	r28
    526e:	1f 91       	pop	r17
    5270:	0f 91       	pop	r16
    5272:	ff 90       	pop	r15
    5274:	ef 90       	pop	r14
    5276:	df 90       	pop	r13
    5278:	cf 90       	pop	r12
    527a:	bf 90       	pop	r11
    527c:	af 90       	pop	r10
    527e:	08 95       	ret

00005280 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    5280:	cf 93       	push	r28
    5282:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    5284:	e0 91 2b 17 	lds	r30, 0x172B
    5288:	f0 91 2c 17 	lds	r31, 0x172C
    528c:	30 97       	sbiw	r30, 0x00	; 0
    528e:	09 f4       	brne	.+2      	; 0x5292 <nrk_rem_from_readyQ+0x12>
    5290:	44 c0       	rjmp	.+136    	; 0x531a <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    5292:	99 27       	eor	r25, r25
    5294:	87 fd       	sbrc	r24, 7
    5296:	90 95       	com	r25
    5298:	20 81       	ld	r18, Z
    529a:	30 e0       	ldi	r19, 0x00	; 0
    529c:	28 17       	cp	r18, r24
    529e:	39 07       	cpc	r19, r25
    52a0:	81 f4       	brne	.+32     	; 0x52c2 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    52a2:	a3 81       	ldd	r26, Z+3	; 0x03
    52a4:	b4 81       	ldd	r27, Z+4	; 0x04
    52a6:	b0 93 2c 17 	sts	0x172C, r27
    52aa:	a0 93 2b 17 	sts	0x172B, r26
        _head_node->Prev = NULL;
    52ae:	12 96       	adiw	r26, 0x02	; 2
    52b0:	1c 92       	st	X, r1
    52b2:	1e 92       	st	-X, r1
    52b4:	11 97       	sbiw	r26, 0x01	; 1
    52b6:	18 c0       	rjmp	.+48     	; 0x52e8 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    52b8:	03 80       	ldd	r0, Z+3	; 0x03
    52ba:	f4 81       	ldd	r31, Z+4	; 0x04
    52bc:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    52be:	30 97       	sbiw	r30, 0x00	; 0
    52c0:	61 f1       	breq	.+88     	; 0x531a <nrk_rem_from_readyQ+0x9a>
    52c2:	20 81       	ld	r18, Z
    52c4:	30 e0       	ldi	r19, 0x00	; 0
    52c6:	28 17       	cp	r18, r24
    52c8:	39 07       	cpc	r19, r25
    52ca:	b1 f7       	brne	.-20     	; 0x52b8 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    52cc:	c1 81       	ldd	r28, Z+1	; 0x01
    52ce:	d2 81       	ldd	r29, Z+2	; 0x02
    52d0:	83 81       	ldd	r24, Z+3	; 0x03
    52d2:	94 81       	ldd	r25, Z+4	; 0x04
    52d4:	9c 83       	std	Y+4, r25	; 0x04
    52d6:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    52d8:	a3 81       	ldd	r26, Z+3	; 0x03
    52da:	b4 81       	ldd	r27, Z+4	; 0x04
    52dc:	10 97       	sbiw	r26, 0x00	; 0
    52de:	21 f0       	breq	.+8      	; 0x52e8 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    52e0:	12 96       	adiw	r26, 0x02	; 2
    52e2:	dc 93       	st	X, r29
    52e4:	ce 93       	st	-X, r28
    52e6:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    52e8:	a0 91 ee 15 	lds	r26, 0x15EE
    52ec:	b0 91 ef 15 	lds	r27, 0x15EF
    52f0:	10 97       	sbiw	r26, 0x00	; 0
    52f2:	39 f4       	brne	.+14     	; 0x5302 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    52f4:	f0 93 ef 15 	sts	0x15EF, r31
    52f8:	e0 93 ee 15 	sts	0x15EE, r30
        _free_node->Next = NULL;
    52fc:	14 82       	std	Z+4, r1	; 0x04
    52fe:	13 82       	std	Z+3, r1	; 0x03
    5300:	0a c0       	rjmp	.+20     	; 0x5316 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    5302:	b4 83       	std	Z+4, r27	; 0x04
    5304:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    5306:	12 96       	adiw	r26, 0x02	; 2
    5308:	fc 93       	st	X, r31
    530a:	ee 93       	st	-X, r30
    530c:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    530e:	f0 93 ef 15 	sts	0x15EF, r31
    5312:	e0 93 ee 15 	sts	0x15EE, r30
    }
    _free_node->Prev = NULL;
    5316:	12 82       	std	Z+2, r1	; 0x02
    5318:	11 82       	std	Z+1, r1	; 0x01
}
    531a:	df 91       	pop	r29
    531c:	cf 91       	pop	r28
    531e:	08 95       	ret

00005320 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    5320:	ef 92       	push	r14
    5322:	ff 92       	push	r15
    5324:	0f 93       	push	r16
    5326:	1f 93       	push	r17
    5328:	cf 93       	push	r28
    532a:	df 93       	push	r29
    532c:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    532e:	4b 81       	ldd	r20, Y+3	; 0x03
    5330:	5c 81       	ldd	r21, Y+4	; 0x04
    5332:	69 81       	ldd	r22, Y+1	; 0x01
    5334:	7a 81       	ldd	r23, Y+2	; 0x02
    5336:	8d 81       	ldd	r24, Y+5	; 0x05
    5338:	9e 81       	ldd	r25, Y+6	; 0x06
    533a:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    533e:	2f 81       	ldd	r18, Y+7	; 0x07
    5340:	22 23       	and	r18, r18
    5342:	71 f0       	breq	.+28     	; 0x5360 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    5344:	4b 81       	ldd	r20, Y+3	; 0x03
    5346:	5c 81       	ldd	r21, Y+4	; 0x04
    5348:	e1 2c       	mov	r14, r1
    534a:	f1 2c       	mov	r15, r1
    534c:	00 e0       	ldi	r16, 0x00	; 0
    534e:	10 e0       	ldi	r17, 0x00	; 0
    5350:	20 e0       	ldi	r18, 0x00	; 0
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	bc 01       	movw	r22, r24
    5356:	ce 01       	movw	r24, r28
    5358:	0e 94 4e 22 	call	0x449c	; 0x449c <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    535c:	1f 82       	std	Y+7, r1	; 0x07
    535e:	0c c0       	rjmp	.+24     	; 0x5378 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    5360:	e8 81       	ld	r30, Y
    5362:	2b e2       	ldi	r18, 0x2B	; 43
    5364:	e2 02       	muls	r30, r18
    5366:	f0 01       	movw	r30, r0
    5368:	11 24       	eor	r1, r1
    536a:	e0 51       	subi	r30, 0x10	; 16
    536c:	fa 4e       	sbci	r31, 0xEA	; 234
    536e:	21 85       	ldd	r18, Z+9	; 0x09
    5370:	23 30       	cpi	r18, 0x03	; 3
    5372:	b9 f4       	brne	.+46     	; 0x53a2 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    5374:	91 83       	std	Z+1, r25	; 0x01
    5376:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    5378:	e8 81       	ld	r30, Y
    537a:	8b e2       	ldi	r24, 0x2B	; 43
    537c:	e8 02       	muls	r30, r24
    537e:	f0 01       	movw	r30, r0
    5380:	11 24       	eor	r1, r1
    5382:	e0 51       	subi	r30, 0x10	; 16
    5384:	fa 4e       	sbci	r31, 0xEA	; 234
    5386:	85 89       	ldd	r24, Z+21	; 0x15
    5388:	96 89       	ldd	r25, Z+22	; 0x16
    538a:	a7 89       	ldd	r26, Z+23	; 0x17
    538c:	b0 8d       	ldd	r27, Z+24	; 0x18
    538e:	89 2b       	or	r24, r25
    5390:	8a 2b       	or	r24, r26
    5392:	8b 2b       	or	r24, r27
    5394:	41 f4       	brne	.+16     	; 0x53a6 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    5396:	82 e0       	ldi	r24, 0x02	; 2
    5398:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    539a:	88 81       	ld	r24, Y
    539c:	0e 94 90 28 	call	0x5120	; 0x5120 <nrk_add_to_readyQ>
    53a0:	02 c0       	rjmp	.+4      	; 0x53a6 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    53a2:	8f ef       	ldi	r24, 0xFF	; 255
    53a4:	01 c0       	rjmp	.+2      	; 0x53a8 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    53a6:	81 e0       	ldi	r24, 0x01	; 1
}
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	1f 91       	pop	r17
    53ae:	0f 91       	pop	r16
    53b0:	ff 90       	pop	r15
    53b2:	ef 90       	pop	r14
    53b4:	08 95       	ret

000053b6 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    53b6:	1f 93       	push	r17
    53b8:	cf 93       	push	r28
    53ba:	df 93       	push	r29
    53bc:	cd b7       	in	r28, 0x3d	; 61
    53be:	de b7       	in	r29, 0x3e	; 62
    53c0:	28 97       	sbiw	r28, 0x08	; 8
    53c2:	0f b6       	in	r0, 0x3f	; 63
    53c4:	f8 94       	cli
    53c6:	de bf       	out	0x3e, r29	; 62
    53c8:	0f be       	out	0x3f, r0	; 63
    53ca:	cd bf       	out	0x3d, r28	; 61
    53cc:	29 83       	std	Y+1, r18	; 0x01
    53ce:	3a 83       	std	Y+2, r19	; 0x02
    53d0:	4b 83       	std	Y+3, r20	; 0x03
    53d2:	5c 83       	std	Y+4, r21	; 0x04
    53d4:	6d 83       	std	Y+5, r22	; 0x05
    53d6:	7e 83       	std	Y+6, r23	; 0x06
    53d8:	8f 83       	std	Y+7, r24	; 0x07
    53da:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    53dc:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    53e0:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    53e4:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    53e6:	ce 01       	movw	r24, r28
    53e8:	01 96       	adiw	r24, 0x01	; 1
    53ea:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    53ee:	63 30       	cpi	r22, 0x03	; 3
    53f0:	71 05       	cpc	r23, r1
    53f2:	98 f0       	brcs	.+38     	; 0x541a <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    53f4:	e0 91 36 17 	lds	r30, 0x1736
    53f8:	f0 91 37 17 	lds	r31, 0x1737
    53fc:	21 2f       	mov	r18, r17
    53fe:	30 e0       	ldi	r19, 0x00	; 0
    5400:	62 0f       	add	r22, r18
    5402:	73 1f       	adc	r23, r19
    5404:	cb 01       	movw	r24, r22
    5406:	a0 e0       	ldi	r26, 0x00	; 0
    5408:	b0 e0       	ldi	r27, 0x00	; 0
    540a:	85 8b       	std	Z+21, r24	; 0x15
    540c:	96 8b       	std	Z+22, r25	; 0x16
    540e:	a7 8b       	std	Z+23, r26	; 0x17
    5410:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    5412:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>

    return NRK_OK;
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	01 c0       	rjmp	.+2      	; 0x541c <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    541a:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    541c:	28 96       	adiw	r28, 0x08	; 8
    541e:	0f b6       	in	r0, 0x3f	; 63
    5420:	f8 94       	cli
    5422:	de bf       	out	0x3e, r29	; 62
    5424:	0f be       	out	0x3f, r0	; 63
    5426:	cd bf       	out	0x3d, r28	; 61
    5428:	df 91       	pop	r29
    542a:	cf 91       	pop	r28
    542c:	1f 91       	pop	r17
    542e:	08 95       	ret

00005430 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    5430:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    5434:	e0 91 36 17 	lds	r30, 0x1736
    5438:	f0 91 37 17 	lds	r31, 0x1737
    543c:	85 81       	ldd	r24, Z+5	; 0x05
    543e:	81 11       	cpse	r24, r1
    5440:	f7 cf       	rjmp	.-18     	; 0x5430 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    5442:	08 95       	ret

00005444 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    5444:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    5446:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    544a:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    544e:	e0 91 36 17 	lds	r30, 0x1736
    5452:	f0 91 37 17 	lds	r31, 0x1737
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	92 a7       	std	Z+42, r25	; 0x2a
    545c:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    545e:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    5460:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    5464:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    5466:	88 3f       	cpi	r24, 0xF8	; 248
    5468:	80 f4       	brcc	.+32     	; 0x548a <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    546a:	0e 94 10 33 	call	0x6620	; 0x6620 <_nrk_get_next_wakeup>
    546e:	2c 2f       	mov	r18, r28
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	2f 5f       	subi	r18, 0xFF	; 255
    5474:	3f 4f       	sbci	r19, 0xFF	; 255
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	28 17       	cp	r18, r24
    547a:	39 07       	cpc	r19, r25
    547c:	34 f4       	brge	.+12     	; 0x548a <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    547e:	82 e0       	ldi	r24, 0x02	; 2
    5480:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    5482:	80 93 4f 15 	sts	0x154F, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    5486:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    548a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    548e:	0e 94 18 2a 	call	0x5430	; 0x5430 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    5492:	81 e0       	ldi	r24, 0x01	; 1
    5494:	cf 91       	pop	r28
    5496:	08 95       	ret

00005498 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    5498:	e0 91 36 17 	lds	r30, 0x1736
    549c:	f0 91 37 17 	lds	r31, 0x1737
    54a0:	80 85       	ldd	r24, Z+8	; 0x08
    54a2:	0e 94 40 29 	call	0x5280	; 0x5280 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    54a6:	e0 91 36 17 	lds	r30, 0x1736
    54aa:	f0 91 37 17 	lds	r31, 0x1737
    54ae:	84 e0       	ldi	r24, 0x04	; 4
    54b0:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    54b2:	0e 94 22 2a 	call	0x5444	; 0x5444 <nrk_wait_until_next_period>
    return NRK_OK;
}
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	08 95       	ret

000054ba <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    54ba:	cf 93       	push	r28
    54bc:	df 93       	push	r29
    54be:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    54c0:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <nrk_stack_check>

    if (p == 0)
    54c4:	20 97       	sbiw	r28, 0x00	; 0
    54c6:	11 f4       	brne	.+4      	; 0x54cc <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    54c8:	c1 e0       	ldi	r28, 0x01	; 1
    54ca:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    54cc:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    54d0:	e0 91 36 17 	lds	r30, 0x1736
    54d4:	f0 91 37 17 	lds	r31, 0x1737
    54d8:	81 e0       	ldi	r24, 0x01	; 1
    54da:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    54dc:	d2 a7       	std	Z+42, r29	; 0x2a
    54de:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    54e0:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    54e4:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    54e6:	88 3f       	cpi	r24, 0xF8	; 248
    54e8:	80 f4       	brcc	.+32     	; 0x550a <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    54ea:	0e 94 10 33 	call	0x6620	; 0x6620 <_nrk_get_next_wakeup>
    54ee:	2c 2f       	mov	r18, r28
    54f0:	30 e0       	ldi	r19, 0x00	; 0
    54f2:	2f 5f       	subi	r18, 0xFF	; 255
    54f4:	3f 4f       	sbci	r19, 0xFF	; 255
    54f6:	90 e0       	ldi	r25, 0x00	; 0
    54f8:	28 17       	cp	r18, r24
    54fa:	39 07       	cpc	r19, r25
    54fc:	34 f4       	brge	.+12     	; 0x550a <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    54fe:	82 e0       	ldi	r24, 0x02	; 2
    5500:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    5502:	80 93 4f 15 	sts	0x154F, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    5506:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    550a:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    550e:	0e 94 18 2a 	call	0x5430	; 0x5430 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	df 91       	pop	r29
    5516:	cf 91       	pop	r28
    5518:	08 95       	ret

0000551a <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    551a:	ef 92       	push	r14
    551c:	ff 92       	push	r15
    551e:	0f 93       	push	r16
    5520:	1f 93       	push	r17
    5522:	cf 93       	push	r28
    5524:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    5526:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    552a:	e0 91 36 17 	lds	r30, 0x1736
    552e:	f0 91 37 17 	lds	r31, 0x1737
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    5536:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    553a:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    553c:	e0 91 36 17 	lds	r30, 0x1736
    5540:	f0 91 37 17 	lds	r31, 0x1737
    5544:	e8 2e       	mov	r14, r24
    5546:	f1 2c       	mov	r15, r1
    5548:	c7 01       	movw	r24, r14
    554a:	80 0f       	add	r24, r16
    554c:	91 1f       	adc	r25, r17
    554e:	a0 e0       	ldi	r26, 0x00	; 0
    5550:	b0 e0       	ldi	r27, 0x00	; 0
    5552:	85 8b       	std	Z+21, r24	; 0x15
    5554:	96 8b       	std	Z+22, r25	; 0x16
    5556:	a7 8b       	std	Z+23, r26	; 0x17
    5558:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    555a:	c8 3f       	cpi	r28, 0xF8	; 248
    555c:	78 f4       	brcc	.+30     	; 0x557c <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    555e:	0e 94 10 33 	call	0x6620	; 0x6620 <_nrk_get_next_wakeup>
    5562:	9f ef       	ldi	r25, 0xFF	; 255
    5564:	e9 1a       	sub	r14, r25
    5566:	f9 0a       	sbc	r15, r25
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	e8 16       	cp	r14, r24
    556c:	f9 06       	cpc	r15, r25
    556e:	34 f4       	brge	.+12     	; 0x557c <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    5570:	82 e0       	ldi	r24, 0x02	; 2
    5572:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    5574:	80 93 4f 15 	sts	0x154F, r24
            _nrk_set_next_wakeup (timer);
    5578:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    557c:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    5580:	0e 94 18 2a 	call	0x5430	; 0x5430 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	cf 91       	pop	r28
    5588:	1f 91       	pop	r17
    558a:	0f 91       	pop	r16
    558c:	ff 90       	pop	r15
    558e:	ef 90       	pop	r14
    5590:	08 95       	ret

00005592 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    5598:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    559c:	e0 91 36 17 	lds	r30, 0x1736
    55a0:	f0 91 37 17 	lds	r31, 0x1737
    55a4:	21 e0       	ldi	r18, 0x01	; 1
    55a6:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    55a8:	ce 01       	movw	r24, r28
    55aa:	a0 e0       	ldi	r26, 0x00	; 0
    55ac:	b0 e0       	ldi	r27, 0x00	; 0
    55ae:	85 8b       	std	Z+21, r24	; 0x15
    55b0:	96 8b       	std	Z+22, r25	; 0x16
    55b2:	a7 8b       	std	Z+23, r26	; 0x17
    55b4:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    55b6:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    55ba:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    55bc:	88 3f       	cpi	r24, 0xF8	; 248
    55be:	80 f4       	brcc	.+32     	; 0x55e0 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    55c0:	0e 94 10 33 	call	0x6620	; 0x6620 <_nrk_get_next_wakeup>
    55c4:	2c 2f       	mov	r18, r28
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	2f 5f       	subi	r18, 0xFF	; 255
    55ca:	3f 4f       	sbci	r19, 0xFF	; 255
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	28 17       	cp	r18, r24
    55d0:	39 07       	cpc	r19, r25
    55d2:	34 f4       	brge	.+12     	; 0x55e0 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    55d4:	82 e0       	ldi	r24, 0x02	; 2
    55d6:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    55d8:	80 93 4f 15 	sts	0x154F, r24
            _nrk_set_next_wakeup (timer);
    55dc:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    55e0:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    55e4:	0e 94 18 2a 	call	0x5430	; 0x5430 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	df 91       	pop	r29
    55ec:	cf 91       	pop	r28
    55ee:	08 95       	ret

000055f0 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    55f0:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    55f2:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    55f6:	e0 91 36 17 	lds	r30, 0x1736
    55fa:	f0 91 37 17 	lds	r31, 0x1737
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    5602:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    5604:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    5608:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    560a:	88 3f       	cpi	r24, 0xF8	; 248
    560c:	80 f4       	brcc	.+32     	; 0x562e <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    560e:	0e 94 10 33 	call	0x6620	; 0x6620 <_nrk_get_next_wakeup>
    5612:	2c 2f       	mov	r18, r28
    5614:	30 e0       	ldi	r19, 0x00	; 0
    5616:	2f 5f       	subi	r18, 0xFF	; 255
    5618:	3f 4f       	sbci	r19, 0xFF	; 255
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	28 17       	cp	r18, r24
    561e:	39 07       	cpc	r19, r25
    5620:	34 f4       	brge	.+12     	; 0x562e <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    5622:	82 e0       	ldi	r24, 0x02	; 2
    5624:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    5626:	80 93 4f 15 	sts	0x154F, r24
            _nrk_set_next_wakeup (timer);
    562a:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    562e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    5632:	0e 94 18 2a 	call	0x5430	; 0x5430 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    5636:	81 e0       	ldi	r24, 0x01	; 1
    5638:	cf 91       	pop	r28
    563a:	08 95       	ret

0000563c <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    563c:	1f 93       	push	r17
    563e:	cf 93       	push	r28
    5640:	df 93       	push	r29
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	28 97       	sbiw	r28, 0x08	; 8
    5648:	0f b6       	in	r0, 0x3f	; 63
    564a:	f8 94       	cli
    564c:	de bf       	out	0x3e, r29	; 62
    564e:	0f be       	out	0x3f, r0	; 63
    5650:	cd bf       	out	0x3d, r28	; 61
    5652:	29 83       	std	Y+1, r18	; 0x01
    5654:	3a 83       	std	Y+2, r19	; 0x02
    5656:	4b 83       	std	Y+3, r20	; 0x03
    5658:	5c 83       	std	Y+4, r21	; 0x04
    565a:	6d 83       	std	Y+5, r22	; 0x05
    565c:	7e 83       	std	Y+6, r23	; 0x06
    565e:	8f 83       	std	Y+7, r24	; 0x07
    5660:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    5662:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <nrk_stack_check>

    nrk_int_disable ();
    5666:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    566a:	e0 91 36 17 	lds	r30, 0x1736
    566e:	f0 91 37 17 	lds	r31, 0x1737
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    5676:	81 e0       	ldi	r24, 0x01	; 1
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	92 a7       	std	Z+42, r25	; 0x2a
    567c:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    567e:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    5682:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    5684:	ce 01       	movw	r24, r28
    5686:	01 96       	adiw	r24, 0x01	; 1
    5688:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    568c:	e0 91 36 17 	lds	r30, 0x1736
    5690:	f0 91 37 17 	lds	r31, 0x1737
    5694:	dc 01       	movw	r26, r24
    5696:	cb 01       	movw	r24, r22
    5698:	81 0f       	add	r24, r17
    569a:	91 1d       	adc	r25, r1
    569c:	a1 1d       	adc	r26, r1
    569e:	b1 1d       	adc	r27, r1
    56a0:	85 8b       	std	Z+21, r24	; 0x15
    56a2:	96 8b       	std	Z+22, r25	; 0x16
    56a4:	a7 8b       	std	Z+23, r26	; 0x17
    56a6:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    56a8:	18 3f       	cpi	r17, 0xF8	; 248
    56aa:	80 f4       	brcc	.+32     	; 0x56cc <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    56ac:	0e 94 10 33 	call	0x6620	; 0x6620 <_nrk_get_next_wakeup>
    56b0:	21 2f       	mov	r18, r17
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	2f 5f       	subi	r18, 0xFF	; 255
    56b6:	3f 4f       	sbci	r19, 0xFF	; 255
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	28 17       	cp	r18, r24
    56bc:	39 07       	cpc	r19, r25
    56be:	34 f4       	brge	.+12     	; 0x56cc <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    56c0:	82 e0       	ldi	r24, 0x02	; 2
    56c2:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    56c4:	80 93 4f 15 	sts	0x154F, r24
            _nrk_set_next_wakeup (timer);
    56c8:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    56cc:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    56d0:	0e 94 18 2a 	call	0x5430	; 0x5430 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	28 96       	adiw	r28, 0x08	; 8
    56d8:	0f b6       	in	r0, 0x3f	; 63
    56da:	f8 94       	cli
    56dc:	de bf       	out	0x3e, r29	; 62
    56de:	0f be       	out	0x3f, r0	; 63
    56e0:	cd bf       	out	0x3d, r28	; 61
    56e2:	df 91       	pop	r29
    56e4:	cf 91       	pop	r28
    56e6:	1f 91       	pop	r17
    56e8:	08 95       	ret

000056ea <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    56ea:	8f 92       	push	r8
    56ec:	9f 92       	push	r9
    56ee:	af 92       	push	r10
    56f0:	bf 92       	push	r11
    56f2:	cf 92       	push	r12
    56f4:	df 92       	push	r13
    56f6:	ef 92       	push	r14
    56f8:	ff 92       	push	r15
    56fa:	0f 93       	push	r16
    56fc:	1f 93       	push	r17
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	cd b7       	in	r28, 0x3d	; 61
    5704:	de b7       	in	r29, 0x3e	; 62
    5706:	60 97       	sbiw	r28, 0x10	; 16
    5708:	0f b6       	in	r0, 0x3f	; 63
    570a:	f8 94       	cli
    570c:	de bf       	out	0x3e, r29	; 62
    570e:	0f be       	out	0x3f, r0	; 63
    5710:	cd bf       	out	0x3d, r28	; 61
    5712:	29 87       	std	Y+9, r18	; 0x09
    5714:	3a 87       	std	Y+10, r19	; 0x0a
    5716:	4b 87       	std	Y+11, r20	; 0x0b
    5718:	5c 87       	std	Y+12, r21	; 0x0c
    571a:	6d 87       	std	Y+13, r22	; 0x0d
    571c:	7e 87       	std	Y+14, r23	; 0x0e
    571e:	8f 87       	std	Y+15, r24	; 0x0f
    5720:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    5722:	ce 01       	movw	r24, r28
    5724:	01 96       	adiw	r24, 0x01	; 1
    5726:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    572a:	89 80       	ldd	r8, Y+1	; 0x01
    572c:	9a 80       	ldd	r9, Y+2	; 0x02
    572e:	ab 80       	ldd	r10, Y+3	; 0x03
    5730:	bc 80       	ldd	r11, Y+4	; 0x04
    5732:	cd 80       	ldd	r12, Y+5	; 0x05
    5734:	de 80       	ldd	r13, Y+6	; 0x06
    5736:	ef 80       	ldd	r14, Y+7	; 0x07
    5738:	f8 84       	ldd	r15, Y+8	; 0x08
    573a:	09 85       	ldd	r16, Y+9	; 0x09
    573c:	1a 85       	ldd	r17, Y+10	; 0x0a
    573e:	2b 85       	ldd	r18, Y+11	; 0x0b
    5740:	3c 85       	ldd	r19, Y+12	; 0x0c
    5742:	4d 85       	ldd	r20, Y+13	; 0x0d
    5744:	5e 85       	ldd	r21, Y+14	; 0x0e
    5746:	6f 85       	ldd	r22, Y+15	; 0x0f
    5748:	78 89       	ldd	r23, Y+16	; 0x10
    574a:	ce 01       	movw	r24, r28
    574c:	09 96       	adiw	r24, 0x09	; 9
    574e:	0e 94 2e 2c 	call	0x585c	; 0x585c <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    5752:	8f 3f       	cpi	r24, 0xFF	; 255
    5754:	61 f0       	breq	.+24     	; 0x576e <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    5756:	29 85       	ldd	r18, Y+9	; 0x09
    5758:	3a 85       	ldd	r19, Y+10	; 0x0a
    575a:	4b 85       	ldd	r20, Y+11	; 0x0b
    575c:	5c 85       	ldd	r21, Y+12	; 0x0c
    575e:	6d 85       	ldd	r22, Y+13	; 0x0d
    5760:	7e 85       	ldd	r23, Y+14	; 0x0e
    5762:	8f 85       	ldd	r24, Y+15	; 0x0f
    5764:	98 89       	ldd	r25, Y+16	; 0x10
    5766:	0e 94 1e 2b 	call	0x563c	; 0x563c <nrk_wait>

    return NRK_OK;
    576a:	81 e0       	ldi	r24, 0x01	; 1
    576c:	01 c0       	rjmp	.+2      	; 0x5770 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    576e:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    5770:	60 96       	adiw	r28, 0x10	; 16
    5772:	0f b6       	in	r0, 0x3f	; 63
    5774:	f8 94       	cli
    5776:	de bf       	out	0x3e, r29	; 62
    5778:	0f be       	out	0x3f, r0	; 63
    577a:	cd bf       	out	0x3d, r28	; 61
    577c:	df 91       	pop	r29
    577e:	cf 91       	pop	r28
    5780:	1f 91       	pop	r17
    5782:	0f 91       	pop	r16
    5784:	ff 90       	pop	r15
    5786:	ef 90       	pop	r14
    5788:	df 90       	pop	r13
    578a:	cf 90       	pop	r12
    578c:	bf 90       	pop	r11
    578e:	af 90       	pop	r10
    5790:	9f 90       	pop	r9
    5792:	8f 90       	pop	r8
    5794:	08 95       	ret

00005796 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    5796:	e0 91 36 17 	lds	r30, 0x1736
    579a:	f0 91 37 17 	lds	r31, 0x1737
}
    579e:	80 85       	ldd	r24, Z+8	; 0x08
    57a0:	08 95       	ret

000057a2 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    57a2:	0f 93       	push	r16
    57a4:	1f 93       	push	r17
    57a6:	cf 93       	push	r28
    57a8:	df 93       	push	r29
    57aa:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    57ac:	1c 82       	std	Y+4, r1	; 0x04
    57ae:	1d 82       	std	Y+5, r1	; 0x05
    57b0:	1e 82       	std	Y+6, r1	; 0x06
    57b2:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    57b4:	80 91 2d 17 	lds	r24, 0x172D
    57b8:	90 91 2e 17 	lds	r25, 0x172E
    57bc:	a0 91 2f 17 	lds	r26, 0x172F
    57c0:	b0 91 30 17 	lds	r27, 0x1730
    57c4:	88 83       	st	Y, r24
    57c6:	99 83       	std	Y+1, r25	; 0x01
    57c8:	aa 83       	std	Y+2, r26	; 0x02
    57ca:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    57cc:	80 91 31 17 	lds	r24, 0x1731
    57d0:	90 91 32 17 	lds	r25, 0x1732
    57d4:	a0 91 33 17 	lds	r26, 0x1733
    57d8:	b0 91 34 17 	lds	r27, 0x1734
    57dc:	8c 83       	std	Y+4, r24	; 0x04
    57de:	9d 83       	std	Y+5, r25	; 0x05
    57e0:	ae 83       	std	Y+6, r26	; 0x06
    57e2:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    57e4:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    57e8:	a8 2f       	mov	r26, r24
    57ea:	b0 e0       	ldi	r27, 0x00	; 0
    57ec:	23 eb       	ldi	r18, 0xB3	; 179
    57ee:	36 ee       	ldi	r19, 0xE6	; 230
    57f0:	4e e0       	ldi	r20, 0x0E	; 14
    57f2:	50 e0       	ldi	r21, 0x00	; 0
    57f4:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    57f8:	0c 81       	ldd	r16, Y+4	; 0x04
    57fa:	1d 81       	ldd	r17, Y+5	; 0x05
    57fc:	2e 81       	ldd	r18, Y+6	; 0x06
    57fe:	3f 81       	ldd	r19, Y+7	; 0x07
    5800:	dc 01       	movw	r26, r24
    5802:	cb 01       	movw	r24, r22
    5804:	80 0f       	add	r24, r16
    5806:	91 1f       	adc	r25, r17
    5808:	a2 1f       	adc	r26, r18
    580a:	b3 1f       	adc	r27, r19
    580c:	8c 83       	std	Y+4, r24	; 0x04
    580e:	9d 83       	std	Y+5, r25	; 0x05
    5810:	ae 83       	std	Y+6, r26	; 0x06
    5812:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    5814:	8c 81       	ldd	r24, Y+4	; 0x04
    5816:	9d 81       	ldd	r25, Y+5	; 0x05
    5818:	ae 81       	ldd	r26, Y+6	; 0x06
    581a:	bf 81       	ldd	r27, Y+7	; 0x07
    581c:	81 15       	cp	r24, r1
    581e:	2a ec       	ldi	r18, 0xCA	; 202
    5820:	92 07       	cpc	r25, r18
    5822:	2a e9       	ldi	r18, 0x9A	; 154
    5824:	a2 07       	cpc	r26, r18
    5826:	2b e3       	ldi	r18, 0x3B	; 59
    5828:	b2 07       	cpc	r27, r18
    582a:	98 f0       	brcs	.+38     	; 0x5852 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    582c:	9a 5c       	subi	r25, 0xCA	; 202
    582e:	aa 49       	sbci	r26, 0x9A	; 154
    5830:	bb 43       	sbci	r27, 0x3B	; 59
    5832:	8c 83       	std	Y+4, r24	; 0x04
    5834:	9d 83       	std	Y+5, r25	; 0x05
    5836:	ae 83       	std	Y+6, r26	; 0x06
    5838:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    583a:	88 81       	ld	r24, Y
    583c:	99 81       	ldd	r25, Y+1	; 0x01
    583e:	aa 81       	ldd	r26, Y+2	; 0x02
    5840:	bb 81       	ldd	r27, Y+3	; 0x03
    5842:	01 96       	adiw	r24, 0x01	; 1
    5844:	a1 1d       	adc	r26, r1
    5846:	b1 1d       	adc	r27, r1
    5848:	88 83       	st	Y, r24
    584a:	99 83       	std	Y+1, r25	; 0x01
    584c:	aa 83       	std	Y+2, r26	; 0x02
    584e:	bb 83       	std	Y+3, r27	; 0x03
    5850:	e1 cf       	rjmp	.-62     	; 0x5814 <nrk_time_get+0x72>
    }

}
    5852:	df 91       	pop	r29
    5854:	cf 91       	pop	r28
    5856:	1f 91       	pop	r17
    5858:	0f 91       	pop	r16
    585a:	08 95       	ret

0000585c <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    585c:	8f 92       	push	r8
    585e:	9f 92       	push	r9
    5860:	af 92       	push	r10
    5862:	bf 92       	push	r11
    5864:	cf 92       	push	r12
    5866:	df 92       	push	r13
    5868:	ef 92       	push	r14
    586a:	ff 92       	push	r15
    586c:	0f 93       	push	r16
    586e:	1f 93       	push	r17
    5870:	cf 93       	push	r28
    5872:	df 93       	push	r29
    5874:	cd b7       	in	r28, 0x3d	; 61
    5876:	de b7       	in	r29, 0x3e	; 62
    5878:	60 97       	sbiw	r28, 0x10	; 16
    587a:	0f b6       	in	r0, 0x3f	; 63
    587c:	f8 94       	cli
    587e:	de bf       	out	0x3e, r29	; 62
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	cd bf       	out	0x3d, r28	; 61
    5884:	fc 01       	movw	r30, r24
    5886:	09 83       	std	Y+1, r16	; 0x01
    5888:	1a 83       	std	Y+2, r17	; 0x02
    588a:	2b 83       	std	Y+3, r18	; 0x03
    588c:	3c 83       	std	Y+4, r19	; 0x04
    588e:	4d 83       	std	Y+5, r20	; 0x05
    5890:	5e 83       	std	Y+6, r21	; 0x06
    5892:	6f 83       	std	Y+7, r22	; 0x07
    5894:	78 87       	std	Y+8, r23	; 0x08
    5896:	89 86       	std	Y+9, r8	; 0x09
    5898:	9a 86       	std	Y+10, r9	; 0x0a
    589a:	ab 86       	std	Y+11, r10	; 0x0b
    589c:	bc 86       	std	Y+12, r11	; 0x0c
    589e:	cd 86       	std	Y+13, r12	; 0x0d
    58a0:	de 86       	std	Y+14, r13	; 0x0e
    58a2:	ef 86       	std	Y+15, r14	; 0x0f
    58a4:	f8 8a       	std	Y+16, r15	; 0x10
    58a6:	09 81       	ldd	r16, Y+1	; 0x01
    58a8:	1a 81       	ldd	r17, Y+2	; 0x02
    58aa:	2b 81       	ldd	r18, Y+3	; 0x03
    58ac:	3c 81       	ldd	r19, Y+4	; 0x04
    58ae:	4d 81       	ldd	r20, Y+5	; 0x05
    58b0:	5e 81       	ldd	r21, Y+6	; 0x06
    58b2:	6f 81       	ldd	r22, Y+7	; 0x07
    58b4:	78 85       	ldd	r23, Y+8	; 0x08
    58b6:	c9 84       	ldd	r12, Y+9	; 0x09
    58b8:	da 84       	ldd	r13, Y+10	; 0x0a
    58ba:	eb 84       	ldd	r14, Y+11	; 0x0b
    58bc:	fc 84       	ldd	r15, Y+12	; 0x0c
    58be:	8d 85       	ldd	r24, Y+13	; 0x0d
    58c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    58c2:	af 85       	ldd	r26, Y+15	; 0x0f
    58c4:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    58c6:	0c 15       	cp	r16, r12
    58c8:	1d 05       	cpc	r17, r13
    58ca:	2e 05       	cpc	r18, r14
    58cc:	3f 05       	cpc	r19, r15
    58ce:	f0 f1       	brcs	.+124    	; 0x594c <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    58d0:	c0 16       	cp	r12, r16
    58d2:	d1 06       	cpc	r13, r17
    58d4:	e2 06       	cpc	r14, r18
    58d6:	f3 06       	cpc	r15, r19
    58d8:	91 f4       	brne	.+36     	; 0x58fe <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    58da:	48 17       	cp	r20, r24
    58dc:	59 07       	cpc	r21, r25
    58de:	6a 07       	cpc	r22, r26
    58e0:	7b 07       	cpc	r23, r27
    58e2:	a0 f1       	brcs	.+104    	; 0x594c <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    58e4:	48 1b       	sub	r20, r24
    58e6:	59 0b       	sbc	r21, r25
    58e8:	6a 0b       	sbc	r22, r26
    58ea:	7b 0b       	sbc	r23, r27
    58ec:	44 83       	std	Z+4, r20	; 0x04
    58ee:	55 83       	std	Z+5, r21	; 0x05
    58f0:	66 83       	std	Z+6, r22	; 0x06
    58f2:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    58f4:	10 82       	st	Z, r1
    58f6:	11 82       	std	Z+1, r1	; 0x01
    58f8:	12 82       	std	Z+2, r1	; 0x02
    58fa:	13 82       	std	Z+3, r1	; 0x03
    58fc:	25 c0       	rjmp	.+74     	; 0x5948 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    58fe:	48 17       	cp	r20, r24
    5900:	59 07       	cpc	r21, r25
    5902:	6a 07       	cpc	r22, r26
    5904:	7b 07       	cpc	r23, r27
    5906:	80 f4       	brcc	.+32     	; 0x5928 <nrk_time_sub+0xcc>
{
	high.secs--;
    5908:	01 50       	subi	r16, 0x01	; 1
    590a:	11 09       	sbc	r17, r1
    590c:	21 09       	sbc	r18, r1
    590e:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    5910:	0c 19       	sub	r16, r12
    5912:	1d 09       	sbc	r17, r13
    5914:	2e 09       	sbc	r18, r14
    5916:	3f 09       	sbc	r19, r15
    5918:	00 83       	st	Z, r16
    591a:	11 83       	std	Z+1, r17	; 0x01
    591c:	22 83       	std	Z+2, r18	; 0x02
    591e:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    5920:	56 53       	subi	r21, 0x36	; 54
    5922:	65 46       	sbci	r22, 0x65	; 101
    5924:	74 4c       	sbci	r23, 0xC4	; 196
    5926:	08 c0       	rjmp	.+16     	; 0x5938 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    5928:	0c 19       	sub	r16, r12
    592a:	1d 09       	sbc	r17, r13
    592c:	2e 09       	sbc	r18, r14
    592e:	3f 09       	sbc	r19, r15
    5930:	00 83       	st	Z, r16
    5932:	11 83       	std	Z+1, r17	; 0x01
    5934:	22 83       	std	Z+2, r18	; 0x02
    5936:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    5938:	48 1b       	sub	r20, r24
    593a:	59 0b       	sbc	r21, r25
    593c:	6a 0b       	sbc	r22, r26
    593e:	7b 0b       	sbc	r23, r27
    5940:	44 83       	std	Z+4, r20	; 0x04
    5942:	55 83       	std	Z+5, r21	; 0x05
    5944:	66 83       	std	Z+6, r22	; 0x06
    5946:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	01 c0       	rjmp	.+2      	; 0x594e <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    594c:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    594e:	60 96       	adiw	r28, 0x10	; 16
    5950:	0f b6       	in	r0, 0x3f	; 63
    5952:	f8 94       	cli
    5954:	de bf       	out	0x3e, r29	; 62
    5956:	0f be       	out	0x3f, r0	; 63
    5958:	cd bf       	out	0x3d, r28	; 61
    595a:	df 91       	pop	r29
    595c:	cf 91       	pop	r28
    595e:	1f 91       	pop	r17
    5960:	0f 91       	pop	r16
    5962:	ff 90       	pop	r15
    5964:	ef 90       	pop	r14
    5966:	df 90       	pop	r13
    5968:	cf 90       	pop	r12
    596a:	bf 90       	pop	r11
    596c:	af 90       	pop	r10
    596e:	9f 90       	pop	r9
    5970:	8f 90       	pop	r8
    5972:	08 95       	ret

00005974 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    5974:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    5976:	44 81       	ldd	r20, Z+4	; 0x04
    5978:	55 81       	ldd	r21, Z+5	; 0x05
    597a:	66 81       	ldd	r22, Z+6	; 0x06
    597c:	77 81       	ldd	r23, Z+7	; 0x07
    597e:	41 15       	cp	r20, r1
    5980:	8a ec       	ldi	r24, 0xCA	; 202
    5982:	58 07       	cpc	r21, r24
    5984:	8a e9       	ldi	r24, 0x9A	; 154
    5986:	68 07       	cpc	r22, r24
    5988:	8b e3       	ldi	r24, 0x3B	; 59
    598a:	78 07       	cpc	r23, r24
    598c:	98 f0       	brcs	.+38     	; 0x59b4 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    598e:	5a 5c       	subi	r21, 0xCA	; 202
    5990:	6a 49       	sbci	r22, 0x9A	; 154
    5992:	7b 43       	sbci	r23, 0x3B	; 59
    5994:	44 83       	std	Z+4, r20	; 0x04
    5996:	55 83       	std	Z+5, r21	; 0x05
    5998:	66 83       	std	Z+6, r22	; 0x06
    599a:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    599c:	80 81       	ld	r24, Z
    599e:	91 81       	ldd	r25, Z+1	; 0x01
    59a0:	a2 81       	ldd	r26, Z+2	; 0x02
    59a2:	b3 81       	ldd	r27, Z+3	; 0x03
    59a4:	01 96       	adiw	r24, 0x01	; 1
    59a6:	a1 1d       	adc	r26, r1
    59a8:	b1 1d       	adc	r27, r1
    59aa:	80 83       	st	Z, r24
    59ac:	91 83       	std	Z+1, r25	; 0x01
    59ae:	a2 83       	std	Z+2, r26	; 0x02
    59b0:	b3 83       	std	Z+3, r27	; 0x03
    59b2:	e1 cf       	rjmp	.-62     	; 0x5976 <nrk_time_compact_nanos+0x2>
    }
}
    59b4:	08 95       	ret

000059b6 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    59b6:	8f 92       	push	r8
    59b8:	9f 92       	push	r9
    59ba:	af 92       	push	r10
    59bc:	bf 92       	push	r11
    59be:	cf 92       	push	r12
    59c0:	df 92       	push	r13
    59c2:	ef 92       	push	r14
    59c4:	ff 92       	push	r15
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
    59ce:	cd b7       	in	r28, 0x3d	; 61
    59d0:	de b7       	in	r29, 0x3e	; 62
    59d2:	60 97       	sbiw	r28, 0x10	; 16
    59d4:	0f b6       	in	r0, 0x3f	; 63
    59d6:	f8 94       	cli
    59d8:	de bf       	out	0x3e, r29	; 62
    59da:	0f be       	out	0x3f, r0	; 63
    59dc:	cd bf       	out	0x3d, r28	; 61
    59de:	09 83       	std	Y+1, r16	; 0x01
    59e0:	1a 83       	std	Y+2, r17	; 0x02
    59e2:	2b 83       	std	Y+3, r18	; 0x03
    59e4:	3c 83       	std	Y+4, r19	; 0x04
    59e6:	4d 83       	std	Y+5, r20	; 0x05
    59e8:	5e 83       	std	Y+6, r21	; 0x06
    59ea:	6f 83       	std	Y+7, r22	; 0x07
    59ec:	78 87       	std	Y+8, r23	; 0x08
    59ee:	89 86       	std	Y+9, r8	; 0x09
    59f0:	9a 86       	std	Y+10, r9	; 0x0a
    59f2:	ab 86       	std	Y+11, r10	; 0x0b
    59f4:	bc 86       	std	Y+12, r11	; 0x0c
    59f6:	cd 86       	std	Y+13, r12	; 0x0d
    59f8:	de 86       	std	Y+14, r13	; 0x0e
    59fa:	ef 86       	std	Y+15, r14	; 0x0f
    59fc:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    59fe:	09 85       	ldd	r16, Y+9	; 0x09
    5a00:	1a 85       	ldd	r17, Y+10	; 0x0a
    5a02:	2b 85       	ldd	r18, Y+11	; 0x0b
    5a04:	3c 85       	ldd	r19, Y+12	; 0x0c
    5a06:	49 81       	ldd	r20, Y+1	; 0x01
    5a08:	5a 81       	ldd	r21, Y+2	; 0x02
    5a0a:	6b 81       	ldd	r22, Y+3	; 0x03
    5a0c:	7c 81       	ldd	r23, Y+4	; 0x04
    5a0e:	40 0f       	add	r20, r16
    5a10:	51 1f       	adc	r21, r17
    5a12:	62 1f       	adc	r22, r18
    5a14:	73 1f       	adc	r23, r19
    5a16:	fc 01       	movw	r30, r24
    5a18:	40 83       	st	Z, r20
    5a1a:	51 83       	std	Z+1, r21	; 0x01
    5a1c:	62 83       	std	Z+2, r22	; 0x02
    5a1e:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    5a20:	0d 85       	ldd	r16, Y+13	; 0x0d
    5a22:	1e 85       	ldd	r17, Y+14	; 0x0e
    5a24:	2f 85       	ldd	r18, Y+15	; 0x0f
    5a26:	38 89       	ldd	r19, Y+16	; 0x10
    5a28:	4d 81       	ldd	r20, Y+5	; 0x05
    5a2a:	5e 81       	ldd	r21, Y+6	; 0x06
    5a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    5a2e:	78 85       	ldd	r23, Y+8	; 0x08
    5a30:	40 0f       	add	r20, r16
    5a32:	51 1f       	adc	r21, r17
    5a34:	62 1f       	adc	r22, r18
    5a36:	73 1f       	adc	r23, r19
    5a38:	44 83       	std	Z+4, r20	; 0x04
    5a3a:	55 83       	std	Z+5, r21	; 0x05
    5a3c:	66 83       	std	Z+6, r22	; 0x06
    5a3e:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    5a40:	0e 94 ba 2c 	call	0x5974	; 0x5974 <nrk_time_compact_nanos>
return NRK_OK;
}
    5a44:	81 e0       	ldi	r24, 0x01	; 1
    5a46:	60 96       	adiw	r28, 0x10	; 16
    5a48:	0f b6       	in	r0, 0x3f	; 63
    5a4a:	f8 94       	cli
    5a4c:	de bf       	out	0x3e, r29	; 62
    5a4e:	0f be       	out	0x3f, r0	; 63
    5a50:	cd bf       	out	0x3d, r28	; 61
    5a52:	df 91       	pop	r29
    5a54:	cf 91       	pop	r28
    5a56:	1f 91       	pop	r17
    5a58:	0f 91       	pop	r16
    5a5a:	ff 90       	pop	r15
    5a5c:	ef 90       	pop	r14
    5a5e:	df 90       	pop	r13
    5a60:	cf 90       	pop	r12
    5a62:	bf 90       	pop	r11
    5a64:	af 90       	pop	r10
    5a66:	9f 90       	pop	r9
    5a68:	8f 90       	pop	r8
    5a6a:	08 95       	ret

00005a6c <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    5a6c:	ed e2       	ldi	r30, 0x2D	; 45
    5a6e:	f7 e1       	ldi	r31, 0x17	; 23
    5a70:	60 83       	st	Z, r22
    5a72:	71 83       	std	Z+1, r23	; 0x01
    5a74:	82 83       	std	Z+2, r24	; 0x02
    5a76:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    5a78:	24 83       	std	Z+4, r18	; 0x04
    5a7a:	35 83       	std	Z+5, r19	; 0x05
    5a7c:	46 83       	std	Z+6, r20	; 0x06
    5a7e:	57 83       	std	Z+7, r21	; 0x07
    5a80:	08 95       	ret

00005a82 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    5a82:	2f 92       	push	r2
    5a84:	3f 92       	push	r3
    5a86:	4f 92       	push	r4
    5a88:	5f 92       	push	r5
    5a8a:	6f 92       	push	r6
    5a8c:	7f 92       	push	r7
    5a8e:	8f 92       	push	r8
    5a90:	9f 92       	push	r9
    5a92:	af 92       	push	r10
    5a94:	bf 92       	push	r11
    5a96:	cf 92       	push	r12
    5a98:	df 92       	push	r13
    5a9a:	ef 92       	push	r14
    5a9c:	ff 92       	push	r15
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    5aa4:	c0 80       	ld	r12, Z
    5aa6:	d1 80       	ldd	r13, Z+1	; 0x01
    5aa8:	e2 80       	ldd	r14, Z+2	; 0x02
    5aaa:	f3 80       	ldd	r15, Z+3	; 0x03
    5aac:	c1 14       	cp	r12, r1
    5aae:	d1 04       	cpc	r13, r1
    5ab0:	e1 04       	cpc	r14, r1
    5ab2:	f1 04       	cpc	r15, r1
    5ab4:	e1 f1       	breq	.+120    	; 0x5b2e <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    5ab6:	84 81       	ldd	r24, Z+4	; 0x04
    5ab8:	95 81       	ldd	r25, Z+5	; 0x05
    5aba:	a6 81       	ldd	r26, Z+6	; 0x06
    5abc:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    5abe:	22 e4       	ldi	r18, 0x42	; 66
    5ac0:	c2 16       	cp	r12, r18
    5ac2:	d1 04       	cpc	r13, r1
    5ac4:	e1 04       	cpc	r14, r1
    5ac6:	f1 04       	cpc	r15, r1
    5ac8:	f0 f5       	brcc	.+124    	; 0x5b46 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    5aca:	1c 01       	movw	r2, r24
    5acc:	2d 01       	movw	r4, r26
    5ace:	61 2c       	mov	r6, r1
    5ad0:	71 2c       	mov	r7, r1
    5ad2:	43 01       	movw	r8, r6
    5ad4:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    5ad6:	8e 2f       	mov	r24, r30
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	a0 e0       	ldi	r26, 0x00	; 0
    5adc:	b0 e0       	ldi	r27, 0x00	; 0
    5ade:	8c 15       	cp	r24, r12
    5ae0:	9d 05       	cpc	r25, r13
    5ae2:	ae 05       	cpc	r26, r14
    5ae4:	bf 05       	cpc	r27, r15
    5ae6:	88 f4       	brcc	.+34     	; 0x5b0a <_nrk_time_to_ticks+0x88>
    5ae8:	91 01       	movw	r18, r2
    5aea:	a2 01       	movw	r20, r4
    5aec:	b3 01       	movw	r22, r6
    5aee:	c4 01       	movw	r24, r8
    5af0:	36 53       	subi	r19, 0x36	; 54
    5af2:	45 46       	sbci	r20, 0x65	; 101
    5af4:	54 4c       	sbci	r21, 0xC4	; 196
    5af6:	6f 4f       	sbci	r22, 0xFF	; 255
    5af8:	7f 4f       	sbci	r23, 0xFF	; 255
    5afa:	8f 4f       	sbci	r24, 0xFF	; 255
    5afc:	9f 4f       	sbci	r25, 0xFF	; 255
    5afe:	19 01       	movw	r2, r18
    5b00:	2a 01       	movw	r4, r20
    5b02:	3b 01       	movw	r6, r22
    5b04:	4c 01       	movw	r8, r24
    5b06:	ef 5f       	subi	r30, 0xFF	; 255
    5b08:	e6 cf       	rjmp	.-52     	; 0x5ad6 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    5b0a:	83 eb       	ldi	r24, 0xB3	; 179
    5b0c:	a8 2e       	mov	r10, r24
    5b0e:	96 ee       	ldi	r25, 0xE6	; 230
    5b10:	b9 2e       	mov	r11, r25
    5b12:	2e e0       	ldi	r18, 0x0E	; 14
    5b14:	c2 2e       	mov	r12, r18
    5b16:	d1 2c       	mov	r13, r1
    5b18:	e1 2c       	mov	r14, r1
    5b1a:	f1 2c       	mov	r15, r1
    5b1c:	00 e0       	ldi	r16, 0x00	; 0
    5b1e:	10 e0       	ldi	r17, 0x00	; 0
    5b20:	91 01       	movw	r18, r2
    5b22:	a2 01       	movw	r20, r4
    5b24:	b3 01       	movw	r22, r6
    5b26:	c4 01       	movw	r24, r8
    5b28:	0e 94 21 39 	call	0x7242	; 0x7242 <__udivdi3>
    5b2c:	0a c0       	rjmp	.+20     	; 0x5b42 <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    5b2e:	64 81       	ldd	r22, Z+4	; 0x04
    5b30:	75 81       	ldd	r23, Z+5	; 0x05
    5b32:	86 81       	ldd	r24, Z+6	; 0x06
    5b34:	97 81       	ldd	r25, Z+7	; 0x07
    5b36:	23 eb       	ldi	r18, 0xB3	; 179
    5b38:	36 ee       	ldi	r19, 0xE6	; 230
    5b3a:	4e e0       	ldi	r20, 0x0E	; 14
    5b3c:	50 e0       	ldi	r21, 0x00	; 0
    5b3e:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    5b42:	c9 01       	movw	r24, r18
    5b44:	02 c0       	rjmp	.+4      	; 0x5b4a <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    5b46:	80 e0       	ldi	r24, 0x00	; 0
    5b48:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    5b4a:	1f 91       	pop	r17
    5b4c:	0f 91       	pop	r16
    5b4e:	ff 90       	pop	r15
    5b50:	ef 90       	pop	r14
    5b52:	df 90       	pop	r13
    5b54:	cf 90       	pop	r12
    5b56:	bf 90       	pop	r11
    5b58:	af 90       	pop	r10
    5b5a:	9f 90       	pop	r9
    5b5c:	8f 90       	pop	r8
    5b5e:	7f 90       	pop	r7
    5b60:	6f 90       	pop	r6
    5b62:	5f 90       	pop	r5
    5b64:	4f 90       	pop	r4
    5b66:	3f 90       	pop	r3
    5b68:	2f 90       	pop	r2
    5b6a:	08 95       	ret

00005b6c <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    5b6c:	cf 92       	push	r12
    5b6e:	df 92       	push	r13
    5b70:	ef 92       	push	r14
    5b72:	ff 92       	push	r15
    5b74:	cf 93       	push	r28
    5b76:	df 93       	push	r29
    5b78:	cd b7       	in	r28, 0x3d	; 61
    5b7a:	de b7       	in	r29, 0x3e	; 62
    5b7c:	28 97       	sbiw	r28, 0x08	; 8
    5b7e:	0f b6       	in	r0, 0x3f	; 63
    5b80:	f8 94       	cli
    5b82:	de bf       	out	0x3e, r29	; 62
    5b84:	0f be       	out	0x3f, r0	; 63
    5b86:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    5b88:	6b 01       	movw	r12, r22
    5b8a:	7c 01       	movw	r14, r24
    5b8c:	2a e0       	ldi	r18, 0x0A	; 10
    5b8e:	f6 94       	lsr	r15
    5b90:	e7 94       	ror	r14
    5b92:	d7 94       	ror	r13
    5b94:	c7 94       	ror	r12
    5b96:	2a 95       	dec	r18
    5b98:	d1 f7       	brne	.-12     	; 0x5b8e <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    5b9a:	c9 82       	std	Y+1, r12	; 0x01
    5b9c:	da 82       	std	Y+2, r13	; 0x02
    5b9e:	eb 82       	std	Y+3, r14	; 0x03
    5ba0:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    5ba2:	9b 01       	movw	r18, r22
    5ba4:	ac 01       	movw	r20, r24
    5ba6:	33 70       	andi	r19, 0x03	; 3
    5ba8:	44 27       	eor	r20, r20
    5baa:	55 27       	eor	r21, r21
    5bac:	63 eb       	ldi	r22, 0xB3	; 179
    5bae:	76 ee       	ldi	r23, 0xE6	; 230
    5bb0:	8e e0       	ldi	r24, 0x0E	; 14
    5bb2:	90 e0       	ldi	r25, 0x00	; 0
    5bb4:	0e 94 a2 38 	call	0x7144	; 0x7144 <__mulsi3>

return t;
    5bb8:	2c 2d       	mov	r18, r12
    5bba:	3a 81       	ldd	r19, Y+2	; 0x02
    5bbc:	4b 81       	ldd	r20, Y+3	; 0x03
    5bbe:	5c 81       	ldd	r21, Y+4	; 0x04
}
    5bc0:	28 96       	adiw	r28, 0x08	; 8
    5bc2:	0f b6       	in	r0, 0x3f	; 63
    5bc4:	f8 94       	cli
    5bc6:	de bf       	out	0x3e, r29	; 62
    5bc8:	0f be       	out	0x3f, r0	; 63
    5bca:	cd bf       	out	0x3d, r28	; 61
    5bcc:	df 91       	pop	r29
    5bce:	cf 91       	pop	r28
    5bd0:	ff 90       	pop	r15
    5bd2:	ef 90       	pop	r14
    5bd4:	df 90       	pop	r13
    5bd6:	cf 90       	pop	r12
    5bd8:	08 95       	ret

00005bda <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    5bda:	2f 92       	push	r2
    5bdc:	3f 92       	push	r3
    5bde:	4f 92       	push	r4
    5be0:	5f 92       	push	r5
    5be2:	6f 92       	push	r6
    5be4:	7f 92       	push	r7
    5be6:	8f 92       	push	r8
    5be8:	9f 92       	push	r9
    5bea:	af 92       	push	r10
    5bec:	bf 92       	push	r11
    5bee:	cf 92       	push	r12
    5bf0:	df 92       	push	r13
    5bf2:	ef 92       	push	r14
    5bf4:	ff 92       	push	r15
    5bf6:	0f 93       	push	r16
    5bf8:	1f 93       	push	r17
    5bfa:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    5bfc:	c0 80       	ld	r12, Z
    5bfe:	d1 80       	ldd	r13, Z+1	; 0x01
    5c00:	e2 80       	ldd	r14, Z+2	; 0x02
    5c02:	f3 80       	ldd	r15, Z+3	; 0x03
    5c04:	c1 14       	cp	r12, r1
    5c06:	d1 04       	cpc	r13, r1
    5c08:	e1 04       	cpc	r14, r1
    5c0a:	f1 04       	cpc	r15, r1
    5c0c:	b9 f1       	breq	.+110    	; 0x5c7c <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    5c0e:	84 81       	ldd	r24, Z+4	; 0x04
    5c10:	95 81       	ldd	r25, Z+5	; 0x05
    5c12:	a6 81       	ldd	r26, Z+6	; 0x06
    5c14:	b7 81       	ldd	r27, Z+7	; 0x07
    5c16:	1c 01       	movw	r2, r24
    5c18:	2d 01       	movw	r4, r26
    5c1a:	61 2c       	mov	r6, r1
    5c1c:	71 2c       	mov	r7, r1
    5c1e:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    5c20:	e0 e0       	ldi	r30, 0x00	; 0
    5c22:	8e 2f       	mov	r24, r30
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	a0 e0       	ldi	r26, 0x00	; 0
    5c28:	b0 e0       	ldi	r27, 0x00	; 0
    5c2a:	8c 15       	cp	r24, r12
    5c2c:	9d 05       	cpc	r25, r13
    5c2e:	ae 05       	cpc	r26, r14
    5c30:	bf 05       	cpc	r27, r15
    5c32:	88 f4       	brcc	.+34     	; 0x5c56 <_nrk_time_to_ticks_long+0x7c>
    5c34:	91 01       	movw	r18, r2
    5c36:	a2 01       	movw	r20, r4
    5c38:	b3 01       	movw	r22, r6
    5c3a:	c4 01       	movw	r24, r8
    5c3c:	36 53       	subi	r19, 0x36	; 54
    5c3e:	45 46       	sbci	r20, 0x65	; 101
    5c40:	54 4c       	sbci	r21, 0xC4	; 196
    5c42:	6f 4f       	sbci	r22, 0xFF	; 255
    5c44:	7f 4f       	sbci	r23, 0xFF	; 255
    5c46:	8f 4f       	sbci	r24, 0xFF	; 255
    5c48:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4a:	19 01       	movw	r2, r18
    5c4c:	2a 01       	movw	r4, r20
    5c4e:	3b 01       	movw	r6, r22
    5c50:	4c 01       	movw	r8, r24
    5c52:	ef 5f       	subi	r30, 0xFF	; 255
    5c54:	e6 cf       	rjmp	.-52     	; 0x5c22 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    5c56:	83 eb       	ldi	r24, 0xB3	; 179
    5c58:	a8 2e       	mov	r10, r24
    5c5a:	96 ee       	ldi	r25, 0xE6	; 230
    5c5c:	b9 2e       	mov	r11, r25
    5c5e:	2e e0       	ldi	r18, 0x0E	; 14
    5c60:	c2 2e       	mov	r12, r18
    5c62:	d1 2c       	mov	r13, r1
    5c64:	e1 2c       	mov	r14, r1
    5c66:	f1 2c       	mov	r15, r1
    5c68:	00 e0       	ldi	r16, 0x00	; 0
    5c6a:	10 e0       	ldi	r17, 0x00	; 0
    5c6c:	91 01       	movw	r18, r2
    5c6e:	a2 01       	movw	r20, r4
    5c70:	b3 01       	movw	r22, r6
    5c72:	c4 01       	movw	r24, r8
    5c74:	0e 94 21 39 	call	0x7242	; 0x7242 <__udivdi3>
    5c78:	ca 01       	movw	r24, r20
    5c7a:	0b c0       	rjmp	.+22     	; 0x5c92 <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    5c7c:	64 81       	ldd	r22, Z+4	; 0x04
    5c7e:	75 81       	ldd	r23, Z+5	; 0x05
    5c80:	86 81       	ldd	r24, Z+6	; 0x06
    5c82:	97 81       	ldd	r25, Z+7	; 0x07
    5c84:	23 eb       	ldi	r18, 0xB3	; 179
    5c86:	36 ee       	ldi	r19, 0xE6	; 230
    5c88:	4e e0       	ldi	r20, 0x0E	; 14
    5c8a:	50 e0       	ldi	r21, 0x00	; 0
    5c8c:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    5c90:	ca 01       	movw	r24, r20
}
return ticks;
}
    5c92:	b9 01       	movw	r22, r18
    5c94:	1f 91       	pop	r17
    5c96:	0f 91       	pop	r16
    5c98:	ff 90       	pop	r15
    5c9a:	ef 90       	pop	r14
    5c9c:	df 90       	pop	r13
    5c9e:	cf 90       	pop	r12
    5ca0:	bf 90       	pop	r11
    5ca2:	af 90       	pop	r10
    5ca4:	9f 90       	pop	r9
    5ca6:	8f 90       	pop	r8
    5ca8:	7f 90       	pop	r7
    5caa:	6f 90       	pop	r6
    5cac:	5f 90       	pop	r5
    5cae:	4f 90       	pop	r4
    5cb0:	3f 90       	pop	r3
    5cb2:	2f 90       	pop	r2
    5cb4:	08 95       	ret

00005cb6 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    5cb6:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    5cb8:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    5cba:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    5cbe:	0e 94 10 33 	call	0x6620	; 0x6620 <_nrk_get_next_wakeup>
    5cc2:	84 30       	cpi	r24, 0x04	; 4
    5cc4:	28 f4       	brcc	.+10     	; 0x5cd0 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    5cc6:	d0 93 2a 17 	sts	0x172A, r29
	    nrk_idle();
    5cca:	0e 94 1f 36 	call	0x6c3e	; 0x6c3e <nrk_idle>
    5cce:	08 c0       	rjmp	.+16     	; 0x5ce0 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    5cd0:	8a e0       	ldi	r24, 0x0A	; 10
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	0e 94 28 32 	call	0x6450	; 0x6450 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    5cd8:	c0 93 2a 17 	sts	0x172A, r28
	    nrk_sleep();
    5cdc:	0e 94 13 36 	call	0x6c26	; 0x6c26 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    5ce0:	80 91 48 13 	lds	r24, 0x1348
    5ce4:	85 35       	cpi	r24, 0x55	; 85
    5ce6:	19 f0       	breq	.+6      	; 0x5cee <nrk_idle_task+0x38>
    5ce8:	88 e0       	ldi	r24, 0x08	; 8
    5cea:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    5cee:	80 91 fe 3f 	lds	r24, 0x3FFE
    5cf2:	85 35       	cpi	r24, 0x55	; 85
    5cf4:	11 f3       	breq	.-60     	; 0x5cba <nrk_idle_task+0x4>
    5cf6:	88 e0       	ldi	r24, 0x08	; 8
    5cf8:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_error_add>
    5cfc:	de cf       	rjmp	.-68     	; 0x5cba <nrk_idle_task+0x4>

00005cfe <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    5cfe:	2f 92       	push	r2
    5d00:	3f 92       	push	r3
    5d02:	4f 92       	push	r4
    5d04:	5f 92       	push	r5
    5d06:	6f 92       	push	r6
    5d08:	7f 92       	push	r7
    5d0a:	8f 92       	push	r8
    5d0c:	9f 92       	push	r9
    5d0e:	af 92       	push	r10
    5d10:	bf 92       	push	r11
    5d12:	cf 92       	push	r12
    5d14:	df 92       	push	r13
    5d16:	ef 92       	push	r14
    5d18:	ff 92       	push	r15
    5d1a:	0f 93       	push	r16
    5d1c:	1f 93       	push	r17
    5d1e:	cf 93       	push	r28
    5d20:	df 93       	push	r29
    5d22:	00 d0       	rcall	.+0      	; 0x5d24 <_nrk_scheduler+0x26>
    5d24:	1f 92       	push	r1
    5d26:	cd b7       	in	r28, 0x3d	; 61
    5d28:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    5d2a:	0e 94 44 32 	call	0x6488	; 0x6488 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    5d2e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    5d32:	0e 94 62 32 	call	0x64c4	; 0x64c4 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    5d36:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <_nrk_high_speed_timer_get>
    5d3a:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    5d3c:	8a ef       	ldi	r24, 0xFA	; 250
    5d3e:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    5d42:	a0 91 4f 15 	lds	r26, 0x154F
    5d46:	b0 e0       	ldi	r27, 0x00	; 0
    5d48:	23 eb       	ldi	r18, 0xB3	; 179
    5d4a:	36 ee       	ldi	r19, 0xE6	; 230
    5d4c:	4e e0       	ldi	r20, 0x0E	; 14
    5d4e:	50 e0       	ldi	r21, 0x00	; 0
    5d50:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    5d54:	00 91 31 17 	lds	r16, 0x1731
    5d58:	10 91 32 17 	lds	r17, 0x1732
    5d5c:	20 91 33 17 	lds	r18, 0x1733
    5d60:	30 91 34 17 	lds	r19, 0x1734
    5d64:	6b 01       	movw	r12, r22
    5d66:	7c 01       	movw	r14, r24
    5d68:	c0 0e       	add	r12, r16
    5d6a:	d1 1e       	adc	r13, r17
    5d6c:	e2 1e       	adc	r14, r18
    5d6e:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5d70:	c7 01       	movw	r24, r14
    5d72:	b6 01       	movw	r22, r12
    5d74:	23 eb       	ldi	r18, 0xB3	; 179
    5d76:	36 ee       	ldi	r19, 0xE6	; 230
    5d78:	4e e0       	ldi	r20, 0x0E	; 14
    5d7a:	50 e0       	ldi	r21, 0x00	; 0
    5d7c:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    5d80:	26 01       	movw	r4, r12
    5d82:	37 01       	movw	r6, r14
    5d84:	46 1a       	sub	r4, r22
    5d86:	57 0a       	sbc	r5, r23
    5d88:	68 0a       	sbc	r6, r24
    5d8a:	79 0a       	sbc	r7, r25
    5d8c:	d3 01       	movw	r26, r6
    5d8e:	c2 01       	movw	r24, r4
    5d90:	00 91 2d 17 	lds	r16, 0x172D
    5d94:	10 91 2e 17 	lds	r17, 0x172E
    5d98:	20 91 2f 17 	lds	r18, 0x172F
    5d9c:	30 91 30 17 	lds	r19, 0x1730

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5da0:	43 eb       	ldi	r20, 0xB3	; 179
    5da2:	84 2e       	mov	r8, r20
    5da4:	46 ee       	ldi	r20, 0xE6	; 230
    5da6:	94 2e       	mov	r9, r20
    5da8:	4e e0       	ldi	r20, 0x0E	; 14
    5daa:	a4 2e       	mov	r10, r20
    5dac:	b1 2c       	mov	r11, r1
    5dae:	68 01       	movw	r12, r16
    5db0:	79 01       	movw	r14, r18
    5db2:	4f ef       	ldi	r20, 0xFF	; 255
    5db4:	c4 1a       	sub	r12, r20
    5db6:	d4 0a       	sbc	r13, r20
    5db8:	e4 0a       	sbc	r14, r20
    5dba:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    5dbc:	81 15       	cp	r24, r1
    5dbe:	5a ec       	ldi	r21, 0xCA	; 202
    5dc0:	95 07       	cpc	r25, r21
    5dc2:	5a e9       	ldi	r21, 0x9A	; 154
    5dc4:	a5 07       	cpc	r26, r21
    5dc6:	5b e3       	ldi	r21, 0x3B	; 59
    5dc8:	b5 07       	cpc	r27, r21
    5dca:	c8 f0       	brcs	.+50     	; 0x5dfe <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    5dcc:	2c 01       	movw	r4, r24
    5dce:	3d 01       	movw	r6, r26
    5dd0:	2a ec       	ldi	r18, 0xCA	; 202
    5dd2:	52 1a       	sub	r5, r18
    5dd4:	2a e9       	ldi	r18, 0x9A	; 154
    5dd6:	62 0a       	sbc	r6, r18
    5dd8:	2b e3       	ldi	r18, 0x3B	; 59
    5dda:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5ddc:	c3 01       	movw	r24, r6
    5dde:	b2 01       	movw	r22, r4
    5de0:	a5 01       	movw	r20, r10
    5de2:	94 01       	movw	r18, r8
    5de4:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    5de8:	a3 01       	movw	r20, r6
    5dea:	92 01       	movw	r18, r4
    5dec:	26 1b       	sub	r18, r22
    5dee:	37 0b       	sbc	r19, r23
    5df0:	48 0b       	sbc	r20, r24
    5df2:	59 0b       	sbc	r21, r25
    5df4:	da 01       	movw	r26, r20
    5df6:	c9 01       	movw	r24, r18
    5df8:	97 01       	movw	r18, r14
    5dfa:	86 01       	movw	r16, r12
    5dfc:	d8 cf       	rjmp	.-80     	; 0x5dae <_nrk_scheduler+0xb0>
    5dfe:	80 93 31 17 	sts	0x1731, r24
    5e02:	90 93 32 17 	sts	0x1732, r25
    5e06:	a0 93 33 17 	sts	0x1733, r26
    5e0a:	b0 93 34 17 	sts	0x1734, r27
    5e0e:	00 93 2d 17 	sts	0x172D, r16
    5e12:	10 93 2e 17 	sts	0x172E, r17
    5e16:	20 93 2f 17 	sts	0x172F, r18
    5e1a:	30 93 30 17 	sts	0x1730, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    5e1e:	e0 91 36 17 	lds	r30, 0x1736
    5e22:	f0 91 37 17 	lds	r31, 0x1737
    5e26:	85 81       	ldd	r24, Z+5	; 0x05
    5e28:	88 23       	and	r24, r24
    5e2a:	39 f1       	breq	.+78     	; 0x5e7a <_nrk_scheduler+0x17c>
    5e2c:	81 85       	ldd	r24, Z+9	; 0x09
    5e2e:	84 30       	cpi	r24, 0x04	; 4
    5e30:	21 f1       	breq	.+72     	; 0x5e7a <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    5e32:	87 81       	ldd	r24, Z+7	; 0x07
    5e34:	82 30       	cpi	r24, 0x02	; 2
    5e36:	29 f0       	breq	.+10     	; 0x5e42 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    5e38:	88 23       	and	r24, r24
    5e3a:	41 f0       	breq	.+16     	; 0x5e4c <_nrk_scheduler+0x14e>
    5e3c:	86 81       	ldd	r24, Z+6	; 0x06
    5e3e:	81 11       	cpse	r24, r1
    5e40:	02 c0       	rjmp	.+4      	; 0x5e46 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    5e42:	85 e0       	ldi	r24, 0x05	; 5
    5e44:	01 c0       	rjmp	.+2      	; 0x5e48 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5e46:	83 e0       	ldi	r24, 0x03	; 3
    5e48:	81 87       	std	Z+9, r24	; 0x09
    5e4a:	14 c0       	rjmp	.+40     	; 0x5e74 <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5e4c:	83 e0       	ldi	r24, 0x03	; 3
    5e4e:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    5e50:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    5e52:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    5e54:	85 89       	ldd	r24, Z+21	; 0x15
    5e56:	96 89       	ldd	r25, Z+22	; 0x16
    5e58:	a7 89       	ldd	r26, Z+23	; 0x17
    5e5a:	b0 8d       	ldd	r27, Z+24	; 0x18
    5e5c:	89 2b       	or	r24, r25
    5e5e:	8a 2b       	or	r24, r26
    5e60:	8b 2b       	or	r24, r27
    5e62:	41 f4       	brne	.+16     	; 0x5e74 <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    5e64:	81 8d       	ldd	r24, Z+25	; 0x19
    5e66:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e68:	a3 8d       	ldd	r26, Z+27	; 0x1b
    5e6a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    5e6c:	85 8b       	std	Z+21, r24	; 0x15
    5e6e:	96 8b       	std	Z+22, r25	; 0x16
    5e70:	a7 8b       	std	Z+23, r26	; 0x17
    5e72:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    5e74:	80 85       	ldd	r24, Z+8	; 0x08
    5e76:	0e 94 40 29 	call	0x5280	; 0x5280 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    5e7a:	e0 91 36 17 	lds	r30, 0x1736
    5e7e:	f0 91 37 17 	lds	r31, 0x1737
    5e82:	85 a1       	ldd	r24, Z+37	; 0x25
    5e84:	96 a1       	ldd	r25, Z+38	; 0x26
    5e86:	a7 a1       	ldd	r26, Z+39	; 0x27
    5e88:	b0 a5       	ldd	r27, Z+40	; 0x28
    5e8a:	89 2b       	or	r24, r25
    5e8c:	8a 2b       	or	r24, r26
    5e8e:	8b 2b       	or	r24, r27
    5e90:	09 f4       	brne	.+2      	; 0x5e94 <_nrk_scheduler+0x196>
    5e92:	44 c0       	rjmp	.+136    	; 0x5f1c <_nrk_scheduler+0x21e>
    5e94:	20 85       	ldd	r18, Z+8	; 0x08
    5e96:	22 23       	and	r18, r18
    5e98:	09 f4       	brne	.+2      	; 0x5e9c <_nrk_scheduler+0x19e>
    5e9a:	40 c0       	rjmp	.+128    	; 0x5f1c <_nrk_scheduler+0x21e>
    5e9c:	81 85       	ldd	r24, Z+9	; 0x09
    5e9e:	84 30       	cpi	r24, 0x04	; 4
    5ea0:	e9 f1       	breq	.+122    	; 0x5f1c <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    5ea2:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ea4:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ea6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5ea8:	b0 a1       	ldd	r27, Z+32	; 0x20
    5eaa:	40 91 4f 15 	lds	r20, 0x154F
    5eae:	50 e0       	ldi	r21, 0x00	; 0
    5eb0:	60 e0       	ldi	r22, 0x00	; 0
    5eb2:	70 e0       	ldi	r23, 0x00	; 0
    5eb4:	84 17       	cp	r24, r20
    5eb6:	95 07       	cpc	r25, r21
    5eb8:	a6 07       	cpc	r26, r22
    5eba:	b7 07       	cpc	r27, r23
    5ebc:	68 f4       	brcc	.+26     	; 0x5ed8 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    5ebe:	62 2f       	mov	r22, r18
    5ec0:	82 e0       	ldi	r24, 0x02	; 2
    5ec2:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    5ec6:	e0 91 36 17 	lds	r30, 0x1736
    5eca:	f0 91 37 17 	lds	r31, 0x1737
    5ece:	15 8e       	std	Z+29, r1	; 0x1d
    5ed0:	16 8e       	std	Z+30, r1	; 0x1e
    5ed2:	17 8e       	std	Z+31, r1	; 0x1f
    5ed4:	10 a2       	std	Z+32, r1	; 0x20
    5ed6:	08 c0       	rjmp	.+16     	; 0x5ee8 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    5ed8:	84 1b       	sub	r24, r20
    5eda:	95 0b       	sbc	r25, r21
    5edc:	a6 0b       	sbc	r26, r22
    5ede:	b7 0b       	sbc	r27, r23
    5ee0:	85 8f       	std	Z+29, r24	; 0x1d
    5ee2:	96 8f       	std	Z+30, r25	; 0x1e
    5ee4:	a7 8f       	std	Z+31, r26	; 0x1f
    5ee6:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    5ee8:	e0 91 36 17 	lds	r30, 0x1736
    5eec:	f0 91 37 17 	lds	r31, 0x1737
    5ef0:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    5ef2:	85 8d       	ldd	r24, Z+29	; 0x1d
    5ef4:	96 8d       	ldd	r25, Z+30	; 0x1e
    5ef6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5ef8:	b0 a1       	ldd	r27, Z+32	; 0x20
    5efa:	89 2b       	or	r24, r25
    5efc:	8a 2b       	or	r24, r26
    5efe:	8b 2b       	or	r24, r27
    5f00:	69 f4       	brne	.+26     	; 0x5f1c <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    5f02:	61 2f       	mov	r22, r17
    5f04:	83 e0       	ldi	r24, 0x03	; 3
    5f06:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5f0a:	e0 91 36 17 	lds	r30, 0x1736
    5f0e:	f0 91 37 17 	lds	r31, 0x1737
    5f12:	83 e0       	ldi	r24, 0x03	; 3
    5f14:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    5f16:	81 2f       	mov	r24, r17
    5f18:	0e 94 40 29 	call	0x5280	; 0x5280 <nrk_rem_from_readyQ>
    5f1c:	89 ef       	ldi	r24, 0xF9	; 249
    5f1e:	95 e1       	ldi	r25, 0x15	; 21
    5f20:	9b 83       	std	Y+3, r25	; 0x03
    5f22:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5f24:	00 e6       	ldi	r16, 0x60	; 96
    5f26:	1a ee       	ldi	r17, 0xEA	; 234
    5f28:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5f2a:	2a ef       	ldi	r18, 0xFA	; 250
    5f2c:	c2 2e       	mov	r12, r18
    5f2e:	d1 2c       	mov	r13, r1
    5f30:	e1 2c       	mov	r14, r1
    5f32:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    5f34:	81 2c       	mov	r8, r1
    5f36:	91 2c       	mov	r9, r1
    5f38:	54 01       	movw	r10, r8
    5f3a:	83 94       	inc	r8
    5f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    5f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    5f40:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    5f42:	80 81       	ld	r24, Z
    5f44:	8f 3f       	cpi	r24, 0xFF	; 255
    5f46:	09 f4       	brne	.+2      	; 0x5f4a <_nrk_scheduler+0x24c>
    5f48:	04 c1       	rjmp	.+520    	; 0x6152 <_nrk_scheduler+0x454>
    5f4a:	ea 81       	ldd	r30, Y+2	; 0x02
    5f4c:	fb 81       	ldd	r31, Y+3	; 0x03
    5f4e:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    5f50:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    5f52:	88 23       	and	r24, r24
    5f54:	09 f4       	brne	.+2      	; 0x5f58 <_nrk_scheduler+0x25a>
    5f56:	67 c0       	rjmp	.+206    	; 0x6026 <_nrk_scheduler+0x328>
    5f58:	ea 81       	ldd	r30, Y+2	; 0x02
    5f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    5f5c:	80 81       	ld	r24, Z
    5f5e:	84 30       	cpi	r24, 0x04	; 4
    5f60:	09 f4       	brne	.+2      	; 0x5f64 <_nrk_scheduler+0x266>
    5f62:	61 c0       	rjmp	.+194    	; 0x6026 <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    5f64:	44 84       	ldd	r4, Z+12	; 0x0c
    5f66:	55 84       	ldd	r5, Z+13	; 0x0d
    5f68:	66 84       	ldd	r6, Z+14	; 0x0e
    5f6a:	77 84       	ldd	r7, Z+15	; 0x0f
    5f6c:	60 91 4f 15 	lds	r22, 0x154F
    5f70:	70 e0       	ldi	r23, 0x00	; 0
    5f72:	80 e0       	ldi	r24, 0x00	; 0
    5f74:	90 e0       	ldi	r25, 0x00	; 0
    5f76:	46 16       	cp	r4, r22
    5f78:	57 06       	cpc	r5, r23
    5f7a:	68 06       	cpc	r6, r24
    5f7c:	79 06       	cpc	r7, r25
    5f7e:	48 f0       	brcs	.+18     	; 0x5f92 <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    5f80:	46 1a       	sub	r4, r22
    5f82:	57 0a       	sbc	r5, r23
    5f84:	68 0a       	sbc	r6, r24
    5f86:	79 0a       	sbc	r7, r25
    5f88:	44 86       	std	Z+12, r4	; 0x0c
    5f8a:	55 86       	std	Z+13, r5	; 0x0d
    5f8c:	66 86       	std	Z+14, r6	; 0x0e
    5f8e:	77 86       	std	Z+15, r7	; 0x0f
    5f90:	06 c0       	rjmp	.+12     	; 0x5f9e <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    5f92:	ea 81       	ldd	r30, Y+2	; 0x02
    5f94:	fb 81       	ldd	r31, Y+3	; 0x03
    5f96:	14 86       	std	Z+12, r1	; 0x0c
    5f98:	15 86       	std	Z+13, r1	; 0x0d
    5f9a:	16 86       	std	Z+14, r1	; 0x0e
    5f9c:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    5f9e:	ea 81       	ldd	r30, Y+2	; 0x02
    5fa0:	fb 81       	ldd	r31, Y+3	; 0x03
    5fa2:	40 88       	ldd	r4, Z+16	; 0x10
    5fa4:	51 88       	ldd	r5, Z+17	; 0x11
    5fa6:	62 88       	ldd	r6, Z+18	; 0x12
    5fa8:	73 88       	ldd	r7, Z+19	; 0x13
    5faa:	46 16       	cp	r4, r22
    5fac:	57 06       	cpc	r5, r23
    5fae:	68 06       	cpc	r6, r24
    5fb0:	79 06       	cpc	r7, r25
    5fb2:	48 f0       	brcs	.+18     	; 0x5fc6 <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    5fb4:	46 1a       	sub	r4, r22
    5fb6:	57 0a       	sbc	r5, r23
    5fb8:	68 0a       	sbc	r6, r24
    5fba:	79 0a       	sbc	r7, r25
    5fbc:	40 8a       	std	Z+16, r4	; 0x10
    5fbe:	51 8a       	std	Z+17, r5	; 0x11
    5fc0:	62 8a       	std	Z+18, r6	; 0x12
    5fc2:	73 8a       	std	Z+19, r7	; 0x13
    5fc4:	1e c0       	rjmp	.+60     	; 0x6002 <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    5fc6:	ea 81       	ldd	r30, Y+2	; 0x02
    5fc8:	fb 81       	ldd	r31, Y+3	; 0x03
    5fca:	20 8d       	ldd	r18, Z+24	; 0x18
    5fcc:	31 8d       	ldd	r19, Z+25	; 0x19
    5fce:	42 8d       	ldd	r20, Z+26	; 0x1a
    5fd0:	53 8d       	ldd	r21, Z+27	; 0x1b
    5fd2:	62 17       	cp	r22, r18
    5fd4:	73 07       	cpc	r23, r19
    5fd6:	84 07       	cpc	r24, r20
    5fd8:	95 07       	cpc	r25, r21
    5fda:	58 f4       	brcc	.+22     	; 0x5ff2 <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    5fdc:	29 01       	movw	r4, r18
    5fde:	3a 01       	movw	r6, r20
    5fe0:	46 1a       	sub	r4, r22
    5fe2:	57 0a       	sbc	r5, r23
    5fe4:	68 0a       	sbc	r6, r24
    5fe6:	79 0a       	sbc	r7, r25
    5fe8:	40 8a       	std	Z+16, r4	; 0x10
    5fea:	51 8a       	std	Z+17, r5	; 0x11
    5fec:	62 8a       	std	Z+18, r6	; 0x12
    5fee:	73 8a       	std	Z+19, r7	; 0x13
    5ff0:	08 c0       	rjmp	.+16     	; 0x6002 <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    5ff2:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    5ff6:	ea 81       	ldd	r30, Y+2	; 0x02
    5ff8:	fb 81       	ldd	r31, Y+3	; 0x03
    5ffa:	60 8b       	std	Z+16, r22	; 0x10
    5ffc:	71 8b       	std	Z+17, r23	; 0x11
    5ffe:	82 8b       	std	Z+18, r24	; 0x12
    6000:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    6002:	ea 81       	ldd	r30, Y+2	; 0x02
    6004:	fb 81       	ldd	r31, Y+3	; 0x03
    6006:	80 89       	ldd	r24, Z+16	; 0x10
    6008:	91 89       	ldd	r25, Z+17	; 0x11
    600a:	a2 89       	ldd	r26, Z+18	; 0x12
    600c:	b3 89       	ldd	r27, Z+19	; 0x13
    600e:	89 2b       	or	r24, r25
    6010:	8a 2b       	or	r24, r26
    6012:	8b 2b       	or	r24, r27
    6014:	41 f4       	brne	.+16     	; 0x6026 <_nrk_scheduler+0x328>
    6016:	80 8d       	ldd	r24, Z+24	; 0x18
    6018:	91 8d       	ldd	r25, Z+25	; 0x19
    601a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    601c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    601e:	80 8b       	std	Z+16, r24	; 0x10
    6020:	91 8b       	std	Z+17, r25	; 0x11
    6022:	a2 8b       	std	Z+18, r26	; 0x12
    6024:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    6026:	ea 81       	ldd	r30, Y+2	; 0x02
    6028:	fb 81       	ldd	r31, Y+3	; 0x03
    602a:	80 81       	ld	r24, Z
    602c:	83 30       	cpi	r24, 0x03	; 3
    602e:	09 f0       	breq	.+2      	; 0x6032 <_nrk_scheduler+0x334>
    6030:	90 c0       	rjmp	.+288    	; 0x6152 <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    6032:	84 85       	ldd	r24, Z+12	; 0x0c
    6034:	95 85       	ldd	r25, Z+13	; 0x0d
    6036:	a6 85       	ldd	r26, Z+14	; 0x0e
    6038:	b7 85       	ldd	r27, Z+15	; 0x0f
    603a:	89 2b       	or	r24, r25
    603c:	8a 2b       	or	r24, r26
    603e:	8b 2b       	or	r24, r27
    6040:	09 f0       	breq	.+2      	; 0x6044 <_nrk_scheduler+0x346>
    6042:	74 c0       	rjmp	.+232    	; 0x612c <_nrk_scheduler+0x42e>
    6044:	df 01       	movw	r26, r30
    6046:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    6048:	8c 91       	ld	r24, X
    604a:	9f 01       	movw	r18, r30
    604c:	23 50       	subi	r18, 0x03	; 3
    604e:	31 09       	sbc	r19, r1
    6050:	88 23       	and	r24, r24
    6052:	a9 f0       	breq	.+42     	; 0x607e <_nrk_scheduler+0x380>
    6054:	f9 01       	movw	r30, r18
    6056:	80 81       	ld	r24, Z
    6058:	88 23       	and	r24, r24
    605a:	89 f0       	breq	.+34     	; 0x607e <_nrk_scheduler+0x380>
    605c:	b5 01       	movw	r22, r10
    605e:	a4 01       	movw	r20, r8
    6060:	00 90 26 17 	lds	r0, 0x1726
    6064:	04 c0       	rjmp	.+8      	; 0x606e <_nrk_scheduler+0x370>
    6066:	44 0f       	add	r20, r20
    6068:	55 1f       	adc	r21, r21
    606a:	66 1f       	adc	r22, r22
    606c:	77 1f       	adc	r23, r23
    606e:	0a 94       	dec	r0
    6070:	d2 f7       	brpl	.-12     	; 0x6066 <_nrk_scheduler+0x368>
    6072:	ea 81       	ldd	r30, Y+2	; 0x02
    6074:	fb 81       	ldd	r31, Y+3	; 0x03
    6076:	40 87       	std	Z+8, r20	; 0x08
    6078:	51 87       	std	Z+9, r21	; 0x09
    607a:	62 87       	std	Z+10, r22	; 0x0a
    607c:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    607e:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    6080:	f9 01       	movw	r30, r18
    6082:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    6084:	ea 81       	ldd	r30, Y+2	; 0x02
    6086:	fb 81       	ldd	r31, Y+3	; 0x03
    6088:	a0 a1       	ldd	r26, Z+32	; 0x20
    608a:	b1 a1       	ldd	r27, Z+33	; 0x21
    608c:	a1 30       	cpi	r26, 0x01	; 1
    608e:	b1 05       	cpc	r27, r1
    6090:	19 f5       	brne	.+70     	; 0x60d8 <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    6092:	84 8d       	ldd	r24, Z+28	; 0x1c
    6094:	95 8d       	ldd	r25, Z+29	; 0x1d
    6096:	a6 8d       	ldd	r26, Z+30	; 0x1e
    6098:	b7 8d       	ldd	r27, Z+31	; 0x1f
    609a:	84 8b       	std	Z+20, r24	; 0x14
    609c:	95 8b       	std	Z+21, r25	; 0x15
    609e:	a6 8b       	std	Z+22, r26	; 0x16
    60a0:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    60a2:	92 e0       	ldi	r25, 0x02	; 2
    60a4:	49 2e       	mov	r4, r25
    60a6:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    60a8:	80 89       	ldd	r24, Z+16	; 0x10
    60aa:	91 89       	ldd	r25, Z+17	; 0x11
    60ac:	a2 89       	ldd	r26, Z+18	; 0x12
    60ae:	b3 89       	ldd	r27, Z+19	; 0x13
    60b0:	84 87       	std	Z+12, r24	; 0x0c
    60b2:	95 87       	std	Z+13, r25	; 0x0d
    60b4:	a6 87       	std	Z+14, r26	; 0x0e
    60b6:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    60b8:	80 8d       	ldd	r24, Z+24	; 0x18
    60ba:	91 8d       	ldd	r25, Z+25	; 0x19
    60bc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    60be:	b3 8d       	ldd	r27, Z+27	; 0x1b
    60c0:	89 2b       	or	r24, r25
    60c2:	8a 2b       	or	r24, r26
    60c4:	8b 2b       	or	r24, r27
    60c6:	21 f4       	brne	.+8      	; 0x60d0 <_nrk_scheduler+0x3d2>
    60c8:	c4 86       	std	Z+12, r12	; 0x0c
    60ca:	d5 86       	std	Z+13, r13	; 0x0d
    60cc:	e6 86       	std	Z+14, r14	; 0x0e
    60ce:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    60d0:	89 81       	ldd	r24, Y+1	; 0x01
    60d2:	0e 94 90 28 	call	0x5120	; 0x5120 <nrk_add_to_readyQ>
    60d6:	2a c0       	rjmp	.+84     	; 0x612c <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    60d8:	ea 81       	ldd	r30, Y+2	; 0x02
    60da:	fb 81       	ldd	r31, Y+3	; 0x03
    60dc:	44 8d       	ldd	r20, Z+28	; 0x1c
    60de:	55 8d       	ldd	r21, Z+29	; 0x1d
    60e0:	66 8d       	ldd	r22, Z+30	; 0x1e
    60e2:	77 8d       	ldd	r23, Z+31	; 0x1f
    60e4:	44 8b       	std	Z+20, r20	; 0x14
    60e6:	55 8b       	std	Z+21, r21	; 0x15
    60e8:	66 8b       	std	Z+22, r22	; 0x16
    60ea:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    60ec:	40 8c       	ldd	r4, Z+24	; 0x18
    60ee:	51 8c       	ldd	r5, Z+25	; 0x19
    60f0:	62 8c       	ldd	r6, Z+26	; 0x1a
    60f2:	73 8c       	ldd	r7, Z+27	; 0x1b
    60f4:	11 97       	sbiw	r26, 0x01	; 1
    60f6:	a3 01       	movw	r20, r6
    60f8:	92 01       	movw	r18, r4
    60fa:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    60fe:	64 87       	std	Z+12, r22	; 0x0c
    6100:	75 87       	std	Z+13, r23	; 0x0d
    6102:	86 87       	std	Z+14, r24	; 0x0e
    6104:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    6106:	60 8b       	std	Z+16, r22	; 0x10
    6108:	71 8b       	std	Z+17, r23	; 0x11
    610a:	82 8b       	std	Z+18, r24	; 0x12
    610c:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    610e:	45 28       	or	r4, r5
    6110:	46 28       	or	r4, r6
    6112:	47 28       	or	r4, r7
    6114:	21 f4       	brne	.+8      	; 0x611e <_nrk_scheduler+0x420>
    6116:	c4 86       	std	Z+12, r12	; 0x0c
    6118:	d5 86       	std	Z+13, r13	; 0x0d
    611a:	e6 86       	std	Z+14, r14	; 0x0e
    611c:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    611e:	44 24       	eor	r4, r4
    6120:	43 94       	inc	r4
    6122:	51 2c       	mov	r5, r1
    6124:	ea 81       	ldd	r30, Y+2	; 0x02
    6126:	fb 81       	ldd	r31, Y+3	; 0x03
    6128:	51 a2       	std	Z+33, r5	; 0x21
    612a:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    612c:	ea 81       	ldd	r30, Y+2	; 0x02
    612e:	fb 81       	ldd	r31, Y+3	; 0x03
    6130:	84 85       	ldd	r24, Z+12	; 0x0c
    6132:	95 85       	ldd	r25, Z+13	; 0x0d
    6134:	a6 85       	ldd	r26, Z+14	; 0x0e
    6136:	b7 85       	ldd	r27, Z+15	; 0x0f
    6138:	00 97       	sbiw	r24, 0x00	; 0
    613a:	a1 05       	cpc	r26, r1
    613c:	b1 05       	cpc	r27, r1
    613e:	49 f0       	breq	.+18     	; 0x6152 <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    6140:	a8 01       	movw	r20, r16
    6142:	60 e0       	ldi	r22, 0x00	; 0
    6144:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    6146:	84 17       	cp	r24, r20
    6148:	95 07       	cpc	r25, r21
    614a:	a6 07       	cpc	r26, r22
    614c:	b7 07       	cpc	r27, r23
    614e:	08 f4       	brcc	.+2      	; 0x6152 <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    6150:	8c 01       	movw	r16, r24
    6152:	f9 81       	ldd	r31, Y+1	; 0x01
    6154:	ff 5f       	subi	r31, 0xFF	; 255
    6156:	f9 83       	std	Y+1, r31	; 0x01
    6158:	2a 81       	ldd	r18, Y+2	; 0x02
    615a:	3b 81       	ldd	r19, Y+3	; 0x03
    615c:	25 5d       	subi	r18, 0xD5	; 213
    615e:	3f 4f       	sbci	r19, 0xFF	; 255
    6160:	3b 83       	std	Y+3, r19	; 0x03
    6162:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    6164:	f7 30       	cpi	r31, 0x07	; 7
    6166:	09 f0       	breq	.+2      	; 0x616a <_nrk_scheduler+0x46c>
    6168:	e9 ce       	rjmp	.-558    	; 0x5f3c <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    616a:	0e 94 7f 28 	call	0x50fe	; 0x50fe <nrk_get_high_ready_task_ID>
    616e:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    6170:	3b e2       	ldi	r19, 0x2B	; 43
    6172:	83 02       	muls	r24, r19
    6174:	f0 01       	movw	r30, r0
    6176:	11 24       	eor	r1, r1
    6178:	e0 51       	subi	r30, 0x10	; 16
    617a:	fa 4e       	sbci	r31, 0xEA	; 234
    617c:	22 85       	ldd	r18, Z+10	; 0x0a
    617e:	20 93 38 17 	sts	0x1738, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    6182:	f0 93 28 17 	sts	0x1728, r31
    6186:	e0 93 27 17 	sts	0x1727, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    618a:	88 23       	and	r24, r24
    618c:	f9 f0       	breq	.+62     	; 0x61cc <_nrk_scheduler+0x4ce>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    618e:	85 a1       	ldd	r24, Z+37	; 0x25
    6190:	96 a1       	ldd	r25, Z+38	; 0x26
    6192:	a7 a1       	ldd	r26, Z+39	; 0x27
    6194:	b0 a5       	ldd	r27, Z+40	; 0x28
    6196:	89 2b       	or	r24, r25
    6198:	8a 2b       	or	r24, r26
    619a:	8b 2b       	or	r24, r27
    619c:	99 f0       	breq	.+38     	; 0x61c4 <_nrk_scheduler+0x4c6>
    619e:	85 8d       	ldd	r24, Z+29	; 0x1d
    61a0:	96 8d       	ldd	r25, Z+30	; 0x1e
    61a2:	a7 8d       	ldd	r26, Z+31	; 0x1f
    61a4:	b0 a1       	ldd	r27, Z+32	; 0x20
    61a6:	8a 3f       	cpi	r24, 0xFA	; 250
    61a8:	91 05       	cpc	r25, r1
    61aa:	a1 05       	cpc	r26, r1
    61ac:	b1 05       	cpc	r27, r1
    61ae:	50 f4       	brcc	.+20     	; 0x61c4 <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    61b0:	a8 01       	movw	r20, r16
    61b2:	60 e0       	ldi	r22, 0x00	; 0
    61b4:	70 e0       	ldi	r23, 0x00	; 0
    61b6:	84 17       	cp	r24, r20
    61b8:	95 07       	cpc	r25, r21
    61ba:	a6 07       	cpc	r26, r22
    61bc:	b7 07       	cpc	r27, r23
    61be:	e8 f4       	brcc	.+58     	; 0x61fa <_nrk_scheduler+0x4fc>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    61c0:	8c 01       	movw	r16, r24
    61c2:	1b c0       	rjmp	.+54     	; 0x61fa <_nrk_scheduler+0x4fc>
    61c4:	0b 3f       	cpi	r16, 0xFB	; 251
    61c6:	11 05       	cpc	r17, r1
    61c8:	c0 f0       	brcs	.+48     	; 0x61fa <_nrk_scheduler+0x4fc>
    61ca:	12 c0       	rjmp	.+36     	; 0x61f0 <_nrk_scheduler+0x4f2>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    61cc:	04 30       	cpi	r16, 0x04	; 4
    61ce:	11 05       	cpc	r17, r1
    61d0:	a0 f0       	brcs	.+40     	; 0x61fa <_nrk_scheduler+0x4fc>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    61d2:	c8 01       	movw	r24, r16
    61d4:	03 97       	sbiw	r24, 0x03	; 3
    61d6:	8a 3f       	cpi	r24, 0xFA	; 250
    61d8:	91 05       	cpc	r25, r1
    61da:	38 f4       	brcc	.+14     	; 0x61ea <_nrk_scheduler+0x4ec>
    61dc:	8c 01       	movw	r16, r24
    61de:	82 30       	cpi	r24, 0x02	; 2
    61e0:	91 05       	cpc	r25, r1
    61e2:	58 f4       	brcc	.+22     	; 0x61fa <_nrk_scheduler+0x4fc>
    61e4:	02 e0       	ldi	r16, 0x02	; 2
    61e6:	10 e0       	ldi	r17, 0x00	; 0
    61e8:	08 c0       	rjmp	.+16     	; 0x61fa <_nrk_scheduler+0x4fc>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    61ea:	0d 3f       	cpi	r16, 0xFD	; 253
    61ec:	11 05       	cpc	r17, r1
    61ee:	19 f0       	breq	.+6      	; 0x61f6 <_nrk_scheduler+0x4f8>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    61f0:	0a ef       	ldi	r16, 0xFA	; 250
    61f2:	10 e0       	ldi	r17, 0x00	; 0
    61f4:	02 c0       	rjmp	.+4      	; 0x61fa <_nrk_scheduler+0x4fc>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    61f6:	07 ef       	ldi	r16, 0xF7	; 247
    61f8:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    61fa:	20 93 29 17 	sts	0x1729, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    61fe:	f0 93 37 17 	sts	0x1737, r31
    6202:	e0 93 36 17 	sts	0x1736, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    6206:	00 93 4f 15 	sts	0x154F, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    620a:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    620e:	28 2f       	mov	r18, r24
    6210:	30 e0       	ldi	r19, 0x00	; 0
    6212:	2f 5f       	subi	r18, 0xFF	; 255
    6214:	3f 4f       	sbci	r19, 0xFF	; 255
    6216:	20 17       	cp	r18, r16
    6218:	31 07       	cpc	r19, r17
    621a:	40 f0       	brcs	.+16     	; 0x622c <_nrk_scheduler+0x52e>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    621c:	0e 94 76 33 	call	0x66ec	; 0x66ec <_nrk_os_timer_get>
    6220:	08 2f       	mov	r16, r24
    6222:	10 e0       	ldi	r17, 0x00	; 0
    6224:	0e 5f       	subi	r16, 0xFE	; 254
    6226:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    6228:	00 93 4f 15 	sts	0x154F, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    622c:	f1 10       	cpse	r15, r1
    622e:	10 92 2a 17 	sts	0x172A, r1

    _nrk_set_next_wakeup(next_wake);
    6232:	80 2f       	mov	r24, r16
    6234:	0e 94 14 33 	call	0x6628	; 0x6628 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    6238:	6c ed       	ldi	r22, 0xDC	; 220
    623a:	75 e0       	ldi	r23, 0x05	; 5
    623c:	c1 01       	movw	r24, r2
    623e:	0e 94 7c 32 	call	0x64f8	; 0x64f8 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    6242:	0e 94 99 36 	call	0x6d32	; 0x6d32 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    6246:	0f 90       	pop	r0
    6248:	0f 90       	pop	r0
    624a:	0f 90       	pop	r0
    624c:	df 91       	pop	r29
    624e:	cf 91       	pop	r28
    6250:	1f 91       	pop	r17
    6252:	0f 91       	pop	r16
    6254:	ff 90       	pop	r15
    6256:	ef 90       	pop	r14
    6258:	df 90       	pop	r13
    625a:	cf 90       	pop	r12
    625c:	bf 90       	pop	r11
    625e:	af 90       	pop	r10
    6260:	9f 90       	pop	r9
    6262:	8f 90       	pop	r8
    6264:	7f 90       	pop	r7
    6266:	6f 90       	pop	r6
    6268:	5f 90       	pop	r5
    626a:	4f 90       	pop	r4
    626c:	3f 90       	pop	r3
    626e:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    6270:	0c 94 a4 36 	jmp	0x6d48	; 0x6d48 <nrk_start_high_ready_task>

00006274 <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    6274:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    6276:	90 91 62 17 	lds	r25, 0x1762
    627a:	19 16       	cp	r1, r25
    627c:	74 f0       	brlt	.+28     	; 0x629a <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    627e:	84 e0       	ldi	r24, 0x04	; 4
    6280:	98 02       	muls	r25, r24
    6282:	f0 01       	movw	r30, r0
    6284:	11 24       	eor	r1, r1
    6286:	ed 59       	subi	r30, 0x9D	; 157
    6288:	f8 4e       	sbci	r31, 0xE8	; 232
    628a:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    628c:	33 83       	std	Z+3, r19	; 0x03
    628e:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    6290:	9f 5f       	subi	r25, 0xFF	; 255
    6292:	90 93 62 17 	sts	0x1762, r25
        return NRK_OK;
    6296:	81 e0       	ldi	r24, 0x01	; 1
    6298:	08 95       	ret
    }
    else
        return NRK_ERROR;
    629a:	8f ef       	ldi	r24, 0xFF	; 255
}
    629c:	08 95       	ret

0000629e <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    629e:	0f 93       	push	r16
    62a0:	1f 93       	push	r17
    62a2:	cf 93       	push	r28
    62a4:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    62a6:	40 91 62 17 	lds	r20, 0x1762
    62aa:	55 27       	eor	r21, r21
    62ac:	47 fd       	sbrc	r20, 7
    62ae:	50 95       	com	r21
    62b0:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    62b2:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    62b4:	2c 2f       	mov	r18, r28
    62b6:	30 e0       	ldi	r19, 0x00	; 0
    62b8:	24 17       	cp	r18, r20
    62ba:	35 07       	cpc	r19, r21
    62bc:	8c f5       	brge	.+98     	; 0x6320 <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    62be:	89 01       	movw	r16, r18
    62c0:	00 0f       	add	r16, r16
    62c2:	11 1f       	adc	r17, r17
    62c4:	00 0f       	add	r16, r16
    62c6:	11 1f       	adc	r17, r17
    62c8:	d8 01       	movw	r26, r16
    62ca:	ad 59       	subi	r26, 0x9D	; 157
    62cc:	b8 4e       	sbci	r27, 0xE8	; 232
    62ce:	ec 91       	ld	r30, X
    62d0:	ff 27       	eor	r31, r31
    62d2:	e7 fd       	sbrc	r30, 7
    62d4:	f0 95       	com	r31
    62d6:	e8 17       	cp	r30, r24
    62d8:	f9 07       	cpc	r31, r25
    62da:	01 f5       	brne	.+64     	; 0x631c <nrk_open+0x7e>
    62dc:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    62de:	f9 01       	movw	r30, r18
    62e0:	e9 59       	subi	r30, 0x99	; 153
    62e2:	f8 4e       	sbci	r31, 0xE8	; 232
    62e4:	80 81       	ld	r24, Z
    62e6:	81 11       	cpse	r24, r1
    62e8:	0b c0       	rjmp	.+22     	; 0x6300 <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    62ea:	81 e0       	ldi	r24, 0x01	; 1
    62ec:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    62ee:	12 96       	adiw	r26, 0x02	; 2
    62f0:	ed 91       	ld	r30, X+
    62f2:	fc 91       	ld	r31, X
    62f4:	13 97       	sbiw	r26, 0x03	; 3
    62f6:	20 e0       	ldi	r18, 0x00	; 0
    62f8:	40 e0       	ldi	r20, 0x00	; 0
    62fa:	50 e0       	ldi	r21, 0x00	; 0
    62fc:	80 e0       	ldi	r24, 0x00	; 0
    62fe:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    6300:	f8 01       	movw	r30, r16
    6302:	ed 59       	subi	r30, 0x9D	; 157
    6304:	f8 4e       	sbci	r31, 0xE8	; 232
    6306:	02 80       	ldd	r0, Z+2	; 0x02
    6308:	f3 81       	ldd	r31, Z+3	; 0x03
    630a:	e0 2d       	mov	r30, r0
    630c:	20 e0       	ldi	r18, 0x00	; 0
    630e:	40 e0       	ldi	r20, 0x00	; 0
    6310:	50 e0       	ldi	r21, 0x00	; 0
    6312:	6d 2f       	mov	r22, r29
    6314:	81 e0       	ldi	r24, 0x01	; 1
    6316:	09 95       	icall
            return cnt;
    6318:	8c 2f       	mov	r24, r28
    631a:	03 c0       	rjmp	.+6      	; 0x6322 <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    631c:	cf 5f       	subi	r28, 0xFF	; 255
    631e:	ca cf       	rjmp	.-108    	; 0x62b4 <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    6320:	8f ef       	ldi	r24, 0xFF	; 255
}
    6322:	df 91       	pop	r29
    6324:	cf 91       	pop	r28
    6326:	1f 91       	pop	r17
    6328:	0f 91       	pop	r16
    632a:	08 95       	ret

0000632c <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    632c:	90 e0       	ldi	r25, 0x00	; 0
    632e:	20 91 62 17 	lds	r18, 0x1762
    6332:	33 27       	eor	r19, r19
    6334:	27 fd       	sbrc	r18, 7
    6336:	30 95       	com	r19
    6338:	28 17       	cp	r18, r24
    633a:	39 07       	cpc	r19, r25
    633c:	84 f0       	brlt	.+32     	; 0x635e <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    633e:	88 0f       	add	r24, r24
    6340:	99 1f       	adc	r25, r25
    6342:	88 0f       	add	r24, r24
    6344:	99 1f       	adc	r25, r25
    6346:	fc 01       	movw	r30, r24
    6348:	ed 59       	subi	r30, 0x9D	; 157
    634a:	f8 4e       	sbci	r31, 0xE8	; 232
    634c:	02 80       	ldd	r0, Z+2	; 0x02
    634e:	f3 81       	ldd	r31, Z+3	; 0x03
    6350:	e0 2d       	mov	r30, r0
    6352:	20 e0       	ldi	r18, 0x00	; 0
    6354:	40 e0       	ldi	r20, 0x00	; 0
    6356:	50 e0       	ldi	r21, 0x00	; 0
    6358:	60 e0       	ldi	r22, 0x00	; 0
    635a:	82 e0       	ldi	r24, 0x02	; 2
    635c:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    635e:	81 e0       	ldi	r24, 0x01	; 1
    6360:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    6364:	8f ef       	ldi	r24, 0xFF	; 255
    6366:	08 95       	ret

00006368 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    6368:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	e0 91 62 17 	lds	r30, 0x1762
    6370:	ff 27       	eor	r31, r31
    6372:	e7 fd       	sbrc	r30, 7
    6374:	f0 95       	com	r31
    6376:	e8 17       	cp	r30, r24
    6378:	f9 07       	cpc	r31, r25
    637a:	74 f0       	brlt	.+28     	; 0x6398 <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    637c:	88 0f       	add	r24, r24
    637e:	99 1f       	adc	r25, r25
    6380:	88 0f       	add	r24, r24
    6382:	99 1f       	adc	r25, r25
    6384:	fc 01       	movw	r30, r24
    6386:	ed 59       	subi	r30, 0x9D	; 157
    6388:	f8 4e       	sbci	r31, 0xE8	; 232
    638a:	02 80       	ldd	r0, Z+2	; 0x02
    638c:	f3 81       	ldd	r31, Z+3	; 0x03
    638e:	e0 2d       	mov	r30, r0
    6390:	ab 01       	movw	r20, r22
    6392:	60 e0       	ldi	r22, 0x00	; 0
    6394:	86 e0       	ldi	r24, 0x06	; 6
    6396:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    6398:	81 e0       	ldi	r24, 0x01	; 1
    639a:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    639e:	8f ef       	ldi	r24, 0xFF	; 255
    63a0:	08 95       	ret

000063a2 <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    63a2:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	e0 91 62 17 	lds	r30, 0x1762
    63aa:	ff 27       	eor	r31, r31
    63ac:	e7 fd       	sbrc	r30, 7
    63ae:	f0 95       	com	r31
    63b0:	e8 17       	cp	r30, r24
    63b2:	f9 07       	cpc	r31, r25
    63b4:	74 f0       	brlt	.+28     	; 0x63d2 <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    63b6:	88 0f       	add	r24, r24
    63b8:	99 1f       	adc	r25, r25
    63ba:	88 0f       	add	r24, r24
    63bc:	99 1f       	adc	r25, r25
    63be:	fc 01       	movw	r30, r24
    63c0:	ed 59       	subi	r30, 0x9D	; 157
    63c2:	f8 4e       	sbci	r31, 0xE8	; 232
    63c4:	02 80       	ldd	r0, Z+2	; 0x02
    63c6:	f3 81       	ldd	r31, Z+3	; 0x03
    63c8:	e0 2d       	mov	r30, r0
    63ca:	ab 01       	movw	r20, r22
    63cc:	60 e0       	ldi	r22, 0x00	; 0
    63ce:	85 e0       	ldi	r24, 0x05	; 5
    63d0:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    63d2:	81 e0       	ldi	r24, 0x01	; 1
    63d4:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    63d8:	8f ef       	ldi	r24, 0xFF	; 255
    63da:	08 95       	ret

000063dc <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    63dc:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	e0 91 62 17 	lds	r30, 0x1762
    63e4:	ff 27       	eor	r31, r31
    63e6:	e7 fd       	sbrc	r30, 7
    63e8:	f0 95       	com	r31
    63ea:	e8 17       	cp	r30, r24
    63ec:	f9 07       	cpc	r31, r25
    63ee:	74 f0       	brlt	.+28     	; 0x640c <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    63f0:	88 0f       	add	r24, r24
    63f2:	99 1f       	adc	r25, r25
    63f4:	88 0f       	add	r24, r24
    63f6:	99 1f       	adc	r25, r25
    63f8:	fc 01       	movw	r30, r24
    63fa:	ed 59       	subi	r30, 0x9D	; 157
    63fc:	f8 4e       	sbci	r31, 0xE8	; 232
    63fe:	02 80       	ldd	r0, Z+2	; 0x02
    6400:	f3 81       	ldd	r31, Z+3	; 0x03
    6402:	e0 2d       	mov	r30, r0
    6404:	40 e0       	ldi	r20, 0x00	; 0
    6406:	50 e0       	ldi	r21, 0x00	; 0
    6408:	84 e0       	ldi	r24, 0x04	; 4
    640a:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    640c:	81 e0       	ldi	r24, 0x01	; 1
    640e:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    6412:	8f ef       	ldi	r24, 0xFF	; 255
    6414:	08 95       	ret

00006416 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    6416:	90 e0       	ldi	r25, 0x00	; 0
    6418:	20 91 62 17 	lds	r18, 0x1762
    641c:	33 27       	eor	r19, r19
    641e:	27 fd       	sbrc	r18, 7
    6420:	30 95       	com	r19
    6422:	28 17       	cp	r18, r24
    6424:	39 07       	cpc	r19, r25
    6426:	7c f0       	brlt	.+30     	; 0x6446 <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    6428:	88 0f       	add	r24, r24
    642a:	99 1f       	adc	r25, r25
    642c:	88 0f       	add	r24, r24
    642e:	99 1f       	adc	r25, r25
    6430:	fc 01       	movw	r30, r24
    6432:	ed 59       	subi	r30, 0x9D	; 157
    6434:	f8 4e       	sbci	r31, 0xE8	; 232
    6436:	02 80       	ldd	r0, Z+2	; 0x02
    6438:	f3 81       	ldd	r31, Z+3	; 0x03
    643a:	e0 2d       	mov	r30, r0
    643c:	20 e0       	ldi	r18, 0x00	; 0
    643e:	40 e0       	ldi	r20, 0x00	; 0
    6440:	50 e0       	ldi	r21, 0x00	; 0
    6442:	83 e0       	ldi	r24, 0x03	; 3
    6444:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	0e 94 09 23 	call	0x4612	; 0x4612 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    644c:	8f ef       	ldi	r24, 0xFF	; 255
    644e:	08 95       	ret

00006450 <nrk_spin_wait_us>:
	...
    6468:	01 97       	sbiw	r24, 0x01	; 1
    646a:	91 f7       	brne	.-28     	; 0x6450 <nrk_spin_wait_us>
    646c:	08 95       	ret

0000646e <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    646e:	10 92 21 01 	sts	0x0121, r1
    6472:	08 95       	ret

00006474 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    6474:	89 e0       	ldi	r24, 0x09	; 9
    6476:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    647a:	8d e8       	ldi	r24, 0x8D	; 141
    647c:	9c e3       	ldi	r25, 0x3C	; 60
    647e:	90 93 29 01 	sts	0x0129, r25
    6482:	80 93 28 01 	sts	0x0128, r24
    6486:	08 95       	ret

00006488 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    6488:	10 92 25 01 	sts	0x0125, r1
    648c:	10 92 24 01 	sts	0x0124, r1
    6490:	08 95       	ret

00006492 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    6492:	cf 93       	push	r28
    6494:	df 93       	push	r29
    6496:	00 d0       	rcall	.+0      	; 0x6498 <_nrk_precision_os_timer_get+0x6>
    6498:	cd b7       	in	r28, 0x3d	; 61
    649a:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    649c:	80 91 24 01 	lds	r24, 0x0124
    64a0:	90 91 25 01 	lds	r25, 0x0125
    64a4:	9a 83       	std	Y+2, r25	; 0x02
    64a6:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    64a8:	89 81       	ldd	r24, Y+1	; 0x01
    64aa:	9a 81       	ldd	r25, Y+2	; 0x02
}
    64ac:	0f 90       	pop	r0
    64ae:	0f 90       	pop	r0
    64b0:	df 91       	pop	r29
    64b2:	cf 91       	pop	r28
    64b4:	08 95       	ret

000064b6 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    64b6:	10 92 81 00 	sts	0x0081, r1
    64ba:	08 95       	ret

000064bc <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    64bc:	81 e0       	ldi	r24, 0x01	; 1
    64be:	80 93 81 00 	sts	0x0081, r24
    64c2:	08 95       	ret

000064c4 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    64c4:	83 b5       	in	r24, 0x23	; 35
    64c6:	81 60       	ori	r24, 0x01	; 1
    64c8:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    64ca:	10 92 85 00 	sts	0x0085, r1
    64ce:	10 92 84 00 	sts	0x0084, r1
    64d2:	08 95       	ret

000064d4 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    64d4:	cf 93       	push	r28
    64d6:	df 93       	push	r29
    64d8:	00 d0       	rcall	.+0      	; 0x64da <_nrk_high_speed_timer_get+0x6>
    64da:	cd b7       	in	r28, 0x3d	; 61
    64dc:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    64de:	80 91 84 00 	lds	r24, 0x0084
    64e2:	90 91 85 00 	lds	r25, 0x0085
    64e6:	9a 83       	std	Y+2, r25	; 0x02
    64e8:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    64ea:	89 81       	ldd	r24, Y+1	; 0x01
    64ec:	9a 81       	ldd	r25, Y+2	; 0x02
}
    64ee:	0f 90       	pop	r0
    64f0:	0f 90       	pop	r0
    64f2:	df 91       	pop	r29
    64f4:	cf 91       	pop	r28
    64f6:	08 95       	ret

000064f8 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    64f8:	cf 92       	push	r12
    64fa:	df 92       	push	r13
    64fc:	ef 92       	push	r14
    64fe:	ff 92       	push	r15
    6500:	cf 93       	push	r28
    6502:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    6504:	ec 01       	movw	r28, r24
    6506:	cc 0f       	add	r28, r28
    6508:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    650a:	c9 37       	cpi	r28, 0x79	; 121
    650c:	8f ef       	ldi	r24, 0xFF	; 255
    650e:	d8 07       	cpc	r29, r24
    6510:	10 f0       	brcs	.+4      	; 0x6516 <nrk_high_speed_timer_wait+0x1e>
    6512:	c0 e0       	ldi	r28, 0x00	; 0
    6514:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    6516:	6b 01       	movw	r12, r22
    6518:	e1 2c       	mov	r14, r1
    651a:	f1 2c       	mov	r15, r1
    651c:	cc 0e       	add	r12, r28
    651e:	dd 1e       	adc	r13, r29
    6520:	e1 1c       	adc	r14, r1
    6522:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    6524:	81 e0       	ldi	r24, 0x01	; 1
    6526:	c8 16       	cp	r12, r24
    6528:	d1 04       	cpc	r13, r1
    652a:	e8 06       	cpc	r14, r24
    652c:	f1 04       	cpc	r15, r1
    652e:	40 f0       	brcs	.+16     	; 0x6540 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    6530:	81 e0       	ldi	r24, 0x01	; 1
    6532:	e8 1a       	sub	r14, r24
    6534:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    6536:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <_nrk_high_speed_timer_get>
    653a:	c8 17       	cp	r28, r24
    653c:	d9 07       	cpc	r29, r25
    653e:	d8 f3       	brcs	.-10     	; 0x6536 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    6540:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <_nrk_high_speed_timer_get>
    6544:	8c 15       	cp	r24, r12
    6546:	9d 05       	cpc	r25, r13
    6548:	d8 f3       	brcs	.-10     	; 0x6540 <nrk_high_speed_timer_wait+0x48>
}
    654a:	df 91       	pop	r29
    654c:	cf 91       	pop	r28
    654e:	ff 90       	pop	r15
    6550:	ef 90       	pop	r14
    6552:	df 90       	pop	r13
    6554:	cf 90       	pop	r12
    6556:	08 95       	ret

00006558 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    6558:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    655c:	e0 e7       	ldi	r30, 0x70	; 112
    655e:	f0 e0       	ldi	r31, 0x00	; 0
    6560:	80 81       	ld	r24, Z
    6562:	8d 7f       	andi	r24, 0xFD	; 253
    6564:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    6566:	80 81       	ld	r24, Z
    6568:	8e 7f       	andi	r24, 0xFE	; 254
    656a:	80 83       	st	Z, r24
    656c:	08 95       	ret

0000656e <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    656e:	80 93 b2 00 	sts	0x00B2, r24
    6572:	08 95       	ret

00006574 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    6574:	e0 e7       	ldi	r30, 0x70	; 112
    6576:	f0 e0       	ldi	r31, 0x00	; 0
    6578:	80 81       	ld	r24, Z
    657a:	83 60       	ori	r24, 0x03	; 3
    657c:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    657e:	83 e0       	ldi	r24, 0x03	; 3
    6580:	80 93 b1 00 	sts	0x00B1, r24
    6584:	08 95       	ret

00006586 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    6586:	83 b5       	in	r24, 0x23	; 35
    6588:	82 60       	ori	r24, 0x02	; 2
    658a:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    658c:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    6590:	10 92 4d 15 	sts	0x154D, r1
    _nrk_prev_timer_val=0;
    6594:	10 92 4f 15 	sts	0x154F, r1
    6598:	08 95       	ret

0000659a <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    659a:	cf 93       	push	r28
    659c:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    659e:	8e ef       	ldi	r24, 0xFE	; 254
    65a0:	80 93 4f 15 	sts	0x154F, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    65a4:	80 e2       	ldi	r24, 0x20	; 32
    65a6:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    65aa:	80 91 4f 15 	lds	r24, 0x154F
    65ae:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    65b2:	83 e0       	ldi	r24, 0x03	; 3
    65b4:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    65b6:	92 e0       	ldi	r25, 0x02	; 2
    65b8:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    65bc:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    65c0:	93 b5       	in	r25, 0x23	; 35
    65c2:	92 60       	ori	r25, 0x02	; 2
    65c4:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    65c6:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    65c8:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    65ca:	83 b5       	in	r24, 0x23	; 35
    65cc:	82 60       	ori	r24, 0x02	; 2
    65ce:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    65d0:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    65d4:	81 e0       	ldi	r24, 0x01	; 1
    65d6:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    65da:	10 92 85 00 	sts	0x0085, r1
    65de:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    65e2:	83 b5       	in	r24, 0x23	; 35
    65e4:	82 60       	ori	r24, 0x02	; 2
    65e6:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    65e8:	83 b5       	in	r24, 0x23	; 35
    65ea:	81 60       	ori	r24, 0x01	; 1
    65ec:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    65ee:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    65f2:	c4 e2       	ldi	r28, 0x24	; 36
    65f4:	d1 e0       	ldi	r29, 0x01	; 1
    65f6:	19 82       	std	Y+1, r1	; 0x01
    65f8:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    65fa:	83 b5       	in	r24, 0x23	; 35
    65fc:	82 60       	ori	r24, 0x02	; 2
    65fe:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    6600:	83 b5       	in	r24, 0x23	; 35
    6602:	81 60       	ori	r24, 0x01	; 1
    6604:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    6606:	0e 94 c3 32 	call	0x6586	; 0x6586 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    660a:	19 82       	std	Y+1, r1	; 0x01
    660c:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    660e:	0e 94 ba 32 	call	0x6574	; 0x6574 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    6612:	0e 94 3a 32 	call	0x6474	; 0x6474 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    6616:	10 92 4d 15 	sts	0x154D, r1
}
    661a:	df 91       	pop	r29
    661c:	cf 91       	pop	r28
    661e:	08 95       	ret

00006620 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    6620:	80 91 b3 00 	lds	r24, 0x00B3
}
    6624:	8f 5f       	subi	r24, 0xFF	; 255
    6626:	08 95       	ret

00006628 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    6628:	81 50       	subi	r24, 0x01	; 1
    662a:	80 93 b3 00 	sts	0x00B3, r24
    662e:	08 95       	ret

00006630 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    6630:	81 11       	cpse	r24, r1
    6632:	02 c0       	rjmp	.+4      	; 0x6638 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    6634:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    6638:	8f ef       	ldi	r24, 0xFF	; 255
    663a:	08 95       	ret

0000663c <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    663c:	81 11       	cpse	r24, r1
    663e:	06 c0       	rjmp	.+12     	; 0x664c <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    6640:	10 92 95 00 	sts	0x0095, r1
    6644:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    6648:	81 e0       	ldi	r24, 0x01	; 1
    664a:	08 95       	ret
	}
return NRK_ERROR;
    664c:	8f ef       	ldi	r24, 0xFF	; 255
}
    664e:	08 95       	ret

00006650 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    6650:	81 11       	cpse	r24, r1
    6652:	05 c0       	rjmp	.+10     	; 0x665e <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    6654:	80 91 94 00 	lds	r24, 0x0094
    6658:	90 91 95 00 	lds	r25, 0x0095
    665c:	08 95       	ret
	}
return 0;
    665e:	80 e0       	ldi	r24, 0x00	; 0
    6660:	90 e0       	ldi	r25, 0x00	; 0

}
    6662:	08 95       	ret

00006664 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    6664:	81 11       	cpse	r24, r1
    6666:	05 c0       	rjmp	.+10     	; 0x6672 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    6668:	82 e0       	ldi	r24, 0x02	; 2
    666a:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    666e:	81 e0       	ldi	r24, 0x01	; 1
    6670:	08 95       	ret
	}
return NRK_ERROR;
    6672:	8f ef       	ldi	r24, 0xFF	; 255
}
    6674:	08 95       	ret

00006676 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    6676:	81 11       	cpse	r24, r1
    6678:	35 c0       	rjmp	.+106    	; 0x66e4 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    667a:	cb 01       	movw	r24, r22
    667c:	01 97       	sbiw	r24, 0x01	; 1
    667e:	05 97       	sbiw	r24, 0x05	; 5
    6680:	10 f4       	brcc	.+4      	; 0x6686 <nrk_timer_int_configure+0x10>
    6682:	60 93 4e 15 	sts	0x154E, r22
	TCCR3A = 0;  
    6686:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    668a:	88 e0       	ldi	r24, 0x08	; 8
    668c:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    6690:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    6694:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    6698:	30 93 4c 15 	sts	0x154C, r19
    669c:	20 93 4b 15 	sts	0x154B, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    66a0:	80 91 4e 15 	lds	r24, 0x154E
    66a4:	81 30       	cpi	r24, 0x01	; 1
    66a6:	21 f4       	brne	.+8      	; 0x66b0 <nrk_timer_int_configure+0x3a>
    66a8:	80 91 91 00 	lds	r24, 0x0091
    66ac:	81 60       	ori	r24, 0x01	; 1
    66ae:	11 c0       	rjmp	.+34     	; 0x66d2 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    66b0:	82 30       	cpi	r24, 0x02	; 2
    66b2:	21 f4       	brne	.+8      	; 0x66bc <nrk_timer_int_configure+0x46>
    66b4:	80 91 91 00 	lds	r24, 0x0091
    66b8:	82 60       	ori	r24, 0x02	; 2
    66ba:	0b c0       	rjmp	.+22     	; 0x66d2 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    66bc:	83 30       	cpi	r24, 0x03	; 3
    66be:	21 f4       	brne	.+8      	; 0x66c8 <nrk_timer_int_configure+0x52>
    66c0:	80 91 91 00 	lds	r24, 0x0091
    66c4:	83 60       	ori	r24, 0x03	; 3
    66c6:	05 c0       	rjmp	.+10     	; 0x66d2 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    66c8:	84 30       	cpi	r24, 0x04	; 4
    66ca:	31 f4       	brne	.+12     	; 0x66d8 <nrk_timer_int_configure+0x62>
    66cc:	80 91 91 00 	lds	r24, 0x0091
    66d0:	84 60       	ori	r24, 0x04	; 4
    66d2:	80 93 91 00 	sts	0x0091, r24
    66d6:	08 c0       	rjmp	.+16     	; 0x66e8 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    66d8:	85 30       	cpi	r24, 0x05	; 5
    66da:	31 f4       	brne	.+12     	; 0x66e8 <nrk_timer_int_configure+0x72>
    66dc:	80 91 91 00 	lds	r24, 0x0091
    66e0:	85 60       	ori	r24, 0x05	; 5
    66e2:	f7 cf       	rjmp	.-18     	; 0x66d2 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    66e4:	8f ef       	ldi	r24, 0xFF	; 255
    66e6:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    66e8:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    66ea:	08 95       	ret

000066ec <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    66ec:	80 91 b2 00 	lds	r24, 0x00B2
}
    66f0:	08 95       	ret

000066f2 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    66f2:	1f 92       	push	r1
    66f4:	0f 92       	push	r0
    66f6:	0f b6       	in	r0, 0x3f	; 63
    66f8:	0f 92       	push	r0
    66fa:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    66fc:	60 e0       	ldi	r22, 0x00	; 0
    66fe:	8a e0       	ldi	r24, 0x0A	; 10
    6700:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
	while(1);
    6704:	ff cf       	rjmp	.-2      	; 0x6704 <__vector_default+0x12>

00006706 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    6706:	0f 92       	push	r0
    6708:	0f b6       	in	r0, 0x3f	; 63
    670a:	0f 92       	push	r0
    670c:	1f 92       	push	r1
    670e:	2f 92       	push	r2
    6710:	3f 92       	push	r3
    6712:	4f 92       	push	r4
    6714:	5f 92       	push	r5
    6716:	6f 92       	push	r6
    6718:	7f 92       	push	r7
    671a:	8f 92       	push	r8
    671c:	9f 92       	push	r9
    671e:	af 92       	push	r10
    6720:	bf 92       	push	r11
    6722:	cf 92       	push	r12
    6724:	df 92       	push	r13
    6726:	ef 92       	push	r14
    6728:	ff 92       	push	r15
    672a:	0f 93       	push	r16
    672c:	1f 93       	push	r17
    672e:	2f 93       	push	r18
    6730:	3f 93       	push	r19
    6732:	4f 93       	push	r20
    6734:	5f 93       	push	r21
    6736:	6f 93       	push	r22
    6738:	7f 93       	push	r23
    673a:	8f 93       	push	r24
    673c:	9f 93       	push	r25
    673e:	af 93       	push	r26
    6740:	bf 93       	push	r27
    6742:	cf 93       	push	r28
    6744:	df 93       	push	r29
    6746:	ef 93       	push	r30
    6748:	ff 93       	push	r31
    674a:	a0 91 36 17 	lds	r26, 0x1736
    674e:	b0 91 37 17 	lds	r27, 0x1737
    6752:	0d b6       	in	r0, 0x3d	; 61
    6754:	0d 92       	st	X+, r0
    6756:	0e b6       	in	r0, 0x3e	; 62
    6758:	0d 92       	st	X+, r0
    675a:	1f 92       	push	r1
    675c:	a0 91 e2 0f 	lds	r26, 0x0FE2
    6760:	b0 91 e3 0f 	lds	r27, 0x0FE3
    6764:	1e 90       	ld	r1, -X
    6766:	be bf       	out	0x3e, r27	; 62
    6768:	ad bf       	out	0x3d, r26	; 61
    676a:	08 95       	ret

0000676c <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    676c:	1f 92       	push	r1
    676e:	0f 92       	push	r0
    6770:	0f b6       	in	r0, 0x3f	; 63
    6772:	0f 92       	push	r0
    6774:	11 24       	eor	r1, r1
    6776:	0b b6       	in	r0, 0x3b	; 59
    6778:	0f 92       	push	r0
    677a:	2f 93       	push	r18
    677c:	3f 93       	push	r19
    677e:	4f 93       	push	r20
    6780:	5f 93       	push	r21
    6782:	6f 93       	push	r22
    6784:	7f 93       	push	r23
    6786:	8f 93       	push	r24
    6788:	9f 93       	push	r25
    678a:	af 93       	push	r26
    678c:	bf 93       	push	r27
    678e:	ef 93       	push	r30
    6790:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    6792:	e0 91 4b 15 	lds	r30, 0x154B
    6796:	f0 91 4c 15 	lds	r31, 0x154C
    679a:	30 97       	sbiw	r30, 0x00	; 0
    679c:	11 f0       	breq	.+4      	; 0x67a2 <__vector_32+0x36>
    679e:	09 95       	icall
    67a0:	04 c0       	rjmp	.+8      	; 0x67aa <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    67a2:	60 e0       	ldi	r22, 0x00	; 0
    67a4:	8a e0       	ldi	r24, 0x0A	; 10
    67a6:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
	return;  	
}
    67aa:	ff 91       	pop	r31
    67ac:	ef 91       	pop	r30
    67ae:	bf 91       	pop	r27
    67b0:	af 91       	pop	r26
    67b2:	9f 91       	pop	r25
    67b4:	8f 91       	pop	r24
    67b6:	7f 91       	pop	r23
    67b8:	6f 91       	pop	r22
    67ba:	5f 91       	pop	r21
    67bc:	4f 91       	pop	r20
    67be:	3f 91       	pop	r19
    67c0:	2f 91       	pop	r18
    67c2:	0f 90       	pop	r0
    67c4:	0b be       	out	0x3b, r0	; 59
    67c6:	0f 90       	pop	r0
    67c8:	0f be       	out	0x3f, r0	; 63
    67ca:	0f 90       	pop	r0
    67cc:	1f 90       	pop	r1
    67ce:	18 95       	reti

000067d0 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    67d0:	1f 92       	push	r1
    67d2:	0f 92       	push	r0
    67d4:	0f b6       	in	r0, 0x3f	; 63
    67d6:	0f 92       	push	r0
    67d8:	11 24       	eor	r1, r1

	return;  	
} 
    67da:	0f 90       	pop	r0
    67dc:	0f be       	out	0x3f, r0	; 63
    67de:	0f 90       	pop	r0
    67e0:	1f 90       	pop	r1
    67e2:	18 95       	reti

000067e4 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    67e4:	04 b6       	in	r0, 0x34	; 52
    67e6:	03 fe       	sbrs	r0, 3
    67e8:	02 c0       	rjmp	.+4      	; 0x67ee <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    67ea:	80 e1       	ldi	r24, 0x10	; 16
    67ec:	01 c0       	rjmp	.+2      	; 0x67f0 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    67ee:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    67f0:	04 b6       	in	r0, 0x34	; 52
    67f2:	02 fe       	sbrs	r0, 2
    67f4:	06 c0       	rjmp	.+12     	; 0x6802 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    67f6:	94 b7       	in	r25, 0x34	; 52
    67f8:	9b 7f       	andi	r25, 0xFB	; 251
    67fa:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    67fc:	04 b6       	in	r0, 0x34	; 52
    67fe:	00 fe       	sbrs	r0, 0
		error|=0x04;
    6800:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    6802:	04 b6       	in	r0, 0x34	; 52
    6804:	01 fe       	sbrs	r0, 1
    6806:	05 c0       	rjmp	.+10     	; 0x6812 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    6808:	94 b7       	in	r25, 0x34	; 52
    680a:	9d 7f       	andi	r25, 0xFD	; 253
    680c:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    680e:	82 60       	ori	r24, 0x02	; 2
    6810:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    6812:	81 11       	cpse	r24, r1
    6814:	0c c0       	rjmp	.+24     	; 0x682e <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    6816:	04 b6       	in	r0, 0x34	; 52
    6818:	00 fe       	sbrs	r0, 0
    681a:	04 c0       	rjmp	.+8      	; 0x6824 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    681c:	94 b7       	in	r25, 0x34	; 52
    681e:	9e 7f       	andi	r25, 0xFE	; 254
    6820:	94 bf       	out	0x34, r25	; 52
    6822:	01 c0       	rjmp	.+2      	; 0x6826 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    6824:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    6826:	90 91 b0 00 	lds	r25, 0x00B0
    682a:	91 11       	cpse	r25, r1
    682c:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    682e:	08 95       	ret

00006830 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    6830:	81 11       	cpse	r24, r1
    6832:	02 c0       	rjmp	.+4      	; 0x6838 <nrk_ext_int_enable+0x8>
    6834:	e8 9a       	sbi	0x1d, 0	; 29
    6836:	39 c0       	rjmp	.+114    	; 0x68aa <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    6838:	81 30       	cpi	r24, 0x01	; 1
    683a:	11 f4       	brne	.+4      	; 0x6840 <nrk_ext_int_enable+0x10>
    683c:	e9 9a       	sbi	0x1d, 1	; 29
    683e:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    6840:	82 30       	cpi	r24, 0x02	; 2
    6842:	11 f4       	brne	.+4      	; 0x6848 <nrk_ext_int_enable+0x18>
    6844:	ea 9a       	sbi	0x1d, 2	; 29
    6846:	31 c0       	rjmp	.+98     	; 0x68aa <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    6848:	83 30       	cpi	r24, 0x03	; 3
    684a:	21 f4       	brne	.+8      	; 0x6854 <nrk_ext_int_enable+0x24>
    684c:	80 91 6b 00 	lds	r24, 0x006B
    6850:	81 60       	ori	r24, 0x01	; 1
    6852:	29 c0       	rjmp	.+82     	; 0x68a6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    6854:	84 30       	cpi	r24, 0x04	; 4
    6856:	21 f4       	brne	.+8      	; 0x6860 <nrk_ext_int_enable+0x30>
    6858:	80 91 6b 00 	lds	r24, 0x006B
    685c:	82 60       	ori	r24, 0x02	; 2
    685e:	23 c0       	rjmp	.+70     	; 0x68a6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    6860:	85 30       	cpi	r24, 0x05	; 5
    6862:	21 f4       	brne	.+8      	; 0x686c <nrk_ext_int_enable+0x3c>
    6864:	80 91 6b 00 	lds	r24, 0x006B
    6868:	84 60       	ori	r24, 0x04	; 4
    686a:	1d c0       	rjmp	.+58     	; 0x68a6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    686c:	86 30       	cpi	r24, 0x06	; 6
    686e:	21 f4       	brne	.+8      	; 0x6878 <nrk_ext_int_enable+0x48>
    6870:	80 91 6b 00 	lds	r24, 0x006B
    6874:	88 60       	ori	r24, 0x08	; 8
    6876:	17 c0       	rjmp	.+46     	; 0x68a6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    6878:	87 30       	cpi	r24, 0x07	; 7
    687a:	21 f4       	brne	.+8      	; 0x6884 <nrk_ext_int_enable+0x54>
    687c:	80 91 6b 00 	lds	r24, 0x006B
    6880:	80 61       	ori	r24, 0x10	; 16
    6882:	11 c0       	rjmp	.+34     	; 0x68a6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    6884:	88 30       	cpi	r24, 0x08	; 8
    6886:	21 f4       	brne	.+8      	; 0x6890 <nrk_ext_int_enable+0x60>
    6888:	80 91 6b 00 	lds	r24, 0x006B
    688c:	80 62       	ori	r24, 0x20	; 32
    688e:	0b c0       	rjmp	.+22     	; 0x68a6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    6890:	89 30       	cpi	r24, 0x09	; 9
    6892:	21 f4       	brne	.+8      	; 0x689c <nrk_ext_int_enable+0x6c>
    6894:	80 91 6b 00 	lds	r24, 0x006B
    6898:	80 64       	ori	r24, 0x40	; 64
    689a:	05 c0       	rjmp	.+10     	; 0x68a6 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    689c:	8a 30       	cpi	r24, 0x0A	; 10
    689e:	39 f4       	brne	.+14     	; 0x68ae <nrk_ext_int_enable+0x7e>
    68a0:	80 91 6b 00 	lds	r24, 0x006B
    68a4:	80 68       	ori	r24, 0x80	; 128
    68a6:	80 93 6b 00 	sts	0x006B, r24
    68aa:	81 e0       	ldi	r24, 0x01	; 1
    68ac:	08 95       	ret
return NRK_ERROR;
    68ae:	8f ef       	ldi	r24, 0xFF	; 255
}
    68b0:	08 95       	ret

000068b2 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    68b2:	81 11       	cpse	r24, r1
    68b4:	02 c0       	rjmp	.+4      	; 0x68ba <nrk_ext_int_disable+0x8>
    68b6:	e8 98       	cbi	0x1d, 0	; 29
    68b8:	39 c0       	rjmp	.+114    	; 0x692c <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    68ba:	81 30       	cpi	r24, 0x01	; 1
    68bc:	11 f4       	brne	.+4      	; 0x68c2 <nrk_ext_int_disable+0x10>
    68be:	e9 98       	cbi	0x1d, 1	; 29
    68c0:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    68c2:	82 30       	cpi	r24, 0x02	; 2
    68c4:	11 f4       	brne	.+4      	; 0x68ca <nrk_ext_int_disable+0x18>
    68c6:	e9 98       	cbi	0x1d, 1	; 29
    68c8:	31 c0       	rjmp	.+98     	; 0x692c <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    68ca:	83 30       	cpi	r24, 0x03	; 3
    68cc:	21 f4       	brne	.+8      	; 0x68d6 <nrk_ext_int_disable+0x24>
    68ce:	80 91 6b 00 	lds	r24, 0x006B
    68d2:	8e 7f       	andi	r24, 0xFE	; 254
    68d4:	29 c0       	rjmp	.+82     	; 0x6928 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    68d6:	84 30       	cpi	r24, 0x04	; 4
    68d8:	21 f4       	brne	.+8      	; 0x68e2 <nrk_ext_int_disable+0x30>
    68da:	80 91 6b 00 	lds	r24, 0x006B
    68de:	8d 7f       	andi	r24, 0xFD	; 253
    68e0:	23 c0       	rjmp	.+70     	; 0x6928 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    68e2:	85 30       	cpi	r24, 0x05	; 5
    68e4:	21 f4       	brne	.+8      	; 0x68ee <nrk_ext_int_disable+0x3c>
    68e6:	80 91 6b 00 	lds	r24, 0x006B
    68ea:	8b 7f       	andi	r24, 0xFB	; 251
    68ec:	1d c0       	rjmp	.+58     	; 0x6928 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    68ee:	86 30       	cpi	r24, 0x06	; 6
    68f0:	21 f4       	brne	.+8      	; 0x68fa <nrk_ext_int_disable+0x48>
    68f2:	80 91 6b 00 	lds	r24, 0x006B
    68f6:	87 7f       	andi	r24, 0xF7	; 247
    68f8:	17 c0       	rjmp	.+46     	; 0x6928 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    68fa:	87 30       	cpi	r24, 0x07	; 7
    68fc:	21 f4       	brne	.+8      	; 0x6906 <nrk_ext_int_disable+0x54>
    68fe:	80 91 6b 00 	lds	r24, 0x006B
    6902:	8f 7e       	andi	r24, 0xEF	; 239
    6904:	11 c0       	rjmp	.+34     	; 0x6928 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    6906:	88 30       	cpi	r24, 0x08	; 8
    6908:	21 f4       	brne	.+8      	; 0x6912 <nrk_ext_int_disable+0x60>
    690a:	80 91 6b 00 	lds	r24, 0x006B
    690e:	8f 7d       	andi	r24, 0xDF	; 223
    6910:	0b c0       	rjmp	.+22     	; 0x6928 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    6912:	89 30       	cpi	r24, 0x09	; 9
    6914:	21 f4       	brne	.+8      	; 0x691e <nrk_ext_int_disable+0x6c>
    6916:	80 91 6b 00 	lds	r24, 0x006B
    691a:	8f 7b       	andi	r24, 0xBF	; 191
    691c:	05 c0       	rjmp	.+10     	; 0x6928 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    691e:	8a 30       	cpi	r24, 0x0A	; 10
    6920:	39 f4       	brne	.+14     	; 0x6930 <nrk_ext_int_disable+0x7e>
    6922:	80 91 6b 00 	lds	r24, 0x006B
    6926:	8f 77       	andi	r24, 0x7F	; 127
    6928:	80 93 6b 00 	sts	0x006B, r24
    692c:	81 e0       	ldi	r24, 0x01	; 1
    692e:	08 95       	ret
return NRK_ERROR;
    6930:	8f ef       	ldi	r24, 0xFF	; 255
}
    6932:	08 95       	ret

00006934 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    6934:	81 11       	cpse	r24, r1
    6936:	26 c0       	rjmp	.+76     	; 0x6984 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    6938:	50 93 6b 17 	sts	0x176B, r21
    693c:	40 93 6a 17 	sts	0x176A, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    6940:	61 11       	cpse	r22, r1
    6942:	04 c0       	rjmp	.+8      	; 0x694c <nrk_ext_int_configure+0x18>
    6944:	80 91 69 00 	lds	r24, 0x0069
    6948:	8c 7f       	andi	r24, 0xFC	; 252
    694a:	3d c0       	rjmp	.+122    	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    694c:	61 30       	cpi	r22, 0x01	; 1
    694e:	49 f4       	brne	.+18     	; 0x6962 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    6950:	80 91 69 00 	lds	r24, 0x0069
    6954:	8d 7f       	andi	r24, 0xFD	; 253
    6956:	80 93 69 00 	sts	0x0069, r24
    695a:	80 91 69 00 	lds	r24, 0x0069
    695e:	81 60       	ori	r24, 0x01	; 1
    6960:	32 c0       	rjmp	.+100    	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    6962:	62 30       	cpi	r22, 0x02	; 2
    6964:	49 f4       	brne	.+18     	; 0x6978 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    6966:	80 91 69 00 	lds	r24, 0x0069
    696a:	82 60       	ori	r24, 0x02	; 2
    696c:	80 93 69 00 	sts	0x0069, r24
    6970:	80 91 69 00 	lds	r24, 0x0069
    6974:	8e 7f       	andi	r24, 0xFE	; 254
    6976:	27 c0       	rjmp	.+78     	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    6978:	63 30       	cpi	r22, 0x03	; 3
    697a:	39 f5       	brne	.+78     	; 0x69ca <nrk_ext_int_configure+0x96>
    697c:	80 91 69 00 	lds	r24, 0x0069
    6980:	83 60       	ori	r24, 0x03	; 3
    6982:	21 c0       	rjmp	.+66     	; 0x69c6 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    6984:	81 30       	cpi	r24, 0x01	; 1
    6986:	49 f5       	brne	.+82     	; 0x69da <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    6988:	50 93 69 17 	sts	0x1769, r21
    698c:	40 93 68 17 	sts	0x1768, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    6990:	61 11       	cpse	r22, r1
    6992:	04 c0       	rjmp	.+8      	; 0x699c <nrk_ext_int_configure+0x68>
    6994:	80 91 69 00 	lds	r24, 0x0069
    6998:	83 7f       	andi	r24, 0xF3	; 243
    699a:	15 c0       	rjmp	.+42     	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    699c:	61 30       	cpi	r22, 0x01	; 1
    699e:	49 f4       	brne	.+18     	; 0x69b2 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    69a0:	80 91 69 00 	lds	r24, 0x0069
    69a4:	87 7f       	andi	r24, 0xF7	; 247
    69a6:	80 93 69 00 	sts	0x0069, r24
    69aa:	80 91 69 00 	lds	r24, 0x0069
    69ae:	84 60       	ori	r24, 0x04	; 4
    69b0:	0a c0       	rjmp	.+20     	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    69b2:	62 30       	cpi	r22, 0x02	; 2
    69b4:	61 f4       	brne	.+24     	; 0x69ce <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    69b6:	80 91 69 00 	lds	r24, 0x0069
    69ba:	88 60       	ori	r24, 0x08	; 8
    69bc:	80 93 69 00 	sts	0x0069, r24
    69c0:	80 91 69 00 	lds	r24, 0x0069
    69c4:	8b 7f       	andi	r24, 0xFB	; 251
    69c6:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    69ca:	81 e0       	ldi	r24, 0x01	; 1
    69cc:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    69ce:	63 30       	cpi	r22, 0x03	; 3
    69d0:	e1 f7       	brne	.-8      	; 0x69ca <nrk_ext_int_configure+0x96>
    69d2:	80 91 69 00 	lds	r24, 0x0069
    69d6:	8c 60       	ori	r24, 0x0C	; 12
    69d8:	f6 cf       	rjmp	.-20     	; 0x69c6 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    69da:	82 30       	cpi	r24, 0x02	; 2
    69dc:	31 f5       	brne	.+76     	; 0x6a2a <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    69de:	50 93 6d 17 	sts	0x176D, r21
    69e2:	40 93 6c 17 	sts	0x176C, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    69e6:	61 11       	cpse	r22, r1
    69e8:	04 c0       	rjmp	.+8      	; 0x69f2 <nrk_ext_int_configure+0xbe>
    69ea:	80 91 69 00 	lds	r24, 0x0069
    69ee:	8f 7c       	andi	r24, 0xCF	; 207
    69f0:	ea cf       	rjmp	.-44     	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    69f2:	61 30       	cpi	r22, 0x01	; 1
    69f4:	49 f4       	brne	.+18     	; 0x6a08 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    69f6:	80 91 69 00 	lds	r24, 0x0069
    69fa:	8f 7d       	andi	r24, 0xDF	; 223
    69fc:	80 93 69 00 	sts	0x0069, r24
    6a00:	80 91 69 00 	lds	r24, 0x0069
    6a04:	80 61       	ori	r24, 0x10	; 16
    6a06:	df cf       	rjmp	.-66     	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    6a08:	62 30       	cpi	r22, 0x02	; 2
    6a0a:	49 f4       	brne	.+18     	; 0x6a1e <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    6a0c:	80 91 69 00 	lds	r24, 0x0069
    6a10:	80 62       	ori	r24, 0x20	; 32
    6a12:	80 93 69 00 	sts	0x0069, r24
    6a16:	80 91 69 00 	lds	r24, 0x0069
    6a1a:	8f 7e       	andi	r24, 0xEF	; 239
    6a1c:	d4 cf       	rjmp	.-88     	; 0x69c6 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    6a1e:	63 30       	cpi	r22, 0x03	; 3
    6a20:	a1 f6       	brne	.-88     	; 0x69ca <nrk_ext_int_configure+0x96>
    6a22:	80 91 69 00 	lds	r24, 0x0069
    6a26:	80 63       	ori	r24, 0x30	; 48
    6a28:	ce cf       	rjmp	.-100    	; 0x69c6 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    6a2a:	83 50       	subi	r24, 0x03	; 3
    6a2c:	88 30       	cpi	r24, 0x08	; 8
    6a2e:	50 f4       	brcc	.+20     	; 0x6a44 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    6a30:	80 91 68 00 	lds	r24, 0x0068
    6a34:	81 60       	ori	r24, 0x01	; 1
    6a36:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    6a3a:	50 93 6f 17 	sts	0x176F, r21
    6a3e:	40 93 6e 17 	sts	0x176E, r20
    6a42:	c3 cf       	rjmp	.-122    	; 0x69ca <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    6a44:	8f ef       	ldi	r24, 0xFF	; 255
}
    6a46:	08 95       	ret

00006a48 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    6a48:	1f 92       	push	r1
    6a4a:	0f 92       	push	r0
    6a4c:	0f b6       	in	r0, 0x3f	; 63
    6a4e:	0f 92       	push	r0
    6a50:	11 24       	eor	r1, r1
    6a52:	0b b6       	in	r0, 0x3b	; 59
    6a54:	0f 92       	push	r0
    6a56:	2f 93       	push	r18
    6a58:	3f 93       	push	r19
    6a5a:	4f 93       	push	r20
    6a5c:	5f 93       	push	r21
    6a5e:	6f 93       	push	r22
    6a60:	7f 93       	push	r23
    6a62:	8f 93       	push	r24
    6a64:	9f 93       	push	r25
    6a66:	af 93       	push	r26
    6a68:	bf 93       	push	r27
    6a6a:	ef 93       	push	r30
    6a6c:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    6a6e:	e0 91 6e 17 	lds	r30, 0x176E
    6a72:	f0 91 6f 17 	lds	r31, 0x176F
    6a76:	30 97       	sbiw	r30, 0x00	; 0
    6a78:	11 f0       	breq	.+4      	; 0x6a7e <__vector_9+0x36>
    6a7a:	09 95       	icall
    6a7c:	04 c0       	rjmp	.+8      	; 0x6a86 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6a7e:	60 e0       	ldi	r22, 0x00	; 0
    6a80:	8a e0       	ldi	r24, 0x0A	; 10
    6a82:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
	return;  	
}
    6a86:	ff 91       	pop	r31
    6a88:	ef 91       	pop	r30
    6a8a:	bf 91       	pop	r27
    6a8c:	af 91       	pop	r26
    6a8e:	9f 91       	pop	r25
    6a90:	8f 91       	pop	r24
    6a92:	7f 91       	pop	r23
    6a94:	6f 91       	pop	r22
    6a96:	5f 91       	pop	r21
    6a98:	4f 91       	pop	r20
    6a9a:	3f 91       	pop	r19
    6a9c:	2f 91       	pop	r18
    6a9e:	0f 90       	pop	r0
    6aa0:	0b be       	out	0x3b, r0	; 59
    6aa2:	0f 90       	pop	r0
    6aa4:	0f be       	out	0x3f, r0	; 63
    6aa6:	0f 90       	pop	r0
    6aa8:	1f 90       	pop	r1
    6aaa:	18 95       	reti

00006aac <__vector_1>:


SIGNAL(INT0_vect) {
    6aac:	1f 92       	push	r1
    6aae:	0f 92       	push	r0
    6ab0:	0f b6       	in	r0, 0x3f	; 63
    6ab2:	0f 92       	push	r0
    6ab4:	11 24       	eor	r1, r1
    6ab6:	0b b6       	in	r0, 0x3b	; 59
    6ab8:	0f 92       	push	r0
    6aba:	2f 93       	push	r18
    6abc:	3f 93       	push	r19
    6abe:	4f 93       	push	r20
    6ac0:	5f 93       	push	r21
    6ac2:	6f 93       	push	r22
    6ac4:	7f 93       	push	r23
    6ac6:	8f 93       	push	r24
    6ac8:	9f 93       	push	r25
    6aca:	af 93       	push	r26
    6acc:	bf 93       	push	r27
    6ace:	ef 93       	push	r30
    6ad0:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    6ad2:	e0 91 6a 17 	lds	r30, 0x176A
    6ad6:	f0 91 6b 17 	lds	r31, 0x176B
    6ada:	30 97       	sbiw	r30, 0x00	; 0
    6adc:	11 f0       	breq	.+4      	; 0x6ae2 <__vector_1+0x36>
    6ade:	09 95       	icall
    6ae0:	04 c0       	rjmp	.+8      	; 0x6aea <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6ae2:	60 e0       	ldi	r22, 0x00	; 0
    6ae4:	8a e0       	ldi	r24, 0x0A	; 10
    6ae6:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
	return;  	
}
    6aea:	ff 91       	pop	r31
    6aec:	ef 91       	pop	r30
    6aee:	bf 91       	pop	r27
    6af0:	af 91       	pop	r26
    6af2:	9f 91       	pop	r25
    6af4:	8f 91       	pop	r24
    6af6:	7f 91       	pop	r23
    6af8:	6f 91       	pop	r22
    6afa:	5f 91       	pop	r21
    6afc:	4f 91       	pop	r20
    6afe:	3f 91       	pop	r19
    6b00:	2f 91       	pop	r18
    6b02:	0f 90       	pop	r0
    6b04:	0b be       	out	0x3b, r0	; 59
    6b06:	0f 90       	pop	r0
    6b08:	0f be       	out	0x3f, r0	; 63
    6b0a:	0f 90       	pop	r0
    6b0c:	1f 90       	pop	r1
    6b0e:	18 95       	reti

00006b10 <__vector_2>:

SIGNAL(INT1_vect) {
    6b10:	1f 92       	push	r1
    6b12:	0f 92       	push	r0
    6b14:	0f b6       	in	r0, 0x3f	; 63
    6b16:	0f 92       	push	r0
    6b18:	11 24       	eor	r1, r1
    6b1a:	0b b6       	in	r0, 0x3b	; 59
    6b1c:	0f 92       	push	r0
    6b1e:	2f 93       	push	r18
    6b20:	3f 93       	push	r19
    6b22:	4f 93       	push	r20
    6b24:	5f 93       	push	r21
    6b26:	6f 93       	push	r22
    6b28:	7f 93       	push	r23
    6b2a:	8f 93       	push	r24
    6b2c:	9f 93       	push	r25
    6b2e:	af 93       	push	r26
    6b30:	bf 93       	push	r27
    6b32:	ef 93       	push	r30
    6b34:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    6b36:	e0 91 68 17 	lds	r30, 0x1768
    6b3a:	f0 91 69 17 	lds	r31, 0x1769
    6b3e:	30 97       	sbiw	r30, 0x00	; 0
    6b40:	11 f0       	breq	.+4      	; 0x6b46 <__vector_2+0x36>
    6b42:	09 95       	icall
    6b44:	04 c0       	rjmp	.+8      	; 0x6b4e <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6b46:	60 e0       	ldi	r22, 0x00	; 0
    6b48:	8a e0       	ldi	r24, 0x0A	; 10
    6b4a:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
	return;  	
}
    6b4e:	ff 91       	pop	r31
    6b50:	ef 91       	pop	r30
    6b52:	bf 91       	pop	r27
    6b54:	af 91       	pop	r26
    6b56:	9f 91       	pop	r25
    6b58:	8f 91       	pop	r24
    6b5a:	7f 91       	pop	r23
    6b5c:	6f 91       	pop	r22
    6b5e:	5f 91       	pop	r21
    6b60:	4f 91       	pop	r20
    6b62:	3f 91       	pop	r19
    6b64:	2f 91       	pop	r18
    6b66:	0f 90       	pop	r0
    6b68:	0b be       	out	0x3b, r0	; 59
    6b6a:	0f 90       	pop	r0
    6b6c:	0f be       	out	0x3f, r0	; 63
    6b6e:	0f 90       	pop	r0
    6b70:	1f 90       	pop	r1
    6b72:	18 95       	reti

00006b74 <__vector_3>:

SIGNAL(INT2_vect) {
    6b74:	1f 92       	push	r1
    6b76:	0f 92       	push	r0
    6b78:	0f b6       	in	r0, 0x3f	; 63
    6b7a:	0f 92       	push	r0
    6b7c:	11 24       	eor	r1, r1
    6b7e:	0b b6       	in	r0, 0x3b	; 59
    6b80:	0f 92       	push	r0
    6b82:	2f 93       	push	r18
    6b84:	3f 93       	push	r19
    6b86:	4f 93       	push	r20
    6b88:	5f 93       	push	r21
    6b8a:	6f 93       	push	r22
    6b8c:	7f 93       	push	r23
    6b8e:	8f 93       	push	r24
    6b90:	9f 93       	push	r25
    6b92:	af 93       	push	r26
    6b94:	bf 93       	push	r27
    6b96:	ef 93       	push	r30
    6b98:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    6b9a:	e0 91 6c 17 	lds	r30, 0x176C
    6b9e:	f0 91 6d 17 	lds	r31, 0x176D
    6ba2:	30 97       	sbiw	r30, 0x00	; 0
    6ba4:	11 f0       	breq	.+4      	; 0x6baa <__vector_3+0x36>
    6ba6:	09 95       	icall
    6ba8:	04 c0       	rjmp	.+8      	; 0x6bb2 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6baa:	60 e0       	ldi	r22, 0x00	; 0
    6bac:	8a e0       	ldi	r24, 0x0A	; 10
    6bae:	0e 94 b7 23 	call	0x476e	; 0x476e <nrk_kernel_error_add>
	return;  	
}
    6bb2:	ff 91       	pop	r31
    6bb4:	ef 91       	pop	r30
    6bb6:	bf 91       	pop	r27
    6bb8:	af 91       	pop	r26
    6bba:	9f 91       	pop	r25
    6bbc:	8f 91       	pop	r24
    6bbe:	7f 91       	pop	r23
    6bc0:	6f 91       	pop	r22
    6bc2:	5f 91       	pop	r21
    6bc4:	4f 91       	pop	r20
    6bc6:	3f 91       	pop	r19
    6bc8:	2f 91       	pop	r18
    6bca:	0f 90       	pop	r0
    6bcc:	0b be       	out	0x3b, r0	; 59
    6bce:	0f 90       	pop	r0
    6bd0:	0f be       	out	0x3f, r0	; 63
    6bd2:	0f 90       	pop	r0
    6bd4:	1f 90       	pop	r1
    6bd6:	18 95       	reti

00006bd8 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    6bd8:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6bdc:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    6bde:	84 b7       	in	r24, 0x34	; 52
    6be0:	87 7f       	andi	r24, 0xF7	; 247
    6be2:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    6be4:	e0 e6       	ldi	r30, 0x60	; 96
    6be6:	f0 e0       	ldi	r31, 0x00	; 0
    6be8:	80 81       	ld	r24, Z
    6bea:	88 61       	ori	r24, 0x18	; 24
    6bec:	80 83       	st	Z, r24
WDTCSR = 0;
    6bee:	10 82       	st	Z, r1
nrk_int_enable();
    6bf0:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <nrk_int_enable>

00006bf4 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    6bf4:	0e 94 57 21 	call	0x42ae	; 0x42ae <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6bf8:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    6bfa:	84 b7       	in	r24, 0x34	; 52
    6bfc:	87 7f       	andi	r24, 0xF7	; 247
    6bfe:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    6c00:	e0 e6       	ldi	r30, 0x60	; 96
    6c02:	f0 e0       	ldi	r31, 0x00	; 0
    6c04:	80 81       	ld	r24, Z
    6c06:	88 61       	ori	r24, 0x18	; 24
    6c08:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    6c0a:	8d e0       	ldi	r24, 0x0D	; 13
    6c0c:	80 83       	st	Z, r24
nrk_int_enable();
    6c0e:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <nrk_int_enable>

00006c12 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    6c12:	04 b6       	in	r0, 0x34	; 52
    6c14:	03 fe       	sbrs	r0, 3
    6c16:	02 c0       	rjmp	.+4      	; 0x6c1c <nrk_watchdog_check+0xa>
return NRK_ERROR;
    6c18:	8f ef       	ldi	r24, 0xFF	; 255
    6c1a:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    6c1c:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    6c1e:	08 95       	ret

00006c20 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    6c20:	a8 95       	wdr
    6c22:	08 95       	ret

00006c24 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    6c24:	08 95       	ret

00006c26 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    6c26:	83 b7       	in	r24, 0x33	; 51
    6c28:	81 7f       	andi	r24, 0xF1	; 241
    6c2a:	86 60       	ori	r24, 0x06	; 6
    6c2c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    6c2e:	83 b7       	in	r24, 0x33	; 51
    6c30:	81 60       	ori	r24, 0x01	; 1
    6c32:	83 bf       	out	0x33, r24	; 51
    6c34:	88 95       	sleep
    6c36:	83 b7       	in	r24, 0x33	; 51
    6c38:	8e 7f       	andi	r24, 0xFE	; 254
    6c3a:	83 bf       	out	0x33, r24	; 51
    6c3c:	08 95       	ret

00006c3e <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    6c3e:	83 b7       	in	r24, 0x33	; 51
    6c40:	81 7f       	andi	r24, 0xF1	; 241
    6c42:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    6c44:	83 b7       	in	r24, 0x33	; 51
    6c46:	81 60       	ori	r24, 0x01	; 1
    6c48:	83 bf       	out	0x33, r24	; 51
    6c4a:	88 95       	sleep
    6c4c:	83 b7       	in	r24, 0x33	; 51
    6c4e:	8e 7f       	andi	r24, 0xFE	; 254
    6c50:	83 bf       	out	0x33, r24	; 51
    6c52:	08 95       	ret

00006c54 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    6c54:	fc 01       	movw	r30, r24
    6c56:	76 83       	std	Z+6, r23	; 0x06
    6c58:	65 83       	std	Z+5, r22	; 0x05
    6c5a:	08 95       	ret

00006c5c <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    6c5c:	ef 92       	push	r14
    6c5e:	ff 92       	push	r15
    6c60:	0f 93       	push	r16
    6c62:	1f 93       	push	r17
    6c64:	cf 93       	push	r28
    6c66:	df 93       	push	r29
    6c68:	8c 01       	movw	r16, r24
    6c6a:	7b 01       	movw	r14, r22
    6c6c:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    6c6e:	40 32       	cpi	r20, 0x20	; 32
    6c70:	51 05       	cpc	r21, r1
    6c72:	18 f4       	brcc	.+6      	; 0x6c7a <nrk_task_set_stk+0x1e>
    6c74:	81 e1       	ldi	r24, 0x11	; 17
    6c76:	0e 94 ac 23 	call	0x4758	; 0x4758 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    6c7a:	21 97       	sbiw	r28, 0x01	; 1
    6c7c:	ce 0d       	add	r28, r14
    6c7e:	df 1d       	adc	r29, r15
    6c80:	f8 01       	movw	r30, r16
    6c82:	d2 83       	std	Z+2, r29	; 0x02
    6c84:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    6c86:	f4 82       	std	Z+4, r15	; 0x04
    6c88:	e3 82       	std	Z+3, r14	; 0x03

}
    6c8a:	df 91       	pop	r29
    6c8c:	cf 91       	pop	r28
    6c8e:	1f 91       	pop	r17
    6c90:	0f 91       	pop	r16
    6c92:	ff 90       	pop	r15
    6c94:	ef 90       	pop	r14
    6c96:	08 95       	ret

00006c98 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    6c98:	25 e5       	ldi	r18, 0x55	; 85
    6c9a:	fa 01       	movw	r30, r20
    6c9c:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    6c9e:	fb 01       	movw	r30, r22
    6ca0:	32 97       	sbiw	r30, 0x02	; 2
    6ca2:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    6ca4:	31 96       	adiw	r30, 0x01	; 1
    6ca6:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    6ca8:	33 97       	sbiw	r30, 0x03	; 3
    6caa:	11 82       	std	Z+1, r1	; 0x01
    6cac:	10 82       	st	Z, r1
    *(--stk) = 0;       
    6cae:	32 97       	sbiw	r30, 0x02	; 2
    6cb0:	11 82       	std	Z+1, r1	; 0x01
    6cb2:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    6cb4:	32 97       	sbiw	r30, 0x02	; 2
    6cb6:	11 82       	std	Z+1, r1	; 0x01
    6cb8:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    6cba:	32 97       	sbiw	r30, 0x02	; 2
    6cbc:	11 82       	std	Z+1, r1	; 0x01
    6cbe:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    6cc0:	32 97       	sbiw	r30, 0x02	; 2
    6cc2:	11 82       	std	Z+1, r1	; 0x01
    6cc4:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    6cc6:	32 97       	sbiw	r30, 0x02	; 2
    6cc8:	11 82       	std	Z+1, r1	; 0x01
    6cca:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    6ccc:	32 97       	sbiw	r30, 0x02	; 2
    6cce:	11 82       	std	Z+1, r1	; 0x01
    6cd0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6cd2:	32 97       	sbiw	r30, 0x02	; 2
    6cd4:	11 82       	std	Z+1, r1	; 0x01
    6cd6:	10 82       	st	Z, r1

    *(--stk) = 0; 
    6cd8:	32 97       	sbiw	r30, 0x02	; 2
    6cda:	11 82       	std	Z+1, r1	; 0x01
    6cdc:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6cde:	32 97       	sbiw	r30, 0x02	; 2
    6ce0:	11 82       	std	Z+1, r1	; 0x01
    6ce2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6ce4:	32 97       	sbiw	r30, 0x02	; 2
    6ce6:	11 82       	std	Z+1, r1	; 0x01
    6ce8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6cea:	32 97       	sbiw	r30, 0x02	; 2
    6cec:	11 82       	std	Z+1, r1	; 0x01
    6cee:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6cf0:	32 97       	sbiw	r30, 0x02	; 2
    6cf2:	11 82       	std	Z+1, r1	; 0x01
    6cf4:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6cf6:	32 97       	sbiw	r30, 0x02	; 2
    6cf8:	11 82       	std	Z+1, r1	; 0x01
    6cfa:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6cfc:	32 97       	sbiw	r30, 0x02	; 2
    6cfe:	11 82       	std	Z+1, r1	; 0x01
    6d00:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6d02:	32 97       	sbiw	r30, 0x02	; 2
    6d04:	11 82       	std	Z+1, r1	; 0x01
    6d06:	10 82       	st	Z, r1
    *(--stk) = 0;
    6d08:	cb 01       	movw	r24, r22
    6d0a:	84 97       	sbiw	r24, 0x24	; 36
    6d0c:	fc 01       	movw	r30, r24
    6d0e:	11 82       	std	Z+1, r1	; 0x01
    6d10:	10 82       	st	Z, r1


    return ((void *)stk);
}
    6d12:	08 95       	ret

00006d14 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    6d14:	85 e5       	ldi	r24, 0x55	; 85
    6d16:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    6d1a:	ee ef       	ldi	r30, 0xFE	; 254
    6d1c:	f1 e4       	ldi	r31, 0x41	; 65
    6d1e:	f0 93 e3 0f 	sts	0x0FE3, r31
    6d22:	e0 93 e2 0f 	sts	0x0FE2, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6d26:	84 e0       	ldi	r24, 0x04	; 4
    6d28:	93 e2       	ldi	r25, 0x23	; 35
    6d2a:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6d2c:	80 93 ff 41 	sts	0x41FF, r24
    6d30:	08 95       	ret

00006d32 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6d32:	84 e0       	ldi	r24, 0x04	; 4
    6d34:	93 e2       	ldi	r25, 0x23	; 35
    6d36:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6d3a:	80 93 ff 41 	sts	0x41FF, r24
    6d3e:	08 95       	ret

00006d40 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    6d40:	0e 94 cd 32 	call	0x659a	; 0x659a <_nrk_setup_timer>
  nrk_int_enable();  
    6d44:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <nrk_int_enable>

00006d48 <nrk_start_high_ready_task>:
    6d48:	a0 91 27 17 	lds	r26, 0x1727
    6d4c:	b0 91 28 17 	lds	r27, 0x1728
    6d50:	cd 91       	ld	r28, X+
    6d52:	cd bf       	out	0x3d, r28	; 61
    6d54:	dd 91       	ld	r29, X+
    6d56:	de bf       	out	0x3e, r29	; 62
    6d58:	ff 91       	pop	r31
    6d5a:	ef 91       	pop	r30
    6d5c:	df 91       	pop	r29
    6d5e:	cf 91       	pop	r28
    6d60:	bf 91       	pop	r27
    6d62:	af 91       	pop	r26
    6d64:	9f 91       	pop	r25
    6d66:	8f 91       	pop	r24
    6d68:	7f 91       	pop	r23
    6d6a:	6f 91       	pop	r22
    6d6c:	5f 91       	pop	r21
    6d6e:	4f 91       	pop	r20
    6d70:	3f 91       	pop	r19
    6d72:	2f 91       	pop	r18
    6d74:	1f 91       	pop	r17
    6d76:	0f 91       	pop	r16
    6d78:	ff 90       	pop	r15
    6d7a:	ef 90       	pop	r14
    6d7c:	df 90       	pop	r13
    6d7e:	cf 90       	pop	r12
    6d80:	bf 90       	pop	r11
    6d82:	af 90       	pop	r10
    6d84:	9f 90       	pop	r9
    6d86:	8f 90       	pop	r8
    6d88:	7f 90       	pop	r7
    6d8a:	6f 90       	pop	r6
    6d8c:	5f 90       	pop	r5
    6d8e:	4f 90       	pop	r4
    6d90:	3f 90       	pop	r3
    6d92:	2f 90       	pop	r2
    6d94:	1f 90       	pop	r1
    6d96:	0f 90       	pop	r0
    6d98:	0f be       	out	0x3f, r0	; 63
    6d9a:	0f 90       	pop	r0
    6d9c:	18 95       	reti

00006d9e <main>:
uint8_t print_incoming;
uint8_t blink_leds;

int main () {
  // setup ports/uart
  nrk_setup_ports ();
    6d9e:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    6da2:	80 e1       	ldi	r24, 0x10	; 16
    6da4:	90 e0       	ldi	r25, 0x00	; 0
    6da6:	0e 94 78 20 	call	0x40f0	; 0x40f0 <nrk_setup_uart>
  nrk_init ();
    6daa:	0e 94 5e 21 	call	0x42bc	; 0x42bc <nrk_init>

  // clear all LEDs
  nrk_led_clr(0);
    6dae:	80 e0       	ldi	r24, 0x00	; 0
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
  nrk_led_clr(1);
    6db6:	81 e0       	ldi	r24, 0x01	; 1
    6db8:	90 e0       	ldi	r25, 0x00	; 0
    6dba:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
  nrk_led_clr(2);
    6dbe:	82 e0       	ldi	r24, 0x02	; 2
    6dc0:	90 e0       	ldi	r25, 0x00	; 0
    6dc2:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
  nrk_led_clr(3);
    6dc6:	83 e0       	ldi	r24, 0x03	; 3
    6dc8:	90 e0       	ldi	r25, 0x00	; 0
    6dca:	0e 94 0f 20 	call	0x401e	; 0x401e <nrk_led_clr>
    
  // print flag
  print_incoming = 1;
    6dce:	81 e0       	ldi	r24, 0x01	; 1
    6dd0:	80 93 ab 0b 	sts	0x0BAB, r24
  blink_leds = 1;
    6dd4:	80 93 bd 0d 	sts	0x0DBD, r24

  // mutexs
  net_tx_buf_mux    = nrk_sem_create(1, 6);
    6dd8:	66 e0       	ldi	r22, 0x06	; 6
    6dda:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <nrk_sem_create>
    6dde:	90 93 4a 15 	sts	0x154A, r25
    6de2:	80 93 49 15 	sts	0x1549, r24
  act_queue_mux     = nrk_sem_create(1, 6);
    6de6:	66 e0       	ldi	r22, 0x06	; 6
    6de8:	81 e0       	ldi	r24, 0x01	; 1
    6dea:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <nrk_sem_create>
    6dee:	90 93 ab 0a 	sts	0x0AAB, r25
    6df2:	80 93 aa 0a 	sts	0x0AAA, r24
  cmd_tx_queue_mux  = nrk_sem_create(1, 6);
    6df6:	66 e0       	ldi	r22, 0x06	; 6
    6df8:	81 e0       	ldi	r24, 0x01	; 1
    6dfa:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <nrk_sem_create>
    6dfe:	90 93 70 07 	sts	0x0770, r25
    6e02:	80 93 6f 07 	sts	0x076F, r24
  data_tx_queue_mux = nrk_sem_create(1, 6);
    6e06:	66 e0       	ldi	r22, 0x06	; 6
    6e08:	81 e0       	ldi	r24, 0x01	; 1
    6e0a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <nrk_sem_create>
    6e0e:	90 93 6d 05 	sts	0x056D, r25
    6e12:	80 93 6c 05 	sts	0x056C, r24
  hand_rx_queue_mux = nrk_sem_create(1, 6);
    6e16:	66 e0       	ldi	r22, 0x06	; 6
    6e18:	81 e0       	ldi	r24, 0x01	; 1
    6e1a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <nrk_sem_create>
    6e1e:	90 93 bb 0b 	sts	0x0BBB, r25
    6e22:	80 93 ba 0b 	sts	0x0BBA, r24
  seq_num_mux       = nrk_sem_create(1, 6);
    6e26:	66 e0       	ldi	r22, 0x06	; 6
    6e28:	81 e0       	ldi	r24, 0x01	; 1
    6e2a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <nrk_sem_create>
    6e2e:	90 93 eb 0f 	sts	0x0FEB, r25
    6e32:	80 93 ea 0f 	sts	0x0FEA, r24

  // sensor periods (in seconds)
  pwr_period = 30;
    6e36:	8e e1       	ldi	r24, 0x1E	; 30
    6e38:	80 93 e1 0d 	sts	0x0DE1, r24
  temp_period = 35;
    6e3c:	83 e2       	ldi	r24, 0x23	; 35
    6e3e:	80 93 ac 0b 	sts	0x0BAC, r24
  light_period = 40;
    6e42:	88 e2       	ldi	r24, 0x28	; 40
    6e44:	80 93 b9 0b 	sts	0x0BB9, r24

  // packet queues
  packet_queue_init(&act_queue);
    6e48:	8f e1       	ldi	r24, 0x1F	; 31
    6e4a:	98 e0       	ldi	r25, 0x08	; 8
    6e4c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <packet_queue_init>
  packet_queue_init(&cmd_tx_queue);
    6e50:	86 ef       	ldi	r24, 0xF6	; 246
    6e52:	91 e1       	ldi	r25, 0x11	; 17
    6e54:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <packet_queue_init>
  packet_queue_init(&data_tx_queue);
    6e58:	80 e2       	ldi	r24, 0x20	; 32
    6e5a:	9b e0       	ldi	r25, 0x0B	; 11
    6e5c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <packet_queue_init>
  packet_queue_init(&hand_rx_queue);
    6e60:	84 e9       	ldi	r24, 0x94	; 148
    6e62:	97 e0       	ldi	r25, 0x07	; 7
    6e64:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <packet_queue_init>

  // start running
  nrk_time_set(0, 0);
    6e68:	20 e0       	ldi	r18, 0x00	; 0
    6e6a:	30 e0       	ldi	r19, 0x00	; 0
    6e6c:	a9 01       	movw	r20, r18
    6e6e:	60 e0       	ldi	r22, 0x00	; 0
    6e70:	70 e0       	ldi	r23, 0x00	; 0
    6e72:	cb 01       	movw	r24, r22
    6e74:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <nrk_time_set>
  bmac_task_config();
    6e78:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <bmac_task_config>
  nrk_create_taskset();
    6e7c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <nrk_create_taskset>
  bmac_init(13);
    6e80:	8d e0       	ldi	r24, 0x0D	; 13
    6e82:	0e 94 33 08 	call	0x1066	; 0x1066 <bmac_init>
  nrk_start();
    6e86:	0e 94 0d 22 	call	0x441a	; 0x441a <nrk_start>
  return 0;
}
    6e8a:	80 e0       	ldi	r24, 0x00	; 0
    6e8c:	90 e0       	ldi	r25, 0x00	; 0
    6e8e:	08 95       	ret

00006e90 <vfprintf>:
    6e90:	6f 92       	push	r6
    6e92:	7f 92       	push	r7
    6e94:	8f 92       	push	r8
    6e96:	9f 92       	push	r9
    6e98:	af 92       	push	r10
    6e9a:	bf 92       	push	r11
    6e9c:	cf 92       	push	r12
    6e9e:	df 92       	push	r13
    6ea0:	ef 92       	push	r14
    6ea2:	ff 92       	push	r15
    6ea4:	0f 93       	push	r16
    6ea6:	1f 93       	push	r17
    6ea8:	cf 93       	push	r28
    6eaa:	df 93       	push	r29
    6eac:	cd b7       	in	r28, 0x3d	; 61
    6eae:	de b7       	in	r29, 0x3e	; 62
    6eb0:	2c 97       	sbiw	r28, 0x0c	; 12
    6eb2:	0f b6       	in	r0, 0x3f	; 63
    6eb4:	f8 94       	cli
    6eb6:	de bf       	out	0x3e, r29	; 62
    6eb8:	0f be       	out	0x3f, r0	; 63
    6eba:	cd bf       	out	0x3d, r28	; 61
    6ebc:	6c 01       	movw	r12, r24
    6ebe:	5b 01       	movw	r10, r22
    6ec0:	7a 01       	movw	r14, r20
    6ec2:	fc 01       	movw	r30, r24
    6ec4:	17 82       	std	Z+7, r1	; 0x07
    6ec6:	16 82       	std	Z+6, r1	; 0x06
    6ec8:	83 81       	ldd	r24, Z+3	; 0x03
    6eca:	81 ff       	sbrs	r24, 1
    6ecc:	0e c1       	rjmp	.+540    	; 0x70ea <vfprintf+0x25a>
    6ece:	ce 01       	movw	r24, r28
    6ed0:	01 96       	adiw	r24, 0x01	; 1
    6ed2:	4c 01       	movw	r8, r24
    6ed4:	f6 01       	movw	r30, r12
    6ed6:	03 81       	ldd	r16, Z+3	; 0x03
    6ed8:	f5 01       	movw	r30, r10
    6eda:	03 fd       	sbrc	r16, 3
    6edc:	15 91       	lpm	r17, Z+
    6ede:	03 ff       	sbrs	r16, 3
    6ee0:	11 91       	ld	r17, Z+
    6ee2:	5f 01       	movw	r10, r30
    6ee4:	11 23       	and	r17, r17
    6ee6:	09 f4       	brne	.+2      	; 0x6eea <vfprintf+0x5a>
    6ee8:	fc c0       	rjmp	.+504    	; 0x70e2 <vfprintf+0x252>
    6eea:	15 32       	cpi	r17, 0x25	; 37
    6eec:	49 f4       	brne	.+18     	; 0x6f00 <vfprintf+0x70>
    6eee:	03 fd       	sbrc	r16, 3
    6ef0:	15 91       	lpm	r17, Z+
    6ef2:	03 ff       	sbrs	r16, 3
    6ef4:	11 91       	ld	r17, Z+
    6ef6:	5f 01       	movw	r10, r30
    6ef8:	15 32       	cpi	r17, 0x25	; 37
    6efa:	11 f0       	breq	.+4      	; 0x6f00 <vfprintf+0x70>
    6efc:	20 e0       	ldi	r18, 0x00	; 0
    6efe:	1b c0       	rjmp	.+54     	; 0x6f36 <vfprintf+0xa6>
    6f00:	b6 01       	movw	r22, r12
    6f02:	81 2f       	mov	r24, r17
    6f04:	90 e0       	ldi	r25, 0x00	; 0
    6f06:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    6f0a:	37 01       	movw	r6, r14
    6f0c:	73 01       	movw	r14, r6
    6f0e:	e2 cf       	rjmp	.-60     	; 0x6ed4 <vfprintf+0x44>
    6f10:	11 23       	and	r17, r17
    6f12:	09 f4       	brne	.+2      	; 0x6f16 <vfprintf+0x86>
    6f14:	e6 c0       	rjmp	.+460    	; 0x70e2 <vfprintf+0x252>
    6f16:	61 2f       	mov	r22, r17
    6f18:	70 e0       	ldi	r23, 0x00	; 0
    6f1a:	8c e7       	ldi	r24, 0x7C	; 124
    6f1c:	95 e0       	ldi	r25, 0x05	; 5
    6f1e:	2c 87       	std	Y+12, r18	; 0x0c
    6f20:	0e 94 13 3a 	call	0x7426	; 0x7426 <strchr_P>
    6f24:	2c 85       	ldd	r18, Y+12	; 0x0c
    6f26:	89 2b       	or	r24, r25
    6f28:	49 f0       	breq	.+18     	; 0x6f3c <vfprintf+0xac>
    6f2a:	f5 01       	movw	r30, r10
    6f2c:	03 fd       	sbrc	r16, 3
    6f2e:	15 91       	lpm	r17, Z+
    6f30:	03 ff       	sbrs	r16, 3
    6f32:	11 91       	ld	r17, Z+
    6f34:	5f 01       	movw	r10, r30
    6f36:	27 ff       	sbrs	r18, 7
    6f38:	eb cf       	rjmp	.-42     	; 0x6f10 <vfprintf+0x80>
    6f3a:	09 c0       	rjmp	.+18     	; 0x6f4e <vfprintf+0xbe>
    6f3c:	13 32       	cpi	r17, 0x23	; 35
    6f3e:	29 f0       	breq	.+10     	; 0x6f4a <vfprintf+0xba>
    6f40:	1c 36       	cpi	r17, 0x6C	; 108
    6f42:	09 f0       	breq	.+2      	; 0x6f46 <vfprintf+0xb6>
    6f44:	d5 c0       	rjmp	.+426    	; 0x70f0 <vfprintf+0x260>
    6f46:	20 68       	ori	r18, 0x80	; 128
    6f48:	f0 cf       	rjmp	.-32     	; 0x6f2a <vfprintf+0x9a>
    6f4a:	20 e1       	ldi	r18, 0x10	; 16
    6f4c:	ee cf       	rjmp	.-36     	; 0x6f2a <vfprintf+0x9a>
    6f4e:	02 2f       	mov	r16, r18
    6f50:	11 23       	and	r17, r17
    6f52:	09 f4       	brne	.+2      	; 0x6f56 <vfprintf+0xc6>
    6f54:	c6 c0       	rjmp	.+396    	; 0x70e2 <vfprintf+0x252>
    6f56:	61 2f       	mov	r22, r17
    6f58:	70 e0       	ldi	r23, 0x00	; 0
    6f5a:	85 e7       	ldi	r24, 0x75	; 117
    6f5c:	95 e0       	ldi	r25, 0x05	; 5
    6f5e:	2c 87       	std	Y+12, r18	; 0x0c
    6f60:	0e 94 13 3a 	call	0x7426	; 0x7426 <strchr_P>
    6f64:	2c 85       	ldd	r18, Y+12	; 0x0c
    6f66:	89 2b       	or	r24, r25
    6f68:	41 f0       	breq	.+16     	; 0x6f7a <vfprintf+0xea>
    6f6a:	37 01       	movw	r6, r14
    6f6c:	f4 e0       	ldi	r31, 0x04	; 4
    6f6e:	6f 0e       	add	r6, r31
    6f70:	71 1c       	adc	r7, r1
    6f72:	b6 01       	movw	r22, r12
    6f74:	8f e3       	ldi	r24, 0x3F	; 63
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	11 c0       	rjmp	.+34     	; 0x6f9c <vfprintf+0x10c>
    6f7a:	13 36       	cpi	r17, 0x63	; 99
    6f7c:	39 f0       	breq	.+14     	; 0x6f8c <vfprintf+0xfc>
    6f7e:	13 37       	cpi	r17, 0x73	; 115
    6f80:	81 f0       	breq	.+32     	; 0x6fa2 <vfprintf+0x112>
    6f82:	13 35       	cpi	r17, 0x53	; 83
    6f84:	19 f5       	brne	.+70     	; 0x6fcc <vfprintf+0x13c>
    6f86:	02 2f       	mov	r16, r18
    6f88:	01 60       	ori	r16, 0x01	; 1
    6f8a:	0b c0       	rjmp	.+22     	; 0x6fa2 <vfprintf+0x112>
    6f8c:	37 01       	movw	r6, r14
    6f8e:	82 e0       	ldi	r24, 0x02	; 2
    6f90:	68 0e       	add	r6, r24
    6f92:	71 1c       	adc	r7, r1
    6f94:	b6 01       	movw	r22, r12
    6f96:	f7 01       	movw	r30, r14
    6f98:	80 81       	ld	r24, Z
    6f9a:	91 81       	ldd	r25, Z+1	; 0x01
    6f9c:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    6fa0:	b5 cf       	rjmp	.-150    	; 0x6f0c <vfprintf+0x7c>
    6fa2:	37 01       	movw	r6, r14
    6fa4:	f2 e0       	ldi	r31, 0x02	; 2
    6fa6:	6f 0e       	add	r6, r31
    6fa8:	71 1c       	adc	r7, r1
    6faa:	f7 01       	movw	r30, r14
    6fac:	e0 80       	ld	r14, Z
    6fae:	f1 80       	ldd	r15, Z+1	; 0x01
    6fb0:	f7 01       	movw	r30, r14
    6fb2:	00 fd       	sbrc	r16, 0
    6fb4:	85 91       	lpm	r24, Z+
    6fb6:	00 ff       	sbrs	r16, 0
    6fb8:	81 91       	ld	r24, Z+
    6fba:	7f 01       	movw	r14, r30
    6fbc:	88 23       	and	r24, r24
    6fbe:	09 f4       	brne	.+2      	; 0x6fc2 <vfprintf+0x132>
    6fc0:	a5 cf       	rjmp	.-182    	; 0x6f0c <vfprintf+0x7c>
    6fc2:	b6 01       	movw	r22, r12
    6fc4:	90 e0       	ldi	r25, 0x00	; 0
    6fc6:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    6fca:	f2 cf       	rjmp	.-28     	; 0x6fb0 <vfprintf+0x120>
    6fcc:	14 36       	cpi	r17, 0x64	; 100
    6fce:	11 f0       	breq	.+4      	; 0x6fd4 <vfprintf+0x144>
    6fd0:	19 36       	cpi	r17, 0x69	; 105
    6fd2:	29 f5       	brne	.+74     	; 0x701e <vfprintf+0x18e>
    6fd4:	37 01       	movw	r6, r14
    6fd6:	27 ff       	sbrs	r18, 7
    6fd8:	09 c0       	rjmp	.+18     	; 0x6fec <vfprintf+0x15c>
    6fda:	f4 e0       	ldi	r31, 0x04	; 4
    6fdc:	6f 0e       	add	r6, r31
    6fde:	71 1c       	adc	r7, r1
    6fe0:	f7 01       	movw	r30, r14
    6fe2:	60 81       	ld	r22, Z
    6fe4:	71 81       	ldd	r23, Z+1	; 0x01
    6fe6:	82 81       	ldd	r24, Z+2	; 0x02
    6fe8:	93 81       	ldd	r25, Z+3	; 0x03
    6fea:	0a c0       	rjmp	.+20     	; 0x7000 <vfprintf+0x170>
    6fec:	f2 e0       	ldi	r31, 0x02	; 2
    6fee:	6f 0e       	add	r6, r31
    6ff0:	71 1c       	adc	r7, r1
    6ff2:	f7 01       	movw	r30, r14
    6ff4:	60 81       	ld	r22, Z
    6ff6:	71 81       	ldd	r23, Z+1	; 0x01
    6ff8:	88 27       	eor	r24, r24
    6ffa:	77 fd       	sbrc	r23, 7
    6ffc:	80 95       	com	r24
    6ffe:	98 2f       	mov	r25, r24
    7000:	02 2f       	mov	r16, r18
    7002:	0f 7e       	andi	r16, 0xEF	; 239
    7004:	97 ff       	sbrs	r25, 7
    7006:	08 c0       	rjmp	.+16     	; 0x7018 <vfprintf+0x188>
    7008:	90 95       	com	r25
    700a:	80 95       	com	r24
    700c:	70 95       	com	r23
    700e:	61 95       	neg	r22
    7010:	7f 4f       	sbci	r23, 0xFF	; 255
    7012:	8f 4f       	sbci	r24, 0xFF	; 255
    7014:	9f 4f       	sbci	r25, 0xFF	; 255
    7016:	00 64       	ori	r16, 0x40	; 64
    7018:	2a e0       	ldi	r18, 0x0A	; 10
    701a:	30 e0       	ldi	r19, 0x00	; 0
    701c:	33 c0       	rjmp	.+102    	; 0x7084 <vfprintf+0x1f4>
    701e:	10 37       	cpi	r17, 0x70	; 112
    7020:	99 f0       	breq	.+38     	; 0x7048 <vfprintf+0x1b8>
    7022:	40 f4       	brcc	.+16     	; 0x7034 <vfprintf+0x1a4>
    7024:	18 35       	cpi	r17, 0x58	; 88
    7026:	b1 f0       	breq	.+44     	; 0x7054 <vfprintf+0x1c4>
    7028:	1f 36       	cpi	r17, 0x6F	; 111
    702a:	09 f0       	breq	.+2      	; 0x702e <vfprintf+0x19e>
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <vfprintf+0x252>
    702e:	28 e0       	ldi	r18, 0x08	; 8
    7030:	30 e0       	ldi	r19, 0x00	; 0
    7032:	14 c0       	rjmp	.+40     	; 0x705c <vfprintf+0x1cc>
    7034:	15 37       	cpi	r17, 0x75	; 117
    7036:	19 f0       	breq	.+6      	; 0x703e <vfprintf+0x1ae>
    7038:	18 37       	cpi	r17, 0x78	; 120
    703a:	41 f0       	breq	.+16     	; 0x704c <vfprintf+0x1bc>
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <vfprintf+0x252>
    703e:	02 2f       	mov	r16, r18
    7040:	0f 7e       	andi	r16, 0xEF	; 239
    7042:	2a e0       	ldi	r18, 0x0A	; 10
    7044:	30 e0       	ldi	r19, 0x00	; 0
    7046:	0a c0       	rjmp	.+20     	; 0x705c <vfprintf+0x1cc>
    7048:	02 2f       	mov	r16, r18
    704a:	00 61       	ori	r16, 0x10	; 16
    704c:	04 62       	ori	r16, 0x24	; 36
    704e:	20 e1       	ldi	r18, 0x10	; 16
    7050:	30 e0       	ldi	r19, 0x00	; 0
    7052:	04 c0       	rjmp	.+8      	; 0x705c <vfprintf+0x1cc>
    7054:	02 2f       	mov	r16, r18
    7056:	04 60       	ori	r16, 0x04	; 4
    7058:	20 e1       	ldi	r18, 0x10	; 16
    705a:	32 e0       	ldi	r19, 0x02	; 2
    705c:	37 01       	movw	r6, r14
    705e:	07 ff       	sbrs	r16, 7
    7060:	09 c0       	rjmp	.+18     	; 0x7074 <vfprintf+0x1e4>
    7062:	f4 e0       	ldi	r31, 0x04	; 4
    7064:	6f 0e       	add	r6, r31
    7066:	71 1c       	adc	r7, r1
    7068:	f7 01       	movw	r30, r14
    706a:	60 81       	ld	r22, Z
    706c:	71 81       	ldd	r23, Z+1	; 0x01
    706e:	82 81       	ldd	r24, Z+2	; 0x02
    7070:	93 81       	ldd	r25, Z+3	; 0x03
    7072:	08 c0       	rjmp	.+16     	; 0x7084 <vfprintf+0x1f4>
    7074:	f2 e0       	ldi	r31, 0x02	; 2
    7076:	6f 0e       	add	r6, r31
    7078:	71 1c       	adc	r7, r1
    707a:	f7 01       	movw	r30, r14
    707c:	60 81       	ld	r22, Z
    707e:	71 81       	ldd	r23, Z+1	; 0x01
    7080:	80 e0       	ldi	r24, 0x00	; 0
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	a4 01       	movw	r20, r8
    7086:	0e 94 2c 3b 	call	0x7658	; 0x7658 <__ultoa_invert>
    708a:	18 2f       	mov	r17, r24
    708c:	18 19       	sub	r17, r8
    708e:	06 ff       	sbrs	r16, 6
    7090:	05 c0       	rjmp	.+10     	; 0x709c <vfprintf+0x20c>
    7092:	b6 01       	movw	r22, r12
    7094:	8d e2       	ldi	r24, 0x2D	; 45
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    709c:	04 ff       	sbrs	r16, 4
    709e:	15 c0       	rjmp	.+42     	; 0x70ca <vfprintf+0x23a>
    70a0:	fe 01       	movw	r30, r28
    70a2:	e1 0f       	add	r30, r17
    70a4:	f1 1d       	adc	r31, r1
    70a6:	80 81       	ld	r24, Z
    70a8:	80 33       	cpi	r24, 0x30	; 48
    70aa:	79 f0       	breq	.+30     	; 0x70ca <vfprintf+0x23a>
    70ac:	b6 01       	movw	r22, r12
    70ae:	80 e3       	ldi	r24, 0x30	; 48
    70b0:	90 e0       	ldi	r25, 0x00	; 0
    70b2:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    70b6:	02 ff       	sbrs	r16, 2
    70b8:	08 c0       	rjmp	.+16     	; 0x70ca <vfprintf+0x23a>
    70ba:	00 72       	andi	r16, 0x20	; 32
    70bc:	80 2f       	mov	r24, r16
    70be:	90 e0       	ldi	r25, 0x00	; 0
    70c0:	b6 01       	movw	r22, r12
    70c2:	88 5a       	subi	r24, 0xA8	; 168
    70c4:	9f 4f       	sbci	r25, 0xFF	; 255
    70c6:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    70ca:	11 50       	subi	r17, 0x01	; 1
    70cc:	f4 01       	movw	r30, r8
    70ce:	e1 0f       	add	r30, r17
    70d0:	f1 1d       	adc	r31, r1
    70d2:	80 81       	ld	r24, Z
    70d4:	b6 01       	movw	r22, r12
    70d6:	90 e0       	ldi	r25, 0x00	; 0
    70d8:	0e 94 7a 3a 	call	0x74f4	; 0x74f4 <fputc>
    70dc:	11 11       	cpse	r17, r1
    70de:	f5 cf       	rjmp	.-22     	; 0x70ca <vfprintf+0x23a>
    70e0:	15 cf       	rjmp	.-470    	; 0x6f0c <vfprintf+0x7c>
    70e2:	f6 01       	movw	r30, r12
    70e4:	86 81       	ldd	r24, Z+6	; 0x06
    70e6:	97 81       	ldd	r25, Z+7	; 0x07
    70e8:	05 c0       	rjmp	.+10     	; 0x70f4 <vfprintf+0x264>
    70ea:	8f ef       	ldi	r24, 0xFF	; 255
    70ec:	9f ef       	ldi	r25, 0xFF	; 255
    70ee:	02 c0       	rjmp	.+4      	; 0x70f4 <vfprintf+0x264>
    70f0:	02 2f       	mov	r16, r18
    70f2:	31 cf       	rjmp	.-414    	; 0x6f56 <vfprintf+0xc6>
    70f4:	2c 96       	adiw	r28, 0x0c	; 12
    70f6:	0f b6       	in	r0, 0x3f	; 63
    70f8:	f8 94       	cli
    70fa:	de bf       	out	0x3e, r29	; 62
    70fc:	0f be       	out	0x3f, r0	; 63
    70fe:	cd bf       	out	0x3d, r28	; 61
    7100:	df 91       	pop	r29
    7102:	cf 91       	pop	r28
    7104:	1f 91       	pop	r17
    7106:	0f 91       	pop	r16
    7108:	ff 90       	pop	r15
    710a:	ef 90       	pop	r14
    710c:	df 90       	pop	r13
    710e:	cf 90       	pop	r12
    7110:	bf 90       	pop	r11
    7112:	af 90       	pop	r10
    7114:	9f 90       	pop	r9
    7116:	8f 90       	pop	r8
    7118:	7f 90       	pop	r7
    711a:	6f 90       	pop	r6
    711c:	08 95       	ret

0000711e <__muluhisi3>:
    711e:	0e 94 8c 39 	call	0x7318	; 0x7318 <__umulhisi3>
    7122:	a5 9f       	mul	r26, r21
    7124:	90 0d       	add	r25, r0
    7126:	b4 9f       	mul	r27, r20
    7128:	90 0d       	add	r25, r0
    712a:	a4 9f       	mul	r26, r20
    712c:	80 0d       	add	r24, r0
    712e:	91 1d       	adc	r25, r1
    7130:	11 24       	eor	r1, r1
    7132:	08 95       	ret

00007134 <__mulshisi3>:
    7134:	b7 ff       	sbrs	r27, 7
    7136:	0c 94 8f 38 	jmp	0x711e	; 0x711e <__muluhisi3>

0000713a <__mulohisi3>:
    713a:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    713e:	82 1b       	sub	r24, r18
    7140:	93 0b       	sbc	r25, r19
    7142:	08 95       	ret

00007144 <__mulsi3>:
    7144:	db 01       	movw	r26, r22
    7146:	8f 93       	push	r24
    7148:	9f 93       	push	r25
    714a:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    714e:	bf 91       	pop	r27
    7150:	af 91       	pop	r26
    7152:	a2 9f       	mul	r26, r18
    7154:	80 0d       	add	r24, r0
    7156:	91 1d       	adc	r25, r1
    7158:	a3 9f       	mul	r26, r19
    715a:	90 0d       	add	r25, r0
    715c:	b2 9f       	mul	r27, r18
    715e:	90 0d       	add	r25, r0
    7160:	11 24       	eor	r1, r1
    7162:	08 95       	ret

00007164 <__udivmodqi4>:
    7164:	99 1b       	sub	r25, r25
    7166:	79 e0       	ldi	r23, 0x09	; 9
    7168:	04 c0       	rjmp	.+8      	; 0x7172 <__udivmodqi4_ep>

0000716a <__udivmodqi4_loop>:
    716a:	99 1f       	adc	r25, r25
    716c:	96 17       	cp	r25, r22
    716e:	08 f0       	brcs	.+2      	; 0x7172 <__udivmodqi4_ep>
    7170:	96 1b       	sub	r25, r22

00007172 <__udivmodqi4_ep>:
    7172:	88 1f       	adc	r24, r24
    7174:	7a 95       	dec	r23
    7176:	c9 f7       	brne	.-14     	; 0x716a <__udivmodqi4_loop>
    7178:	80 95       	com	r24
    717a:	08 95       	ret

0000717c <__udivmodhi4>:
    717c:	aa 1b       	sub	r26, r26
    717e:	bb 1b       	sub	r27, r27
    7180:	51 e1       	ldi	r21, 0x11	; 17
    7182:	07 c0       	rjmp	.+14     	; 0x7192 <__udivmodhi4_ep>

00007184 <__udivmodhi4_loop>:
    7184:	aa 1f       	adc	r26, r26
    7186:	bb 1f       	adc	r27, r27
    7188:	a6 17       	cp	r26, r22
    718a:	b7 07       	cpc	r27, r23
    718c:	10 f0       	brcs	.+4      	; 0x7192 <__udivmodhi4_ep>
    718e:	a6 1b       	sub	r26, r22
    7190:	b7 0b       	sbc	r27, r23

00007192 <__udivmodhi4_ep>:
    7192:	88 1f       	adc	r24, r24
    7194:	99 1f       	adc	r25, r25
    7196:	5a 95       	dec	r21
    7198:	a9 f7       	brne	.-22     	; 0x7184 <__udivmodhi4_loop>
    719a:	80 95       	com	r24
    719c:	90 95       	com	r25
    719e:	bc 01       	movw	r22, r24
    71a0:	cd 01       	movw	r24, r26
    71a2:	08 95       	ret

000071a4 <__divmodhi4>:
    71a4:	97 fb       	bst	r25, 7
    71a6:	07 2e       	mov	r0, r23
    71a8:	16 f4       	brtc	.+4      	; 0x71ae <__divmodhi4+0xa>
    71aa:	00 94       	com	r0
    71ac:	07 d0       	rcall	.+14     	; 0x71bc <__divmodhi4_neg1>
    71ae:	77 fd       	sbrc	r23, 7
    71b0:	09 d0       	rcall	.+18     	; 0x71c4 <__divmodhi4_neg2>
    71b2:	0e 94 be 38 	call	0x717c	; 0x717c <__udivmodhi4>
    71b6:	07 fc       	sbrc	r0, 7
    71b8:	05 d0       	rcall	.+10     	; 0x71c4 <__divmodhi4_neg2>
    71ba:	3e f4       	brtc	.+14     	; 0x71ca <__divmodhi4_exit>

000071bc <__divmodhi4_neg1>:
    71bc:	90 95       	com	r25
    71be:	81 95       	neg	r24
    71c0:	9f 4f       	sbci	r25, 0xFF	; 255
    71c2:	08 95       	ret

000071c4 <__divmodhi4_neg2>:
    71c4:	70 95       	com	r23
    71c6:	61 95       	neg	r22
    71c8:	7f 4f       	sbci	r23, 0xFF	; 255

000071ca <__divmodhi4_exit>:
    71ca:	08 95       	ret

000071cc <__udivmodsi4>:
    71cc:	a1 e2       	ldi	r26, 0x21	; 33
    71ce:	1a 2e       	mov	r1, r26
    71d0:	aa 1b       	sub	r26, r26
    71d2:	bb 1b       	sub	r27, r27
    71d4:	fd 01       	movw	r30, r26
    71d6:	0d c0       	rjmp	.+26     	; 0x71f2 <__udivmodsi4_ep>

000071d8 <__udivmodsi4_loop>:
    71d8:	aa 1f       	adc	r26, r26
    71da:	bb 1f       	adc	r27, r27
    71dc:	ee 1f       	adc	r30, r30
    71de:	ff 1f       	adc	r31, r31
    71e0:	a2 17       	cp	r26, r18
    71e2:	b3 07       	cpc	r27, r19
    71e4:	e4 07       	cpc	r30, r20
    71e6:	f5 07       	cpc	r31, r21
    71e8:	20 f0       	brcs	.+8      	; 0x71f2 <__udivmodsi4_ep>
    71ea:	a2 1b       	sub	r26, r18
    71ec:	b3 0b       	sbc	r27, r19
    71ee:	e4 0b       	sbc	r30, r20
    71f0:	f5 0b       	sbc	r31, r21

000071f2 <__udivmodsi4_ep>:
    71f2:	66 1f       	adc	r22, r22
    71f4:	77 1f       	adc	r23, r23
    71f6:	88 1f       	adc	r24, r24
    71f8:	99 1f       	adc	r25, r25
    71fa:	1a 94       	dec	r1
    71fc:	69 f7       	brne	.-38     	; 0x71d8 <__udivmodsi4_loop>
    71fe:	60 95       	com	r22
    7200:	70 95       	com	r23
    7202:	80 95       	com	r24
    7204:	90 95       	com	r25
    7206:	9b 01       	movw	r18, r22
    7208:	ac 01       	movw	r20, r24
    720a:	bd 01       	movw	r22, r26
    720c:	cf 01       	movw	r24, r30
    720e:	08 95       	ret

00007210 <__divmodsi4>:
    7210:	05 2e       	mov	r0, r21
    7212:	97 fb       	bst	r25, 7
    7214:	1e f4       	brtc	.+6      	; 0x721c <__divmodsi4+0xc>
    7216:	00 94       	com	r0
    7218:	0e 94 7e 39 	call	0x72fc	; 0x72fc <__negsi2>
    721c:	57 fd       	sbrc	r21, 7
    721e:	07 d0       	rcall	.+14     	; 0x722e <__divmodsi4_neg2>
    7220:	0e 94 e6 38 	call	0x71cc	; 0x71cc <__udivmodsi4>
    7224:	07 fc       	sbrc	r0, 7
    7226:	03 d0       	rcall	.+6      	; 0x722e <__divmodsi4_neg2>
    7228:	4e f4       	brtc	.+18     	; 0x723c <__divmodsi4_exit>
    722a:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__negsi2>

0000722e <__divmodsi4_neg2>:
    722e:	50 95       	com	r21
    7230:	40 95       	com	r20
    7232:	30 95       	com	r19
    7234:	21 95       	neg	r18
    7236:	3f 4f       	sbci	r19, 0xFF	; 255
    7238:	4f 4f       	sbci	r20, 0xFF	; 255
    723a:	5f 4f       	sbci	r21, 0xFF	; 255

0000723c <__divmodsi4_exit>:
    723c:	08 95       	ret

0000723e <__umoddi3>:
    723e:	68 94       	set
    7240:	01 c0       	rjmp	.+2      	; 0x7244 <__udivdi3_umoddi3>

00007242 <__udivdi3>:
    7242:	e8 94       	clt

00007244 <__udivdi3_umoddi3>:
    7244:	8f 92       	push	r8
    7246:	9f 92       	push	r9
    7248:	cf 93       	push	r28
    724a:	df 93       	push	r29
    724c:	0e 94 2d 39 	call	0x725a	; 0x725a <__udivmod64>
    7250:	df 91       	pop	r29
    7252:	cf 91       	pop	r28
    7254:	9f 90       	pop	r9
    7256:	8f 90       	pop	r8
    7258:	08 95       	ret

0000725a <__udivmod64>:
    725a:	88 24       	eor	r8, r8
    725c:	99 24       	eor	r9, r9
    725e:	f4 01       	movw	r30, r8
    7260:	e4 01       	movw	r28, r8
    7262:	b0 e4       	ldi	r27, 0x40	; 64
    7264:	9f 93       	push	r25
    7266:	aa 27       	eor	r26, r26
    7268:	9a 15       	cp	r25, r10
    726a:	8b 04       	cpc	r8, r11
    726c:	9c 04       	cpc	r9, r12
    726e:	ed 05       	cpc	r30, r13
    7270:	fe 05       	cpc	r31, r14
    7272:	cf 05       	cpc	r28, r15
    7274:	d0 07       	cpc	r29, r16
    7276:	a1 07       	cpc	r26, r17
    7278:	98 f4       	brcc	.+38     	; 0x72a0 <__udivmod64+0x46>
    727a:	ad 2f       	mov	r26, r29
    727c:	dc 2f       	mov	r29, r28
    727e:	cf 2f       	mov	r28, r31
    7280:	fe 2f       	mov	r31, r30
    7282:	e9 2d       	mov	r30, r9
    7284:	98 2c       	mov	r9, r8
    7286:	89 2e       	mov	r8, r25
    7288:	98 2f       	mov	r25, r24
    728a:	87 2f       	mov	r24, r23
    728c:	76 2f       	mov	r23, r22
    728e:	65 2f       	mov	r22, r21
    7290:	54 2f       	mov	r21, r20
    7292:	43 2f       	mov	r20, r19
    7294:	32 2f       	mov	r19, r18
    7296:	22 27       	eor	r18, r18
    7298:	b8 50       	subi	r27, 0x08	; 8
    729a:	31 f7       	brne	.-52     	; 0x7268 <__udivmod64+0xe>
    729c:	bf 91       	pop	r27
    729e:	27 c0       	rjmp	.+78     	; 0x72ee <__udivmod64+0x94>
    72a0:	1b 2e       	mov	r1, r27
    72a2:	bf 91       	pop	r27
    72a4:	bb 27       	eor	r27, r27
    72a6:	22 0f       	add	r18, r18
    72a8:	33 1f       	adc	r19, r19
    72aa:	44 1f       	adc	r20, r20
    72ac:	55 1f       	adc	r21, r21
    72ae:	66 1f       	adc	r22, r22
    72b0:	77 1f       	adc	r23, r23
    72b2:	88 1f       	adc	r24, r24
    72b4:	99 1f       	adc	r25, r25
    72b6:	88 1c       	adc	r8, r8
    72b8:	99 1c       	adc	r9, r9
    72ba:	ee 1f       	adc	r30, r30
    72bc:	ff 1f       	adc	r31, r31
    72be:	cc 1f       	adc	r28, r28
    72c0:	dd 1f       	adc	r29, r29
    72c2:	aa 1f       	adc	r26, r26
    72c4:	bb 1f       	adc	r27, r27
    72c6:	8a 14       	cp	r8, r10
    72c8:	9b 04       	cpc	r9, r11
    72ca:	ec 05       	cpc	r30, r12
    72cc:	fd 05       	cpc	r31, r13
    72ce:	ce 05       	cpc	r28, r14
    72d0:	df 05       	cpc	r29, r15
    72d2:	a0 07       	cpc	r26, r16
    72d4:	b1 07       	cpc	r27, r17
    72d6:	48 f0       	brcs	.+18     	; 0x72ea <__udivmod64+0x90>
    72d8:	8a 18       	sub	r8, r10
    72da:	9b 08       	sbc	r9, r11
    72dc:	ec 09       	sbc	r30, r12
    72de:	fd 09       	sbc	r31, r13
    72e0:	ce 09       	sbc	r28, r14
    72e2:	df 09       	sbc	r29, r15
    72e4:	a0 0b       	sbc	r26, r16
    72e6:	b1 0b       	sbc	r27, r17
    72e8:	21 60       	ori	r18, 0x01	; 1
    72ea:	1a 94       	dec	r1
    72ec:	e1 f6       	brne	.-72     	; 0x72a6 <__udivmod64+0x4c>
    72ee:	2e f4       	brtc	.+10     	; 0x72fa <__udivmod64+0xa0>
    72f0:	94 01       	movw	r18, r8
    72f2:	af 01       	movw	r20, r30
    72f4:	be 01       	movw	r22, r28
    72f6:	cd 01       	movw	r24, r26
    72f8:	00 0c       	add	r0, r0
    72fa:	08 95       	ret

000072fc <__negsi2>:
    72fc:	90 95       	com	r25
    72fe:	80 95       	com	r24
    7300:	70 95       	com	r23
    7302:	61 95       	neg	r22
    7304:	7f 4f       	sbci	r23, 0xFF	; 255
    7306:	8f 4f       	sbci	r24, 0xFF	; 255
    7308:	9f 4f       	sbci	r25, 0xFF	; 255
    730a:	08 95       	ret

0000730c <__tablejump2__>:
    730c:	ee 0f       	add	r30, r30
    730e:	ff 1f       	adc	r31, r31

00007310 <__tablejump__>:
    7310:	05 90       	lpm	r0, Z+
    7312:	f4 91       	lpm	r31, Z
    7314:	e0 2d       	mov	r30, r0
    7316:	09 94       	ijmp

00007318 <__umulhisi3>:
    7318:	a2 9f       	mul	r26, r18
    731a:	b0 01       	movw	r22, r0
    731c:	b3 9f       	mul	r27, r19
    731e:	c0 01       	movw	r24, r0
    7320:	a3 9f       	mul	r26, r19
    7322:	70 0d       	add	r23, r0
    7324:	81 1d       	adc	r24, r1
    7326:	11 24       	eor	r1, r1
    7328:	91 1d       	adc	r25, r1
    732a:	b2 9f       	mul	r27, r18
    732c:	70 0d       	add	r23, r0
    732e:	81 1d       	adc	r24, r1
    7330:	11 24       	eor	r1, r1
    7332:	91 1d       	adc	r25, r1
    7334:	08 95       	ret

00007336 <do_rand>:
    7336:	8f 92       	push	r8
    7338:	9f 92       	push	r9
    733a:	af 92       	push	r10
    733c:	bf 92       	push	r11
    733e:	cf 92       	push	r12
    7340:	df 92       	push	r13
    7342:	ef 92       	push	r14
    7344:	ff 92       	push	r15
    7346:	cf 93       	push	r28
    7348:	df 93       	push	r29
    734a:	ec 01       	movw	r28, r24
    734c:	68 81       	ld	r22, Y
    734e:	79 81       	ldd	r23, Y+1	; 0x01
    7350:	8a 81       	ldd	r24, Y+2	; 0x02
    7352:	9b 81       	ldd	r25, Y+3	; 0x03
    7354:	61 15       	cp	r22, r1
    7356:	71 05       	cpc	r23, r1
    7358:	81 05       	cpc	r24, r1
    735a:	91 05       	cpc	r25, r1
    735c:	21 f4       	brne	.+8      	; 0x7366 <do_rand+0x30>
    735e:	64 e2       	ldi	r22, 0x24	; 36
    7360:	79 ed       	ldi	r23, 0xD9	; 217
    7362:	8b e5       	ldi	r24, 0x5B	; 91
    7364:	97 e0       	ldi	r25, 0x07	; 7
    7366:	2d e1       	ldi	r18, 0x1D	; 29
    7368:	33 ef       	ldi	r19, 0xF3	; 243
    736a:	41 e0       	ldi	r20, 0x01	; 1
    736c:	50 e0       	ldi	r21, 0x00	; 0
    736e:	0e 94 08 39 	call	0x7210	; 0x7210 <__divmodsi4>
    7372:	49 01       	movw	r8, r18
    7374:	5a 01       	movw	r10, r20
    7376:	9b 01       	movw	r18, r22
    7378:	ac 01       	movw	r20, r24
    737a:	a7 ea       	ldi	r26, 0xA7	; 167
    737c:	b1 e4       	ldi	r27, 0x41	; 65
    737e:	0e 94 8f 38 	call	0x711e	; 0x711e <__muluhisi3>
    7382:	6b 01       	movw	r12, r22
    7384:	7c 01       	movw	r14, r24
    7386:	ac ee       	ldi	r26, 0xEC	; 236
    7388:	b4 ef       	ldi	r27, 0xF4	; 244
    738a:	a5 01       	movw	r20, r10
    738c:	94 01       	movw	r18, r8
    738e:	0e 94 9d 38 	call	0x713a	; 0x713a <__mulohisi3>
    7392:	dc 01       	movw	r26, r24
    7394:	cb 01       	movw	r24, r22
    7396:	8c 0d       	add	r24, r12
    7398:	9d 1d       	adc	r25, r13
    739a:	ae 1d       	adc	r26, r14
    739c:	bf 1d       	adc	r27, r15
    739e:	b7 ff       	sbrs	r27, 7
    73a0:	03 c0       	rjmp	.+6      	; 0x73a8 <do_rand+0x72>
    73a2:	01 97       	sbiw	r24, 0x01	; 1
    73a4:	a1 09       	sbc	r26, r1
    73a6:	b0 48       	sbci	r27, 0x80	; 128
    73a8:	88 83       	st	Y, r24
    73aa:	99 83       	std	Y+1, r25	; 0x01
    73ac:	aa 83       	std	Y+2, r26	; 0x02
    73ae:	bb 83       	std	Y+3, r27	; 0x03
    73b0:	9f 77       	andi	r25, 0x7F	; 127
    73b2:	df 91       	pop	r29
    73b4:	cf 91       	pop	r28
    73b6:	ff 90       	pop	r15
    73b8:	ef 90       	pop	r14
    73ba:	df 90       	pop	r13
    73bc:	cf 90       	pop	r12
    73be:	bf 90       	pop	r11
    73c0:	af 90       	pop	r10
    73c2:	9f 90       	pop	r9
    73c4:	8f 90       	pop	r8
    73c6:	08 95       	ret

000073c8 <rand_r>:
    73c8:	0c 94 9b 39 	jmp	0x7336	; 0x7336 <do_rand>

000073cc <rand>:
    73cc:	81 e0       	ldi	r24, 0x01	; 1
    73ce:	92 e0       	ldi	r25, 0x02	; 2
    73d0:	0c 94 9b 39 	jmp	0x7336	; 0x7336 <do_rand>

000073d4 <srand>:
    73d4:	a0 e0       	ldi	r26, 0x00	; 0
    73d6:	b0 e0       	ldi	r27, 0x00	; 0
    73d8:	80 93 01 02 	sts	0x0201, r24
    73dc:	90 93 02 02 	sts	0x0202, r25
    73e0:	a0 93 03 02 	sts	0x0203, r26
    73e4:	b0 93 04 02 	sts	0x0204, r27
    73e8:	08 95       	ret

000073ea <atoi>:
    73ea:	fc 01       	movw	r30, r24
    73ec:	88 27       	eor	r24, r24
    73ee:	99 27       	eor	r25, r25
    73f0:	e8 94       	clt
    73f2:	21 91       	ld	r18, Z+
    73f4:	20 32       	cpi	r18, 0x20	; 32
    73f6:	e9 f3       	breq	.-6      	; 0x73f2 <atoi+0x8>
    73f8:	29 30       	cpi	r18, 0x09	; 9
    73fa:	10 f0       	brcs	.+4      	; 0x7400 <atoi+0x16>
    73fc:	2e 30       	cpi	r18, 0x0E	; 14
    73fe:	c8 f3       	brcs	.-14     	; 0x73f2 <atoi+0x8>
    7400:	2b 32       	cpi	r18, 0x2B	; 43
    7402:	41 f0       	breq	.+16     	; 0x7414 <atoi+0x2a>
    7404:	2d 32       	cpi	r18, 0x2D	; 45
    7406:	39 f4       	brne	.+14     	; 0x7416 <atoi+0x2c>
    7408:	68 94       	set
    740a:	04 c0       	rjmp	.+8      	; 0x7414 <atoi+0x2a>
    740c:	0e 94 27 3a 	call	0x744e	; 0x744e <__mulhi_const_10>
    7410:	82 0f       	add	r24, r18
    7412:	91 1d       	adc	r25, r1
    7414:	21 91       	ld	r18, Z+
    7416:	20 53       	subi	r18, 0x30	; 48
    7418:	2a 30       	cpi	r18, 0x0A	; 10
    741a:	c0 f3       	brcs	.-16     	; 0x740c <atoi+0x22>
    741c:	1e f4       	brtc	.+6      	; 0x7424 <atoi+0x3a>
    741e:	90 95       	com	r25
    7420:	81 95       	neg	r24
    7422:	9f 4f       	sbci	r25, 0xFF	; 255
    7424:	08 95       	ret

00007426 <strchr_P>:
    7426:	fc 01       	movw	r30, r24
    7428:	05 90       	lpm	r0, Z+
    742a:	06 16       	cp	r0, r22
    742c:	21 f0       	breq	.+8      	; 0x7436 <strchr_P+0x10>
    742e:	00 20       	and	r0, r0
    7430:	d9 f7       	brne	.-10     	; 0x7428 <strchr_P+0x2>
    7432:	c0 01       	movw	r24, r0
    7434:	08 95       	ret
    7436:	31 97       	sbiw	r30, 0x01	; 1
    7438:	cf 01       	movw	r24, r30
    743a:	08 95       	ret

0000743c <memcpy>:
    743c:	fb 01       	movw	r30, r22
    743e:	dc 01       	movw	r26, r24
    7440:	02 c0       	rjmp	.+4      	; 0x7446 <memcpy+0xa>
    7442:	01 90       	ld	r0, Z+
    7444:	0d 92       	st	X+, r0
    7446:	41 50       	subi	r20, 0x01	; 1
    7448:	50 40       	sbci	r21, 0x00	; 0
    744a:	d8 f7       	brcc	.-10     	; 0x7442 <memcpy+0x6>
    744c:	08 95       	ret

0000744e <__mulhi_const_10>:
    744e:	7a e0       	ldi	r23, 0x0A	; 10
    7450:	97 9f       	mul	r25, r23
    7452:	90 2d       	mov	r25, r0
    7454:	87 9f       	mul	r24, r23
    7456:	80 2d       	mov	r24, r0
    7458:	91 0d       	add	r25, r1
    745a:	11 24       	eor	r1, r1
    745c:	08 95       	ret

0000745e <fdevopen>:
    745e:	0f 93       	push	r16
    7460:	1f 93       	push	r17
    7462:	cf 93       	push	r28
    7464:	df 93       	push	r29
    7466:	00 97       	sbiw	r24, 0x00	; 0
    7468:	31 f4       	brne	.+12     	; 0x7476 <fdevopen+0x18>
    746a:	61 15       	cp	r22, r1
    746c:	71 05       	cpc	r23, r1
    746e:	19 f4       	brne	.+6      	; 0x7476 <fdevopen+0x18>
    7470:	80 e0       	ldi	r24, 0x00	; 0
    7472:	90 e0       	ldi	r25, 0x00	; 0
    7474:	3a c0       	rjmp	.+116    	; 0x74ea <fdevopen+0x8c>
    7476:	8b 01       	movw	r16, r22
    7478:	ec 01       	movw	r28, r24
    747a:	6e e0       	ldi	r22, 0x0E	; 14
    747c:	70 e0       	ldi	r23, 0x00	; 0
    747e:	81 e0       	ldi	r24, 0x01	; 1
    7480:	90 e0       	ldi	r25, 0x00	; 0
    7482:	0e 94 a0 3b 	call	0x7740	; 0x7740 <calloc>
    7486:	fc 01       	movw	r30, r24
    7488:	00 97       	sbiw	r24, 0x00	; 0
    748a:	91 f3       	breq	.-28     	; 0x7470 <fdevopen+0x12>
    748c:	80 e8       	ldi	r24, 0x80	; 128
    748e:	83 83       	std	Z+3, r24	; 0x03
    7490:	01 15       	cp	r16, r1
    7492:	11 05       	cpc	r17, r1
    7494:	71 f0       	breq	.+28     	; 0x74b2 <fdevopen+0x54>
    7496:	13 87       	std	Z+11, r17	; 0x0b
    7498:	02 87       	std	Z+10, r16	; 0x0a
    749a:	81 e8       	ldi	r24, 0x81	; 129
    749c:	83 83       	std	Z+3, r24	; 0x03
    749e:	80 91 70 17 	lds	r24, 0x1770
    74a2:	90 91 71 17 	lds	r25, 0x1771
    74a6:	89 2b       	or	r24, r25
    74a8:	21 f4       	brne	.+8      	; 0x74b2 <fdevopen+0x54>
    74aa:	f0 93 71 17 	sts	0x1771, r31
    74ae:	e0 93 70 17 	sts	0x1770, r30
    74b2:	20 97       	sbiw	r28, 0x00	; 0
    74b4:	c9 f0       	breq	.+50     	; 0x74e8 <fdevopen+0x8a>
    74b6:	d1 87       	std	Z+9, r29	; 0x09
    74b8:	c0 87       	std	Z+8, r28	; 0x08
    74ba:	83 81       	ldd	r24, Z+3	; 0x03
    74bc:	82 60       	ori	r24, 0x02	; 2
    74be:	83 83       	std	Z+3, r24	; 0x03
    74c0:	80 91 72 17 	lds	r24, 0x1772
    74c4:	90 91 73 17 	lds	r25, 0x1773
    74c8:	89 2b       	or	r24, r25
    74ca:	71 f4       	brne	.+28     	; 0x74e8 <fdevopen+0x8a>
    74cc:	f0 93 73 17 	sts	0x1773, r31
    74d0:	e0 93 72 17 	sts	0x1772, r30
    74d4:	80 91 74 17 	lds	r24, 0x1774
    74d8:	90 91 75 17 	lds	r25, 0x1775
    74dc:	89 2b       	or	r24, r25
    74de:	21 f4       	brne	.+8      	; 0x74e8 <fdevopen+0x8a>
    74e0:	f0 93 75 17 	sts	0x1775, r31
    74e4:	e0 93 74 17 	sts	0x1774, r30
    74e8:	cf 01       	movw	r24, r30
    74ea:	df 91       	pop	r29
    74ec:	cf 91       	pop	r28
    74ee:	1f 91       	pop	r17
    74f0:	0f 91       	pop	r16
    74f2:	08 95       	ret

000074f4 <fputc>:
    74f4:	0f 93       	push	r16
    74f6:	1f 93       	push	r17
    74f8:	cf 93       	push	r28
    74fa:	df 93       	push	r29
    74fc:	fb 01       	movw	r30, r22
    74fe:	23 81       	ldd	r18, Z+3	; 0x03
    7500:	21 fd       	sbrc	r18, 1
    7502:	03 c0       	rjmp	.+6      	; 0x750a <fputc+0x16>
    7504:	8f ef       	ldi	r24, 0xFF	; 255
    7506:	9f ef       	ldi	r25, 0xFF	; 255
    7508:	28 c0       	rjmp	.+80     	; 0x755a <fputc+0x66>
    750a:	22 ff       	sbrs	r18, 2
    750c:	16 c0       	rjmp	.+44     	; 0x753a <fputc+0x46>
    750e:	46 81       	ldd	r20, Z+6	; 0x06
    7510:	57 81       	ldd	r21, Z+7	; 0x07
    7512:	24 81       	ldd	r18, Z+4	; 0x04
    7514:	35 81       	ldd	r19, Z+5	; 0x05
    7516:	42 17       	cp	r20, r18
    7518:	53 07       	cpc	r21, r19
    751a:	44 f4       	brge	.+16     	; 0x752c <fputc+0x38>
    751c:	a0 81       	ld	r26, Z
    751e:	b1 81       	ldd	r27, Z+1	; 0x01
    7520:	9d 01       	movw	r18, r26
    7522:	2f 5f       	subi	r18, 0xFF	; 255
    7524:	3f 4f       	sbci	r19, 0xFF	; 255
    7526:	31 83       	std	Z+1, r19	; 0x01
    7528:	20 83       	st	Z, r18
    752a:	8c 93       	st	X, r24
    752c:	26 81       	ldd	r18, Z+6	; 0x06
    752e:	37 81       	ldd	r19, Z+7	; 0x07
    7530:	2f 5f       	subi	r18, 0xFF	; 255
    7532:	3f 4f       	sbci	r19, 0xFF	; 255
    7534:	37 83       	std	Z+7, r19	; 0x07
    7536:	26 83       	std	Z+6, r18	; 0x06
    7538:	10 c0       	rjmp	.+32     	; 0x755a <fputc+0x66>
    753a:	eb 01       	movw	r28, r22
    753c:	09 2f       	mov	r16, r25
    753e:	18 2f       	mov	r17, r24
    7540:	00 84       	ldd	r0, Z+8	; 0x08
    7542:	f1 85       	ldd	r31, Z+9	; 0x09
    7544:	e0 2d       	mov	r30, r0
    7546:	09 95       	icall
    7548:	89 2b       	or	r24, r25
    754a:	e1 f6       	brne	.-72     	; 0x7504 <fputc+0x10>
    754c:	8e 81       	ldd	r24, Y+6	; 0x06
    754e:	9f 81       	ldd	r25, Y+7	; 0x07
    7550:	01 96       	adiw	r24, 0x01	; 1
    7552:	9f 83       	std	Y+7, r25	; 0x07
    7554:	8e 83       	std	Y+6, r24	; 0x06
    7556:	81 2f       	mov	r24, r17
    7558:	90 2f       	mov	r25, r16
    755a:	df 91       	pop	r29
    755c:	cf 91       	pop	r28
    755e:	1f 91       	pop	r17
    7560:	0f 91       	pop	r16
    7562:	08 95       	ret

00007564 <printf>:
    7564:	cf 93       	push	r28
    7566:	df 93       	push	r29
    7568:	cd b7       	in	r28, 0x3d	; 61
    756a:	de b7       	in	r29, 0x3e	; 62
    756c:	ae 01       	movw	r20, r28
    756e:	4b 5f       	subi	r20, 0xFB	; 251
    7570:	5f 4f       	sbci	r21, 0xFF	; 255
    7572:	fa 01       	movw	r30, r20
    7574:	61 91       	ld	r22, Z+
    7576:	71 91       	ld	r23, Z+
    7578:	af 01       	movw	r20, r30
    757a:	80 91 72 17 	lds	r24, 0x1772
    757e:	90 91 73 17 	lds	r25, 0x1773
    7582:	0e 94 48 37 	call	0x6e90	; 0x6e90 <vfprintf>
    7586:	df 91       	pop	r29
    7588:	cf 91       	pop	r28
    758a:	08 95       	ret

0000758c <putchar>:
    758c:	60 91 72 17 	lds	r22, 0x1772
    7590:	70 91 73 17 	lds	r23, 0x1773
    7594:	0c 94 7a 3a 	jmp	0x74f4	; 0x74f4 <fputc>

00007598 <puts>:
    7598:	0f 93       	push	r16
    759a:	1f 93       	push	r17
    759c:	cf 93       	push	r28
    759e:	df 93       	push	r29
    75a0:	e0 91 72 17 	lds	r30, 0x1772
    75a4:	f0 91 73 17 	lds	r31, 0x1773
    75a8:	23 81       	ldd	r18, Z+3	; 0x03
    75aa:	21 ff       	sbrs	r18, 1
    75ac:	1b c0       	rjmp	.+54     	; 0x75e4 <puts+0x4c>
    75ae:	8c 01       	movw	r16, r24
    75b0:	d0 e0       	ldi	r29, 0x00	; 0
    75b2:	c0 e0       	ldi	r28, 0x00	; 0
    75b4:	f8 01       	movw	r30, r16
    75b6:	81 91       	ld	r24, Z+
    75b8:	8f 01       	movw	r16, r30
    75ba:	60 91 72 17 	lds	r22, 0x1772
    75be:	70 91 73 17 	lds	r23, 0x1773
    75c2:	db 01       	movw	r26, r22
    75c4:	18 96       	adiw	r26, 0x08	; 8
    75c6:	ed 91       	ld	r30, X+
    75c8:	fc 91       	ld	r31, X
    75ca:	19 97       	sbiw	r26, 0x09	; 9
    75cc:	88 23       	and	r24, r24
    75ce:	31 f0       	breq	.+12     	; 0x75dc <puts+0x44>
    75d0:	09 95       	icall
    75d2:	89 2b       	or	r24, r25
    75d4:	79 f3       	breq	.-34     	; 0x75b4 <puts+0x1c>
    75d6:	df ef       	ldi	r29, 0xFF	; 255
    75d8:	cf ef       	ldi	r28, 0xFF	; 255
    75da:	ec cf       	rjmp	.-40     	; 0x75b4 <puts+0x1c>
    75dc:	8a e0       	ldi	r24, 0x0A	; 10
    75de:	09 95       	icall
    75e0:	89 2b       	or	r24, r25
    75e2:	19 f0       	breq	.+6      	; 0x75ea <puts+0x52>
    75e4:	8f ef       	ldi	r24, 0xFF	; 255
    75e6:	9f ef       	ldi	r25, 0xFF	; 255
    75e8:	02 c0       	rjmp	.+4      	; 0x75ee <puts+0x56>
    75ea:	8d 2f       	mov	r24, r29
    75ec:	9c 2f       	mov	r25, r28
    75ee:	df 91       	pop	r29
    75f0:	cf 91       	pop	r28
    75f2:	1f 91       	pop	r17
    75f4:	0f 91       	pop	r16
    75f6:	08 95       	ret

000075f8 <sprintf>:
    75f8:	0f 93       	push	r16
    75fa:	1f 93       	push	r17
    75fc:	cf 93       	push	r28
    75fe:	df 93       	push	r29
    7600:	cd b7       	in	r28, 0x3d	; 61
    7602:	de b7       	in	r29, 0x3e	; 62
    7604:	2e 97       	sbiw	r28, 0x0e	; 14
    7606:	0f b6       	in	r0, 0x3f	; 63
    7608:	f8 94       	cli
    760a:	de bf       	out	0x3e, r29	; 62
    760c:	0f be       	out	0x3f, r0	; 63
    760e:	cd bf       	out	0x3d, r28	; 61
    7610:	0d 89       	ldd	r16, Y+21	; 0x15
    7612:	1e 89       	ldd	r17, Y+22	; 0x16
    7614:	86 e0       	ldi	r24, 0x06	; 6
    7616:	8c 83       	std	Y+4, r24	; 0x04
    7618:	1a 83       	std	Y+2, r17	; 0x02
    761a:	09 83       	std	Y+1, r16	; 0x01
    761c:	8f ef       	ldi	r24, 0xFF	; 255
    761e:	9f e7       	ldi	r25, 0x7F	; 127
    7620:	9e 83       	std	Y+6, r25	; 0x06
    7622:	8d 83       	std	Y+5, r24	; 0x05
    7624:	ae 01       	movw	r20, r28
    7626:	47 5e       	subi	r20, 0xE7	; 231
    7628:	5f 4f       	sbci	r21, 0xFF	; 255
    762a:	6f 89       	ldd	r22, Y+23	; 0x17
    762c:	78 8d       	ldd	r23, Y+24	; 0x18
    762e:	ce 01       	movw	r24, r28
    7630:	01 96       	adiw	r24, 0x01	; 1
    7632:	0e 94 48 37 	call	0x6e90	; 0x6e90 <vfprintf>
    7636:	2f 81       	ldd	r18, Y+7	; 0x07
    7638:	38 85       	ldd	r19, Y+8	; 0x08
    763a:	f8 01       	movw	r30, r16
    763c:	e2 0f       	add	r30, r18
    763e:	f3 1f       	adc	r31, r19
    7640:	10 82       	st	Z, r1
    7642:	2e 96       	adiw	r28, 0x0e	; 14
    7644:	0f b6       	in	r0, 0x3f	; 63
    7646:	f8 94       	cli
    7648:	de bf       	out	0x3e, r29	; 62
    764a:	0f be       	out	0x3f, r0	; 63
    764c:	cd bf       	out	0x3d, r28	; 61
    764e:	df 91       	pop	r29
    7650:	cf 91       	pop	r28
    7652:	1f 91       	pop	r17
    7654:	0f 91       	pop	r16
    7656:	08 95       	ret

00007658 <__ultoa_invert>:
    7658:	fa 01       	movw	r30, r20
    765a:	aa 27       	eor	r26, r26
    765c:	28 30       	cpi	r18, 0x08	; 8
    765e:	51 f1       	breq	.+84     	; 0x76b4 <__ultoa_invert+0x5c>
    7660:	20 31       	cpi	r18, 0x10	; 16
    7662:	81 f1       	breq	.+96     	; 0x76c4 <__ultoa_invert+0x6c>
    7664:	e8 94       	clt
    7666:	6f 93       	push	r22
    7668:	6e 7f       	andi	r22, 0xFE	; 254
    766a:	6e 5f       	subi	r22, 0xFE	; 254
    766c:	7f 4f       	sbci	r23, 0xFF	; 255
    766e:	8f 4f       	sbci	r24, 0xFF	; 255
    7670:	9f 4f       	sbci	r25, 0xFF	; 255
    7672:	af 4f       	sbci	r26, 0xFF	; 255
    7674:	b1 e0       	ldi	r27, 0x01	; 1
    7676:	3e d0       	rcall	.+124    	; 0x76f4 <__ultoa_invert+0x9c>
    7678:	b4 e0       	ldi	r27, 0x04	; 4
    767a:	3c d0       	rcall	.+120    	; 0x76f4 <__ultoa_invert+0x9c>
    767c:	67 0f       	add	r22, r23
    767e:	78 1f       	adc	r23, r24
    7680:	89 1f       	adc	r24, r25
    7682:	9a 1f       	adc	r25, r26
    7684:	a1 1d       	adc	r26, r1
    7686:	68 0f       	add	r22, r24
    7688:	79 1f       	adc	r23, r25
    768a:	8a 1f       	adc	r24, r26
    768c:	91 1d       	adc	r25, r1
    768e:	a1 1d       	adc	r26, r1
    7690:	6a 0f       	add	r22, r26
    7692:	71 1d       	adc	r23, r1
    7694:	81 1d       	adc	r24, r1
    7696:	91 1d       	adc	r25, r1
    7698:	a1 1d       	adc	r26, r1
    769a:	20 d0       	rcall	.+64     	; 0x76dc <__ultoa_invert+0x84>
    769c:	09 f4       	brne	.+2      	; 0x76a0 <__ultoa_invert+0x48>
    769e:	68 94       	set
    76a0:	3f 91       	pop	r19
    76a2:	2a e0       	ldi	r18, 0x0A	; 10
    76a4:	26 9f       	mul	r18, r22
    76a6:	11 24       	eor	r1, r1
    76a8:	30 19       	sub	r19, r0
    76aa:	30 5d       	subi	r19, 0xD0	; 208
    76ac:	31 93       	st	Z+, r19
    76ae:	de f6       	brtc	.-74     	; 0x7666 <__ultoa_invert+0xe>
    76b0:	cf 01       	movw	r24, r30
    76b2:	08 95       	ret
    76b4:	46 2f       	mov	r20, r22
    76b6:	47 70       	andi	r20, 0x07	; 7
    76b8:	40 5d       	subi	r20, 0xD0	; 208
    76ba:	41 93       	st	Z+, r20
    76bc:	b3 e0       	ldi	r27, 0x03	; 3
    76be:	0f d0       	rcall	.+30     	; 0x76de <__ultoa_invert+0x86>
    76c0:	c9 f7       	brne	.-14     	; 0x76b4 <__ultoa_invert+0x5c>
    76c2:	f6 cf       	rjmp	.-20     	; 0x76b0 <__ultoa_invert+0x58>
    76c4:	46 2f       	mov	r20, r22
    76c6:	4f 70       	andi	r20, 0x0F	; 15
    76c8:	40 5d       	subi	r20, 0xD0	; 208
    76ca:	4a 33       	cpi	r20, 0x3A	; 58
    76cc:	18 f0       	brcs	.+6      	; 0x76d4 <__ultoa_invert+0x7c>
    76ce:	49 5d       	subi	r20, 0xD9	; 217
    76d0:	31 fd       	sbrc	r19, 1
    76d2:	40 52       	subi	r20, 0x20	; 32
    76d4:	41 93       	st	Z+, r20
    76d6:	02 d0       	rcall	.+4      	; 0x76dc <__ultoa_invert+0x84>
    76d8:	a9 f7       	brne	.-22     	; 0x76c4 <__ultoa_invert+0x6c>
    76da:	ea cf       	rjmp	.-44     	; 0x76b0 <__ultoa_invert+0x58>
    76dc:	b4 e0       	ldi	r27, 0x04	; 4
    76de:	a6 95       	lsr	r26
    76e0:	97 95       	ror	r25
    76e2:	87 95       	ror	r24
    76e4:	77 95       	ror	r23
    76e6:	67 95       	ror	r22
    76e8:	ba 95       	dec	r27
    76ea:	c9 f7       	brne	.-14     	; 0x76de <__ultoa_invert+0x86>
    76ec:	00 97       	sbiw	r24, 0x00	; 0
    76ee:	61 05       	cpc	r22, r1
    76f0:	71 05       	cpc	r23, r1
    76f2:	08 95       	ret
    76f4:	9b 01       	movw	r18, r22
    76f6:	ac 01       	movw	r20, r24
    76f8:	0a 2e       	mov	r0, r26
    76fa:	06 94       	lsr	r0
    76fc:	57 95       	ror	r21
    76fe:	47 95       	ror	r20
    7700:	37 95       	ror	r19
    7702:	27 95       	ror	r18
    7704:	ba 95       	dec	r27
    7706:	c9 f7       	brne	.-14     	; 0x76fa <__ultoa_invert+0xa2>
    7708:	62 0f       	add	r22, r18
    770a:	73 1f       	adc	r23, r19
    770c:	84 1f       	adc	r24, r20
    770e:	95 1f       	adc	r25, r21
    7710:	a0 1d       	adc	r26, r0
    7712:	08 95       	ret

00007714 <__eerd_byte_m128rfa1>:
    7714:	f9 99       	sbic	0x1f, 1	; 31
    7716:	fe cf       	rjmp	.-4      	; 0x7714 <__eerd_byte_m128rfa1>
    7718:	92 bd       	out	0x22, r25	; 34
    771a:	81 bd       	out	0x21, r24	; 33
    771c:	f8 9a       	sbi	0x1f, 0	; 31
    771e:	99 27       	eor	r25, r25
    7720:	80 b5       	in	r24, 0x20	; 32
    7722:	08 95       	ret

00007724 <__eewr_byte_m128rfa1>:
    7724:	26 2f       	mov	r18, r22

00007726 <__eewr_r18_m128rfa1>:
    7726:	f9 99       	sbic	0x1f, 1	; 31
    7728:	fe cf       	rjmp	.-4      	; 0x7726 <__eewr_r18_m128rfa1>
    772a:	1f ba       	out	0x1f, r1	; 31
    772c:	92 bd       	out	0x22, r25	; 34
    772e:	81 bd       	out	0x21, r24	; 33
    7730:	20 bd       	out	0x20, r18	; 32
    7732:	0f b6       	in	r0, 0x3f	; 63
    7734:	f8 94       	cli
    7736:	fa 9a       	sbi	0x1f, 2	; 31
    7738:	f9 9a       	sbi	0x1f, 1	; 31
    773a:	0f be       	out	0x3f, r0	; 63
    773c:	01 96       	adiw	r24, 0x01	; 1
    773e:	08 95       	ret

00007740 <calloc>:
    7740:	0f 93       	push	r16
    7742:	1f 93       	push	r17
    7744:	cf 93       	push	r28
    7746:	df 93       	push	r29
    7748:	86 9f       	mul	r24, r22
    774a:	80 01       	movw	r16, r0
    774c:	87 9f       	mul	r24, r23
    774e:	10 0d       	add	r17, r0
    7750:	96 9f       	mul	r25, r22
    7752:	10 0d       	add	r17, r0
    7754:	11 24       	eor	r1, r1
    7756:	c8 01       	movw	r24, r16
    7758:	0e 94 bc 3b 	call	0x7778	; 0x7778 <malloc>
    775c:	ec 01       	movw	r28, r24
    775e:	00 97       	sbiw	r24, 0x00	; 0
    7760:	29 f0       	breq	.+10     	; 0x776c <calloc+0x2c>
    7762:	a8 01       	movw	r20, r16
    7764:	60 e0       	ldi	r22, 0x00	; 0
    7766:	70 e0       	ldi	r23, 0x00	; 0
    7768:	0e 94 e9 3c 	call	0x79d2	; 0x79d2 <memset>
    776c:	ce 01       	movw	r24, r28
    776e:	df 91       	pop	r29
    7770:	cf 91       	pop	r28
    7772:	1f 91       	pop	r17
    7774:	0f 91       	pop	r16
    7776:	08 95       	ret

00007778 <malloc>:
    7778:	cf 93       	push	r28
    777a:	df 93       	push	r29
    777c:	82 30       	cpi	r24, 0x02	; 2
    777e:	91 05       	cpc	r25, r1
    7780:	10 f4       	brcc	.+4      	; 0x7786 <malloc+0xe>
    7782:	82 e0       	ldi	r24, 0x02	; 2
    7784:	90 e0       	ldi	r25, 0x00	; 0
    7786:	e0 91 78 17 	lds	r30, 0x1778
    778a:	f0 91 79 17 	lds	r31, 0x1779
    778e:	20 e0       	ldi	r18, 0x00	; 0
    7790:	30 e0       	ldi	r19, 0x00	; 0
    7792:	c0 e0       	ldi	r28, 0x00	; 0
    7794:	d0 e0       	ldi	r29, 0x00	; 0
    7796:	30 97       	sbiw	r30, 0x00	; 0
    7798:	11 f1       	breq	.+68     	; 0x77de <malloc+0x66>
    779a:	40 81       	ld	r20, Z
    779c:	51 81       	ldd	r21, Z+1	; 0x01
    779e:	48 17       	cp	r20, r24
    77a0:	59 07       	cpc	r21, r25
    77a2:	c0 f0       	brcs	.+48     	; 0x77d4 <malloc+0x5c>
    77a4:	48 17       	cp	r20, r24
    77a6:	59 07       	cpc	r21, r25
    77a8:	61 f4       	brne	.+24     	; 0x77c2 <malloc+0x4a>
    77aa:	82 81       	ldd	r24, Z+2	; 0x02
    77ac:	93 81       	ldd	r25, Z+3	; 0x03
    77ae:	20 97       	sbiw	r28, 0x00	; 0
    77b0:	19 f0       	breq	.+6      	; 0x77b8 <malloc+0x40>
    77b2:	9b 83       	std	Y+3, r25	; 0x03
    77b4:	8a 83       	std	Y+2, r24	; 0x02
    77b6:	2b c0       	rjmp	.+86     	; 0x780e <malloc+0x96>
    77b8:	90 93 79 17 	sts	0x1779, r25
    77bc:	80 93 78 17 	sts	0x1778, r24
    77c0:	26 c0       	rjmp	.+76     	; 0x780e <malloc+0x96>
    77c2:	21 15       	cp	r18, r1
    77c4:	31 05       	cpc	r19, r1
    77c6:	19 f0       	breq	.+6      	; 0x77ce <malloc+0x56>
    77c8:	42 17       	cp	r20, r18
    77ca:	53 07       	cpc	r21, r19
    77cc:	18 f4       	brcc	.+6      	; 0x77d4 <malloc+0x5c>
    77ce:	9a 01       	movw	r18, r20
    77d0:	be 01       	movw	r22, r28
    77d2:	df 01       	movw	r26, r30
    77d4:	ef 01       	movw	r28, r30
    77d6:	02 80       	ldd	r0, Z+2	; 0x02
    77d8:	f3 81       	ldd	r31, Z+3	; 0x03
    77da:	e0 2d       	mov	r30, r0
    77dc:	dc cf       	rjmp	.-72     	; 0x7796 <malloc+0x1e>
    77de:	21 15       	cp	r18, r1
    77e0:	31 05       	cpc	r19, r1
    77e2:	09 f1       	breq	.+66     	; 0x7826 <malloc+0xae>
    77e4:	28 1b       	sub	r18, r24
    77e6:	39 0b       	sbc	r19, r25
    77e8:	24 30       	cpi	r18, 0x04	; 4
    77ea:	31 05       	cpc	r19, r1
    77ec:	90 f4       	brcc	.+36     	; 0x7812 <malloc+0x9a>
    77ee:	12 96       	adiw	r26, 0x02	; 2
    77f0:	8d 91       	ld	r24, X+
    77f2:	9c 91       	ld	r25, X
    77f4:	13 97       	sbiw	r26, 0x03	; 3
    77f6:	61 15       	cp	r22, r1
    77f8:	71 05       	cpc	r23, r1
    77fa:	21 f0       	breq	.+8      	; 0x7804 <malloc+0x8c>
    77fc:	fb 01       	movw	r30, r22
    77fe:	93 83       	std	Z+3, r25	; 0x03
    7800:	82 83       	std	Z+2, r24	; 0x02
    7802:	04 c0       	rjmp	.+8      	; 0x780c <malloc+0x94>
    7804:	90 93 79 17 	sts	0x1779, r25
    7808:	80 93 78 17 	sts	0x1778, r24
    780c:	fd 01       	movw	r30, r26
    780e:	32 96       	adiw	r30, 0x02	; 2
    7810:	44 c0       	rjmp	.+136    	; 0x789a <malloc+0x122>
    7812:	fd 01       	movw	r30, r26
    7814:	e2 0f       	add	r30, r18
    7816:	f3 1f       	adc	r31, r19
    7818:	81 93       	st	Z+, r24
    781a:	91 93       	st	Z+, r25
    781c:	22 50       	subi	r18, 0x02	; 2
    781e:	31 09       	sbc	r19, r1
    7820:	2d 93       	st	X+, r18
    7822:	3c 93       	st	X, r19
    7824:	3a c0       	rjmp	.+116    	; 0x789a <malloc+0x122>
    7826:	20 91 76 17 	lds	r18, 0x1776
    782a:	30 91 77 17 	lds	r19, 0x1777
    782e:	23 2b       	or	r18, r19
    7830:	41 f4       	brne	.+16     	; 0x7842 <malloc+0xca>
    7832:	20 91 07 02 	lds	r18, 0x0207
    7836:	30 91 08 02 	lds	r19, 0x0208
    783a:	30 93 77 17 	sts	0x1777, r19
    783e:	20 93 76 17 	sts	0x1776, r18
    7842:	20 91 05 02 	lds	r18, 0x0205
    7846:	30 91 06 02 	lds	r19, 0x0206
    784a:	21 15       	cp	r18, r1
    784c:	31 05       	cpc	r19, r1
    784e:	41 f4       	brne	.+16     	; 0x7860 <malloc+0xe8>
    7850:	2d b7       	in	r18, 0x3d	; 61
    7852:	3e b7       	in	r19, 0x3e	; 62
    7854:	40 91 09 02 	lds	r20, 0x0209
    7858:	50 91 0a 02 	lds	r21, 0x020A
    785c:	24 1b       	sub	r18, r20
    785e:	35 0b       	sbc	r19, r21
    7860:	e0 91 76 17 	lds	r30, 0x1776
    7864:	f0 91 77 17 	lds	r31, 0x1777
    7868:	e2 17       	cp	r30, r18
    786a:	f3 07       	cpc	r31, r19
    786c:	a0 f4       	brcc	.+40     	; 0x7896 <malloc+0x11e>
    786e:	2e 1b       	sub	r18, r30
    7870:	3f 0b       	sbc	r19, r31
    7872:	28 17       	cp	r18, r24
    7874:	39 07       	cpc	r19, r25
    7876:	78 f0       	brcs	.+30     	; 0x7896 <malloc+0x11e>
    7878:	ac 01       	movw	r20, r24
    787a:	4e 5f       	subi	r20, 0xFE	; 254
    787c:	5f 4f       	sbci	r21, 0xFF	; 255
    787e:	24 17       	cp	r18, r20
    7880:	35 07       	cpc	r19, r21
    7882:	48 f0       	brcs	.+18     	; 0x7896 <malloc+0x11e>
    7884:	4e 0f       	add	r20, r30
    7886:	5f 1f       	adc	r21, r31
    7888:	50 93 77 17 	sts	0x1777, r21
    788c:	40 93 76 17 	sts	0x1776, r20
    7890:	81 93       	st	Z+, r24
    7892:	91 93       	st	Z+, r25
    7894:	02 c0       	rjmp	.+4      	; 0x789a <malloc+0x122>
    7896:	e0 e0       	ldi	r30, 0x00	; 0
    7898:	f0 e0       	ldi	r31, 0x00	; 0
    789a:	cf 01       	movw	r24, r30
    789c:	df 91       	pop	r29
    789e:	cf 91       	pop	r28
    78a0:	08 95       	ret

000078a2 <free>:
    78a2:	0f 93       	push	r16
    78a4:	1f 93       	push	r17
    78a6:	cf 93       	push	r28
    78a8:	df 93       	push	r29
    78aa:	00 97       	sbiw	r24, 0x00	; 0
    78ac:	09 f4       	brne	.+2      	; 0x78b0 <free+0xe>
    78ae:	8c c0       	rjmp	.+280    	; 0x79c8 <free+0x126>
    78b0:	fc 01       	movw	r30, r24
    78b2:	32 97       	sbiw	r30, 0x02	; 2
    78b4:	13 82       	std	Z+3, r1	; 0x03
    78b6:	12 82       	std	Z+2, r1	; 0x02
    78b8:	00 91 78 17 	lds	r16, 0x1778
    78bc:	10 91 79 17 	lds	r17, 0x1779
    78c0:	01 15       	cp	r16, r1
    78c2:	11 05       	cpc	r17, r1
    78c4:	81 f4       	brne	.+32     	; 0x78e6 <free+0x44>
    78c6:	20 81       	ld	r18, Z
    78c8:	31 81       	ldd	r19, Z+1	; 0x01
    78ca:	82 0f       	add	r24, r18
    78cc:	93 1f       	adc	r25, r19
    78ce:	20 91 76 17 	lds	r18, 0x1776
    78d2:	30 91 77 17 	lds	r19, 0x1777
    78d6:	28 17       	cp	r18, r24
    78d8:	39 07       	cpc	r19, r25
    78da:	79 f5       	brne	.+94     	; 0x793a <free+0x98>
    78dc:	f0 93 77 17 	sts	0x1777, r31
    78e0:	e0 93 76 17 	sts	0x1776, r30
    78e4:	71 c0       	rjmp	.+226    	; 0x79c8 <free+0x126>
    78e6:	d8 01       	movw	r26, r16
    78e8:	40 e0       	ldi	r20, 0x00	; 0
    78ea:	50 e0       	ldi	r21, 0x00	; 0
    78ec:	ae 17       	cp	r26, r30
    78ee:	bf 07       	cpc	r27, r31
    78f0:	50 f4       	brcc	.+20     	; 0x7906 <free+0x64>
    78f2:	12 96       	adiw	r26, 0x02	; 2
    78f4:	2d 91       	ld	r18, X+
    78f6:	3c 91       	ld	r19, X
    78f8:	13 97       	sbiw	r26, 0x03	; 3
    78fa:	ad 01       	movw	r20, r26
    78fc:	21 15       	cp	r18, r1
    78fe:	31 05       	cpc	r19, r1
    7900:	09 f1       	breq	.+66     	; 0x7944 <free+0xa2>
    7902:	d9 01       	movw	r26, r18
    7904:	f3 cf       	rjmp	.-26     	; 0x78ec <free+0x4a>
    7906:	9d 01       	movw	r18, r26
    7908:	da 01       	movw	r26, r20
    790a:	33 83       	std	Z+3, r19	; 0x03
    790c:	22 83       	std	Z+2, r18	; 0x02
    790e:	60 81       	ld	r22, Z
    7910:	71 81       	ldd	r23, Z+1	; 0x01
    7912:	86 0f       	add	r24, r22
    7914:	97 1f       	adc	r25, r23
    7916:	82 17       	cp	r24, r18
    7918:	93 07       	cpc	r25, r19
    791a:	69 f4       	brne	.+26     	; 0x7936 <free+0x94>
    791c:	ec 01       	movw	r28, r24
    791e:	28 81       	ld	r18, Y
    7920:	39 81       	ldd	r19, Y+1	; 0x01
    7922:	26 0f       	add	r18, r22
    7924:	37 1f       	adc	r19, r23
    7926:	2e 5f       	subi	r18, 0xFE	; 254
    7928:	3f 4f       	sbci	r19, 0xFF	; 255
    792a:	31 83       	std	Z+1, r19	; 0x01
    792c:	20 83       	st	Z, r18
    792e:	8a 81       	ldd	r24, Y+2	; 0x02
    7930:	9b 81       	ldd	r25, Y+3	; 0x03
    7932:	93 83       	std	Z+3, r25	; 0x03
    7934:	82 83       	std	Z+2, r24	; 0x02
    7936:	45 2b       	or	r20, r21
    7938:	29 f4       	brne	.+10     	; 0x7944 <free+0xa2>
    793a:	f0 93 79 17 	sts	0x1779, r31
    793e:	e0 93 78 17 	sts	0x1778, r30
    7942:	42 c0       	rjmp	.+132    	; 0x79c8 <free+0x126>
    7944:	13 96       	adiw	r26, 0x03	; 3
    7946:	fc 93       	st	X, r31
    7948:	ee 93       	st	-X, r30
    794a:	12 97       	sbiw	r26, 0x02	; 2
    794c:	ed 01       	movw	r28, r26
    794e:	49 91       	ld	r20, Y+
    7950:	59 91       	ld	r21, Y+
    7952:	9e 01       	movw	r18, r28
    7954:	24 0f       	add	r18, r20
    7956:	35 1f       	adc	r19, r21
    7958:	e2 17       	cp	r30, r18
    795a:	f3 07       	cpc	r31, r19
    795c:	71 f4       	brne	.+28     	; 0x797a <free+0xd8>
    795e:	80 81       	ld	r24, Z
    7960:	91 81       	ldd	r25, Z+1	; 0x01
    7962:	84 0f       	add	r24, r20
    7964:	95 1f       	adc	r25, r21
    7966:	02 96       	adiw	r24, 0x02	; 2
    7968:	11 96       	adiw	r26, 0x01	; 1
    796a:	9c 93       	st	X, r25
    796c:	8e 93       	st	-X, r24
    796e:	82 81       	ldd	r24, Z+2	; 0x02
    7970:	93 81       	ldd	r25, Z+3	; 0x03
    7972:	13 96       	adiw	r26, 0x03	; 3
    7974:	9c 93       	st	X, r25
    7976:	8e 93       	st	-X, r24
    7978:	12 97       	sbiw	r26, 0x02	; 2
    797a:	e0 e0       	ldi	r30, 0x00	; 0
    797c:	f0 e0       	ldi	r31, 0x00	; 0
    797e:	d8 01       	movw	r26, r16
    7980:	12 96       	adiw	r26, 0x02	; 2
    7982:	8d 91       	ld	r24, X+
    7984:	9c 91       	ld	r25, X
    7986:	13 97       	sbiw	r26, 0x03	; 3
    7988:	00 97       	sbiw	r24, 0x00	; 0
    798a:	19 f0       	breq	.+6      	; 0x7992 <free+0xf0>
    798c:	f8 01       	movw	r30, r16
    798e:	8c 01       	movw	r16, r24
    7990:	f6 cf       	rjmp	.-20     	; 0x797e <free+0xdc>
    7992:	8d 91       	ld	r24, X+
    7994:	9c 91       	ld	r25, X
    7996:	98 01       	movw	r18, r16
    7998:	2e 5f       	subi	r18, 0xFE	; 254
    799a:	3f 4f       	sbci	r19, 0xFF	; 255
    799c:	82 0f       	add	r24, r18
    799e:	93 1f       	adc	r25, r19
    79a0:	20 91 76 17 	lds	r18, 0x1776
    79a4:	30 91 77 17 	lds	r19, 0x1777
    79a8:	28 17       	cp	r18, r24
    79aa:	39 07       	cpc	r19, r25
    79ac:	69 f4       	brne	.+26     	; 0x79c8 <free+0x126>
    79ae:	30 97       	sbiw	r30, 0x00	; 0
    79b0:	29 f4       	brne	.+10     	; 0x79bc <free+0x11a>
    79b2:	10 92 79 17 	sts	0x1779, r1
    79b6:	10 92 78 17 	sts	0x1778, r1
    79ba:	02 c0       	rjmp	.+4      	; 0x79c0 <free+0x11e>
    79bc:	13 82       	std	Z+3, r1	; 0x03
    79be:	12 82       	std	Z+2, r1	; 0x02
    79c0:	10 93 77 17 	sts	0x1777, r17
    79c4:	00 93 76 17 	sts	0x1776, r16
    79c8:	df 91       	pop	r29
    79ca:	cf 91       	pop	r28
    79cc:	1f 91       	pop	r17
    79ce:	0f 91       	pop	r16
    79d0:	08 95       	ret

000079d2 <memset>:
    79d2:	dc 01       	movw	r26, r24
    79d4:	01 c0       	rjmp	.+2      	; 0x79d8 <memset+0x6>
    79d6:	6d 93       	st	X+, r22
    79d8:	41 50       	subi	r20, 0x01	; 1
    79da:	50 40       	sbci	r21, 0x00	; 0
    79dc:	e0 f7       	brcc	.-8      	; 0x79d6 <memset+0x4>
    79de:	08 95       	ret

000079e0 <_exit>:
    79e0:	f8 94       	cli

000079e2 <__stop_program>:
    79e2:	ff cf       	rjmp	.-2      	; 0x79e2 <__stop_program>
