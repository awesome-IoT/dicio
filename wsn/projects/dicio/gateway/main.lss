
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800200  00006ab8  00006b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000013dd  00800434  00800434  00006d80  2**0
                  ALLOC
  3 .stab         00015540  00000000  00000000  00006d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a10a  00000000  00000000  0001c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000263ca  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  000263db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0002753b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000285ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  000285ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__ctors_end>
       4:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <__vector_1>
       8:	0c 94 d1 2d 	jmp	0x5ba2	; 0x5ba2 <__vector_2>
       c:	0c 94 03 2e 	jmp	0x5c06	; 0x5c06 <__vector_3>
      10:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      14:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      18:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      1c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      20:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      24:	0c 94 6d 2d 	jmp	0x5ada	; 0x5ada <__vector_9>
      28:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      2c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      30:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      34:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__vector_13>
      38:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      3c:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__vector_13>
      40:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      44:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      48:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      4c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      50:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      54:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      58:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      5c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      60:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      64:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__vector_25>
      68:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      6c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      70:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      74:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      78:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      7c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      80:	0c 94 ff 2b 	jmp	0x57fe	; 0x57fe <__vector_32>
      84:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      88:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      8c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      90:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      94:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      98:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      9c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      a0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      a4:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      a8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      ac:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      b0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      b4:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      b8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      bc:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      c0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      c4:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      c8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      cc:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      d0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      d4:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      d8:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      dc:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      e0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
      e4:	0c 94 9d 13 	jmp	0x273a	; 0x273a <__vector_57>
      e8:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__vector_58>
      ec:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__vector_59>
      f0:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__vector_60>
      f4:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__vector_61>
      f8:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__vector_62>
      fc:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__vector_63>
     100:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__vector_64>
     104:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
     108:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
     10c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
     110:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
     114:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
     118:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
     11c:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__bad_interrupt>
     120:	6a 16       	cp	r6, r26
     122:	77 16       	cp	r7, r23
     124:	84 16       	cp	r8, r20
     126:	91 16       	cp	r9, r17
     128:	9e 16       	cp	r9, r30
     12a:	ab 16       	cp	r10, r27
     12c:	b8 16       	cp	r11, r24
     12e:	db 16       	cp	r13, r27
     130:	e9 16       	cp	r14, r25
     132:	f7 16       	cp	r15, r23
     134:	05 17       	cp	r16, r21
     136:	13 17       	cp	r17, r19
     138:	21 17       	cp	r18, r17
     13a:	21 17       	cp	r18, r17
     13c:	44 17       	cp	r20, r20
     13e:	46 17       	cp	r20, r22
     140:	48 17       	cp	r20, r24
     142:	4a 17       	cp	r20, r26
     144:	4c 17       	cp	r20, r28
     146:	4e 17       	cp	r20, r30
     148:	50 17       	cp	r21, r16
     14a:	6f 17       	cp	r22, r31
     14c:	92 17       	cp	r25, r18
     14e:	b6 17       	cp	r27, r22
     150:	d9 17       	cp	r29, r25
     152:	fc 17       	cp	r31, r28
     154:	1f 18       	sub	r1, r15
     156:	42 18       	sub	r4, r2
     158:	7c 18       	sub	r7, r12
     15a:	89 18       	sub	r8, r9
     15c:	96 18       	sub	r9, r6
     15e:	a3 18       	sub	r10, r3
     160:	b0 18       	sub	r11, r0
     162:	bd 18       	sub	r11, r13
     164:	ca 18       	sub	r12, r10
     166:	e3 18       	sub	r14, r3
     168:	f0 18       	sub	r15, r0
     16a:	fd 18       	sub	r15, r13
     16c:	0a 19       	sub	r16, r10
     16e:	17 19       	sub	r17, r7
     170:	24 19       	sub	r18, r4
     172:	31 19       	sub	r19, r1
     174:	ab 1c       	adc	r10, r11
     176:	b1 1c       	adc	r11, r1
     178:	b4 1c       	adc	r11, r4
     17a:	b7 1c       	adc	r11, r7
     17c:	ba 1c       	adc	r11, r10
     17e:	bd 1c       	adc	r11, r13
     180:	c3 1c       	adc	r12, r3
     182:	c0 1c       	adc	r12, r0
     184:	c6 1c       	adc	r12, r6
     186:	c9 1c       	adc	r12, r9
     188:	cc 1c       	adc	r12, r12
     18a:	d5 1c       	adc	r13, r5
     18c:	d8 1c       	adc	r13, r8
     18e:	db 1c       	adc	r13, r11
     190:	de 1c       	adc	r13, r14
     192:	d2 1c       	adc	r13, r2
     194:	a8 1c       	adc	r10, r8
     196:	ae 1c       	adc	r10, r14
     198:	e1 1c       	adc	r14, r1
     19a:	e4 1c       	adc	r14, r4
     19c:	cf 1c       	adc	r12, r15
     19e:	a5 1c       	adc	r10, r5
     1a0:	7b 1d       	adc	r23, r11
     1a2:	7e 1d       	adc	r23, r14
     1a4:	89 1d       	adc	r24, r9
     1a6:	8e 1d       	adc	r24, r14
     1a8:	95 1d       	adc	r25, r5
     1aa:	9e 1d       	adc	r25, r14
     1ac:	a1 1d       	adc	r26, r1
     1ae:	a6 1d       	adc	r26, r6
     1b0:	ad 1d       	adc	r26, r13
     1b2:	b6 1d       	adc	r27, r6

000001b4 <__trampolines_end>:
     1b4:	43 72       	andi	r20, 0x23	; 35
     1b6:	65 61       	ori	r22, 0x15	; 21
     1b8:	74 65       	ori	r23, 0x54	; 84
     1ba:	20 64       	ori	r18, 0x40	; 64
     1bc:	6f 6e       	ori	r22, 0xEF	; 239
     1be:	65 2e       	mov	r6, r21
     1c0:	0d 0a       	sbc	r0, r29
	...

000001c3 <__c.3911>:
     1c3:	53 45 52 56 20 4c 45 44 20 4f 46 46 0d 0a 00        SERV LED OFF...

000001d2 <__c.3909>:
     1d2:	53 45 52 56 20 4c 45 44 20 4f 4e 0d 0a 00           SERV LED ON...

000001e0 <__c.3898>:
     1e0:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     1f0:	72 72 6f 72 0d 0a 00                                rror...

000001f7 <__c.3880>:
     1f7:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     207:	72 72 6f 72 0d 0a 00                                rror...

0000020e <__c.3878>:
     20e:	61 73 6d 20 70 6b 74 3a 0d 0a 00                    asm pkt:...

00000219 <__c.3841>:
     219:	72 78 3a 0d 0a 00                                   rx:...

0000021f <__c.3839>:
     21f:	70 6b 74 20 72 65 61 64 79 3a 0d 0a 00              pkt ready:...

0000022c <__c.3809>:
     22c:	0a 00                                               ..

0000022e <__c.3762>:
     22e:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     23e:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

0000024a <__c.3736>:
     24a:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     25a:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     26a:	0d 0a 00                                            ...

0000026d <__c.3734>:
     26d:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     27d:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     28d:	74 0d 0a 00                                         t...

00000291 <__c.3718>:
     291:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2a1:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     2b1:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000002bd <__c.3716>:
     2bd:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2cd:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     2dd:	61 69 6c 65 64 0d 0a 00                             ailed...

000002e5 <__c.3714>:
     2e5:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2f5:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     305:	61 69 6c 65 64 0d 0a 00                             ailed...

0000030d <__c.3723>:
     30d:	0d 0a 43 75 72 72 65 6e 74 20 4c 69 67 68 74 20     ..Current Light 
     31d:	56 61 6c 75 65 73 3a 0d 0a 00                       Values:...

00000327 <__c.3769>:
     327:	0d 0a 4e 65 69 67 68 62 6f 72 20 47 72 61 70 68     ..Neighbor Graph
     337:	3a 0d 0a 00                                         :...

0000033b <__c.3125>:
     33b:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     34b:	65 64 0d 0a 00                                      ed...

00000350 <__c.3381>:
     350:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000357 <__c.3378>:
     357:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000366 <__c.3375>:
     366:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000377 <__c.3372>:
     377:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     387:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000392 <__c.3369>:
     392:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     3a2:	20 53 69 67 6e 61 6c 00                              Signal.

000003aa <__c.3366>:
     3aa:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     3ba:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000003ca <__c.3363>:
     3ca:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     3da:	72 6f 72 00                                         ror.

000003de <__c.3360>:
     3de:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000003ef <__c.3357>:
     3ef:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     3ff:	61 72 74 00                                         art.

00000403 <__c.3354>:
     403:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000412 <__c.3351>:
     412:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     422:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000042d <__c.3348>:
     42d:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000439 <__c.3345>:
     439:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     449:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     459:	20 6f 6b 3f 00                                       ok?.

0000045e <__c.3342>:
     45e:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     46e:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000047c <__c.3339>:
     47c:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     48c:	72 74 00                                            rt.

0000048f <__c.3336>:
     48f:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     49f:	49 44 00                                            ID.

000004a2 <__c.3333>:
     4a2:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     4b2:	20 57 61 6b 65 75 70 00                              Wakeup.

000004ba <__c.3330>:
     4ba:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     4ca:	6c 61 74 65 64 00                                   lated.

000004d0 <__c.3327>:
     4d0:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     4e0:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000004eb <__c.3324>:
     4eb:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     4fb:	69 6e 74 65 72 00                                   inter.

00000501 <__c.3321>:
     501:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     511:	6c 6f 77 00                                         low.

00000515 <__c.3318>:
     515:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     525:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     535:	6e 6f 75 67 68 21 00                                nough!.

0000053c <__c.3314>:
     53c:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     54c:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     55c:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     56c:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000578 <__c.3311>:
     578:	29 3a 20 00                                         ): .

0000057c <__c.3309>:
     57c:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000588 <__c.3246>:
     588:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000597 <__c.2228>:
     597:	45 46 47 65 66 67 00                                EFGefg.

0000059e <__c.2222>:
     59e:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000005ae <__ctors_end>:
     5ae:	11 24       	eor	r1, r1
     5b0:	1f be       	out	0x3f, r1	; 63
     5b2:	cf ef       	ldi	r28, 0xFF	; 255
     5b4:	d1 e4       	ldi	r29, 0x41	; 65
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	cd bf       	out	0x3d, r28	; 61

000005ba <__do_copy_data>:
     5ba:	14 e0       	ldi	r17, 0x04	; 4
     5bc:	a0 e0       	ldi	r26, 0x00	; 0
     5be:	b2 e0       	ldi	r27, 0x02	; 2
     5c0:	e8 eb       	ldi	r30, 0xB8	; 184
     5c2:	fa e6       	ldi	r31, 0x6A	; 106
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	0b bf       	out	0x3b, r16	; 59
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <__do_copy_data+0x14>
     5ca:	07 90       	elpm	r0, Z+
     5cc:	0d 92       	st	X+, r0
     5ce:	a4 33       	cpi	r26, 0x34	; 52
     5d0:	b1 07       	cpc	r27, r17
     5d2:	d9 f7       	brne	.-10     	; 0x5ca <__do_copy_data+0x10>

000005d4 <__do_clear_bss>:
     5d4:	18 e1       	ldi	r17, 0x18	; 24
     5d6:	a4 e3       	ldi	r26, 0x34	; 52
     5d8:	b4 e0       	ldi	r27, 0x04	; 4
     5da:	01 c0       	rjmp	.+2      	; 0x5de <.do_clear_bss_start>

000005dc <.do_clear_bss_loop>:
     5dc:	1d 92       	st	X+, r1

000005de <.do_clear_bss_start>:
     5de:	a1 31       	cpi	r26, 0x11	; 17
     5e0:	b1 07       	cpc	r27, r17
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <.do_clear_bss_loop>
     5e4:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <main>
     5e8:	0c 94 5a 35 	jmp	0x6ab4	; 0x6ab4 <_exit>

000005ec <__bad_interrupt>:
     5ec:	0c 94 c2 2b 	jmp	0x5784	; 0x5784 <__vector_default>

000005f0 <rx_node_task>:

/**
 * rx_node_task() - 
 *  receive messages from the network
 */
void rx_node_task() {
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	63 97       	sbiw	r28, 0x13	; 19
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
  int8_t in_seq_pool;
  uint16_t local_seq_num;
  uint8_t new_node = NONE;

  // initialize network receive buffer
  bmac_rx_pkt_set_buffer(net_rx_buf, RF_MAX_PAYLOAD_SIZE);
     604:	64 e7       	ldi	r22, 0x74	; 116
     606:	8d e6       	ldi	r24, 0x6D	; 109
     608:	93 e1       	ldi	r25, 0x13	; 19
     60a:	0e 94 bd 07 	call	0xf7a	; 0xf7a <bmac_rx_pkt_set_buffer>
  
  // Wait until bmac has started. This should be called by all tasks using bmac that do not call bmac_init()
  while (!bmac_started ()){
     60e:	0e 94 1f 09 	call	0x123e	; 0x123e <bmac_started>
     612:	81 11       	cpse	r24, r1
     614:	03 c0       	rjmp	.+6      	; 0x61c <rx_node_task+0x2c>
    nrk_wait_until_next_period ();
     616:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
     61a:	f9 cf       	rjmp	.-14     	; 0x60e <rx_node_task+0x1e>
     61c:	10 e0       	ldi	r17, 0x00	; 0
  }
  
  // loop forever
  while(1) {
    // LED blinking - for debug
    if(blink_leds == BLINKLEDS) {
     61e:	80 91 79 11 	lds	r24, 0x1179
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	79 f4       	brne	.+30     	; 0x644 <rx_node_task+0x54>
      LED_FLAG++;
     626:	81 0f       	add	r24, r17
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     628:	18 2f       	mov	r17, r24
     62a:	11 70       	andi	r17, 0x01	; 1
     62c:	80 fd       	sbrc	r24, 0
     62e:	05 c0       	rjmp	.+10     	; 0x63a <rx_node_task+0x4a>
        nrk_led_set(0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 79 19 	call	0x32f2	; 0x32f2 <nrk_led_set>
     638:	05 c0       	rjmp	.+10     	; 0x644 <rx_node_task+0x54>
      } else {
        nrk_led_clr(0);
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
     642:	11 e0       	ldi	r17, 0x01	; 1
      }      
    }

    // only execute if there is a packet available
    if(bmac_rx_pkt_ready()) {
     644:	0e 94 c5 08 	call	0x118a	; 0x118a <bmac_rx_pkt_ready>
     648:	88 23       	and	r24, r24
     64a:	09 f4       	brne	.+2      	; 0x64e <rx_node_task+0x5e>
     64c:	71 c0       	rjmp	.+226    	; 0x730 <rx_node_task+0x140>
      nrk_kprintf (PSTR ("pkt ready:\r\n"));
     64e:	8f e1       	ldi	r24, 0x1F	; 31
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
      // get the packet, parse and release
      parse_msg(&rx_packet, &net_rx_buf, len);
     656:	4b 89       	ldd	r20, Y+19	; 0x13
     658:	6d e6       	ldi	r22, 0x6D	; 109
     65a:	73 e1       	ldi	r23, 0x13	; 19
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <parse_msg>
      local_buf = bmac_rx_pkt_get(&len, &rssi);
     664:	be 01       	movw	r22, r28
     666:	6e 5e       	subi	r22, 0xEE	; 238
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	ce 01       	movw	r24, r28
     66c:	43 96       	adiw	r24, 0x13	; 19
     66e:	0e 94 ad 08 	call	0x115a	; 0x115a <bmac_rx_pkt_get>
      
      // print incoming packet if appropriate
      if(print_incoming == 1) {
     672:	80 91 5c 0c 	lds	r24, 0x0C5C
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	41 f4       	brne	.+16     	; 0x68a <rx_node_task+0x9a>
        nrk_kprintf (PSTR ("rx:\r\n"));
     67a:	89 e1       	ldi	r24, 0x19	; 25
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
        print_packet(&rx_packet);     
     682:	ce 01       	movw	r24, r28
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <print_packet>
      }

       bmac_rx_pkt_release ();  
     68a:	0e 94 cb 08 	call	0x1196	; 0x1196 <bmac_rx_pkt_release>
      
      // only receive the message if it's not from the gateway
      //  NOTE: this is required because the gateway will hear re-transmitted packets 
      //    originally from itself.
      if(rx_packet.source_id != MAC_ADDR) {
     68e:	69 81       	ldd	r22, Y+1	; 0x01
     690:	61 30       	cpi	r22, 0x01	; 1
     692:	09 f4       	brne	.+2      	; 0x696 <rx_node_task+0xa6>
     694:	4d c0       	rjmp	.+154    	; 0x730 <rx_node_task+0x140>

        // check to see if this node is in the sequence pool, if not then add it
        in_seq_pool = in_sequence_pool(&seq_pool, rx_packet.source_id);
     696:	88 ed       	ldi	r24, 0xD8	; 216
     698:	92 e1       	ldi	r25, 0x12	; 18
     69a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <in_sequence_pool>
        if(in_seq_pool == -1) {
     69e:	8f 3f       	cpi	r24, 0xFF	; 255
     6a0:	49 f4       	brne	.+18     	; 0x6b4 <rx_node_task+0xc4>
          add_to_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     6a2:	4b 81       	ldd	r20, Y+3	; 0x03
     6a4:	5c 81       	ldd	r21, Y+4	; 0x04
     6a6:	69 81       	ldd	r22, Y+1	; 0x01
     6a8:	88 ed       	ldi	r24, 0xD8	; 216
     6aa:	92 e1       	ldi	r25, 0x12	; 18
     6ac:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <add_to_sequence_pool>
          new_node = NODE_FOUND;
     6b0:	01 e0       	ldi	r16, 0x01	; 1
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <rx_node_task+0xc6>
     6b4:	00 e0       	ldi	r16, 0x00	; 0
        }
      
        // determine if we should act on this packet based on the sequence number
        local_seq_num = get_sequence_number(&seq_pool, rx_packet.source_id);
     6b6:	69 81       	ldd	r22, Y+1	; 0x01
     6b8:	88 ed       	ldi	r24, 0xD8	; 216
     6ba:	92 e1       	ldi	r25, 0x12	; 18
     6bc:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <get_sequence_number>
        if((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND)) {
     6c0:	4b 81       	ldd	r20, Y+3	; 0x03
     6c2:	5c 81       	ldd	r21, Y+4	; 0x04
     6c4:	84 17       	cp	r24, r20
     6c6:	95 07       	cpc	r25, r21
     6c8:	10 f0       	brcs	.+4      	; 0x6ce <rx_node_task+0xde>
     6ca:	01 30       	cpi	r16, 0x01	; 1
     6cc:	89 f5       	brne	.+98     	; 0x730 <rx_node_task+0x140>
          
          // update the sequence pool and reset the new_node flag
          update_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     6ce:	69 81       	ldd	r22, Y+1	; 0x01
     6d0:	88 ed       	ldi	r24, 0xD8	; 216
     6d2:	92 e1       	ldi	r25, 0x12	; 18
     6d4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <update_sequence_pool>
          new_node = NONE;
          
          // put the message in the right queue based on the type
          switch(rx_packet.type) {
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	87 30       	cpi	r24, 0x07	; 7
     6dc:	21 f0       	breq	.+8      	; 0x6e6 <rx_node_task+0xf6>
     6de:	88 30       	cpi	r24, 0x08	; 8
     6e0:	a1 f0       	breq	.+40     	; 0x70a <rx_node_task+0x11a>
     6e2:	85 30       	cpi	r24, 0x05	; 5
     6e4:	29 f5       	brne	.+74     	; 0x730 <rx_node_task+0x140>
              nrk_sem_post(serv_tx_queue_mux);
              break;
            }
            case MSG_CMDACK:
            {
              nrk_sem_pend(serv_tx_queue_mux);
     6e6:	80 91 33 05 	lds	r24, 0x0533
     6ea:	90 91 34 05 	lds	r25, 0x0534
     6ee:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
              push(&serv_tx_queue, &rx_packet);
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	8b e4       	ldi	r24, 0x4B	; 75
     6fa:	92 e1       	ldi	r25, 0x12	; 18
     6fc:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <push>
              nrk_sem_post(serv_tx_queue_mux);
     700:	80 91 33 05 	lds	r24, 0x0533
     704:	90 91 34 05 	lds	r25, 0x0534
     708:	11 c0       	rjmp	.+34     	; 0x72c <rx_node_task+0x13c>
              break;
            }
            // handshake message recieved -> deal with in handshake function
            case MSG_HAND:
              nrk_sem_pend(hand_rx_queue_mux);
     70a:	80 91 02 0f 	lds	r24, 0x0F02
     70e:	90 91 03 0f 	lds	r25, 0x0F03
     712:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
              push(&hand_rx_queue, &rx_packet);
     716:	be 01       	movw	r22, r28
     718:	6f 5f       	subi	r22, 0xFF	; 255
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	8a e3       	ldi	r24, 0x3A	; 58
     71e:	99 e0       	ldi	r25, 0x09	; 9
     720:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <push>
              nrk_sem_post(hand_rx_queue_mux);
     724:	80 91 02 0f 	lds	r24, 0x0F02
     728:	90 91 03 0f 	lds	r25, 0x0F03
     72c:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>
              break;
          }
        }        
      }
    }
    nrk_wait_until_next_period();
     730:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
  }
     734:	74 cf       	rjmp	.-280    	; 0x61e <rx_node_task+0x2e>

00000736 <tx_cmd_task>:

/**
 * tx_cmd_task() -
 *  send all commands out to the network.
 */
void tx_cmd_task() {
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	61 97       	sbiw	r28, 0x11	; 17
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
  packet tx_packet;
  uint8_t tx_cmd_queue_size;

  // Wait until bmac has started. This should be called by all tasks 
  //  using bmac that do not call bmac_init().
  while(!bmac_started()) {
     74a:	0e 94 1f 09 	call	0x123e	; 0x123e <bmac_started>
     74e:	81 11       	cpse	r24, r1
     750:	03 c0       	rjmp	.+6      	; 0x758 <tx_cmd_task+0x22>
    nrk_wait_until_next_period();
     752:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
     756:	f9 cf       	rjmp	.-14     	; 0x74a <tx_cmd_task+0x14>
  }

  // Get and register the tx_done_signal to perform non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal();
     758:	0e 94 58 08 	call	0x10b0	; 0x10b0 <bmac_get_tx_done_signal>
     75c:	18 2f       	mov	r17, r24
  nrk_signal_register(tx_done_signal);
     75e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
       nrk_kprintf (PSTR ("asm pkt:\r\n"));
      }

      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, net_tx_index);
      ret = nrk_event_wait (SIG(tx_done_signal));
     762:	c1 2c       	mov	r12, r1
     764:	d1 2c       	mov	r13, r1
     766:	76 01       	movw	r14, r12
     768:	c3 94       	inc	r12
     76a:	04 c0       	rjmp	.+8      	; 0x774 <tx_cmd_task+0x3e>
     76c:	cc 0c       	add	r12, r12
     76e:	dd 1c       	adc	r13, r13
     770:	ee 1c       	adc	r14, r14
     772:	ff 1c       	adc	r15, r15
     774:	1a 95       	dec	r17
     776:	d2 f7       	brpl	.-12     	; 0x76c <tx_cmd_task+0x36>
      
      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     778:	81 2c       	mov	r8, r1
     77a:	91 2c       	mov	r9, r1
     77c:	54 01       	movw	r10, r8
     77e:	83 94       	inc	r8
     780:	c1 14       	cp	r12, r1
     782:	d1 04       	cpc	r13, r1
     784:	e1 04       	cpc	r14, r1
     786:	f1 04       	cpc	r15, r1
     788:	19 f0       	breq	.+6      	; 0x790 <tx_cmd_task+0x5a>
     78a:	81 2c       	mov	r8, r1
     78c:	91 2c       	mov	r9, r1
     78e:	54 01       	movw	r10, r8
 * tx_cmd_task() -
 *  send all commands out to the network.
 */
void tx_cmd_task() {
  // local variable instantiation
  uint8_t LED_FLAG = 0;
     790:	10 e0       	ldi	r17, 0x00	; 0
  nrk_signal_register(tx_done_signal);

  // loop forever
  while(1){
    // LED blinking - for debug
    if(blink_leds == BLINKLEDS) {
     792:	80 91 79 11 	lds	r24, 0x1179
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	79 f4       	brne	.+30     	; 0x7b8 <tx_cmd_task+0x82>
      LED_FLAG++;
     79a:	81 0f       	add	r24, r17
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     79c:	18 2f       	mov	r17, r24
     79e:	11 70       	andi	r17, 0x01	; 1
     7a0:	80 fd       	sbrc	r24, 0
     7a2:	05 c0       	rjmp	.+10     	; 0x7ae <tx_cmd_task+0x78>
        nrk_led_set(2);
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 79 19 	call	0x32f2	; 0x32f2 <nrk_led_set>
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <tx_cmd_task+0x82>
      } else {
        nrk_led_clr(2);
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
     7b6:	11 e0       	ldi	r17, 0x01	; 1
      }      
    }

    // atomically get the queue size
    nrk_sem_pend(cmd_tx_queue_mux);
     7b8:	80 91 38 09 	lds	r24, 0x0938
     7bc:	90 91 39 09 	lds	r25, 0x0939
     7c0:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      tx_cmd_queue_size = cmd_tx_queue.size;
     7c4:	70 90 6c 13 	lds	r7, 0x136C
    nrk_sem_post(cmd_tx_queue_mux);
     7c8:	80 91 38 09 	lds	r24, 0x0938
     7cc:	90 91 39 09 	lds	r25, 0x0939
     7d0:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_cmd_queue_size; i++) {
     7d4:	00 e0       	ldi	r16, 0x00	; 0
     7d6:	07 15       	cp	r16, r7
     7d8:	09 f4       	brne	.+2      	; 0x7dc <tx_cmd_task+0xa6>
     7da:	4a c0       	rjmp	.+148    	; 0x870 <tx_cmd_task+0x13a>
      // get a packet out of the queue.
      nrk_sem_pend(cmd_tx_queue_mux);
     7dc:	80 91 38 09 	lds	r24, 0x0938
     7e0:	90 91 39 09 	lds	r25, 0x0939
     7e4:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      pop(&cmd_tx_queue, &tx_packet);
     7e8:	be 01       	movw	r22, r28
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	82 ee       	ldi	r24, 0xE2	; 226
     7f0:	92 e1       	ldi	r25, 0x12	; 18
     7f2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <pop>
      nrk_sem_post(cmd_tx_queue_mux);
     7f6:	80 91 38 09 	lds	r24, 0x0938
     7fa:	90 91 39 09 	lds	r25, 0x0939
     7fe:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>

      // NOTE: a mutex is required around the network transmit buffer because 
      //  tx_cmd_task() also uses it.
      nrk_sem_pend(net_tx_buf_mux);
     802:	80 91 ef 15 	lds	r24, 0x15EF
     806:	90 91 f0 15 	lds	r25, 0x15F0
     80a:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      net_tx_index = assemble_packet(&net_tx_buf, &tx_packet);
     80e:	be 01       	movw	r22, r28
     810:	6f 5f       	subi	r22, 0xFF	; 255
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	88 ee       	ldi	r24, 0xE8	; 232
     816:	9b e0       	ldi	r25, 0x0B	; 11
     818:	0e 94 0d 0b 	call	0x161a	; 0x161a <assemble_packet>
     81c:	80 93 36 04 	sts	0x0436, r24
      if(print_incoming == 1){
     820:	80 91 5c 0c 	lds	r24, 0x0C5C
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	21 f4       	brne	.+8      	; 0x830 <tx_cmd_task+0xfa>
       nrk_kprintf (PSTR ("asm pkt:\r\n"));
     828:	8e e0       	ldi	r24, 0x0E	; 14
     82a:	92 e0       	ldi	r25, 0x02	; 2
     82c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
      }

      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, net_tx_index);
     830:	60 91 36 04 	lds	r22, 0x0436
     834:	88 ee       	ldi	r24, 0xE8	; 232
     836:	9b e0       	ldi	r25, 0x0B	; 11
     838:	0e 94 40 08 	call	0x1080	; 0x1080 <bmac_tx_pkt_nonblocking>
      ret = nrk_event_wait (SIG(tx_done_signal));
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 71 20 	call	0x40e2	; 0x40e2 <nrk_event_wait>
      
      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	88 21       	and	r24, r8
     84a:	99 21       	and	r25, r9
     84c:	aa 21       	and	r26, r10
     84e:	bb 21       	and	r27, r11
     850:	89 2b       	or	r24, r25
     852:	8a 2b       	or	r24, r26
     854:	8b 2b       	or	r24, r27
     856:	21 f0       	breq	.+8      	; 0x860 <tx_cmd_task+0x12a>
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
     858:	87 ef       	ldi	r24, 0xF7	; 247
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
      }
      nrk_sem_post(net_tx_buf_mux);     
     860:	80 91 ef 15 	lds	r24, 0x15EF
     864:	90 91 f0 15 	lds	r25, 0x15F0
     868:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_cmd_queue_size; i++) {
     86c:	0f 5f       	subi	r16, 0xFF	; 255
     86e:	b3 cf       	rjmp	.-154    	; 0x7d6 <tx_cmd_task+0xa0>
      if(ret & (SIG(tx_done_signal) == 0)) {
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
      }
      nrk_sem_post(net_tx_buf_mux);     
    }
    nrk_wait_until_next_period();
     870:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
  }
     874:	8e cf       	rjmp	.-228    	; 0x792 <tx_cmd_task+0x5c>

00000876 <tx_node_task>:

/**
 * tx_node_task() -
 *  send standard messages out to the network (i.e. handshake messages, etc.)
 */
void tx_node_task() {
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	61 97       	sbiw	r28, 0x11	; 17
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
  packet tx_packet;
  uint8_t tx_node_queue_size;
  
  // Wait until bmac has started. This should be called by all tasks 
  //  using bmac that do not call bmac_init().
  while(!bmac_started ()) {
     88a:	0e 94 1f 09 	call	0x123e	; 0x123e <bmac_started>
     88e:	81 11       	cpse	r24, r1
     890:	03 c0       	rjmp	.+6      	; 0x898 <tx_node_task+0x22>
    nrk_wait_until_next_period ();
     892:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
     896:	f9 cf       	rjmp	.-14     	; 0x88a <tx_node_task+0x14>
  }

  // Get and register the tx_done_signal to perform non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal();
     898:	0e 94 58 08 	call	0x10b0	; 0x10b0 <bmac_get_tx_done_signal>
     89c:	18 2f       	mov	r17, r24
  nrk_signal_register(tx_done_signal);
     89e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
      //  tx_cmd_task() also uses it.
      nrk_sem_pend(net_tx_buf_mux);
      assemble_packet(&net_tx_buf, &tx_packet);
      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, strlen(net_tx_buf));
      ret = nrk_event_wait (SIG(tx_done_signal));
     8a2:	c1 2c       	mov	r12, r1
     8a4:	d1 2c       	mov	r13, r1
     8a6:	76 01       	movw	r14, r12
     8a8:	c3 94       	inc	r12
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <tx_node_task+0x3e>
     8ac:	cc 0c       	add	r12, r12
     8ae:	dd 1c       	adc	r13, r13
     8b0:	ee 1c       	adc	r14, r14
     8b2:	ff 1c       	adc	r15, r15
     8b4:	1a 95       	dec	r17
     8b6:	d2 f7       	brpl	.-12     	; 0x8ac <tx_node_task+0x36>
      
      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     8b8:	81 2c       	mov	r8, r1
     8ba:	91 2c       	mov	r9, r1
     8bc:	54 01       	movw	r10, r8
     8be:	83 94       	inc	r8
     8c0:	c1 14       	cp	r12, r1
     8c2:	d1 04       	cpc	r13, r1
     8c4:	e1 04       	cpc	r14, r1
     8c6:	f1 04       	cpc	r15, r1
     8c8:	19 f0       	breq	.+6      	; 0x8d0 <tx_node_task+0x5a>
     8ca:	81 2c       	mov	r8, r1
     8cc:	91 2c       	mov	r9, r1
     8ce:	54 01       	movw	r10, r8
 * tx_node_task() -
 *  send standard messages out to the network (i.e. handshake messages, etc.)
 */
void tx_node_task() {
  // local variable initialization
  uint8_t LED_FLAG = 0;
     8d0:	10 e0       	ldi	r17, 0x00	; 0
  tx_done_signal = bmac_get_tx_done_signal();
  nrk_signal_register(tx_done_signal);
  
  while(1) {
    // LED blinking - for debug
    if(blink_leds == BLINKLEDS) {
     8d2:	80 91 79 11 	lds	r24, 0x1179
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	79 f4       	brne	.+30     	; 0x8f8 <tx_node_task+0x82>
      LED_FLAG++;
     8da:	81 0f       	add	r24, r17
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     8dc:	18 2f       	mov	r17, r24
     8de:	11 70       	andi	r17, 0x01	; 1
     8e0:	80 fd       	sbrc	r24, 0
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <tx_node_task+0x78>
        nrk_led_set(3);
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 79 19 	call	0x32f2	; 0x32f2 <nrk_led_set>
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <tx_node_task+0x82>
      } else {
        nrk_led_clr(3);
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
     8f6:	11 e0       	ldi	r17, 0x01	; 1
      }      
    }
 
    // atomically get the queue size
    nrk_sem_pend(node_tx_queue_mux);
     8f8:	80 91 dd 0e 	lds	r24, 0x0EDD
     8fc:	90 91 de 0e 	lds	r25, 0x0EDE
     900:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      tx_node_queue_size = node_tx_queue.size;
     904:	70 90 4a 12 	lds	r7, 0x124A
    nrk_sem_post(node_tx_queue_mux);
     908:	80 91 dd 0e 	lds	r24, 0x0EDD
     90c:	90 91 de 0e 	lds	r25, 0x0EDE
     910:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_node_queue_size; i++) {
     914:	00 e0       	ldi	r16, 0x00	; 0
     916:	07 15       	cp	r16, r7
     918:	09 f4       	brne	.+2      	; 0x91c <tx_node_task+0xa6>
     91a:	47 c0       	rjmp	.+142    	; 0x9aa <tx_node_task+0x134>
      // get a packet out of the queue.
      nrk_sem_pend(node_tx_queue_mux);
     91c:	80 91 dd 0e 	lds	r24, 0x0EDD
     920:	90 91 de 0e 	lds	r25, 0x0EDE
     924:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      pop(&node_tx_queue, &tx_packet);
     928:	be 01       	movw	r22, r28
     92a:	6f 5f       	subi	r22, 0xFF	; 255
     92c:	7f 4f       	sbci	r23, 0xFF	; 255
     92e:	80 ec       	ldi	r24, 0xC0	; 192
     930:	91 e1       	ldi	r25, 0x11	; 17
     932:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <pop>
      nrk_sem_post(node_tx_queue_mux);
     936:	80 91 dd 0e 	lds	r24, 0x0EDD
     93a:	90 91 de 0e 	lds	r25, 0x0EDE
     93e:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>

      // NOTE: a mutex is required around the network transmit buffer because 
      //  tx_cmd_task() also uses it.
      nrk_sem_pend(net_tx_buf_mux);
     942:	80 91 ef 15 	lds	r24, 0x15EF
     946:	90 91 f0 15 	lds	r25, 0x15F0
     94a:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      assemble_packet(&net_tx_buf, &tx_packet);
     94e:	be 01       	movw	r22, r28
     950:	6f 5f       	subi	r22, 0xFF	; 255
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	88 ee       	ldi	r24, 0xE8	; 232
     956:	9b e0       	ldi	r25, 0x0B	; 11
     958:	0e 94 0d 0b 	call	0x161a	; 0x161a <assemble_packet>
      // send the packet
      val = bmac_tx_pkt_nonblocking(net_tx_buf, strlen(net_tx_buf));
     95c:	e8 ee       	ldi	r30, 0xE8	; 232
     95e:	fb e0       	ldi	r31, 0x0B	; 11
     960:	01 90       	ld	r0, Z+
     962:	00 20       	and	r0, r0
     964:	e9 f7       	brne	.-6      	; 0x960 <tx_node_task+0xea>
     966:	31 97       	sbiw	r30, 0x01	; 1
     968:	bf 01       	movw	r22, r30
     96a:	68 5e       	subi	r22, 0xE8	; 232
     96c:	7b 40       	sbci	r23, 0x0B	; 11
     96e:	88 ee       	ldi	r24, 0xE8	; 232
     970:	9b e0       	ldi	r25, 0x0B	; 11
     972:	0e 94 40 08 	call	0x1080	; 0x1080 <bmac_tx_pkt_nonblocking>
      ret = nrk_event_wait (SIG(tx_done_signal));
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 71 20 	call	0x40e2	; 0x40e2 <nrk_event_wait>
      
      // Just check to be sure signal is okay
      if(ret & (SIG(tx_done_signal) == 0)) {
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	88 21       	and	r24, r8
     984:	99 21       	and	r25, r9
     986:	aa 21       	and	r26, r10
     988:	bb 21       	and	r27, r11
     98a:	89 2b       	or	r24, r25
     98c:	8a 2b       	or	r24, r26
     98e:	8b 2b       	or	r24, r27
     990:	21 f0       	breq	.+8      	; 0x99a <tx_node_task+0x124>
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
     992:	80 ee       	ldi	r24, 0xE0	; 224
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
      }
      nrk_sem_post(net_tx_buf_mux);     
     99a:	80 91 ef 15 	lds	r24, 0x15EF
     99e:	90 91 f0 15 	lds	r25, 0x15F0
     9a2:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_node_queue_size; i++) {
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	b6 cf       	rjmp	.-148    	; 0x916 <tx_node_task+0xa0>
      if(ret & (SIG(tx_done_signal) == 0)) {
        nrk_kprintf (PSTR ("TX done signal error\r\n"));
      }
      nrk_sem_post(net_tx_buf_mux);     
    }
    nrk_wait_until_next_period();
     9aa:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
  }
     9ae:	91 cf       	rjmp	.-222    	; 0x8d2 <tx_node_task+0x5c>

000009b0 <tx_serv_task>:

/**
 * tx_serv_task() _
 *  send messages to the server
 */
void tx_serv_task() {
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	61 97       	sbiw	r28, 0x11	; 17
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
  // local variable initialization
  uint8_t LED_FLAG = 0;
     9c4:	10 e0       	ldi	r17, 0x00	; 0
      //  the sending buffer here because tx_serv_task() is the only task to use
      //  the serial transmitting buffer (serv_tx_buff);
      assemble_serv_packet(&serv_tx_buf, &tx_packet);

      // send the packet
      printf("%s\r\n", serv_tx_buf);
     9c6:	8b e5       	ldi	r24, 0x5B	; 91
     9c8:	e8 2e       	mov	r14, r24
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	f8 2e       	mov	r15, r24
  uint8_t tx_serv_queue_size;
  packet tx_packet;

  while(1) {

    if(blink_leds == BLINKLEDS) {
     9ce:	80 91 79 11 	lds	r24, 0x1179
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	79 f4       	brne	.+30     	; 0x9f4 <tx_serv_task+0x44>
      LED_FLAG++;
     9d6:	81 0f       	add	r24, r17
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     9d8:	18 2f       	mov	r17, r24
     9da:	11 70       	andi	r17, 0x01	; 1
     9dc:	80 fd       	sbrc	r24, 0
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <tx_serv_task+0x3a>
        nrk_kprintf(PSTR("SERV LED ON\r\n"));
     9e0:	82 ed       	ldi	r24, 0xD2	; 210
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <tx_serv_task+0x44>
      } else {
        nrk_kprintf(PSTR("SERV LED OFF\r\n"));
     9ea:	83 ec       	ldi	r24, 0xC3	; 195
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
     9f2:	11 e0       	ldi	r17, 0x01	; 1
      }      
    }

    // atomically get the queue size
    nrk_sem_pend(serv_tx_queue_mux);
     9f4:	80 91 33 05 	lds	r24, 0x0533
     9f8:	90 91 34 05 	lds	r25, 0x0534
     9fc:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      tx_serv_queue_size = serv_tx_queue.size;
     a00:	d0 90 d5 12 	lds	r13, 0x12D5
    nrk_sem_post(serv_tx_queue_mux);
     a04:	80 91 33 05 	lds	r24, 0x0533
     a08:	90 91 34 05 	lds	r25, 0x0534
     a0c:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_serv_queue_size; i++) {
     a10:	00 e0       	ldi	r16, 0x00	; 0
     a12:	0d 15       	cp	r16, r13
     a14:	41 f1       	breq	.+80     	; 0xa66 <tx_serv_task+0xb6>
      // get a packet out of the queue.
      nrk_sem_pend(serv_tx_queue_mux);
     a16:	80 91 33 05 	lds	r24, 0x0533
     a1a:	90 91 34 05 	lds	r25, 0x0534
     a1e:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
      pop(&serv_tx_queue, &tx_packet);
     a22:	be 01       	movw	r22, r28
     a24:	6f 5f       	subi	r22, 0xFF	; 255
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	8b e4       	ldi	r24, 0x4B	; 75
     a2a:	92 e1       	ldi	r25, 0x12	; 18
     a2c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <pop>
      nrk_sem_post(serv_tx_queue_mux);
     a30:	80 91 33 05 	lds	r24, 0x0533
     a34:	90 91 34 05 	lds	r25, 0x0534
     a38:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>

      // NOTE: unlike tx_cmd_task() and tx_node_task(), no mutex is required around
      //  the sending buffer here because tx_serv_task() is the only task to use
      //  the serial transmitting buffer (serv_tx_buff);
      assemble_serv_packet(&serv_tx_buf, &tx_packet);
     a3c:	be 01       	movw	r22, r28
     a3e:	6f 5f       	subi	r22, 0xFF	; 255
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	9f e0       	ldi	r25, 0x0F	; 15
     a46:	0e 94 c0 0a 	call	0x1580	; 0x1580 <assemble_serv_packet>

      // send the packet
      printf("%s\r\n", serv_tx_buf);
     a4a:	84 e0       	ldi	r24, 0x04	; 4
     a4c:	9f e0       	ldi	r25, 0x0F	; 15
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	ff 92       	push	r15
     a54:	ef 92       	push	r14
     a56:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
     *        incorrect due to preemtion - BAD IDEA
     *    Doing it this way bounds this loop to the maximum size of the queue
     *    at any given time, regardless of whether or not the queue has been 
     *    added to by another task.
     */
    for(uint8_t i = 0; i < tx_serv_queue_size; i++) {
     a5a:	0f 5f       	subi	r16, 0xFF	; 255
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	d6 cf       	rjmp	.-84     	; 0xa12 <tx_serv_task+0x62>
      assemble_serv_packet(&serv_tx_buf, &tx_packet);

      // send the packet
      printf("%s\r\n", serv_tx_buf);
    }
    nrk_wait_until_next_period();
     a66:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
  }
     a6a:	b1 cf       	rjmp	.-158    	; 0x9ce <tx_serv_task+0x1e>

00000a6c <clear_serv_buf>:
/**
 * clear_serv_buf() - 
 *  clear the server buffer
 */
void clear_serv_buf() {
  for(uint8_t i = 0; i < serv_rx_index; i++) {
     a6c:	80 91 37 04 	lds	r24, 0x0437
     a70:	29 e6       	ldi	r18, 0x69	; 105
     a72:	3e e0       	ldi	r19, 0x0E	; 14
     a74:	f9 01       	movw	r30, r18
     a76:	9e 2f       	mov	r25, r30
     a78:	92 1b       	sub	r25, r18
     a7a:	98 17       	cp	r25, r24
     a7c:	10 f4       	brcc	.+4      	; 0xa82 <clear_serv_buf+0x16>
    serv_rx_buf[i] = '\0';
     a7e:	11 92       	st	Z+, r1
     a80:	fa cf       	rjmp	.-12     	; 0xa76 <clear_serv_buf+0xa>
  }
  serv_rx_index = 0;
     a82:	10 92 37 04 	sts	0x0437, r1
     a86:	08 95       	ret

00000a88 <get_server_input>:

/**
 * get_server_input() - 
 *  get UART data from server - end of message noted by a '\r'
 */
uint8_t get_server_input() {
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
  uint8_t option;

  // loop until all bytes have been received
  while(nrk_uart_data_ready(NRK_DEFAULT_UART)) {
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <nrk_uart_data_ready>
     a94:	c8 2f       	mov	r28, r24
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <get_server_input+0x14>
     a9a:	40 c0       	rjmp	.+128    	; 0xb1c <get_server_input+0x94>

    // get UART byte and add to buffer
    option = getchar();
     a9c:	80 91 07 18 	lds	r24, 0x1807
     aa0:	90 91 08 18 	lds	r25, 0x1808
     aa4:	0e 94 7f 32 	call	0x64fe	; 0x64fe <fgetc>
     aa8:	ec 01       	movw	r28, r24
     aaa:	18 2f       	mov	r17, r24

    // if there is room, add it to the buffer.
    if(serv_rx_index < (RF_MAX_PAYLOAD_SIZE -1)) {
     aac:	90 91 37 04 	lds	r25, 0x0437
     ab0:	93 37       	cpi	r25, 0x73	; 115
     ab2:	48 f4       	brcc	.+18     	; 0xac6 <get_server_input+0x3e>
      serv_rx_buf[serv_rx_index] = option;
     ab4:	e9 2f       	mov	r30, r25
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	e7 59       	subi	r30, 0x97	; 151
     aba:	f1 4f       	sbci	r31, 0xF1	; 241
     abc:	c0 83       	st	Z, r28
      serv_rx_index++;      
     abe:	9f 5f       	subi	r25, 0xFF	; 255
     ac0:	90 93 37 04 	sts	0x0437, r25
     ac4:	0c c0       	rjmp	.+24     	; 0xade <get_server_input+0x56>
    } 
    // if there is not room, clear the buffer and then add the new byte.
    else {
      clear_serv_buf();
     ac6:	0e 94 36 05 	call	0xa6c	; 0xa6c <clear_serv_buf>
      serv_rx_buf[serv_rx_index] = option;
     aca:	80 91 37 04 	lds	r24, 0x0437
     ace:	e8 2f       	mov	r30, r24
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	e7 59       	subi	r30, 0x97	; 151
     ad4:	f1 4f       	sbci	r31, 0xF1	; 241
     ad6:	c0 83       	st	Z, r28
      serv_rx_index++;
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 37 04 	sts	0x0437, r24
    }

    // print if appropriate
    if(print_incoming == PRINT2TERM) {
     ade:	80 91 5c 0c 	lds	r24, 0x0C5C
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	21 f4       	brne	.+8      	; 0xaee <get_server_input+0x66>
      printf("%c", option);
     ae6:	ce 01       	movw	r24, r28
     ae8:	99 27       	eor	r25, r25
     aea:	0e 94 09 33 	call	0x6612	; 0x6612 <putchar>
    }

    // message has been completed
    if(option == '\r') {
     aee:	1d 30       	cpi	r17, 0x0D	; 13
     af0:	71 f6       	brne	.-100    	; 0xa8e <get_server_input+0x6>
      serv_rx_buf[serv_rx_index] = '\n';
     af2:	80 91 37 04 	lds	r24, 0x0437
     af6:	e8 2f       	mov	r30, r24
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	e7 59       	subi	r30, 0x97	; 151
     afc:	f1 4f       	sbci	r31, 0xF1	; 241
     afe:	9a e0       	ldi	r25, 0x0A	; 10
     b00:	90 83       	st	Z, r25
      serv_rx_index++;
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	80 93 37 04 	sts	0x0437, r24
      if(print_incoming == PRINT2TERM) {
     b08:	c0 91 5c 0c 	lds	r28, 0x0C5C
     b0c:	c1 30       	cpi	r28, 0x01	; 1
     b0e:	29 f4       	brne	.+10     	; 0xb1a <get_server_input+0x92>
        nrk_kprintf(PSTR("\n"));
     b10:	8c e2       	ldi	r24, 0x2C	; 44
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <get_server_input+0x94>

    // message has been completed
    if(option == '\r') {
      serv_rx_buf[serv_rx_index] = '\n';
      serv_rx_index++;
      if(print_incoming == PRINT2TERM) {
     b1a:	c1 e0       	ldi	r28, 0x01	; 1
      }
      return SERV_MSG_RECEIVED;    
    }
  }
  return SERV_MSG_INCOMPLETE;
}
     b1c:	8c 2f       	mov	r24, r28
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	08 95       	ret

00000b26 <rx_serv_task>:

/**
 * rx_serv_task() - 
 *  receive a message from the server
 */
void rx_serv_task() {
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	61 97       	sbiw	r28, 0x11	; 17
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
  // local variable instantiation
  uint8_t LED_FLAG = 0;
  packet rx_packet;

  // get the UART signal and register it
  nrk_sig_t uart_rx_signal = nrk_uart_rx_signal_get();
     b3a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <nrk_uart_rx_signal_get>
  nrk_signal_register(uart_rx_signal);
     b3e:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
 * rx_serv_task() - 
 *  receive a message from the server
 */
void rx_serv_task() {
  // local variable instantiation
  uint8_t LED_FLAG = 0;
     b42:	10 e0       	ldi	r17, 0x00	; 0
    // only execute if a full server message has been received
    if(get_server_input() == SERV_MSG_RECEIVED) {

      // print message if appropriate
      if(print_incoming == 1) {
        printf("%s", serv_rx_buf);     
     b44:	80 e6       	ldi	r24, 0x60	; 96
     b46:	e8 2e       	mov	r14, r24
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	f8 2e       	mov	r15, r24
  nrk_signal_register(uart_rx_signal);
  
  // loop forever
  while (1) {
    // LED blinking - for debug
    if(blink_leds == BLINKLEDS) {
     b4c:	80 91 79 11 	lds	r24, 0x1179
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	79 f4       	brne	.+30     	; 0xb72 <rx_serv_task+0x4c>
      LED_FLAG++;
     b54:	81 0f       	add	r24, r17
      LED_FLAG%=2;
      if(LED_FLAG == 0) {
     b56:	18 2f       	mov	r17, r24
     b58:	11 70       	andi	r17, 0x01	; 1
     b5a:	80 fd       	sbrc	r24, 0
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <rx_serv_task+0x42>
        nrk_led_set(1);
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 79 19 	call	0x32f2	; 0x32f2 <nrk_led_set>
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <rx_serv_task+0x4c>
      } else {
        nrk_led_clr(1);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
     b70:	11 e0       	ldi	r17, 0x01	; 1
      }      
    }

    // only execute if a full server message has been received
    if(get_server_input() == SERV_MSG_RECEIVED) {
     b72:	0e 94 44 05 	call	0xa88	; 0xa88 <get_server_input>
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	e9 f5       	brne	.+122    	; 0xbf4 <rx_serv_task+0xce>

      // print message if appropriate
      if(print_incoming == 1) {
     b7a:	80 91 5c 0c 	lds	r24, 0x0C5C
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	61 f4       	brne	.+24     	; 0xb9a <rx_serv_task+0x74>
        printf("%s", serv_rx_buf);     
     b82:	89 e6       	ldi	r24, 0x69	; 105
     b84:	9e e0       	ldi	r25, 0x0E	; 14
     b86:	9f 93       	push	r25
     b88:	8f 93       	push	r24
     b8a:	ff 92       	push	r15
     b8c:	ef 92       	push	r14
     b8e:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
      }

      // parse message
      parse_serv_msg(&rx_packet, &serv_rx_buf, serv_rx_index);
     b9a:	40 91 37 04 	lds	r20, 0x0437
     b9e:	69 e6       	ldi	r22, 0x69	; 105
     ba0:	7e e0       	ldi	r23, 0x0E	; 14
     ba2:	ce 01       	movw	r24, r28
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <parse_serv_msg>
      clear_serv_buf();
     baa:	0e 94 36 05 	call	0xa6c	; 0xa6c <clear_serv_buf>
      // NOTE: This probably is unnecessary because the likelihood of an earlier
      //  message being delivered serially is very slim. However, one can imagine
      //  that if these were actual network messages that a delay would be much more
      //  probable. Thus, in the spirit of correctness and completeness, we will
      //  keep track of these sequence numbers.
      if(rx_packet.seq_num > server_seq_num) {
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	20 91 35 05 	lds	r18, 0x0535
     bb6:	30 91 36 05 	lds	r19, 0x0536
     bba:	28 17       	cp	r18, r24
     bbc:	39 07       	cpc	r19, r25
     bbe:	d0 f4       	brcc	.+52     	; 0xbf4 <rx_serv_task+0xce>

        // update local sequence number
        server_seq_num = rx_packet.seq_num;
     bc0:	90 93 36 05 	sts	0x0536, r25
     bc4:	80 93 35 05 	sts	0x0535, r24


        switch(rx_packet.type) {
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	86 30       	cpi	r24, 0x06	; 6
     bcc:	99 f4       	brne	.+38     	; 0xbf4 <rx_serv_task+0xce>
          // if a command
          case MSG_CMD:
          {
            //nrk_kprintf (PSTR ("push to Q\r\n")); // for debugging
            nrk_sem_pend(cmd_tx_queue_mux);
     bce:	80 91 38 09 	lds	r24, 0x0938
     bd2:	90 91 39 09 	lds	r25, 0x0939
     bd6:	0e 94 f6 20 	call	0x41ec	; 0x41ec <nrk_sem_pend>
            push(&cmd_tx_queue, &rx_packet);
     bda:	be 01       	movw	r22, r28
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	82 ee       	ldi	r24, 0xE2	; 226
     be2:	92 e1       	ldi	r25, 0x12	; 18
     be4:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <push>
            nrk_sem_post(cmd_tx_queue_mux);
     be8:	80 91 38 09 	lds	r24, 0x0938
     bec:	90 91 39 09 	lds	r25, 0x0939
     bf0:	0e 94 55 21 	call	0x42aa	; 0x42aa <nrk_sem_post>
            // NOTICE: really this should never happen. Eventually, throw an error here.
            break;
        }
      }
    }
    nrk_wait_until_next_period();
     bf4:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
  }
     bf8:	a9 cf       	rjmp	.-174    	; 0xb4c <rx_serv_task+0x26>

00000bfa <clear_tx_buf>:
  }
  serv_rx_index = 0;
}

void clear_tx_buf(){
  for(uint8_t i = 0; i < net_tx_index; i++){
     bfa:	80 91 36 04 	lds	r24, 0x0436
     bfe:	28 ee       	ldi	r18, 0xE8	; 232
     c00:	3b e0       	ldi	r19, 0x0B	; 11
     c02:	f9 01       	movw	r30, r18
     c04:	9e 2f       	mov	r25, r30
     c06:	92 1b       	sub	r25, r18
     c08:	98 17       	cp	r25, r24
     c0a:	10 f4       	brcc	.+4      	; 0xc10 <clear_tx_buf+0x16>
    net_tx_buf[i] = 0;
     c0c:	11 92       	st	Z+, r1
     c0e:	fa cf       	rjmp	.-12     	; 0xc04 <clear_tx_buf+0xa>
  }
  net_tx_index = 0;
     c10:	10 92 36 04 	sts	0x0436, r1
     c14:	08 95       	ret

00000c16 <nrk_create_taskset>:
/**
 * nrk_create_taskset - create the tasks in this application
 * 
 * NOTE: task priority maps to importance. That is, priority(5) > priority(2).
 */
void nrk_create_taskset () {
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
  // PRIORITY 5 - HIGHEST PRIORITY
  RX_NODE_TASK.task = rx_node_task;
     c2c:	05 ec       	ldi	r16, 0xC5	; 197
     c2e:	1b e0       	ldi	r17, 0x0B	; 11
     c30:	88 ef       	ldi	r24, 0xF8	; 248
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	f8 01       	movw	r30, r16
     c36:	96 83       	std	Z+6, r25	; 0x06
     c38:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&RX_NODE_TASK, rx_node_task_stack, NRK_APP_STACKSIZE);
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	52 e0       	ldi	r21, 0x02	; 2
     c3e:	68 e3       	ldi	r22, 0x38	; 56
     c40:	77 e0       	ldi	r23, 0x07	; 7
     c42:	c8 01       	movw	r24, r16
     c44:	0e 94 77 2e 	call	0x5cee	; 0x5cee <nrk_task_set_stk>
  RX_NODE_TASK.prio = 5;
     c48:	85 e0       	ldi	r24, 0x05	; 5
     c4a:	f8 01       	movw	r30, r16
     c4c:	80 87       	std	Z+8, r24	; 0x08
  RX_NODE_TASK.FirstActivation = TRUE;
     c4e:	c1 e0       	ldi	r28, 0x01	; 1
     c50:	c7 83       	std	Z+7, r28	; 0x07
  RX_NODE_TASK.Type = BASIC_TASK;
     c52:	c1 87       	std	Z+9, r28	; 0x09
  RX_NODE_TASK.SchType = PREEMPTIVE;
     c54:	c2 87       	std	Z+10, r28	; 0x0a
  RX_NODE_TASK.period.secs = 0;
     c56:	13 86       	std	Z+11, r1	; 0x0b
     c58:	14 86       	std	Z+12, r1	; 0x0c
     c5a:	15 86       	std	Z+13, r1	; 0x0d
     c5c:	16 86       	std	Z+14, r1	; 0x0e
  RX_NODE_TASK.period.nano_secs = 50*NANOS_PER_MS;
     c5e:	80 e8       	ldi	r24, 0x80	; 128
     c60:	c8 2e       	mov	r12, r24
     c62:	80 ef       	ldi	r24, 0xF0	; 240
     c64:	d8 2e       	mov	r13, r24
     c66:	8a ef       	ldi	r24, 0xFA	; 250
     c68:	e8 2e       	mov	r14, r24
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	f8 2e       	mov	r15, r24
     c6e:	c7 86       	std	Z+15, r12	; 0x0f
     c70:	d0 8a       	std	Z+16, r13	; 0x10
     c72:	e1 8a       	std	Z+17, r14	; 0x11
     c74:	f2 8a       	std	Z+18, r15	; 0x12
  RX_NODE_TASK.cpu_reserve.secs = 0;
     c76:	13 8a       	std	Z+19, r1	; 0x13
     c78:	14 8a       	std	Z+20, r1	; 0x14
     c7a:	15 8a       	std	Z+21, r1	; 0x15
     c7c:	16 8a       	std	Z+22, r1	; 0x16
  RX_NODE_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
     c7e:	90 e8       	ldi	r25, 0x80	; 128
     c80:	89 2e       	mov	r8, r25
     c82:	96 e9       	ldi	r25, 0x96	; 150
     c84:	99 2e       	mov	r9, r25
     c86:	98 e9       	ldi	r25, 0x98	; 152
     c88:	a9 2e       	mov	r10, r25
     c8a:	b1 2c       	mov	r11, r1
     c8c:	87 8a       	std	Z+23, r8	; 0x17
     c8e:	90 8e       	std	Z+24, r9	; 0x18
     c90:	a1 8e       	std	Z+25, r10	; 0x19
     c92:	b2 8e       	std	Z+26, r11	; 0x1a
  RX_NODE_TASK.offset.secs = 0;
     c94:	13 8e       	std	Z+27, r1	; 0x1b
     c96:	14 8e       	std	Z+28, r1	; 0x1c
     c98:	15 8e       	std	Z+29, r1	; 0x1d
     c9a:	16 8e       	std	Z+30, r1	; 0x1e
  RX_NODE_TASK.offset.nano_secs = 0;
     c9c:	17 8e       	std	Z+31, r1	; 0x1f
     c9e:	10 a2       	std	Z+32, r1	; 0x20
     ca0:	11 a2       	std	Z+33, r1	; 0x21
     ca2:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&RX_NODE_TASK);
     ca4:	c8 01       	movw	r24, r16
     ca6:	0e 94 e7 22 	call	0x45ce	; 0x45ce <nrk_activate_task>

  // PRIORITY 4 - SECOND HIGHEST PRIORITY
  RX_SERV_TASK.task = rx_serv_task;
     caa:	0d e9       	ldi	r16, 0x9D	; 157
     cac:	11 e1       	ldi	r17, 0x11	; 17
     cae:	83 e9       	ldi	r24, 0x93	; 147
     cb0:	95 e0       	ldi	r25, 0x05	; 5
     cb2:	f8 01       	movw	r30, r16
     cb4:	96 83       	std	Z+6, r25	; 0x06
     cb6:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&RX_SERV_TASK, rx_serv_task, NRK_APP_STACKSIZE);
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	52 e0       	ldi	r21, 0x02	; 2
     cbc:	bc 01       	movw	r22, r24
     cbe:	c8 01       	movw	r24, r16
     cc0:	0e 94 77 2e 	call	0x5cee	; 0x5cee <nrk_task_set_stk>
  RX_SERV_TASK.prio = 4;
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 87       	std	Z+8, r24	; 0x08
  RX_SERV_TASK.FirstActivation = TRUE;
     cca:	c7 83       	std	Z+7, r28	; 0x07
  RX_SERV_TASK.Type = BASIC_TASK;
     ccc:	c1 87       	std	Z+9, r28	; 0x09
  RX_SERV_TASK.SchType = PREEMPTIVE;
     cce:	c2 87       	std	Z+10, r28	; 0x0a
  RX_SERV_TASK.period.secs = 0;
     cd0:	13 86       	std	Z+11, r1	; 0x0b
     cd2:	14 86       	std	Z+12, r1	; 0x0c
     cd4:	15 86       	std	Z+13, r1	; 0x0d
     cd6:	16 86       	std	Z+14, r1	; 0x0e
  RX_SERV_TASK.period.nano_secs = 50*NANOS_PER_MS;
     cd8:	c7 86       	std	Z+15, r12	; 0x0f
     cda:	d0 8a       	std	Z+16, r13	; 0x10
     cdc:	e1 8a       	std	Z+17, r14	; 0x11
     cde:	f2 8a       	std	Z+18, r15	; 0x12
  RX_SERV_TASK.cpu_reserve.secs = 0;
     ce0:	13 8a       	std	Z+19, r1	; 0x13
     ce2:	14 8a       	std	Z+20, r1	; 0x14
     ce4:	15 8a       	std	Z+21, r1	; 0x15
     ce6:	16 8a       	std	Z+22, r1	; 0x16
  RX_SERV_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
     ce8:	87 8a       	std	Z+23, r8	; 0x17
     cea:	90 8e       	std	Z+24, r9	; 0x18
     cec:	a1 8e       	std	Z+25, r10	; 0x19
     cee:	b2 8e       	std	Z+26, r11	; 0x1a
  RX_SERV_TASK.offset.secs = 0;
     cf0:	13 8e       	std	Z+27, r1	; 0x1b
     cf2:	14 8e       	std	Z+28, r1	; 0x1c
     cf4:	15 8e       	std	Z+29, r1	; 0x1d
     cf6:	16 8e       	std	Z+30, r1	; 0x1e
  RX_SERV_TASK.offset.nano_secs = 0;
     cf8:	17 8e       	std	Z+31, r1	; 0x1f
     cfa:	10 a2       	std	Z+32, r1	; 0x20
     cfc:	11 a2       	std	Z+33, r1	; 0x21
     cfe:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&RX_SERV_TASK);
     d00:	c8 01       	movw	r24, r16
     d02:	0e 94 e7 22 	call	0x45ce	; 0x45ce <nrk_activate_task>
  
  // PRIORITY 3 - MIDDLE PRIORITY
  TX_CMD_TASK.task = tx_cmd_task;
     d06:	0a e7       	ldi	r16, 0x7A	; 122
     d08:	11 e1       	ldi	r17, 0x11	; 17
     d0a:	8b e9       	ldi	r24, 0x9B	; 155
     d0c:	93 e0       	ldi	r25, 0x03	; 3
     d0e:	f8 01       	movw	r30, r16
     d10:	96 83       	std	Z+6, r25	; 0x06
     d12:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_CMD_TASK, tx_cmd_task_stack, NRK_APP_STACKSIZE);
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	52 e0       	ldi	r21, 0x02	; 2
     d18:	68 e7       	ldi	r22, 0x78	; 120
     d1a:	7f e0       	ldi	r23, 0x0F	; 15
     d1c:	c8 01       	movw	r24, r16
     d1e:	0e 94 77 2e 	call	0x5cee	; 0x5cee <nrk_task_set_stk>
  TX_CMD_TASK.prio = 3;
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	f8 01       	movw	r30, r16
     d26:	80 87       	std	Z+8, r24	; 0x08
  TX_CMD_TASK.FirstActivation = TRUE;
     d28:	c7 83       	std	Z+7, r28	; 0x07
  TX_CMD_TASK.Type = BASIC_TASK;
     d2a:	c1 87       	std	Z+9, r28	; 0x09
  TX_CMD_TASK.SchType = PREEMPTIVE;
     d2c:	c2 87       	std	Z+10, r28	; 0x0a
  TX_CMD_TASK.period.secs = 0;
     d2e:	13 86       	std	Z+11, r1	; 0x0b
     d30:	14 86       	std	Z+12, r1	; 0x0c
     d32:	15 86       	std	Z+13, r1	; 0x0d
     d34:	16 86       	std	Z+14, r1	; 0x0e
  TX_CMD_TASK.period.nano_secs = 150*NANOS_PER_MS;
     d36:	80 e8       	ldi	r24, 0x80	; 128
     d38:	91 ed       	ldi	r25, 0xD1	; 209
     d3a:	a0 ef       	ldi	r26, 0xF0	; 240
     d3c:	b8 e0       	ldi	r27, 0x08	; 8
     d3e:	87 87       	std	Z+15, r24	; 0x0f
     d40:	90 8b       	std	Z+16, r25	; 0x10
     d42:	a1 8b       	std	Z+17, r26	; 0x11
     d44:	b2 8b       	std	Z+18, r27	; 0x12
  TX_CMD_TASK.cpu_reserve.secs = 0;
     d46:	13 8a       	std	Z+19, r1	; 0x13
     d48:	14 8a       	std	Z+20, r1	; 0x14
     d4a:	15 8a       	std	Z+21, r1	; 0x15
     d4c:	16 8a       	std	Z+22, r1	; 0x16
  TX_CMD_TASK.cpu_reserve.nano_secs = 50*NANOS_PER_MS;
     d4e:	c7 8a       	std	Z+23, r12	; 0x17
     d50:	d0 8e       	std	Z+24, r13	; 0x18
     d52:	e1 8e       	std	Z+25, r14	; 0x19
     d54:	f2 8e       	std	Z+26, r15	; 0x1a
  TX_CMD_TASK.offset.secs = 0;
     d56:	13 8e       	std	Z+27, r1	; 0x1b
     d58:	14 8e       	std	Z+28, r1	; 0x1c
     d5a:	15 8e       	std	Z+29, r1	; 0x1d
     d5c:	16 8e       	std	Z+30, r1	; 0x1e
  TX_CMD_TASK.offset.nano_secs = 0;
     d5e:	17 8e       	std	Z+31, r1	; 0x1f
     d60:	10 a2       	std	Z+32, r1	; 0x20
     d62:	11 a2       	std	Z+33, r1	; 0x21
     d64:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&TX_CMD_TASK);
     d66:	c8 01       	movw	r24, r16
     d68:	0e 94 e7 22 	call	0x45ce	; 0x45ce <nrk_activate_task>


  // PRIORITY 2 - SECOND LOWEST PRIORITY
  TX_NODE_TASK.task = tx_node_task;
     d6c:	0f ed       	ldi	r16, 0xDF	; 223
     d6e:	1e e0       	ldi	r17, 0x0E	; 14
     d70:	8b e3       	ldi	r24, 0x3B	; 59
     d72:	94 e0       	ldi	r25, 0x04	; 4
     d74:	f8 01       	movw	r30, r16
     d76:	96 83       	std	Z+6, r25	; 0x06
     d78:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_NODE_TASK, tx_node_task_stack, NRK_APP_STACKSIZE);
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	52 e0       	ldi	r21, 0x02	; 2
     d7e:	68 e3       	ldi	r22, 0x38	; 56
     d80:	75 e0       	ldi	r23, 0x05	; 5
     d82:	c8 01       	movw	r24, r16
     d84:	0e 94 77 2e 	call	0x5cee	; 0x5cee <nrk_task_set_stk>
  TX_NODE_TASK.prio = 2;
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	f8 01       	movw	r30, r16
     d8c:	80 87       	std	Z+8, r24	; 0x08
  TX_NODE_TASK.FirstActivation = TRUE;
     d8e:	c7 83       	std	Z+7, r28	; 0x07
  TX_NODE_TASK.Type = BASIC_TASK;
     d90:	c1 87       	std	Z+9, r28	; 0x09
  TX_NODE_TASK.SchType = PREEMPTIVE;
     d92:	c2 87       	std	Z+10, r28	; 0x0a
  TX_NODE_TASK.period.secs = 5;
     d94:	25 e0       	ldi	r18, 0x05	; 5
     d96:	82 2e       	mov	r8, r18
     d98:	91 2c       	mov	r9, r1
     d9a:	a1 2c       	mov	r10, r1
     d9c:	b1 2c       	mov	r11, r1
     d9e:	83 86       	std	Z+11, r8	; 0x0b
     da0:	94 86       	std	Z+12, r9	; 0x0c
     da2:	a5 86       	std	Z+13, r10	; 0x0d
     da4:	b6 86       	std	Z+14, r11	; 0x0e
  TX_NODE_TASK.period.nano_secs = 0;
     da6:	17 86       	std	Z+15, r1	; 0x0f
     da8:	10 8a       	std	Z+16, r1	; 0x10
     daa:	11 8a       	std	Z+17, r1	; 0x11
     dac:	12 8a       	std	Z+18, r1	; 0x12
  TX_NODE_TASK.cpu_reserve.secs = 0;
     dae:	13 8a       	std	Z+19, r1	; 0x13
     db0:	14 8a       	std	Z+20, r1	; 0x14
     db2:	15 8a       	std	Z+21, r1	; 0x15
     db4:	16 8a       	std	Z+22, r1	; 0x16
  TX_NODE_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     db6:	c1 2c       	mov	r12, r1
     db8:	31 ee       	ldi	r19, 0xE1	; 225
     dba:	d3 2e       	mov	r13, r19
     dbc:	35 ef       	ldi	r19, 0xF5	; 245
     dbe:	e3 2e       	mov	r14, r19
     dc0:	35 e0       	ldi	r19, 0x05	; 5
     dc2:	f3 2e       	mov	r15, r19
     dc4:	c7 8a       	std	Z+23, r12	; 0x17
     dc6:	d0 8e       	std	Z+24, r13	; 0x18
     dc8:	e1 8e       	std	Z+25, r14	; 0x19
     dca:	f2 8e       	std	Z+26, r15	; 0x1a
  TX_NODE_TASK.offset.secs = 0;
     dcc:	13 8e       	std	Z+27, r1	; 0x1b
     dce:	14 8e       	std	Z+28, r1	; 0x1c
     dd0:	15 8e       	std	Z+29, r1	; 0x1d
     dd2:	16 8e       	std	Z+30, r1	; 0x1e
  TX_NODE_TASK.offset.nano_secs = 0;
     dd4:	17 8e       	std	Z+31, r1	; 0x1f
     dd6:	10 a2       	std	Z+32, r1	; 0x20
     dd8:	11 a2       	std	Z+33, r1	; 0x21
     dda:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&TX_NODE_TASK);
     ddc:	c8 01       	movw	r24, r16
     dde:	0e 94 e7 22 	call	0x45ce	; 0x45ce <nrk_activate_task>

  // PRIORITY 1 - LOWEST PRIORITY
  TX_SERV_TASK.task = tx_serv_task;
     de2:	00 e1       	ldi	r16, 0x10	; 16
     de4:	15 e0       	ldi	r17, 0x05	; 5
     de6:	88 ed       	ldi	r24, 0xD8	; 216
     de8:	94 e0       	ldi	r25, 0x04	; 4
     dea:	f8 01       	movw	r30, r16
     dec:	96 83       	std	Z+6, r25	; 0x06
     dee:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_SERV_TASK, tx_serv_task_stack, NRK_APP_STACKSIZE);
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	52 e0       	ldi	r21, 0x02	; 2
     df4:	65 ec       	ldi	r22, 0xC5	; 197
     df6:	79 e0       	ldi	r23, 0x09	; 9
     df8:	c8 01       	movw	r24, r16
     dfa:	0e 94 77 2e 	call	0x5cee	; 0x5cee <nrk_task_set_stk>
  TX_SERV_TASK.prio = 1;
     dfe:	f8 01       	movw	r30, r16
     e00:	c0 87       	std	Z+8, r28	; 0x08
  TX_SERV_TASK.FirstActivation = TRUE;
     e02:	c7 83       	std	Z+7, r28	; 0x07
  TX_SERV_TASK.Type = BASIC_TASK;
     e04:	c1 87       	std	Z+9, r28	; 0x09
  TX_SERV_TASK.SchType = PREEMPTIVE;
     e06:	c2 87       	std	Z+10, r28	; 0x0a
  TX_SERV_TASK.period.secs = 5;
     e08:	83 86       	std	Z+11, r8	; 0x0b
     e0a:	94 86       	std	Z+12, r9	; 0x0c
     e0c:	a5 86       	std	Z+13, r10	; 0x0d
     e0e:	b6 86       	std	Z+14, r11	; 0x0e
  TX_SERV_TASK.period.nano_secs = 0;
     e10:	17 86       	std	Z+15, r1	; 0x0f
     e12:	10 8a       	std	Z+16, r1	; 0x10
     e14:	11 8a       	std	Z+17, r1	; 0x11
     e16:	12 8a       	std	Z+18, r1	; 0x12
  TX_SERV_TASK.cpu_reserve.secs = 0;
     e18:	13 8a       	std	Z+19, r1	; 0x13
     e1a:	14 8a       	std	Z+20, r1	; 0x14
     e1c:	15 8a       	std	Z+21, r1	; 0x15
     e1e:	16 8a       	std	Z+22, r1	; 0x16
  TX_SERV_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     e20:	c7 8a       	std	Z+23, r12	; 0x17
     e22:	d0 8e       	std	Z+24, r13	; 0x18
     e24:	e1 8e       	std	Z+25, r14	; 0x19
     e26:	f2 8e       	std	Z+26, r15	; 0x1a
  TX_SERV_TASK.offset.secs = 0;
     e28:	13 8e       	std	Z+27, r1	; 0x1b
     e2a:	14 8e       	std	Z+28, r1	; 0x1c
     e2c:	15 8e       	std	Z+29, r1	; 0x1d
     e2e:	16 8e       	std	Z+30, r1	; 0x1e
  TX_SERV_TASK.offset.nano_secs = 0;
     e30:	17 8e       	std	Z+31, r1	; 0x1f
     e32:	10 a2       	std	Z+32, r1	; 0x20
     e34:	11 a2       	std	Z+33, r1	; 0x21
     e36:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&TX_SERV_TASK);
     e38:	c8 01       	movw	r24, r16
     e3a:	0e 94 e7 22 	call	0x45ce	; 0x45ce <nrk_activate_task>
  
  
  nrk_kprintf(PSTR("Create done.\r\n"));
     e3e:	84 eb       	ldi	r24, 0xB4	; 180
     e40:	91 e0       	ldi	r25, 0x01	; 1
}
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	af 90       	pop	r10
     e54:	9f 90       	pop	r9
     e56:	8f 90       	pop	r8
  TX_SERV_TASK.offset.secs = 0;
  TX_SERV_TASK.offset.nano_secs = 0;
  nrk_activate_task(&TX_SERV_TASK);
  
  
  nrk_kprintf(PSTR("Create done.\r\n"));
     e58:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <nrk_kprintf>

00000e5c <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     e5c:	08 95       	ret

00000e5e <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     e5e:	64 30       	cpi	r22, 0x04	; 4
     e60:	21 f4       	brne	.+8      	; 0xe6a <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     e62:	0e 94 b8 13 	call	0x2770	; 0x2770 <rf_security_set_ctr_counter>
  return NRK_OK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     e6a:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     e6c:	08 95       	ret

00000e6e <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	08 95       	ret

00000e72 <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	08 95       	ret

00000e78 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     e78:	0e 94 50 10 	call	0x20a0	; 0x20a0 <rf_auto_ack_disable>
  return NRK_OK;
}
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	08 95       	ret

00000e80 <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     e80:	0e 94 4a 10 	call	0x2094	; 0x2094 <rf_auto_ack_enable>
  return NRK_OK;
}
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	08 95       	ret

00000e88 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     e88:	0e 94 44 10 	call	0x2088	; 0x2088 <rf_addr_decode_disable>
  return NRK_OK;
}
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	08 95       	ret

00000e90 <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     e90:	0e 94 3e 10 	call	0x207c	; 0x207c <rf_addr_decode_enable>
  return NRK_OK;
}
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret

00000e98 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     e98:	0e 94 56 10 	call	0x20ac	; 0x20ac <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	08 95       	ret

00000ea0 <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     ea0:	90 93 5f 0e 	sts	0x0E5F, r25
     ea4:	80 93 5e 0e 	sts	0x0E5E, r24
  return NRK_OK;
}
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	08 95       	ret

00000eac <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     eac:	0e 94 b6 13 	call	0x276c	; 0x276c <rf_security_last_pkt_status>
}
     eb0:	08 95       	ret

00000eb2 <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     eb2:	60 31       	cpi	r22, 0x10	; 16
     eb4:	21 f4       	brne	.+8      	; 0xebe <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     eb6:	0e 94 b9 13 	call	0x2772	; 0x2772 <rf_security_set_key>
  return NRK_OK;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     ec0:	08 95       	ret

00000ec2 <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	08 95       	ret

00000ec6 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	08 95       	ret

00000eca <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     eca:	80 32       	cpi	r24, 0x20	; 32
     ecc:	20 f4       	brcc	.+8      	; 0xed6 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     ece:	0e 94 34 10 	call	0x2068	; 0x2068 <rf_tx_power>
  return NRK_OK;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     ed8:	08 95       	ret

00000eda <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     eda:	80 93 41 04 	sts	0x0441, r24
     ede:	08 95       	ret

00000ee0 <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     ee0:	99 27       	eor	r25, r25
     ee2:	87 fd       	sbrc	r24, 7
     ee4:	90 95       	com	r25
     ee6:	0e 94 ac 13 	call	0x2758	; 0x2758 <rf_set_cca_thresh>
  return NRK_OK;
}
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	08 95       	ret

00000eee <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	1f 92       	push	r1
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     ef8:	8b 31       	cpi	r24, 0x1B	; 27
     efa:	80 f4       	brcc	.+32     	; 0xf1c <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     efc:	80 93 4b 04 	sts	0x044B, r24
  rf_power_up ();
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	0e 94 1e 10 	call	0x203c	; 0x203c <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	4f ef       	ldi	r20, 0xFF	; 255
     f0c:	5f ef       	ldi	r21, 0xFF	; 255
     f0e:	69 81       	ldd	r22, Y+1	; 0x01
     f10:	81 ee       	ldi	r24, 0xE1	; 225
     f12:	93 e1       	ldi	r25, 0x13	; 19
     f14:	0e 94 76 10 	call	0x20ec	; 0x20ec <rf_init>
  return NRK_OK;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     f1e:	0f 90       	pop	r0
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	08 95       	ret

00000f26 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     f26:	80 91 4e 04 	lds	r24, 0x044E
     f2a:	88 23       	and	r24, r24
     f2c:	11 f1       	breq	.+68     	; 0xf72 <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     f2e:	80 91 78 11 	lds	r24, 0x1178
     f32:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	00 90 78 11 	lds	r0, 0x1178
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <bmac_wait_until_rx_pkt+0x2a>
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	d2 f7       	brpl	.-12     	; 0xf48 <bmac_wait_until_rx_pkt+0x22>
     f54:	0e 94 71 20 	call	0x40e2	; 0x40e2 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	00 90 78 11 	lds	r0, 0x1178
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <bmac_wait_until_rx_pkt+0x44>
     f62:	b6 95       	lsr	r27
     f64:	a7 95       	ror	r26
     f66:	97 95       	ror	r25
     f68:	87 95       	ror	r24
     f6a:	0a 94       	dec	r0
     f6c:	d2 f7       	brpl	.-12     	; 0xf62 <bmac_wait_until_rx_pkt+0x3c>
     f6e:	80 ff       	sbrs	r24, 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
     f76:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
     f78:	08 95       	ret

00000f7a <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	51 f0       	breq	.+20     	; 0xf92 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     f7e:	90 93 e7 13 	sts	0x13E7, r25
     f82:	80 93 e6 13 	sts	0x13E6, r24
  bmac_rfRxInfo.max_length = size;
     f86:	60 93 e5 13 	sts	0x13E5, r22
  rx_buf_empty = 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 4e 04 	sts	0x044E, r24
  return NRK_OK;
     f90:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     f92:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     f94:	08 95       	ret

00000f96 <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	18 2f       	mov	r17, r24
  bmac_running = 0;
     f9e:	10 92 4d 04 	sts	0x044D, r1
  tx_reserve = -1;
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	80 93 40 04 	sts	0x0440, r24
  cca_active = true;
     fa8:	d1 e0       	ldi	r29, 0x01	; 1
     faa:	d0 93 41 04 	sts	0x0441, r29
  rx_failure_cnt = 0;
     fae:	10 92 50 04 	sts	0x0450, r1
     fb2:	10 92 51 04 	sts	0x0451, r1
     fb6:	10 92 52 04 	sts	0x0452, r1
     fba:	10 92 53 04 	sts	0x0453, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     fbe:	10 92 42 04 	sts	0x0442, r1
     fc2:	10 92 43 04 	sts	0x0443, r1
     fc6:	10 92 44 04 	sts	0x0444, r1
     fca:	10 92 45 04 	sts	0x0445, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	91 ee       	ldi	r25, 0xE1	; 225
     fd2:	a5 ef       	ldi	r26, 0xF5	; 245
     fd4:	b5 e0       	ldi	r27, 0x05	; 5
     fd6:	80 93 46 04 	sts	0x0446, r24
     fda:	90 93 47 04 	sts	0x0447, r25
     fde:	a0 93 48 04 	sts	0x0448, r26
     fe2:	b0 93 49 04 	sts	0x0449, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
     fe6:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <nrk_signal_create>
     fea:	c8 2f       	mov	r28, r24
     fec:	80 93 78 11 	sts	0x1178, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     ff0:	8f 3f       	cpi	r24, 0xFF	; 255
     ff2:	19 f4       	brne	.+6      	; 0xffa <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     ff4:	85 ee       	ldi	r24, 0xE5	; 229
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     ffa:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <nrk_signal_create>
     ffe:	c8 2f       	mov	r28, r24
    1000:	80 93 ee 15 	sts	0x15EE, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
    1004:	8f 3f       	cpi	r24, 0xFF	; 255
    1006:	69 f4       	brne	.+26     	; 0x1022 <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
    1008:	8d eb       	ldi	r24, 0xBD	; 189
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    1010:	e0 91 ce 17 	lds	r30, 0x17CE
    1014:	f0 91 cf 17 	lds	r31, 0x17CF
    1018:	60 85       	ldd	r22, Z+8	; 0x08
    101a:	8e e0       	ldi	r24, 0x0E	; 14
    101c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
    return NRK_ERROR;
    1020:	2a c0       	rjmp	.+84     	; 0x1076 <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
    1022:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <nrk_signal_create>
    1026:	c8 2f       	mov	r28, r24
    1028:	80 93 5d 0c 	sts	0x0C5D, r24
  if (bmac_enable_signal == NRK_ERROR) {
    102c:	8f 3f       	cpi	r24, 0xFF	; 255
    102e:	19 f4       	brne	.+6      	; 0x1036 <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
    1030:	81 e9       	ldi	r24, 0x91	; 145
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	eb cf       	rjmp	.-42     	; 0x100c <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
    1036:	10 92 4f 04 	sts	0x044F, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
    103a:	10 92 4e 04 	sts	0x044E, r1
  bmac_rfRxInfo.pPayload = NULL;
    103e:	10 92 e7 13 	sts	0x13E7, r1
    1042:	10 92 e6 13 	sts	0x13E6, r1
  bmac_rfRxInfo.max_length = 0;
    1046:	10 92 e5 13 	sts	0x13E5, r1

  // Setup the cc2420 chip
  rf_power_up ();
    104a:	0e 94 1e 10 	call	0x203c	; 0x203c <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4f ef       	ldi	r20, 0xFF	; 255
    1054:	5f ef       	ldi	r21, 0xFF	; 255
    1056:	61 2f       	mov	r22, r17
    1058:	81 ee       	ldi	r24, 0xE1	; 225
    105a:	93 e1       	ldi	r25, 0x13	; 19
    105c:	0e 94 76 10 	call	0x20ec	; 0x20ec <rf_init>
  g_chan = chan;
    1060:	10 93 4b 04 	sts	0x044B, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 ac 13 	call	0x2758	; 0x2758 <rf_set_cca_thresh>
  bmac_running = 1;
    106c:	d0 93 4d 04 	sts	0x044D, r29
  is_enabled = 1;
    1070:	d0 93 4a 04 	sts	0x044A, r29
  return NRK_OK;
    1074:	c1 e0       	ldi	r28, 0x01	; 1
}
    1076:	8c 2f       	mov	r24, r28
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	1f 91       	pop	r17
    107e:	08 95       	ret

00001080 <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    1080:	20 91 4f 04 	lds	r18, 0x044F
    1084:	21 30       	cpi	r18, 0x01	; 1
    1086:	59 f0       	breq	.+22     	; 0x109e <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	20 93 4f 04 	sts	0x044F, r18
  bmac_rfTxInfo.pPayload = buf;
    108e:	90 93 62 0e 	sts	0x0E62, r25
    1092:	80 93 61 0e 	sts	0x0E61, r24
  bmac_rfTxInfo.length = len;
    1096:	60 93 60 0e 	sts	0x0E60, r22
  return NRK_OK;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
    109e:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
    10a0:	08 95       	ret

000010a2 <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
    10a2:	80 91 78 11 	lds	r24, 0x1178
    10a6:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
    10aa:	80 91 78 11 	lds	r24, 0x1178
    10ae:	08 95       	ret

000010b0 <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
    10b0:	80 91 ee 15 	lds	r24, 0x15EE
    10b4:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
    10b8:	80 91 ee 15 	lds	r24, 0x15EE
    10bc:	08 95       	ret

000010be <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
    10c6:	20 91 4f 04 	lds	r18, 0x044F
    10ca:	21 30       	cpi	r18, 0x01	; 1
    10cc:	f1 f1       	breq	.+124    	; 0x114a <bmac_tx_pkt+0x8c>
    10ce:	f6 2e       	mov	r15, r22
    10d0:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
    10d2:	80 91 ee 15 	lds	r24, 0x15EE
    10d6:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
  tx_data_ready = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 4f 04 	sts	0x044F, r24
  bmac_rfTxInfo.pPayload = buf;
    10e0:	d0 92 62 0e 	sts	0x0E62, r13
    10e4:	c0 92 61 0e 	sts	0x0E61, r12
  bmac_rfTxInfo.length = len;
    10e8:	f0 92 60 0e 	sts	0x0E60, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	00 90 ee 15 	lds	r0, 0x15EE
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <bmac_tx_pkt+0x48>
    10fe:	66 0f       	add	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	88 1f       	adc	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	d2 f7       	brpl	.-12     	; 0x10fe <bmac_tx_pkt+0x40>
    110a:	0e 94 71 20 	call	0x40e2	; 0x40e2 <nrk_event_wait>
    110e:	6b 01       	movw	r12, r22
    1110:	7c 01       	movw	r14, r24
  if (mask == 0)
    1112:	61 15       	cp	r22, r1
    1114:	71 05       	cpc	r23, r1
    1116:	81 05       	cpc	r24, r1
    1118:	91 05       	cpc	r25, r1
    111a:	21 f4       	brne	.+8      	; 0x1124 <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
    111c:	8d e6       	ldi	r24, 0x6D	; 109
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    1124:	00 90 ee 15 	lds	r0, 0x15EE
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <bmac_tx_pkt+0x74>
    112a:	f6 94       	lsr	r15
    112c:	e7 94       	ror	r14
    112e:	d7 94       	ror	r13
    1130:	c7 94       	ror	r12
    1132:	0a 94       	dec	r0
    1134:	d2 f7       	brpl	.-12     	; 0x112a <bmac_tx_pkt+0x6c>
    1136:	c0 fc       	sbrc	r12, 0
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
    113a:	8a e4       	ldi	r24, 0x4A	; 74
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
  if (pkt_got_ack)
    1142:	80 91 4c 04 	lds	r24, 0x044C
    1146:	81 11       	cpse	r24, r1
    1148:	02 c0       	rjmp	.+4      	; 0x114e <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	01 c0       	rjmp	.+2      	; 0x1150 <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
    114e:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
    1150:	ff 90       	pop	r15
    1152:	ef 90       	pop	r14
    1154:	df 90       	pop	r13
    1156:	cf 90       	pop	r12
    1158:	08 95       	ret

0000115a <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
    115a:	20 91 4e 04 	lds	r18, 0x044E
    115e:	22 23       	and	r18, r18
    1160:	39 f0       	breq	.+14     	; 0x1170 <bmac_rx_pkt_get+0x16>
    *len = 0;
    1162:	fc 01       	movw	r30, r24
    1164:	10 82       	st	Z, r1
    *rssi = 0;
    1166:	fb 01       	movw	r30, r22
    1168:	10 82       	st	Z, r1
    return NULL;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
    1170:	20 91 e4 13 	lds	r18, 0x13E4
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
    1178:	80 91 e9 13 	lds	r24, 0x13E9
    117c:	fb 01       	movw	r30, r22
    117e:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
    1180:	80 91 e6 13 	lds	r24, 0x13E6
    1184:	90 91 e7 13 	lds	r25, 0x13E7
}
    1188:	08 95       	ret

0000118a <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 91 4e 04 	lds	r25, 0x044E
    1190:	91 11       	cpse	r25, r1
    1192:	80 e0       	ldi	r24, 0x00	; 0
}
    1194:	08 95       	ret

00001196 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 4e 04 	sts	0x044E, r24
  return NRK_OK;
}
    119c:	08 95       	ret

0000119e <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
    119e:	10 92 4a 04 	sts	0x044A, r1
  rf_power_down ();
    11a2:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <rf_power_down>

000011a6 <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 4a 04 	sts	0x044A, r24
  rf_power_up ();
    11ac:	0e 94 1e 10 	call	0x203c	; 0x203c <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
    11b0:	80 91 5d 0c 	lds	r24, 0x0C5D
    11b4:	0c 94 00 20 	jmp	0x4000	; 0x4000 <nrk_event_signal>

000011b8 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	28 97       	sbiw	r28, 0x08	; 8
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	29 83       	std	Y+1, r18	; 0x01
    11ce:	3a 83       	std	Y+2, r19	; 0x02
    11d0:	4b 83       	std	Y+3, r20	; 0x03
    11d2:	5c 83       	std	Y+4, r21	; 0x04
    11d4:	6d 83       	std	Y+5, r22	; 0x05
    11d6:	7e 83       	std	Y+6, r23	; 0x06
    11d8:	8f 83       	std	Y+7, r24	; 0x07
    11da:	98 87       	std	Y+8, r25	; 0x08
    11dc:	49 81       	ldd	r20, Y+1	; 0x01
    11de:	5a 81       	ldd	r21, Y+2	; 0x02
    11e0:	6b 81       	ldd	r22, Y+3	; 0x03
    11e2:	7c 81       	ldd	r23, Y+4	; 0x04
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	af 81       	ldd	r26, Y+7	; 0x07
    11ea:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
    11ec:	41 15       	cp	r20, r1
    11ee:	51 05       	cpc	r21, r1
    11f0:	61 05       	cpc	r22, r1
    11f2:	71 05       	cpc	r23, r1
    11f4:	41 f4       	brne	.+16     	; 0x1206 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    11f6:	81 15       	cp	r24, r1
    11f8:	2d e2       	ldi	r18, 0x2D	; 45
    11fa:	92 07       	cpc	r25, r18
    11fc:	21 e3       	ldi	r18, 0x31	; 49
    11fe:	a2 07       	cpc	r26, r18
    1200:	21 e0       	ldi	r18, 0x01	; 1
    1202:	b2 07       	cpc	r27, r18
    1204:	90 f0       	brcs	.+36     	; 0x122a <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
    1206:	40 93 42 04 	sts	0x0442, r20
    120a:	50 93 43 04 	sts	0x0443, r21
    120e:	60 93 44 04 	sts	0x0444, r22
    1212:	70 93 45 04 	sts	0x0445, r23
  _bmac_check_period.nano_secs = period.nano_secs;
    1216:	80 93 46 04 	sts	0x0446, r24
    121a:	90 93 47 04 	sts	0x0447, r25
    121e:	a0 93 48 04 	sts	0x0448, r26
    1222:	b0 93 49 04 	sts	0x0449, r27
  return NRK_OK;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	01 c0       	rjmp	.+2      	; 0x122c <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
    122a:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
    122c:	28 96       	adiw	r28, 0x08	; 8
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
    123e:	80 91 4d 04 	lds	r24, 0x044D
    1242:	08 95       	ret

00001244 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
    1244:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
    1246:	0e 94 e6 10 	call	0x21cc	; 0x21cc <rf_rx_on>
  val += rf_cca_check ();
    124a:	0e 94 46 12 	call	0x248c	; 0x248c <rf_cca_check>
    124e:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
    1250:	0e 94 46 12 	call	0x248c	; 0x248c <rf_cca_check>
    1254:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
    1256:	0e 94 46 12 	call	0x248c	; 0x248c <rf_cca_check>
    125a:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
    125c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <rf_rx_off>
    1260:	8c 2f       	mov	r24, r28
    1262:	1c 16       	cp	r1, r28
    1264:	0c f4       	brge	.+2      	; 0x1268 <_bmac_channel_check+0x24>
    1266:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
    126c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
    1270:	10 92 38 04 	sts	0x0438, r1
    1274:	10 92 39 04 	sts	0x0439, r1
    1278:	10 92 3a 04 	sts	0x043A, r1
    127c:	10 92 3b 04 	sts	0x043B, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
    1280:	80 e4       	ldi	r24, 0x40	; 64
    1282:	68 2f       	mov	r22, r24
    1284:	80 93 3c 04 	sts	0x043C, r24
    1288:	8b e4       	ldi	r24, 0x4B	; 75
    128a:	80 93 3d 04 	sts	0x043D, r24
    128e:	8c e4       	ldi	r24, 0x4C	; 76
    1290:	80 93 3e 04 	sts	0x043E, r24
    1294:	10 92 3f 04 	sts	0x043F, r1
  nrk_wait (dummy_t);
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 91 39 04 	lds	r19, 0x0439
    129e:	40 91 3a 04 	lds	r20, 0x043A
    12a2:	50 91 3b 04 	lds	r21, 0x043B
    12a6:	7b e4       	ldi	r23, 0x4B	; 75
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_wait>

  n = rf_rx_packet_nonblock ();
    12ae:	0e 94 78 12 	call	0x24f0	; 0x24f0 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	e9 f0       	breq	.+58     	; 0x12f0 <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
    12b6:	80 91 50 04 	lds	r24, 0x0450
    12ba:	90 91 51 04 	lds	r25, 0x0451
    12be:	a0 91 52 04 	lds	r26, 0x0452
    12c2:	b0 91 53 04 	lds	r27, 0x0453
    12c6:	8f 3f       	cpi	r24, 0xFF	; 255
    12c8:	2f ef       	ldi	r18, 0xFF	; 255
    12ca:	92 07       	cpc	r25, r18
    12cc:	a1 05       	cpc	r26, r1
    12ce:	b1 05       	cpc	r27, r1
    12d0:	58 f4       	brcc	.+22     	; 0x12e8 <_bmac_rx+0x7c>
      rx_failure_cnt++;
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	a1 1d       	adc	r26, r1
    12d6:	b1 1d       	adc	r27, r1
    12d8:	80 93 50 04 	sts	0x0450, r24
    12dc:	90 93 51 04 	sts	0x0451, r25
    12e0:	a0 93 52 04 	sts	0x0452, r26
    12e4:	b0 93 53 04 	sts	0x0453, r27
    rf_rx_off ();
    12e8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <rf_rx_off>
    return 0;
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
    12f0:	10 92 4e 04 	sts	0x044E, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
    12f4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <rf_rx_off>
  return 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
}
    12fa:	08 95       	ret

000012fc <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
    12fc:	80 91 50 04 	lds	r24, 0x0450
    1300:	90 91 51 04 	lds	r25, 0x0451
    1304:	08 95       	ret

00001306 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
    1306:	10 92 50 04 	sts	0x0450, r1
    130a:	10 92 51 04 	sts	0x0451, r1
    130e:	10 92 52 04 	sts	0x0452, r1
    1312:	10 92 53 04 	sts	0x0453, r1
  return NRK_OK;
}
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	08 95       	ret

0000131a <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    131a:	82 30       	cpi	r24, 0x02	; 2
    131c:	58 f0       	brcs	.+22     	; 0x1334 <_b_pow+0x1a>
    return 1;
  if (in > 7)
    131e:	88 30       	cpi	r24, 0x08	; 8
    1320:	08 f0       	brcs	.+2      	; 0x1324 <_b_pow+0xa>
    in = 6;                     // cap it at 128 
    1322:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
    1324:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
    1326:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
    1328:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    132a:	2f 5f       	subi	r18, 0xFF	; 255
    132c:	28 13       	cpse	r18, r24
    132e:	fc cf       	rjmp	.-8      	; 0x1328 <_b_pow+0xe>
    result = result * 2;
  return result;
    1330:	89 2f       	mov	r24, r25
    1332:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
    1336:	08 95       	ret

00001338 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	0f 93       	push	r16
    133e:	1f 93       	push	r17
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
    1344:	80 91 41 04 	lds	r24, 0x0441
    1348:	88 23       	and	r24, r24
    134a:	09 f4       	brne	.+2      	; 0x134e <_bmac_tx+0x16>
    134c:	43 c0       	rjmp	.+134    	; 0x13d4 <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
    134e:	82 e4       	ldi	r24, 0x42	; 66
    1350:	94 e0       	ldi	r25, 0x04	; 4
    1352:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_nrk_time_to_ticks>
    1356:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
    1358:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <rand>
    135c:	6a e0       	ldi	r22, 0x0A	; 10
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	0e 94 f6 30 	call	0x61ec	; 0x61ec <__divmodhi4>
    1364:	bc 01       	movw	r22, r24
    1366:	6f 5f       	subi	r22, 0xFF	; 255
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__udivmodhi4>
    1370:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
    1372:	0e 94 20 24 	call	0x4840	; 0x4840 <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
    1376:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
    1378:	0a e0       	ldi	r16, 0x0A	; 10
    137a:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
    137c:	0e 94 22 09 	call	0x1244	; 0x1244 <_bmac_channel_check>
    1380:	d8 2f       	mov	r29, r24
      if (v == 1)
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	39 f1       	breq	.+78     	; 0x13d4 <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
    1386:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <rand>
    138a:	7c 01       	movw	r14, r24
    138c:	8c 2f       	mov	r24, r28
    138e:	0e 94 8d 09 	call	0x131a	; 0x131a <_b_pow>
    1392:	68 2f       	mov	r22, r24
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	c7 01       	movw	r24, r14
    1398:	0e 94 f6 30 	call	0x61ec	; 0x61ec <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
    139c:	99 27       	eor	r25, r25
    139e:	0e 94 b4 23 	call	0x4768	; 0x4768 <nrk_wait_until_next_n_periods>
      backoff_count++;
    13a2:	cf 5f       	subi	r28, 0xFF	; 255
    13a4:	c7 30       	cpi	r28, 0x07	; 7
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <_bmac_tx+0x72>
    13a8:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
    13aa:	82 e4       	ldi	r24, 0x42	; 66
    13ac:	94 e0       	ldi	r25, 0x04	; 4
    13ae:	0e 94 98 26 	call	0x4d30	; 0x4d30 <_nrk_time_to_ticks>
    13b2:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
    13b4:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <rand>
    13b8:	b8 01       	movw	r22, r16
    13ba:	0e 94 f6 30 	call	0x61ec	; 0x61ec <__divmodhi4>
    13be:	bc 01       	movw	r22, r24
    13c0:	6f 5f       	subi	r22, 0xFF	; 255
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	c7 01       	movw	r24, r14
    13c6:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__udivmodhi4>
    13ca:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
    13cc:	0e 94 20 24 	call	0x4840	; 0x4840 <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
    13d0:	dd 23       	and	r29, r29
    13d2:	a1 f2       	breq	.-88     	; 0x137c <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
    13d4:	10 92 63 0e 	sts	0x0E63, r1
  bmac_rfTxInfo.ackRequest = 0;
    13d8:	10 92 64 0e 	sts	0x0E64, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
    13dc:	20 91 42 04 	lds	r18, 0x0442
    13e0:	30 91 43 04 	lds	r19, 0x0443
    13e4:	88 ee       	ldi	r24, 0xE8	; 232
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    13e8:	28 9f       	mul	r18, r24
    13ea:	e0 01       	movw	r28, r0
    13ec:	29 9f       	mul	r18, r25
    13ee:	d0 0d       	add	r29, r0
    13f0:	38 9f       	mul	r19, r24
    13f2:	d0 0d       	add	r29, r0
    13f4:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    13f6:	60 91 46 04 	lds	r22, 0x0446
    13fa:	70 91 47 04 	lds	r23, 0x0447
    13fe:	80 91 48 04 	lds	r24, 0x0448
    1402:	90 91 49 04 	lds	r25, 0x0449
    1406:	20 e4       	ldi	r18, 0x40	; 64
    1408:	32 e4       	ldi	r19, 0x42	; 66
    140a:	4f e0       	ldi	r20, 0x0F	; 15
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	0e 94 0a 31 	call	0x6214	; 0x6214 <__udivmodsi4>
    1412:	c2 0f       	add	r28, r18
    1414:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    1416:	0e 94 e6 10 	call	0x21cc	; 0x21cc <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    141a:	be 01       	movw	r22, r28
    141c:	8e e5       	ldi	r24, 0x5E	; 94
    141e:	9e e0       	ldi	r25, 0x0E	; 14
    1420:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <rf_tx_packet_repeat>
    1424:	80 93 4c 04 	sts	0x044C, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    1428:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <rf_rx_off>
  tx_data_ready = 0;
    142c:	10 92 4f 04 	sts	0x044F, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    1430:	80 91 ee 15 	lds	r24, 0x15EE
    1434:	0e 94 00 20 	call	0x4000	; 0x4000 <nrk_event_signal>
  return NRK_OK;
}
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	08 95       	ret

00001448 <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    1448:	80 91 4d 04 	lds	r24, 0x044D
    144c:	81 11       	cpse	r24, r1
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    1450:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
    1454:	f9 cf       	rjmp	.-14     	; 0x1448 <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    1456:	80 91 5d 0c 	lds	r24, 0x0C5D
    145a:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
  if (v == NRK_ERROR)
    145e:	8f 3f       	cpi	r24, 0xFF	; 255
    1460:	21 f4       	brne	.+8      	; 0x146a <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1462:	8e e2       	ldi	r24, 0x2E	; 46
    1464:	92 e0       	ldi	r25, 0x02	; 2
    1466:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    146a:	c1 2c       	mov	r12, r1
    146c:	d1 2c       	mov	r13, r1
    146e:	76 01       	movw	r14, r12
    1470:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    1472:	0e 94 1e 10 	call	0x203c	; 0x203c <rf_power_up>
    if (is_enabled) {
    1476:	80 91 4a 04 	lds	r24, 0x044A
    147a:	88 23       	and	r24, r24
    147c:	69 f1       	breq	.+90     	; 0x14d8 <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    147e:	80 91 4e 04 	lds	r24, 0x044E
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	41 f4       	brne	.+16     	; 0x1496 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
    1486:	0e 94 22 09 	call	0x1244	; 0x1244 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    148a:	81 11       	cpse	r24, r1
    148c:	08 c0       	rjmp	.+16     	; 0x149e <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    148e:	0e 94 36 09 	call	0x126c	; 0x126c <_bmac_rx>
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	21 f4       	brne	.+8      	; 0x149e <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    1496:	80 91 78 11 	lds	r24, 0x1178
    149a:	0e 94 00 20 	call	0x4000	; 0x4000 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    149e:	80 91 4f 04 	lds	r24, 0x044F
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	11 f4       	brne	.+4      	; 0x14aa <bmac_nw_task+0x62>
        _bmac_tx ();
    14a6:	0e 94 9c 09 	call	0x1338	; 0x1338 <_bmac_tx>
      }
      rf_rx_off ();
    14aa:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <rf_rx_off>
      rf_power_down ();
    14ae:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    14b2:	20 91 42 04 	lds	r18, 0x0442
    14b6:	30 91 43 04 	lds	r19, 0x0443
    14ba:	40 91 44 04 	lds	r20, 0x0444
    14be:	50 91 45 04 	lds	r21, 0x0445
    14c2:	60 91 46 04 	lds	r22, 0x0446
    14c6:	70 91 47 04 	lds	r23, 0x0447
    14ca:	80 91 48 04 	lds	r24, 0x0448
    14ce:	90 91 49 04 	lds	r25, 0x0449
    14d2:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_wait>
    14d6:	cd cf       	rjmp	.-102    	; 0x1472 <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    14d8:	80 91 5d 0c 	lds	r24, 0x0C5D
    14dc:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    14e0:	c7 01       	movw	r24, r14
    14e2:	b6 01       	movw	r22, r12
    14e4:	00 90 5d 0c 	lds	r0, 0x0C5D
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <bmac_nw_task+0xaa>
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	88 1f       	adc	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	d2 f7       	brpl	.-12     	; 0x14ea <bmac_nw_task+0xa2>
    14f6:	0e 94 71 20 	call	0x40e2	; 0x40e2 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	00 90 5d 0c 	lds	r0, 0x0C5D
    1502:	04 c0       	rjmp	.+8      	; 0x150c <bmac_nw_task+0xc4>
    1504:	b6 95       	lsr	r27
    1506:	a7 95       	ror	r26
    1508:	97 95       	ror	r25
    150a:	87 95       	ror	r24
    150c:	0a 94       	dec	r0
    150e:	d2 f7       	brpl	.-12     	; 0x1504 <bmac_nw_task+0xbc>
    1510:	80 ff       	sbrs	r24, 0
    1512:	e2 cf       	rjmp	.-60     	; 0x14d8 <bmac_nw_task+0x90>
    1514:	ae cf       	rjmp	.-164    	; 0x1472 <bmac_nw_task+0x2a>

00001516 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    1516:	64 e2       	ldi	r22, 0x24	; 36
    1518:	7a e0       	ldi	r23, 0x0A	; 10
    151a:	84 ed       	ldi	r24, 0xD4	; 212
    151c:	94 e0       	ldi	r25, 0x04	; 4
    151e:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	64 e5       	ldi	r22, 0x54	; 84
    1528:	74 e0       	ldi	r23, 0x04	; 4
    152a:	84 ed       	ldi	r24, 0xD4	; 212
    152c:	94 e0       	ldi	r25, 0x04	; 4
    152e:	0e 94 77 2e 	call	0x5cee	; 0x5cee <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    1532:	e4 ed       	ldi	r30, 0xD4	; 212
    1534:	f4 e0       	ldi	r31, 0x04	; 4
    1536:	84 e1       	ldi	r24, 0x14	; 20
    1538:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    153e:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    1540:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    1542:	13 86       	std	Z+11, r1	; 0x0b
    1544:	14 86       	std	Z+12, r1	; 0x0c
    1546:	15 86       	std	Z+13, r1	; 0x0d
    1548:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	9d e2       	ldi	r25, 0x2D	; 45
    154e:	a1 e3       	ldi	r26, 0x31	; 49
    1550:	b1 e0       	ldi	r27, 0x01	; 1
    1552:	87 87       	std	Z+15, r24	; 0x0f
    1554:	90 8b       	std	Z+16, r25	; 0x10
    1556:	a1 8b       	std	Z+17, r26	; 0x11
    1558:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    155a:	13 8a       	std	Z+19, r1	; 0x13
    155c:	14 8a       	std	Z+20, r1	; 0x14
    155e:	15 8a       	std	Z+21, r1	; 0x15
    1560:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    1562:	17 8a       	std	Z+23, r1	; 0x17
    1564:	10 8e       	std	Z+24, r1	; 0x18
    1566:	11 8e       	std	Z+25, r1	; 0x19
    1568:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    156a:	13 8e       	std	Z+27, r1	; 0x1b
    156c:	14 8e       	std	Z+28, r1	; 0x1c
    156e:	15 8e       	std	Z+29, r1	; 0x1d
    1570:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    1572:	17 8e       	std	Z+31, r1	; 0x1f
    1574:	10 a2       	std	Z+32, r1	; 0x20
    1576:	11 a2       	std	Z+33, r1	; 0x21
    1578:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    157a:	cf 01       	movw	r24, r30
    157c:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <nrk_activate_task>

00001580 <assemble_serv_packet>:
/*
Assemble packet to go to the server.
Right now the server is looking for ":"
*/
void assemble_serv_packet(uint8_t *tx_buf, packet *tx)
{
    1580:	fb 01       	movw	r30, r22
    switch(tx->type)
    1582:	21 81       	ldd	r18, Z+1	; 0x01
    1584:	25 30       	cpi	r18, 0x05	; 5
    1586:	19 f1       	breq	.+70     	; 0x15ce <assemble_serv_packet+0x4e>
    1588:	26 30       	cpi	r18, 0x06	; 6
    158a:	09 f0       	breq	.+2      	; 0x158e <assemble_serv_packet+0xe>
    158c:	45 c0       	rjmp	.+138    	; 0x1618 <assemble_serv_packet+0x98>
        case MSG_CMD:
        {
            // msg_cmd from server has num_hops of 0.
            // cmd type message will only have "ON/OFF" payload value.
            // Will this ever happen? 
            sprintf(tx_buf, "%d:%d:%d:%d:%d", tx->source_id, tx->seq_num, tx->type, tx->num_hops, tx->payload[0]);
    158e:	31 85       	ldd	r19, Z+9	; 0x09
    1590:	1f 92       	push	r1
    1592:	3f 93       	push	r19
    1594:	34 81       	ldd	r19, Z+4	; 0x04
    1596:	1f 92       	push	r1
    1598:	3f 93       	push	r19
    159a:	1f 92       	push	r1
    159c:	2f 93       	push	r18
    159e:	23 81       	ldd	r18, Z+3	; 0x03
    15a0:	2f 93       	push	r18
    15a2:	22 81       	ldd	r18, Z+2	; 0x02
    15a4:	2f 93       	push	r18
    15a6:	20 81       	ld	r18, Z
    15a8:	1f 92       	push	r1
    15aa:	2f 93       	push	r18
    15ac:	23 e6       	ldi	r18, 0x63	; 99
    15ae:	32 e0       	ldi	r19, 0x02	; 2
    15b0:	3f 93       	push	r19
    15b2:	2f 93       	push	r18
    15b4:	9f 93       	push	r25
    15b6:	8f 93       	push	r24
    15b8:	0e 94 3f 33 	call	0x667e	; 0x667e <sprintf>
            break;
    15bc:	8d b7       	in	r24, 0x3d	; 61
    15be:	9e b7       	in	r25, 0x3e	; 62
    15c0:	0e 96       	adiw	r24, 0x0e	; 14
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	9e bf       	out	0x3e, r25	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	8d bf       	out	0x3d, r24	; 61
    15cc:	08 95       	ret
        }

        case MSG_DATA:
        {
            // NEED TO TEST
            sprintf(tx_buf, "%d:%d:%d:%d:%d,%d,%d", tx->source_id, tx->seq_num, tx->type, tx->num_hops, 
    15ce:	35 85       	ldd	r19, Z+13	; 0x0d
    15d0:	1f 92       	push	r1
    15d2:	3f 93       	push	r19
    15d4:	33 85       	ldd	r19, Z+11	; 0x0b
    15d6:	1f 92       	push	r1
    15d8:	3f 93       	push	r19
    15da:	31 85       	ldd	r19, Z+9	; 0x09
    15dc:	1f 92       	push	r1
    15de:	3f 93       	push	r19
    15e0:	34 81       	ldd	r19, Z+4	; 0x04
    15e2:	1f 92       	push	r1
    15e4:	3f 93       	push	r19
    15e6:	1f 92       	push	r1
    15e8:	2f 93       	push	r18
    15ea:	23 81       	ldd	r18, Z+3	; 0x03
    15ec:	2f 93       	push	r18
    15ee:	22 81       	ldd	r18, Z+2	; 0x02
    15f0:	2f 93       	push	r18
    15f2:	20 81       	ld	r18, Z
    15f4:	1f 92       	push	r1
    15f6:	2f 93       	push	r18
    15f8:	22 e7       	ldi	r18, 0x72	; 114
    15fa:	32 e0       	ldi	r19, 0x02	; 2
    15fc:	3f 93       	push	r19
    15fe:	2f 93       	push	r18
    1600:	9f 93       	push	r25
    1602:	8f 93       	push	r24
    1604:	0e 94 3f 33 	call	0x667e	; 0x667e <sprintf>
    1608:	8d b7       	in	r24, 0x3d	; 61
    160a:	9e b7       	in	r25, 0x3e	; 62
    160c:	42 96       	adiw	r24, 0x12	; 18
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	9e bf       	out	0x3e, r25	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	8d bf       	out	0x3d, r24	; 61
    1618:	08 95       	ret

0000161a <assemble_packet>:
/*
Assemble packet to go to the network.
Use network format.
*/
uint8_t assemble_packet(uint8_t *tx_buf, packet *tx)
{
    161a:	dc 01       	movw	r26, r24
    161c:	fb 01       	movw	r30, r22
    uint8_t length = 0;
    switch(tx->type)
    161e:	81 81       	ldd	r24, Z+1	; 0x01
    1620:	85 30       	cpi	r24, 0x05	; 5
    1622:	11 f1       	breq	.+68     	; 0x1668 <assemble_packet+0x4e>
    1624:	86 30       	cpi	r24, 0x06	; 6
    1626:	09 f0       	breq	.+2      	; 0x162a <assemble_packet+0x10>
    1628:	46 c0       	rjmp	.+140    	; 0x16b6 <assemble_packet+0x9c>
        case MSG_CMD:
        {
            length = 8;
            // msg_cmd from server has hop_num of 0.
            // cmd type message will only have "ON/OFF" payload value.
            tx_buf[0] = tx->source_id;
    162a:	80 81       	ld	r24, Z
    162c:	8c 93       	st	X, r24
            tx_buf[1] = tx->seq_num;
    162e:	82 81       	ldd	r24, Z+2	; 0x02
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	8c 93       	st	X, r24
    1634:	11 97       	sbiw	r26, 0x01	; 1
            tx_buf[2] = tx->type;
    1636:	81 81       	ldd	r24, Z+1	; 0x01
    1638:	12 96       	adiw	r26, 0x02	; 2
    163a:	8c 93       	st	X, r24
    163c:	12 97       	sbiw	r26, 0x02	; 2
            tx_buf[3] = tx->num_hops;
    163e:	84 81       	ldd	r24, Z+4	; 0x04
    1640:	13 96       	adiw	r26, 0x03	; 3
    1642:	8c 93       	st	X, r24
    1644:	13 97       	sbiw	r26, 0x03	; 3
            tx_buf[4] = tx->payload[0];
    1646:	81 85       	ldd	r24, Z+9	; 0x09
    1648:	14 96       	adiw	r26, 0x04	; 4
    164a:	8c 93       	st	X, r24
    164c:	14 97       	sbiw	r26, 0x04	; 4
            tx_buf[5] = tx->payload[1];
    164e:	82 85       	ldd	r24, Z+10	; 0x0a
    1650:	15 96       	adiw	r26, 0x05	; 5
    1652:	8c 93       	st	X, r24
    1654:	15 97       	sbiw	r26, 0x05	; 5
            tx_buf[6] = tx->payload[2];
    1656:	83 85       	ldd	r24, Z+11	; 0x0b
    1658:	16 96       	adiw	r26, 0x06	; 6
    165a:	8c 93       	st	X, r24
    165c:	16 97       	sbiw	r26, 0x06	; 6
            tx_buf[7] = tx->payload[3];
    165e:	84 85       	ldd	r24, Z+12	; 0x0c
    1660:	17 96       	adiw	r26, 0x07	; 7
    1662:	8c 93       	st	X, r24
    uint8_t length = 0;
    switch(tx->type)
    {
        case MSG_CMD:
        {
            length = 8;
    1664:	88 e0       	ldi	r24, 0x08	; 8
            tx_buf[3] = tx->num_hops;
            tx_buf[4] = tx->payload[0];
            tx_buf[5] = tx->payload[1];
            tx_buf[6] = tx->payload[2];
            tx_buf[7] = tx->payload[3];
            break;
    1666:	08 95       	ret
            length = 10;
            // NEED TO TEST/DEVELOP!!
            // MISSING NUMBER HOPS
            // msg_cmd from server has hop_num of 0.
            // cmd type message will only have "ON/OFF" payload value.
            tx_buf[0] = tx->source_id;
    1668:	80 81       	ld	r24, Z
    166a:	8c 93       	st	X, r24
            tx_buf[1] = tx->seq_num;
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	8c 93       	st	X, r24
    1672:	11 97       	sbiw	r26, 0x01	; 1
            tx_buf[2] = tx->type;
    1674:	81 81       	ldd	r24, Z+1	; 0x01
    1676:	12 96       	adiw	r26, 0x02	; 2
    1678:	8c 93       	st	X, r24
    167a:	12 97       	sbiw	r26, 0x02	; 2
            tx_buf[3] = tx->num_hops;
    167c:	84 81       	ldd	r24, Z+4	; 0x04
    167e:	13 96       	adiw	r26, 0x03	; 3
    1680:	8c 93       	st	X, r24
    1682:	13 97       	sbiw	r26, 0x03	; 3
            tx_buf[4] = tx->payload[0];
    1684:	81 85       	ldd	r24, Z+9	; 0x09
    1686:	14 96       	adiw	r26, 0x04	; 4
    1688:	8c 93       	st	X, r24
    168a:	14 97       	sbiw	r26, 0x04	; 4
            tx_buf[5] = tx->payload[1];
    168c:	82 85       	ldd	r24, Z+10	; 0x0a
    168e:	15 96       	adiw	r26, 0x05	; 5
    1690:	8c 93       	st	X, r24
    1692:	15 97       	sbiw	r26, 0x05	; 5
            tx_buf[6] = tx->payload[2];
    1694:	83 85       	ldd	r24, Z+11	; 0x0b
    1696:	16 96       	adiw	r26, 0x06	; 6
    1698:	8c 93       	st	X, r24
    169a:	16 97       	sbiw	r26, 0x06	; 6
            tx_buf[7] = tx->payload[3];
    169c:	84 85       	ldd	r24, Z+12	; 0x0c
    169e:	17 96       	adiw	r26, 0x07	; 7
    16a0:	8c 93       	st	X, r24
    16a2:	17 97       	sbiw	r26, 0x07	; 7
            tx_buf[8] = tx->payload[4];
    16a4:	85 85       	ldd	r24, Z+13	; 0x0d
    16a6:	18 96       	adiw	r26, 0x08	; 8
    16a8:	8c 93       	st	X, r24
    16aa:	18 97       	sbiw	r26, 0x08	; 8
            tx_buf[9] = tx->payload[5];
    16ac:	86 85       	ldd	r24, Z+14	; 0x0e
    16ae:	19 96       	adiw	r26, 0x09	; 9
    16b0:	8c 93       	st	X, r24
            break;
        }

        case MSG_DATA:
        {
            length = 10;
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	08 95       	ret
Assemble packet to go to the network.
Use network format.
*/
uint8_t assemble_packet(uint8_t *tx_buf, packet *tx)
{
    uint8_t length = 0;
    16b6:	80 e0       	ldi	r24, 0x00	; 0
          tx->num_hops, tx->sensor_sample_rate, tx->neighbor_update_rate);*/
            break;
        }
    }
    return length;
    16b8:	08 95       	ret

000016ba <in_light_pool>:
 * @param lp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_light_pool(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    16ba:	fc 01       	movw	r30, r24
    16bc:	21 91       	ld	r18, Z+
    16be:	cf 01       	movw	r24, r30
    16c0:	3e 2f       	mov	r19, r30
    16c2:	38 1b       	sub	r19, r24
    16c4:	32 17       	cp	r19, r18
    16c6:	28 f4       	brcc	.+10     	; 0x16d2 <in_light_pool+0x18>
        if(lp->node_id[i] == node_address) {
    16c8:	31 91       	ld	r19, Z+
    16ca:	36 13       	cpse	r19, r22
    16cc:	f9 cf       	rjmp	.-14     	; 0x16c0 <in_light_pool+0x6>
            return 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    16d0:	08 95       	ret
    for(uint8_t i = 0; i < lp->size; i++) {
        if(lp->node_id[i] == node_address) {
            return 1;
        }
    }
    return -1;
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	08 95       	ret

000016d6 <get_light_pool_index>:
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    16d6:	fc 01       	movw	r30, r24
    16d8:	81 91       	ld	r24, Z+
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	98 17       	cp	r25, r24
    16de:	39 f0       	breq	.+14     	; 0x16ee <get_light_pool_index+0x18>
        if(lp->node_id[i] == node_address) {
    16e0:	21 91       	ld	r18, Z+
    16e2:	26 13       	cpse	r18, r22
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <get_light_pool_index+0x14>
            return i;
    16e6:	89 2f       	mov	r24, r25
    16e8:	08 95       	ret
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    16ea:	9f 5f       	subi	r25, 0xFF	; 255
    16ec:	f7 cf       	rjmp	.-18     	; 0x16dc <get_light_pool_index+0x6>
        if(lp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    16ee:	8f ef       	ldi	r24, 0xFF	; 255
}
    16f0:	08 95       	ret

000016f2 <add_to_light_pool>:
 * @param lp - light pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param light_value - light value of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    16f2:	ef 92       	push	r14
    16f4:	ff 92       	push	r15
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    if((lp->size < MAX_POOL) && (in_light_pool(lp, node_address) == -1)) {
    16fe:	fc 01       	movw	r30, r24
    1700:	c0 81       	ld	r28, Z
    1702:	c8 30       	cpi	r28, 0x08	; 8
    1704:	d8 f4       	brcc	.+54     	; 0x173c <add_to_light_pool+0x4a>
    1706:	7a 01       	movw	r14, r20
    1708:	d6 2f       	mov	r29, r22
    170a:	8c 01       	movw	r16, r24
    170c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <in_light_pool>
    1710:	8f 3f       	cpi	r24, 0xFF	; 255
    1712:	a1 f4       	brne	.+40     	; 0x173c <add_to_light_pool+0x4a>
        uint8_t index = lp->size;
        lp->size++;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	8c 0f       	add	r24, r28
    1718:	f8 01       	movw	r30, r16
    171a:	80 83       	st	Z, r24
        lp->node_id[index] = node_address;
    171c:	2c 2f       	mov	r18, r28
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	e2 0f       	add	r30, r18
    1722:	f3 1f       	adc	r31, r19
    1724:	d1 83       	std	Z+1, r29	; 0x01
        lp->light_values[index] = light_value;
    1726:	2e 5f       	subi	r18, 0xFE	; 254
    1728:	3f 4f       	sbci	r19, 0xFF	; 255
    172a:	22 0f       	add	r18, r18
    172c:	33 1f       	adc	r19, r19
    172e:	f8 01       	movw	r30, r16
    1730:	e2 0f       	add	r30, r18
    1732:	f3 1f       	adc	r31, r19
    1734:	f1 82       	std	Z+1, r15	; 0x01
    1736:	e0 82       	st	Z, r14
        return 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	01 c0       	rjmp	.+2      	; 0x173e <add_to_light_pool+0x4c>
    }
    return -1;
    173c:	8f ef       	ldi	r24, 0xFF	; 255
}
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	08 95       	ret

0000174c <update_light_pool>:
 * @param lp - light pool to be updated
 * @param node_address - node whose light value needs updating
 * @param light_value - new light value of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	ec 01       	movw	r28, r24
    1758:	16 2f       	mov	r17, r22
    175a:	7a 01       	movw	r14, r20
    int8_t in_lp, index;
    
    in_lp = in_light_pool(lp, node_address);
    175c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <in_light_pool>
    if(in_lp == -1) {
    1760:	8f 3f       	cpi	r24, 0xFF	; 255
    1762:	31 f4       	brne	.+12     	; 0x1770 <update_light_pool+0x24>
        add_to_light_pool(lp, node_address, light_value);
    1764:	a7 01       	movw	r20, r14
    1766:	61 2f       	mov	r22, r17
    1768:	ce 01       	movw	r24, r28
    176a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <add_to_light_pool>
    176e:	0d c0       	rjmp	.+26     	; 0x178a <update_light_pool+0x3e>
        return 1;
    } else {
        index = get_light_pool_index(lp, node_address);
    1770:	61 2f       	mov	r22, r17
    1772:	ce 01       	movw	r24, r28
    1774:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <get_light_pool_index>
        if(index >= 0) {
    1778:	87 fd       	sbrc	r24, 7
    177a:	09 c0       	rjmp	.+18     	; 0x178e <update_light_pool+0x42>
            lp->light_values[index] = light_value;
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	89 02       	muls	r24, r25
    1780:	c0 0d       	add	r28, r0
    1782:	d1 1d       	adc	r29, r1
    1784:	11 24       	eor	r1, r1
    1786:	fd 82       	std	Y+5, r15	; 0x05
    1788:	ec 82       	std	Y+4, r14	; 0x04
            return 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <update_light_pool+0x44>
        }        
    }

    return -1;
    178e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	08 95       	ret

0000179c <print_light_pool>:

void print_light_pool(light_pool_t *lp) {
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	8c 01       	movw	r16, r24
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    17a8:	8d e0       	ldi	r24, 0x0D	; 13
    17aa:	93 e0       	ldi	r25, 0x03	; 3
    17ac:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
    for(uint8_t k = 0; k < lp->size; k++) {
    17b0:	c0 e0       	ldi	r28, 0x00	; 0
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    17b2:	97 e8       	ldi	r25, 0x87	; 135
    17b4:	e9 2e       	mov	r14, r25
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	f9 2e       	mov	r15, r25
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    17ba:	f8 01       	movw	r30, r16
    17bc:	80 81       	ld	r24, Z
    17be:	c8 17       	cp	r28, r24
    17c0:	f0 f4       	brcc	.+60     	; 0x17fe <print_light_pool+0x62>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    17c2:	2c 2f       	mov	r18, r28
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	f9 01       	movw	r30, r18
    17c8:	32 96       	adiw	r30, 0x02	; 2
    17ca:	ee 0f       	add	r30, r30
    17cc:	ff 1f       	adc	r31, r31
    17ce:	e0 0f       	add	r30, r16
    17d0:	f1 1f       	adc	r31, r17
    17d2:	81 81       	ldd	r24, Z+1	; 0x01
    17d4:	8f 93       	push	r24
    17d6:	80 81       	ld	r24, Z
    17d8:	8f 93       	push	r24
    17da:	f8 01       	movw	r30, r16
    17dc:	e2 0f       	add	r30, r18
    17de:	f3 1f       	adc	r31, r19
    17e0:	81 81       	ldd	r24, Z+1	; 0x01
    17e2:	1f 92       	push	r1
    17e4:	8f 93       	push	r24
    17e6:	ff 92       	push	r15
    17e8:	ef 92       	push	r14
    17ea:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    17ee:	cf 5f       	subi	r28, 0xFF	; 255
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	de cf       	rjmp	.-68     	; 0x17ba <print_light_pool+0x1e>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    }
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	08 95       	ret

0000180a <init_neighbor_table>:

/*** NEIGHBOR TABLE OPERATIONS ***/
/**
 * init_neighbor_table
 */
void init_neighbor_table(neighbor_table_t *nt) {
    180a:	fc 01       	movw	r30, r24
    nt->size = 0;
    180c:	10 82       	st	Z, r1

    // need to actually force id values to 0 because when we send our the neighbor packet...
    // we send all 4 items. Therefore an old value can still be in [3] but the size could be 2.
    for(uint8_t i = 0; i < MAX_NEIGHBOR_TABLE; i++)
    {
        nt->neighbors[i].id = 0;
    180e:	12 82       	std	Z+2, r1	; 0x02
    1810:	13 82       	std	Z+3, r1	; 0x03
    1812:	14 82       	std	Z+4, r1	; 0x04
    1814:	08 95       	ret

00001816 <in_neighbor_table>:
 * @param nt - neighbor table to search
 * @param node_address - node to search for
 * @returns '1' if node is found, '-1' otherwise
 */
int8_t in_neighbor_table(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    1816:	fc 01       	movw	r30, r24
    1818:	20 81       	ld	r18, Z
    181a:	02 96       	adiw	r24, 0x02	; 2
    181c:	fc 01       	movw	r30, r24
    181e:	3e 2f       	mov	r19, r30
    1820:	38 1b       	sub	r19, r24
    1822:	32 17       	cp	r19, r18
    1824:	28 f4       	brcc	.+10     	; 0x1830 <in_neighbor_table+0x1a>
        if(nt->neighbors[i].id == node_address) {
    1826:	31 91       	ld	r19, Z+
    1828:	36 13       	cpse	r19, r22
    182a:	f9 cf       	rjmp	.-14     	; 0x181e <in_neighbor_table+0x8>
            return 1;
    182c:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    182e:	08 95       	ret
    for(uint8_t i = 0; i < nt->size; i++) {
        if(nt->neighbors[i].id == node_address) {
            return 1;
        }
    }
    return -1;
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	08 95       	ret

00001834 <add_neighbor>:
}

void add_neighbor(neighbor_table_t *nt, neighbor_t new_neighbor) {
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	ec 01       	movw	r28, r24
    183c:	16 2f       	mov	r17, r22
    uint8_t in_nt = in_neighbor_table(nt, new_neighbor.id);
    printf("neighbor table size %d\r\n", nt->size);
    183e:	88 81       	ld	r24, Y
    1840:	1f 92       	push	r1
    1842:	8f 93       	push	r24
    1844:	80 ea       	ldi	r24, 0xA0	; 160
    1846:	92 e0       	ldi	r25, 0x02	; 2
    1848:	9f 93       	push	r25
    184a:	8f 93       	push	r24
    184c:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    if((nt->size < MAX_NEIGHBOR_TABLE) && (in_nt != -1))
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	88 81       	ld	r24, Y
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	a0 f4       	brcc	.+40     	; 0x1886 <add_neighbor+0x52>
    {
        printf("new neighbor %d\r\n", new_neighbor.id);
    185e:	1f 92       	push	r1
    1860:	1f 93       	push	r17
    1862:	89 eb       	ldi	r24, 0xB9	; 185
    1864:	92 e0       	ldi	r25, 0x02	; 2
    1866:	9f 93       	push	r25
    1868:	8f 93       	push	r24
    186a:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
        nt->neighbors[nt->size] = new_neighbor;
    186e:	88 81       	ld	r24, Y
    1870:	fe 01       	movw	r30, r28
    1872:	e8 0f       	add	r30, r24
    1874:	f1 1d       	adc	r31, r1
    1876:	12 83       	std	Z+2, r17	; 0x02
        nt->size++;
    1878:	88 81       	ld	r24, Y
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	88 83       	st	Y, r24
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    }
}
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	08 95       	ret

0000188e <get_neighbor_table_index>:
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    188e:	fc 01       	movw	r30, r24
    1890:	20 81       	ld	r18, Z
    1892:	32 96       	adiw	r30, 0x02	; 2
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	82 17       	cp	r24, r18
    1898:	29 f0       	breq	.+10     	; 0x18a4 <get_neighbor_table_index+0x16>
        if(nt->neighbors[i].id == node_address) {
    189a:	91 91       	ld	r25, Z+
    189c:	96 17       	cp	r25, r22
    189e:	19 f0       	breq	.+6      	; 0x18a6 <get_neighbor_table_index+0x18>
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    18a0:	8f 5f       	subi	r24, 0xFF	; 255
    18a2:	f9 cf       	rjmp	.-14     	; 0x1896 <get_neighbor_table_index+0x8>
        if(nt->neighbors[i].id == node_address) {
            return i;
        }
    }
    return -1;
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
}
    18a6:	08 95       	ret

000018a8 <print_neighbor_table>:
}*

/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	ec 01       	movw	r28, r24
    printf("[");
    18bc:	8b e5       	ldi	r24, 0x5B	; 91
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 09 33 	call	0x6612	; 0x6612 <putchar>
    for (uint8_t i=0; i < nt->size; i++) {
    18c4:	d1 2c       	mov	r13, r1
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
    18c6:	04 e8       	ldi	r16, 0x84	; 132
    18c8:	12 e0       	ldi	r17, 0x02	; 2
        if (i < (nt->size-1))
            printf(", ");
    18ca:	8b ec       	ldi	r24, 0xCB	; 203
    18cc:	e8 2e       	mov	r14, r24
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	f8 2e       	mov	r15, r24
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    18d2:	88 81       	ld	r24, Y
    18d4:	d8 16       	cp	r13, r24
    18d6:	f8 f4       	brcc	.+62     	; 0x1916 <print_neighbor_table+0x6e>
        uint8_t node_id = nt->neighbors[i].id;
    18d8:	ad 2c       	mov	r10, r13
    18da:	b1 2c       	mov	r11, r1
    18dc:	fe 01       	movw	r30, r28
    18de:	ea 0d       	add	r30, r10
    18e0:	fb 1d       	adc	r31, r11
        printf("%d", node_id);
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	1f 92       	push	r1
    18e6:	8f 93       	push	r24
    18e8:	1f 93       	push	r17
    18ea:	0f 93       	push	r16
    18ec:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
        if (i < (nt->size-1))
    18f0:	28 81       	ld	r18, Y
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	21 50       	subi	r18, 0x01	; 1
    18f6:	31 09       	sbc	r19, r1
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	a2 16       	cp	r10, r18
    1902:	b3 06       	cpc	r11, r19
    1904:	34 f4       	brge	.+12     	; 0x1912 <print_neighbor_table+0x6a>
            printf(", ");
    1906:	ff 92       	push	r15
    1908:	ef 92       	push	r14
    190a:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    1912:	d3 94       	inc	r13
    1914:	de cf       	rjmp	.-68     	; 0x18d2 <print_neighbor_table+0x2a>
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    1916:	8c e8       	ldi	r24, 0x8C	; 140
    1918:	93 e0       	ldi	r25, 0x03	; 3
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	bf 90       	pop	r11
    192a:	af 90       	pop	r10
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    192c:	0c 94 0f 33 	jmp	0x661e	; 0x661e <puts>

00001930 <in_neighbor_graph>:
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    1930:	fc 01       	movw	r30, r24
    1932:	30 81       	ld	r19, Z
    1934:	02 96       	adiw	r24, 0x02	; 2
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	23 17       	cp	r18, r19
    193a:	41 f0       	breq	.+16     	; 0x194c <in_neighbor_graph+0x1c>
    193c:	05 96       	adiw	r24, 0x05	; 5
    193e:	fc 01       	movw	r30, r24
    1940:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    1942:	40 81       	ld	r20, Z
    1944:	46 17       	cp	r20, r22
    1946:	21 f0       	breq	.+8      	; 0x1950 <in_neighbor_graph+0x20>
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    1948:	2f 5f       	subi	r18, 0xFF	; 255
    194a:	f6 cf       	rjmp	.-20     	; 0x1938 <in_neighbor_graph+0x8>
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
        }
    }
    return -1;
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	08 95       	ret
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    1952:	08 95       	ret

00001954 <get_neighbor_graph_index>:
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    1954:	fc 01       	movw	r30, r24
    1956:	40 81       	ld	r20, Z
    1958:	9c 01       	movw	r18, r24
    195a:	2e 5f       	subi	r18, 0xFE	; 254
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	84 17       	cp	r24, r20
    1962:	49 f0       	breq	.+18     	; 0x1976 <get_neighbor_graph_index+0x22>
    1964:	2b 5f       	subi	r18, 0xFB	; 251
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	f9 01       	movw	r30, r18
    196a:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    196c:	90 81       	ld	r25, Z
    196e:	96 17       	cp	r25, r22
    1970:	19 f0       	breq	.+6      	; 0x1978 <get_neighbor_graph_index+0x24>
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    1972:	8f 5f       	subi	r24, 0xFF	; 255
    1974:	f5 cf       	rjmp	.-22     	; 0x1960 <get_neighbor_graph_index+0xc>
        if(ng->neighbor_tables[i].origin == node_address) {
            return i;
        }
    }
    return -1;
    1976:	8f ef       	ldi	r24, 0xFF	; 255
}
    1978:	08 95       	ret

0000197a <add_to_neighbor_graph>:
 *
 * @param ng - neighbor graph to which to add
 * @param new_table - new neighbor table to add to the neighbor graph
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	dc 01       	movw	r26, r24
    1980:	fb 01       	movw	r30, r22
    //printf("     add %d to neighbor_graph\r\n", nt->origin);
    if((ng->size < MAX_GRAPH)) {
    1982:	8c 91       	ld	r24, X
    1984:	88 30       	cpi	r24, 0x08	; 8
    1986:	00 f5       	brcc	.+64     	; 0x19c8 <add_to_neighbor_graph+0x4e>
        uint8_t index = ng->size;
        ng->size++;
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	98 0f       	add	r25, r24
    198c:	9c 93       	st	X, r25
        ng->neighbor_tables[index].size = nt->size;
    198e:	90 81       	ld	r25, Z
    1990:	45 e0       	ldi	r20, 0x05	; 5
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	ed 01       	movw	r28, r26
    1998:	48 9f       	mul	r20, r24
    199a:	c0 0d       	add	r28, r0
    199c:	d1 1d       	adc	r29, r1
    199e:	11 24       	eor	r1, r1
    19a0:	99 83       	std	Y+1, r25	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    19a2:	81 81       	ldd	r24, Z+1	; 0x01
    19a4:	8a 83       	std	Y+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	8b 83       	std	Y+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    19aa:	83 81       	ldd	r24, Z+3	; 0x03
    19ac:	8c 83       	std	Y+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    19ae:	54 81       	ldd	r21, Z+4	; 0x04
    19b0:	2f 5f       	subi	r18, 0xFF	; 255
    19b2:	3f 4f       	sbci	r19, 0xFF	; 255
    19b4:	42 9f       	mul	r20, r18
    19b6:	c0 01       	movw	r24, r0
    19b8:	43 9f       	mul	r20, r19
    19ba:	90 0d       	add	r25, r0
    19bc:	11 24       	eor	r1, r1
    19be:	a8 0f       	add	r26, r24
    19c0:	b9 1f       	adc	r27, r25
    19c2:	5c 93       	st	X, r21
        return 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <add_to_neighbor_graph+0x50>
    }
    return -1;
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
}
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <update_neighbor_graph>:
 * 
 * @param ng - neighbor graph to update
 * @param nt - neighbor table to update
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	8c 01       	movw	r16, r24
    19dc:	eb 01       	movw	r28, r22
    int8_t in_ng, index;
    
    in_ng = in_neighbor_graph(ng, nt->origin);
    19de:	f9 80       	ldd	r15, Y+1	; 0x01
    19e0:	6f 2d       	mov	r22, r15
    19e2:	0e 94 98 0c 	call	0x1930	; 0x1930 <in_neighbor_graph>
    if(in_ng == -1) {
    19e6:	8f 3f       	cpi	r24, 0xFF	; 255
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <update_neighbor_graph+0x24>
        add_to_neighbor_graph(ng, nt);
    19ea:	be 01       	movw	r22, r28
    19ec:	c8 01       	movw	r24, r16
    19ee:	0e 94 bd 0c 	call	0x197a	; 0x197a <add_to_neighbor_graph>
        return 1;
    19f2:	24 c0       	rjmp	.+72     	; 0x1a3c <update_neighbor_graph+0x6c>
    } else {
        index = get_neighbor_graph_index(ng, nt->origin);
    19f4:	6f 2d       	mov	r22, r15
    19f6:	c8 01       	movw	r24, r16
    19f8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <get_neighbor_graph_index>
        ng->neighbor_tables[index].size = nt->size;
    19fc:	28 2f       	mov	r18, r24
    19fe:	33 27       	eor	r19, r19
    1a00:	27 fd       	sbrc	r18, 7
    1a02:	30 95       	com	r19
    1a04:	88 81       	ld	r24, Y
    1a06:	45 e0       	ldi	r20, 0x05	; 5
    1a08:	42 9f       	mul	r20, r18
    1a0a:	f0 01       	movw	r30, r0
    1a0c:	43 9f       	mul	r20, r19
    1a0e:	f0 0d       	add	r31, r0
    1a10:	11 24       	eor	r1, r1
    1a12:	e0 0f       	add	r30, r16
    1a14:	f1 1f       	adc	r31, r17
    1a16:	81 83       	std	Z+1, r24	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	82 83       	std	Z+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	83 83       	std	Z+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	84 83       	std	Z+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    1a24:	5c 81       	ldd	r21, Y+4	; 0x04
    1a26:	2f 5f       	subi	r18, 0xFF	; 255
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	42 9f       	mul	r20, r18
    1a2c:	c0 01       	movw	r24, r0
    1a2e:	43 9f       	mul	r20, r19
    1a30:	90 0d       	add	r25, r0
    1a32:	11 24       	eor	r1, r1
    1a34:	f8 01       	movw	r30, r16
    1a36:	e8 0f       	add	r30, r24
    1a38:	f9 1f       	adc	r31, r25
    1a3a:	50 83       	st	Z, r21
        return 1;
    }
    return -1;
}
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	08 95       	ret

00001a4a <print_neighbor_graph>:
 * print_neighbor_graph:
 *  - print the current neighbor information
 * 
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	8c 01       	movw	r16, r24
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    1a58:	87 e2       	ldi	r24, 0x27	; 39
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
    for(uint8_t i = 0; i < ng->size; i++) {
    1a60:	c0 e0       	ldi	r28, 0x00	; 0
        nt = ng->neighbor_tables[i];
    1a62:	d5 e0       	ldi	r29, 0x05	; 5
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    1a64:	8e ec       	ldi	r24, 0xCE	; 206
    1a66:	e8 2e       	mov	r14, r24
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	f8 2e       	mov	r15, r24
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	80 81       	ld	r24, Z
    1a70:	c8 17       	cp	r28, r24
    1a72:	00 f5       	brcc	.+64     	; 0x1ab4 <print_neighbor_graph+0x6a>
        nt = ng->neighbor_tables[i];
    1a74:	f8 01       	movw	r30, r16
    1a76:	dc 9f       	mul	r29, r28
    1a78:	e0 0d       	add	r30, r0
    1a7a:	f1 1d       	adc	r31, r1
    1a7c:	11 24       	eor	r1, r1
    1a7e:	31 96       	adiw	r30, 0x01	; 1
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    1a80:	84 81       	ldd	r24, Z+4	; 0x04
    1a82:	1f 92       	push	r1
    1a84:	8f 93       	push	r24
    1a86:	83 81       	ldd	r24, Z+3	; 0x03
    1a88:	1f 92       	push	r1
    1a8a:	8f 93       	push	r24
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	1f 92       	push	r1
    1a90:	8f 93       	push	r24
    1a92:	81 81       	ldd	r24, Z+1	; 0x01
    1a94:	1f 92       	push	r1
    1a96:	8f 93       	push	r24
    1a98:	ff 92       	push	r15
    1a9a:	ef 92       	push	r14
    1a9c:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    1aa0:	cf 5f       	subi	r28, 0xFF	; 255
    1aa2:	8d b7       	in	r24, 0x3d	; 61
    1aa4:	9e b7       	in	r25, 0x3e	; 62
    1aa6:	0a 96       	adiw	r24, 0x0a	; 10
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	9e bf       	out	0x3e, r25	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	8d bf       	out	0x3d, r24	; 61
    1ab2:	dc cf       	rjmp	.-72     	; 0x1a6c <print_neighbor_graph+0x22>
        nt = ng->neighbor_tables[i];
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    }
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	08 95       	ret

00001ac2 <print_packet>:
 */
 
#include <parser.h>

void print_packet(packet *p)
{
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	ec 01       	movw	r28, r24
    printf("[source_id: %d]", p->source_id);
    1ac8:	88 81       	ld	r24, Y
    1aca:	1f 92       	push	r1
    1acc:	8f 93       	push	r24
    1ace:	85 ef       	ldi	r24, 0xF5	; 245
    1ad0:	92 e0       	ldi	r25, 0x02	; 2
    1ad2:	9f 93       	push	r25
    1ad4:	8f 93       	push	r24
    1ad6:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    printf("[seq_num: %d]", p->seq_num);
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	8f 93       	push	r24
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	8f 93       	push	r24
    1ae2:	85 e0       	ldi	r24, 0x05	; 5
    1ae4:	93 e0       	ldi	r25, 0x03	; 3
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    printf("[msg_type: %d]", p->type);
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	1f 92       	push	r1
    1af2:	8f 93       	push	r24
    1af4:	83 e1       	ldi	r24, 0x13	; 19
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	9f 93       	push	r25
    1afa:	8f 93       	push	r24
    1afc:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    printf("[num_hops: %d]", p->num_hops);
    1b00:	8c 81       	ldd	r24, Y+4	; 0x04
    1b02:	1f 92       	push	r1
    1b04:	8f 93       	push	r24
    1b06:	82 e2       	ldi	r24, 0x22	; 34
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	9f 93       	push	r25
    1b0c:	8f 93       	push	r24
    1b0e:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    switch(p->type)
    1b12:	8d b7       	in	r24, 0x3d	; 61
    1b14:	9e b7       	in	r25, 0x3e	; 62
    1b16:	40 96       	adiw	r24, 0x10	; 16
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	8d bf       	out	0x3d, r24	; 61
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	85 30       	cpi	r24, 0x05	; 5
    1b26:	d1 f0       	breq	.+52     	; 0x1b5c <print_packet+0x9a>
    1b28:	86 30       	cpi	r24, 0x06	; 6
    1b2a:	79 f5       	brne	.+94     	; 0x1b8a <print_packet+0xc8>
    {
        case MSG_CMD:
        {
            printf("[payload:%d,%d,%d]\r\n", (uint16_t)p->payload[0], p->payload[2], p->payload[3]);
    1b2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b2e:	1f 92       	push	r1
    1b30:	8f 93       	push	r24
    1b32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b34:	1f 92       	push	r1
    1b36:	8f 93       	push	r24
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	1f 92       	push	r1
    1b3c:	8f 93       	push	r24
    1b3e:	81 e3       	ldi	r24, 0x31	; 49
    1b40:	93 e0       	ldi	r25, 0x03	; 3
    1b42:	9f 93       	push	r25
    1b44:	8f 93       	push	r24
    1b46:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
            break;
    1b4a:	8d b7       	in	r24, 0x3d	; 61
    1b4c:	9e b7       	in	r25, 0x3e	; 62
    1b4e:	08 96       	adiw	r24, 0x08	; 8
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	9e bf       	out	0x3e, r25	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	8d bf       	out	0x3d, r24	; 61
    1b5a:	17 c0       	rjmp	.+46     	; 0x1b8a <print_packet+0xc8>
        }

        case MSG_DATA:
        {
            printf("[payload:%d, %d, %d]\r\n", (uint16_t)p->payload[DATA_PWR_INDEX], 
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	1f 92       	push	r1
    1b60:	8f 93       	push	r24
    1b62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b64:	1f 92       	push	r1
    1b66:	8f 93       	push	r24
    1b68:	89 85       	ldd	r24, Y+9	; 0x09
    1b6a:	1f 92       	push	r1
    1b6c:	8f 93       	push	r24
    1b6e:	86 e4       	ldi	r24, 0x46	; 70
    1b70:	93 e0       	ldi	r25, 0x03	; 3
    1b72:	9f 93       	push	r25
    1b74:	8f 93       	push	r24
    1b76:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
                (uint16_t)p->payload[DATA_TEMP_INDEX],(uint16_t)p->payload[DATA_LIGHT_INDEX]);
            break;
    1b7a:	8d b7       	in	r24, 0x3d	; 61
    1b7c:	9e b7       	in	r25, 0x3e	; 62
    1b7e:	08 96       	adiw	r24, 0x08	; 8
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	9e bf       	out	0x3e, r25	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	8d bf       	out	0x3d, r24	; 61
        }

        default:{
        }
    }
}
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	08 95       	ret

00001b90 <parse_serv_msg>:

packet format:
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    1b90:	6f 92       	push	r6
    1b92:	7f 92       	push	r7
    1b94:	8f 92       	push	r8
    1b96:	9f 92       	push	r9
    1b98:	af 92       	push	r10
    1b9a:	bf 92       	push	r11
    1b9c:	cf 92       	push	r12
    1b9e:	df 92       	push	r13
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	69 97       	sbiw	r28, 0x19	; 25
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	8c 01       	movw	r16, r24
    1bbc:	3b 01       	movw	r6, r22
    uint8_t pos = 0;
    uint8_t item = 0;
    uint8_t temp_buf[MAX_BUF_SIZE];
    uint16_t value = 0;
    for (int x = 0; x < len; x ++){
    1bbe:	4b 01       	movw	r8, r22
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    uint8_t pos = 0;
    uint8_t item = 0;
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
packet format:
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    uint8_t pos = 0;
    1bc2:	f1 2c       	mov	r15, r1
    uint8_t item = 0;
    uint8_t temp_buf[MAX_BUF_SIZE];
    uint16_t value = 0;
    for (int x = 0; x < len; x ++){
    1bc4:	a4 2e       	mov	r10, r20
    1bc6:	b1 2c       	mov	r11, r1
    1bc8:	ce 01       	movw	r24, r28
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	6c 01       	movw	r12, r24
    1bce:	c4 01       	movw	r24, r8
    1bd0:	86 19       	sub	r24, r6
    1bd2:	97 09       	sbc	r25, r7
    1bd4:	8a 15       	cp	r24, r10
    1bd6:	9b 05       	cpc	r25, r11
    1bd8:	6c f5       	brge	.+90     	; 0x1c34 <parse_serv_msg+0xa4>
        if(src[x] == ':')
    1bda:	f4 01       	movw	r30, r8
    1bdc:	81 91       	ld	r24, Z+
    1bde:	4f 01       	movw	r8, r30
    1be0:	8a 33       	cpi	r24, 0x3A	; 58
    1be2:	11 f5       	brne	.+68     	; 0x1c28 <parse_serv_msg+0x98>
        {
            value = atoi(temp_buf);
    1be4:	c6 01       	movw	r24, r12
    1be6:	29 8f       	std	Y+25, r18	; 0x19
    1be8:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <atoi>
            //printf("parsed value = %d \r\n", value);
            switch(item)
    1bec:	29 8d       	ldd	r18, Y+25	; 0x19
    1bee:	21 30       	cpi	r18, 0x01	; 1
    1bf0:	59 f0       	breq	.+22     	; 0x1c08 <parse_serv_msg+0x78>
    1bf2:	38 f0       	brcs	.+14     	; 0x1c02 <parse_serv_msg+0x72>
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	61 f0       	breq	.+24     	; 0x1c10 <parse_serv_msg+0x80>
    1bf8:	23 30       	cpi	r18, 0x03	; 3
    1bfa:	61 f4       	brne	.+24     	; 0x1c14 <parse_serv_msg+0x84>
                }

                case 3: // hop_num
                {
                    // get message hop number
                     parsed_packet->num_hops = value;
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	84 83       	std	Z+4, r24	; 0x04
                    break;
    1c00:	09 c0       	rjmp	.+18     	; 0x1c14 <parse_serv_msg+0x84>
            //printf("parsed value = %d \r\n", value);
            switch(item)
            {
                case 0: // mac_addr
                {
                    parsed_packet->source_id = value;
    1c02:	f8 01       	movw	r30, r16
    1c04:	80 83       	st	Z, r24
                    break;
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <parse_serv_msg+0x84>
                }

                case 1: // seq_num
                {              
                     // get seq_num
                     parsed_packet->seq_num = value;
    1c08:	f8 01       	movw	r30, r16
    1c0a:	82 83       	std	Z+2, r24	; 0x02
    1c0c:	93 83       	std	Z+3, r25	; 0x03
                    break;
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <parse_serv_msg+0x84>
                }

                case 2: // msg_id
                {
                    // get message type
                    parsed_packet->type = value;
    1c10:	f8 01       	movw	r30, r16
    1c12:	81 83       	std	Z+1, r24	; 0x01

packet format:
mac_addr:seq_num:msg_id:hop_num:payload
*/
void parse_serv_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    1c14:	f6 01       	movw	r30, r12
    1c16:	8e 2f       	mov	r24, r30
    1c18:	8c 19       	sub	r24, r12
                     parsed_packet->num_hops = value;
                    break;
                }
            }
            // clear buffer
            for(uint8_t i = 0; i < pos; i ++)
    1c1a:	8f 15       	cp	r24, r15
    1c1c:	10 f4       	brcc	.+4      	; 0x1c22 <parse_serv_msg+0x92>
            {
                temp_buf[i] = 0;
    1c1e:	11 92       	st	Z+, r1
    1c20:	fa cf       	rjmp	.-12     	; 0x1c16 <parse_serv_msg+0x86>
            }
            item += 1;
    1c22:	2f 5f       	subi	r18, 0xFF	; 255
            pos = 0;
    1c24:	f1 2c       	mov	r15, r1
    1c26:	d3 cf       	rjmp	.-90     	; 0x1bce <parse_serv_msg+0x3e>
        }
        else{
            temp_buf[pos] = src[x];
    1c28:	f6 01       	movw	r30, r12
    1c2a:	ef 0d       	add	r30, r15
    1c2c:	f1 1d       	adc	r31, r1
    1c2e:	80 83       	st	Z, r24
            pos += 1;
    1c30:	f3 94       	inc	r15
    1c32:	cd cf       	rjmp	.-102    	; 0x1bce <parse_serv_msg+0x3e>
    Payload has not been parsed into packet.
    Once the loop has gone through the length of the message, 
    the payload will be stored in temp_buf. 
    Need to parse payload depending on message type
    */
    switch(parsed_packet->type)
    1c34:	f8 01       	movw	r30, r16
    1c36:	81 81       	ldd	r24, Z+1	; 0x01
    1c38:	86 30       	cpi	r24, 0x06	; 6
    1c3a:	39 f0       	breq	.+14     	; 0x1c4a <parse_serv_msg+0xba>
    1c3c:	18 f4       	brcc	.+6      	; 0x1c44 <parse_serv_msg+0xb4>
    1c3e:	85 30       	cpi	r24, 0x05	; 5
    1c40:	b1 f0       	breq	.+44     	; 0x1c6e <parse_serv_msg+0xde>
    1c42:	11 c0       	rjmp	.+34     	; 0x1c66 <parse_serv_msg+0xd6>
    1c44:	89 30       	cpi	r24, 0x09	; 9
    1c46:	78 f4       	brcc	.+30     	; 0x1c66 <parse_serv_msg+0xd6>
    1c48:	12 c0       	rjmp	.+36     	; 0x1c6e <parse_serv_msg+0xde>
    {
        case MSG_CMD:
        {
            parsed_packet->payload[0] = temp_buf[0] - '0';
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	80 53       	subi	r24, 0x30	; 48
    1c4e:	f8 01       	movw	r30, r16
    1c50:	81 87       	std	Z+9, r24	; 0x09
            parsed_packet->payload[1] = temp_buf[1] - '0';
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	80 53       	subi	r24, 0x30	; 48
    1c56:	82 87       	std	Z+10, r24	; 0x0a
            parsed_packet->payload[2] = temp_buf[2] - '0';
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	80 53       	subi	r24, 0x30	; 48
    1c5c:	83 87       	std	Z+11, r24	; 0x0b
            parsed_packet->payload[3] = temp_buf[3] - '0';
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	80 53       	subi	r24, 0x30	; 48
    1c62:	84 87       	std	Z+12, r24	; 0x0c
            break;
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <parse_serv_msg+0xde>
            // what is the payload going to look like here?
            break;
        }

        default:{
            printf("invalid msg_type \r\n");
    1c66:	8d e5       	ldi	r24, 0x5D	; 93
    1c68:	93 e0       	ldi	r25, 0x03	; 3
    1c6a:	0e 94 0f 33 	call	0x661e	; 0x661e <puts>
        }
    }
}
    1c6e:	69 96       	adiw	r28, 0x19	; 25
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	ff 90       	pop	r15
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	bf 90       	pop	r11
    1c8a:	af 90       	pop	r10
    1c8c:	9f 90       	pop	r9
    1c8e:	8f 90       	pop	r8
    1c90:	7f 90       	pop	r7
    1c92:	6f 90       	pop	r6
    1c94:	08 95       	ret

00001c96 <parse_msg>:
src - the pointer to the received data buffer
len - the length of the received data buffer
msg_type - the type of message
*/
void parse_msg(packet *parsed_packet, uint8_t *src, uint8_t len)
{
    1c96:	fc 01       	movw	r30, r24
    1c98:	db 01       	movw	r26, r22
    uint8_t pos = 0;
    uint8_t item = 0;
    uint8_t temp_buf[MAX_BUF_SIZE];

    parsed_packet->source_id = src[0];
    1c9a:	8c 91       	ld	r24, X
    1c9c:	80 83       	st	Z, r24
    parsed_packet->seq_num = src[1];
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	8c 91       	ld	r24, X
    1ca2:	11 97       	sbiw	r26, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	93 83       	std	Z+3, r25	; 0x03
    1ca8:	82 83       	std	Z+2, r24	; 0x02
    parsed_packet->type = src[2];
    1caa:	12 96       	adiw	r26, 0x02	; 2
    1cac:	8c 91       	ld	r24, X
    1cae:	12 97       	sbiw	r26, 0x02	; 2
    1cb0:	81 83       	std	Z+1, r24	; 0x01
    parsed_packet->num_hops = src[3];
    1cb2:	13 96       	adiw	r26, 0x03	; 3
    1cb4:	9c 91       	ld	r25, X
    1cb6:	13 97       	sbiw	r26, 0x03	; 3
    1cb8:	94 83       	std	Z+4, r25	; 0x04
    Payload has not been parsed into packet.
    Once the loop has gone through the length of the message, 
    the payload will be stored in temp_buf. 
    Need to parse payload depending on message type
    */
    switch(parsed_packet->type)
    1cba:	86 30       	cpi	r24, 0x06	; 6
    1cbc:	91 f0       	breq	.+36     	; 0x1ce2 <parse_msg+0x4c>
    1cbe:	70 f4       	brcc	.+28     	; 0x1cdc <parse_msg+0x46>
    1cc0:	85 30       	cpi	r24, 0x05	; 5
    1cc2:	f9 f4       	brne	.+62     	; 0x1d02 <parse_msg+0x6c>
            break;
        }

        case MSG_DATA:
        {
            parsed_packet->payload[DATA_PWR_INDEX] = (uint16_t)src[4];
    1cc4:	14 96       	adiw	r26, 0x04	; 4
    1cc6:	8c 91       	ld	r24, X
    1cc8:	14 97       	sbiw	r26, 0x04	; 4
    1cca:	81 87       	std	Z+9, r24	; 0x09
            parsed_packet->payload[DATA_TEMP_INDEX] = (uint16_t)src[6];
    1ccc:	16 96       	adiw	r26, 0x06	; 6
    1cce:	8c 91       	ld	r24, X
    1cd0:	16 97       	sbiw	r26, 0x06	; 6
    1cd2:	83 87       	std	Z+11, r24	; 0x0b
            parsed_packet->payload[DATA_LIGHT_INDEX] = (uint16_t)src[8];
    1cd4:	18 96       	adiw	r26, 0x08	; 8
    1cd6:	8c 91       	ld	r24, X
    1cd8:	85 87       	std	Z+13, r24	; 0x0d
            //printf("payload:%d,%d,%d\r\n", src[4],src[6],src[8]);
            break;
    1cda:	08 95       	ret
    Payload has not been parsed into packet.
    Once the loop has gone through the length of the message, 
    the payload will be stored in temp_buf. 
    Need to parse payload depending on message type
    */
    switch(parsed_packet->type)
    1cdc:	89 30       	cpi	r24, 0x09	; 9
    1cde:	a8 f0       	brcs	.+42     	; 0x1d0a <parse_msg+0x74>
    1ce0:	10 c0       	rjmp	.+32     	; 0x1d02 <parse_msg+0x6c>
    {
        case MSG_CMD:
        {
            parsed_packet->payload[0] = src[4];
    1ce2:	14 96       	adiw	r26, 0x04	; 4
    1ce4:	8c 91       	ld	r24, X
    1ce6:	14 97       	sbiw	r26, 0x04	; 4
    1ce8:	81 87       	std	Z+9, r24	; 0x09
            parsed_packet->payload[1] = src[5];
    1cea:	15 96       	adiw	r26, 0x05	; 5
    1cec:	8c 91       	ld	r24, X
    1cee:	15 97       	sbiw	r26, 0x05	; 5
    1cf0:	82 87       	std	Z+10, r24	; 0x0a
            parsed_packet->payload[2] = src[6];
    1cf2:	16 96       	adiw	r26, 0x06	; 6
    1cf4:	8c 91       	ld	r24, X
    1cf6:	16 97       	sbiw	r26, 0x06	; 6
    1cf8:	83 87       	std	Z+11, r24	; 0x0b
            parsed_packet->payload[3] = src[7];
    1cfa:	17 96       	adiw	r26, 0x07	; 7
    1cfc:	8c 91       	ld	r24, X
    1cfe:	84 87       	std	Z+12, r24	; 0x0c
            break;
    1d00:	08 95       	ret
            // what is the payload going to look like here?
            break;
        }

        default:{
            printf("invalid msg_type \r\n");
    1d02:	8d e5       	ldi	r24, 0x5D	; 93
    1d04:	93 e0       	ldi	r25, 0x03	; 3
    1d06:	0c 94 0f 33 	jmp	0x661e	; 0x661e <puts>
    1d0a:	08 95       	ret

00001d0c <packet_queue_init>:

#include <packet_queue.h>

void packet_queue_init(packet_queue* pq) {
	pq->front = 0;
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	e8 57       	subi	r30, 0x78	; 120
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	10 82       	st	Z, r1
	pq->back = 0;
    1d14:	31 96       	adiw	r30, 0x01	; 1
    1d16:	10 82       	st	Z, r1
	pq->size = 0;
    1d18:	31 96       	adiw	r30, 0x01	; 1
    1d1a:	10 82       	st	Z, r1
    1d1c:	08 95       	ret

00001d1e <push>:
}

// NEED TO test for all types of payload
void push(packet_queue* pq, packet* p) {
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	fc 01       	movw	r30, r24
    1d24:	db 01       	movw	r26, r22
	if(pq->size < MAX_PACKET_BUFFER) {
    1d26:	ec 01       	movw	r28, r24
    1d28:	c6 57       	subi	r28, 0x76	; 118
    1d2a:	df 4f       	sbci	r29, 0xFF	; 255
    1d2c:	98 81       	ld	r25, Y
    1d2e:	98 30       	cpi	r25, 0x08	; 8
    1d30:	d8 f5       	brcc	.+118    	; 0x1da8 <push+0x8a>
		pq->size++;
    1d32:	9f 5f       	subi	r25, 0xFF	; 255
    1d34:	98 83       	st	Y, r25

		pq->buffer[pq->back].type 			= p->type;
    1d36:	21 97       	sbiw	r28, 0x01	; 1
    1d38:	98 81       	ld	r25, Y
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	8c 91       	ld	r24, X
    1d3e:	11 97       	sbiw	r26, 0x01	; 1
    1d40:	21 e1       	ldi	r18, 0x11	; 17
    1d42:	92 9f       	mul	r25, r18
    1d44:	e0 0d       	add	r30, r0
    1d46:	f1 1d       	adc	r31, r1
    1d48:	11 24       	eor	r1, r1
    1d4a:	81 83       	std	Z+1, r24	; 0x01
		pq->buffer[pq->back].source_id 		= p->source_id;
    1d4c:	8c 91       	ld	r24, X
    1d4e:	80 83       	st	Z, r24
		pq->buffer[pq->back].seq_num 		= p->seq_num;
    1d50:	12 96       	adiw	r26, 0x02	; 2
    1d52:	2d 91       	ld	r18, X+
    1d54:	3c 91       	ld	r19, X
    1d56:	13 97       	sbiw	r26, 0x03	; 3
    1d58:	33 83       	std	Z+3, r19	; 0x03
    1d5a:	22 83       	std	Z+2, r18	; 0x02
		pq->buffer[pq->back].num_hops 		= p->num_hops;
    1d5c:	14 96       	adiw	r26, 0x04	; 4
    1d5e:	8c 91       	ld	r24, X
    1d60:	14 97       	sbiw	r26, 0x04	; 4
    1d62:	84 83       	std	Z+4, r24	; 0x04

		pq->buffer[pq->back].payload[0]	= p->payload[0];
    1d64:	19 96       	adiw	r26, 0x09	; 9
    1d66:	8c 91       	ld	r24, X
    1d68:	19 97       	sbiw	r26, 0x09	; 9
    1d6a:	81 87       	std	Z+9, r24	; 0x09
		pq->buffer[pq->back].payload[1]	= p->payload[1];
    1d6c:	1a 96       	adiw	r26, 0x0a	; 10
    1d6e:	8c 91       	ld	r24, X
    1d70:	1a 97       	sbiw	r26, 0x0a	; 10
    1d72:	82 87       	std	Z+10, r24	; 0x0a
		pq->buffer[pq->back].payload[2]	= p->payload[2];
    1d74:	1b 96       	adiw	r26, 0x0b	; 11
    1d76:	8c 91       	ld	r24, X
    1d78:	1b 97       	sbiw	r26, 0x0b	; 11
    1d7a:	83 87       	std	Z+11, r24	; 0x0b
		pq->buffer[pq->back].payload[3]	= p->payload[3];
    1d7c:	1c 96       	adiw	r26, 0x0c	; 12
    1d7e:	8c 91       	ld	r24, X
    1d80:	1c 97       	sbiw	r26, 0x0c	; 12
    1d82:	84 87       	std	Z+12, r24	; 0x0c
		pq->buffer[pq->back].payload[4]	= p->payload[4];
    1d84:	1d 96       	adiw	r26, 0x0d	; 13
    1d86:	8c 91       	ld	r24, X
    1d88:	1d 97       	sbiw	r26, 0x0d	; 13
    1d8a:	85 87       	std	Z+13, r24	; 0x0d
		pq->buffer[pq->back].payload[5]	= p->payload[5];
    1d8c:	1e 96       	adiw	r26, 0x0e	; 14
    1d8e:	8c 91       	ld	r24, X
    1d90:	1e 97       	sbiw	r26, 0x0e	; 14
    1d92:	86 87       	std	Z+14, r24	; 0x0e
		pq->buffer[pq->back].payload[6]	= p->payload[6];
    1d94:	1f 96       	adiw	r26, 0x0f	; 15
    1d96:	8c 91       	ld	r24, X
    1d98:	1f 97       	sbiw	r26, 0x0f	; 15
    1d9a:	87 87       	std	Z+15, r24	; 0x0f
		pq->buffer[pq->back].payload[7]	= p->payload[7];
    1d9c:	50 96       	adiw	r26, 0x10	; 16
    1d9e:	8c 91       	ld	r24, X
    1da0:	80 8b       	std	Z+16, r24	; 0x10

		pq->back++;
    1da2:	9f 5f       	subi	r25, 0xFF	; 255
		pq->back %= MAX_PACKET_BUFFER;
    1da4:	97 70       	andi	r25, 0x07	; 7
    1da6:	98 83       	st	Y, r25
	}
	return;
}
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <pop>:

// NEED To test for all types of payload
void pop(packet_queue* pq, packet* p) {
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	db 01       	movw	r26, r22
	if(pq->size > 0) {
    1db4:	bc 01       	movw	r22, r24
    1db6:	66 57       	subi	r22, 0x76	; 118
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	eb 01       	movw	r28, r22
    1dbc:	28 81       	ld	r18, Y
    1dbe:	22 23       	and	r18, r18
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <pop+0x16>
    1dc2:	8e c0       	rjmp	.+284    	; 0x1ee0 <pop+0x132>
		p->type 		= pq->buffer[pq->front].type;
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e8 57       	subi	r30, 0x78	; 120
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	30 81       	ld	r19, Z
    1dcc:	21 e1       	ldi	r18, 0x11	; 17
    1dce:	ac 01       	movw	r20, r24
    1dd0:	23 9f       	mul	r18, r19
    1dd2:	40 0d       	add	r20, r0
    1dd4:	51 1d       	adc	r21, r1
    1dd6:	11 24       	eor	r1, r1
    1dd8:	ea 01       	movw	r28, r20
    1dda:	39 81       	ldd	r19, Y+1	; 0x01
    1ddc:	11 96       	adiw	r26, 0x01	; 1
    1dde:	3c 93       	st	X, r19
    1de0:	11 97       	sbiw	r26, 0x01	; 1
		p->source_id 	= pq->buffer[pq->front].source_id;
    1de2:	30 81       	ld	r19, Z
    1de4:	ac 01       	movw	r20, r24
    1de6:	23 9f       	mul	r18, r19
    1de8:	40 0d       	add	r20, r0
    1dea:	51 1d       	adc	r21, r1
    1dec:	11 24       	eor	r1, r1
    1dee:	ea 01       	movw	r28, r20
    1df0:	38 81       	ld	r19, Y
    1df2:	3c 93       	st	X, r19
		p->seq_num 		= pq->buffer[pq->front].seq_num;
    1df4:	30 81       	ld	r19, Z
    1df6:	ac 01       	movw	r20, r24
    1df8:	23 9f       	mul	r18, r19
    1dfa:	40 0d       	add	r20, r0
    1dfc:	51 1d       	adc	r21, r1
    1dfe:	11 24       	eor	r1, r1
    1e00:	ea 01       	movw	r28, r20
    1e02:	4a 81       	ldd	r20, Y+2	; 0x02
    1e04:	5b 81       	ldd	r21, Y+3	; 0x03
    1e06:	13 96       	adiw	r26, 0x03	; 3
    1e08:	5c 93       	st	X, r21
    1e0a:	4e 93       	st	-X, r20
    1e0c:	12 97       	sbiw	r26, 0x02	; 2
		p->num_hops 	= pq->buffer[pq->front].num_hops;
    1e0e:	30 81       	ld	r19, Z
    1e10:	ac 01       	movw	r20, r24
    1e12:	23 9f       	mul	r18, r19
    1e14:	40 0d       	add	r20, r0
    1e16:	51 1d       	adc	r21, r1
    1e18:	11 24       	eor	r1, r1
    1e1a:	ea 01       	movw	r28, r20
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	14 96       	adiw	r26, 0x04	; 4
    1e20:	3c 93       	st	X, r19
    1e22:	14 97       	sbiw	r26, 0x04	; 4

		p->payload[0]	= pq->buffer[pq->front].payload[0];
    1e24:	30 81       	ld	r19, Z
    1e26:	ac 01       	movw	r20, r24
    1e28:	23 9f       	mul	r18, r19
    1e2a:	40 0d       	add	r20, r0
    1e2c:	51 1d       	adc	r21, r1
    1e2e:	11 24       	eor	r1, r1
    1e30:	ea 01       	movw	r28, r20
    1e32:	39 85       	ldd	r19, Y+9	; 0x09
    1e34:	19 96       	adiw	r26, 0x09	; 9
    1e36:	3c 93       	st	X, r19
    1e38:	19 97       	sbiw	r26, 0x09	; 9
		p->payload[1]	= pq->buffer[pq->front].payload[1];
    1e3a:	30 81       	ld	r19, Z
    1e3c:	ac 01       	movw	r20, r24
    1e3e:	23 9f       	mul	r18, r19
    1e40:	40 0d       	add	r20, r0
    1e42:	51 1d       	adc	r21, r1
    1e44:	11 24       	eor	r1, r1
    1e46:	ea 01       	movw	r28, r20
    1e48:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e4a:	1a 96       	adiw	r26, 0x0a	; 10
    1e4c:	3c 93       	st	X, r19
    1e4e:	1a 97       	sbiw	r26, 0x0a	; 10
		p->payload[2]	= pq->buffer[pq->front].payload[2];
    1e50:	30 81       	ld	r19, Z
    1e52:	ac 01       	movw	r20, r24
    1e54:	23 9f       	mul	r18, r19
    1e56:	40 0d       	add	r20, r0
    1e58:	51 1d       	adc	r21, r1
    1e5a:	11 24       	eor	r1, r1
    1e5c:	ea 01       	movw	r28, r20
    1e5e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e60:	1b 96       	adiw	r26, 0x0b	; 11
    1e62:	3c 93       	st	X, r19
    1e64:	1b 97       	sbiw	r26, 0x0b	; 11
		p->payload[3]	= pq->buffer[pq->front].payload[3];
    1e66:	30 81       	ld	r19, Z
    1e68:	ac 01       	movw	r20, r24
    1e6a:	23 9f       	mul	r18, r19
    1e6c:	40 0d       	add	r20, r0
    1e6e:	51 1d       	adc	r21, r1
    1e70:	11 24       	eor	r1, r1
    1e72:	ea 01       	movw	r28, r20
    1e74:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e76:	1c 96       	adiw	r26, 0x0c	; 12
    1e78:	3c 93       	st	X, r19
    1e7a:	1c 97       	sbiw	r26, 0x0c	; 12
		p->payload[4]	= pq->buffer[pq->front].payload[4];
    1e7c:	30 81       	ld	r19, Z
    1e7e:	ac 01       	movw	r20, r24
    1e80:	23 9f       	mul	r18, r19
    1e82:	40 0d       	add	r20, r0
    1e84:	51 1d       	adc	r21, r1
    1e86:	11 24       	eor	r1, r1
    1e88:	ea 01       	movw	r28, r20
    1e8a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e8c:	1d 96       	adiw	r26, 0x0d	; 13
    1e8e:	3c 93       	st	X, r19
    1e90:	1d 97       	sbiw	r26, 0x0d	; 13
		p->payload[5]	= pq->buffer[pq->front].payload[5];
    1e92:	30 81       	ld	r19, Z
    1e94:	ac 01       	movw	r20, r24
    1e96:	23 9f       	mul	r18, r19
    1e98:	40 0d       	add	r20, r0
    1e9a:	51 1d       	adc	r21, r1
    1e9c:	11 24       	eor	r1, r1
    1e9e:	ea 01       	movw	r28, r20
    1ea0:	3e 85       	ldd	r19, Y+14	; 0x0e
    1ea2:	1e 96       	adiw	r26, 0x0e	; 14
    1ea4:	3c 93       	st	X, r19
    1ea6:	1e 97       	sbiw	r26, 0x0e	; 14
		p->payload[6]	= pq->buffer[pq->front].payload[6];
    1ea8:	30 81       	ld	r19, Z
    1eaa:	ac 01       	movw	r20, r24
    1eac:	23 9f       	mul	r18, r19
    1eae:	40 0d       	add	r20, r0
    1eb0:	51 1d       	adc	r21, r1
    1eb2:	11 24       	eor	r1, r1
    1eb4:	ea 01       	movw	r28, r20
    1eb6:	3f 85       	ldd	r19, Y+15	; 0x0f
    1eb8:	1f 96       	adiw	r26, 0x0f	; 15
    1eba:	3c 93       	st	X, r19
    1ebc:	1f 97       	sbiw	r26, 0x0f	; 15
		p->payload[7]	= pq->buffer[pq->front].payload[7];
    1ebe:	30 81       	ld	r19, Z
    1ec0:	23 9f       	mul	r18, r19
    1ec2:	80 0d       	add	r24, r0
    1ec4:	91 1d       	adc	r25, r1
    1ec6:	11 24       	eor	r1, r1
    1ec8:	ec 01       	movw	r28, r24
    1eca:	88 89       	ldd	r24, Y+16	; 0x10
    1ecc:	50 96       	adiw	r26, 0x10	; 16
    1ece:	8c 93       	st	X, r24

		pq->size--;
    1ed0:	db 01       	movw	r26, r22
    1ed2:	8c 91       	ld	r24, X
    1ed4:	81 50       	subi	r24, 0x01	; 1
    1ed6:	8c 93       	st	X, r24
		pq->front++;
    1ed8:	80 81       	ld	r24, Z
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
		pq->front %= MAX_PACKET_BUFFER;	
    1edc:	87 70       	andi	r24, 0x07	; 7
    1ede:	80 83       	st	Z, r24
	}
}
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <in_sequence_pool>:
 * @param sp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_sequence_pool(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	21 91       	ld	r18, Z+
    1eea:	cf 01       	movw	r24, r30
    1eec:	3e 2f       	mov	r19, r30
    1eee:	38 1b       	sub	r19, r24
    1ef0:	32 17       	cp	r19, r18
    1ef2:	28 f4       	brcc	.+10     	; 0x1efe <in_sequence_pool+0x18>
        if(sp->node_id[i] == node_address) {
    1ef4:	31 91       	ld	r19, Z+
    1ef6:	36 13       	cpse	r19, r22
    1ef8:	f9 cf       	rjmp	.-14     	; 0x1eec <in_sequence_pool+0x6>
            return (int8_t)1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return (int8_t)-1;
}
    1efc:	08 95       	ret
    for(uint8_t i = 0; i < sp->size; i++) {
        if(sp->node_id[i] == node_address) {
            return (int8_t)1;
        }
    }
    return (int8_t)-1;
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
    1f00:	08 95       	ret

00001f02 <get_sequence_pool_index>:
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1f02:	fc 01       	movw	r30, r24
    1f04:	81 91       	ld	r24, Z+
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	98 17       	cp	r25, r24
    1f0a:	39 f0       	breq	.+14     	; 0x1f1a <get_sequence_pool_index+0x18>
        if(sp->node_id[i] == node_address) {
    1f0c:	21 91       	ld	r18, Z+
    1f0e:	26 13       	cpse	r18, r22
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <get_sequence_pool_index+0x14>
            return i;
    1f12:	89 2f       	mov	r24, r25
    1f14:	08 95       	ret
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1f16:	9f 5f       	subi	r25, 0xFF	; 255
    1f18:	f7 cf       	rjmp	.-18     	; 0x1f08 <get_sequence_pool_index+0x6>
        if(sp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
}
    1f1c:	08 95       	ret

00001f1e <get_sequence_number>:

uint16_t get_sequence_number(sequence_pool_t *sp, uint8_t node_address) {
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	ec 01       	movw	r28, r24
    int8_t index = get_sequence_pool_index(sp, node_address);
    1f24:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <get_sequence_pool_index>
    if(index != -1) {
    1f28:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2a:	41 f0       	breq	.+16     	; 0x1f3c <get_sequence_number+0x1e>
        return sp->seq_nums[index];
    1f2c:	92 e0       	ldi	r25, 0x02	; 2
    1f2e:	89 02       	muls	r24, r25
    1f30:	c0 0d       	add	r28, r0
    1f32:	d1 1d       	adc	r29, r1
    1f34:	11 24       	eor	r1, r1
    1f36:	8c 81       	ldd	r24, Y+4	; 0x04
    1f38:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <get_sequence_number+0x22>
    }
    return 0;
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
}
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <add_to_sequence_pool>:
 * @param sp - sequence pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param seq_num - sequence number of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    if((sp->size < MAX_POOL) && (in_sequence_pool(sp, node_address) == -1)) {
    1f52:	fc 01       	movw	r30, r24
    1f54:	c0 81       	ld	r28, Z
    1f56:	c8 30       	cpi	r28, 0x08	; 8
    1f58:	d8 f4       	brcc	.+54     	; 0x1f90 <add_to_sequence_pool+0x4a>
    1f5a:	7a 01       	movw	r14, r20
    1f5c:	d6 2f       	mov	r29, r22
    1f5e:	8c 01       	movw	r16, r24
    1f60:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <in_sequence_pool>
    1f64:	8f 3f       	cpi	r24, 0xFF	; 255
    1f66:	a1 f4       	brne	.+40     	; 0x1f90 <add_to_sequence_pool+0x4a>
        uint8_t index = sp->size;
        sp->size++;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	8c 0f       	add	r24, r28
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	80 83       	st	Z, r24
        sp->node_id[index] = node_address;
    1f70:	2c 2f       	mov	r18, r28
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	d1 83       	std	Z+1, r29	; 0x01
        sp->seq_nums[index] = seq_num;
    1f7a:	2e 5f       	subi	r18, 0xFE	; 254
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	22 0f       	add	r18, r18
    1f80:	33 1f       	adc	r19, r19
    1f82:	f8 01       	movw	r30, r16
    1f84:	e2 0f       	add	r30, r18
    1f86:	f3 1f       	adc	r31, r19
    1f88:	f1 82       	std	Z+1, r15	; 0x01
    1f8a:	e0 82       	st	Z, r14
        return 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <add_to_sequence_pool+0x4c>
    }
    return -1;
    1f90:	8f ef       	ldi	r24, 0xFF	; 255
}
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	08 95       	ret

00001fa0 <update_sequence_pool>:
 * @param sp - sequence pool to be updated
 * @param node_address - node whose sequence number needs updating
 * @param seq_num - new sequence number of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	ec 01       	movw	r28, r24
    1faa:	8a 01       	movw	r16, r20
    int8_t index = get_sequence_pool_index(sp, node_address);
    1fac:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <get_sequence_pool_index>
    if(index >= 0) {
    1fb0:	87 fd       	sbrc	r24, 7
    1fb2:	09 c0       	rjmp	.+18     	; 0x1fc6 <update_sequence_pool+0x26>
        sp->seq_nums[index] = seq_num;
    1fb4:	92 e0       	ldi	r25, 0x02	; 2
    1fb6:	89 02       	muls	r24, r25
    1fb8:	c0 0d       	add	r28, r0
    1fba:	d1 1d       	adc	r29, r1
    1fbc:	11 24       	eor	r1, r1
    1fbe:	1d 83       	std	Y+5, r17	; 0x05
    1fc0:	0c 83       	std	Y+4, r16	; 0x04
        return 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <update_sequence_pool+0x28>
    }
    return -1;
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
}
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	1f 91       	pop	r17
    1fce:	0f 91       	pop	r16
    1fd0:	08 95       	ret

00001fd2 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1fd2:	90 91 41 01 	lds	r25, 0x0141
    1fd6:	9f 71       	andi	r25, 0x1F	; 31
    1fd8:	9f 31       	cpi	r25, 0x1F	; 31
    1fda:	d9 f3       	breq	.-10     	; 0x1fd2 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1fdc:	80 93 42 01 	sts	0x0142, r24
    1fe0:	08 95       	ret

00001fe2 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 fc 15 	sts	0x15FC, r24
    1fe8:	08 95       	ret

00001fea <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    1fea:	10 92 fc 15 	sts	0x15FC, r1
    1fee:	08 95       	ret

00001ff0 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1ff0:	80 91 41 01 	lds	r24, 0x0141
    1ff4:	8f 71       	andi	r24, 0x1F	; 31
    1ff6:	8f 31       	cpi	r24, 0x1F	; 31
    1ff8:	d9 f3       	breq	.-10     	; 0x1ff0 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1ffa:	80 91 41 01 	lds	r24, 0x0141
    1ffe:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    2000:	e1 f0       	breq	.+56     	; 0x203a <rf_power_down+0x4a>
    2002:	8f 30       	cpi	r24, 0x0F	; 15
    2004:	d1 f0       	breq	.+52     	; 0x203a <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    2006:	80 91 41 01 	lds	r24, 0x0141
    200a:	8f 71       	andi	r24, 0x1F	; 31
    200c:	88 30       	cpi	r24, 0x08	; 8
    200e:	31 f4       	brne	.+12     	; 0x201c <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    2010:	80 91 39 01 	lds	r24, 0x0139
    2014:	82 60       	ori	r24, 0x02	; 2
    2016:	80 93 39 01 	sts	0x0139, r24
    201a:	0b c0       	rjmp	.+22     	; 0x2032 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    201c:	88 e0       	ldi	r24, 0x08	; 8
    201e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    2022:	80 91 41 01 	lds	r24, 0x0141
    2026:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    2028:	88 30       	cpi	r24, 0x08	; 8
    202a:	d9 f7       	brne	.-10     	; 0x2022 <rf_power_down+0x32>
    202c:	f1 cf       	rjmp	.-30     	; 0x2010 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    202e:	8f 30       	cpi	r24, 0x0F	; 15
    2030:	21 f0       	breq	.+8      	; 0x203a <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    2032:	80 91 41 01 	lds	r24, 0x0141
    2036:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    2038:	d1 f7       	brne	.-12     	; 0x202e <rf_power_down+0x3e>
    203a:	08 95       	ret

0000203c <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    203c:	80 91 41 01 	lds	r24, 0x0141
    2040:	8f 71       	andi	r24, 0x1F	; 31
    2042:	8f 31       	cpi	r24, 0x1F	; 31
    2044:	d9 f3       	breq	.-10     	; 0x203c <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    2046:	80 91 41 01 	lds	r24, 0x0141
    204a:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    204c:	11 f0       	breq	.+4      	; 0x2052 <rf_power_up+0x16>
    204e:	8f 30       	cpi	r24, 0x0F	; 15
    2050:	51 f4       	brne	.+20     	; 0x2066 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    2052:	80 91 39 01 	lds	r24, 0x0139
    2056:	8d 7f       	andi	r24, 0xFD	; 253
    2058:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    205c:	80 91 41 01 	lds	r24, 0x0141
    2060:	8f 71       	andi	r24, 0x1F	; 31
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	d9 f7       	brne	.-10     	; 0x205c <rf_power_up+0x20>
    2066:	08 95       	ret

00002068 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    2068:	e5 e4       	ldi	r30, 0x45	; 69
    206a:	f1 e0       	ldi	r31, 0x01	; 1
    206c:	90 81       	ld	r25, Z
    206e:	90 7f       	andi	r25, 0xF0	; 240
    2070:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    2072:	90 81       	ld	r25, Z
    2074:	8f 70       	andi	r24, 0x0F	; 15
    2076:	98 2b       	or	r25, r24
    2078:	90 83       	st	Z, r25
    207a:	08 95       	ret

0000207c <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    207c:	e7 e5       	ldi	r30, 0x57	; 87
    207e:	f1 e0       	ldi	r31, 0x01	; 1
    2080:	80 81       	ld	r24, Z
    2082:	8d 7f       	andi	r24, 0xFD	; 253
    2084:	80 83       	st	Z, r24
    2086:	08 95       	ret

00002088 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    2088:	e7 e5       	ldi	r30, 0x57	; 87
    208a:	f1 e0       	ldi	r31, 0x01	; 1
    208c:	80 81       	ld	r24, Z
    208e:	82 60       	ori	r24, 0x02	; 2
    2090:	80 83       	st	Z, r24
    2092:	08 95       	ret

00002094 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    2094:	ee e6       	ldi	r30, 0x6E	; 110
    2096:	f1 e0       	ldi	r31, 0x01	; 1
    2098:	80 81       	ld	r24, Z
    209a:	8f 7e       	andi	r24, 0xEF	; 239
    209c:	80 83       	st	Z, r24
    209e:	08 95       	ret

000020a0 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    20a0:	ee e6       	ldi	r30, 0x6E	; 110
    20a2:	f1 e0       	ldi	r31, 0x01	; 1
    20a4:	80 81       	ld	r24, Z
    20a6:	80 61       	ori	r24, 0x10	; 16
    20a8:	80 83       	st	Z, r24
    20aa:	08 95       	ret

000020ac <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    20ac:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    20b0:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    20b4:	90 93 06 16 	sts	0x1606, r25
    20b8:	80 93 05 16 	sts	0x1605, r24
    20bc:	08 95       	ret

000020be <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    20be:	90 93 00 16 	sts	0x1600, r25
    20c2:	80 93 ff 15 	sts	0x15FF, r24
	PHY_CC_CCA &= ~(0x1F);
    20c6:	e8 e4       	ldi	r30, 0x48	; 72
    20c8:	f1 e0       	ldi	r31, 0x01	; 1
    20ca:	80 81       	ld	r24, Z
    20cc:	80 7e       	andi	r24, 0xE0	; 224
    20ce:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    20d0:	80 81       	ld	r24, Z
    20d2:	68 2b       	or	r22, r24
    20d4:	60 83       	st	Z, r22
    20d6:	08 95       	ret

000020d8 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    20d8:	90 93 fa 04 	sts	0x04FA, r25
    20dc:	80 93 f9 04 	sts	0x04F9, r24
    20e0:	08 95       	ret

000020e2 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    20e2:	90 93 f8 04 	sts	0x04F8, r25
    20e6:	80 93 f7 04 	sts	0x04F7, r24
    20ea:	08 95       	ret

000020ec <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	fc 01       	movw	r30, r24
    20f6:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    20f8:	80 e2       	ldi	r24, 0x20	; 32
    20fa:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    20fe:	80 ec       	ldi	r24, 0xC0	; 192
    2100:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    2104:	60 62       	ori	r22, 0x20	; 32
    2106:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    210a:	85 ec       	ldi	r24, 0xC5	; 197
    210c:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    2110:	87 ea       	ldi	r24, 0xA7	; 167
    2112:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    2116:	80 e8       	ldi	r24, 0x80	; 128
    2118:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    211c:	20 93 60 01 	sts	0x0160, r18
    2120:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    2124:	40 93 62 01 	sts	0x0162, r20
    2128:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    212c:	c6 e4       	ldi	r28, 0x46	; 70
    212e:	d1 e0       	ldi	r29, 0x01	; 1
    2130:	08 81       	ld	r16, Y
    2132:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    2134:	98 81       	ld	r25, Y
    2136:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    2138:	30 2f       	mov	r19, r16
    213a:	32 95       	swap	r19
    213c:	36 95       	lsr	r19
    213e:	37 70       	andi	r19, 0x07	; 7
    2140:	60 e4       	ldi	r22, 0x40	; 64
    2142:	36 9f       	mul	r19, r22
    2144:	80 01       	movw	r16, r0
    2146:	11 24       	eor	r1, r1
    2148:	22 95       	swap	r18
    214a:	26 95       	lsr	r18
    214c:	23 70       	andi	r18, 0x03	; 3
    214e:	62 2f       	mov	r22, r18
    2150:	60 2b       	or	r22, r16
    2152:	82 95       	swap	r24
    2154:	86 95       	lsr	r24
    2156:	83 70       	andi	r24, 0x03	; 3
    2158:	70 e1       	ldi	r23, 0x10	; 16
    215a:	87 9f       	mul	r24, r23
    215c:	90 01       	movw	r18, r0
    215e:	11 24       	eor	r1, r1
    2160:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    2162:	92 95       	swap	r25
    2164:	96 95       	lsr	r25
    2166:	93 70       	andi	r25, 0x03	; 3
    2168:	84 e0       	ldi	r24, 0x04	; 4
    216a:	98 9f       	mul	r25, r24
    216c:	b0 01       	movw	r22, r0
    216e:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    2170:	62 2b       	or	r22, r18
    2172:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    2176:	88 81       	ld	r24, Y
    2178:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    217a:	92 95       	swap	r25
    217c:	96 95       	lsr	r25
    217e:	93 70       	andi	r25, 0x03	; 3
    2180:	39 2f       	mov	r19, r25
    2182:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    2184:	98 2f       	mov	r25, r24
    2186:	92 95       	swap	r25
    2188:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    218a:	93 2b       	or	r25, r19
    218c:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    2190:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    219a:	cf ef       	ldi	r28, 0xFF	; 255
    219c:	d5 e1       	ldi	r29, 0x15	; 21
    219e:	f9 83       	std	Y+1, r31	; 0x01
    21a0:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    21a2:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    21a4:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    21a6:	5d 83       	std	Y+5, r21	; 0x05
    21a8:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    21aa:	bf 83       	std	Y+7, r27	; 0x07
    21ac:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    21ae:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	80 93 21 16 	sts	0x1621, r24
	rx_ready = 0;
    21b6:	10 92 40 16 	sts	0x1640, r1
	tx_done = 0;
    21ba:	10 92 10 16 	sts	0x1610, r1

	use_glossy = 0;
    21be:	10 92 fc 15 	sts	0x15FC, r1

} // rf_init() 
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	08 95       	ret

000021cc <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    21cc:	86 e1       	ldi	r24, 0x16	; 22
    21ce:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <rf_cmd>

000021d2 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    21d2:	86 e1       	ldi	r24, 0x16	; 22
    21d4:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <rf_cmd>

000021d8 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    21d8:	88 e0       	ldi	r24, 0x08	; 8
    21da:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>
	rx_ready = 0;
    21de:	10 92 40 16 	sts	0x1640, r1
    21e2:	08 95       	ret

000021e4 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    21e4:	3f 92       	push	r3
    21e6:	4f 92       	push	r4
    21e8:	5f 92       	push	r5
    21ea:	6f 92       	push	r6
    21ec:	7f 92       	push	r7
    21ee:	8f 92       	push	r8
    21f0:	9f 92       	push	r9
    21f2:	af 92       	push	r10
    21f4:	bf 92       	push	r11
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    2208:	80 91 21 16 	lds	r24, 0x1621
    220c:	81 11       	cpse	r24, r1
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    2210:	8f ef       	ldi	r24, 0xFF	; 255
    2212:	26 c1       	rjmp	.+588    	; 0x2460 <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    2214:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    2216:	80 91 01 16 	lds	r24, 0x1601
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	80 93 01 16 	sts	0x1601, r24
	machead->fcf = fcf;
    2220:	90 91 81 01 	lds	r25, 0x0181
    2224:	90 7e       	andi	r25, 0xE0	; 224
    2226:	91 60       	ori	r25, 0x01	; 1
    2228:	20 fb       	bst	r18, 0
    222a:	95 f9       	bld	r25, 5
    222c:	9f 73       	andi	r25, 0x3F	; 63
    222e:	90 64       	ori	r25, 0x40	; 64
    2230:	90 93 81 01 	sts	0x0181, r25
    2234:	88 e8       	ldi	r24, 0x88	; 136
    2236:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    223a:	80 91 fc 15 	lds	r24, 0x15FC
    223e:	88 23       	and	r24, r24
    2240:	d1 f0       	breq	.+52     	; 0x2276 <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    2248:	8a ea       	ldi	r24, 0xAA	; 170
    224a:	9a ea       	ldi	r25, 0xAA	; 170
    224c:	90 93 89 01 	sts	0x0189, r25
    2250:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    2254:	8f ef       	ldi	r24, 0xFF	; 255
    2256:	9f ef       	ldi	r25, 0xFF	; 255
    2258:	90 93 87 01 	sts	0x0187, r25
    225c:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    2260:	20 91 63 01 	lds	r18, 0x0163
    2264:	80 91 62 01 	lds	r24, 0x0162
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	92 2b       	or	r25, r18
    226c:	90 93 85 01 	sts	0x0185, r25
    2270:	80 93 84 01 	sts	0x0184, r24
    2274:	1e c0       	rjmp	.+60     	; 0x22b2 <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    2276:	80 91 01 16 	lds	r24, 0x1601
    227a:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    227e:	80 91 61 01 	lds	r24, 0x0161
    2282:	20 91 60 01 	lds	r18, 0x0160
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	38 2b       	or	r19, r24
    228a:	30 93 89 01 	sts	0x0189, r19
    228e:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    2292:	88 81       	ld	r24, Y
    2294:	99 81       	ldd	r25, Y+1	; 0x01
    2296:	90 93 87 01 	sts	0x0187, r25
    229a:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    229e:	80 91 63 01 	lds	r24, 0x0163
    22a2:	20 91 62 01 	lds	r18, 0x0162
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	38 2b       	or	r19, r24
    22aa:	30 93 85 01 	sts	0x0185, r19
    22ae:	20 93 84 01 	sts	0x0184, r18
    22b2:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    22b4:	4a 81       	ldd	r20, Y+2	; 0x02
    22b6:	55 27       	eor	r21, r21
    22b8:	47 fd       	sbrc	r20, 7
    22ba:	50 95       	com	r21
    22bc:	6b 81       	ldd	r22, Y+3	; 0x03
    22be:	7c 81       	ldd	r23, Y+4	; 0x04
    22c0:	8a e8       	ldi	r24, 0x8A	; 138
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	0e 94 23 32 	call	0x6446	; 0x6446 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	85 5f       	subi	r24, 0xF5	; 245
    22cc:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    22d0:	80 91 41 01 	lds	r24, 0x0141
    22d4:	98 2f       	mov	r25, r24
    22d6:	9f 71       	andi	r25, 0x1F	; 31
    22d8:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    22da:	9f ef       	ldi	r25, 0xFF	; 255
    22dc:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    22de:	92 30       	cpi	r25, 0x02	; 2
    22e0:	b8 f3       	brcs	.-18     	; 0x22d0 <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    22e2:	91 e1       	ldi	r25, 0x11	; 17
    22e4:	39 16       	cp	r3, r25
    22e6:	a1 f3       	breq	.-24     	; 0x22d0 <rf_tx_packet_repeat+0xec>
    22e8:	92 e1       	ldi	r25, 0x12	; 18
    22ea:	39 16       	cp	r3, r25
    22ec:	89 f3       	breq	.-30     	; 0x22d0 <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    22ee:	9f e1       	ldi	r25, 0x1F	; 31
    22f0:	39 16       	cp	r3, r25
    22f2:	71 f3       	breq	.-36     	; 0x22d0 <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    22f4:	98 ef       	ldi	r25, 0xF8	; 248
    22f6:	93 0d       	add	r25, r3
    22f8:	92 30       	cpi	r25, 0x02	; 2
    22fa:	20 f0       	brcs	.+8      	; 0x2304 <rf_tx_packet_repeat+0x120>
    22fc:	8f 70       	andi	r24, 0x0F	; 15
    22fe:	86 30       	cpi	r24, 0x06	; 6
    2300:	09 f0       	breq	.+2      	; 0x2304 <rf_tx_packet_repeat+0x120>
    2302:	86 cf       	rjmp	.-244    	; 0x2210 <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    2304:	86 e1       	ldi	r24, 0x16	; 22
    2306:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	81 11       	cpse	r24, r1
    230e:	0a c0       	rjmp	.+20     	; 0x2324 <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    2310:	89 e0       	ldi	r24, 0x09	; 9
    2312:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>
	if(pRTI->ackRequest)
    2316:	8e 81       	ldd	r24, Y+6	; 0x06
    2318:	88 23       	and	r24, r24
    231a:	91 f0       	breq	.+36     	; 0x2340 <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    231c:	89 e1       	ldi	r24, 0x19	; 25
    231e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>
    2322:	0e c0       	rjmp	.+28     	; 0x2340 <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    2324:	80 91 48 01 	lds	r24, 0x0148
    2328:	80 68       	ori	r24, 0x80	; 128
    232a:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    232e:	80 91 41 01 	lds	r24, 0x0141
    2332:	87 ff       	sbrs	r24, 7
    2334:	fc cf       	rjmp	.-8      	; 0x232e <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    2336:	80 91 41 01 	lds	r24, 0x0141
    233a:	86 ff       	sbrs	r24, 6
    233c:	69 cf       	rjmp	.-302    	; 0x2210 <rf_tx_packet_repeat+0x2c>
    233e:	e8 cf       	rjmp	.-48     	; 0x2310 <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    2340:	61 14       	cp	r6, r1
    2342:	71 04       	cpc	r7, r1
    2344:	a9 f1       	breq	.+106    	; 0x23b0 <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    2346:	88 e0       	ldi	r24, 0x08	; 8
    2348:	96 e1       	ldi	r25, 0x16	; 22
    234a:	0e 94 28 25 	call	0x4a50	; 0x4a50 <nrk_time_get>
		target_t.secs = curr_t.secs;
    234e:	80 91 08 16 	lds	r24, 0x1608
    2352:	90 91 09 16 	lds	r25, 0x1609
    2356:	a0 91 0a 16 	lds	r26, 0x160A
    235a:	b0 91 0b 16 	lds	r27, 0x160B
    235e:	80 93 22 16 	sts	0x1622, r24
    2362:	90 93 23 16 	sts	0x1623, r25
    2366:	a0 93 24 16 	sts	0x1624, r26
    236a:	b0 93 25 16 	sts	0x1625, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    236e:	d3 01       	movw	r26, r6
    2370:	20 e4       	ldi	r18, 0x40	; 64
    2372:	32 e4       	ldi	r19, 0x42	; 66
    2374:	4f e0       	ldi	r20, 0x0F	; 15
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	0e 94 c7 30 	call	0x618e	; 0x618e <__muluhisi3>
    237c:	00 91 0c 16 	lds	r16, 0x160C
    2380:	10 91 0d 16 	lds	r17, 0x160D
    2384:	20 91 0e 16 	lds	r18, 0x160E
    2388:	30 91 0f 16 	lds	r19, 0x160F
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	80 0f       	add	r24, r16
    2392:	91 1f       	adc	r25, r17
    2394:	a2 1f       	adc	r26, r18
    2396:	b3 1f       	adc	r27, r19
    2398:	80 93 26 16 	sts	0x1626, r24
    239c:	90 93 27 16 	sts	0x1627, r25
    23a0:	a0 93 28 16 	sts	0x1628, r26
    23a4:	b0 93 29 16 	sts	0x1629, r27
		nrk_time_compact_nanos(&target_t);
    23a8:	82 e2       	ldi	r24, 0x22	; 34
    23aa:	96 e1       	ldi	r25, 0x16	; 22
    23ac:	0e 94 11 26 	call	0x4c22	; 0x4c22 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    23b0:	10 92 10 16 	sts	0x1610, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    23ba:	41 2c       	mov	r4, r1
    23bc:	51 2c       	mov	r5, r1
    23be:	80 91 10 16 	lds	r24, 0x1610
    23c2:	81 11       	cpse	r24, r1
    23c4:	08 c0       	rjmp	.+16     	; 0x23d6 <rf_tx_packet_repeat+0x1f2>
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	48 1a       	sub	r4, r24
    23ca:	58 0a       	sbc	r5, r24
    23cc:	98 ee       	ldi	r25, 0xE8	; 232
    23ce:	49 16       	cp	r4, r25
    23d0:	9d ef       	ldi	r25, 0xFD	; 253
    23d2:	59 06       	cpc	r5, r25
    23d4:	a1 f7       	brne	.-24     	; 0x23be <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    23d6:	61 14       	cp	r6, r1
    23d8:	71 04       	cpc	r7, r1
    23da:	21 f4       	brne	.+8      	; 0x23e4 <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    23dc:	8e 81       	ldd	r24, Y+6	; 0x06
    23de:	81 11       	cpse	r24, r1
    23e0:	2d c0       	rjmp	.+90     	; 0x243c <rf_tx_packet_repeat+0x258>
    23e2:	32 c0       	rjmp	.+100    	; 0x2448 <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    23e4:	88 e0       	ldi	r24, 0x08	; 8
    23e6:	96 e1       	ldi	r25, 0x16	; 22
    23e8:	0e 94 28 25 	call	0x4a50	; 0x4a50 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    23ec:	80 90 08 16 	lds	r8, 0x1608
    23f0:	90 90 09 16 	lds	r9, 0x1609
    23f4:	a0 90 0a 16 	lds	r10, 0x160A
    23f8:	b0 90 0b 16 	lds	r11, 0x160B
    23fc:	c0 90 0c 16 	lds	r12, 0x160C
    2400:	d0 90 0d 16 	lds	r13, 0x160D
    2404:	e0 90 0e 16 	lds	r14, 0x160E
    2408:	f0 90 0f 16 	lds	r15, 0x160F
    240c:	00 91 22 16 	lds	r16, 0x1622
    2410:	10 91 23 16 	lds	r17, 0x1623
    2414:	20 91 24 16 	lds	r18, 0x1624
    2418:	30 91 25 16 	lds	r19, 0x1625
    241c:	40 91 26 16 	lds	r20, 0x1626
    2420:	50 91 27 16 	lds	r21, 0x1627
    2424:	60 91 28 16 	lds	r22, 0x1628
    2428:	70 91 29 16 	lds	r23, 0x1629
    242c:	81 e4       	ldi	r24, 0x41	; 65
    242e:	96 e1       	ldi	r25, 0x16	; 22
    2430:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <nrk_time_sub>
    2434:	8f 3f       	cpi	r24, 0xFF	; 255
    2436:	09 f0       	breq	.+2      	; 0x243a <rf_tx_packet_repeat+0x256>
    2438:	bb cf       	rjmp	.-138    	; 0x23b0 <rf_tx_packet_repeat+0x1cc>
    243a:	d0 cf       	rjmp	.-96     	; 0x23dc <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    243c:	80 91 42 01 	lds	r24, 0x0142
    2440:	82 95       	swap	r24
    2442:	86 95       	lsr	r24
    2444:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2446:	39 f4       	brne	.+14     	; 0x2456 <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    2448:	88 ee       	ldi	r24, 0xE8	; 232
    244a:	48 16       	cp	r4, r24
    244c:	8d ef       	ldi	r24, 0xFD	; 253
    244e:	58 06       	cpc	r5, r24
    2450:	11 f0       	breq	.+4      	; 0x2456 <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2452:	c1 e0       	ldi	r28, 0x01	; 1
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <rf_tx_packet_repeat+0x274>
    2456:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    2458:	83 2d       	mov	r24, r3
    245a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    245e:	8c 2f       	mov	r24, r28
}
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	ff 90       	pop	r15
    246a:	ef 90       	pop	r14
    246c:	df 90       	pop	r13
    246e:	cf 90       	pop	r12
    2470:	bf 90       	pop	r11
    2472:	af 90       	pop	r10
    2474:	9f 90       	pop	r9
    2476:	8f 90       	pop	r8
    2478:	7f 90       	pop	r7
    247a:	6f 90       	pop	r6
    247c:	5f 90       	pop	r5
    247e:	4f 90       	pop	r4
    2480:	3f 90       	pop	r3
    2482:	08 95       	ret

00002484 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <rf_tx_packet_repeat>

0000248c <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    2490:	80 91 21 16 	lds	r24, 0x1621
    2494:	88 23       	and	r24, r24
    2496:	41 f1       	breq	.+80     	; 0x24e8 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    2498:	80 91 41 01 	lds	r24, 0x0141
    249c:	c8 2f       	mov	r28, r24
    249e:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    24a4:	92 30       	cpi	r25, 0x02	; 2
    24a6:	c0 f3       	brcs	.-16     	; 0x2498 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    24a8:	c1 31       	cpi	r28, 0x11	; 17
    24aa:	b1 f3       	breq	.-20     	; 0x2498 <rf_cca_check+0xc>
    24ac:	c2 31       	cpi	r28, 0x12	; 18
    24ae:	a1 f3       	breq	.-24     	; 0x2498 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    24b0:	cf 31       	cpi	r28, 0x1F	; 31
    24b2:	91 f3       	breq	.-28     	; 0x2498 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    24b4:	c8 30       	cpi	r28, 0x08	; 8
    24b6:	19 f0       	breq	.+6      	; 0x24be <rf_cca_check+0x32>
    24b8:	8f 70       	andi	r24, 0x0F	; 15
    24ba:	86 30       	cpi	r24, 0x06	; 6
    24bc:	a9 f4       	brne	.+42     	; 0x24e8 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    24be:	86 e1       	ldi	r24, 0x16	; 22
    24c0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    24c4:	80 91 48 01 	lds	r24, 0x0148
    24c8:	80 68       	ori	r24, 0x80	; 128
    24ca:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    24ce:	80 91 41 01 	lds	r24, 0x0141
    24d2:	87 ff       	sbrs	r24, 7
    24d4:	fc cf       	rjmp	.-8      	; 0x24ce <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    24d6:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    24da:	8c 2f       	mov	r24, r28
    24dc:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    24e0:	d6 fb       	bst	r29, 6
    24e2:	88 27       	eor	r24, r24
    24e4:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    24e8:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    24f0:	80 91 21 16 	lds	r24, 0x1621
    24f4:	88 23       	and	r24, r24
    24f6:	09 f4       	brne	.+2      	; 0x24fa <rf_rx_packet_nonblock+0xa>
    24f8:	a0 c0       	rjmp	.+320    	; 0x263a <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    24fa:	80 91 40 16 	lds	r24, 0x1640
    24fe:	88 23       	and	r24, r24
    2500:	09 f4       	brne	.+2      	; 0x2504 <rf_rx_packet_nonblock+0x14>
    2502:	99 c0       	rjmp	.+306    	; 0x2636 <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    2504:	80 91 7b 01 	lds	r24, 0x017B
    2508:	e0 91 ff 15 	lds	r30, 0x15FF
    250c:	f0 91 00 16 	lds	r31, 0x1600
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	02 97       	sbiw	r24, 0x02	; 2
    2514:	24 81       	ldd	r18, Z+4	; 0x04
    2516:	33 27       	eor	r19, r19
    2518:	27 fd       	sbrc	r18, 7
    251a:	30 95       	com	r19
    251c:	28 17       	cp	r18, r24
    251e:	39 07       	cpc	r19, r25
    2520:	0c f4       	brge	.+2      	; 0x2524 <rf_rx_packet_nonblock+0x34>
    2522:	8b c0       	rjmp	.+278    	; 0x263a <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    2524:	e0 91 ff 15 	lds	r30, 0x15FF
    2528:	f0 91 00 16 	lds	r31, 0x1600
    252c:	80 91 82 01 	lds	r24, 0x0182
    2530:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    2532:	e0 91 ff 15 	lds	r30, 0x15FF
    2536:	f0 91 00 16 	lds	r31, 0x1600
    253a:	80 91 87 01 	lds	r24, 0x0187
    253e:	90 91 88 01 	lds	r25, 0x0188
    2542:	92 83       	std	Z+2, r25	; 0x02
    2544:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    2546:	e0 91 ff 15 	lds	r30, 0x15FF
    254a:	f0 91 00 16 	lds	r31, 0x1600
    254e:	80 91 7b 01 	lds	r24, 0x017B
    2552:	8b 50       	subi	r24, 0x0B	; 11
    2554:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    2556:	a0 91 ff 15 	lds	r26, 0x15FF
    255a:	b0 91 00 16 	lds	r27, 0x1600
    255e:	e0 91 ff 15 	lds	r30, 0x15FF
    2562:	f0 91 00 16 	lds	r31, 0x1600
    2566:	13 96       	adiw	r26, 0x03	; 3
    2568:	9c 91       	ld	r25, X
    256a:	84 81       	ldd	r24, Z+4	; 0x04
    256c:	89 17       	cp	r24, r25
    256e:	3c f0       	brlt	.+14     	; 0x257e <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    2570:	e0 91 ff 15 	lds	r30, 0x15FF
    2574:	f0 91 00 16 	lds	r31, 0x1600
    2578:	83 81       	ldd	r24, Z+3	; 0x03
    257a:	87 ff       	sbrs	r24, 7
    257c:	0d c0       	rjmp	.+26     	; 0x2598 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    257e:	10 92 40 16 	sts	0x1640, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    2582:	80 91 4c 01 	lds	r24, 0x014C
    2586:	8f 77       	andi	r24, 0x7F	; 127
    2588:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    258c:	80 91 4c 01 	lds	r24, 0x014C
    2590:	80 68       	ori	r24, 0x80	; 128
    2592:	80 93 4c 01 	sts	0x014C, r24
    2596:	51 c0       	rjmp	.+162    	; 0x263a <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    2598:	a0 91 ff 15 	lds	r26, 0x15FF
    259c:	b0 91 00 16 	lds	r27, 0x1600
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    25a0:	e0 91 ff 15 	lds	r30, 0x15FF
    25a4:	f0 91 00 16 	lds	r31, 0x1600
    25a8:	13 96       	adiw	r26, 0x03	; 3
    25aa:	4c 91       	ld	r20, X
    25ac:	55 27       	eor	r21, r21
    25ae:	47 fd       	sbrc	r20, 7
    25b0:	50 95       	com	r21
    25b2:	69 e8       	ldi	r22, 0x89	; 137
    25b4:	71 e0       	ldi	r23, 0x01	; 1
    25b6:	85 81       	ldd	r24, Z+5	; 0x05
    25b8:	96 81       	ldd	r25, Z+6	; 0x06
    25ba:	0e 94 23 32 	call	0x6446	; 0x6446 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    25be:	e0 91 ff 15 	lds	r30, 0x15FF
    25c2:	f0 91 00 16 	lds	r31, 0x1600
    25c6:	80 91 80 01 	lds	r24, 0x0180
    25ca:	85 fb       	bst	r24, 5
    25cc:	88 27       	eor	r24, r24
    25ce:	80 f9       	bld	r24, 0
    25d0:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    25d2:	e0 91 ff 15 	lds	r30, 0x15FF
    25d6:	f0 91 00 16 	lds	r31, 0x1600
    25da:	80 91 47 01 	lds	r24, 0x0147
    25de:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    25e0:	e0 91 ff 15 	lds	r30, 0x15FF
    25e4:	f0 91 00 16 	lds	r31, 0x1600
    25e8:	80 91 46 01 	lds	r24, 0x0146
    25ec:	86 95       	lsr	r24
    25ee:	86 95       	lsr	r24
    25f0:	86 95       	lsr	r24
    25f2:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    25f4:	e0 91 ff 15 	lds	r30, 0x15FF
    25f8:	f0 91 00 16 	lds	r31, 0x1600
    25fc:	80 91 47 01 	lds	r24, 0x0147
    2600:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    2602:	a0 91 ff 15 	lds	r26, 0x15FF
    2606:	b0 91 00 16 	lds	r27, 0x1600
    260a:	e0 91 7b 01 	lds	r30, 0x017B
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	e0 58       	subi	r30, 0x80	; 128
    2612:	fe 4f       	sbci	r31, 0xFE	; 254
    2614:	80 81       	ld	r24, Z
    2616:	1b 96       	adiw	r26, 0x0b	; 11
    2618:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    261a:	10 92 40 16 	sts	0x1640, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    261e:	80 91 4c 01 	lds	r24, 0x014C
    2622:	8f 77       	andi	r24, 0x7F	; 127
    2624:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    2628:	80 91 4c 01 	lds	r24, 0x014C
    262c:	80 68       	ori	r24, 0x80	; 128
    262e:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    263a:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    263c:	08 95       	ret

0000263e <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    263e:	1f 92       	push	r1
    2640:	0f 92       	push	r0
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	0f 92       	push	r0
    2646:	11 24       	eor	r1, r1
    2648:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    264a:	80 e8       	ldi	r24, 0x80	; 128
    264c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2650:	8f 91       	pop	r24
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f 90       	pop	r0
    2658:	1f 90       	pop	r1
    265a:	18 95       	reti

0000265c <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    265c:	1f 92       	push	r1
    265e:	0f 92       	push	r0
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	0f 92       	push	r0
    2664:	11 24       	eor	r1, r1
    2666:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	80 93 10 16 	sts	0x1610, r24
	IRQ_STATUS = (1 << TX_END);
    266e:	80 e4       	ldi	r24, 0x40	; 64
    2670:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    2674:	8f 91       	pop	r24
    2676:	0f 90       	pop	r0
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	0f 90       	pop	r0
    267c:	1f 90       	pop	r1
    267e:	18 95       	reti

00002680 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    2680:	1f 92       	push	r1
    2682:	0f 92       	push	r0
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	0f 92       	push	r0
    2688:	11 24       	eor	r1, r1
    268a:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    268c:	80 e2       	ldi	r24, 0x20	; 32
    268e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2692:	8f 91       	pop	r24
    2694:	0f 90       	pop	r0
    2696:	0f be       	out	0x3f, r0	; 63
    2698:	0f 90       	pop	r0
    269a:	1f 90       	pop	r1
    269c:	18 95       	reti

0000269e <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    269e:	1f 92       	push	r1
    26a0:	0f 92       	push	r0
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	0f 92       	push	r0
    26a6:	11 24       	eor	r1, r1
    26a8:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    26aa:	80 e1       	ldi	r24, 0x10	; 16
    26ac:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    26b0:	8f 91       	pop	r24
    26b2:	0f 90       	pop	r0
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	0f 90       	pop	r0
    26b8:	1f 90       	pop	r1
    26ba:	18 95       	reti

000026bc <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    26bc:	1f 92       	push	r1
    26be:	0f 92       	push	r0
    26c0:	0f b6       	in	r0, 0x3f	; 63
    26c2:	0f 92       	push	r0
    26c4:	11 24       	eor	r1, r1
    26c6:	0b b6       	in	r0, 0x3b	; 59
    26c8:	0f 92       	push	r0
    26ca:	2f 93       	push	r18
    26cc:	3f 93       	push	r19
    26ce:	4f 93       	push	r20
    26d0:	5f 93       	push	r21
    26d2:	6f 93       	push	r22
    26d4:	7f 93       	push	r23
    26d6:	8f 93       	push	r24
    26d8:	9f 93       	push	r25
    26da:	af 93       	push	r26
    26dc:	bf 93       	push	r27
    26de:	ef 93       	push	r30
    26e0:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    26e8:	e0 91 f9 04 	lds	r30, 0x04F9
    26ec:	f0 91 fa 04 	lds	r31, 0x04FA
    26f0:	30 97       	sbiw	r30, 0x00	; 0
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <__vector_59+0x3a>
		rx_start_func();
    26f4:	09 95       	icall

	return;
}
    26f6:	ff 91       	pop	r31
    26f8:	ef 91       	pop	r30
    26fa:	bf 91       	pop	r27
    26fc:	af 91       	pop	r26
    26fe:	9f 91       	pop	r25
    2700:	8f 91       	pop	r24
    2702:	7f 91       	pop	r23
    2704:	6f 91       	pop	r22
    2706:	5f 91       	pop	r21
    2708:	4f 91       	pop	r20
    270a:	3f 91       	pop	r19
    270c:	2f 91       	pop	r18
    270e:	0f 90       	pop	r0
    2710:	0b be       	out	0x3b, r0	; 59
    2712:	0f 90       	pop	r0
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	0f 90       	pop	r0
    2718:	1f 90       	pop	r1
    271a:	18 95       	reti

0000271c <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    271c:	1f 92       	push	r1
    271e:	0f 92       	push	r0
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	0f 92       	push	r0
    2724:	11 24       	eor	r1, r1
    2726:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    272e:	8f 91       	pop	r24
    2730:	0f 90       	pop	r0
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	0f 90       	pop	r0
    2736:	1f 90       	pop	r1
    2738:	18 95       	reti

0000273a <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    273a:	1f 92       	push	r1
    273c:	0f 92       	push	r0
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	0f 92       	push	r0
    2742:	11 24       	eor	r1, r1
    2744:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    274c:	8f 91       	pop	r24
    274e:	0f 90       	pop	r0
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	0f 90       	pop	r0
    2754:	1f 90       	pop	r1
    2756:	18 95       	reti

00002758 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    2758:	e9 e4       	ldi	r30, 0x49	; 73
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    275c:	90 81       	ld	r25, Z
    275e:	90 7f       	andi	r25, 0xF0	; 240
    2760:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    2762:	90 81       	ld	r25, Z
    2764:	8f 70       	andi	r24, 0x0F	; 15
    2766:	98 2b       	or	r25, r24
    2768:	90 83       	st	Z, r25
    276a:	08 95       	ret

0000276c <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    276c:	8f ef       	ldi	r24, 0xFF	; 255
    276e:	08 95       	ret

00002770 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    2770:	08 95       	ret

00002772 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    2772:	08 95       	ret

00002774 <rf_security_disable>:
}



void rf_security_disable()
{
    2774:	08 95       	ret

00002776 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    2776:	8f ef       	ldi	r24, 0xFF	; 255
    2778:	08 95       	ret

0000277a <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    277a:	80 91 fa 15 	lds	r24, 0x15FA
    277e:	90 91 fb 15 	lds	r25, 0x15FB
    2782:	08 95       	ret

00002784 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	08 95       	ret

00002788 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    2788:	08 95       	ret

0000278a <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	08 95       	ret

0000278e <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	08 95       	ret

00002792 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	08 95       	ret

00002796 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    2796:	08 95       	ret

00002798 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    2798:	08 95       	ret

0000279a <rf_test_mode>:
}



void rf_test_mode()
{
    279a:	08 95       	ret

0000279c <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    279c:	08 95       	ret

0000279e <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    279e:	08 95       	ret

000027a0 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    27a0:	08 95       	ret

000027a2 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    27a2:	08 95       	ret

000027a4 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    27a4:	08 95       	ret

000027a6 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    27a6:	e7 e3       	ldi	r30, 0x37	; 55
    27a8:	f1 e0       	ldi	r31, 0x01	; 1
    27aa:	80 81       	ld	r24, Z
    27ac:	83 60       	ori	r24, 0x03	; 3
    27ae:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    27b0:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    27b2:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    27b4:	8d b1       	in	r24, 0x0d	; 13
    27b6:	80 6e       	ori	r24, 0xE0	; 224
    27b8:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    27ba:	8e b1       	in	r24, 0x0e	; 14
    27bc:	80 6e       	ori	r24, 0xE0	; 224
    27be:	8e b9       	out	0x0e, r24	; 14
    27c0:	08 95       	ret

000027c2 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    27c2:	e7 e3       	ldi	r30, 0x37	; 55
    27c4:	f1 e0       	ldi	r31, 0x01	; 1
    27c6:	80 81       	ld	r24, Z
    27c8:	83 60       	ori	r24, 0x03	; 3
    27ca:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    27cc:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    27ce:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    27d0:	8d b1       	in	r24, 0x0d	; 13
    27d2:	80 6e       	ori	r24, 0xE0	; 224
    27d4:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    27d6:	8e b1       	in	r24, 0x0e	; 14
    27d8:	80 6e       	ori	r24, 0xE0	; 224
    27da:	8e b9       	out	0x0e, r24	; 14
    27dc:	08 95       	ret

000027de <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    27de:	cf 92       	push	r12
    27e0:	df 92       	push	r13
    27e2:	ef 92       	push	r14
    27e4:	ff 92       	push	r15
    27e6:	0f 93       	push	r16
    27e8:	1f 93       	push	r17
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	27 97       	sbiw	r28, 0x07	; 7
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    27fe:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    2802:	e0 91 ff 15 	lds	r30, 0x15FF
    2806:	f0 91 00 16 	lds	r31, 0x1600
    280a:	c0 80       	ld	r12, Z
    280c:	d3 80       	ldd	r13, Z+3	; 0x03
    280e:	e5 80       	ldd	r14, Z+5	; 0x05
    2810:	f6 80       	ldd	r15, Z+6	; 0x06
    2812:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    2814:	0e 94 78 12 	call	0x24f0	; 0x24f0 <rf_rx_packet_nonblock>
	if (err < 1) {
    2818:	18 16       	cp	r1, r24
    281a:	1c f0       	brlt	.+6      	; 0x2822 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    281c:	80 e7       	ldi	r24, 0x70	; 112
    281e:	93 e0       	ldi	r25, 0x03	; 3
    2820:	06 c0       	rjmp	.+12     	; 0x282e <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    2822:	f7 01       	movw	r30, r14
    2824:	10 81       	ld	r17, Z
	if (ttl == 0) {
    2826:	11 11       	cpse	r17, r1
    2828:	07 c0       	rjmp	.+14     	; 0x2838 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    282a:	8f e8       	ldi	r24, 0x8F	; 143
    282c:	93 e0       	ldi	r25, 0x03	; 3
    282e:	0e 94 0f 33 	call	0x661e	; 0x661e <puts>
#endif
		nrk_int_enable();
    2832:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
		return;
    2836:	31 c0       	rjmp	.+98     	; 0x289a <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    2838:	15 30       	cpi	r17, 0x05	; 5
    283a:	21 f4       	brne	.+8      	; 0x2844 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    283c:	8a e0       	ldi	r24, 0x0A	; 10
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 09 33 	call	0x6612	; 0x6612 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    2844:	c7 01       	movw	r24, r14
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	9f 93       	push	r25
    284a:	8f 93       	push	r24
    284c:	80 2f       	mov	r24, r16
    284e:	99 27       	eor	r25, r25
    2850:	87 fd       	sbrc	r24, 7
    2852:	90 95       	com	r25
    2854:	9f 93       	push	r25
    2856:	0f 93       	push	r16
    2858:	1f 92       	push	r1
    285a:	1f 93       	push	r17
    285c:	1f 92       	push	r1
    285e:	cf 92       	push	r12
    2860:	81 eb       	ldi	r24, 0xB1	; 177
    2862:	93 e0       	ldi	r25, 0x03	; 3
    2864:	9f 93       	push	r25
    2866:	8f 93       	push	r24
    2868:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    286c:	fd 82       	std	Y+5, r15	; 0x05
    286e:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    2870:	11 50       	subi	r17, 0x01	; 1
    2872:	f7 01       	movw	r30, r14
    2874:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    2876:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    2878:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    287a:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    287c:	8f ef       	ldi	r24, 0xFF	; 255
    287e:	9f ef       	ldi	r25, 0xFF	; 255
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    2884:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    2888:	ce 01       	movw	r24, r28
    288a:	01 96       	adiw	r24, 0x01	; 1
    288c:	0e 94 42 12 	call	0x2484	; 0x2484 <rf_tx_packet>
#endif
	return;
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
}
    289a:	27 96       	adiw	r28, 0x07	; 7
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	ff 90       	pop	r15
    28b0:	ef 90       	pop	r14
    28b2:	df 90       	pop	r13
    28b4:	cf 90       	pop	r12
    28b6:	08 95       	ret

000028b8 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    28b8:	1f 92       	push	r1
    28ba:	0f 92       	push	r0
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	0f 92       	push	r0
    28c0:	11 24       	eor	r1, r1
    28c2:	0b b6       	in	r0, 0x3b	; 59
    28c4:	0f 92       	push	r0
    28c6:	2f 93       	push	r18
    28c8:	3f 93       	push	r19
    28ca:	4f 93       	push	r20
    28cc:	5f 93       	push	r21
    28ce:	6f 93       	push	r22
    28d0:	7f 93       	push	r23
    28d2:	8f 93       	push	r24
    28d4:	9f 93       	push	r25
    28d6:	af 93       	push	r26
    28d8:	bf 93       	push	r27
    28da:	ef 93       	push	r30
    28dc:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 91 7b 01 	lds	r25, 0x017B
    28e4:	89 17       	cp	r24, r25
    28e6:	10 f4       	brcc	.+4      	; 0x28ec <__vector_60+0x34>
    28e8:	8f 5f       	subi	r24, 0xFF	; 255
    28ea:	fa cf       	rjmp	.-12     	; 0x28e0 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    28ec:	80 91 46 01 	lds	r24, 0x0146
    28f0:	87 ff       	sbrs	r24, 7
    28f2:	04 c0       	rjmp	.+8      	; 0x28fc <__vector_60+0x44>
		rx_ready = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 93 40 16 	sts	0x1640, r24
    28fa:	04 c0       	rjmp	.+8      	; 0x2904 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    28fc:	8a ed       	ldi	r24, 0xDA	; 218
    28fe:	93 e0       	ldi	r25, 0x03	; 3
    2900:	0e 94 0f 33 	call	0x661e	; 0x661e <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    2904:	88 e0       	ldi	r24, 0x08	; 8
    2906:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    290a:	80 91 46 01 	lds	r24, 0x0146
    290e:	87 ff       	sbrs	r24, 7
    2910:	05 c0       	rjmp	.+10     	; 0x291c <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    2912:	80 91 fc 15 	lds	r24, 0x15FC
    2916:	81 11       	cpse	r24, r1
    2918:	0e 94 ef 13 	call	0x27de	; 0x27de <rf_glossy_interrupt>
	}

	if(rx_end_func)
    291c:	e0 91 f7 04 	lds	r30, 0x04F7
    2920:	f0 91 f8 04 	lds	r31, 0x04F8
    2924:	30 97       	sbiw	r30, 0x00	; 0
    2926:	09 f0       	breq	.+2      	; 0x292a <__vector_60+0x72>
		rx_end_func();
    2928:	09 95       	icall

	return;
}
    292a:	ff 91       	pop	r31
    292c:	ef 91       	pop	r30
    292e:	bf 91       	pop	r27
    2930:	af 91       	pop	r26
    2932:	9f 91       	pop	r25
    2934:	8f 91       	pop	r24
    2936:	7f 91       	pop	r23
    2938:	6f 91       	pop	r22
    293a:	5f 91       	pop	r21
    293c:	4f 91       	pop	r20
    293e:	3f 91       	pop	r19
    2940:	2f 91       	pop	r18
    2942:	0f 90       	pop	r0
    2944:	0b be       	out	0x3b, r0	; 59
    2946:	0f 90       	pop	r0
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	0f 90       	pop	r0
    294c:	1f 90       	pop	r1
    294e:	18 95       	reti

00002950 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    2950:	a1 e1       	ldi	r26, 0x11	; 17
    2952:	b6 e1       	ldi	r27, 0x16	; 22
    2954:	fc 01       	movw	r30, r24
    2956:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    2958:	20 81       	ld	r18, Z
    295a:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    295c:	21 91       	ld	r18, Z+
    295e:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    2962:	e8 17       	cp	r30, r24
    2964:	f9 07       	cpc	r31, r25
    2966:	c1 f7       	brne	.-16     	; 0x2958 <aes_setkey+0x8>
    2968:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    296a:	10 92 3e 01 	sts	0x013E, r1
    296e:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    2970:	e1 f7       	brne	.-8      	; 0x296a <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    2972:	80 e8       	ldi	r24, 0x80	; 128
    2974:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    2978:	80 91 3d 01 	lds	r24, 0x013D
    297c:	80 ff       	sbrs	r24, 0
    297e:	fc cf       	rjmp	.-8      	; 0x2978 <aes_setkey+0x28>
    2980:	ea e2       	ldi	r30, 0x2A	; 42
    2982:	f6 e1       	ldi	r31, 0x16	; 22
    2984:	80 e1       	ldi	r24, 0x10	; 16
    2986:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    2988:	90 91 3f 01 	lds	r25, 0x013F
    298c:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    298e:	8e 13       	cpse	r24, r30
    2990:	fb cf       	rjmp	.-10     	; 0x2988 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    2992:	08 95       	ret

00002994 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    299a:	66 23       	and	r22, r22
    299c:	09 f4       	brne	.+2      	; 0x29a0 <aes_encrypt+0xc>
    299e:	45 c0       	rjmp	.+138    	; 0x2a2a <aes_encrypt+0x96>
    29a0:	86 2f       	mov	r24, r22
    29a2:	8f 70       	andi	r24, 0x0F	; 15
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <aes_encrypt+0x14>
    29a6:	41 c0       	rjmp	.+130    	; 0x2a2a <aes_encrypt+0x96>
    29a8:	e1 e1       	ldi	r30, 0x11	; 17
    29aa:	f6 e1       	ldi	r31, 0x16	; 22
    29ac:	90 e1       	ldi	r25, 0x10	; 16
    29ae:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    29b0:	21 91       	ld	r18, Z+
    29b2:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    29b6:	9e 13       	cpse	r25, r30
    29b8:	fb cf       	rjmp	.-10     	; 0x29b0 <aes_encrypt+0x1c>
    29ba:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    29bc:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    29be:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    29c0:	40 e1       	ldi	r20, 0x10	; 16
    29c2:	94 9f       	mul	r25, r20
    29c4:	90 01       	movw	r18, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	26 17       	cp	r18, r22
    29ca:	37 07       	cpc	r19, r23
    29cc:	7c f5       	brge	.+94     	; 0x2a2c <aes_encrypt+0x98>
      if(i==0)
    29ce:	91 11       	cpse	r25, r1
    29d0:	03 c0       	rjmp	.+6      	; 0x29d8 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    29d2:	10 92 3c 01 	sts	0x013C, r1
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    29d8:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	2a 0f       	add	r18, r26
    29e2:	3b 1f       	adc	r19, r27
    29e4:	e9 01       	movw	r28, r18
    29e6:	c4 0f       	add	r28, r20
    29e8:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    29ea:	f8 81       	ld	r31, Y
    29ec:	f0 93 3e 01 	sts	0x013E, r31
    29f0:	4f 5f       	subi	r20, 0xFF	; 255
    29f2:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    29f4:	40 31       	cpi	r20, 0x10	; 16
    29f6:	51 05       	cpc	r21, r1
    29f8:	a9 f7       	brne	.-22     	; 0x29e4 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    29fa:	40 91 3c 01 	lds	r20, 0x013C
    29fe:	40 68       	ori	r20, 0x80	; 128
    2a00:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    2a04:	40 91 3d 01 	lds	r20, 0x013D
    2a08:	40 ff       	sbrs	r20, 0
    2a0a:	fc cf       	rjmp	.-8      	; 0x2a04 <aes_encrypt+0x70>
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    2a10:	f0 91 3e 01 	lds	r31, 0x013E
    2a14:	e9 01       	movw	r28, r18
    2a16:	c4 0f       	add	r28, r20
    2a18:	d5 1f       	adc	r29, r21
    2a1a:	f8 83       	st	Y, r31
    2a1c:	4f 5f       	subi	r20, 0xFF	; 255
    2a1e:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    2a20:	40 31       	cpi	r20, 0x10	; 16
    2a22:	51 05       	cpc	r21, r1
    2a24:	a9 f7       	brne	.-22     	; 0x2a10 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2a26:	9f 5f       	subi	r25, 0xFF	; 255
    2a28:	cb cf       	rjmp	.-106    	; 0x29c0 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	08 95       	ret

00002a32 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	cf 93       	push	r28
    2a38:	df 93       	push	r29
    2a3a:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    2a3c:	61 30       	cpi	r22, 0x01	; 1
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <aes_decrypt+0x10>
    2a40:	58 c0       	rjmp	.+176    	; 0x2af2 <aes_decrypt+0xc0>
    2a42:	86 2f       	mov	r24, r22
    2a44:	8f 70       	andi	r24, 0x0F	; 15
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <aes_decrypt+0x18>
    2a48:	54 c0       	rjmp	.+168    	; 0x2af2 <aes_decrypt+0xc0>
    2a4a:	ea e2       	ldi	r30, 0x2A	; 42
    2a4c:	f6 e1       	ldi	r31, 0x16	; 22
    2a4e:	90 e1       	ldi	r25, 0x10	; 16
    2a50:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    2a52:	21 91       	ld	r18, Z+
    2a54:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    2a58:	9e 13       	cpse	r25, r30
    2a5a:	fb cf       	rjmp	.-10     	; 0x2a52 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2a5c:	62 95       	swap	r22
    2a5e:	6f 70       	andi	r22, 0x0F	; 15
    2a60:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2a62:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2a64:	6f 3f       	cpi	r22, 0xFF	; 255
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <aes_decrypt+0x38>
    2a68:	45 c0       	rjmp	.+138    	; 0x2af4 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2a6a:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    2a6e:	46 2f       	mov	r20, r22
    2a70:	55 27       	eor	r21, r21
    2a72:	47 fd       	sbrc	r20, 7
    2a74:	50 95       	com	r21
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	ed 01       	movw	r28, r26
    2a7c:	90 e1       	ldi	r25, 0x10	; 16
    2a7e:	69 02       	muls	r22, r25
    2a80:	c0 0d       	add	r28, r0
    2a82:	d1 1d       	adc	r29, r1
    2a84:	11 24       	eor	r1, r1
    2a86:	fe 01       	movw	r30, r28
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	90 81       	ld	r25, Z
    2a8e:	90 93 3e 01 	sts	0x013E, r25
    2a92:	2f 5f       	subi	r18, 0xFF	; 255
    2a94:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    2a96:	20 31       	cpi	r18, 0x10	; 16
    2a98:	31 05       	cpc	r19, r1
    2a9a:	a9 f7       	brne	.-22     	; 0x2a86 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    2a9c:	90 91 3c 01 	lds	r25, 0x013C
    2aa0:	90 68       	ori	r25, 0x80	; 128
    2aa2:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    2aa6:	90 91 3d 01 	lds	r25, 0x013D
    2aaa:	90 ff       	sbrs	r25, 0
    2aac:	fc cf       	rjmp	.-8      	; 0x2aa6 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    2aae:	41 50       	subi	r20, 0x01	; 1
    2ab0:	51 09       	sbc	r21, r1
    2ab2:	94 e0       	ldi	r25, 0x04	; 4
    2ab4:	44 0f       	add	r20, r20
    2ab6:	55 1f       	adc	r21, r21
    2ab8:	9a 95       	dec	r25
    2aba:	e1 f7       	brne	.-8      	; 0x2ab4 <aes_decrypt+0x82>
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    2ac0:	90 91 3e 01 	lds	r25, 0x013E
    2ac4:	8e 01       	movw	r16, r28
    2ac6:	02 0f       	add	r16, r18
    2ac8:	13 1f       	adc	r17, r19
    2aca:	f8 01       	movw	r30, r16
    2acc:	90 83       	st	Z, r25
         if(i!=0)
    2ace:	66 23       	and	r22, r22
    2ad0:	49 f0       	breq	.+18     	; 0x2ae4 <aes_decrypt+0xb2>
    2ad2:	f9 01       	movw	r30, r18
    2ad4:	e4 0f       	add	r30, r20
    2ad6:	f5 1f       	adc	r31, r21
    2ad8:	ea 0f       	add	r30, r26
    2ada:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    2adc:	e0 81       	ld	r30, Z
    2ade:	9e 27       	eor	r25, r30
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	90 83       	st	Z, r25
    2ae4:	2f 5f       	subi	r18, 0xFF	; 255
    2ae6:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    2ae8:	20 31       	cpi	r18, 0x10	; 16
    2aea:	31 05       	cpc	r19, r1
    2aec:	49 f7       	brne	.-46     	; 0x2ac0 <aes_decrypt+0x8e>
    2aee:	61 50       	subi	r22, 0x01	; 1
    2af0:	b9 cf       	rjmp	.-142    	; 0x2a64 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	08 95       	ret

00002afe <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    2afe:	90 91 c0 00 	lds	r25, 0x00C0
    2b02:	95 ff       	sbrs	r25, 5
    2b04:	fc cf       	rjmp	.-8      	; 0x2afe <putc0>
    2b06:	90 91 c0 00 	lds	r25, 0x00C0
    2b0a:	9f 7d       	andi	r25, 0xDF	; 223
    2b0c:	90 93 c0 00 	sts	0x00C0, r25
    2b10:	80 93 c6 00 	sts	0x00C6, r24
    2b14:	08 95       	ret

00002b16 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    2b16:	1f 92       	push	r1
    2b18:	0f 92       	push	r0
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	0f 92       	push	r0
    2b1e:	11 24       	eor	r1, r1
    2b20:	0b b6       	in	r0, 0x3b	; 59
    2b22:	0f 92       	push	r0
    2b24:	2f 93       	push	r18
    2b26:	3f 93       	push	r19
    2b28:	4f 93       	push	r20
    2b2a:	5f 93       	push	r21
    2b2c:	6f 93       	push	r22
    2b2e:	7f 93       	push	r23
    2b30:	8f 93       	push	r24
    2b32:	9f 93       	push	r25
    2b34:	af 93       	push	r26
    2b36:	bf 93       	push	r27
    2b38:	ef 93       	push	r30
    2b3a:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    2b3c:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    2b40:	80 91 c0 00 	lds	r24, 0x00C0
    2b44:	87 ff       	sbrs	r24, 7
    2b46:	fc cf       	rjmp	.-8      	; 0x2b40 <__vector_25+0x2a>
    2b48:	80 91 c0 00 	lds	r24, 0x00C0
    2b4c:	8f 77       	andi	r24, 0x7F	; 127
    2b4e:	80 93 c0 00 	sts	0x00C0, r24
    2b52:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    2b56:	80 91 0c 05 	lds	r24, 0x050C
    2b5a:	90 91 0d 05 	lds	r25, 0x050D
    2b5e:	fc 01       	movw	r30, r24
    2b60:	e4 50       	subi	r30, 0x04	; 4
    2b62:	fb 4f       	sbci	r31, 0xFB	; 251
    2b64:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2b66:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    2b68:	80 31       	cpi	r24, 0x10	; 16
    2b6a:	91 05       	cpc	r25, r1
    2b6c:	29 f0       	breq	.+10     	; 0x2b78 <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2b6e:	90 93 0d 05 	sts	0x050D, r25
    2b72:	80 93 0c 05 	sts	0x050C, r24
    2b76:	04 c0       	rjmp	.+8      	; 0x2b80 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    2b78:	10 92 0d 05 	sts	0x050D, r1
    2b7c:	10 92 0c 05 	sts	0x050C, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    2b80:	80 91 fb 04 	lds	r24, 0x04FB
    2b84:	0e 94 00 20 	call	0x4000	; 0x4000 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    2b88:	80 91 c0 00 	lds	r24, 0x00C0
    2b8c:	8f 77       	andi	r24, 0x7F	; 127
    2b8e:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    2b92:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
}
    2b96:	ff 91       	pop	r31
    2b98:	ef 91       	pop	r30
    2b9a:	bf 91       	pop	r27
    2b9c:	af 91       	pop	r26
    2b9e:	9f 91       	pop	r25
    2ba0:	8f 91       	pop	r24
    2ba2:	7f 91       	pop	r23
    2ba4:	6f 91       	pop	r22
    2ba6:	5f 91       	pop	r21
    2ba8:	4f 91       	pop	r20
    2baa:	3f 91       	pop	r19
    2bac:	2f 91       	pop	r18
    2bae:	0f 90       	pop	r0
    2bb0:	0b be       	out	0x3b, r0	; 59
    2bb2:	0f 90       	pop	r0
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	0f 90       	pop	r0
    2bb8:	1f 90       	pop	r1
    2bba:	18 95       	reti

00002bbc <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	0d c0       	rjmp	.+26     	; 0x2bda <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	40 91 0e 05 	lds	r20, 0x050E
    2bc6:	50 91 0f 05 	lds	r21, 0x050F
    2bca:	20 91 0c 05 	lds	r18, 0x050C
    2bce:	30 91 0d 05 	lds	r19, 0x050D
    2bd2:	42 17       	cp	r20, r18
    2bd4:	53 07       	cpc	r21, r19
    2bd6:	51 f4       	brne	.+20     	; 0x2bec <nrk_uart_data_ready+0x30>
    2bd8:	08 c0       	rjmp	.+16     	; 0x2bea <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    2bda:	81 30       	cpi	r24, 0x01	; 1
    2bdc:	31 f4       	brne	.+12     	; 0x2bea <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    2bde:	80 91 c8 00 	lds	r24, 0x00C8
    2be2:	88 1f       	adc	r24, r24
    2be4:	88 27       	eor	r24, r24
    2be6:	88 1f       	adc	r24, r24
    2be8:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    2bea:	80 e0       	ldi	r24, 0x00	; 0
}
    2bec:	08 95       	ret

00002bee <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2bee:	80 91 fb 04 	lds	r24, 0x04FB
    2bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf4:	19 f4       	brne	.+6      	; 0x2bfc <nrk_uart_rx_signal_get+0xe>
    2bf6:	8e e0       	ldi	r24, 0x0E	; 14
    2bf8:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_error_add>
   return uart_rx_signal;
}
    2bfc:	80 91 fb 04 	lds	r24, 0x04FB
    2c00:	08 95       	ret

00002c02 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2c02:	cf 93       	push	r28
    2c04:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    2c06:	fc 01       	movw	r30, r24
    2c08:	24 91       	lpm	r18, Z
    2c0a:	ec 01       	movw	r28, r24
    2c0c:	21 96       	adiw	r28, 0x01	; 1
    2c0e:	22 23       	and	r18, r18
    2c10:	51 f0       	breq	.+20     	; 0x2c26 <nrk_kprintf+0x24>
        putchar(c);
    2c12:	60 91 09 18 	lds	r22, 0x1809
    2c16:	70 91 0a 18 	lds	r23, 0x180A
    2c1a:	82 2f       	mov	r24, r18
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    2c22:	ce 01       	movw	r24, r28
    2c24:	f0 cf       	rjmp	.-32     	; 0x2c06 <nrk_kprintf+0x4>
}
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	08 95       	ret

00002c2c <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    2c2c:	20 91 0e 05 	lds	r18, 0x050E
    2c30:	30 91 0f 05 	lds	r19, 0x050F
    2c34:	80 91 0c 05 	lds	r24, 0x050C
    2c38:	90 91 0d 05 	lds	r25, 0x050D
    2c3c:	28 17       	cp	r18, r24
    2c3e:	39 07       	cpc	r19, r25
    2c40:	69 f4       	brne	.+26     	; 0x2c5c <getc0+0x30>
    2c42:	80 91 fb 04 	lds	r24, 0x04FB
    2c46:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <nrk_signal_register>
    2c4a:	60 91 fb 04 	lds	r22, 0x04FB
    2c4e:	77 27       	eor	r23, r23
    2c50:	67 fd       	sbrc	r22, 7
    2c52:	70 95       	com	r23
    2c54:	87 2f       	mov	r24, r23
    2c56:	97 2f       	mov	r25, r23
    2c58:	0e 94 71 20 	call	0x40e2	; 0x40e2 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    2c5c:	6f 3f       	cpi	r22, 0xFF	; 255
    2c5e:	21 f4       	brne	.+8      	; 0x2c68 <getc0+0x3c>
    2c60:	8b e3       	ldi	r24, 0x3B	; 59
    2c62:	93 e0       	ldi	r25, 0x03	; 3
    2c64:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    2c68:	20 91 0e 05 	lds	r18, 0x050E
    2c6c:	30 91 0f 05 	lds	r19, 0x050F
    2c70:	f9 01       	movw	r30, r18
    2c72:	e4 50       	subi	r30, 0x04	; 4
    2c74:	fb 4f       	sbci	r31, 0xFB	; 251
    2c76:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    2c78:	2f 5f       	subi	r18, 0xFF	; 255
    2c7a:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2c7c:	20 31       	cpi	r18, 0x10	; 16
    2c7e:	31 05       	cpc	r19, r1
    2c80:	28 f4       	brcc	.+10     	; 0x2c8c <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    2c82:	30 93 0f 05 	sts	0x050F, r19
    2c86:	20 93 0e 05 	sts	0x050E, r18
    2c8a:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2c8c:	10 92 0f 05 	sts	0x050F, r1
    2c90:	10 92 0e 05 	sts	0x050E, r1

   return tmp;
}
    2c94:	08 95       	ret

00002c96 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    2c96:	86 e0       	ldi	r24, 0x06	; 6
    2c98:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    2c9a:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    2c9c:	88 ef       	ldi	r24, 0xF8	; 248
    2c9e:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2ca0:	80 ef       	ldi	r24, 0xF0	; 240
    2ca2:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	8d b9       	out	0x0d, r24	; 13
    2ca8:	08 95       	ret

00002caa <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2caa:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <PORT_INIT>

00002cae <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2cae:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <nrk_gpio_set+0x6>
    2cb2:	6c c0       	rjmp	.+216    	; 0x2d8c <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2cb4:	e8 2f       	mov	r30, r24
    2cb6:	e7 70       	andi	r30, 0x07	; 7
    2cb8:	4e 2f       	mov	r20, r30
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	47 30       	cpi	r20, 0x07	; 7
    2cbe:	51 05       	cpc	r21, r1
    2cc0:	08 f0       	brcs	.+2      	; 0x2cc4 <nrk_gpio_set+0x16>
    2cc2:	64 c0       	rjmp	.+200    	; 0x2d8c <nrk_gpio_set+0xde>
    2cc4:	fa 01       	movw	r30, r20
    2cc6:	e0 57       	subi	r30, 0x70	; 112
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	86 95       	lsr	r24
    2ccc:	86 95       	lsr	r24
    2cce:	86 95       	lsr	r24
    2cd0:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2cd4:	42 b1       	in	r20, 0x02	; 2
    2cd6:	21 e0       	ldi	r18, 0x01	; 1
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	b9 01       	movw	r22, r18
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <nrk_gpio_set+0x34>
    2cde:	66 0f       	add	r22, r22
    2ce0:	77 1f       	adc	r23, r23
    2ce2:	8a 95       	dec	r24
    2ce4:	e2 f7       	brpl	.-8      	; 0x2cde <nrk_gpio_set+0x30>
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	84 2b       	or	r24, r20
    2cea:	82 b9       	out	0x02, r24	; 2
    2cec:	4d c0       	rjmp	.+154    	; 0x2d88 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2cee:	45 b1       	in	r20, 0x05	; 5
    2cf0:	21 e0       	ldi	r18, 0x01	; 1
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	b9 01       	movw	r22, r18
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <nrk_gpio_set+0x4e>
    2cf8:	66 0f       	add	r22, r22
    2cfa:	77 1f       	adc	r23, r23
    2cfc:	8a 95       	dec	r24
    2cfe:	e2 f7       	brpl	.-8      	; 0x2cf8 <nrk_gpio_set+0x4a>
    2d00:	cb 01       	movw	r24, r22
    2d02:	84 2b       	or	r24, r20
    2d04:	85 b9       	out	0x05, r24	; 5
    2d06:	40 c0       	rjmp	.+128    	; 0x2d88 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2d08:	48 b1       	in	r20, 0x08	; 8
    2d0a:	21 e0       	ldi	r18, 0x01	; 1
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	b9 01       	movw	r22, r18
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <nrk_gpio_set+0x68>
    2d12:	66 0f       	add	r22, r22
    2d14:	77 1f       	adc	r23, r23
    2d16:	8a 95       	dec	r24
    2d18:	e2 f7       	brpl	.-8      	; 0x2d12 <nrk_gpio_set+0x64>
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	84 2b       	or	r24, r20
    2d1e:	88 b9       	out	0x08, r24	; 8
    2d20:	33 c0       	rjmp	.+102    	; 0x2d88 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2d22:	4b b1       	in	r20, 0x0b	; 11
    2d24:	21 e0       	ldi	r18, 0x01	; 1
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	b9 01       	movw	r22, r18
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <nrk_gpio_set+0x82>
    2d2c:	66 0f       	add	r22, r22
    2d2e:	77 1f       	adc	r23, r23
    2d30:	8a 95       	dec	r24
    2d32:	e2 f7       	brpl	.-8      	; 0x2d2c <nrk_gpio_set+0x7e>
    2d34:	cb 01       	movw	r24, r22
    2d36:	84 2b       	or	r24, r20
    2d38:	8b b9       	out	0x0b, r24	; 11
    2d3a:	26 c0       	rjmp	.+76     	; 0x2d88 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2d3c:	4e b1       	in	r20, 0x0e	; 14
    2d3e:	21 e0       	ldi	r18, 0x01	; 1
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	b9 01       	movw	r22, r18
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <nrk_gpio_set+0x9c>
    2d46:	66 0f       	add	r22, r22
    2d48:	77 1f       	adc	r23, r23
    2d4a:	8a 95       	dec	r24
    2d4c:	e2 f7       	brpl	.-8      	; 0x2d46 <nrk_gpio_set+0x98>
    2d4e:	cb 01       	movw	r24, r22
    2d50:	84 2b       	or	r24, r20
    2d52:	8e b9       	out	0x0e, r24	; 14
    2d54:	19 c0       	rjmp	.+50     	; 0x2d88 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2d56:	41 b3       	in	r20, 0x11	; 17
    2d58:	21 e0       	ldi	r18, 0x01	; 1
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	b9 01       	movw	r22, r18
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <nrk_gpio_set+0xb6>
    2d60:	66 0f       	add	r22, r22
    2d62:	77 1f       	adc	r23, r23
    2d64:	8a 95       	dec	r24
    2d66:	e2 f7       	brpl	.-8      	; 0x2d60 <nrk_gpio_set+0xb2>
    2d68:	cb 01       	movw	r24, r22
    2d6a:	84 2b       	or	r24, r20
    2d6c:	81 bb       	out	0x11, r24	; 17
    2d6e:	0c c0       	rjmp	.+24     	; 0x2d88 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2d70:	44 b3       	in	r20, 0x14	; 20
    2d72:	21 e0       	ldi	r18, 0x01	; 1
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	b9 01       	movw	r22, r18
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <nrk_gpio_set+0xd0>
    2d7a:	66 0f       	add	r22, r22
    2d7c:	77 1f       	adc	r23, r23
    2d7e:	8a 95       	dec	r24
    2d80:	e2 f7       	brpl	.-8      	; 0x2d7a <nrk_gpio_set+0xcc>
    2d82:	cb 01       	movw	r24, r22
    2d84:	84 2b       	or	r24, r20
    2d86:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2d8a:	08 95       	ret
                default: return -1;
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2d8e:	08 95       	ret

00002d90 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2d90:	8f 3f       	cpi	r24, 0xFF	; 255
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <nrk_gpio_clr+0x6>
    2d94:	65 c0       	rjmp	.+202    	; 0x2e60 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    2d96:	e8 2f       	mov	r30, r24
    2d98:	e7 70       	andi	r30, 0x07	; 7
    2d9a:	4e 2f       	mov	r20, r30
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	47 30       	cpi	r20, 0x07	; 7
    2da0:	51 05       	cpc	r21, r1
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <nrk_gpio_clr+0x16>
    2da4:	5d c0       	rjmp	.+186    	; 0x2e60 <nrk_gpio_clr+0xd0>
    2da6:	fa 01       	movw	r30, r20
    2da8:	e9 56       	subi	r30, 0x69	; 105
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	86 95       	lsr	r24
    2dae:	86 95       	lsr	r24
    2db0:	86 95       	lsr	r24
    2db2:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2db6:	42 b1       	in	r20, 0x02	; 2
    2db8:	21 e0       	ldi	r18, 0x01	; 1
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	b9 01       	movw	r22, r18
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <nrk_gpio_clr+0x34>
    2dc0:	66 0f       	add	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	8a 95       	dec	r24
    2dc6:	e2 f7       	brpl	.-8      	; 0x2dc0 <nrk_gpio_clr+0x30>
    2dc8:	cb 01       	movw	r24, r22
    2dca:	80 95       	com	r24
    2dcc:	84 23       	and	r24, r20
    2dce:	82 b9       	out	0x02, r24	; 2
    2dd0:	45 c0       	rjmp	.+138    	; 0x2e5c <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2dd2:	45 b1       	in	r20, 0x05	; 5
    2dd4:	21 e0       	ldi	r18, 0x01	; 1
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	b9 01       	movw	r22, r18
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <nrk_gpio_clr+0x50>
    2ddc:	66 0f       	add	r22, r22
    2dde:	77 1f       	adc	r23, r23
    2de0:	8a 95       	dec	r24
    2de2:	e2 f7       	brpl	.-8      	; 0x2ddc <nrk_gpio_clr+0x4c>
    2de4:	cb 01       	movw	r24, r22
    2de6:	80 95       	com	r24
    2de8:	84 23       	and	r24, r20
    2dea:	85 b9       	out	0x05, r24	; 5
    2dec:	37 c0       	rjmp	.+110    	; 0x2e5c <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2dee:	48 b1       	in	r20, 0x08	; 8
    2df0:	21 e0       	ldi	r18, 0x01	; 1
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	b9 01       	movw	r22, r18
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <nrk_gpio_clr+0x6c>
    2df8:	66 0f       	add	r22, r22
    2dfa:	77 1f       	adc	r23, r23
    2dfc:	8a 95       	dec	r24
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <nrk_gpio_clr+0x68>
    2e00:	cb 01       	movw	r24, r22
    2e02:	80 95       	com	r24
    2e04:	84 23       	and	r24, r20
    2e06:	88 b9       	out	0x08, r24	; 8
    2e08:	29 c0       	rjmp	.+82     	; 0x2e5c <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2e0a:	4b b1       	in	r20, 0x0b	; 11
    2e0c:	21 e0       	ldi	r18, 0x01	; 1
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	b9 01       	movw	r22, r18
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <nrk_gpio_clr+0x88>
    2e14:	66 0f       	add	r22, r22
    2e16:	77 1f       	adc	r23, r23
    2e18:	8a 95       	dec	r24
    2e1a:	e2 f7       	brpl	.-8      	; 0x2e14 <nrk_gpio_clr+0x84>
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	80 95       	com	r24
    2e20:	84 23       	and	r24, r20
    2e22:	8b b9       	out	0x0b, r24	; 11
    2e24:	1b c0       	rjmp	.+54     	; 0x2e5c <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2e26:	4e b1       	in	r20, 0x0e	; 14
    2e28:	21 e0       	ldi	r18, 0x01	; 1
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	b9 01       	movw	r22, r18
    2e2e:	02 c0       	rjmp	.+4      	; 0x2e34 <nrk_gpio_clr+0xa4>
    2e30:	66 0f       	add	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	8a 95       	dec	r24
    2e36:	e2 f7       	brpl	.-8      	; 0x2e30 <nrk_gpio_clr+0xa0>
    2e38:	cb 01       	movw	r24, r22
    2e3a:	80 95       	com	r24
    2e3c:	84 23       	and	r24, r20
    2e3e:	8e b9       	out	0x0e, r24	; 14
    2e40:	0d c0       	rjmp	.+26     	; 0x2e5c <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2e42:	41 b3       	in	r20, 0x11	; 17
    2e44:	21 e0       	ldi	r18, 0x01	; 1
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	b9 01       	movw	r22, r18
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <nrk_gpio_clr+0xc0>
    2e4c:	66 0f       	add	r22, r22
    2e4e:	77 1f       	adc	r23, r23
    2e50:	8a 95       	dec	r24
    2e52:	e2 f7       	brpl	.-8      	; 0x2e4c <nrk_gpio_clr+0xbc>
    2e54:	cb 01       	movw	r24, r22
    2e56:	80 95       	com	r24
    2e58:	84 23       	and	r24, r20
    2e5a:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2e5e:	08 95       	ret
                default: return -1;
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2e62:	08 95       	ret

00002e64 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2e64:	8f 3f       	cpi	r24, 0xFF	; 255
    2e66:	31 f1       	breq	.+76     	; 0x2eb4 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    2e68:	e8 2f       	mov	r30, r24
    2e6a:	e7 70       	andi	r30, 0x07	; 7
    2e6c:	4e 2f       	mov	r20, r30
    2e6e:	50 e0       	ldi	r21, 0x00	; 0
    2e70:	47 30       	cpi	r20, 0x07	; 7
    2e72:	51 05       	cpc	r21, r1
    2e74:	f8 f4       	brcc	.+62     	; 0x2eb4 <nrk_gpio_get+0x50>
    2e76:	fa 01       	movw	r30, r20
    2e78:	e2 56       	subi	r30, 0x62	; 98
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	26 95       	lsr	r18
    2e80:	26 95       	lsr	r18
    2e82:	26 95       	lsr	r18
    2e84:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2e88:	90 b1       	in	r25, 0x00	; 0
    2e8a:	0b c0       	rjmp	.+22     	; 0x2ea2 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2e8c:	93 b1       	in	r25, 0x03	; 3
    2e8e:	09 c0       	rjmp	.+18     	; 0x2ea2 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2e90:	96 b1       	in	r25, 0x06	; 6
    2e92:	07 c0       	rjmp	.+14     	; 0x2ea2 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2e94:	99 b1       	in	r25, 0x09	; 9
    2e96:	05 c0       	rjmp	.+10     	; 0x2ea2 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2e98:	9c b1       	in	r25, 0x0c	; 12
    2e9a:	03 c0       	rjmp	.+6      	; 0x2ea2 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2e9c:	9f b1       	in	r25, 0x0f	; 15
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2ea0:	92 b3       	in	r25, 0x12	; 18
    2ea2:	89 2f       	mov	r24, r25
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <nrk_gpio_get+0x48>
    2ea8:	95 95       	asr	r25
    2eaa:	87 95       	ror	r24
    2eac:	2a 95       	dec	r18
    2eae:	e2 f7       	brpl	.-8      	; 0x2ea8 <nrk_gpio_get+0x44>
    2eb0:	81 70       	andi	r24, 0x01	; 1
    2eb2:	08 95       	ret
                default: return -1;
    2eb4:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2eb6:	08 95       	ret

00002eb8 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2eb8:	8f 3f       	cpi	r24, 0xFF	; 255
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <nrk_gpio_toggle+0x6>
    2ebc:	06 c1       	rjmp	.+524    	; 0x30ca <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2ebe:	e8 2f       	mov	r30, r24
    2ec0:	e7 70       	andi	r30, 0x07	; 7
    2ec2:	4e 2f       	mov	r20, r30
    2ec4:	50 e0       	ldi	r21, 0x00	; 0
    2ec6:	47 30       	cpi	r20, 0x07	; 7
    2ec8:	51 05       	cpc	r21, r1
    2eca:	08 f0       	brcs	.+2      	; 0x2ece <nrk_gpio_toggle+0x16>
    2ecc:	fe c0       	rjmp	.+508    	; 0x30ca <nrk_gpio_toggle+0x212>
    2ece:	fa 01       	movw	r30, r20
    2ed0:	eb 55       	subi	r30, 0x5B	; 91
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	86 95       	lsr	r24
    2ed6:	86 95       	lsr	r24
    2ed8:	86 95       	lsr	r24
    2eda:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2ede:	20 b1       	in	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	08 2e       	mov	r0, r24
    2ee4:	02 c0       	rjmp	.+4      	; 0x2eea <nrk_gpio_toggle+0x32>
    2ee6:	35 95       	asr	r19
    2ee8:	27 95       	ror	r18
    2eea:	0a 94       	dec	r0
    2eec:	e2 f7       	brpl	.-8      	; 0x2ee6 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2eee:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2ef0:	20 fd       	sbrc	r18, 0
    2ef2:	0b c0       	rjmp	.+22     	; 0x2f0a <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2ef4:	21 e0       	ldi	r18, 0x01	; 1
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	b9 01       	movw	r22, r18
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <nrk_gpio_toggle+0x48>
    2efc:	66 0f       	add	r22, r22
    2efe:	77 1f       	adc	r23, r23
    2f00:	8a 95       	dec	r24
    2f02:	e2 f7       	brpl	.-8      	; 0x2efc <nrk_gpio_toggle+0x44>
    2f04:	cb 01       	movw	r24, r22
    2f06:	84 2b       	or	r24, r20
    2f08:	0b c0       	rjmp	.+22     	; 0x2f20 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    2f0a:	21 e0       	ldi	r18, 0x01	; 1
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	b9 01       	movw	r22, r18
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <nrk_gpio_toggle+0x5e>
    2f12:	66 0f       	add	r22, r22
    2f14:	77 1f       	adc	r23, r23
    2f16:	8a 95       	dec	r24
    2f18:	e2 f7       	brpl	.-8      	; 0x2f12 <nrk_gpio_toggle+0x5a>
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	80 95       	com	r24
    2f1e:	84 23       	and	r24, r20
    2f20:	82 b9       	out	0x02, r24	; 2
    2f22:	16 c0       	rjmp	.+44     	; 0x2f50 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2f24:	23 b1       	in	r18, 0x03	; 3
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	08 2e       	mov	r0, r24
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <nrk_gpio_toggle+0x78>
    2f2c:	35 95       	asr	r19
    2f2e:	27 95       	ror	r18
    2f30:	0a 94       	dec	r0
    2f32:	e2 f7       	brpl	.-8      	; 0x2f2c <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2f34:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2f36:	20 fd       	sbrc	r18, 0
    2f38:	0d c0       	rjmp	.+26     	; 0x2f54 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2f3a:	21 e0       	ldi	r18, 0x01	; 1
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	b9 01       	movw	r22, r18
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <nrk_gpio_toggle+0x8e>
    2f42:	66 0f       	add	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	8a 95       	dec	r24
    2f48:	e2 f7       	brpl	.-8      	; 0x2f42 <nrk_gpio_toggle+0x8a>
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	84 2b       	or	r24, r20
    2f4e:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2f54:	21 e0       	ldi	r18, 0x01	; 1
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	b9 01       	movw	r22, r18
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <nrk_gpio_toggle+0xa8>
    2f5c:	66 0f       	add	r22, r22
    2f5e:	77 1f       	adc	r23, r23
    2f60:	8a 95       	dec	r24
    2f62:	e2 f7       	brpl	.-8      	; 0x2f5c <nrk_gpio_toggle+0xa4>
    2f64:	cb 01       	movw	r24, r22
    2f66:	80 95       	com	r24
    2f68:	84 23       	and	r24, r20
    2f6a:	f1 cf       	rjmp	.-30     	; 0x2f4e <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2f6c:	26 b1       	in	r18, 0x06	; 6
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	08 2e       	mov	r0, r24
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <nrk_gpio_toggle+0xc0>
    2f74:	35 95       	asr	r19
    2f76:	27 95       	ror	r18
    2f78:	0a 94       	dec	r0
    2f7a:	e2 f7       	brpl	.-8      	; 0x2f74 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2f7c:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2f7e:	20 fd       	sbrc	r18, 0
    2f80:	0b c0       	rjmp	.+22     	; 0x2f98 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2f82:	21 e0       	ldi	r18, 0x01	; 1
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	b9 01       	movw	r22, r18
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <nrk_gpio_toggle+0xd6>
    2f8a:	66 0f       	add	r22, r22
    2f8c:	77 1f       	adc	r23, r23
    2f8e:	8a 95       	dec	r24
    2f90:	e2 f7       	brpl	.-8      	; 0x2f8a <nrk_gpio_toggle+0xd2>
    2f92:	cb 01       	movw	r24, r22
    2f94:	84 2b       	or	r24, r20
    2f96:	0b c0       	rjmp	.+22     	; 0x2fae <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2f98:	21 e0       	ldi	r18, 0x01	; 1
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	b9 01       	movw	r22, r18
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <nrk_gpio_toggle+0xec>
    2fa0:	66 0f       	add	r22, r22
    2fa2:	77 1f       	adc	r23, r23
    2fa4:	8a 95       	dec	r24
    2fa6:	e2 f7       	brpl	.-8      	; 0x2fa0 <nrk_gpio_toggle+0xe8>
    2fa8:	cb 01       	movw	r24, r22
    2faa:	80 95       	com	r24
    2fac:	84 23       	and	r24, r20
    2fae:	88 b9       	out	0x08, r24	; 8
    2fb0:	cf cf       	rjmp	.-98     	; 0x2f50 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2fb2:	29 b1       	in	r18, 0x09	; 9
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	08 2e       	mov	r0, r24
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <nrk_gpio_toggle+0x106>
    2fba:	35 95       	asr	r19
    2fbc:	27 95       	ror	r18
    2fbe:	0a 94       	dec	r0
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2fc2:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2fc4:	20 fd       	sbrc	r18, 0
    2fc6:	0b c0       	rjmp	.+22     	; 0x2fde <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2fc8:	21 e0       	ldi	r18, 0x01	; 1
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	b9 01       	movw	r22, r18
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <nrk_gpio_toggle+0x11c>
    2fd0:	66 0f       	add	r22, r22
    2fd2:	77 1f       	adc	r23, r23
    2fd4:	8a 95       	dec	r24
    2fd6:	e2 f7       	brpl	.-8      	; 0x2fd0 <nrk_gpio_toggle+0x118>
    2fd8:	cb 01       	movw	r24, r22
    2fda:	84 2b       	or	r24, r20
    2fdc:	0b c0       	rjmp	.+22     	; 0x2ff4 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2fde:	21 e0       	ldi	r18, 0x01	; 1
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	b9 01       	movw	r22, r18
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <nrk_gpio_toggle+0x132>
    2fe6:	66 0f       	add	r22, r22
    2fe8:	77 1f       	adc	r23, r23
    2fea:	8a 95       	dec	r24
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <nrk_gpio_toggle+0x12e>
    2fee:	cb 01       	movw	r24, r22
    2ff0:	80 95       	com	r24
    2ff2:	84 23       	and	r24, r20
    2ff4:	8b b9       	out	0x0b, r24	; 11
    2ff6:	ac cf       	rjmp	.-168    	; 0x2f50 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2ff8:	2c b1       	in	r18, 0x0c	; 12
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	08 2e       	mov	r0, r24
    2ffe:	02 c0       	rjmp	.+4      	; 0x3004 <nrk_gpio_toggle+0x14c>
    3000:	35 95       	asr	r19
    3002:	27 95       	ror	r18
    3004:	0a 94       	dec	r0
    3006:	e2 f7       	brpl	.-8      	; 0x3000 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3008:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    300a:	20 fd       	sbrc	r18, 0
    300c:	0b c0       	rjmp	.+22     	; 0x3024 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    300e:	21 e0       	ldi	r18, 0x01	; 1
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	b9 01       	movw	r22, r18
    3014:	02 c0       	rjmp	.+4      	; 0x301a <nrk_gpio_toggle+0x162>
    3016:	66 0f       	add	r22, r22
    3018:	77 1f       	adc	r23, r23
    301a:	8a 95       	dec	r24
    301c:	e2 f7       	brpl	.-8      	; 0x3016 <nrk_gpio_toggle+0x15e>
    301e:	cb 01       	movw	r24, r22
    3020:	84 2b       	or	r24, r20
    3022:	0b c0       	rjmp	.+22     	; 0x303a <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    3024:	21 e0       	ldi	r18, 0x01	; 1
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	b9 01       	movw	r22, r18
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <nrk_gpio_toggle+0x178>
    302c:	66 0f       	add	r22, r22
    302e:	77 1f       	adc	r23, r23
    3030:	8a 95       	dec	r24
    3032:	e2 f7       	brpl	.-8      	; 0x302c <nrk_gpio_toggle+0x174>
    3034:	cb 01       	movw	r24, r22
    3036:	80 95       	com	r24
    3038:	84 23       	and	r24, r20
    303a:	8e b9       	out	0x0e, r24	; 14
    303c:	89 cf       	rjmp	.-238    	; 0x2f50 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    303e:	2f b1       	in	r18, 0x0f	; 15
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	08 2e       	mov	r0, r24
    3044:	02 c0       	rjmp	.+4      	; 0x304a <nrk_gpio_toggle+0x192>
    3046:	35 95       	asr	r19
    3048:	27 95       	ror	r18
    304a:	0a 94       	dec	r0
    304c:	e2 f7       	brpl	.-8      	; 0x3046 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    304e:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    3050:	20 fd       	sbrc	r18, 0
    3052:	0b c0       	rjmp	.+22     	; 0x306a <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    3054:	21 e0       	ldi	r18, 0x01	; 1
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	b9 01       	movw	r22, r18
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <nrk_gpio_toggle+0x1a8>
    305c:	66 0f       	add	r22, r22
    305e:	77 1f       	adc	r23, r23
    3060:	8a 95       	dec	r24
    3062:	e2 f7       	brpl	.-8      	; 0x305c <nrk_gpio_toggle+0x1a4>
    3064:	cb 01       	movw	r24, r22
    3066:	84 2b       	or	r24, r20
    3068:	0b c0       	rjmp	.+22     	; 0x3080 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    306a:	21 e0       	ldi	r18, 0x01	; 1
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	b9 01       	movw	r22, r18
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <nrk_gpio_toggle+0x1be>
    3072:	66 0f       	add	r22, r22
    3074:	77 1f       	adc	r23, r23
    3076:	8a 95       	dec	r24
    3078:	e2 f7       	brpl	.-8      	; 0x3072 <nrk_gpio_toggle+0x1ba>
    307a:	cb 01       	movw	r24, r22
    307c:	80 95       	com	r24
    307e:	84 23       	and	r24, r20
    3080:	81 bb       	out	0x11, r24	; 17
    3082:	66 cf       	rjmp	.-308    	; 0x2f50 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    3084:	22 b3       	in	r18, 0x12	; 18
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	08 2e       	mov	r0, r24
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <nrk_gpio_toggle+0x1d8>
    308c:	35 95       	asr	r19
    308e:	27 95       	ror	r18
    3090:	0a 94       	dec	r0
    3092:	e2 f7       	brpl	.-8      	; 0x308c <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    3094:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    3096:	20 fd       	sbrc	r18, 0
    3098:	0b c0       	rjmp	.+22     	; 0x30b0 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    309a:	21 e0       	ldi	r18, 0x01	; 1
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	b9 01       	movw	r22, r18
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <nrk_gpio_toggle+0x1ee>
    30a2:	66 0f       	add	r22, r22
    30a4:	77 1f       	adc	r23, r23
    30a6:	8a 95       	dec	r24
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <nrk_gpio_toggle+0x1ea>
    30aa:	cb 01       	movw	r24, r22
    30ac:	84 2b       	or	r24, r20
    30ae:	0b c0       	rjmp	.+22     	; 0x30c6 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    30b0:	21 e0       	ldi	r18, 0x01	; 1
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	b9 01       	movw	r22, r18
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <nrk_gpio_toggle+0x204>
    30b8:	66 0f       	add	r22, r22
    30ba:	77 1f       	adc	r23, r23
    30bc:	8a 95       	dec	r24
    30be:	e2 f7       	brpl	.-8      	; 0x30b8 <nrk_gpio_toggle+0x200>
    30c0:	cb 01       	movw	r24, r22
    30c2:	80 95       	com	r24
    30c4:	84 23       	and	r24, r20
    30c6:	84 bb       	out	0x14, r24	; 20
    30c8:	43 cf       	rjmp	.-378    	; 0x2f50 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    30ca:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    30cc:	08 95       	ret

000030ce <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    30ce:	8f 3f       	cpi	r24, 0xFF	; 255
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <nrk_gpio_direction+0x6>
    30d2:	d5 c0       	rjmp	.+426    	; 0x327e <nrk_gpio_direction+0x1b0>
    30d4:	e8 2f       	mov	r30, r24
    30d6:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    30d8:	4e 2f       	mov	r20, r30
    30da:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    30dc:	61 11       	cpse	r22, r1
    30de:	67 c0       	rjmp	.+206    	; 0x31ae <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    30e0:	47 30       	cpi	r20, 0x07	; 7
    30e2:	51 05       	cpc	r21, r1
    30e4:	08 f0       	brcs	.+2      	; 0x30e8 <nrk_gpio_direction+0x1a>
    30e6:	cb c0       	rjmp	.+406    	; 0x327e <nrk_gpio_direction+0x1b0>
    30e8:	fa 01       	movw	r30, r20
    30ea:	e4 55       	subi	r30, 0x54	; 84
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	86 95       	lsr	r24
    30f0:	86 95       	lsr	r24
    30f2:	86 95       	lsr	r24
    30f4:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    30f8:	41 b1       	in	r20, 0x01	; 1
    30fa:	21 e0       	ldi	r18, 0x01	; 1
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	b9 01       	movw	r22, r18
    3100:	02 c0       	rjmp	.+4      	; 0x3106 <nrk_gpio_direction+0x38>
    3102:	66 0f       	add	r22, r22
    3104:	77 1f       	adc	r23, r23
    3106:	8a 95       	dec	r24
    3108:	e2 f7       	brpl	.-8      	; 0x3102 <nrk_gpio_direction+0x34>
    310a:	cb 01       	movw	r24, r22
    310c:	80 95       	com	r24
    310e:	84 23       	and	r24, r20
    3110:	65 c0       	rjmp	.+202    	; 0x31dc <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    3112:	44 b1       	in	r20, 0x04	; 4
    3114:	21 e0       	ldi	r18, 0x01	; 1
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	b9 01       	movw	r22, r18
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <nrk_gpio_direction+0x52>
    311c:	66 0f       	add	r22, r22
    311e:	77 1f       	adc	r23, r23
    3120:	8a 95       	dec	r24
    3122:	e2 f7       	brpl	.-8      	; 0x311c <nrk_gpio_direction+0x4e>
    3124:	cb 01       	movw	r24, r22
    3126:	80 95       	com	r24
    3128:	84 23       	and	r24, r20
    312a:	65 c0       	rjmp	.+202    	; 0x31f6 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    312c:	47 b1       	in	r20, 0x07	; 7
    312e:	21 e0       	ldi	r18, 0x01	; 1
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	b9 01       	movw	r22, r18
    3134:	02 c0       	rjmp	.+4      	; 0x313a <nrk_gpio_direction+0x6c>
    3136:	66 0f       	add	r22, r22
    3138:	77 1f       	adc	r23, r23
    313a:	8a 95       	dec	r24
    313c:	e2 f7       	brpl	.-8      	; 0x3136 <nrk_gpio_direction+0x68>
    313e:	cb 01       	movw	r24, r22
    3140:	80 95       	com	r24
    3142:	84 23       	and	r24, r20
    3144:	65 c0       	rjmp	.+202    	; 0x3210 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    3146:	4a b1       	in	r20, 0x0a	; 10
    3148:	21 e0       	ldi	r18, 0x01	; 1
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	b9 01       	movw	r22, r18
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <nrk_gpio_direction+0x86>
    3150:	66 0f       	add	r22, r22
    3152:	77 1f       	adc	r23, r23
    3154:	8a 95       	dec	r24
    3156:	e2 f7       	brpl	.-8      	; 0x3150 <nrk_gpio_direction+0x82>
    3158:	cb 01       	movw	r24, r22
    315a:	80 95       	com	r24
    315c:	84 23       	and	r24, r20
    315e:	65 c0       	rjmp	.+202    	; 0x322a <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    3160:	4d b1       	in	r20, 0x0d	; 13
    3162:	21 e0       	ldi	r18, 0x01	; 1
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	b9 01       	movw	r22, r18
    3168:	02 c0       	rjmp	.+4      	; 0x316e <nrk_gpio_direction+0xa0>
    316a:	66 0f       	add	r22, r22
    316c:	77 1f       	adc	r23, r23
    316e:	8a 95       	dec	r24
    3170:	e2 f7       	brpl	.-8      	; 0x316a <nrk_gpio_direction+0x9c>
    3172:	cb 01       	movw	r24, r22
    3174:	80 95       	com	r24
    3176:	84 23       	and	r24, r20
    3178:	65 c0       	rjmp	.+202    	; 0x3244 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    317a:	40 b3       	in	r20, 0x10	; 16
    317c:	21 e0       	ldi	r18, 0x01	; 1
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	b9 01       	movw	r22, r18
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <nrk_gpio_direction+0xba>
    3184:	66 0f       	add	r22, r22
    3186:	77 1f       	adc	r23, r23
    3188:	8a 95       	dec	r24
    318a:	e2 f7       	brpl	.-8      	; 0x3184 <nrk_gpio_direction+0xb6>
    318c:	cb 01       	movw	r24, r22
    318e:	80 95       	com	r24
    3190:	84 23       	and	r24, r20
    3192:	65 c0       	rjmp	.+202    	; 0x325e <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    3194:	43 b3       	in	r20, 0x13	; 19
    3196:	21 e0       	ldi	r18, 0x01	; 1
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	b9 01       	movw	r22, r18
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <nrk_gpio_direction+0xd4>
    319e:	66 0f       	add	r22, r22
    31a0:	77 1f       	adc	r23, r23
    31a2:	8a 95       	dec	r24
    31a4:	e2 f7       	brpl	.-8      	; 0x319e <nrk_gpio_direction+0xd0>
    31a6:	cb 01       	movw	r24, r22
    31a8:	80 95       	com	r24
    31aa:	84 23       	and	r24, r20
    31ac:	65 c0       	rjmp	.+202    	; 0x3278 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    31ae:	47 30       	cpi	r20, 0x07	; 7
    31b0:	51 05       	cpc	r21, r1
    31b2:	08 f0       	brcs	.+2      	; 0x31b6 <nrk_gpio_direction+0xe8>
    31b4:	64 c0       	rjmp	.+200    	; 0x327e <nrk_gpio_direction+0x1b0>
    31b6:	fa 01       	movw	r30, r20
    31b8:	ed 54       	subi	r30, 0x4D	; 77
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	86 95       	lsr	r24
    31be:	86 95       	lsr	r24
    31c0:	86 95       	lsr	r24
    31c2:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    31c6:	41 b1       	in	r20, 0x01	; 1
    31c8:	21 e0       	ldi	r18, 0x01	; 1
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	b9 01       	movw	r22, r18
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <nrk_gpio_direction+0x106>
    31d0:	66 0f       	add	r22, r22
    31d2:	77 1f       	adc	r23, r23
    31d4:	8a 95       	dec	r24
    31d6:	e2 f7       	brpl	.-8      	; 0x31d0 <nrk_gpio_direction+0x102>
    31d8:	cb 01       	movw	r24, r22
    31da:	84 2b       	or	r24, r20
    31dc:	81 b9       	out	0x01, r24	; 1
    31de:	4d c0       	rjmp	.+154    	; 0x327a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    31e0:	44 b1       	in	r20, 0x04	; 4
    31e2:	21 e0       	ldi	r18, 0x01	; 1
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	b9 01       	movw	r22, r18
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <nrk_gpio_direction+0x120>
    31ea:	66 0f       	add	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	8a 95       	dec	r24
    31f0:	e2 f7       	brpl	.-8      	; 0x31ea <nrk_gpio_direction+0x11c>
    31f2:	cb 01       	movw	r24, r22
    31f4:	84 2b       	or	r24, r20
    31f6:	84 b9       	out	0x04, r24	; 4
    31f8:	40 c0       	rjmp	.+128    	; 0x327a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    31fa:	47 b1       	in	r20, 0x07	; 7
    31fc:	21 e0       	ldi	r18, 0x01	; 1
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	b9 01       	movw	r22, r18
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <nrk_gpio_direction+0x13a>
    3204:	66 0f       	add	r22, r22
    3206:	77 1f       	adc	r23, r23
    3208:	8a 95       	dec	r24
    320a:	e2 f7       	brpl	.-8      	; 0x3204 <nrk_gpio_direction+0x136>
    320c:	cb 01       	movw	r24, r22
    320e:	84 2b       	or	r24, r20
    3210:	87 b9       	out	0x07, r24	; 7
    3212:	33 c0       	rjmp	.+102    	; 0x327a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    3214:	4a b1       	in	r20, 0x0a	; 10
    3216:	21 e0       	ldi	r18, 0x01	; 1
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	b9 01       	movw	r22, r18
    321c:	02 c0       	rjmp	.+4      	; 0x3222 <nrk_gpio_direction+0x154>
    321e:	66 0f       	add	r22, r22
    3220:	77 1f       	adc	r23, r23
    3222:	8a 95       	dec	r24
    3224:	e2 f7       	brpl	.-8      	; 0x321e <nrk_gpio_direction+0x150>
    3226:	cb 01       	movw	r24, r22
    3228:	84 2b       	or	r24, r20
    322a:	8a b9       	out	0x0a, r24	; 10
    322c:	26 c0       	rjmp	.+76     	; 0x327a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    322e:	4d b1       	in	r20, 0x0d	; 13
    3230:	21 e0       	ldi	r18, 0x01	; 1
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	b9 01       	movw	r22, r18
    3236:	02 c0       	rjmp	.+4      	; 0x323c <nrk_gpio_direction+0x16e>
    3238:	66 0f       	add	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	8a 95       	dec	r24
    323e:	e2 f7       	brpl	.-8      	; 0x3238 <nrk_gpio_direction+0x16a>
    3240:	cb 01       	movw	r24, r22
    3242:	84 2b       	or	r24, r20
    3244:	8d b9       	out	0x0d, r24	; 13
    3246:	19 c0       	rjmp	.+50     	; 0x327a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    3248:	40 b3       	in	r20, 0x10	; 16
    324a:	21 e0       	ldi	r18, 0x01	; 1
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	b9 01       	movw	r22, r18
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <nrk_gpio_direction+0x188>
    3252:	66 0f       	add	r22, r22
    3254:	77 1f       	adc	r23, r23
    3256:	8a 95       	dec	r24
    3258:	e2 f7       	brpl	.-8      	; 0x3252 <nrk_gpio_direction+0x184>
    325a:	cb 01       	movw	r24, r22
    325c:	84 2b       	or	r24, r20
    325e:	80 bb       	out	0x10, r24	; 16
    3260:	0c c0       	rjmp	.+24     	; 0x327a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    3262:	43 b3       	in	r20, 0x13	; 19
    3264:	21 e0       	ldi	r18, 0x01	; 1
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	b9 01       	movw	r22, r18
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <nrk_gpio_direction+0x1a2>
    326c:	66 0f       	add	r22, r22
    326e:	77 1f       	adc	r23, r23
    3270:	8a 95       	dec	r24
    3272:	e2 f7       	brpl	.-8      	; 0x326c <nrk_gpio_direction+0x19e>
    3274:	cb 01       	movw	r24, r22
    3276:	84 2b       	or	r24, r20
    3278:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    327a:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    327c:	08 95       	ret
                        default: return -1;
    327e:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    3280:	08 95       	ret

00003282 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    3282:	81 11       	cpse	r24, r1
    3284:	06 c0       	rjmp	.+12     	; 0x3292 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    3286:	80 b1       	in	r24, 0x00	; 0
    3288:	86 95       	lsr	r24
    328a:	81 70       	andi	r24, 0x01	; 1
    328c:	91 e0       	ldi	r25, 0x01	; 1
    328e:	89 27       	eor	r24, r25
    3290:	08 95       	ret
	} 
return -1;
    3292:	8f ef       	ldi	r24, 0xFF	; 255
}
    3294:	08 95       	ret

00003296 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	11 f4       	brne	.+4      	; 0x329e <nrk_led_toggle+0x8>
    329a:	83 e2       	ldi	r24, 0x23	; 35
    329c:	0d c0       	rjmp	.+26     	; 0x32b8 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    329e:	81 30       	cpi	r24, 0x01	; 1
    32a0:	91 05       	cpc	r25, r1
    32a2:	11 f4       	brne	.+4      	; 0x32a8 <nrk_led_toggle+0x12>
    32a4:	8b e2       	ldi	r24, 0x2B	; 43
    32a6:	08 c0       	rjmp	.+16     	; 0x32b8 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    32a8:	82 30       	cpi	r24, 0x02	; 2
    32aa:	91 05       	cpc	r25, r1
    32ac:	11 f4       	brne	.+4      	; 0x32b2 <nrk_led_toggle+0x1c>
    32ae:	83 e3       	ldi	r24, 0x33	; 51
    32b0:	03 c0       	rjmp	.+6      	; 0x32b8 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    32b2:	03 97       	sbiw	r24, 0x03	; 3
    32b4:	29 f4       	brne	.+10     	; 0x32c0 <nrk_led_toggle+0x2a>
    32b6:	8b e3       	ldi	r24, 0x3B	; 59
    32b8:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <nrk_gpio_toggle>
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	08 95       	ret
return -1;
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
}
    32c2:	08 95       	ret

000032c4 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	11 f4       	brne	.+4      	; 0x32cc <nrk_led_clr+0x8>
    32c8:	83 e2       	ldi	r24, 0x23	; 35
    32ca:	0d c0       	rjmp	.+26     	; 0x32e6 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	91 05       	cpc	r25, r1
    32d0:	11 f4       	brne	.+4      	; 0x32d6 <nrk_led_clr+0x12>
    32d2:	8b e2       	ldi	r24, 0x2B	; 43
    32d4:	08 c0       	rjmp	.+16     	; 0x32e6 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    32d6:	82 30       	cpi	r24, 0x02	; 2
    32d8:	91 05       	cpc	r25, r1
    32da:	11 f4       	brne	.+4      	; 0x32e0 <nrk_led_clr+0x1c>
    32dc:	83 e3       	ldi	r24, 0x33	; 51
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    32e0:	03 97       	sbiw	r24, 0x03	; 3
    32e2:	29 f4       	brne	.+10     	; 0x32ee <nrk_led_clr+0x2a>
    32e4:	8b e3       	ldi	r24, 0x3B	; 59
    32e6:	0e 94 57 16 	call	0x2cae	; 0x2cae <nrk_gpio_set>
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	08 95       	ret
return -1;
    32ee:	8f ef       	ldi	r24, 0xFF	; 255
}
    32f0:	08 95       	ret

000032f2 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	11 f4       	brne	.+4      	; 0x32fa <nrk_led_set+0x8>
    32f6:	83 e2       	ldi	r24, 0x23	; 35
    32f8:	0d c0       	rjmp	.+26     	; 0x3314 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    32fa:	81 30       	cpi	r24, 0x01	; 1
    32fc:	91 05       	cpc	r25, r1
    32fe:	11 f4       	brne	.+4      	; 0x3304 <nrk_led_set+0x12>
    3300:	8b e2       	ldi	r24, 0x2B	; 43
    3302:	08 c0       	rjmp	.+16     	; 0x3314 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    3304:	82 30       	cpi	r24, 0x02	; 2
    3306:	91 05       	cpc	r25, r1
    3308:	11 f4       	brne	.+4      	; 0x330e <nrk_led_set+0x1c>
    330a:	83 e3       	ldi	r24, 0x33	; 51
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    330e:	03 97       	sbiw	r24, 0x03	; 3
    3310:	29 f4       	brne	.+10     	; 0x331c <nrk_led_set+0x2a>
    3312:	8b e3       	ldi	r24, 0x3B	; 59
    3314:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <nrk_gpio_clr>
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	08 95       	ret
return -1;
    331c:	8f ef       	ldi	r24, 0xFF	; 255
}
    331e:	08 95       	ret

00003320 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    3320:	88 23       	and	r24, r24
    3322:	19 f0       	breq	.+6      	; 0x332a <nrk_gpio_pullups+0xa>
    3324:	85 b7       	in	r24, 0x35	; 53
    3326:	8f 7e       	andi	r24, 0xEF	; 239
    3328:	02 c0       	rjmp	.+4      	; 0x332e <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    332a:	85 b7       	in	r24, 0x35	; 53
    332c:	80 61       	ori	r24, 0x10	; 16
    332e:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	08 95       	ret

00003334 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    3334:	90 91 c8 00 	lds	r25, 0x00C8
    3338:	95 ff       	sbrs	r25, 5
    333a:	fc cf       	rjmp	.-8      	; 0x3334 <putc1>
    333c:	80 93 ce 00 	sts	0x00CE, r24
    3340:	08 95       	ret

00003342 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    3342:	90 93 c5 00 	sts	0x00C5, r25
    3346:	80 93 c4 00 	sts	0x00C4, r24
    334a:	86 e0       	ldi	r24, 0x06	; 6
    334c:	80 93 c2 00 	sts	0x00C2, r24
    3350:	e1 ec       	ldi	r30, 0xC1	; 193
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	8b 7f       	andi	r24, 0xFB	; 251
    3358:	80 83       	st	Z, r24
    335a:	a0 ec       	ldi	r26, 0xC0	; 192
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	8c 91       	ld	r24, X
    3360:	82 60       	ori	r24, 0x02	; 2
    3362:	8c 93       	st	X, r24
ENABLE_UART0();
    3364:	80 81       	ld	r24, Z
    3366:	88 61       	ori	r24, 0x18	; 24
    3368:	80 83       	st	Z, r24
    336a:	08 95       	ret

0000336c <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    336c:	90 93 cd 00 	sts	0x00CD, r25
    3370:	80 93 cc 00 	sts	0x00CC, r24
    3374:	86 e0       	ldi	r24, 0x06	; 6
    3376:	80 93 ca 00 	sts	0x00CA, r24
    337a:	e9 ec       	ldi	r30, 0xC9	; 201
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	8b 7f       	andi	r24, 0xFB	; 251
    3382:	80 83       	st	Z, r24
    3384:	a8 ec       	ldi	r26, 0xC8	; 200
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	8c 91       	ld	r24, X
    338a:	82 60       	ori	r24, 0x02	; 2
    338c:	8c 93       	st	X, r24
ENABLE_UART1();
    338e:	80 81       	ld	r24, Z
    3390:	88 61       	ori	r24, 0x18	; 24
    3392:	80 83       	st	Z, r24
    3394:	08 95       	ret

00003396 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    3396:	0e 94 a1 19 	call	0x3342	; 0x3342 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    339a:	66 e1       	ldi	r22, 0x16	; 22
    339c:	76 e1       	ldi	r23, 0x16	; 22
    339e:	8f e7       	ldi	r24, 0x7F	; 127
    33a0:	95 e1       	ldi	r25, 0x15	; 21
    33a2:	0e 94 34 32 	call	0x6468	; 0x6468 <fdevopen>
    33a6:	90 93 0a 18 	sts	0x180A, r25
    33aa:	80 93 09 18 	sts	0x1809, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    33ae:	66 e1       	ldi	r22, 0x16	; 22
    33b0:	76 e1       	ldi	r23, 0x16	; 22
    33b2:	8f e7       	ldi	r24, 0x7F	; 127
    33b4:	95 e1       	ldi	r25, 0x15	; 21
    33b6:	0e 94 34 32 	call	0x6468	; 0x6468 <fdevopen>
    33ba:	90 93 08 18 	sts	0x1808, r25
    33be:	80 93 07 18 	sts	0x1807, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    33c2:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <nrk_signal_create>
    33c6:	80 93 fb 04 	sts	0x04FB, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    33ca:	8f 3f       	cpi	r24, 0xFF	; 255
    33cc:	19 f4       	brne	.+6      	; 0x33d4 <nrk_setup_uart+0x3e>
    33ce:	8e e0       	ldi	r24, 0x0E	; 14
    33d0:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_error_add>
   uart_rx_buf_start=0;
    33d4:	10 92 0f 05 	sts	0x050F, r1
    33d8:	10 92 0e 05 	sts	0x050E, r1
   uart_rx_buf_end=0;
    33dc:	10 92 0d 05 	sts	0x050D, r1
    33e0:	10 92 0c 05 	sts	0x050C, r1
   ENABLE_UART0_RX_INT();
    33e4:	80 91 c1 00 	lds	r24, 0x00C1
    33e8:	80 68       	ori	r24, 0x80	; 128
    33ea:	80 93 c1 00 	sts	0x00C1, r24
    33ee:	08 95       	ret

000033f0 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    33f0:	80 91 c8 00 	lds	r24, 0x00C8
    33f4:	87 ff       	sbrs	r24, 7
    33f6:	fc cf       	rjmp	.-8      	; 0x33f0 <getc1>
    33f8:	80 91 c8 00 	lds	r24, 0x00C8
    33fc:	8f 77       	andi	r24, 0x7F	; 127
    33fe:	80 93 c8 00 	sts	0x00C8, r24
    3402:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    3406:	08 95       	ret

00003408 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	d1 f7       	brne	.-12     	; 0x3408 <halWait>

} // halWait
    3414:	08 95       	ret

00003416 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    3416:	0c 94 cd 33 	jmp	0x679a	; 0x679a <__eerd_byte_m128rfa1>

0000341a <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    341a:	0e 94 d5 33 	call	0x67aa	; 0x67aa <__eewr_byte_m128rfa1>
}
    341e:	08 95       	ret

00003420 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    3420:	ef 92       	push	r14
    3422:	ff 92       	push	r15
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    3436:	18 2f       	mov	r17, r24
    3438:	f7 01       	movw	r30, r14
    343a:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    3444:	08 2f       	mov	r16, r24
    3446:	f7 01       	movw	r30, r14
    3448:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    3452:	d8 2f       	mov	r29, r24
    3454:	f7 01       	movw	r30, r14
    3456:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    3460:	c8 2f       	mov	r28, r24
    3462:	f7 01       	movw	r30, r14
    3464:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    3466:	84 e0       	ldi	r24, 0x04	; 4
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    346e:	10 0f       	add	r17, r16
    3470:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    3472:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    3474:	8c 17       	cp	r24, r28
    3476:	11 f0       	breq	.+4      	; 0x347c <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    3478:	8f ef       	ldi	r24, 0xFF	; 255
    347a:	01 c0       	rjmp	.+2      	; 0x347e <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    347c:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	08 95       	ret

0000348c <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    3492:	85 e0       	ldi	r24, 0x05	; 5
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    349a:	88 83       	st	Y, r24
return NRK_OK;
}
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	df 91       	pop	r29
    34a0:	cf 91       	pop	r28
    34a2:	08 95       	ret

000034a4 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    34a4:	fc 01       	movw	r30, r24
    34a6:	60 81       	ld	r22, Z
    34a8:	86 e0       	ldi	r24, 0x06	; 6
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	0e 94 d5 33 	call	0x67aa	; 0x67aa <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	08 95       	ret

000034b4 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    34b4:	cf 93       	push	r28
    34b6:	df 93       	push	r29
    34b8:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    34ba:	86 e0       	ldi	r24, 0x06	; 6
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    34c2:	88 83       	st	Y, r24
  return NRK_OK;
}
    34c4:	81 e0       	ldi	r24, 0x01	; 1
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	8c 01       	movw	r16, r24
    34d6:	c0 e0       	ldi	r28, 0x00	; 0
    34d8:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    34da:	ce 01       	movw	r24, r28
    34dc:	08 96       	adiw	r24, 0x08	; 8
    34de:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    34e2:	f8 01       	movw	r30, r16
    34e4:	81 93       	st	Z+, r24
    34e6:	8f 01       	movw	r16, r30
    34e8:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    34ea:	c0 31       	cpi	r28, 0x10	; 16
    34ec:	d1 05       	cpc	r29, r1
    34ee:	a9 f7       	brne	.-22     	; 0x34da <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	08 95       	ret

000034fc <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    34fc:	0f 93       	push	r16
    34fe:	1f 93       	push	r17
    3500:	cf 93       	push	r28
    3502:	df 93       	push	r29
    3504:	8c 01       	movw	r16, r24
    3506:	c0 e0       	ldi	r28, 0x00	; 0
    3508:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    350a:	f8 01       	movw	r30, r16
    350c:	61 91       	ld	r22, Z+
    350e:	8f 01       	movw	r16, r30
    3510:	ce 01       	movw	r24, r28
    3512:	08 96       	adiw	r24, 0x08	; 8
    3514:	0e 94 d5 33 	call	0x67aa	; 0x67aa <__eewr_byte_m128rfa1>
    3518:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    351a:	c0 31       	cpi	r28, 0x10	; 16
    351c:	d1 05       	cpc	r29, r1
    351e:	a9 f7       	brne	.-22     	; 0x350a <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
    352a:	08 95       	ret

0000352c <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    3532:	87 e0       	ldi	r24, 0x07	; 7
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 cd 33 	call	0x679a	; 0x679a <__eerd_byte_m128rfa1>
    353a:	88 83       	st	Y, r24
  return NRK_OK;
}
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	08 95       	ret

00003544 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    3544:	fc 01       	movw	r30, r24
    3546:	60 81       	ld	r22, Z
    3548:	87 e0       	ldi	r24, 0x07	; 7
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	0e 94 d5 33 	call	0x67aa	; 0x67aa <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	08 95       	ret

00003554 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    3554:	f8 94       	cli
    3556:	08 95       	ret

00003558 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    3558:	78 94       	sei
    355a:	08 95       	ret

0000355c <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    355c:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
while(1);
    3560:	ff cf       	rjmp	.-2      	; 0x3560 <nrk_halt+0x4>

00003562 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	a3 97       	sbiw	r28, 0x23	; 35
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    3578:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <nrk_signal_create>
    357c:	80 93 be 17 	sts	0x17BE, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    3580:	8f 3f       	cpi	r24, 0xFF	; 255
    3582:	21 f4       	brne	.+8      	; 0x358c <nrk_init+0x2a>
    3584:	60 e0       	ldi	r22, 0x00	; 0
    3586:	8e e0       	ldi	r24, 0x0E	; 14
    3588:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    358c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <_nrk_startup_error>
    3590:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3592:	80 ff       	sbrs	r24, 0
    3594:	04 c0       	rjmp	.+8      	; 0x359e <nrk_init+0x3c>
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	86 e0       	ldi	r24, 0x06	; 6
    359a:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    359e:	11 ff       	sbrs	r17, 1
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <nrk_init+0x48>
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	84 e1       	ldi	r24, 0x14	; 20
    35a6:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    35aa:	12 ff       	sbrs	r17, 2
    35ac:	04 c0       	rjmp	.+8      	; 0x35b6 <nrk_init+0x54>
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	83 e1       	ldi	r24, 0x13	; 19
    35b2:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    35b6:	10 92 c1 17 	sts	0x17C1, r1
    nrk_cur_task_TCB = NULL;
    35ba:	10 92 cf 17 	sts	0x17CF, r1
    35be:	10 92 ce 17 	sts	0x17CE, r1
    
    nrk_high_ready_TCB = NULL;
    35c2:	10 92 c0 17 	sts	0x17C0, r1
    35c6:	10 92 bf 17 	sts	0x17BF, r1
    nrk_high_ready_prio = 0; 
    35ca:	10 92 d0 17 	sts	0x17D0, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    35ce:	10 92 cd 17 	sts	0x17CD, r1
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	90 e0       	ldi	r25, 0x00	; 0

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    35d6:	2f ef       	ldi	r18, 0xFF	; 255
    35d8:	fc 01       	movw	r30, r24
    35da:	eb 55       	subi	r30, 0x5B	; 91
    35dc:	f8 4e       	sbci	r31, 0xE8	; 232
    35de:	20 83       	st	Z, r18
    nrk_sem_list[i].value=-1;
    35e0:	22 83       	std	Z+2, r18	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    35e2:	21 83       	std	Z+1, r18	; 0x01
    35e4:	03 96       	adiw	r24, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    35e6:	88 31       	cpi	r24, 0x18	; 24
    35e8:	91 05       	cpc	r25, r1
    35ea:	b1 f7       	brne	.-20     	; 0x35d8 <nrk_init+0x76>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    35f0:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    35f2:	2f ef       	ldi	r18, 0xFF	; 255
    35f4:	fc 01       	movw	r30, r24
    35f6:	e5 5b       	subi	r30, 0xB5	; 181
    35f8:	f9 4e       	sbci	r31, 0xE9	; 233
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    35fa:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    35fc:	20 87       	std	Z+8, r18	; 0x08
    35fe:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    3600:	88 35       	cpi	r24, 0x58	; 88
    3602:	41 e0       	ldi	r20, 0x01	; 1
    3604:	94 07       	cpc	r25, r20
    3606:	b1 f7       	brne	.-20     	; 0x35f4 <nrk_init+0x92>
    3608:	e1 ed       	ldi	r30, 0xD1	; 209
    360a:	f7 e1       	ldi	r31, 0x17	; 23
    360c:	cf 01       	movw	r24, r30
    360e:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3610:	94 83       	std	Z+4, r25	; 0x04
    3612:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3614:	f7 83       	std	Z+7, r31	; 0x07
    3616:	e6 83       	std	Z+6, r30	; 0x06
    3618:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    361a:	87 e1       	ldi	r24, 0x17	; 23
    361c:	e9 3f       	cpi	r30, 0xF9	; 249
    361e:	f8 07       	cpc	r31, r24
    3620:	a9 f7       	brne	.-22     	; 0x360c <nrk_init+0xaa>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    3622:	10 92 d3 17 	sts	0x17D3, r1
    3626:	10 92 d2 17 	sts	0x17D2, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    362a:	10 92 fd 17 	sts	0x17FD, r1
    362e:	10 92 fc 17 	sts	0x17FC, r1
	_head_node = NULL;
    3632:	10 92 c4 17 	sts	0x17C4, r1
    3636:	10 92 c3 17 	sts	0x17C3, r1
	_free_node = &_nrk_readyQ[0];
    363a:	81 ed       	ldi	r24, 0xD1	; 209
    363c:	97 e1       	ldi	r25, 0x17	; 23
    363e:	90 93 4a 16 	sts	0x164A, r25
    3642:	80 93 49 16 	sts	0x1649, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3646:	62 eb       	ldi	r22, 0xB2	; 178
    3648:	77 e2       	ldi	r23, 0x27	; 39
    364a:	ce 01       	movw	r24, r28
    364c:	01 96       	adiw	r24, 0x01	; 1
    364e:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    3652:	40 e0       	ldi	r20, 0x00	; 0
    3654:	52 e0       	ldi	r21, 0x02	; 2
    3656:	6e ee       	ldi	r22, 0xEE	; 238
    3658:	73 e1       	ldi	r23, 0x13	; 19
    365a:	ce 01       	movw	r24, r28
    365c:	01 96       	adiw	r24, 0x01	; 1
    365e:	0e 94 77 2e 	call	0x5cee	; 0x5cee <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    3662:	85 e5       	ldi	r24, 0x55	; 85
    3664:	80 93 ee 13 	sts	0x13EE, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    3668:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    366a:	1c 86       	std	Y+12, r1	; 0x0c
    366c:	1d 86       	std	Y+13, r1	; 0x0d
    366e:	1e 86       	std	Y+14, r1	; 0x0e
    3670:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    3672:	18 8a       	std	Y+16, r1	; 0x10
    3674:	19 8a       	std	Y+17, r1	; 0x11
    3676:	1a 8a       	std	Y+18, r1	; 0x12
    3678:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    367a:	1c 8a       	std	Y+20, r1	; 0x14
    367c:	1d 8a       	std	Y+21, r1	; 0x15
    367e:	1e 8a       	std	Y+22, r1	; 0x16
    3680:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    3682:	18 8e       	std	Y+24, r1	; 0x18
    3684:	19 8e       	std	Y+25, r1	; 0x19
    3686:	1a 8e       	std	Y+26, r1	; 0x1a
    3688:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    368a:	1c 8e       	std	Y+28, r1	; 0x1c
    368c:	1d 8e       	std	Y+29, r1	; 0x1d
    368e:	1e 8e       	std	Y+30, r1	; 0x1e
    3690:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    3692:	18 a2       	std	Y+32, r1	; 0x20
    3694:	19 a2       	std	Y+33, r1	; 0x21
    3696:	1a a2       	std	Y+34, r1	; 0x22
    3698:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    369e:	92 e0       	ldi	r25, 0x02	; 2
    36a0:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    36a2:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    36a4:	ce 01       	movw	r24, r28
    36a6:	01 96       	adiw	r24, 0x01	; 1
    36a8:	0e 94 e7 22 	call	0x45ce	; 0x45ce <nrk_activate_task>
	
}
    36ac:	a3 96       	adiw	r28, 0x23	; 35
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	df 91       	pop	r29
    36ba:	cf 91       	pop	r28
    36bc:	1f 91       	pop	r17
    36be:	08 95       	ret

000036c0 <nrk_start>:




void nrk_start (void)
{
    36c0:	03 e5       	ldi	r16, 0x53	; 83
    36c2:	16 e1       	ldi	r17, 0x16	; 22
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    36c4:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    36c6:	f8 01       	movw	r30, r16
    36c8:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    36ca:	ff ef       	ldi	r31, 0xFF	; 255
    36cc:	df 12       	cpse	r13, r31
    36ce:	22 c0       	rjmp	.+68     	; 0x3714 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    36d0:	cf 5f       	subi	r28, 0xFF	; 255
    36d2:	05 5d       	subi	r16, 0xD5	; 213
    36d4:	1f 4f       	sbci	r17, 0xFF	; 255
    36d6:	c8 30       	cpi	r28, 0x08	; 8
    36d8:	b1 f7       	brne	.-20     	; 0x36c6 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    36da:	0e 94 d6 21 	call	0x43ac	; 0x43ac <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    36de:	2b e2       	ldi	r18, 0x2B	; 43
    36e0:	82 02       	muls	r24, r18
    36e2:	c0 01       	movw	r24, r0
    36e4:	11 24       	eor	r1, r1
    36e6:	fc 01       	movw	r30, r24
    36e8:	e5 5b       	subi	r30, 0xB5	; 181
    36ea:	f9 4e       	sbci	r31, 0xE9	; 233
    36ec:	82 85       	ldd	r24, Z+10	; 0x0a
    36ee:	80 93 d0 17 	sts	0x17D0, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    36f2:	f0 93 cf 17 	sts	0x17CF, r31
    36f6:	e0 93 ce 17 	sts	0x17CE, r30
    36fa:	f0 93 c0 17 	sts	0x17C0, r31
    36fe:	e0 93 bf 17 	sts	0x17BF, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    3702:	80 93 c1 17 	sts	0x17C1, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3706:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <nrk_target_start>
    nrk_stack_pointer_init(); 
    370a:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    370e:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <nrk_start_high_ready_task>
    3712:	16 c0       	rjmp	.+44     	; 0x3740 <nrk_start+0x80>
    3714:	83 e5       	ldi	r24, 0x53	; 83
    3716:	e8 2e       	mov	r14, r24
    3718:	86 e1       	ldi	r24, 0x16	; 22
    371a:	f8 2e       	mov	r15, r24
    371c:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    371e:	cd 17       	cp	r28, r29
    3720:	41 f0       	breq	.+16     	; 0x3732 <nrk_start+0x72>
    3722:	f7 01       	movw	r30, r14
    3724:	80 81       	ld	r24, Z
    3726:	d8 12       	cpse	r13, r24
    3728:	04 c0       	rjmp	.+8      	; 0x3732 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    372a:	6d 2d       	mov	r22, r13
    372c:	85 e0       	ldi	r24, 0x05	; 5
    372e:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    3732:	df 5f       	subi	r29, 0xFF	; 255
    3734:	fb e2       	ldi	r31, 0x2B	; 43
    3736:	ef 0e       	add	r14, r31
    3738:	f1 1c       	adc	r15, r1
    373a:	d8 30       	cpi	r29, 0x08	; 8
    373c:	81 f7       	brne	.-32     	; 0x371e <nrk_start+0x5e>
    373e:	c8 cf       	rjmp	.-112    	; 0x36d0 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    3740:	ff cf       	rjmp	.-2      	; 0x3740 <nrk_start+0x80>

00003742 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    3742:	cf 92       	push	r12
    3744:	df 92       	push	r13
    3746:	ef 92       	push	r14
    3748:	ff 92       	push	r15
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	ec 01       	movw	r28, r24
    3754:	8b 01       	movw	r16, r22
    3756:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    3758:	89 85       	ldd	r24, Y+9	; 0x09
    375a:	82 30       	cpi	r24, 0x02	; 2
    375c:	21 f0       	breq	.+8      	; 0x3766 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    375e:	80 91 bd 17 	lds	r24, 0x17BD
    3762:	88 83       	st	Y, r24
    3764:	01 c0       	rjmp	.+2      	; 0x3768 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    3766:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    3768:	80 91 bd 17 	lds	r24, 0x17BD
    376c:	88 30       	cpi	r24, 0x08	; 8
    376e:	20 f0       	brcs	.+8      	; 0x3778 <nrk_TCB_init+0x36>
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	87 e0       	ldi	r24, 0x07	; 7
    3774:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    3778:	89 85       	ldd	r24, Y+9	; 0x09
    377a:	82 30       	cpi	r24, 0x02	; 2
    377c:	29 f0       	breq	.+10     	; 0x3788 <nrk_TCB_init+0x46>
    377e:	80 91 bd 17 	lds	r24, 0x17BD
    3782:	8f 5f       	subi	r24, 0xFF	; 255
    3784:	80 93 bd 17 	sts	0x17BD, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    3788:	80 91 bd 17 	lds	r24, 0x17BD
    378c:	81 11       	cpse	r24, r1
    378e:	03 c0       	rjmp	.+6      	; 0x3796 <nrk_TCB_init+0x54>
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	80 93 bd 17 	sts	0x17BD, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    3796:	38 81       	ld	r19, Y
    3798:	2b e2       	ldi	r18, 0x2B	; 43
    379a:	32 03       	mulsu	r19, r18
    379c:	f0 01       	movw	r30, r0
    379e:	11 24       	eor	r1, r1
    37a0:	e5 5b       	subi	r30, 0xB5	; 181
    37a2:	f9 4e       	sbci	r31, 0xE9	; 233
    37a4:	11 83       	std	Z+1, r17	; 0x01
    37a6:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    37a8:	88 85       	ldd	r24, Y+8	; 0x08
    37aa:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    37ac:	38 81       	ld	r19, Y
    37ae:	32 03       	mulsu	r19, r18
    37b0:	f0 01       	movw	r30, r0
    37b2:	11 24       	eor	r1, r1
    37b4:	e5 5b       	subi	r30, 0xB5	; 181
    37b6:	f9 4e       	sbci	r31, 0xE9	; 233
    37b8:	83 e0       	ldi	r24, 0x03	; 3
    37ba:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    37bc:	38 81       	ld	r19, Y
    37be:	32 03       	mulsu	r19, r18
    37c0:	f0 01       	movw	r30, r0
    37c2:	11 24       	eor	r1, r1
    37c4:	e5 5b       	subi	r30, 0xB5	; 181
    37c6:	f9 4e       	sbci	r31, 0xE9	; 233
    37c8:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    37ca:	08 81       	ld	r16, Y
    37cc:	02 03       	mulsu	r16, r18
    37ce:	80 01       	movw	r16, r0
    37d0:	11 24       	eor	r1, r1
    37d2:	05 5b       	subi	r16, 0xB5	; 181
    37d4:	19 4e       	sbci	r17, 0xE9	; 233
    37d6:	f8 01       	movw	r30, r16
    37d8:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    37da:	ce 01       	movw	r24, r28
    37dc:	0b 96       	adiw	r24, 0x0b	; 11
    37de:	0e 94 44 27 	call	0x4e88	; 0x4e88 <_nrk_time_to_ticks_long>
    37e2:	f8 01       	movw	r30, r16
    37e4:	61 a3       	std	Z+33, r22	; 0x21
    37e6:	72 a3       	std	Z+34, r23	; 0x22
    37e8:	83 a3       	std	Z+35, r24	; 0x23
    37ea:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    37ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    37ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    37f0:	ad 85       	ldd	r26, Y+13	; 0x0d
    37f2:	be 85       	ldd	r27, Y+14	; 0x0e
    37f4:	88 33       	cpi	r24, 0x38	; 56
    37f6:	99 48       	sbci	r25, 0x89	; 137
    37f8:	a1 44       	sbci	r26, 0x41	; 65
    37fa:	b1 05       	cpc	r27, r1
    37fc:	20 f0       	brcs	.+8      	; 0x3806 <nrk_TCB_init+0xc4>
    37fe:	68 81       	ld	r22, Y
    3800:	86 e1       	ldi	r24, 0x16	; 22
    3802:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    3806:	c8 80       	ld	r12, Y
    3808:	dd 24       	eor	r13, r13
    380a:	c7 fc       	sbrc	r12, 7
    380c:	d0 94       	com	r13
    380e:	ce 01       	movw	r24, r28
    3810:	4b 96       	adiw	r24, 0x1b	; 27
    3812:	0e 94 44 27 	call	0x4e88	; 0x4e88 <_nrk_time_to_ticks_long>
    3816:	1b e2       	ldi	r17, 0x2B	; 43
    3818:	1c 9d       	mul	r17, r12
    381a:	f0 01       	movw	r30, r0
    381c:	1d 9d       	mul	r17, r13
    381e:	f0 0d       	add	r31, r0
    3820:	11 24       	eor	r1, r1
    3822:	e5 5b       	subi	r30, 0xB5	; 181
    3824:	f9 4e       	sbci	r31, 0xE9	; 233
    3826:	65 8b       	std	Z+21, r22	; 0x15
    3828:	76 8b       	std	Z+22, r23	; 0x16
    382a:	87 8b       	std	Z+23, r24	; 0x17
    382c:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    382e:	28 81       	ld	r18, Y
    3830:	21 03       	mulsu	r18, r17
    3832:	c0 01       	movw	r24, r0
    3834:	11 24       	eor	r1, r1
    3836:	9c 01       	movw	r18, r24
    3838:	25 5b       	subi	r18, 0xB5	; 181
    383a:	39 4e       	sbci	r19, 0xE9	; 233
    383c:	69 01       	movw	r12, r18
    383e:	f9 01       	movw	r30, r18
    3840:	45 89       	ldd	r20, Z+21	; 0x15
    3842:	56 89       	ldd	r21, Z+22	; 0x16
    3844:	67 89       	ldd	r22, Z+23	; 0x17
    3846:	70 8d       	ldd	r23, Z+24	; 0x18
    3848:	81 a1       	ldd	r24, Z+33	; 0x21
    384a:	92 a1       	ldd	r25, Z+34	; 0x22
    384c:	a3 a1       	ldd	r26, Z+35	; 0x23
    384e:	b4 a1       	ldd	r27, Z+36	; 0x24
    3850:	84 0f       	add	r24, r20
    3852:	95 1f       	adc	r25, r21
    3854:	a6 1f       	adc	r26, r22
    3856:	b7 1f       	adc	r27, r23
    3858:	81 8f       	std	Z+25, r24	; 0x19
    385a:	92 8f       	std	Z+26, r25	; 0x1a
    385c:	a3 8f       	std	Z+27, r26	; 0x1b
    385e:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    3860:	ce 01       	movw	r24, r28
    3862:	43 96       	adiw	r24, 0x13	; 19
    3864:	0e 94 44 27 	call	0x4e88	; 0x4e88 <_nrk_time_to_ticks_long>
    3868:	f6 01       	movw	r30, r12
    386a:	65 a3       	std	Z+37, r22	; 0x25
    386c:	76 a3       	std	Z+38, r23	; 0x26
    386e:	87 a3       	std	Z+39, r24	; 0x27
    3870:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    3872:	28 81       	ld	r18, Y
    3874:	21 03       	mulsu	r18, r17
    3876:	f0 01       	movw	r30, r0
    3878:	11 24       	eor	r1, r1
    387a:	e5 5b       	subi	r30, 0xB5	; 181
    387c:	f9 4e       	sbci	r31, 0xE9	; 233
    387e:	85 a1       	ldd	r24, Z+37	; 0x25
    3880:	96 a1       	ldd	r25, Z+38	; 0x26
    3882:	a7 a1       	ldd	r26, Z+39	; 0x27
    3884:	b0 a5       	ldd	r27, Z+40	; 0x28
    3886:	85 8f       	std	Z+29, r24	; 0x1d
    3888:	96 8f       	std	Z+30, r25	; 0x1e
    388a:	a7 8f       	std	Z+31, r26	; 0x1f
    388c:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	92 a7       	std	Z+42, r25	; 0x2a
    3894:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3896:	f3 82       	std	Z+3, r15	; 0x03
    3898:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    389a:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	ef 90       	pop	r14
    38a8:	df 90       	pop	r13
    38aa:	cf 90       	pop	r12
    38ac:	08 95       	ret

000038ae <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    38ae:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <_nrk_scheduler>

000038b2 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    38b2:	85 e6       	ldi	r24, 0x65	; 101
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	08 95       	ret

000038b8 <_nrk_errno_set>:
    38b8:	e0 91 ce 17 	lds	r30, 0x17CE
    38bc:	f0 91 cf 17 	lds	r31, 0x17CF
    38c0:	84 87       	std	Z+12, r24	; 0x0c
    38c2:	08 95       	ret

000038c4 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    38c4:	e0 91 ce 17 	lds	r30, 0x17CE
    38c8:	f0 91 cf 17 	lds	r31, 0x17CF
}
    38cc:	84 85       	ldd	r24, Z+12	; 0x0c
    38ce:	08 95       	ret

000038d0 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    38d0:	fc 01       	movw	r30, r24
    if (error_num == 0)
    38d2:	80 91 ed 13 	lds	r24, 0x13ED
    38d6:	88 23       	and	r24, r24
    38d8:	31 f0       	breq	.+12     	; 0x38e6 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    38da:	db 01       	movw	r26, r22
    38dc:	8c 93       	st	X, r24
    *task_id = error_task;
    38de:	80 91 37 05 	lds	r24, 0x0537
    38e2:	80 83       	st	Z, r24
    return 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
}
    38e6:	08 95       	ret

000038e8 <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    38e8:	80 91 ed 13 	lds	r24, 0x13ED
    38ec:	88 23       	and	r24, r24
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <nrk_error_print+0xa>
    38f0:	84 c0       	rjmp	.+264    	; 0x39fa <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    38f2:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    38f6:	8c e7       	ldi	r24, 0x7C	; 124
    38f8:	95 e0       	ldi	r25, 0x05	; 5
    38fa:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
        printf ("%d", error_task);
    38fe:	80 91 37 05 	lds	r24, 0x0537
    3902:	1f 92       	push	r1
    3904:	8f 93       	push	r24
    3906:	84 e8       	ldi	r24, 0x84	; 132
    3908:	92 e0       	ldi	r25, 0x02	; 2
    390a:	9f 93       	push	r25
    390c:	8f 93       	push	r24
    390e:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
        nrk_kprintf (PSTR ("): "));
    3912:	88 e7       	ldi	r24, 0x78	; 120
    3914:	95 e0       	ldi	r25, 0x05	; 5
    3916:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	0f 90       	pop	r0
    3922:	80 91 ed 13 	lds	r24, 0x13ED
    3926:	88 31       	cpi	r24, 0x18	; 24
    3928:	10 f0       	brcs	.+4      	; 0x392e <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    392a:	10 92 ed 13 	sts	0x13ED, r1
        switch (error_num)
    392e:	e0 91 ed 13 	lds	r30, 0x13ED
    3932:	8e 2f       	mov	r24, r30
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	fc 01       	movw	r30, r24
    3938:	31 97       	sbiw	r30, 0x01	; 1
    393a:	e6 31       	cpi	r30, 0x16	; 22
    393c:	f1 05       	cpc	r31, r1
    393e:	08 f0       	brcs	.+2      	; 0x3942 <nrk_error_print+0x5a>
    3940:	46 c0       	rjmp	.+140    	; 0x39ce <nrk_error_print+0xe6>
    3942:	e6 54       	subi	r30, 0x46	; 70
    3944:	ff 4f       	sbci	r31, 0xFF	; 255
    3946:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    394a:	8c e3       	ldi	r24, 0x3C	; 60
    394c:	95 e0       	ldi	r25, 0x05	; 5
    394e:	41 c0       	rjmp	.+130    	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    3950:	85 e1       	ldi	r24, 0x15	; 21
    3952:	95 e0       	ldi	r25, 0x05	; 5
    3954:	3e c0       	rjmp	.+124    	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    3956:	81 e0       	ldi	r24, 0x01	; 1
    3958:	95 e0       	ldi	r25, 0x05	; 5
    395a:	3b c0       	rjmp	.+118    	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    395c:	8b ee       	ldi	r24, 0xEB	; 235
    395e:	94 e0       	ldi	r25, 0x04	; 4
    3960:	38 c0       	rjmp	.+112    	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    3962:	80 ed       	ldi	r24, 0xD0	; 208
    3964:	94 e0       	ldi	r25, 0x04	; 4
    3966:	35 c0       	rjmp	.+106    	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    3968:	8a eb       	ldi	r24, 0xBA	; 186
    396a:	94 e0       	ldi	r25, 0x04	; 4
    396c:	32 c0       	rjmp	.+100    	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    396e:	82 ea       	ldi	r24, 0xA2	; 162
    3970:	94 e0       	ldi	r25, 0x04	; 4
    3972:	2f c0       	rjmp	.+94     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    3974:	8f e8       	ldi	r24, 0x8F	; 143
    3976:	94 e0       	ldi	r25, 0x04	; 4
    3978:	2c c0       	rjmp	.+88     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    397a:	8c e7       	ldi	r24, 0x7C	; 124
    397c:	94 e0       	ldi	r25, 0x04	; 4
    397e:	29 c0       	rjmp	.+82     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    3980:	8e e5       	ldi	r24, 0x5E	; 94
    3982:	94 e0       	ldi	r25, 0x04	; 4
    3984:	26 c0       	rjmp	.+76     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    3986:	89 e3       	ldi	r24, 0x39	; 57
    3988:	94 e0       	ldi	r25, 0x04	; 4
    398a:	23 c0       	rjmp	.+70     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    398c:	8d e2       	ldi	r24, 0x2D	; 45
    398e:	94 e0       	ldi	r25, 0x04	; 4
    3990:	20 c0       	rjmp	.+64     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    3992:	82 e1       	ldi	r24, 0x12	; 18
    3994:	94 e0       	ldi	r25, 0x04	; 4
    3996:	1d c0       	rjmp	.+58     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    3998:	83 e0       	ldi	r24, 0x03	; 3
    399a:	94 e0       	ldi	r25, 0x04	; 4
    399c:	1a c0       	rjmp	.+52     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    399e:	8f ee       	ldi	r24, 0xEF	; 239
    39a0:	93 e0       	ldi	r25, 0x03	; 3
    39a2:	17 c0       	rjmp	.+46     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    39a4:	8e ed       	ldi	r24, 0xDE	; 222
    39a6:	93 e0       	ldi	r25, 0x03	; 3
    39a8:	14 c0       	rjmp	.+40     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    39aa:	8a ec       	ldi	r24, 0xCA	; 202
    39ac:	93 e0       	ldi	r25, 0x03	; 3
    39ae:	11 c0       	rjmp	.+34     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    39b0:	8a ea       	ldi	r24, 0xAA	; 170
    39b2:	93 e0       	ldi	r25, 0x03	; 3
    39b4:	0e c0       	rjmp	.+28     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    39b6:	82 e9       	ldi	r24, 0x92	; 146
    39b8:	93 e0       	ldi	r25, 0x03	; 3
    39ba:	0b c0       	rjmp	.+22     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    39bc:	87 e7       	ldi	r24, 0x77	; 119
    39be:	93 e0       	ldi	r25, 0x03	; 3
    39c0:	08 c0       	rjmp	.+16     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    39c2:	86 e6       	ldi	r24, 0x66	; 102
    39c4:	93 e0       	ldi	r25, 0x03	; 3
    39c6:	05 c0       	rjmp	.+10     	; 0x39d2 <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    39c8:	87 e5       	ldi	r24, 0x57	; 87
    39ca:	93 e0       	ldi	r25, 0x03	; 3
    39cc:	02 c0       	rjmp	.+4      	; 0x39d2 <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    39ce:	80 e5       	ldi	r24, 0x50	; 80
    39d0:	93 e0       	ldi	r25, 0x03	; 3
    39d2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>
        }
        putchar ('\r');
    39d6:	60 91 09 18 	lds	r22, 0x1809
    39da:	70 91 0a 18 	lds	r23, 0x180A
    39de:	8d e0       	ldi	r24, 0x0D	; 13
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
        putchar ('\n');
    39e6:	60 91 09 18 	lds	r22, 0x1809
    39ea:	70 91 0a 18 	lds	r23, 0x180A
    39ee:	8a e0       	ldi	r24, 0x0A	; 10
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    39f6:	10 92 ed 13 	sts	0x13ED, r1
    return t;
}
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	08 95       	ret

000039fe <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    39fe:	80 93 ed 13 	sts	0x13ED, r24
    error_task = nrk_cur_task_TCB->task_ID;
    3a02:	e0 91 ce 17 	lds	r30, 0x17CE
    3a06:	f0 91 cf 17 	lds	r31, 0x17CF
    3a0a:	80 85       	ldd	r24, Z+8	; 0x08
    3a0c:	80 93 37 05 	sts	0x0537, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3a10:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <nrk_error_print>

00003a14 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    3a14:	80 93 ed 13 	sts	0x13ED, r24
    error_task = task;
    3a18:	60 93 37 05 	sts	0x0537, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    3a1c:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <nrk_error_print>

00003a20 <pause>:
    }

}

void pause()
{
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	1f 92       	push	r1
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3a2a:	19 82       	std	Y+1, r1	; 0x01
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	84 36       	cpi	r24, 0x64	; 100
    3a30:	40 f4       	brcc	.+16     	; 0x3a42 <pause+0x22>
        nrk_spin_wait_us (2000);
    3a32:	80 ed       	ldi	r24, 0xD0	; 208
    3a34:	97 e0       	ldi	r25, 0x07	; 7
    3a36:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	8f 5f       	subi	r24, 0xFF	; 255
    3a3e:	89 83       	std	Y+1, r24	; 0x01
    3a40:	f5 cf       	rjmp	.-22     	; 0x3a2c <pause+0xc>
        nrk_spin_wait_us (2000);
}
    3a42:	0f 90       	pop	r0
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	08 95       	ret

00003a4a <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	0e 94 79 19 	call	0x32f2	; 0x32f2 <nrk_led_set>
    pause();
    3a52:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <pause>
    pause();
    3a56:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <pause>
    pause();
    3a5a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <pause>
    nrk_led_clr(GREEN_LED);
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
    pause();
    3a66:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <pause>

00003a6a <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	0e 94 79 19 	call	0x32f2	; 0x32f2 <nrk_led_set>
    pause();
    3a72:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <pause>
    nrk_led_clr(GREEN_LED);
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
    pause();
    3a7e:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <pause>

00003a82 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    3a82:	ff 92       	push	r15
    3a84:	0f 93       	push	r16
    3a86:	1f 93       	push	r17
    3a88:	cf 93       	push	r28
    3a8a:	df 93       	push	r29
    3a8c:	00 d0       	rcall	.+0      	; 0x3a8e <blink_morse_code_error+0xc>
    3a8e:	1f 92       	push	r1
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    3a94:	1f 92       	push	r1
    3a96:	8f 93       	push	r24
    3a98:	84 e8       	ldi	r24, 0x84	; 132
    3a9a:	92 e0       	ldi	r25, 0x02	; 2
    3a9c:	9f 93       	push	r25
    3a9e:	8f 93       	push	r24
    3aa0:	8e 01       	movw	r16, r28
    3aa2:	0f 5f       	subi	r16, 0xFF	; 255
    3aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa6:	1f 93       	push	r17
    3aa8:	0f 93       	push	r16
    3aaa:	0e 94 3f 33 	call	0x667e	; 0x667e <sprintf>

    for(i=0; i<strlen(str); i++ )
    3aae:	0f 90       	pop	r0
    3ab0:	0f 90       	pop	r0
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	0f 90       	pop	r0
    3aba:	f1 2c       	mov	r15, r1
    3abc:	f8 01       	movw	r30, r16
    3abe:	01 90       	ld	r0, Z+
    3ac0:	00 20       	and	r0, r0
    3ac2:	e9 f7       	brne	.-6      	; 0x3abe <blink_morse_code_error+0x3c>
    3ac4:	31 97       	sbiw	r30, 0x01	; 1
    3ac6:	e0 1b       	sub	r30, r16
    3ac8:	f1 0b       	sbc	r31, r17
    3aca:	8f 2d       	mov	r24, r15
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	8e 17       	cp	r24, r30
    3ad0:	9f 07       	cpc	r25, r31
    3ad2:	08 f0       	brcs	.+2      	; 0x3ad6 <blink_morse_code_error+0x54>
    3ad4:	5d c0       	rjmp	.+186    	; 0x3b90 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    3ad6:	f8 01       	movw	r30, r16
    3ad8:	e8 0f       	add	r30, r24
    3ada:	f9 1f       	adc	r31, r25
    3adc:	e0 81       	ld	r30, Z
    3ade:	8e 2f       	mov	r24, r30
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	f0 97       	sbiw	r30, 0x30	; 48
    3ae6:	ea 30       	cpi	r30, 0x0A	; 10
    3ae8:	f1 05       	cpc	r31, r1
    3aea:	08 f0       	brcs	.+2      	; 0x3aee <blink_morse_code_error+0x6c>
    3aec:	49 c0       	rjmp	.+146    	; 0x3b80 <blink_morse_code_error+0xfe>
    3aee:	e0 53       	subi	r30, 0x30	; 48
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <__tablejump2__>
        {
        case '0':
            blink_dash();
    3af6:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    3afc:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            blink_dash();
    3b00:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b04:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b08:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b0c:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            break;
    3b10:	37 c0       	rjmp	.+110    	; 0x3b80 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    3b12:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            blink_dot();
    3b16:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
    3b1a:	f4 cf       	rjmp	.-24     	; 0x3b04 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    3b1c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            blink_dot();
    3b20:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            blink_dot();
    3b24:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
    3b28:	ef cf       	rjmp	.-34     	; 0x3b08 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    3b2a:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            blink_dot();
    3b2e:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            blink_dot();
    3b32:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            blink_dot();
    3b36:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
    3b3a:	e8 cf       	rjmp	.-48     	; 0x3b0c <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    3b3c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    3b42:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dot();
    3b46:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
    3b4a:	04 c0       	rjmp	.+8      	; 0x3b54 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    3b4c:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b50:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dot();
    3b54:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
    3b58:	06 c0       	rjmp	.+12     	; 0x3b66 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    3b5a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b5e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b62:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dot();
    3b66:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
    3b6a:	08 c0       	rjmp	.+16     	; 0x3b7c <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    3b6c:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b70:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b74:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dash();
    3b78:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <blink_dash>
            blink_dot();
    3b7c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <blink_dot>
            break;
        }
        pause();
    3b80:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <pause>
        pause();
    3b84:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <pause>
        pause();
    3b88:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    3b8c:	f3 94       	inc	r15
    3b8e:	96 cf       	rjmp	.-212    	; 0x3abc <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	df 91       	pop	r29
    3b98:	cf 91       	pop	r28
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	ff 90       	pop	r15
    3ba0:	08 95       	ret

00003ba2 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3ba2:	6f 92       	push	r6
    3ba4:	7f 92       	push	r7
    3ba6:	8f 92       	push	r8
    3ba8:	9f 92       	push	r9
    3baa:	af 92       	push	r10
    3bac:	bf 92       	push	r11
    3bae:	cf 92       	push	r12
    3bb0:	df 92       	push	r13
    3bb2:	ef 92       	push	r14
    3bb4:	ff 92       	push	r15
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    3bbe:	88 e8       	ldi	r24, 0x88	; 136
    3bc0:	95 e0       	ldi	r25, 0x05	; 5
    3bc2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3bc6:	e0 91 ce 17 	lds	r30, 0x17CE
    3bca:	f0 91 cf 17 	lds	r31, 0x17CF
    3bce:	80 85       	ldd	r24, Z+8	; 0x08
    3bd0:	28 2f       	mov	r18, r24
    3bd2:	33 27       	eor	r19, r19
    3bd4:	27 fd       	sbrc	r18, 7
    3bd6:	30 95       	com	r19
    3bd8:	3f 93       	push	r19
    3bda:	8f 93       	push	r24
    3bdc:	83 ef       	ldi	r24, 0xF3	; 243
    3bde:	93 e0       	ldi	r25, 0x03	; 3
    3be0:	9f 93       	push	r25
    3be2:	8f 93       	push	r24
    3be4:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3be8:	e0 91 ce 17 	lds	r30, 0x17CE
    3bec:	f0 91 cf 17 	lds	r31, 0x17CF
    3bf0:	c2 81       	ldd	r28, Z+2	; 0x02
    3bf2:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	87 e2       	ldi	r24, 0x27	; 39
    3bfa:	94 e0       	ldi	r25, 0x04	; 4
    3bfc:	9f 93       	push	r25
    3bfe:	8f 93       	push	r24
    3c00:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    printf( "canary = %x ",*stkc );
    3c04:	88 81       	ld	r24, Y
    3c06:	1f 92       	push	r1
    3c08:	8f 93       	push	r24
    3c0a:	8c ef       	ldi	r24, 0xFC	; 252
    3c0c:	93 e0       	ldi	r25, 0x03	; 3
    3c0e:	9f 93       	push	r25
    3c10:	8f 93       	push	r24
    3c12:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    3c16:	e0 91 ce 17 	lds	r30, 0x17CE
    3c1a:	f0 91 cf 17 	lds	r31, 0x17CF
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3c1e:	81 81       	ldd	r24, Z+1	; 0x01
    3c20:	8f 93       	push	r24
    3c22:	80 81       	ld	r24, Z
    3c24:	8f 93       	push	r24
    3c26:	89 e0       	ldi	r24, 0x09	; 9
    3c28:	94 e0       	ldi	r25, 0x04	; 4
    3c2a:	9f 93       	push	r25
    3c2c:	8f 93       	push	r24
    3c2e:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3c32:	80 91 cf 17 	lds	r24, 0x17CF
    3c36:	8f 93       	push	r24
    3c38:	80 91 ce 17 	lds	r24, 0x17CE
    3c3c:	8f 93       	push	r24
    3c3e:	83 e1       	ldi	r24, 0x13	; 19
    3c40:	94 e0       	ldi	r25, 0x04	; 4
    3c42:	9f 93       	push	r25
    3c44:	8f 93       	push	r24
    3c46:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    3c4a:	cb e4       	ldi	r28, 0x4B	; 75
    3c4c:	d6 e1       	ldi	r29, 0x16	; 22
    3c4e:	ed b7       	in	r30, 0x3d	; 61
    3c50:	fe b7       	in	r31, 0x3e	; 62
    3c52:	74 96       	adiw	r30, 0x14	; 20
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	fe bf       	out	0x3e, r31	; 62
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	ed bf       	out	0x3d, r30	; 61
    3c5e:	00 e0       	ldi	r16, 0x00	; 0
    3c60:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3c62:	83 e2       	ldi	r24, 0x23	; 35
    3c64:	68 2e       	mov	r6, r24
    3c66:	84 e0       	ldi	r24, 0x04	; 4
    3c68:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    3c6a:	9c ef       	ldi	r25, 0xFC	; 252
    3c6c:	89 2e       	mov	r8, r25
    3c6e:	93 e0       	ldi	r25, 0x03	; 3
    3c70:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3c72:	29 e0       	ldi	r18, 0x09	; 9
    3c74:	a2 2e       	mov	r10, r18
    3c76:	24 e0       	ldi	r18, 0x04	; 4
    3c78:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3c7a:	33 e1       	ldi	r19, 0x13	; 19
    3c7c:	c3 2e       	mov	r12, r19
    3c7e:	34 e0       	ldi	r19, 0x04	; 4
    3c80:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3c82:	ea 80       	ldd	r14, Y+2	; 0x02
    3c84:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3c86:	ff 92       	push	r15
    3c88:	ef 92       	push	r14
    3c8a:	1f 93       	push	r17
    3c8c:	0f 93       	push	r16
    3c8e:	7f 92       	push	r7
    3c90:	6f 92       	push	r6
    3c92:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
        printf( "canary = %x ",*stkc );
    3c96:	f7 01       	movw	r30, r14
    3c98:	80 81       	ld	r24, Z
    3c9a:	1f 92       	push	r1
    3c9c:	8f 93       	push	r24
    3c9e:	9f 92       	push	r9
    3ca0:	8f 92       	push	r8
    3ca2:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	8f 93       	push	r24
    3caa:	88 81       	ld	r24, Y
    3cac:	8f 93       	push	r24
    3cae:	bf 92       	push	r11
    3cb0:	af 92       	push	r10
    3cb2:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	df 92       	push	r13
    3cbc:	cf 92       	push	r12
    3cbe:	0e 94 f5 32 	call	0x65ea	; 0x65ea <printf>
    3cc2:	0f 5f       	subi	r16, 0xFF	; 255
    3cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc6:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3cc8:	ed b7       	in	r30, 0x3d	; 61
    3cca:	fe b7       	in	r31, 0x3e	; 62
    3ccc:	72 96       	adiw	r30, 0x12	; 18
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	fe bf       	out	0x3e, r31	; 62
    3cd4:	0f be       	out	0x3f, r0	; 63
    3cd6:	ed bf       	out	0x3d, r30	; 61
    3cd8:	08 30       	cpi	r16, 0x08	; 8
    3cda:	11 05       	cpc	r17, r1
    3cdc:	91 f6       	brne	.-92     	; 0x3c82 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    3cde:	df 91       	pop	r29
    3ce0:	cf 91       	pop	r28
    3ce2:	1f 91       	pop	r17
    3ce4:	0f 91       	pop	r16
    3ce6:	ff 90       	pop	r15
    3ce8:	ef 90       	pop	r14
    3cea:	df 90       	pop	r13
    3cec:	cf 90       	pop	r12
    3cee:	bf 90       	pop	r11
    3cf0:	af 90       	pop	r10
    3cf2:	9f 90       	pop	r9
    3cf4:	8f 90       	pop	r8
    3cf6:	7f 90       	pop	r7
    3cf8:	6f 90       	pop	r6
    3cfa:	08 95       	ret

00003cfc <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    3d00:	e0 91 ce 17 	lds	r30, 0x17CE
    3d04:	f0 91 cf 17 	lds	r31, 0x17CF
    3d08:	c2 81       	ldd	r28, Z+2	; 0x02
    3d0a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3d0c:	88 81       	ld	r24, Y
    3d0e:	85 35       	cpi	r24, 0x55	; 85
    3d10:	39 f0       	breq	.+14     	; 0x3d20 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3d12:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3d1c:	85 e5       	ldi	r24, 0x55	; 85
    3d1e:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3d20:	e0 91 ce 17 	lds	r30, 0x17CE
    3d24:	f0 91 cf 17 	lds	r31, 0x17CF
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3d28:	80 81       	ld	r24, Z
    3d2a:	91 81       	ldd	r25, Z+1	; 0x01
    3d2c:	81 15       	cp	r24, r1
    3d2e:	92 44       	sbci	r25, 0x42	; 66
    3d30:	38 f0       	brcs	.+14     	; 0x3d40 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3d32:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3d36:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3d3c:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <nrk_error_add>




#endif
}
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	08 95       	ret

00003d46 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    3d46:	2b e2       	ldi	r18, 0x2B	; 43
    3d48:	82 02       	muls	r24, r18
    3d4a:	c0 01       	movw	r24, r0
    3d4c:	11 24       	eor	r1, r1
    3d4e:	fc 01       	movw	r30, r24
    3d50:	e5 5b       	subi	r30, 0xB5	; 181
    3d52:	f9 4e       	sbci	r31, 0xE9	; 233
    3d54:	a2 81       	ldd	r26, Z+2	; 0x02
    3d56:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3d58:	8c 91       	ld	r24, X
    3d5a:	85 35       	cpi	r24, 0x55	; 85
    3d5c:	19 f0       	breq	.+6      	; 0x3d64 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3d5e:	85 e5       	ldi	r24, 0x55	; 85
    3d60:	8c 93       	st	X, r24
    3d62:	08 c0       	rjmp	.+16     	; 0x3d74 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3d64:	80 81       	ld	r24, Z
    3d66:	91 81       	ldd	r25, Z+1	; 0x01
    3d68:	81 15       	cp	r24, r1
    3d6a:	92 44       	sbci	r25, 0x42	; 66
    3d6c:	28 f0       	brcs	.+10     	; 0x3d78 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3d6e:	82 e1       	ldi	r24, 0x12	; 18
    3d70:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_error_add>
        return NRK_ERROR;
    3d74:	8f ef       	ldi	r24, 0xFF	; 255
    3d76:	08 95       	ret
    }
#endif
    return NRK_OK;
    3d78:	81 e0       	ldi	r24, 0x01	; 1
}
    3d7a:	08 95       	ret

00003d7c <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3d7c:	0f 93       	push	r16
    3d7e:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3d80:	40 91 65 0e 	lds	r20, 0x0E65
    3d84:	50 91 66 0e 	lds	r21, 0x0E66
    3d88:	60 91 67 0e 	lds	r22, 0x0E67
    3d8c:	70 91 68 0e 	lds	r23, 0x0E68
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	8a 01       	movw	r16, r20
    3d96:	9b 01       	movw	r18, r22
    3d98:	08 2e       	mov	r0, r24
    3d9a:	04 c0       	rjmp	.+8      	; 0x3da4 <nrk_signal_create+0x28>
    3d9c:	36 95       	lsr	r19
    3d9e:	27 95       	ror	r18
    3da0:	17 95       	ror	r17
    3da2:	07 95       	ror	r16
    3da4:	0a 94       	dec	r0
    3da6:	d2 f7       	brpl	.-12     	; 0x3d9c <nrk_signal_create+0x20>
    3da8:	00 fd       	sbrc	r16, 0
    3daa:	19 c0       	rjmp	.+50     	; 0x3dde <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3dac:	01 e0       	ldi	r16, 0x01	; 1
    3dae:	10 e0       	ldi	r17, 0x00	; 0
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	08 2e       	mov	r0, r24
    3db6:	04 c0       	rjmp	.+8      	; 0x3dc0 <nrk_signal_create+0x44>
    3db8:	00 0f       	add	r16, r16
    3dba:	11 1f       	adc	r17, r17
    3dbc:	22 1f       	adc	r18, r18
    3dbe:	33 1f       	adc	r19, r19
    3dc0:	0a 94       	dec	r0
    3dc2:	d2 f7       	brpl	.-12     	; 0x3db8 <nrk_signal_create+0x3c>
    3dc4:	40 2b       	or	r20, r16
    3dc6:	51 2b       	or	r21, r17
    3dc8:	62 2b       	or	r22, r18
    3dca:	73 2b       	or	r23, r19
    3dcc:	40 93 65 0e 	sts	0x0E65, r20
    3dd0:	50 93 66 0e 	sts	0x0E66, r21
    3dd4:	60 93 67 0e 	sts	0x0E67, r22
    3dd8:	70 93 68 0e 	sts	0x0E68, r23
			return i;
    3ddc:	05 c0       	rjmp	.+10     	; 0x3de8 <nrk_signal_create+0x6c>
    3dde:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    3de0:	80 32       	cpi	r24, 0x20	; 32
    3de2:	91 05       	cpc	r25, r1
    3de4:	b9 f6       	brne	.-82     	; 0x3d94 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    3de6:	8f ef       	ldi	r24, 0xFF	; 255


}
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	08 95       	ret

00003dee <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3dee:	e0 91 ce 17 	lds	r30, 0x17CE
    3df2:	f0 91 cf 17 	lds	r31, 0x17CF
    3df6:	65 85       	ldd	r22, Z+13	; 0x0d
    3df8:	76 85       	ldd	r23, Z+14	; 0x0e
    3dfa:	87 85       	ldd	r24, Z+15	; 0x0f
    3dfc:	90 89       	ldd	r25, Z+16	; 0x10
}
    3dfe:	08 95       	ret

00003e00 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3e00:	cf 92       	push	r12
    3e02:	df 92       	push	r13
    3e04:	ef 92       	push	r14
    3e06:	ff 92       	push	r15
    3e08:	0f 93       	push	r16
    3e0a:	1f 93       	push	r17
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3e10:	c1 2c       	mov	r12, r1
    3e12:	d1 2c       	mov	r13, r1
    3e14:	76 01       	movw	r14, r12
    3e16:	c3 94       	inc	r12
    3e18:	08 2e       	mov	r0, r24
    3e1a:	04 c0       	rjmp	.+8      	; 0x3e24 <nrk_signal_delete+0x24>
    3e1c:	cc 0c       	add	r12, r12
    3e1e:	dd 1c       	adc	r13, r13
    3e20:	ee 1c       	adc	r14, r14
    3e22:	ff 1c       	adc	r15, r15
    3e24:	0a 94       	dec	r0
    3e26:	d2 f7       	brpl	.-12     	; 0x3e1c <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3e28:	40 91 65 0e 	lds	r20, 0x0E65
    3e2c:	50 91 66 0e 	lds	r21, 0x0E66
    3e30:	60 91 67 0e 	lds	r22, 0x0E67
    3e34:	70 91 68 0e 	lds	r23, 0x0E68
    3e38:	4c 21       	and	r20, r12
    3e3a:	5d 21       	and	r21, r13
    3e3c:	6e 21       	and	r22, r14
    3e3e:	7f 21       	and	r23, r15
    3e40:	45 2b       	or	r20, r21
    3e42:	46 2b       	or	r20, r22
    3e44:	47 2b       	or	r20, r23
    3e46:	09 f4       	brne	.+2      	; 0x3e4a <nrk_signal_delete+0x4a>
    3e48:	60 c0       	rjmp	.+192    	; 0x3f0a <nrk_signal_delete+0x10a>
    3e4a:	08 2f       	mov	r16, r24

	nrk_int_disable();
    3e4c:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    3e50:	e4 e5       	ldi	r30, 0x54	; 84
    3e52:	f6 e1       	ldi	r31, 0x16	; 22
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3e54:	b7 01       	movw	r22, r14
    3e56:	a6 01       	movw	r20, r12
    3e58:	40 95       	com	r20
    3e5a:	50 95       	com	r21
    3e5c:	60 95       	com	r22
    3e5e:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3e60:	13 e0       	ldi	r17, 0x03	; 3
    3e62:	df 01       	movw	r26, r30
    3e64:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3e66:	8c 91       	ld	r24, X
    3e68:	8f 3f       	cpi	r24, 0xFF	; 255
    3e6a:	39 f1       	breq	.+78     	; 0x3eba <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3e6c:	84 81       	ldd	r24, Z+4	; 0x04
    3e6e:	95 81       	ldd	r25, Z+5	; 0x05
    3e70:	a6 81       	ldd	r26, Z+6	; 0x06
    3e72:	b7 81       	ldd	r27, Z+7	; 0x07
    3e74:	8c 15       	cp	r24, r12
    3e76:	9d 05       	cpc	r25, r13
    3e78:	ae 05       	cpc	r26, r14
    3e7a:	bf 05       	cpc	r27, r15
    3e7c:	51 f4       	brne	.+20     	; 0x3e92 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3e7e:	10 86       	std	Z+8, r1	; 0x08
    3e80:	11 86       	std	Z+9, r1	; 0x09
    3e82:	12 86       	std	Z+10, r1	; 0x0a
    3e84:	13 86       	std	Z+11, r1	; 0x0b
    3e86:	9f 01       	movw	r18, r30
    3e88:	22 50       	subi	r18, 0x02	; 2
    3e8a:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3e8c:	e9 01       	movw	r28, r18
    3e8e:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3e90:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3e92:	84 23       	and	r24, r20
    3e94:	95 23       	and	r25, r21
    3e96:	a6 23       	and	r26, r22
    3e98:	b7 23       	and	r27, r23
    3e9a:	84 83       	std	Z+4, r24	; 0x04
    3e9c:	95 83       	std	Z+5, r25	; 0x05
    3e9e:	a6 83       	std	Z+6, r26	; 0x06
    3ea0:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3ea2:	80 85       	ldd	r24, Z+8	; 0x08
    3ea4:	91 85       	ldd	r25, Z+9	; 0x09
    3ea6:	a2 85       	ldd	r26, Z+10	; 0x0a
    3ea8:	b3 85       	ldd	r27, Z+11	; 0x0b
    3eaa:	84 23       	and	r24, r20
    3eac:	95 23       	and	r25, r21
    3eae:	a6 23       	and	r26, r22
    3eb0:	b7 23       	and	r27, r23
    3eb2:	80 87       	std	Z+8, r24	; 0x08
    3eb4:	91 87       	std	Z+9, r25	; 0x09
    3eb6:	a2 87       	std	Z+10, r26	; 0x0a
    3eb8:	b3 87       	std	Z+11, r27	; 0x0b
    3eba:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3ebc:	d7 e1       	ldi	r29, 0x17	; 23
    3ebe:	ec 3a       	cpi	r30, 0xAC	; 172
    3ec0:	fd 07       	cpc	r31, r29
    3ec2:	79 f6       	brne	.-98     	; 0x3e62 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    3ec4:	8e ef       	ldi	r24, 0xFE	; 254
    3ec6:	9f ef       	ldi	r25, 0xFF	; 255
    3ec8:	af ef       	ldi	r26, 0xFF	; 255
    3eca:	bf ef       	ldi	r27, 0xFF	; 255
    3ecc:	04 c0       	rjmp	.+8      	; 0x3ed6 <nrk_signal_delete+0xd6>
    3ece:	88 0f       	add	r24, r24
    3ed0:	99 1f       	adc	r25, r25
    3ed2:	aa 1f       	adc	r26, r26
    3ed4:	bb 1f       	adc	r27, r27
    3ed6:	0a 95       	dec	r16
    3ed8:	d2 f7       	brpl	.-12     	; 0x3ece <nrk_signal_delete+0xce>
    3eda:	40 91 65 0e 	lds	r20, 0x0E65
    3ede:	50 91 66 0e 	lds	r21, 0x0E66
    3ee2:	60 91 67 0e 	lds	r22, 0x0E67
    3ee6:	70 91 68 0e 	lds	r23, 0x0E68
    3eea:	84 23       	and	r24, r20
    3eec:	95 23       	and	r25, r21
    3eee:	a6 23       	and	r26, r22
    3ef0:	b7 23       	and	r27, r23
    3ef2:	80 93 65 0e 	sts	0x0E65, r24
    3ef6:	90 93 66 0e 	sts	0x0E66, r25
    3efa:	a0 93 67 0e 	sts	0x0E67, r26
    3efe:	b0 93 68 0e 	sts	0x0E68, r27
	nrk_int_enable();
    3f02:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>

	return NRK_OK;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	01 c0       	rjmp	.+2      	; 0x3f0c <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3f0a:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3f0c:	df 91       	pop	r29
    3f0e:	cf 91       	pop	r28
    3f10:	1f 91       	pop	r17
    3f12:	0f 91       	pop	r16
    3f14:	ff 90       	pop	r15
    3f16:	ef 90       	pop	r14
    3f18:	df 90       	pop	r13
    3f1a:	cf 90       	pop	r12
    3f1c:	08 95       	ret

00003f1e <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3f22:	41 e0       	ldi	r20, 0x01	; 1
    3f24:	50 e0       	ldi	r21, 0x00	; 0
    3f26:	60 e0       	ldi	r22, 0x00	; 0
    3f28:	70 e0       	ldi	r23, 0x00	; 0
    3f2a:	8a 01       	movw	r16, r20
    3f2c:	9b 01       	movw	r18, r22
    3f2e:	04 c0       	rjmp	.+8      	; 0x3f38 <nrk_signal_unregister+0x1a>
    3f30:	00 0f       	add	r16, r16
    3f32:	11 1f       	adc	r17, r17
    3f34:	22 1f       	adc	r18, r18
    3f36:	33 1f       	adc	r19, r19
    3f38:	8a 95       	dec	r24
    3f3a:	d2 f7       	brpl	.-12     	; 0x3f30 <nrk_signal_unregister+0x12>
    3f3c:	d9 01       	movw	r26, r18
    3f3e:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3f40:	e0 91 ce 17 	lds	r30, 0x17CE
    3f44:	f0 91 cf 17 	lds	r31, 0x17CF
    3f48:	45 85       	ldd	r20, Z+13	; 0x0d
    3f4a:	56 85       	ldd	r21, Z+14	; 0x0e
    3f4c:	67 85       	ldd	r22, Z+15	; 0x0f
    3f4e:	70 89       	ldd	r23, Z+16	; 0x10
    3f50:	04 23       	and	r16, r20
    3f52:	15 23       	and	r17, r21
    3f54:	26 23       	and	r18, r22
    3f56:	37 23       	and	r19, r23
    3f58:	01 2b       	or	r16, r17
    3f5a:	02 2b       	or	r16, r18
    3f5c:	03 2b       	or	r16, r19
    3f5e:	d1 f0       	breq	.+52     	; 0x3f94 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3f60:	80 95       	com	r24
    3f62:	90 95       	com	r25
    3f64:	a0 95       	com	r26
    3f66:	b0 95       	com	r27
    3f68:	48 23       	and	r20, r24
    3f6a:	59 23       	and	r21, r25
    3f6c:	6a 23       	and	r22, r26
    3f6e:	7b 23       	and	r23, r27
    3f70:	45 87       	std	Z+13, r20	; 0x0d
    3f72:	56 87       	std	Z+14, r21	; 0x0e
    3f74:	67 87       	std	Z+15, r22	; 0x0f
    3f76:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3f78:	41 89       	ldd	r20, Z+17	; 0x11
    3f7a:	52 89       	ldd	r21, Z+18	; 0x12
    3f7c:	63 89       	ldd	r22, Z+19	; 0x13
    3f7e:	74 89       	ldd	r23, Z+20	; 0x14
    3f80:	84 23       	and	r24, r20
    3f82:	95 23       	and	r25, r21
    3f84:	a6 23       	and	r26, r22
    3f86:	b7 23       	and	r27, r23
    3f88:	81 8b       	std	Z+17, r24	; 0x11
    3f8a:	92 8b       	std	Z+18, r25	; 0x12
    3f8c:	a3 8b       	std	Z+19, r26	; 0x13
    3f8e:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3f90:	81 e0       	ldi	r24, 0x01	; 1
    3f92:	01 c0       	rjmp	.+2      	; 0x3f96 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3f94:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3f96:	1f 91       	pop	r17
    3f98:	0f 91       	pop	r16
    3f9a:	08 95       	ret

00003f9c <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3f9c:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3f9e:	40 91 65 0e 	lds	r20, 0x0E65
    3fa2:	50 91 66 0e 	lds	r21, 0x0E66
    3fa6:	60 91 67 0e 	lds	r22, 0x0E67
    3faa:	70 91 68 0e 	lds	r23, 0x0E68
    3fae:	08 2e       	mov	r0, r24
    3fb0:	04 c0       	rjmp	.+8      	; 0x3fba <nrk_signal_register+0x1e>
    3fb2:	76 95       	lsr	r23
    3fb4:	67 95       	ror	r22
    3fb6:	57 95       	ror	r21
    3fb8:	47 95       	ror	r20
    3fba:	0a 94       	dec	r0
    3fbc:	d2 f7       	brpl	.-12     	; 0x3fb2 <nrk_signal_register+0x16>
    3fbe:	40 ff       	sbrs	r20, 0
    3fc0:	1d c0       	rjmp	.+58     	; 0x3ffc <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3fc2:	e0 91 ce 17 	lds	r30, 0x17CE
    3fc6:	f0 91 cf 17 	lds	r31, 0x17CF
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	a0 e0       	ldi	r26, 0x00	; 0
    3fd0:	b0 e0       	ldi	r27, 0x00	; 0
    3fd2:	04 c0       	rjmp	.+8      	; 0x3fdc <nrk_signal_register+0x40>
    3fd4:	88 0f       	add	r24, r24
    3fd6:	99 1f       	adc	r25, r25
    3fd8:	aa 1f       	adc	r26, r26
    3fda:	bb 1f       	adc	r27, r27
    3fdc:	2a 95       	dec	r18
    3fde:	d2 f7       	brpl	.-12     	; 0x3fd4 <nrk_signal_register+0x38>
    3fe0:	45 85       	ldd	r20, Z+13	; 0x0d
    3fe2:	56 85       	ldd	r21, Z+14	; 0x0e
    3fe4:	67 85       	ldd	r22, Z+15	; 0x0f
    3fe6:	70 89       	ldd	r23, Z+16	; 0x10
    3fe8:	84 2b       	or	r24, r20
    3fea:	95 2b       	or	r25, r21
    3fec:	a6 2b       	or	r26, r22
    3fee:	b7 2b       	or	r27, r23
    3ff0:	85 87       	std	Z+13, r24	; 0x0d
    3ff2:	96 87       	std	Z+14, r25	; 0x0e
    3ff4:	a7 87       	std	Z+15, r26	; 0x0f
    3ff6:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	08 95       	ret
	}
            
	return NRK_ERROR;
    3ffc:	8f ef       	ldi	r24, 0xFF	; 255
}
    3ffe:	08 95       	ret

00004000 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    4000:	cf 92       	push	r12
    4002:	df 92       	push	r13
    4004:	ef 92       	push	r14
    4006:	ff 92       	push	r15
    4008:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    400a:	c1 2c       	mov	r12, r1
    400c:	d1 2c       	mov	r13, r1
    400e:	76 01       	movw	r14, r12
    4010:	c3 94       	inc	r12
    4012:	04 c0       	rjmp	.+8      	; 0x401c <nrk_event_signal+0x1c>
    4014:	cc 0c       	add	r12, r12
    4016:	dd 1c       	adc	r13, r13
    4018:	ee 1c       	adc	r14, r14
    401a:	ff 1c       	adc	r15, r15
    401c:	8a 95       	dec	r24
    401e:	d2 f7       	brpl	.-12     	; 0x4014 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    4020:	80 91 65 0e 	lds	r24, 0x0E65
    4024:	90 91 66 0e 	lds	r25, 0x0E66
    4028:	a0 91 67 0e 	lds	r26, 0x0E67
    402c:	b0 91 68 0e 	lds	r27, 0x0E68
    4030:	8c 21       	and	r24, r12
    4032:	9d 21       	and	r25, r13
    4034:	ae 21       	and	r26, r14
    4036:	bf 21       	and	r27, r15
    4038:	89 2b       	or	r24, r25
    403a:	8a 2b       	or	r24, r26
    403c:	8b 2b       	or	r24, r27
    403e:	11 f4       	brne	.+4      	; 0x4044 <nrk_event_signal+0x44>
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	44 c0       	rjmp	.+136    	; 0x40cc <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    4044:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    4048:	e2 e5       	ldi	r30, 0x52	; 82
    404a:	f6 e1       	ldi	r31, 0x16	; 22
    404c:	a4 e5       	ldi	r26, 0x54	; 84
    404e:	b6 e1       	ldi	r27, 0x16	; 22

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    4050:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4052:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    4054:	90 81       	ld	r25, Z
    4056:	91 30       	cpi	r25, 0x01	; 1
    4058:	b9 f4       	brne	.+46     	; 0x4088 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    405a:	42 85       	ldd	r20, Z+10	; 0x0a
    405c:	53 85       	ldd	r21, Z+11	; 0x0b
    405e:	64 85       	ldd	r22, Z+12	; 0x0c
    4060:	75 85       	ldd	r23, Z+13	; 0x0d
    4062:	4c 21       	and	r20, r12
    4064:	5d 21       	and	r21, r13
    4066:	6e 21       	and	r22, r14
    4068:	7f 21       	and	r23, r15
    406a:	45 2b       	or	r20, r21
    406c:	46 2b       	or	r20, r22
    406e:	47 2b       	or	r20, r23
    4070:	59 f0       	breq	.+22     	; 0x4088 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4072:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    4074:	16 86       	std	Z+14, r1	; 0x0e
    4076:	17 86       	std	Z+15, r1	; 0x0f
    4078:	10 8a       	std	Z+16, r1	; 0x10
    407a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    407c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    407e:	c2 86       	std	Z+10, r12	; 0x0a
    4080:	d3 86       	std	Z+11, r13	; 0x0b
    4082:	e4 86       	std	Z+12, r14	; 0x0c
    4084:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    4086:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    4088:	90 81       	ld	r25, Z
    408a:	92 30       	cpi	r25, 0x02	; 2
    408c:	a1 f4       	brne	.+40     	; 0x40b6 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    408e:	42 85       	ldd	r20, Z+10	; 0x0a
    4090:	53 85       	ldd	r21, Z+11	; 0x0b
    4092:	64 85       	ldd	r22, Z+12	; 0x0c
    4094:	75 85       	ldd	r23, Z+13	; 0x0d
    4096:	4c 15       	cp	r20, r12
    4098:	5d 05       	cpc	r21, r13
    409a:	6e 05       	cpc	r22, r14
    409c:	7f 05       	cpc	r23, r15
    409e:	59 f4       	brne	.+22     	; 0x40b6 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    40a0:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    40a2:	16 86       	std	Z+14, r1	; 0x0e
    40a4:	17 86       	std	Z+15, r1	; 0x0f
    40a6:	10 8a       	std	Z+16, r1	; 0x10
    40a8:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    40aa:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    40ac:	12 86       	std	Z+10, r1	; 0x0a
    40ae:	13 86       	std	Z+11, r1	; 0x0b
    40b0:	14 86       	std	Z+12, r1	; 0x0c
    40b2:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    40b4:	c1 e0       	ldi	r28, 0x01	; 1
    40b6:	bb 96       	adiw	r30, 0x2b	; 43
    40b8:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    40ba:	97 e1       	ldi	r25, 0x17	; 23
    40bc:	ea 3a       	cpi	r30, 0xAA	; 170
    40be:	f9 07       	cpc	r31, r25
    40c0:	49 f6       	brne	.-110    	; 0x4054 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    40c2:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
	if(event_occured)
    40c6:	c1 11       	cpse	r28, r1
    40c8:	05 c0       	rjmp	.+10     	; 0x40d4 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    40ca:	82 e0       	ldi	r24, 0x02	; 2
    40cc:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_nrk_errno_set>
	return NRK_ERROR;
    40d0:	8f ef       	ldi	r24, 0xFF	; 255
    40d2:	01 c0       	rjmp	.+2      	; 0x40d6 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    40d4:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    40d6:	cf 91       	pop	r28
    40d8:	ff 90       	pop	r15
    40da:	ef 90       	pop	r14
    40dc:	df 90       	pop	r13
    40de:	cf 90       	pop	r12
    40e0:	08 95       	ret

000040e2 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    40e2:	0f 93       	push	r16
    40e4:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    40e6:	e0 91 ce 17 	lds	r30, 0x17CE
    40ea:	f0 91 cf 17 	lds	r31, 0x17CF
    40ee:	05 85       	ldd	r16, Z+13	; 0x0d
    40f0:	16 85       	ldd	r17, Z+14	; 0x0e
    40f2:	27 85       	ldd	r18, Z+15	; 0x0f
    40f4:	30 89       	ldd	r19, Z+16	; 0x10
    40f6:	06 23       	and	r16, r22
    40f8:	17 23       	and	r17, r23
    40fa:	28 23       	and	r18, r24
    40fc:	39 23       	and	r19, r25
    40fe:	01 15       	cp	r16, r1
    4100:	11 05       	cpc	r17, r1
    4102:	21 05       	cpc	r18, r1
    4104:	31 05       	cpc	r19, r1
    4106:	11 f1       	breq	.+68     	; 0x414c <nrk_event_wait+0x6a>
    4108:	dc 01       	movw	r26, r24
    410a:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    410c:	81 8b       	std	Z+17, r24	; 0x11
    410e:	92 8b       	std	Z+18, r25	; 0x12
    4110:	a3 8b       	std	Z+19, r26	; 0x13
    4112:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    4114:	21 e0       	ldi	r18, 0x01	; 1
    4116:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    4118:	00 90 be 17 	lds	r0, 0x17BE
    411c:	04 c0       	rjmp	.+8      	; 0x4126 <nrk_event_wait+0x44>
    411e:	b6 95       	lsr	r27
    4120:	a7 95       	ror	r26
    4122:	97 95       	ror	r25
    4124:	87 95       	ror	r24
    4126:	0a 94       	dec	r0
    4128:	d2 f7       	brpl	.-12     	; 0x411e <nrk_event_wait+0x3c>
    412a:	80 ff       	sbrs	r24, 0
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    412e:	0e 94 4f 24 	call	0x489e	; 0x489e <nrk_wait_until_nw>
    4132:	04 c0       	rjmp	.+8      	; 0x413c <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	0e 94 20 24 	call	0x4840	; 0x4840 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    413c:	e0 91 ce 17 	lds	r30, 0x17CE
    4140:	f0 91 cf 17 	lds	r31, 0x17CF
    4144:	01 89       	ldd	r16, Z+17	; 0x11
    4146:	12 89       	ldd	r17, Z+18	; 0x12
    4148:	23 89       	ldd	r18, Z+19	; 0x13
    414a:	34 89       	ldd	r19, Z+20	; 0x14
}
    414c:	c9 01       	movw	r24, r18
    414e:	b8 01       	movw	r22, r16
    4150:	1f 91       	pop	r17
    4152:	0f 91       	pop	r16
    4154:	08 95       	ret

00004156 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    4156:	90 91 cd 17 	lds	r25, 0x17CD
    415a:	97 30       	cpi	r25, 0x07	; 7
    415c:	d0 f4       	brcc	.+52     	; 0x4192 <nrk_sem_create+0x3c>
    415e:	a5 ea       	ldi	r26, 0xA5	; 165
    4160:	b7 e1       	ldi	r27, 0x17	; 23
    4162:	e0 e0       	ldi	r30, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    4164:	2c 91       	ld	r18, X
    4166:	2f 3f       	cpi	r18, 0xFF	; 255
    4168:	21 f0       	breq	.+8      	; 0x4172 <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    416a:	ef 5f       	subi	r30, 0xFF	; 255
    416c:	13 96       	adiw	r26, 0x03	; 3
    416e:	e8 30       	cpi	r30, 0x08	; 8
    4170:	c9 f7       	brne	.-14     	; 0x4164 <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	9f 01       	movw	r18, r30
    4176:	22 0f       	add	r18, r18
    4178:	33 1f       	adc	r19, r19
    417a:	e2 0f       	add	r30, r18
    417c:	f3 1f       	adc	r31, r19
    417e:	eb 55       	subi	r30, 0x5B	; 91
    4180:	f8 4e       	sbci	r31, 0xE8	; 232
    4182:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    4184:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    4186:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    4188:	9f 5f       	subi	r25, 0xFF	; 255
    418a:	90 93 cd 17 	sts	0x17CD, r25
	return	&nrk_sem_list[i];
    418e:	cf 01       	movw	r24, r30
    4190:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    4196:	08 95       	ret

00004198 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
    4198:	ac 01       	movw	r20, r24
    419a:	25 ea       	ldi	r18, 0xA5	; 165
    419c:	37 e1       	ldi	r19, 0x17	; 23
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    419e:	90 e0       	ldi	r25, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    41a0:	24 17       	cp	r18, r20
    41a2:	35 07       	cpc	r19, r21
    41a4:	39 f0       	breq	.+14     	; 0x41b4 <nrk_get_resource_index+0x1c>
    41a6:	9f 5f       	subi	r25, 0xFF	; 255
    41a8:	2d 5f       	subi	r18, 0xFD	; 253
    41aa:	3f 4f       	sbci	r19, 0xFF	; 255
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    41ac:	98 30       	cpi	r25, 0x08	; 8
    41ae:	c1 f7       	brne	.-16     	; 0x41a0 <nrk_get_resource_index+0x8>
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    41b0:	8f ef       	ldi	r24, 0xFF	; 255
    41b2:	08 95       	ret
int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    41b4:	89 2f       	mov	r24, r25
	return NRK_ERROR;
}
    41b6:	08 95       	ret

000041b8 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    41b8:	0e 94 cc 20 	call	0x4198	; 0x4198 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    41bc:	8f 3f       	cpi	r24, 0xFF	; 255
    41be:	11 f4       	brne	.+4      	; 0x41c4 <nrk_sem_query+0xc>
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	03 c0       	rjmp	.+6      	; 0x41ca <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    41c4:	88 30       	cpi	r24, 0x08	; 8
    41c6:	29 f4       	brne	.+10     	; 0x41d2 <nrk_sem_query+0x1a>
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_nrk_errno_set>
    41ce:	8f ef       	ldi	r24, 0xFF	; 255
    41d0:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    41d2:	99 27       	eor	r25, r25
    41d4:	87 fd       	sbrc	r24, 7
    41d6:	90 95       	com	r25
    41d8:	fc 01       	movw	r30, r24
    41da:	ee 0f       	add	r30, r30
    41dc:	ff 1f       	adc	r31, r31
    41de:	8e 0f       	add	r24, r30
    41e0:	9f 1f       	adc	r25, r31
    41e2:	fc 01       	movw	r30, r24
    41e4:	eb 55       	subi	r30, 0x5B	; 91
    41e6:	f8 4e       	sbci	r31, 0xE8	; 232
    41e8:	82 81       	ldd	r24, Z+2	; 0x02
}
    41ea:	08 95       	ret

000041ec <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    41ec:	ef 92       	push	r14
    41ee:	ff 92       	push	r15
    41f0:	0f 93       	push	r16
    41f2:	1f 93       	push	r17
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	1f 92       	push	r1
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    41fe:	0e 94 cc 20 	call	0x4198	; 0x4198 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4202:	8f 3f       	cpi	r24, 0xFF	; 255
    4204:	11 f4       	brne	.+4      	; 0x420a <__stack+0xb>
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	03 c0       	rjmp	.+6      	; 0x4210 <__stack+0x11>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    420a:	88 30       	cpi	r24, 0x08	; 8
    420c:	29 f4       	brne	.+10     	; 0x4218 <__stack+0x19>
    420e:	82 e0       	ldi	r24, 0x02	; 2
    4210:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_nrk_errno_set>
    4214:	8f ef       	ldi	r24, 0xFF	; 255
    4216:	41 c0       	rjmp	.+130    	; 0x429a <__stack+0x9b>
	
	nrk_int_disable();
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    421e:	89 81       	ldd	r24, Y+1	; 0x01
    4220:	e8 2e       	mov	r14, r24
    4222:	ff 24       	eor	r15, r15
    4224:	e7 fc       	sbrc	r14, 7
    4226:	f0 94       	com	r15
    4228:	87 01       	movw	r16, r14
    422a:	00 0f       	add	r16, r16
    422c:	11 1f       	adc	r17, r17
    422e:	f8 01       	movw	r30, r16
    4230:	ee 0d       	add	r30, r14
    4232:	ff 1d       	adc	r31, r15
    4234:	eb 55       	subi	r30, 0x5B	; 91
    4236:	f8 4e       	sbci	r31, 0xE8	; 232
    4238:	92 81       	ldd	r25, Z+2	; 0x02
    423a:	91 11       	cpse	r25, r1
    423c:	16 c0       	rjmp	.+44     	; 0x426a <__stack+0x6b>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    423e:	e0 91 ce 17 	lds	r30, 0x17CE
    4242:	f0 91 cf 17 	lds	r31, 0x17CF
    4246:	97 81       	ldd	r25, Z+7	; 0x07
    4248:	92 60       	ori	r25, 0x02	; 2
    424a:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    424c:	99 27       	eor	r25, r25
    424e:	87 fd       	sbrc	r24, 7
    4250:	90 95       	com	r25
    4252:	a9 2f       	mov	r26, r25
    4254:	b9 2f       	mov	r27, r25
    4256:	81 8b       	std	Z+17, r24	; 0x11
    4258:	92 8b       	std	Z+18, r25	; 0x12
    425a:	a3 8b       	std	Z+19, r26	; 0x13
    425c:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    425e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    4262:	80 e0       	ldi	r24, 0x00	; 0
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	0e 94 20 24 	call	0x4840	; 0x4840 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    426a:	0e 0d       	add	r16, r14
    426c:	1f 1d       	adc	r17, r15
    426e:	d8 01       	movw	r26, r16
    4270:	ab 55       	subi	r26, 0x5B	; 91
    4272:	b8 4e       	sbci	r27, 0xE8	; 232
    4274:	12 96       	adiw	r26, 0x02	; 2
    4276:	8c 91       	ld	r24, X
    4278:	12 97       	sbiw	r26, 0x02	; 2
    427a:	81 50       	subi	r24, 0x01	; 1
    427c:	12 96       	adiw	r26, 0x02	; 2
    427e:	8c 93       	st	X, r24
    4280:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    4282:	e0 91 ce 17 	lds	r30, 0x17CE
    4286:	f0 91 cf 17 	lds	r31, 0x17CF
    428a:	11 96       	adiw	r26, 0x01	; 1
    428c:	8c 91       	ld	r24, X
    428e:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    4294:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>

	return NRK_OK;
    4298:	81 e0       	ldi	r24, 0x01	; 1
}
    429a:	0f 90       	pop	r0
    429c:	df 91       	pop	r29
    429e:	cf 91       	pop	r28
    42a0:	1f 91       	pop	r17
    42a2:	0f 91       	pop	r16
    42a4:	ff 90       	pop	r15
    42a6:	ef 90       	pop	r14
    42a8:	08 95       	ret

000042aa <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	1f 92       	push	r1
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    42b8:	0e 94 cc 20 	call	0x4198	; 0x4198 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    42bc:	8f 3f       	cpi	r24, 0xFF	; 255
    42be:	11 f4       	brne	.+4      	; 0x42c4 <nrk_sem_post+0x1a>
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	03 c0       	rjmp	.+6      	; 0x42ca <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    42c4:	88 30       	cpi	r24, 0x08	; 8
    42c6:	29 f4       	brne	.+10     	; 0x42d2 <nrk_sem_post+0x28>
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_nrk_errno_set>
    42ce:	8f ef       	ldi	r24, 0xFF	; 255
    42d0:	44 c0       	rjmp	.+136    	; 0x435a <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    42d2:	48 2f       	mov	r20, r24
    42d4:	55 27       	eor	r21, r21
    42d6:	47 fd       	sbrc	r20, 7
    42d8:	50 95       	com	r21
    42da:	9a 01       	movw	r18, r20
    42dc:	22 0f       	add	r18, r18
    42de:	33 1f       	adc	r19, r19
    42e0:	24 0f       	add	r18, r20
    42e2:	35 1f       	adc	r19, r21
    42e4:	89 01       	movw	r16, r18
    42e6:	0b 55       	subi	r16, 0x5B	; 91
    42e8:	18 4e       	sbci	r17, 0xE8	; 232
    42ea:	f8 01       	movw	r30, r16
    42ec:	22 81       	ldd	r18, Z+2	; 0x02
    42ee:	90 81       	ld	r25, Z
    42f0:	29 17       	cp	r18, r25
    42f2:	94 f5       	brge	.+100    	; 0x4358 <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    42f4:	89 83       	std	Y+1, r24	; 0x01
    42f6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>

		nrk_sem_list[id].value++;
    42fa:	f8 01       	movw	r30, r16
    42fc:	92 81       	ldd	r25, Z+2	; 0x02
    42fe:	9f 5f       	subi	r25, 0xFF	; 255
    4300:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    4302:	e0 91 ce 17 	lds	r30, 0x17CE
    4306:	f0 91 cf 17 	lds	r31, 0x17CF
    430a:	14 82       	std	Z+4, r1	; 0x04
    430c:	e2 e5       	ldi	r30, 0x52	; 82
    430e:	f6 e1       	ldi	r31, 0x16	; 22

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    4310:	89 81       	ldd	r24, Y+1	; 0x01
    4312:	99 27       	eor	r25, r25
    4314:	87 fd       	sbrc	r24, 7
    4316:	90 95       	com	r25
    4318:	a9 2f       	mov	r26, r25
    431a:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    431c:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    431e:	30 81       	ld	r19, Z
    4320:	32 30       	cpi	r19, 0x02	; 2
    4322:	99 f4       	brne	.+38     	; 0x434a <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    4324:	42 85       	ldd	r20, Z+10	; 0x0a
    4326:	53 85       	ldd	r21, Z+11	; 0x0b
    4328:	64 85       	ldd	r22, Z+12	; 0x0c
    432a:	75 85       	ldd	r23, Z+13	; 0x0d
    432c:	48 17       	cp	r20, r24
    432e:	59 07       	cpc	r21, r25
    4330:	6a 07       	cpc	r22, r26
    4332:	7b 07       	cpc	r23, r27
    4334:	51 f4       	brne	.+20     	; 0x434a <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4336:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    4338:	16 86       	std	Z+14, r1	; 0x0e
    433a:	17 86       	std	Z+15, r1	; 0x0f
    433c:	10 8a       	std	Z+16, r1	; 0x10
    433e:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    4340:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    4342:	12 86       	std	Z+10, r1	; 0x0a
    4344:	13 86       	std	Z+11, r1	; 0x0b
    4346:	14 86       	std	Z+12, r1	; 0x0c
    4348:	15 86       	std	Z+13, r1	; 0x0d
    434a:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    434c:	37 e1       	ldi	r19, 0x17	; 23
    434e:	ea 3a       	cpi	r30, 0xAA	; 170
    4350:	f3 07       	cpc	r31, r19
    4352:	29 f7       	brne	.-54     	; 0x431e <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    4354:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
	}
		
return NRK_OK;
    4358:	81 e0       	ldi	r24, 0x01	; 1
}
    435a:	0f 90       	pop	r0
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	1f 91       	pop	r17
    4362:	0f 91       	pop	r16
    4364:	08 95       	ret

00004366 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    4366:	0e 94 cc 20 	call	0x4198	; 0x4198 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    436a:	8f 3f       	cpi	r24, 0xFF	; 255
    436c:	11 f4       	brne	.+4      	; 0x4372 <nrk_sem_delete+0xc>
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	03 c0       	rjmp	.+6      	; 0x4378 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4372:	88 30       	cpi	r24, 0x08	; 8
    4374:	29 f4       	brne	.+10     	; 0x4380 <nrk_sem_delete+0x1a>
    4376:	82 e0       	ldi	r24, 0x02	; 2
    4378:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <_nrk_errno_set>
    437c:	8f ef       	ldi	r24, 0xFF	; 255
    437e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    4380:	99 27       	eor	r25, r25
    4382:	87 fd       	sbrc	r24, 7
    4384:	90 95       	com	r25
    4386:	fc 01       	movw	r30, r24
    4388:	ee 0f       	add	r30, r30
    438a:	ff 1f       	adc	r31, r31
    438c:	8e 0f       	add	r24, r30
    438e:	9f 1f       	adc	r25, r31
    4390:	fc 01       	movw	r30, r24
    4392:	eb 55       	subi	r30, 0x5B	; 91
    4394:	f8 4e       	sbci	r31, 0xE8	; 232
    4396:	8f ef       	ldi	r24, 0xFF	; 255
    4398:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    439a:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    439c:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    439e:	80 91 cd 17 	lds	r24, 0x17CD
    43a2:	81 50       	subi	r24, 0x01	; 1
    43a4:	80 93 cd 17 	sts	0x17CD, r24
return NRK_OK;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
}
    43aa:	08 95       	ret

000043ac <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    43ac:	e0 91 c3 17 	lds	r30, 0x17C3
    43b0:	f0 91 c4 17 	lds	r31, 0x17C4
}
    43b4:	80 81       	ld	r24, Z
    43b6:	08 95       	ret

000043b8 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    43b8:	e0 91 c3 17 	lds	r30, 0x17C3
    43bc:	f0 91 c4 17 	lds	r31, 0x17C4
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    43c0:	30 97       	sbiw	r30, 0x00	; 0
    43c2:	21 f0       	breq	.+8      	; 0x43cc <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    43c4:	03 80       	ldd	r0, Z+3	; 0x03
    43c6:	f4 81       	ldd	r31, Z+4	; 0x04
    43c8:	e0 2d       	mov	r30, r0
    43ca:	fa cf       	rjmp	.-12     	; 0x43c0 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    43cc:	08 95       	ret

000043ce <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    43ce:	af 92       	push	r10
    43d0:	bf 92       	push	r11
    43d2:	cf 92       	push	r12
    43d4:	df 92       	push	r13
    43d6:	ef 92       	push	r14
    43d8:	ff 92       	push	r15
    43da:	0f 93       	push	r16
    43dc:	1f 93       	push	r17
    43de:	cf 93       	push	r28
    43e0:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    43e2:	e0 91 49 16 	lds	r30, 0x1649
    43e6:	f0 91 4a 16 	lds	r31, 0x164A
    43ea:	30 97       	sbiw	r30, 0x00	; 0
    43ec:	09 f4       	brne	.+2      	; 0x43f0 <nrk_add_to_readyQ+0x22>
    43ee:	94 c0       	rjmp	.+296    	; 0x4518 <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    43f0:	00 91 c3 17 	lds	r16, 0x17C3
    43f4:	10 91 c4 17 	lds	r17, 0x17C4
    CurNode = _free_node;

    if (_head_node != NULL)
    43f8:	01 15       	cp	r16, r1
    43fa:	11 05       	cpc	r17, r1
    43fc:	09 f4       	brne	.+2      	; 0x4400 <nrk_add_to_readyQ+0x32>
    43fe:	4c c0       	rjmp	.+152    	; 0x4498 <nrk_add_to_readyQ+0xca>
    4400:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    4402:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    4404:	58 2f       	mov	r21, r24
    4406:	54 03       	mulsu	r21, r20
    4408:	90 01       	movw	r18, r0
    440a:	11 24       	eor	r1, r1
    440c:	25 5b       	subi	r18, 0xB5	; 181
    440e:	39 4e       	sbci	r19, 0xE9	; 233
    4410:	79 01       	movw	r14, r18
    4412:	9a e0       	ldi	r25, 0x0A	; 10
    4414:	e9 0e       	add	r14, r25
    4416:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    4418:	69 01       	movw	r12, r18
    441a:	c4 e0       	ldi	r28, 0x04	; 4
    441c:	cc 0e       	add	r12, r28
    441e:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    4420:	59 01       	movw	r10, r18
    4422:	db e0       	ldi	r29, 0x0B	; 11
    4424:	ad 0e       	add	r10, r29
    4426:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    4428:	2c 91       	ld	r18, X
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	42 9f       	mul	r20, r18
    442e:	b0 01       	movw	r22, r0
    4430:	43 9f       	mul	r20, r19
    4432:	70 0d       	add	r23, r0
    4434:	11 24       	eor	r1, r1
    4436:	65 5b       	subi	r22, 0xB5	; 181
    4438:	79 4e       	sbci	r23, 0xE9	; 233
    443a:	eb 01       	movw	r28, r22
    443c:	9c 81       	ldd	r25, Y+4	; 0x04
    443e:	99 23       	and	r25, r25
    4440:	29 f0       	breq	.+10     	; 0x444c <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    4442:	5b 85       	ldd	r21, Y+11	; 0x0b
    4444:	e7 01       	movw	r28, r14
    4446:	98 81       	ld	r25, Y
    4448:	59 17       	cp	r21, r25
    444a:	40 f1       	brcs	.+80     	; 0x449c <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    444c:	e6 01       	movw	r28, r12
    444e:	98 81       	ld	r25, Y
    4450:	99 23       	and	r25, r25
    4452:	69 f0       	breq	.+26     	; 0x446e <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    4454:	42 9f       	mul	r20, r18
    4456:	b0 01       	movw	r22, r0
    4458:	43 9f       	mul	r20, r19
    445a:	70 0d       	add	r23, r0
    445c:	11 24       	eor	r1, r1
    445e:	65 5b       	subi	r22, 0xB5	; 181
    4460:	79 4e       	sbci	r23, 0xE9	; 233
    4462:	eb 01       	movw	r28, r22
    4464:	5a 85       	ldd	r21, Y+10	; 0x0a
    4466:	e5 01       	movw	r28, r10
    4468:	98 81       	ld	r25, Y
    446a:	59 17       	cp	r21, r25
    446c:	b8 f0       	brcs	.+46     	; 0x449c <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    446e:	42 9f       	mul	r20, r18
    4470:	b0 01       	movw	r22, r0
    4472:	43 9f       	mul	r20, r19
    4474:	70 0d       	add	r23, r0
    4476:	11 24       	eor	r1, r1
    4478:	9b 01       	movw	r18, r22
    447a:	25 5b       	subi	r18, 0xB5	; 181
    447c:	39 4e       	sbci	r19, 0xE9	; 233
    447e:	e9 01       	movw	r28, r18
    4480:	2a 85       	ldd	r18, Y+10	; 0x0a
    4482:	e7 01       	movw	r28, r14
    4484:	98 81       	ld	r25, Y
    4486:	29 17       	cp	r18, r25
    4488:	48 f0       	brcs	.+18     	; 0x449c <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    448a:	13 96       	adiw	r26, 0x03	; 3
    448c:	0d 90       	ld	r0, X+
    448e:	bc 91       	ld	r27, X
    4490:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    4492:	10 97       	sbiw	r26, 0x00	; 0
    4494:	49 f6       	brne	.-110    	; 0x4428 <nrk_add_to_readyQ+0x5a>
    4496:	02 c0       	rjmp	.+4      	; 0x449c <nrk_add_to_readyQ+0xce>
    4498:	a0 e0       	ldi	r26, 0x00	; 0
    449a:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    449c:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    449e:	c3 81       	ldd	r28, Z+3	; 0x03
    44a0:	d4 81       	ldd	r29, Z+4	; 0x04
    44a2:	d0 93 4a 16 	sts	0x164A, r29
    44a6:	c0 93 49 16 	sts	0x1649, r28

    if (NextNode == _head_node)
    44aa:	a0 17       	cp	r26, r16
    44ac:	b1 07       	cpc	r27, r17
    44ae:	b1 f4       	brne	.+44     	; 0x44dc <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    44b0:	10 97       	sbiw	r26, 0x00	; 0
    44b2:	49 f0       	breq	.+18     	; 0x44c6 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    44b4:	b4 83       	std	Z+4, r27	; 0x04
    44b6:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    44b8:	12 82       	std	Z+2, r1	; 0x02
    44ba:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    44bc:	12 96       	adiw	r26, 0x02	; 2
    44be:	fc 93       	st	X, r31
    44c0:	ee 93       	st	-X, r30
    44c2:	11 97       	sbiw	r26, 0x01	; 1
    44c4:	06 c0       	rjmp	.+12     	; 0x44d2 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    44c6:	14 82       	std	Z+4, r1	; 0x04
    44c8:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    44ca:	12 82       	std	Z+2, r1	; 0x02
    44cc:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    44ce:	fa 83       	std	Y+2, r31	; 0x02
    44d0:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    44d2:	f0 93 c4 17 	sts	0x17C4, r31
    44d6:	e0 93 c3 17 	sts	0x17C3, r30
    44da:	1e c0       	rjmp	.+60     	; 0x4518 <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    44dc:	ac 17       	cp	r26, r28
    44de:	bd 07       	cpc	r27, r29
    44e0:	79 f0       	breq	.+30     	; 0x4500 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    44e2:	11 96       	adiw	r26, 0x01	; 1
    44e4:	8d 91       	ld	r24, X+
    44e6:	9c 91       	ld	r25, X
    44e8:	12 97       	sbiw	r26, 0x02	; 2
    44ea:	92 83       	std	Z+2, r25	; 0x02
    44ec:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    44ee:	b4 83       	std	Z+4, r27	; 0x04
    44f0:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    44f2:	11 96       	adiw	r26, 0x01	; 1
    44f4:	cd 91       	ld	r28, X+
    44f6:	dc 91       	ld	r29, X
    44f8:	12 97       	sbiw	r26, 0x02	; 2
    44fa:	fc 83       	std	Y+4, r31	; 0x04
    44fc:	eb 83       	std	Y+3, r30	; 0x03
    44fe:	08 c0       	rjmp	.+16     	; 0x4510 <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    4500:	14 82       	std	Z+4, r1	; 0x04
    4502:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    4504:	11 96       	adiw	r26, 0x01	; 1
    4506:	8d 91       	ld	r24, X+
    4508:	9c 91       	ld	r25, X
    450a:	12 97       	sbiw	r26, 0x02	; 2
    450c:	92 83       	std	Z+2, r25	; 0x02
    450e:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    4510:	12 96       	adiw	r26, 0x02	; 2
    4512:	fc 93       	st	X, r31
    4514:	ee 93       	st	-X, r30
    4516:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    4518:	df 91       	pop	r29
    451a:	cf 91       	pop	r28
    451c:	1f 91       	pop	r17
    451e:	0f 91       	pop	r16
    4520:	ff 90       	pop	r15
    4522:	ef 90       	pop	r14
    4524:	df 90       	pop	r13
    4526:	cf 90       	pop	r12
    4528:	bf 90       	pop	r11
    452a:	af 90       	pop	r10
    452c:	08 95       	ret

0000452e <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    452e:	cf 93       	push	r28
    4530:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    4532:	e0 91 c3 17 	lds	r30, 0x17C3
    4536:	f0 91 c4 17 	lds	r31, 0x17C4
    453a:	30 97       	sbiw	r30, 0x00	; 0
    453c:	09 f4       	brne	.+2      	; 0x4540 <nrk_rem_from_readyQ+0x12>
    453e:	44 c0       	rjmp	.+136    	; 0x45c8 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    4540:	99 27       	eor	r25, r25
    4542:	87 fd       	sbrc	r24, 7
    4544:	90 95       	com	r25
    4546:	20 81       	ld	r18, Z
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	28 17       	cp	r18, r24
    454c:	39 07       	cpc	r19, r25
    454e:	81 f4       	brne	.+32     	; 0x4570 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    4550:	a3 81       	ldd	r26, Z+3	; 0x03
    4552:	b4 81       	ldd	r27, Z+4	; 0x04
    4554:	b0 93 c4 17 	sts	0x17C4, r27
    4558:	a0 93 c3 17 	sts	0x17C3, r26
        _head_node->Prev = NULL;
    455c:	12 96       	adiw	r26, 0x02	; 2
    455e:	1c 92       	st	X, r1
    4560:	1e 92       	st	-X, r1
    4562:	11 97       	sbiw	r26, 0x01	; 1
    4564:	18 c0       	rjmp	.+48     	; 0x4596 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    4566:	03 80       	ldd	r0, Z+3	; 0x03
    4568:	f4 81       	ldd	r31, Z+4	; 0x04
    456a:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    456c:	30 97       	sbiw	r30, 0x00	; 0
    456e:	61 f1       	breq	.+88     	; 0x45c8 <nrk_rem_from_readyQ+0x9a>
    4570:	20 81       	ld	r18, Z
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	28 17       	cp	r18, r24
    4576:	39 07       	cpc	r19, r25
    4578:	b1 f7       	brne	.-20     	; 0x4566 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    457a:	c1 81       	ldd	r28, Z+1	; 0x01
    457c:	d2 81       	ldd	r29, Z+2	; 0x02
    457e:	83 81       	ldd	r24, Z+3	; 0x03
    4580:	94 81       	ldd	r25, Z+4	; 0x04
    4582:	9c 83       	std	Y+4, r25	; 0x04
    4584:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    4586:	a3 81       	ldd	r26, Z+3	; 0x03
    4588:	b4 81       	ldd	r27, Z+4	; 0x04
    458a:	10 97       	sbiw	r26, 0x00	; 0
    458c:	21 f0       	breq	.+8      	; 0x4596 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    458e:	12 96       	adiw	r26, 0x02	; 2
    4590:	dc 93       	st	X, r29
    4592:	ce 93       	st	-X, r28
    4594:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    4596:	a0 91 49 16 	lds	r26, 0x1649
    459a:	b0 91 4a 16 	lds	r27, 0x164A
    459e:	10 97       	sbiw	r26, 0x00	; 0
    45a0:	39 f4       	brne	.+14     	; 0x45b0 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    45a2:	f0 93 4a 16 	sts	0x164A, r31
    45a6:	e0 93 49 16 	sts	0x1649, r30
        _free_node->Next = NULL;
    45aa:	14 82       	std	Z+4, r1	; 0x04
    45ac:	13 82       	std	Z+3, r1	; 0x03
    45ae:	0a c0       	rjmp	.+20     	; 0x45c4 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    45b0:	b4 83       	std	Z+4, r27	; 0x04
    45b2:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    45b4:	12 96       	adiw	r26, 0x02	; 2
    45b6:	fc 93       	st	X, r31
    45b8:	ee 93       	st	-X, r30
    45ba:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    45bc:	f0 93 4a 16 	sts	0x164A, r31
    45c0:	e0 93 49 16 	sts	0x1649, r30
    }
    _free_node->Prev = NULL;
    45c4:	12 82       	std	Z+2, r1	; 0x02
    45c6:	11 82       	std	Z+1, r1	; 0x01
}
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	08 95       	ret

000045ce <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    45ce:	ef 92       	push	r14
    45d0:	ff 92       	push	r15
    45d2:	0f 93       	push	r16
    45d4:	1f 93       	push	r17
    45d6:	cf 93       	push	r28
    45d8:	df 93       	push	r29
    45da:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    45dc:	4b 81       	ldd	r20, Y+3	; 0x03
    45de:	5c 81       	ldd	r21, Y+4	; 0x04
    45e0:	69 81       	ldd	r22, Y+1	; 0x01
    45e2:	7a 81       	ldd	r23, Y+2	; 0x02
    45e4:	8d 81       	ldd	r24, Y+5	; 0x05
    45e6:	9e 81       	ldd	r25, Y+6	; 0x06
    45e8:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    45ec:	2f 81       	ldd	r18, Y+7	; 0x07
    45ee:	22 23       	and	r18, r18
    45f0:	71 f0       	breq	.+28     	; 0x460e <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    45f2:	4b 81       	ldd	r20, Y+3	; 0x03
    45f4:	5c 81       	ldd	r21, Y+4	; 0x04
    45f6:	e1 2c       	mov	r14, r1
    45f8:	f1 2c       	mov	r15, r1
    45fa:	00 e0       	ldi	r16, 0x00	; 0
    45fc:	10 e0       	ldi	r17, 0x00	; 0
    45fe:	20 e0       	ldi	r18, 0x00	; 0
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	bc 01       	movw	r22, r24
    4604:	ce 01       	movw	r24, r28
    4606:	0e 94 a1 1b 	call	0x3742	; 0x3742 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    460a:	1f 82       	std	Y+7, r1	; 0x07
    460c:	0c c0       	rjmp	.+24     	; 0x4626 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    460e:	e8 81       	ld	r30, Y
    4610:	2b e2       	ldi	r18, 0x2B	; 43
    4612:	e2 02       	muls	r30, r18
    4614:	f0 01       	movw	r30, r0
    4616:	11 24       	eor	r1, r1
    4618:	e5 5b       	subi	r30, 0xB5	; 181
    461a:	f9 4e       	sbci	r31, 0xE9	; 233
    461c:	21 85       	ldd	r18, Z+9	; 0x09
    461e:	23 30       	cpi	r18, 0x03	; 3
    4620:	b9 f4       	brne	.+46     	; 0x4650 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    4622:	91 83       	std	Z+1, r25	; 0x01
    4624:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    4626:	e8 81       	ld	r30, Y
    4628:	8b e2       	ldi	r24, 0x2B	; 43
    462a:	e8 02       	muls	r30, r24
    462c:	f0 01       	movw	r30, r0
    462e:	11 24       	eor	r1, r1
    4630:	e5 5b       	subi	r30, 0xB5	; 181
    4632:	f9 4e       	sbci	r31, 0xE9	; 233
    4634:	85 89       	ldd	r24, Z+21	; 0x15
    4636:	96 89       	ldd	r25, Z+22	; 0x16
    4638:	a7 89       	ldd	r26, Z+23	; 0x17
    463a:	b0 8d       	ldd	r27, Z+24	; 0x18
    463c:	89 2b       	or	r24, r25
    463e:	8a 2b       	or	r24, r26
    4640:	8b 2b       	or	r24, r27
    4642:	41 f4       	brne	.+16     	; 0x4654 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    4644:	82 e0       	ldi	r24, 0x02	; 2
    4646:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    4648:	88 81       	ld	r24, Y
    464a:	0e 94 e7 21 	call	0x43ce	; 0x43ce <nrk_add_to_readyQ>
    464e:	02 c0       	rjmp	.+4      	; 0x4654 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    4650:	8f ef       	ldi	r24, 0xFF	; 255
    4652:	01 c0       	rjmp	.+2      	; 0x4656 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    4654:	81 e0       	ldi	r24, 0x01	; 1
}
    4656:	df 91       	pop	r29
    4658:	cf 91       	pop	r28
    465a:	1f 91       	pop	r17
    465c:	0f 91       	pop	r16
    465e:	ff 90       	pop	r15
    4660:	ef 90       	pop	r14
    4662:	08 95       	ret

00004664 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    4664:	1f 93       	push	r17
    4666:	cf 93       	push	r28
    4668:	df 93       	push	r29
    466a:	cd b7       	in	r28, 0x3d	; 61
    466c:	de b7       	in	r29, 0x3e	; 62
    466e:	28 97       	sbiw	r28, 0x08	; 8
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	f8 94       	cli
    4674:	de bf       	out	0x3e, r29	; 62
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	cd bf       	out	0x3d, r28	; 61
    467a:	29 83       	std	Y+1, r18	; 0x01
    467c:	3a 83       	std	Y+2, r19	; 0x02
    467e:	4b 83       	std	Y+3, r20	; 0x03
    4680:	5c 83       	std	Y+4, r21	; 0x04
    4682:	6d 83       	std	Y+5, r22	; 0x05
    4684:	7e 83       	std	Y+6, r23	; 0x06
    4686:	8f 83       	std	Y+7, r24	; 0x07
    4688:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    468a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    468e:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    4692:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    4694:	ce 01       	movw	r24, r28
    4696:	01 96       	adiw	r24, 0x01	; 1
    4698:	0e 94 44 27 	call	0x4e88	; 0x4e88 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    469c:	63 30       	cpi	r22, 0x03	; 3
    469e:	71 05       	cpc	r23, r1
    46a0:	98 f0       	brcs	.+38     	; 0x46c8 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    46a2:	e0 91 ce 17 	lds	r30, 0x17CE
    46a6:	f0 91 cf 17 	lds	r31, 0x17CF
    46aa:	21 2f       	mov	r18, r17
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	62 0f       	add	r22, r18
    46b0:	73 1f       	adc	r23, r19
    46b2:	cb 01       	movw	r24, r22
    46b4:	a0 e0       	ldi	r26, 0x00	; 0
    46b6:	b0 e0       	ldi	r27, 0x00	; 0
    46b8:	85 8b       	std	Z+21, r24	; 0x15
    46ba:	96 8b       	std	Z+22, r25	; 0x16
    46bc:	a7 8b       	std	Z+23, r26	; 0x17
    46be:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    46c0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>

    return NRK_OK;
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	01 c0       	rjmp	.+2      	; 0x46ca <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    46c8:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    46ca:	28 96       	adiw	r28, 0x08	; 8
    46cc:	0f b6       	in	r0, 0x3f	; 63
    46ce:	f8 94       	cli
    46d0:	de bf       	out	0x3e, r29	; 62
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	cd bf       	out	0x3d, r28	; 61
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	1f 91       	pop	r17
    46dc:	08 95       	ret

000046de <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    46de:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    46e2:	e0 91 ce 17 	lds	r30, 0x17CE
    46e6:	f0 91 cf 17 	lds	r31, 0x17CF
    46ea:	85 81       	ldd	r24, Z+5	; 0x05
    46ec:	81 11       	cpse	r24, r1
    46ee:	f7 cf       	rjmp	.-18     	; 0x46de <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    46f0:	08 95       	ret

000046f2 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    46f2:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    46f4:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    46f8:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    46fc:	e0 91 ce 17 	lds	r30, 0x17CE
    4700:	f0 91 cf 17 	lds	r31, 0x17CF
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	92 a7       	std	Z+42, r25	; 0x2a
    470a:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    470c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    470e:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    4712:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4714:	88 3f       	cpi	r24, 0xF8	; 248
    4716:	80 f4       	brcc	.+32     	; 0x4738 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4718:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_nrk_get_next_wakeup>
    471c:	2c 2f       	mov	r18, r28
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	2f 5f       	subi	r18, 0xFF	; 255
    4722:	3f 4f       	sbci	r19, 0xFF	; 255
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	28 17       	cp	r18, r24
    4728:	39 07       	cpc	r19, r25
    472a:	34 f4       	brge	.+12     	; 0x4738 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    472c:	82 e0       	ldi	r24, 0x02	; 2
    472e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    4730:	80 93 f5 15 	sts	0x15F5, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4734:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4738:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    473c:	0e 94 6f 23 	call	0x46de	; 0x46de <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	cf 91       	pop	r28
    4744:	08 95       	ret

00004746 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    4746:	e0 91 ce 17 	lds	r30, 0x17CE
    474a:	f0 91 cf 17 	lds	r31, 0x17CF
    474e:	80 85       	ldd	r24, Z+8	; 0x08
    4750:	0e 94 97 22 	call	0x452e	; 0x452e <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    4754:	e0 91 ce 17 	lds	r30, 0x17CE
    4758:	f0 91 cf 17 	lds	r31, 0x17CF
    475c:	84 e0       	ldi	r24, 0x04	; 4
    475e:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    4760:	0e 94 79 23 	call	0x46f2	; 0x46f2 <nrk_wait_until_next_period>
    return NRK_OK;
}
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	08 95       	ret

00004768 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
    476c:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    476e:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <nrk_stack_check>

    if (p == 0)
    4772:	20 97       	sbiw	r28, 0x00	; 0
    4774:	11 f4       	brne	.+4      	; 0x477a <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    4776:	c1 e0       	ldi	r28, 0x01	; 1
    4778:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    477a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    477e:	e0 91 ce 17 	lds	r30, 0x17CE
    4782:	f0 91 cf 17 	lds	r31, 0x17CF
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    478a:	d2 a7       	std	Z+42, r29	; 0x2a
    478c:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    478e:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    4792:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    4794:	88 3f       	cpi	r24, 0xF8	; 248
    4796:	80 f4       	brcc	.+32     	; 0x47b8 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4798:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_nrk_get_next_wakeup>
    479c:	2c 2f       	mov	r18, r28
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	2f 5f       	subi	r18, 0xFF	; 255
    47a2:	3f 4f       	sbci	r19, 0xFF	; 255
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	28 17       	cp	r18, r24
    47a8:	39 07       	cpc	r19, r25
    47aa:	34 f4       	brge	.+12     	; 0x47b8 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    47ac:	82 e0       	ldi	r24, 0x02	; 2
    47ae:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    47b0:	80 93 f5 15 	sts	0x15F5, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    47b4:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    47b8:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    47bc:	0e 94 6f 23 	call	0x46de	; 0x46de <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    47c0:	81 e0       	ldi	r24, 0x01	; 1
    47c2:	df 91       	pop	r29
    47c4:	cf 91       	pop	r28
    47c6:	08 95       	ret

000047c8 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    47c8:	ef 92       	push	r14
    47ca:	ff 92       	push	r15
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    47d4:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    47d8:	e0 91 ce 17 	lds	r30, 0x17CE
    47dc:	f0 91 cf 17 	lds	r31, 0x17CF
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    47e4:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    47e8:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    47ea:	e0 91 ce 17 	lds	r30, 0x17CE
    47ee:	f0 91 cf 17 	lds	r31, 0x17CF
    47f2:	e8 2e       	mov	r14, r24
    47f4:	f1 2c       	mov	r15, r1
    47f6:	c7 01       	movw	r24, r14
    47f8:	80 0f       	add	r24, r16
    47fa:	91 1f       	adc	r25, r17
    47fc:	a0 e0       	ldi	r26, 0x00	; 0
    47fe:	b0 e0       	ldi	r27, 0x00	; 0
    4800:	85 8b       	std	Z+21, r24	; 0x15
    4802:	96 8b       	std	Z+22, r25	; 0x16
    4804:	a7 8b       	std	Z+23, r26	; 0x17
    4806:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4808:	c8 3f       	cpi	r28, 0xF8	; 248
    480a:	78 f4       	brcc	.+30     	; 0x482a <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    480c:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_nrk_get_next_wakeup>
    4810:	9f ef       	ldi	r25, 0xFF	; 255
    4812:	e9 1a       	sub	r14, r25
    4814:	f9 0a       	sbc	r15, r25
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	e8 16       	cp	r14, r24
    481a:	f9 06       	cpc	r15, r25
    481c:	34 f4       	brge	.+12     	; 0x482a <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    481e:	82 e0       	ldi	r24, 0x02	; 2
    4820:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4822:	80 93 f5 15 	sts	0x15F5, r24
            _nrk_set_next_wakeup (timer);
    4826:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    482a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    482e:	0e 94 6f 23 	call	0x46de	; 0x46de <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	cf 91       	pop	r28
    4836:	1f 91       	pop	r17
    4838:	0f 91       	pop	r16
    483a:	ff 90       	pop	r15
    483c:	ef 90       	pop	r14
    483e:	08 95       	ret

00004840 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    4840:	cf 93       	push	r28
    4842:	df 93       	push	r29
    4844:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    4846:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    484a:	e0 91 ce 17 	lds	r30, 0x17CE
    484e:	f0 91 cf 17 	lds	r31, 0x17CF
    4852:	21 e0       	ldi	r18, 0x01	; 1
    4854:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    4856:	ce 01       	movw	r24, r28
    4858:	a0 e0       	ldi	r26, 0x00	; 0
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	85 8b       	std	Z+21, r24	; 0x15
    485e:	96 8b       	std	Z+22, r25	; 0x16
    4860:	a7 8b       	std	Z+23, r26	; 0x17
    4862:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    4864:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    4868:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    486a:	88 3f       	cpi	r24, 0xF8	; 248
    486c:	80 f4       	brcc	.+32     	; 0x488e <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    486e:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_nrk_get_next_wakeup>
    4872:	2c 2f       	mov	r18, r28
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	2f 5f       	subi	r18, 0xFF	; 255
    4878:	3f 4f       	sbci	r19, 0xFF	; 255
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	28 17       	cp	r18, r24
    487e:	39 07       	cpc	r19, r25
    4880:	34 f4       	brge	.+12     	; 0x488e <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    4882:	82 e0       	ldi	r24, 0x02	; 2
    4884:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4886:	80 93 f5 15 	sts	0x15F5, r24
            _nrk_set_next_wakeup (timer);
    488a:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    488e:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4892:	0e 94 6f 23 	call	0x46de	; 0x46de <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	df 91       	pop	r29
    489a:	cf 91       	pop	r28
    489c:	08 95       	ret

0000489e <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    489e:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    48a0:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    48a4:	e0 91 ce 17 	lds	r30, 0x17CE
    48a8:	f0 91 cf 17 	lds	r31, 0x17CF
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    48b0:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    48b2:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    48b6:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    48b8:	88 3f       	cpi	r24, 0xF8	; 248
    48ba:	80 f4       	brcc	.+32     	; 0x48dc <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    48bc:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_nrk_get_next_wakeup>
    48c0:	2c 2f       	mov	r18, r28
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	2f 5f       	subi	r18, 0xFF	; 255
    48c6:	3f 4f       	sbci	r19, 0xFF	; 255
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	28 17       	cp	r18, r24
    48cc:	39 07       	cpc	r19, r25
    48ce:	34 f4       	brge	.+12     	; 0x48dc <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    48d0:	82 e0       	ldi	r24, 0x02	; 2
    48d2:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    48d4:	80 93 f5 15 	sts	0x15F5, r24
            _nrk_set_next_wakeup (timer);
    48d8:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    48dc:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    48e0:	0e 94 6f 23 	call	0x46de	; 0x46de <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	cf 91       	pop	r28
    48e8:	08 95       	ret

000048ea <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    48ea:	1f 93       	push	r17
    48ec:	cf 93       	push	r28
    48ee:	df 93       	push	r29
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
    48f4:	28 97       	sbiw	r28, 0x08	; 8
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	29 83       	std	Y+1, r18	; 0x01
    4902:	3a 83       	std	Y+2, r19	; 0x02
    4904:	4b 83       	std	Y+3, r20	; 0x03
    4906:	5c 83       	std	Y+4, r21	; 0x04
    4908:	6d 83       	std	Y+5, r22	; 0x05
    490a:	7e 83       	std	Y+6, r23	; 0x06
    490c:	8f 83       	std	Y+7, r24	; 0x07
    490e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    4910:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <nrk_stack_check>

    nrk_int_disable ();
    4914:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4918:	e0 91 ce 17 	lds	r30, 0x17CE
    491c:	f0 91 cf 17 	lds	r31, 0x17CF
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	92 a7       	std	Z+42, r25	; 0x2a
    492a:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    492c:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    4930:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    4932:	ce 01       	movw	r24, r28
    4934:	01 96       	adiw	r24, 0x01	; 1
    4936:	0e 94 44 27 	call	0x4e88	; 0x4e88 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    493a:	e0 91 ce 17 	lds	r30, 0x17CE
    493e:	f0 91 cf 17 	lds	r31, 0x17CF
    4942:	dc 01       	movw	r26, r24
    4944:	cb 01       	movw	r24, r22
    4946:	81 0f       	add	r24, r17
    4948:	91 1d       	adc	r25, r1
    494a:	a1 1d       	adc	r26, r1
    494c:	b1 1d       	adc	r27, r1
    494e:	85 8b       	std	Z+21, r24	; 0x15
    4950:	96 8b       	std	Z+22, r25	; 0x16
    4952:	a7 8b       	std	Z+23, r26	; 0x17
    4954:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4956:	18 3f       	cpi	r17, 0xF8	; 248
    4958:	80 f4       	brcc	.+32     	; 0x497a <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    495a:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_nrk_get_next_wakeup>
    495e:	21 2f       	mov	r18, r17
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	2f 5f       	subi	r18, 0xFF	; 255
    4964:	3f 4f       	sbci	r19, 0xFF	; 255
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	28 17       	cp	r18, r24
    496a:	39 07       	cpc	r19, r25
    496c:	34 f4       	brge	.+12     	; 0x497a <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    496e:	82 e0       	ldi	r24, 0x02	; 2
    4970:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    4972:	80 93 f5 15 	sts	0x15F5, r24
            _nrk_set_next_wakeup (timer);
    4976:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    497a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    497e:	0e 94 6f 23 	call	0x46de	; 0x46de <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	28 96       	adiw	r28, 0x08	; 8
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	f8 94       	cli
    498a:	de bf       	out	0x3e, r29	; 62
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	cd bf       	out	0x3d, r28	; 61
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	1f 91       	pop	r17
    4996:	08 95       	ret

00004998 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    4998:	8f 92       	push	r8
    499a:	9f 92       	push	r9
    499c:	af 92       	push	r10
    499e:	bf 92       	push	r11
    49a0:	cf 92       	push	r12
    49a2:	df 92       	push	r13
    49a4:	ef 92       	push	r14
    49a6:	ff 92       	push	r15
    49a8:	0f 93       	push	r16
    49aa:	1f 93       	push	r17
    49ac:	cf 93       	push	r28
    49ae:	df 93       	push	r29
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	60 97       	sbiw	r28, 0x10	; 16
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	f8 94       	cli
    49ba:	de bf       	out	0x3e, r29	; 62
    49bc:	0f be       	out	0x3f, r0	; 63
    49be:	cd bf       	out	0x3d, r28	; 61
    49c0:	29 87       	std	Y+9, r18	; 0x09
    49c2:	3a 87       	std	Y+10, r19	; 0x0a
    49c4:	4b 87       	std	Y+11, r20	; 0x0b
    49c6:	5c 87       	std	Y+12, r21	; 0x0c
    49c8:	6d 87       	std	Y+13, r22	; 0x0d
    49ca:	7e 87       	std	Y+14, r23	; 0x0e
    49cc:	8f 87       	std	Y+15, r24	; 0x0f
    49ce:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    49d0:	ce 01       	movw	r24, r28
    49d2:	01 96       	adiw	r24, 0x01	; 1
    49d4:	0e 94 28 25 	call	0x4a50	; 0x4a50 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    49d8:	89 80       	ldd	r8, Y+1	; 0x01
    49da:	9a 80       	ldd	r9, Y+2	; 0x02
    49dc:	ab 80       	ldd	r10, Y+3	; 0x03
    49de:	bc 80       	ldd	r11, Y+4	; 0x04
    49e0:	cd 80       	ldd	r12, Y+5	; 0x05
    49e2:	de 80       	ldd	r13, Y+6	; 0x06
    49e4:	ef 80       	ldd	r14, Y+7	; 0x07
    49e6:	f8 84       	ldd	r15, Y+8	; 0x08
    49e8:	09 85       	ldd	r16, Y+9	; 0x09
    49ea:	1a 85       	ldd	r17, Y+10	; 0x0a
    49ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    49ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    49f0:	4d 85       	ldd	r20, Y+13	; 0x0d
    49f2:	5e 85       	ldd	r21, Y+14	; 0x0e
    49f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    49f6:	78 89       	ldd	r23, Y+16	; 0x10
    49f8:	ce 01       	movw	r24, r28
    49fa:	09 96       	adiw	r24, 0x09	; 9
    49fc:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    4a00:	8f 3f       	cpi	r24, 0xFF	; 255
    4a02:	61 f0       	breq	.+24     	; 0x4a1c <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    4a04:	29 85       	ldd	r18, Y+9	; 0x09
    4a06:	3a 85       	ldd	r19, Y+10	; 0x0a
    4a08:	4b 85       	ldd	r20, Y+11	; 0x0b
    4a0a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4a0c:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a0e:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a12:	98 89       	ldd	r25, Y+16	; 0x10
    4a14:	0e 94 75 24 	call	0x48ea	; 0x48ea <nrk_wait>

    return NRK_OK;
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	01 c0       	rjmp	.+2      	; 0x4a1e <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    4a1c:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    4a1e:	60 96       	adiw	r28, 0x10	; 16
    4a20:	0f b6       	in	r0, 0x3f	; 63
    4a22:	f8 94       	cli
    4a24:	de bf       	out	0x3e, r29	; 62
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	cd bf       	out	0x3d, r28	; 61
    4a2a:	df 91       	pop	r29
    4a2c:	cf 91       	pop	r28
    4a2e:	1f 91       	pop	r17
    4a30:	0f 91       	pop	r16
    4a32:	ff 90       	pop	r15
    4a34:	ef 90       	pop	r14
    4a36:	df 90       	pop	r13
    4a38:	cf 90       	pop	r12
    4a3a:	bf 90       	pop	r11
    4a3c:	af 90       	pop	r10
    4a3e:	9f 90       	pop	r9
    4a40:	8f 90       	pop	r8
    4a42:	08 95       	ret

00004a44 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    4a44:	e0 91 ce 17 	lds	r30, 0x17CE
    4a48:	f0 91 cf 17 	lds	r31, 0x17CF
}
    4a4c:	80 85       	ldd	r24, Z+8	; 0x08
    4a4e:	08 95       	ret

00004a50 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    4a50:	0f 93       	push	r16
    4a52:	1f 93       	push	r17
    4a54:	cf 93       	push	r28
    4a56:	df 93       	push	r29
    4a58:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    4a5a:	1c 82       	std	Y+4, r1	; 0x04
    4a5c:	1d 82       	std	Y+5, r1	; 0x05
    4a5e:	1e 82       	std	Y+6, r1	; 0x06
    4a60:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    4a62:	80 91 c5 17 	lds	r24, 0x17C5
    4a66:	90 91 c6 17 	lds	r25, 0x17C6
    4a6a:	a0 91 c7 17 	lds	r26, 0x17C7
    4a6e:	b0 91 c8 17 	lds	r27, 0x17C8
    4a72:	88 83       	st	Y, r24
    4a74:	99 83       	std	Y+1, r25	; 0x01
    4a76:	aa 83       	std	Y+2, r26	; 0x02
    4a78:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    4a7a:	80 91 c9 17 	lds	r24, 0x17C9
    4a7e:	90 91 ca 17 	lds	r25, 0x17CA
    4a82:	a0 91 cb 17 	lds	r26, 0x17CB
    4a86:	b0 91 cc 17 	lds	r27, 0x17CC
    4a8a:	8c 83       	std	Y+4, r24	; 0x04
    4a8c:	9d 83       	std	Y+5, r25	; 0x05
    4a8e:	ae 83       	std	Y+6, r26	; 0x06
    4a90:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    4a92:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    4a96:	a8 2f       	mov	r26, r24
    4a98:	b0 e0       	ldi	r27, 0x00	; 0
    4a9a:	23 eb       	ldi	r18, 0xB3	; 179
    4a9c:	36 ee       	ldi	r19, 0xE6	; 230
    4a9e:	4e e0       	ldi	r20, 0x0E	; 14
    4aa0:	50 e0       	ldi	r21, 0x00	; 0
    4aa2:	0e 94 c7 30 	call	0x618e	; 0x618e <__muluhisi3>
    4aa6:	0c 81       	ldd	r16, Y+4	; 0x04
    4aa8:	1d 81       	ldd	r17, Y+5	; 0x05
    4aaa:	2e 81       	ldd	r18, Y+6	; 0x06
    4aac:	3f 81       	ldd	r19, Y+7	; 0x07
    4aae:	dc 01       	movw	r26, r24
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	80 0f       	add	r24, r16
    4ab4:	91 1f       	adc	r25, r17
    4ab6:	a2 1f       	adc	r26, r18
    4ab8:	b3 1f       	adc	r27, r19
    4aba:	8c 83       	std	Y+4, r24	; 0x04
    4abc:	9d 83       	std	Y+5, r25	; 0x05
    4abe:	ae 83       	std	Y+6, r26	; 0x06
    4ac0:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ac6:	ae 81       	ldd	r26, Y+6	; 0x06
    4ac8:	bf 81       	ldd	r27, Y+7	; 0x07
    4aca:	81 15       	cp	r24, r1
    4acc:	2a ec       	ldi	r18, 0xCA	; 202
    4ace:	92 07       	cpc	r25, r18
    4ad0:	2a e9       	ldi	r18, 0x9A	; 154
    4ad2:	a2 07       	cpc	r26, r18
    4ad4:	2b e3       	ldi	r18, 0x3B	; 59
    4ad6:	b2 07       	cpc	r27, r18
    4ad8:	98 f0       	brcs	.+38     	; 0x4b00 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    4ada:	9a 5c       	subi	r25, 0xCA	; 202
    4adc:	aa 49       	sbci	r26, 0x9A	; 154
    4ade:	bb 43       	sbci	r27, 0x3B	; 59
    4ae0:	8c 83       	std	Y+4, r24	; 0x04
    4ae2:	9d 83       	std	Y+5, r25	; 0x05
    4ae4:	ae 83       	std	Y+6, r26	; 0x06
    4ae6:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    4ae8:	88 81       	ld	r24, Y
    4aea:	99 81       	ldd	r25, Y+1	; 0x01
    4aec:	aa 81       	ldd	r26, Y+2	; 0x02
    4aee:	bb 81       	ldd	r27, Y+3	; 0x03
    4af0:	01 96       	adiw	r24, 0x01	; 1
    4af2:	a1 1d       	adc	r26, r1
    4af4:	b1 1d       	adc	r27, r1
    4af6:	88 83       	st	Y, r24
    4af8:	99 83       	std	Y+1, r25	; 0x01
    4afa:	aa 83       	std	Y+2, r26	; 0x02
    4afc:	bb 83       	std	Y+3, r27	; 0x03
    4afe:	e1 cf       	rjmp	.-62     	; 0x4ac2 <nrk_time_get+0x72>
    }

}
    4b00:	df 91       	pop	r29
    4b02:	cf 91       	pop	r28
    4b04:	1f 91       	pop	r17
    4b06:	0f 91       	pop	r16
    4b08:	08 95       	ret

00004b0a <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    4b0a:	8f 92       	push	r8
    4b0c:	9f 92       	push	r9
    4b0e:	af 92       	push	r10
    4b10:	bf 92       	push	r11
    4b12:	cf 92       	push	r12
    4b14:	df 92       	push	r13
    4b16:	ef 92       	push	r14
    4b18:	ff 92       	push	r15
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
    4b1e:	cf 93       	push	r28
    4b20:	df 93       	push	r29
    4b22:	cd b7       	in	r28, 0x3d	; 61
    4b24:	de b7       	in	r29, 0x3e	; 62
    4b26:	60 97       	sbiw	r28, 0x10	; 16
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	f8 94       	cli
    4b2c:	de bf       	out	0x3e, r29	; 62
    4b2e:	0f be       	out	0x3f, r0	; 63
    4b30:	cd bf       	out	0x3d, r28	; 61
    4b32:	fc 01       	movw	r30, r24
    4b34:	09 83       	std	Y+1, r16	; 0x01
    4b36:	1a 83       	std	Y+2, r17	; 0x02
    4b38:	2b 83       	std	Y+3, r18	; 0x03
    4b3a:	3c 83       	std	Y+4, r19	; 0x04
    4b3c:	4d 83       	std	Y+5, r20	; 0x05
    4b3e:	5e 83       	std	Y+6, r21	; 0x06
    4b40:	6f 83       	std	Y+7, r22	; 0x07
    4b42:	78 87       	std	Y+8, r23	; 0x08
    4b44:	89 86       	std	Y+9, r8	; 0x09
    4b46:	9a 86       	std	Y+10, r9	; 0x0a
    4b48:	ab 86       	std	Y+11, r10	; 0x0b
    4b4a:	bc 86       	std	Y+12, r11	; 0x0c
    4b4c:	cd 86       	std	Y+13, r12	; 0x0d
    4b4e:	de 86       	std	Y+14, r13	; 0x0e
    4b50:	ef 86       	std	Y+15, r14	; 0x0f
    4b52:	f8 8a       	std	Y+16, r15	; 0x10
    4b54:	09 81       	ldd	r16, Y+1	; 0x01
    4b56:	1a 81       	ldd	r17, Y+2	; 0x02
    4b58:	2b 81       	ldd	r18, Y+3	; 0x03
    4b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    4b5c:	4d 81       	ldd	r20, Y+5	; 0x05
    4b5e:	5e 81       	ldd	r21, Y+6	; 0x06
    4b60:	6f 81       	ldd	r22, Y+7	; 0x07
    4b62:	78 85       	ldd	r23, Y+8	; 0x08
    4b64:	c9 84       	ldd	r12, Y+9	; 0x09
    4b66:	da 84       	ldd	r13, Y+10	; 0x0a
    4b68:	eb 84       	ldd	r14, Y+11	; 0x0b
    4b6a:	fc 84       	ldd	r15, Y+12	; 0x0c
    4b6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b70:	af 85       	ldd	r26, Y+15	; 0x0f
    4b72:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    4b74:	0c 15       	cp	r16, r12
    4b76:	1d 05       	cpc	r17, r13
    4b78:	2e 05       	cpc	r18, r14
    4b7a:	3f 05       	cpc	r19, r15
    4b7c:	f0 f1       	brcs	.+124    	; 0x4bfa <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    4b7e:	c0 16       	cp	r12, r16
    4b80:	d1 06       	cpc	r13, r17
    4b82:	e2 06       	cpc	r14, r18
    4b84:	f3 06       	cpc	r15, r19
    4b86:	91 f4       	brne	.+36     	; 0x4bac <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    4b88:	48 17       	cp	r20, r24
    4b8a:	59 07       	cpc	r21, r25
    4b8c:	6a 07       	cpc	r22, r26
    4b8e:	7b 07       	cpc	r23, r27
    4b90:	a0 f1       	brcs	.+104    	; 0x4bfa <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    4b92:	48 1b       	sub	r20, r24
    4b94:	59 0b       	sbc	r21, r25
    4b96:	6a 0b       	sbc	r22, r26
    4b98:	7b 0b       	sbc	r23, r27
    4b9a:	44 83       	std	Z+4, r20	; 0x04
    4b9c:	55 83       	std	Z+5, r21	; 0x05
    4b9e:	66 83       	std	Z+6, r22	; 0x06
    4ba0:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    4ba2:	10 82       	st	Z, r1
    4ba4:	11 82       	std	Z+1, r1	; 0x01
    4ba6:	12 82       	std	Z+2, r1	; 0x02
    4ba8:	13 82       	std	Z+3, r1	; 0x03
    4baa:	25 c0       	rjmp	.+74     	; 0x4bf6 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    4bac:	48 17       	cp	r20, r24
    4bae:	59 07       	cpc	r21, r25
    4bb0:	6a 07       	cpc	r22, r26
    4bb2:	7b 07       	cpc	r23, r27
    4bb4:	80 f4       	brcc	.+32     	; 0x4bd6 <nrk_time_sub+0xcc>
{
	high.secs--;
    4bb6:	01 50       	subi	r16, 0x01	; 1
    4bb8:	11 09       	sbc	r17, r1
    4bba:	21 09       	sbc	r18, r1
    4bbc:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    4bbe:	0c 19       	sub	r16, r12
    4bc0:	1d 09       	sbc	r17, r13
    4bc2:	2e 09       	sbc	r18, r14
    4bc4:	3f 09       	sbc	r19, r15
    4bc6:	00 83       	st	Z, r16
    4bc8:	11 83       	std	Z+1, r17	; 0x01
    4bca:	22 83       	std	Z+2, r18	; 0x02
    4bcc:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    4bce:	56 53       	subi	r21, 0x36	; 54
    4bd0:	65 46       	sbci	r22, 0x65	; 101
    4bd2:	74 4c       	sbci	r23, 0xC4	; 196
    4bd4:	08 c0       	rjmp	.+16     	; 0x4be6 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    4bd6:	0c 19       	sub	r16, r12
    4bd8:	1d 09       	sbc	r17, r13
    4bda:	2e 09       	sbc	r18, r14
    4bdc:	3f 09       	sbc	r19, r15
    4bde:	00 83       	st	Z, r16
    4be0:	11 83       	std	Z+1, r17	; 0x01
    4be2:	22 83       	std	Z+2, r18	; 0x02
    4be4:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4be6:	48 1b       	sub	r20, r24
    4be8:	59 0b       	sbc	r21, r25
    4bea:	6a 0b       	sbc	r22, r26
    4bec:	7b 0b       	sbc	r23, r27
    4bee:	44 83       	std	Z+4, r20	; 0x04
    4bf0:	55 83       	std	Z+5, r21	; 0x05
    4bf2:	66 83       	std	Z+6, r22	; 0x06
    4bf4:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	01 c0       	rjmp	.+2      	; 0x4bfc <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    4bfa:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    4bfc:	60 96       	adiw	r28, 0x10	; 16
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	de bf       	out	0x3e, r29	; 62
    4c04:	0f be       	out	0x3f, r0	; 63
    4c06:	cd bf       	out	0x3d, r28	; 61
    4c08:	df 91       	pop	r29
    4c0a:	cf 91       	pop	r28
    4c0c:	1f 91       	pop	r17
    4c0e:	0f 91       	pop	r16
    4c10:	ff 90       	pop	r15
    4c12:	ef 90       	pop	r14
    4c14:	df 90       	pop	r13
    4c16:	cf 90       	pop	r12
    4c18:	bf 90       	pop	r11
    4c1a:	af 90       	pop	r10
    4c1c:	9f 90       	pop	r9
    4c1e:	8f 90       	pop	r8
    4c20:	08 95       	ret

00004c22 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4c22:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4c24:	44 81       	ldd	r20, Z+4	; 0x04
    4c26:	55 81       	ldd	r21, Z+5	; 0x05
    4c28:	66 81       	ldd	r22, Z+6	; 0x06
    4c2a:	77 81       	ldd	r23, Z+7	; 0x07
    4c2c:	41 15       	cp	r20, r1
    4c2e:	8a ec       	ldi	r24, 0xCA	; 202
    4c30:	58 07       	cpc	r21, r24
    4c32:	8a e9       	ldi	r24, 0x9A	; 154
    4c34:	68 07       	cpc	r22, r24
    4c36:	8b e3       	ldi	r24, 0x3B	; 59
    4c38:	78 07       	cpc	r23, r24
    4c3a:	98 f0       	brcs	.+38     	; 0x4c62 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    4c3c:	5a 5c       	subi	r21, 0xCA	; 202
    4c3e:	6a 49       	sbci	r22, 0x9A	; 154
    4c40:	7b 43       	sbci	r23, 0x3B	; 59
    4c42:	44 83       	std	Z+4, r20	; 0x04
    4c44:	55 83       	std	Z+5, r21	; 0x05
    4c46:	66 83       	std	Z+6, r22	; 0x06
    4c48:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    4c4a:	80 81       	ld	r24, Z
    4c4c:	91 81       	ldd	r25, Z+1	; 0x01
    4c4e:	a2 81       	ldd	r26, Z+2	; 0x02
    4c50:	b3 81       	ldd	r27, Z+3	; 0x03
    4c52:	01 96       	adiw	r24, 0x01	; 1
    4c54:	a1 1d       	adc	r26, r1
    4c56:	b1 1d       	adc	r27, r1
    4c58:	80 83       	st	Z, r24
    4c5a:	91 83       	std	Z+1, r25	; 0x01
    4c5c:	a2 83       	std	Z+2, r26	; 0x02
    4c5e:	b3 83       	std	Z+3, r27	; 0x03
    4c60:	e1 cf       	rjmp	.-62     	; 0x4c24 <nrk_time_compact_nanos+0x2>
    }
}
    4c62:	08 95       	ret

00004c64 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4c64:	8f 92       	push	r8
    4c66:	9f 92       	push	r9
    4c68:	af 92       	push	r10
    4c6a:	bf 92       	push	r11
    4c6c:	cf 92       	push	r12
    4c6e:	df 92       	push	r13
    4c70:	ef 92       	push	r14
    4c72:	ff 92       	push	r15
    4c74:	0f 93       	push	r16
    4c76:	1f 93       	push	r17
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	cd b7       	in	r28, 0x3d	; 61
    4c7e:	de b7       	in	r29, 0x3e	; 62
    4c80:	60 97       	sbiw	r28, 0x10	; 16
    4c82:	0f b6       	in	r0, 0x3f	; 63
    4c84:	f8 94       	cli
    4c86:	de bf       	out	0x3e, r29	; 62
    4c88:	0f be       	out	0x3f, r0	; 63
    4c8a:	cd bf       	out	0x3d, r28	; 61
    4c8c:	09 83       	std	Y+1, r16	; 0x01
    4c8e:	1a 83       	std	Y+2, r17	; 0x02
    4c90:	2b 83       	std	Y+3, r18	; 0x03
    4c92:	3c 83       	std	Y+4, r19	; 0x04
    4c94:	4d 83       	std	Y+5, r20	; 0x05
    4c96:	5e 83       	std	Y+6, r21	; 0x06
    4c98:	6f 83       	std	Y+7, r22	; 0x07
    4c9a:	78 87       	std	Y+8, r23	; 0x08
    4c9c:	89 86       	std	Y+9, r8	; 0x09
    4c9e:	9a 86       	std	Y+10, r9	; 0x0a
    4ca0:	ab 86       	std	Y+11, r10	; 0x0b
    4ca2:	bc 86       	std	Y+12, r11	; 0x0c
    4ca4:	cd 86       	std	Y+13, r12	; 0x0d
    4ca6:	de 86       	std	Y+14, r13	; 0x0e
    4ca8:	ef 86       	std	Y+15, r14	; 0x0f
    4caa:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    4cac:	09 85       	ldd	r16, Y+9	; 0x09
    4cae:	1a 85       	ldd	r17, Y+10	; 0x0a
    4cb0:	2b 85       	ldd	r18, Y+11	; 0x0b
    4cb2:	3c 85       	ldd	r19, Y+12	; 0x0c
    4cb4:	49 81       	ldd	r20, Y+1	; 0x01
    4cb6:	5a 81       	ldd	r21, Y+2	; 0x02
    4cb8:	6b 81       	ldd	r22, Y+3	; 0x03
    4cba:	7c 81       	ldd	r23, Y+4	; 0x04
    4cbc:	40 0f       	add	r20, r16
    4cbe:	51 1f       	adc	r21, r17
    4cc0:	62 1f       	adc	r22, r18
    4cc2:	73 1f       	adc	r23, r19
    4cc4:	fc 01       	movw	r30, r24
    4cc6:	40 83       	st	Z, r20
    4cc8:	51 83       	std	Z+1, r21	; 0x01
    4cca:	62 83       	std	Z+2, r22	; 0x02
    4ccc:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4cce:	0d 85       	ldd	r16, Y+13	; 0x0d
    4cd0:	1e 85       	ldd	r17, Y+14	; 0x0e
    4cd2:	2f 85       	ldd	r18, Y+15	; 0x0f
    4cd4:	38 89       	ldd	r19, Y+16	; 0x10
    4cd6:	4d 81       	ldd	r20, Y+5	; 0x05
    4cd8:	5e 81       	ldd	r21, Y+6	; 0x06
    4cda:	6f 81       	ldd	r22, Y+7	; 0x07
    4cdc:	78 85       	ldd	r23, Y+8	; 0x08
    4cde:	40 0f       	add	r20, r16
    4ce0:	51 1f       	adc	r21, r17
    4ce2:	62 1f       	adc	r22, r18
    4ce4:	73 1f       	adc	r23, r19
    4ce6:	44 83       	std	Z+4, r20	; 0x04
    4ce8:	55 83       	std	Z+5, r21	; 0x05
    4cea:	66 83       	std	Z+6, r22	; 0x06
    4cec:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    4cee:	0e 94 11 26 	call	0x4c22	; 0x4c22 <nrk_time_compact_nanos>
return NRK_OK;
}
    4cf2:	81 e0       	ldi	r24, 0x01	; 1
    4cf4:	60 96       	adiw	r28, 0x10	; 16
    4cf6:	0f b6       	in	r0, 0x3f	; 63
    4cf8:	f8 94       	cli
    4cfa:	de bf       	out	0x3e, r29	; 62
    4cfc:	0f be       	out	0x3f, r0	; 63
    4cfe:	cd bf       	out	0x3d, r28	; 61
    4d00:	df 91       	pop	r29
    4d02:	cf 91       	pop	r28
    4d04:	1f 91       	pop	r17
    4d06:	0f 91       	pop	r16
    4d08:	ff 90       	pop	r15
    4d0a:	ef 90       	pop	r14
    4d0c:	df 90       	pop	r13
    4d0e:	cf 90       	pop	r12
    4d10:	bf 90       	pop	r11
    4d12:	af 90       	pop	r10
    4d14:	9f 90       	pop	r9
    4d16:	8f 90       	pop	r8
    4d18:	08 95       	ret

00004d1a <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    4d1a:	e5 ec       	ldi	r30, 0xC5	; 197
    4d1c:	f7 e1       	ldi	r31, 0x17	; 23
    4d1e:	60 83       	st	Z, r22
    4d20:	71 83       	std	Z+1, r23	; 0x01
    4d22:	82 83       	std	Z+2, r24	; 0x02
    4d24:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    4d26:	24 83       	std	Z+4, r18	; 0x04
    4d28:	35 83       	std	Z+5, r19	; 0x05
    4d2a:	46 83       	std	Z+6, r20	; 0x06
    4d2c:	57 83       	std	Z+7, r21	; 0x07
    4d2e:	08 95       	ret

00004d30 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    4d30:	2f 92       	push	r2
    4d32:	3f 92       	push	r3
    4d34:	4f 92       	push	r4
    4d36:	5f 92       	push	r5
    4d38:	6f 92       	push	r6
    4d3a:	7f 92       	push	r7
    4d3c:	8f 92       	push	r8
    4d3e:	9f 92       	push	r9
    4d40:	af 92       	push	r10
    4d42:	bf 92       	push	r11
    4d44:	cf 92       	push	r12
    4d46:	df 92       	push	r13
    4d48:	ef 92       	push	r14
    4d4a:	ff 92       	push	r15
    4d4c:	0f 93       	push	r16
    4d4e:	1f 93       	push	r17
    4d50:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4d52:	c0 80       	ld	r12, Z
    4d54:	d1 80       	ldd	r13, Z+1	; 0x01
    4d56:	e2 80       	ldd	r14, Z+2	; 0x02
    4d58:	f3 80       	ldd	r15, Z+3	; 0x03
    4d5a:	c1 14       	cp	r12, r1
    4d5c:	d1 04       	cpc	r13, r1
    4d5e:	e1 04       	cpc	r14, r1
    4d60:	f1 04       	cpc	r15, r1
    4d62:	e1 f1       	breq	.+120    	; 0x4ddc <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    4d64:	84 81       	ldd	r24, Z+4	; 0x04
    4d66:	95 81       	ldd	r25, Z+5	; 0x05
    4d68:	a6 81       	ldd	r26, Z+6	; 0x06
    4d6a:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    4d6c:	22 e4       	ldi	r18, 0x42	; 66
    4d6e:	c2 16       	cp	r12, r18
    4d70:	d1 04       	cpc	r13, r1
    4d72:	e1 04       	cpc	r14, r1
    4d74:	f1 04       	cpc	r15, r1
    4d76:	f0 f5       	brcc	.+124    	; 0x4df4 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    4d78:	1c 01       	movw	r2, r24
    4d7a:	2d 01       	movw	r4, r26
    4d7c:	61 2c       	mov	r6, r1
    4d7e:	71 2c       	mov	r7, r1
    4d80:	43 01       	movw	r8, r6
    4d82:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4d84:	8e 2f       	mov	r24, r30
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	a0 e0       	ldi	r26, 0x00	; 0
    4d8a:	b0 e0       	ldi	r27, 0x00	; 0
    4d8c:	8c 15       	cp	r24, r12
    4d8e:	9d 05       	cpc	r25, r13
    4d90:	ae 05       	cpc	r26, r14
    4d92:	bf 05       	cpc	r27, r15
    4d94:	88 f4       	brcc	.+34     	; 0x4db8 <_nrk_time_to_ticks+0x88>
    4d96:	91 01       	movw	r18, r2
    4d98:	a2 01       	movw	r20, r4
    4d9a:	b3 01       	movw	r22, r6
    4d9c:	c4 01       	movw	r24, r8
    4d9e:	36 53       	subi	r19, 0x36	; 54
    4da0:	45 46       	sbci	r20, 0x65	; 101
    4da2:	54 4c       	sbci	r21, 0xC4	; 196
    4da4:	6f 4f       	sbci	r22, 0xFF	; 255
    4da6:	7f 4f       	sbci	r23, 0xFF	; 255
    4da8:	8f 4f       	sbci	r24, 0xFF	; 255
    4daa:	9f 4f       	sbci	r25, 0xFF	; 255
    4dac:	19 01       	movw	r2, r18
    4dae:	2a 01       	movw	r4, r20
    4db0:	3b 01       	movw	r6, r22
    4db2:	4c 01       	movw	r8, r24
    4db4:	ef 5f       	subi	r30, 0xFF	; 255
    4db6:	e6 cf       	rjmp	.-52     	; 0x4d84 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4db8:	83 eb       	ldi	r24, 0xB3	; 179
    4dba:	a8 2e       	mov	r10, r24
    4dbc:	96 ee       	ldi	r25, 0xE6	; 230
    4dbe:	b9 2e       	mov	r11, r25
    4dc0:	2e e0       	ldi	r18, 0x0E	; 14
    4dc2:	c2 2e       	mov	r12, r18
    4dc4:	d1 2c       	mov	r13, r1
    4dc6:	e1 2c       	mov	r14, r1
    4dc8:	f1 2c       	mov	r15, r1
    4dca:	00 e0       	ldi	r16, 0x00	; 0
    4dcc:	10 e0       	ldi	r17, 0x00	; 0
    4dce:	91 01       	movw	r18, r2
    4dd0:	a2 01       	movw	r20, r4
    4dd2:	b3 01       	movw	r22, r6
    4dd4:	c4 01       	movw	r24, r8
    4dd6:	0e 94 2e 31 	call	0x625c	; 0x625c <__udivdi3>
    4dda:	0a c0       	rjmp	.+20     	; 0x4df0 <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4ddc:	64 81       	ldd	r22, Z+4	; 0x04
    4dde:	75 81       	ldd	r23, Z+5	; 0x05
    4de0:	86 81       	ldd	r24, Z+6	; 0x06
    4de2:	97 81       	ldd	r25, Z+7	; 0x07
    4de4:	23 eb       	ldi	r18, 0xB3	; 179
    4de6:	36 ee       	ldi	r19, 0xE6	; 230
    4de8:	4e e0       	ldi	r20, 0x0E	; 14
    4dea:	50 e0       	ldi	r21, 0x00	; 0
    4dec:	0e 94 0a 31 	call	0x6214	; 0x6214 <__udivmodsi4>
    4df0:	c9 01       	movw	r24, r18
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4df4:	80 e0       	ldi	r24, 0x00	; 0
    4df6:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4df8:	1f 91       	pop	r17
    4dfa:	0f 91       	pop	r16
    4dfc:	ff 90       	pop	r15
    4dfe:	ef 90       	pop	r14
    4e00:	df 90       	pop	r13
    4e02:	cf 90       	pop	r12
    4e04:	bf 90       	pop	r11
    4e06:	af 90       	pop	r10
    4e08:	9f 90       	pop	r9
    4e0a:	8f 90       	pop	r8
    4e0c:	7f 90       	pop	r7
    4e0e:	6f 90       	pop	r6
    4e10:	5f 90       	pop	r5
    4e12:	4f 90       	pop	r4
    4e14:	3f 90       	pop	r3
    4e16:	2f 90       	pop	r2
    4e18:	08 95       	ret

00004e1a <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4e1a:	cf 92       	push	r12
    4e1c:	df 92       	push	r13
    4e1e:	ef 92       	push	r14
    4e20:	ff 92       	push	r15
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
    4e26:	cd b7       	in	r28, 0x3d	; 61
    4e28:	de b7       	in	r29, 0x3e	; 62
    4e2a:	28 97       	sbiw	r28, 0x08	; 8
    4e2c:	0f b6       	in	r0, 0x3f	; 63
    4e2e:	f8 94       	cli
    4e30:	de bf       	out	0x3e, r29	; 62
    4e32:	0f be       	out	0x3f, r0	; 63
    4e34:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4e36:	6b 01       	movw	r12, r22
    4e38:	7c 01       	movw	r14, r24
    4e3a:	2a e0       	ldi	r18, 0x0A	; 10
    4e3c:	f6 94       	lsr	r15
    4e3e:	e7 94       	ror	r14
    4e40:	d7 94       	ror	r13
    4e42:	c7 94       	ror	r12
    4e44:	2a 95       	dec	r18
    4e46:	d1 f7       	brne	.-12     	; 0x4e3c <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    4e48:	c9 82       	std	Y+1, r12	; 0x01
    4e4a:	da 82       	std	Y+2, r13	; 0x02
    4e4c:	eb 82       	std	Y+3, r14	; 0x03
    4e4e:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    4e50:	9b 01       	movw	r18, r22
    4e52:	ac 01       	movw	r20, r24
    4e54:	33 70       	andi	r19, 0x03	; 3
    4e56:	44 27       	eor	r20, r20
    4e58:	55 27       	eor	r21, r21
    4e5a:	63 eb       	ldi	r22, 0xB3	; 179
    4e5c:	76 ee       	ldi	r23, 0xE6	; 230
    4e5e:	8e e0       	ldi	r24, 0x0E	; 14
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__mulsi3>

return t;
    4e66:	2c 2d       	mov	r18, r12
    4e68:	3a 81       	ldd	r19, Y+2	; 0x02
    4e6a:	4b 81       	ldd	r20, Y+3	; 0x03
    4e6c:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4e6e:	28 96       	adiw	r28, 0x08	; 8
    4e70:	0f b6       	in	r0, 0x3f	; 63
    4e72:	f8 94       	cli
    4e74:	de bf       	out	0x3e, r29	; 62
    4e76:	0f be       	out	0x3f, r0	; 63
    4e78:	cd bf       	out	0x3d, r28	; 61
    4e7a:	df 91       	pop	r29
    4e7c:	cf 91       	pop	r28
    4e7e:	ff 90       	pop	r15
    4e80:	ef 90       	pop	r14
    4e82:	df 90       	pop	r13
    4e84:	cf 90       	pop	r12
    4e86:	08 95       	ret

00004e88 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    4e88:	2f 92       	push	r2
    4e8a:	3f 92       	push	r3
    4e8c:	4f 92       	push	r4
    4e8e:	5f 92       	push	r5
    4e90:	6f 92       	push	r6
    4e92:	7f 92       	push	r7
    4e94:	8f 92       	push	r8
    4e96:	9f 92       	push	r9
    4e98:	af 92       	push	r10
    4e9a:	bf 92       	push	r11
    4e9c:	cf 92       	push	r12
    4e9e:	df 92       	push	r13
    4ea0:	ef 92       	push	r14
    4ea2:	ff 92       	push	r15
    4ea4:	0f 93       	push	r16
    4ea6:	1f 93       	push	r17
    4ea8:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4eaa:	c0 80       	ld	r12, Z
    4eac:	d1 80       	ldd	r13, Z+1	; 0x01
    4eae:	e2 80       	ldd	r14, Z+2	; 0x02
    4eb0:	f3 80       	ldd	r15, Z+3	; 0x03
    4eb2:	c1 14       	cp	r12, r1
    4eb4:	d1 04       	cpc	r13, r1
    4eb6:	e1 04       	cpc	r14, r1
    4eb8:	f1 04       	cpc	r15, r1
    4eba:	b9 f1       	breq	.+110    	; 0x4f2a <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4ebc:	84 81       	ldd	r24, Z+4	; 0x04
    4ebe:	95 81       	ldd	r25, Z+5	; 0x05
    4ec0:	a6 81       	ldd	r26, Z+6	; 0x06
    4ec2:	b7 81       	ldd	r27, Z+7	; 0x07
    4ec4:	1c 01       	movw	r2, r24
    4ec6:	2d 01       	movw	r4, r26
    4ec8:	61 2c       	mov	r6, r1
    4eca:	71 2c       	mov	r7, r1
    4ecc:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4ece:	e0 e0       	ldi	r30, 0x00	; 0
    4ed0:	8e 2f       	mov	r24, r30
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	a0 e0       	ldi	r26, 0x00	; 0
    4ed6:	b0 e0       	ldi	r27, 0x00	; 0
    4ed8:	8c 15       	cp	r24, r12
    4eda:	9d 05       	cpc	r25, r13
    4edc:	ae 05       	cpc	r26, r14
    4ede:	bf 05       	cpc	r27, r15
    4ee0:	88 f4       	brcc	.+34     	; 0x4f04 <_nrk_time_to_ticks_long+0x7c>
    4ee2:	91 01       	movw	r18, r2
    4ee4:	a2 01       	movw	r20, r4
    4ee6:	b3 01       	movw	r22, r6
    4ee8:	c4 01       	movw	r24, r8
    4eea:	36 53       	subi	r19, 0x36	; 54
    4eec:	45 46       	sbci	r20, 0x65	; 101
    4eee:	54 4c       	sbci	r21, 0xC4	; 196
    4ef0:	6f 4f       	sbci	r22, 0xFF	; 255
    4ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ef8:	19 01       	movw	r2, r18
    4efa:	2a 01       	movw	r4, r20
    4efc:	3b 01       	movw	r6, r22
    4efe:	4c 01       	movw	r8, r24
    4f00:	ef 5f       	subi	r30, 0xFF	; 255
    4f02:	e6 cf       	rjmp	.-52     	; 0x4ed0 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4f04:	83 eb       	ldi	r24, 0xB3	; 179
    4f06:	a8 2e       	mov	r10, r24
    4f08:	96 ee       	ldi	r25, 0xE6	; 230
    4f0a:	b9 2e       	mov	r11, r25
    4f0c:	2e e0       	ldi	r18, 0x0E	; 14
    4f0e:	c2 2e       	mov	r12, r18
    4f10:	d1 2c       	mov	r13, r1
    4f12:	e1 2c       	mov	r14, r1
    4f14:	f1 2c       	mov	r15, r1
    4f16:	00 e0       	ldi	r16, 0x00	; 0
    4f18:	10 e0       	ldi	r17, 0x00	; 0
    4f1a:	91 01       	movw	r18, r2
    4f1c:	a2 01       	movw	r20, r4
    4f1e:	b3 01       	movw	r22, r6
    4f20:	c4 01       	movw	r24, r8
    4f22:	0e 94 2e 31 	call	0x625c	; 0x625c <__udivdi3>
    4f26:	ca 01       	movw	r24, r20
    4f28:	0b c0       	rjmp	.+22     	; 0x4f40 <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4f2a:	64 81       	ldd	r22, Z+4	; 0x04
    4f2c:	75 81       	ldd	r23, Z+5	; 0x05
    4f2e:	86 81       	ldd	r24, Z+6	; 0x06
    4f30:	97 81       	ldd	r25, Z+7	; 0x07
    4f32:	23 eb       	ldi	r18, 0xB3	; 179
    4f34:	36 ee       	ldi	r19, 0xE6	; 230
    4f36:	4e e0       	ldi	r20, 0x0E	; 14
    4f38:	50 e0       	ldi	r21, 0x00	; 0
    4f3a:	0e 94 0a 31 	call	0x6214	; 0x6214 <__udivmodsi4>
    4f3e:	ca 01       	movw	r24, r20
}
return ticks;
}
    4f40:	b9 01       	movw	r22, r18
    4f42:	1f 91       	pop	r17
    4f44:	0f 91       	pop	r16
    4f46:	ff 90       	pop	r15
    4f48:	ef 90       	pop	r14
    4f4a:	df 90       	pop	r13
    4f4c:	cf 90       	pop	r12
    4f4e:	bf 90       	pop	r11
    4f50:	af 90       	pop	r10
    4f52:	9f 90       	pop	r9
    4f54:	8f 90       	pop	r8
    4f56:	7f 90       	pop	r7
    4f58:	6f 90       	pop	r6
    4f5a:	5f 90       	pop	r5
    4f5c:	4f 90       	pop	r4
    4f5e:	3f 90       	pop	r3
    4f60:	2f 90       	pop	r2
    4f62:	08 95       	ret

00004f64 <nrk_idle_task>:

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4f64:	c1 e0       	ldi	r28, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4f66:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4f6a:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <_nrk_get_next_wakeup>
    4f6e:	84 30       	cpi	r24, 0x04	; 4
    4f70:	10 f4       	brcc	.+4      	; 0x4f76 <nrk_idle_task+0x12>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4f72:	c0 93 c2 17 	sts	0x17C2, r28
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    4f76:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4f7a:	80 91 ee 13 	lds	r24, 0x13EE
    4f7e:	85 35       	cpi	r24, 0x55	; 85
    4f80:	19 f0       	breq	.+6      	; 0x4f88 <nrk_idle_task+0x24>
    4f82:	88 e0       	ldi	r24, 0x08	; 8
    4f84:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4f88:	80 91 fe 3f 	lds	r24, 0x3FFE
    4f8c:	85 35       	cpi	r24, 0x55	; 85
    4f8e:	59 f3       	breq	.-42     	; 0x4f66 <nrk_idle_task+0x2>
    4f90:	88 e0       	ldi	r24, 0x08	; 8
    4f92:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_error_add>
    4f96:	e7 cf       	rjmp	.-50     	; 0x4f66 <nrk_idle_task+0x2>

00004f98 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4f98:	2f 92       	push	r2
    4f9a:	3f 92       	push	r3
    4f9c:	4f 92       	push	r4
    4f9e:	5f 92       	push	r5
    4fa0:	6f 92       	push	r6
    4fa2:	7f 92       	push	r7
    4fa4:	8f 92       	push	r8
    4fa6:	9f 92       	push	r9
    4fa8:	af 92       	push	r10
    4faa:	bf 92       	push	r11
    4fac:	cf 92       	push	r12
    4fae:	df 92       	push	r13
    4fb0:	ef 92       	push	r14
    4fb2:	ff 92       	push	r15
    4fb4:	0f 93       	push	r16
    4fb6:	1f 93       	push	r17
    4fb8:	cf 93       	push	r28
    4fba:	df 93       	push	r29
    4fbc:	00 d0       	rcall	.+0      	; 0x4fbe <_nrk_scheduler+0x26>
    4fbe:	1f 92       	push	r1
    4fc0:	cd b7       	in	r28, 0x3d	; 61
    4fc2:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4fc4:	0e 94 8d 2a 	call	0x551a	; 0x551a <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4fc8:	0e 94 ac 1a 	call	0x3558	; 0x3558 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    4fcc:	0e 94 ab 2a 	call	0x5556	; 0x5556 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4fd0:	0e 94 b3 2a 	call	0x5566	; 0x5566 <_nrk_high_speed_timer_get>
    4fd4:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4fd6:	8a ef       	ldi	r24, 0xFA	; 250
    4fd8:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4fdc:	a0 91 f5 15 	lds	r26, 0x15F5
    4fe0:	b0 e0       	ldi	r27, 0x00	; 0
    4fe2:	23 eb       	ldi	r18, 0xB3	; 179
    4fe4:	36 ee       	ldi	r19, 0xE6	; 230
    4fe6:	4e e0       	ldi	r20, 0x0E	; 14
    4fe8:	50 e0       	ldi	r21, 0x00	; 0
    4fea:	0e 94 c7 30 	call	0x618e	; 0x618e <__muluhisi3>
    4fee:	00 91 c9 17 	lds	r16, 0x17C9
    4ff2:	10 91 ca 17 	lds	r17, 0x17CA
    4ff6:	20 91 cb 17 	lds	r18, 0x17CB
    4ffa:	30 91 cc 17 	lds	r19, 0x17CC
    4ffe:	6b 01       	movw	r12, r22
    5000:	7c 01       	movw	r14, r24
    5002:	c0 0e       	add	r12, r16
    5004:	d1 1e       	adc	r13, r17
    5006:	e2 1e       	adc	r14, r18
    5008:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    500a:	c7 01       	movw	r24, r14
    500c:	b6 01       	movw	r22, r12
    500e:	23 eb       	ldi	r18, 0xB3	; 179
    5010:	36 ee       	ldi	r19, 0xE6	; 230
    5012:	4e e0       	ldi	r20, 0x0E	; 14
    5014:	50 e0       	ldi	r21, 0x00	; 0
    5016:	0e 94 0a 31 	call	0x6214	; 0x6214 <__udivmodsi4>
    501a:	26 01       	movw	r4, r12
    501c:	37 01       	movw	r6, r14
    501e:	46 1a       	sub	r4, r22
    5020:	57 0a       	sbc	r5, r23
    5022:	68 0a       	sbc	r6, r24
    5024:	79 0a       	sbc	r7, r25
    5026:	d3 01       	movw	r26, r6
    5028:	c2 01       	movw	r24, r4
    502a:	00 91 c5 17 	lds	r16, 0x17C5
    502e:	10 91 c6 17 	lds	r17, 0x17C6
    5032:	20 91 c7 17 	lds	r18, 0x17C7
    5036:	30 91 c8 17 	lds	r19, 0x17C8

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    503a:	43 eb       	ldi	r20, 0xB3	; 179
    503c:	84 2e       	mov	r8, r20
    503e:	46 ee       	ldi	r20, 0xE6	; 230
    5040:	94 2e       	mov	r9, r20
    5042:	4e e0       	ldi	r20, 0x0E	; 14
    5044:	a4 2e       	mov	r10, r20
    5046:	b1 2c       	mov	r11, r1
    5048:	68 01       	movw	r12, r16
    504a:	79 01       	movw	r14, r18
    504c:	4f ef       	ldi	r20, 0xFF	; 255
    504e:	c4 1a       	sub	r12, r20
    5050:	d4 0a       	sbc	r13, r20
    5052:	e4 0a       	sbc	r14, r20
    5054:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    5056:	81 15       	cp	r24, r1
    5058:	5a ec       	ldi	r21, 0xCA	; 202
    505a:	95 07       	cpc	r25, r21
    505c:	5a e9       	ldi	r21, 0x9A	; 154
    505e:	a5 07       	cpc	r26, r21
    5060:	5b e3       	ldi	r21, 0x3B	; 59
    5062:	b5 07       	cpc	r27, r21
    5064:	c8 f0       	brcs	.+50     	; 0x5098 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    5066:	2c 01       	movw	r4, r24
    5068:	3d 01       	movw	r6, r26
    506a:	2a ec       	ldi	r18, 0xCA	; 202
    506c:	52 1a       	sub	r5, r18
    506e:	2a e9       	ldi	r18, 0x9A	; 154
    5070:	62 0a       	sbc	r6, r18
    5072:	2b e3       	ldi	r18, 0x3B	; 59
    5074:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5076:	c3 01       	movw	r24, r6
    5078:	b2 01       	movw	r22, r4
    507a:	a5 01       	movw	r20, r10
    507c:	94 01       	movw	r18, r8
    507e:	0e 94 0a 31 	call	0x6214	; 0x6214 <__udivmodsi4>
    5082:	a3 01       	movw	r20, r6
    5084:	92 01       	movw	r18, r4
    5086:	26 1b       	sub	r18, r22
    5088:	37 0b       	sbc	r19, r23
    508a:	48 0b       	sbc	r20, r24
    508c:	59 0b       	sbc	r21, r25
    508e:	da 01       	movw	r26, r20
    5090:	c9 01       	movw	r24, r18
    5092:	97 01       	movw	r18, r14
    5094:	86 01       	movw	r16, r12
    5096:	d8 cf       	rjmp	.-80     	; 0x5048 <_nrk_scheduler+0xb0>
    5098:	80 93 c9 17 	sts	0x17C9, r24
    509c:	90 93 ca 17 	sts	0x17CA, r25
    50a0:	a0 93 cb 17 	sts	0x17CB, r26
    50a4:	b0 93 cc 17 	sts	0x17CC, r27
    50a8:	00 93 c5 17 	sts	0x17C5, r16
    50ac:	10 93 c6 17 	sts	0x17C6, r17
    50b0:	20 93 c7 17 	sts	0x17C7, r18
    50b4:	30 93 c8 17 	sts	0x17C8, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    50b8:	e0 91 ce 17 	lds	r30, 0x17CE
    50bc:	f0 91 cf 17 	lds	r31, 0x17CF
    50c0:	85 81       	ldd	r24, Z+5	; 0x05
    50c2:	88 23       	and	r24, r24
    50c4:	39 f1       	breq	.+78     	; 0x5114 <_nrk_scheduler+0x17c>
    50c6:	81 85       	ldd	r24, Z+9	; 0x09
    50c8:	84 30       	cpi	r24, 0x04	; 4
    50ca:	21 f1       	breq	.+72     	; 0x5114 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    50cc:	87 81       	ldd	r24, Z+7	; 0x07
    50ce:	82 30       	cpi	r24, 0x02	; 2
    50d0:	29 f0       	breq	.+10     	; 0x50dc <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    50d2:	88 23       	and	r24, r24
    50d4:	41 f0       	breq	.+16     	; 0x50e6 <_nrk_scheduler+0x14e>
    50d6:	86 81       	ldd	r24, Z+6	; 0x06
    50d8:	81 11       	cpse	r24, r1
    50da:	02 c0       	rjmp	.+4      	; 0x50e0 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    50dc:	85 e0       	ldi	r24, 0x05	; 5
    50de:	01 c0       	rjmp	.+2      	; 0x50e2 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    50e0:	83 e0       	ldi	r24, 0x03	; 3
    50e2:	81 87       	std	Z+9, r24	; 0x09
    50e4:	14 c0       	rjmp	.+40     	; 0x510e <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    50e6:	83 e0       	ldi	r24, 0x03	; 3
    50e8:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    50ea:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    50ec:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    50ee:	85 89       	ldd	r24, Z+21	; 0x15
    50f0:	96 89       	ldd	r25, Z+22	; 0x16
    50f2:	a7 89       	ldd	r26, Z+23	; 0x17
    50f4:	b0 8d       	ldd	r27, Z+24	; 0x18
    50f6:	89 2b       	or	r24, r25
    50f8:	8a 2b       	or	r24, r26
    50fa:	8b 2b       	or	r24, r27
    50fc:	41 f4       	brne	.+16     	; 0x510e <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    50fe:	81 8d       	ldd	r24, Z+25	; 0x19
    5100:	92 8d       	ldd	r25, Z+26	; 0x1a
    5102:	a3 8d       	ldd	r26, Z+27	; 0x1b
    5104:	b4 8d       	ldd	r27, Z+28	; 0x1c
    5106:	85 8b       	std	Z+21, r24	; 0x15
    5108:	96 8b       	std	Z+22, r25	; 0x16
    510a:	a7 8b       	std	Z+23, r26	; 0x17
    510c:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    510e:	80 85       	ldd	r24, Z+8	; 0x08
    5110:	0e 94 97 22 	call	0x452e	; 0x452e <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    5114:	e0 91 ce 17 	lds	r30, 0x17CE
    5118:	f0 91 cf 17 	lds	r31, 0x17CF
    511c:	85 a1       	ldd	r24, Z+37	; 0x25
    511e:	96 a1       	ldd	r25, Z+38	; 0x26
    5120:	a7 a1       	ldd	r26, Z+39	; 0x27
    5122:	b0 a5       	ldd	r27, Z+40	; 0x28
    5124:	89 2b       	or	r24, r25
    5126:	8a 2b       	or	r24, r26
    5128:	8b 2b       	or	r24, r27
    512a:	09 f4       	brne	.+2      	; 0x512e <_nrk_scheduler+0x196>
    512c:	44 c0       	rjmp	.+136    	; 0x51b6 <_nrk_scheduler+0x21e>
    512e:	20 85       	ldd	r18, Z+8	; 0x08
    5130:	22 23       	and	r18, r18
    5132:	09 f4       	brne	.+2      	; 0x5136 <_nrk_scheduler+0x19e>
    5134:	40 c0       	rjmp	.+128    	; 0x51b6 <_nrk_scheduler+0x21e>
    5136:	81 85       	ldd	r24, Z+9	; 0x09
    5138:	84 30       	cpi	r24, 0x04	; 4
    513a:	e9 f1       	breq	.+122    	; 0x51b6 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    513c:	85 8d       	ldd	r24, Z+29	; 0x1d
    513e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5140:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5142:	b0 a1       	ldd	r27, Z+32	; 0x20
    5144:	40 91 f5 15 	lds	r20, 0x15F5
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	60 e0       	ldi	r22, 0x00	; 0
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	84 17       	cp	r24, r20
    5150:	95 07       	cpc	r25, r21
    5152:	a6 07       	cpc	r26, r22
    5154:	b7 07       	cpc	r27, r23
    5156:	68 f4       	brcc	.+26     	; 0x5172 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    5158:	62 2f       	mov	r22, r18
    515a:	82 e0       	ldi	r24, 0x02	; 2
    515c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    5160:	e0 91 ce 17 	lds	r30, 0x17CE
    5164:	f0 91 cf 17 	lds	r31, 0x17CF
    5168:	15 8e       	std	Z+29, r1	; 0x1d
    516a:	16 8e       	std	Z+30, r1	; 0x1e
    516c:	17 8e       	std	Z+31, r1	; 0x1f
    516e:	10 a2       	std	Z+32, r1	; 0x20
    5170:	08 c0       	rjmp	.+16     	; 0x5182 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    5172:	84 1b       	sub	r24, r20
    5174:	95 0b       	sbc	r25, r21
    5176:	a6 0b       	sbc	r26, r22
    5178:	b7 0b       	sbc	r27, r23
    517a:	85 8f       	std	Z+29, r24	; 0x1d
    517c:	96 8f       	std	Z+30, r25	; 0x1e
    517e:	a7 8f       	std	Z+31, r26	; 0x1f
    5180:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    5182:	e0 91 ce 17 	lds	r30, 0x17CE
    5186:	f0 91 cf 17 	lds	r31, 0x17CF
    518a:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    518c:	85 8d       	ldd	r24, Z+29	; 0x1d
    518e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5190:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5192:	b0 a1       	ldd	r27, Z+32	; 0x20
    5194:	89 2b       	or	r24, r25
    5196:	8a 2b       	or	r24, r26
    5198:	8b 2b       	or	r24, r27
    519a:	69 f4       	brne	.+26     	; 0x51b6 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    519c:	61 2f       	mov	r22, r17
    519e:	83 e0       	ldi	r24, 0x03	; 3
    51a0:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    51a4:	e0 91 ce 17 	lds	r30, 0x17CE
    51a8:	f0 91 cf 17 	lds	r31, 0x17CF
    51ac:	83 e0       	ldi	r24, 0x03	; 3
    51ae:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    51b0:	81 2f       	mov	r24, r17
    51b2:	0e 94 97 22 	call	0x452e	; 0x452e <nrk_rem_from_readyQ>
    51b6:	84 e5       	ldi	r24, 0x54	; 84
    51b8:	96 e1       	ldi	r25, 0x16	; 22
    51ba:	9b 83       	std	Y+3, r25	; 0x03
    51bc:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    51be:	00 e6       	ldi	r16, 0x60	; 96
    51c0:	1a ee       	ldi	r17, 0xEA	; 234
    51c2:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    51c4:	2a ef       	ldi	r18, 0xFA	; 250
    51c6:	c2 2e       	mov	r12, r18
    51c8:	d1 2c       	mov	r13, r1
    51ca:	e1 2c       	mov	r14, r1
    51cc:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    51ce:	81 2c       	mov	r8, r1
    51d0:	91 2c       	mov	r9, r1
    51d2:	54 01       	movw	r10, r8
    51d4:	83 94       	inc	r8
    51d6:	ea 81       	ldd	r30, Y+2	; 0x02
    51d8:	fb 81       	ldd	r31, Y+3	; 0x03
    51da:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    51dc:	80 81       	ld	r24, Z
    51de:	8f 3f       	cpi	r24, 0xFF	; 255
    51e0:	09 f4       	brne	.+2      	; 0x51e4 <_nrk_scheduler+0x24c>
    51e2:	04 c1       	rjmp	.+520    	; 0x53ec <_nrk_scheduler+0x454>
    51e4:	ea 81       	ldd	r30, Y+2	; 0x02
    51e6:	fb 81       	ldd	r31, Y+3	; 0x03
    51e8:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    51ea:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    51ec:	88 23       	and	r24, r24
    51ee:	09 f4       	brne	.+2      	; 0x51f2 <_nrk_scheduler+0x25a>
    51f0:	67 c0       	rjmp	.+206    	; 0x52c0 <_nrk_scheduler+0x328>
    51f2:	ea 81       	ldd	r30, Y+2	; 0x02
    51f4:	fb 81       	ldd	r31, Y+3	; 0x03
    51f6:	80 81       	ld	r24, Z
    51f8:	84 30       	cpi	r24, 0x04	; 4
    51fa:	09 f4       	brne	.+2      	; 0x51fe <_nrk_scheduler+0x266>
    51fc:	61 c0       	rjmp	.+194    	; 0x52c0 <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    51fe:	44 84       	ldd	r4, Z+12	; 0x0c
    5200:	55 84       	ldd	r5, Z+13	; 0x0d
    5202:	66 84       	ldd	r6, Z+14	; 0x0e
    5204:	77 84       	ldd	r7, Z+15	; 0x0f
    5206:	60 91 f5 15 	lds	r22, 0x15F5
    520a:	70 e0       	ldi	r23, 0x00	; 0
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	46 16       	cp	r4, r22
    5212:	57 06       	cpc	r5, r23
    5214:	68 06       	cpc	r6, r24
    5216:	79 06       	cpc	r7, r25
    5218:	48 f0       	brcs	.+18     	; 0x522c <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    521a:	46 1a       	sub	r4, r22
    521c:	57 0a       	sbc	r5, r23
    521e:	68 0a       	sbc	r6, r24
    5220:	79 0a       	sbc	r7, r25
    5222:	44 86       	std	Z+12, r4	; 0x0c
    5224:	55 86       	std	Z+13, r5	; 0x0d
    5226:	66 86       	std	Z+14, r6	; 0x0e
    5228:	77 86       	std	Z+15, r7	; 0x0f
    522a:	06 c0       	rjmp	.+12     	; 0x5238 <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    522c:	ea 81       	ldd	r30, Y+2	; 0x02
    522e:	fb 81       	ldd	r31, Y+3	; 0x03
    5230:	14 86       	std	Z+12, r1	; 0x0c
    5232:	15 86       	std	Z+13, r1	; 0x0d
    5234:	16 86       	std	Z+14, r1	; 0x0e
    5236:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    5238:	ea 81       	ldd	r30, Y+2	; 0x02
    523a:	fb 81       	ldd	r31, Y+3	; 0x03
    523c:	40 88       	ldd	r4, Z+16	; 0x10
    523e:	51 88       	ldd	r5, Z+17	; 0x11
    5240:	62 88       	ldd	r6, Z+18	; 0x12
    5242:	73 88       	ldd	r7, Z+19	; 0x13
    5244:	46 16       	cp	r4, r22
    5246:	57 06       	cpc	r5, r23
    5248:	68 06       	cpc	r6, r24
    524a:	79 06       	cpc	r7, r25
    524c:	48 f0       	brcs	.+18     	; 0x5260 <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    524e:	46 1a       	sub	r4, r22
    5250:	57 0a       	sbc	r5, r23
    5252:	68 0a       	sbc	r6, r24
    5254:	79 0a       	sbc	r7, r25
    5256:	40 8a       	std	Z+16, r4	; 0x10
    5258:	51 8a       	std	Z+17, r5	; 0x11
    525a:	62 8a       	std	Z+18, r6	; 0x12
    525c:	73 8a       	std	Z+19, r7	; 0x13
    525e:	1e c0       	rjmp	.+60     	; 0x529c <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    5260:	ea 81       	ldd	r30, Y+2	; 0x02
    5262:	fb 81       	ldd	r31, Y+3	; 0x03
    5264:	20 8d       	ldd	r18, Z+24	; 0x18
    5266:	31 8d       	ldd	r19, Z+25	; 0x19
    5268:	42 8d       	ldd	r20, Z+26	; 0x1a
    526a:	53 8d       	ldd	r21, Z+27	; 0x1b
    526c:	62 17       	cp	r22, r18
    526e:	73 07       	cpc	r23, r19
    5270:	84 07       	cpc	r24, r20
    5272:	95 07       	cpc	r25, r21
    5274:	58 f4       	brcc	.+22     	; 0x528c <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    5276:	29 01       	movw	r4, r18
    5278:	3a 01       	movw	r6, r20
    527a:	46 1a       	sub	r4, r22
    527c:	57 0a       	sbc	r5, r23
    527e:	68 0a       	sbc	r6, r24
    5280:	79 0a       	sbc	r7, r25
    5282:	40 8a       	std	Z+16, r4	; 0x10
    5284:	51 8a       	std	Z+17, r5	; 0x11
    5286:	62 8a       	std	Z+18, r6	; 0x12
    5288:	73 8a       	std	Z+19, r7	; 0x13
    528a:	08 c0       	rjmp	.+16     	; 0x529c <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    528c:	0e 94 0a 31 	call	0x6214	; 0x6214 <__udivmodsi4>
    5290:	ea 81       	ldd	r30, Y+2	; 0x02
    5292:	fb 81       	ldd	r31, Y+3	; 0x03
    5294:	60 8b       	std	Z+16, r22	; 0x10
    5296:	71 8b       	std	Z+17, r23	; 0x11
    5298:	82 8b       	std	Z+18, r24	; 0x12
    529a:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    529c:	ea 81       	ldd	r30, Y+2	; 0x02
    529e:	fb 81       	ldd	r31, Y+3	; 0x03
    52a0:	80 89       	ldd	r24, Z+16	; 0x10
    52a2:	91 89       	ldd	r25, Z+17	; 0x11
    52a4:	a2 89       	ldd	r26, Z+18	; 0x12
    52a6:	b3 89       	ldd	r27, Z+19	; 0x13
    52a8:	89 2b       	or	r24, r25
    52aa:	8a 2b       	or	r24, r26
    52ac:	8b 2b       	or	r24, r27
    52ae:	41 f4       	brne	.+16     	; 0x52c0 <_nrk_scheduler+0x328>
    52b0:	80 8d       	ldd	r24, Z+24	; 0x18
    52b2:	91 8d       	ldd	r25, Z+25	; 0x19
    52b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    52b6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    52b8:	80 8b       	std	Z+16, r24	; 0x10
    52ba:	91 8b       	std	Z+17, r25	; 0x11
    52bc:	a2 8b       	std	Z+18, r26	; 0x12
    52be:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    52c0:	ea 81       	ldd	r30, Y+2	; 0x02
    52c2:	fb 81       	ldd	r31, Y+3	; 0x03
    52c4:	80 81       	ld	r24, Z
    52c6:	83 30       	cpi	r24, 0x03	; 3
    52c8:	09 f0       	breq	.+2      	; 0x52cc <_nrk_scheduler+0x334>
    52ca:	90 c0       	rjmp	.+288    	; 0x53ec <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    52cc:	84 85       	ldd	r24, Z+12	; 0x0c
    52ce:	95 85       	ldd	r25, Z+13	; 0x0d
    52d0:	a6 85       	ldd	r26, Z+14	; 0x0e
    52d2:	b7 85       	ldd	r27, Z+15	; 0x0f
    52d4:	89 2b       	or	r24, r25
    52d6:	8a 2b       	or	r24, r26
    52d8:	8b 2b       	or	r24, r27
    52da:	09 f0       	breq	.+2      	; 0x52de <_nrk_scheduler+0x346>
    52dc:	74 c0       	rjmp	.+232    	; 0x53c6 <_nrk_scheduler+0x42e>
    52de:	df 01       	movw	r26, r30
    52e0:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    52e2:	8c 91       	ld	r24, X
    52e4:	9f 01       	movw	r18, r30
    52e6:	23 50       	subi	r18, 0x03	; 3
    52e8:	31 09       	sbc	r19, r1
    52ea:	88 23       	and	r24, r24
    52ec:	a9 f0       	breq	.+42     	; 0x5318 <_nrk_scheduler+0x380>
    52ee:	f9 01       	movw	r30, r18
    52f0:	80 81       	ld	r24, Z
    52f2:	88 23       	and	r24, r24
    52f4:	89 f0       	breq	.+34     	; 0x5318 <_nrk_scheduler+0x380>
    52f6:	b5 01       	movw	r22, r10
    52f8:	a4 01       	movw	r20, r8
    52fa:	00 90 be 17 	lds	r0, 0x17BE
    52fe:	04 c0       	rjmp	.+8      	; 0x5308 <_nrk_scheduler+0x370>
    5300:	44 0f       	add	r20, r20
    5302:	55 1f       	adc	r21, r21
    5304:	66 1f       	adc	r22, r22
    5306:	77 1f       	adc	r23, r23
    5308:	0a 94       	dec	r0
    530a:	d2 f7       	brpl	.-12     	; 0x5300 <_nrk_scheduler+0x368>
    530c:	ea 81       	ldd	r30, Y+2	; 0x02
    530e:	fb 81       	ldd	r31, Y+3	; 0x03
    5310:	40 87       	std	Z+8, r20	; 0x08
    5312:	51 87       	std	Z+9, r21	; 0x09
    5314:	62 87       	std	Z+10, r22	; 0x0a
    5316:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    5318:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    531a:	f9 01       	movw	r30, r18
    531c:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    531e:	ea 81       	ldd	r30, Y+2	; 0x02
    5320:	fb 81       	ldd	r31, Y+3	; 0x03
    5322:	a0 a1       	ldd	r26, Z+32	; 0x20
    5324:	b1 a1       	ldd	r27, Z+33	; 0x21
    5326:	a1 30       	cpi	r26, 0x01	; 1
    5328:	b1 05       	cpc	r27, r1
    532a:	19 f5       	brne	.+70     	; 0x5372 <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    532c:	84 8d       	ldd	r24, Z+28	; 0x1c
    532e:	95 8d       	ldd	r25, Z+29	; 0x1d
    5330:	a6 8d       	ldd	r26, Z+30	; 0x1e
    5332:	b7 8d       	ldd	r27, Z+31	; 0x1f
    5334:	84 8b       	std	Z+20, r24	; 0x14
    5336:	95 8b       	std	Z+21, r25	; 0x15
    5338:	a6 8b       	std	Z+22, r26	; 0x16
    533a:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    533c:	92 e0       	ldi	r25, 0x02	; 2
    533e:	49 2e       	mov	r4, r25
    5340:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    5342:	80 89       	ldd	r24, Z+16	; 0x10
    5344:	91 89       	ldd	r25, Z+17	; 0x11
    5346:	a2 89       	ldd	r26, Z+18	; 0x12
    5348:	b3 89       	ldd	r27, Z+19	; 0x13
    534a:	84 87       	std	Z+12, r24	; 0x0c
    534c:	95 87       	std	Z+13, r25	; 0x0d
    534e:	a6 87       	std	Z+14, r26	; 0x0e
    5350:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5352:	80 8d       	ldd	r24, Z+24	; 0x18
    5354:	91 8d       	ldd	r25, Z+25	; 0x19
    5356:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5358:	b3 8d       	ldd	r27, Z+27	; 0x1b
    535a:	89 2b       	or	r24, r25
    535c:	8a 2b       	or	r24, r26
    535e:	8b 2b       	or	r24, r27
    5360:	21 f4       	brne	.+8      	; 0x536a <_nrk_scheduler+0x3d2>
    5362:	c4 86       	std	Z+12, r12	; 0x0c
    5364:	d5 86       	std	Z+13, r13	; 0x0d
    5366:	e6 86       	std	Z+14, r14	; 0x0e
    5368:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    536a:	89 81       	ldd	r24, Y+1	; 0x01
    536c:	0e 94 e7 21 	call	0x43ce	; 0x43ce <nrk_add_to_readyQ>
    5370:	2a c0       	rjmp	.+84     	; 0x53c6 <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    5372:	ea 81       	ldd	r30, Y+2	; 0x02
    5374:	fb 81       	ldd	r31, Y+3	; 0x03
    5376:	44 8d       	ldd	r20, Z+28	; 0x1c
    5378:	55 8d       	ldd	r21, Z+29	; 0x1d
    537a:	66 8d       	ldd	r22, Z+30	; 0x1e
    537c:	77 8d       	ldd	r23, Z+31	; 0x1f
    537e:	44 8b       	std	Z+20, r20	; 0x14
    5380:	55 8b       	std	Z+21, r21	; 0x15
    5382:	66 8b       	std	Z+22, r22	; 0x16
    5384:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5386:	40 8c       	ldd	r4, Z+24	; 0x18
    5388:	51 8c       	ldd	r5, Z+25	; 0x19
    538a:	62 8c       	ldd	r6, Z+26	; 0x1a
    538c:	73 8c       	ldd	r7, Z+27	; 0x1b
    538e:	11 97       	sbiw	r26, 0x01	; 1
    5390:	a3 01       	movw	r20, r6
    5392:	92 01       	movw	r18, r4
    5394:	0e 94 c7 30 	call	0x618e	; 0x618e <__muluhisi3>
    5398:	64 87       	std	Z+12, r22	; 0x0c
    539a:	75 87       	std	Z+13, r23	; 0x0d
    539c:	86 87       	std	Z+14, r24	; 0x0e
    539e:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    53a0:	60 8b       	std	Z+16, r22	; 0x10
    53a2:	71 8b       	std	Z+17, r23	; 0x11
    53a4:	82 8b       	std	Z+18, r24	; 0x12
    53a6:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    53a8:	45 28       	or	r4, r5
    53aa:	46 28       	or	r4, r6
    53ac:	47 28       	or	r4, r7
    53ae:	21 f4       	brne	.+8      	; 0x53b8 <_nrk_scheduler+0x420>
    53b0:	c4 86       	std	Z+12, r12	; 0x0c
    53b2:	d5 86       	std	Z+13, r13	; 0x0d
    53b4:	e6 86       	std	Z+14, r14	; 0x0e
    53b6:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    53b8:	44 24       	eor	r4, r4
    53ba:	43 94       	inc	r4
    53bc:	51 2c       	mov	r5, r1
    53be:	ea 81       	ldd	r30, Y+2	; 0x02
    53c0:	fb 81       	ldd	r31, Y+3	; 0x03
    53c2:	51 a2       	std	Z+33, r5	; 0x21
    53c4:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    53c6:	ea 81       	ldd	r30, Y+2	; 0x02
    53c8:	fb 81       	ldd	r31, Y+3	; 0x03
    53ca:	84 85       	ldd	r24, Z+12	; 0x0c
    53cc:	95 85       	ldd	r25, Z+13	; 0x0d
    53ce:	a6 85       	ldd	r26, Z+14	; 0x0e
    53d0:	b7 85       	ldd	r27, Z+15	; 0x0f
    53d2:	00 97       	sbiw	r24, 0x00	; 0
    53d4:	a1 05       	cpc	r26, r1
    53d6:	b1 05       	cpc	r27, r1
    53d8:	49 f0       	breq	.+18     	; 0x53ec <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    53da:	a8 01       	movw	r20, r16
    53dc:	60 e0       	ldi	r22, 0x00	; 0
    53de:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    53e0:	84 17       	cp	r24, r20
    53e2:	95 07       	cpc	r25, r21
    53e4:	a6 07       	cpc	r26, r22
    53e6:	b7 07       	cpc	r27, r23
    53e8:	08 f4       	brcc	.+2      	; 0x53ec <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    53ea:	8c 01       	movw	r16, r24
    53ec:	f9 81       	ldd	r31, Y+1	; 0x01
    53ee:	ff 5f       	subi	r31, 0xFF	; 255
    53f0:	f9 83       	std	Y+1, r31	; 0x01
    53f2:	2a 81       	ldd	r18, Y+2	; 0x02
    53f4:	3b 81       	ldd	r19, Y+3	; 0x03
    53f6:	25 5d       	subi	r18, 0xD5	; 213
    53f8:	3f 4f       	sbci	r19, 0xFF	; 255
    53fa:	3b 83       	std	Y+3, r19	; 0x03
    53fc:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    53fe:	f8 30       	cpi	r31, 0x08	; 8
    5400:	09 f0       	breq	.+2      	; 0x5404 <_nrk_scheduler+0x46c>
    5402:	e9 ce       	rjmp	.-558    	; 0x51d6 <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    5404:	0e 94 d6 21 	call	0x43ac	; 0x43ac <nrk_get_high_ready_task_ID>
    5408:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    540a:	3b e2       	ldi	r19, 0x2B	; 43
    540c:	83 02       	muls	r24, r19
    540e:	f0 01       	movw	r30, r0
    5410:	11 24       	eor	r1, r1
    5412:	e5 5b       	subi	r30, 0xB5	; 181
    5414:	f9 4e       	sbci	r31, 0xE9	; 233
    5416:	22 85       	ldd	r18, Z+10	; 0x0a
    5418:	20 93 d0 17 	sts	0x17D0, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    541c:	f0 93 c0 17 	sts	0x17C0, r31
    5420:	e0 93 bf 17 	sts	0x17BF, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    5424:	88 23       	and	r24, r24
    5426:	d9 f0       	breq	.+54     	; 0x545e <_nrk_scheduler+0x4c6>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    5428:	85 a1       	ldd	r24, Z+37	; 0x25
    542a:	96 a1       	ldd	r25, Z+38	; 0x26
    542c:	a7 a1       	ldd	r26, Z+39	; 0x27
    542e:	b0 a5       	ldd	r27, Z+40	; 0x28
    5430:	89 2b       	or	r24, r25
    5432:	8a 2b       	or	r24, r26
    5434:	8b 2b       	or	r24, r27
    5436:	99 f0       	breq	.+38     	; 0x545e <_nrk_scheduler+0x4c6>
    5438:	85 8d       	ldd	r24, Z+29	; 0x1d
    543a:	96 8d       	ldd	r25, Z+30	; 0x1e
    543c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    543e:	b0 a1       	ldd	r27, Z+32	; 0x20
    5440:	8a 3f       	cpi	r24, 0xFA	; 250
    5442:	91 05       	cpc	r25, r1
    5444:	a1 05       	cpc	r26, r1
    5446:	b1 05       	cpc	r27, r1
    5448:	50 f4       	brcc	.+20     	; 0x545e <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    544a:	a8 01       	movw	r20, r16
    544c:	60 e0       	ldi	r22, 0x00	; 0
    544e:	70 e0       	ldi	r23, 0x00	; 0
    5450:	84 17       	cp	r24, r20
    5452:	95 07       	cpc	r25, r21
    5454:	a6 07       	cpc	r26, r22
    5456:	b7 07       	cpc	r27, r23
    5458:	10 f4       	brcc	.+4      	; 0x545e <_nrk_scheduler+0x4c6>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    545a:	8c 01       	movw	r16, r24
    545c:	05 c0       	rjmp	.+10     	; 0x5468 <_nrk_scheduler+0x4d0>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    545e:	0b 3f       	cpi	r16, 0xFB	; 251
    5460:	11 05       	cpc	r17, r1
    5462:	10 f0       	brcs	.+4      	; 0x5468 <_nrk_scheduler+0x4d0>
    5464:	0a ef       	ldi	r16, 0xFA	; 250
    5466:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    5468:	20 93 c1 17 	sts	0x17C1, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    546c:	f0 93 cf 17 	sts	0x17CF, r31
    5470:	e0 93 ce 17 	sts	0x17CE, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    5474:	00 93 f5 15 	sts	0x15F5, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    5478:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    547c:	28 2f       	mov	r18, r24
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	2f 5f       	subi	r18, 0xFF	; 255
    5482:	3f 4f       	sbci	r19, 0xFF	; 255
    5484:	20 17       	cp	r18, r16
    5486:	31 07       	cpc	r19, r17
    5488:	40 f0       	brcs	.+16     	; 0x549a <_nrk_scheduler+0x502>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    548a:	0e 94 bf 2b 	call	0x577e	; 0x577e <_nrk_os_timer_get>
    548e:	08 2f       	mov	r16, r24
    5490:	10 e0       	ldi	r17, 0x00	; 0
    5492:	0e 5f       	subi	r16, 0xFE	; 254
    5494:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    5496:	00 93 f5 15 	sts	0x15F5, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    549a:	f1 10       	cpse	r15, r1
    549c:	10 92 c2 17 	sts	0x17C2, r1

    _nrk_set_next_wakeup(next_wake);
    54a0:	80 2f       	mov	r24, r16
    54a2:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    54a6:	6c ed       	ldi	r22, 0xDC	; 220
    54a8:	75 e0       	ldi	r23, 0x05	; 5
    54aa:	c1 01       	movw	r24, r2
    54ac:	0e 94 c5 2a 	call	0x558a	; 0x558a <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    54b0:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    54b4:	0f 90       	pop	r0
    54b6:	0f 90       	pop	r0
    54b8:	0f 90       	pop	r0
    54ba:	df 91       	pop	r29
    54bc:	cf 91       	pop	r28
    54be:	1f 91       	pop	r17
    54c0:	0f 91       	pop	r16
    54c2:	ff 90       	pop	r15
    54c4:	ef 90       	pop	r14
    54c6:	df 90       	pop	r13
    54c8:	cf 90       	pop	r12
    54ca:	bf 90       	pop	r11
    54cc:	af 90       	pop	r10
    54ce:	9f 90       	pop	r9
    54d0:	8f 90       	pop	r8
    54d2:	7f 90       	pop	r7
    54d4:	6f 90       	pop	r6
    54d6:	5f 90       	pop	r5
    54d8:	4f 90       	pop	r4
    54da:	3f 90       	pop	r3
    54dc:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    54de:	0c 94 ed 2e 	jmp	0x5dda	; 0x5dda <nrk_start_high_ready_task>

000054e2 <nrk_spin_wait_us>:
	...
    54fa:	01 97       	sbiw	r24, 0x01	; 1
    54fc:	91 f7       	brne	.-28     	; 0x54e2 <nrk_spin_wait_us>
    54fe:	08 95       	ret

00005500 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    5500:	10 92 21 01 	sts	0x0121, r1
    5504:	08 95       	ret

00005506 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    5506:	89 e0       	ldi	r24, 0x09	; 9
    5508:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    550c:	8d e8       	ldi	r24, 0x8D	; 141
    550e:	9c e3       	ldi	r25, 0x3C	; 60
    5510:	90 93 29 01 	sts	0x0129, r25
    5514:	80 93 28 01 	sts	0x0128, r24
    5518:	08 95       	ret

0000551a <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    551a:	10 92 25 01 	sts	0x0125, r1
    551e:	10 92 24 01 	sts	0x0124, r1
    5522:	08 95       	ret

00005524 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	00 d0       	rcall	.+0      	; 0x552a <_nrk_precision_os_timer_get+0x6>
    552a:	cd b7       	in	r28, 0x3d	; 61
    552c:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    552e:	80 91 24 01 	lds	r24, 0x0124
    5532:	90 91 25 01 	lds	r25, 0x0125
    5536:	9a 83       	std	Y+2, r25	; 0x02
    5538:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    553a:	89 81       	ldd	r24, Y+1	; 0x01
    553c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    553e:	0f 90       	pop	r0
    5540:	0f 90       	pop	r0
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	08 95       	ret

00005548 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    5548:	10 92 81 00 	sts	0x0081, r1
    554c:	08 95       	ret

0000554e <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    554e:	81 e0       	ldi	r24, 0x01	; 1
    5550:	80 93 81 00 	sts	0x0081, r24
    5554:	08 95       	ret

00005556 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5556:	83 b5       	in	r24, 0x23	; 35
    5558:	81 60       	ori	r24, 0x01	; 1
    555a:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    555c:	10 92 85 00 	sts	0x0085, r1
    5560:	10 92 84 00 	sts	0x0084, r1
    5564:	08 95       	ret

00005566 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    5566:	cf 93       	push	r28
    5568:	df 93       	push	r29
    556a:	00 d0       	rcall	.+0      	; 0x556c <_nrk_high_speed_timer_get+0x6>
    556c:	cd b7       	in	r28, 0x3d	; 61
    556e:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    5570:	80 91 84 00 	lds	r24, 0x0084
    5574:	90 91 85 00 	lds	r25, 0x0085
    5578:	9a 83       	std	Y+2, r25	; 0x02
    557a:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5580:	0f 90       	pop	r0
    5582:	0f 90       	pop	r0
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	08 95       	ret

0000558a <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    558a:	cf 92       	push	r12
    558c:	df 92       	push	r13
    558e:	ef 92       	push	r14
    5590:	ff 92       	push	r15
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    5596:	ec 01       	movw	r28, r24
    5598:	cc 0f       	add	r28, r28
    559a:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    559c:	c9 37       	cpi	r28, 0x79	; 121
    559e:	8f ef       	ldi	r24, 0xFF	; 255
    55a0:	d8 07       	cpc	r29, r24
    55a2:	10 f0       	brcs	.+4      	; 0x55a8 <nrk_high_speed_timer_wait+0x1e>
    55a4:	c0 e0       	ldi	r28, 0x00	; 0
    55a6:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    55a8:	6b 01       	movw	r12, r22
    55aa:	e1 2c       	mov	r14, r1
    55ac:	f1 2c       	mov	r15, r1
    55ae:	cc 0e       	add	r12, r28
    55b0:	dd 1e       	adc	r13, r29
    55b2:	e1 1c       	adc	r14, r1
    55b4:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	c8 16       	cp	r12, r24
    55ba:	d1 04       	cpc	r13, r1
    55bc:	e8 06       	cpc	r14, r24
    55be:	f1 04       	cpc	r15, r1
    55c0:	40 f0       	brcs	.+16     	; 0x55d2 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    55c2:	81 e0       	ldi	r24, 0x01	; 1
    55c4:	e8 1a       	sub	r14, r24
    55c6:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    55c8:	0e 94 b3 2a 	call	0x5566	; 0x5566 <_nrk_high_speed_timer_get>
    55cc:	c8 17       	cp	r28, r24
    55ce:	d9 07       	cpc	r29, r25
    55d0:	d8 f3       	brcs	.-10     	; 0x55c8 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    55d2:	0e 94 b3 2a 	call	0x5566	; 0x5566 <_nrk_high_speed_timer_get>
    55d6:	8c 15       	cp	r24, r12
    55d8:	9d 05       	cpc	r25, r13
    55da:	d8 f3       	brcs	.-10     	; 0x55d2 <nrk_high_speed_timer_wait+0x48>
}
    55dc:	df 91       	pop	r29
    55de:	cf 91       	pop	r28
    55e0:	ff 90       	pop	r15
    55e2:	ef 90       	pop	r14
    55e4:	df 90       	pop	r13
    55e6:	cf 90       	pop	r12
    55e8:	08 95       	ret

000055ea <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    55ea:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    55ee:	e0 e7       	ldi	r30, 0x70	; 112
    55f0:	f0 e0       	ldi	r31, 0x00	; 0
    55f2:	80 81       	ld	r24, Z
    55f4:	8d 7f       	andi	r24, 0xFD	; 253
    55f6:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    55f8:	80 81       	ld	r24, Z
    55fa:	8e 7f       	andi	r24, 0xFE	; 254
    55fc:	80 83       	st	Z, r24
    55fe:	08 95       	ret

00005600 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    5600:	80 93 b2 00 	sts	0x00B2, r24
    5604:	08 95       	ret

00005606 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    5606:	e0 e7       	ldi	r30, 0x70	; 112
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	80 81       	ld	r24, Z
    560c:	83 60       	ori	r24, 0x03	; 3
    560e:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    5610:	83 e0       	ldi	r24, 0x03	; 3
    5612:	80 93 b1 00 	sts	0x00B1, r24
    5616:	08 95       	ret

00005618 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    5618:	83 b5       	in	r24, 0x23	; 35
    561a:	82 60       	ori	r24, 0x02	; 2
    561c:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    561e:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    5622:	10 92 f3 15 	sts	0x15F3, r1
    _nrk_prev_timer_val=0;
    5626:	10 92 f5 15 	sts	0x15F5, r1
    562a:	08 95       	ret

0000562c <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    562c:	cf 93       	push	r28
    562e:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    5630:	8e ef       	ldi	r24, 0xFE	; 254
    5632:	80 93 f5 15 	sts	0x15F5, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    5636:	80 e2       	ldi	r24, 0x20	; 32
    5638:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    563c:	80 91 f5 15 	lds	r24, 0x15F5
    5640:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    5644:	83 e0       	ldi	r24, 0x03	; 3
    5646:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    5648:	92 e0       	ldi	r25, 0x02	; 2
    564a:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    564e:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    5652:	93 b5       	in	r25, 0x23	; 35
    5654:	92 60       	ori	r25, 0x02	; 2
    5656:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    5658:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    565a:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    565c:	83 b5       	in	r24, 0x23	; 35
    565e:	82 60       	ori	r24, 0x02	; 2
    5660:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    5662:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    5666:	81 e0       	ldi	r24, 0x01	; 1
    5668:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    566c:	10 92 85 00 	sts	0x0085, r1
    5670:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5674:	83 b5       	in	r24, 0x23	; 35
    5676:	82 60       	ori	r24, 0x02	; 2
    5678:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    567a:	83 b5       	in	r24, 0x23	; 35
    567c:	81 60       	ori	r24, 0x01	; 1
    567e:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    5680:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    5684:	c4 e2       	ldi	r28, 0x24	; 36
    5686:	d1 e0       	ldi	r29, 0x01	; 1
    5688:	19 82       	std	Y+1, r1	; 0x01
    568a:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    568c:	83 b5       	in	r24, 0x23	; 35
    568e:	82 60       	ori	r24, 0x02	; 2
    5690:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5692:	83 b5       	in	r24, 0x23	; 35
    5694:	81 60       	ori	r24, 0x01	; 1
    5696:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    5698:	0e 94 0c 2b 	call	0x5618	; 0x5618 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    569c:	19 82       	std	Y+1, r1	; 0x01
    569e:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    56a0:	0e 94 03 2b 	call	0x5606	; 0x5606 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    56a4:	0e 94 83 2a 	call	0x5506	; 0x5506 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    56a8:	10 92 f3 15 	sts	0x15F3, r1
}
    56ac:	df 91       	pop	r29
    56ae:	cf 91       	pop	r28
    56b0:	08 95       	ret

000056b2 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    56b2:	80 91 b3 00 	lds	r24, 0x00B3
}
    56b6:	8f 5f       	subi	r24, 0xFF	; 255
    56b8:	08 95       	ret

000056ba <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    56ba:	81 50       	subi	r24, 0x01	; 1
    56bc:	80 93 b3 00 	sts	0x00B3, r24
    56c0:	08 95       	ret

000056c2 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    56c2:	81 11       	cpse	r24, r1
    56c4:	02 c0       	rjmp	.+4      	; 0x56ca <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    56c6:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    56ca:	8f ef       	ldi	r24, 0xFF	; 255
    56cc:	08 95       	ret

000056ce <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    56ce:	81 11       	cpse	r24, r1
    56d0:	06 c0       	rjmp	.+12     	; 0x56de <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    56d2:	10 92 95 00 	sts	0x0095, r1
    56d6:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    56da:	81 e0       	ldi	r24, 0x01	; 1
    56dc:	08 95       	ret
	}
return NRK_ERROR;
    56de:	8f ef       	ldi	r24, 0xFF	; 255
}
    56e0:	08 95       	ret

000056e2 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    56e2:	81 11       	cpse	r24, r1
    56e4:	05 c0       	rjmp	.+10     	; 0x56f0 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    56e6:	80 91 94 00 	lds	r24, 0x0094
    56ea:	90 91 95 00 	lds	r25, 0x0095
    56ee:	08 95       	ret
	}
return 0;
    56f0:	80 e0       	ldi	r24, 0x00	; 0
    56f2:	90 e0       	ldi	r25, 0x00	; 0

}
    56f4:	08 95       	ret

000056f6 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    56f6:	81 11       	cpse	r24, r1
    56f8:	05 c0       	rjmp	.+10     	; 0x5704 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    56fa:	82 e0       	ldi	r24, 0x02	; 2
    56fc:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	08 95       	ret
	}
return NRK_ERROR;
    5704:	8f ef       	ldi	r24, 0xFF	; 255
}
    5706:	08 95       	ret

00005708 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    5708:	81 11       	cpse	r24, r1
    570a:	35 c0       	rjmp	.+106    	; 0x5776 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    570c:	cb 01       	movw	r24, r22
    570e:	01 97       	sbiw	r24, 0x01	; 1
    5710:	05 97       	sbiw	r24, 0x05	; 5
    5712:	10 f4       	brcc	.+4      	; 0x5718 <nrk_timer_int_configure+0x10>
    5714:	60 93 f4 15 	sts	0x15F4, r22
	TCCR3A = 0;  
    5718:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    571c:	88 e0       	ldi	r24, 0x08	; 8
    571e:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    5722:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    5726:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    572a:	30 93 f2 15 	sts	0x15F2, r19
    572e:	20 93 f1 15 	sts	0x15F1, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    5732:	80 91 f4 15 	lds	r24, 0x15F4
    5736:	81 30       	cpi	r24, 0x01	; 1
    5738:	21 f4       	brne	.+8      	; 0x5742 <nrk_timer_int_configure+0x3a>
    573a:	80 91 91 00 	lds	r24, 0x0091
    573e:	81 60       	ori	r24, 0x01	; 1
    5740:	11 c0       	rjmp	.+34     	; 0x5764 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    5742:	82 30       	cpi	r24, 0x02	; 2
    5744:	21 f4       	brne	.+8      	; 0x574e <nrk_timer_int_configure+0x46>
    5746:	80 91 91 00 	lds	r24, 0x0091
    574a:	82 60       	ori	r24, 0x02	; 2
    574c:	0b c0       	rjmp	.+22     	; 0x5764 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    574e:	83 30       	cpi	r24, 0x03	; 3
    5750:	21 f4       	brne	.+8      	; 0x575a <nrk_timer_int_configure+0x52>
    5752:	80 91 91 00 	lds	r24, 0x0091
    5756:	83 60       	ori	r24, 0x03	; 3
    5758:	05 c0       	rjmp	.+10     	; 0x5764 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    575a:	84 30       	cpi	r24, 0x04	; 4
    575c:	31 f4       	brne	.+12     	; 0x576a <nrk_timer_int_configure+0x62>
    575e:	80 91 91 00 	lds	r24, 0x0091
    5762:	84 60       	ori	r24, 0x04	; 4
    5764:	80 93 91 00 	sts	0x0091, r24
    5768:	08 c0       	rjmp	.+16     	; 0x577a <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    576a:	85 30       	cpi	r24, 0x05	; 5
    576c:	31 f4       	brne	.+12     	; 0x577a <nrk_timer_int_configure+0x72>
    576e:	80 91 91 00 	lds	r24, 0x0091
    5772:	85 60       	ori	r24, 0x05	; 5
    5774:	f7 cf       	rjmp	.-18     	; 0x5764 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    5776:	8f ef       	ldi	r24, 0xFF	; 255
    5778:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    577a:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    577c:	08 95       	ret

0000577e <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    577e:	80 91 b2 00 	lds	r24, 0x00B2
}
    5782:	08 95       	ret

00005784 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    5784:	1f 92       	push	r1
    5786:	0f 92       	push	r0
    5788:	0f b6       	in	r0, 0x3f	; 63
    578a:	0f 92       	push	r0
    578c:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    578e:	60 e0       	ldi	r22, 0x00	; 0
    5790:	8a e0       	ldi	r24, 0x0A	; 10
    5792:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
	while(1);
    5796:	ff cf       	rjmp	.-2      	; 0x5796 <__vector_default+0x12>

00005798 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    5798:	0f 92       	push	r0
    579a:	0f b6       	in	r0, 0x3f	; 63
    579c:	0f 92       	push	r0
    579e:	1f 92       	push	r1
    57a0:	2f 92       	push	r2
    57a2:	3f 92       	push	r3
    57a4:	4f 92       	push	r4
    57a6:	5f 92       	push	r5
    57a8:	6f 92       	push	r6
    57aa:	7f 92       	push	r7
    57ac:	8f 92       	push	r8
    57ae:	9f 92       	push	r9
    57b0:	af 92       	push	r10
    57b2:	bf 92       	push	r11
    57b4:	cf 92       	push	r12
    57b6:	df 92       	push	r13
    57b8:	ef 92       	push	r14
    57ba:	ff 92       	push	r15
    57bc:	0f 93       	push	r16
    57be:	1f 93       	push	r17
    57c0:	2f 93       	push	r18
    57c2:	3f 93       	push	r19
    57c4:	4f 93       	push	r20
    57c6:	5f 93       	push	r21
    57c8:	6f 93       	push	r22
    57ca:	7f 93       	push	r23
    57cc:	8f 93       	push	r24
    57ce:	9f 93       	push	r25
    57d0:	af 93       	push	r26
    57d2:	bf 93       	push	r27
    57d4:	cf 93       	push	r28
    57d6:	df 93       	push	r29
    57d8:	ef 93       	push	r30
    57da:	ff 93       	push	r31
    57dc:	a0 91 ce 17 	lds	r26, 0x17CE
    57e0:	b0 91 cf 17 	lds	r27, 0x17CF
    57e4:	0d b6       	in	r0, 0x3d	; 61
    57e6:	0d 92       	st	X+, r0
    57e8:	0e b6       	in	r0, 0x3e	; 62
    57ea:	0d 92       	st	X+, r0
    57ec:	1f 92       	push	r1
    57ee:	a0 91 d6 12 	lds	r26, 0x12D6
    57f2:	b0 91 d7 12 	lds	r27, 0x12D7
    57f6:	1e 90       	ld	r1, -X
    57f8:	be bf       	out	0x3e, r27	; 62
    57fa:	ad bf       	out	0x3d, r26	; 61
    57fc:	08 95       	ret

000057fe <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    57fe:	1f 92       	push	r1
    5800:	0f 92       	push	r0
    5802:	0f b6       	in	r0, 0x3f	; 63
    5804:	0f 92       	push	r0
    5806:	11 24       	eor	r1, r1
    5808:	0b b6       	in	r0, 0x3b	; 59
    580a:	0f 92       	push	r0
    580c:	2f 93       	push	r18
    580e:	3f 93       	push	r19
    5810:	4f 93       	push	r20
    5812:	5f 93       	push	r21
    5814:	6f 93       	push	r22
    5816:	7f 93       	push	r23
    5818:	8f 93       	push	r24
    581a:	9f 93       	push	r25
    581c:	af 93       	push	r26
    581e:	bf 93       	push	r27
    5820:	ef 93       	push	r30
    5822:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    5824:	e0 91 f1 15 	lds	r30, 0x15F1
    5828:	f0 91 f2 15 	lds	r31, 0x15F2
    582c:	30 97       	sbiw	r30, 0x00	; 0
    582e:	11 f0       	breq	.+4      	; 0x5834 <__vector_32+0x36>
    5830:	09 95       	icall
    5832:	04 c0       	rjmp	.+8      	; 0x583c <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5834:	60 e0       	ldi	r22, 0x00	; 0
    5836:	8a e0       	ldi	r24, 0x0A	; 10
    5838:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
	return;  	
}
    583c:	ff 91       	pop	r31
    583e:	ef 91       	pop	r30
    5840:	bf 91       	pop	r27
    5842:	af 91       	pop	r26
    5844:	9f 91       	pop	r25
    5846:	8f 91       	pop	r24
    5848:	7f 91       	pop	r23
    584a:	6f 91       	pop	r22
    584c:	5f 91       	pop	r21
    584e:	4f 91       	pop	r20
    5850:	3f 91       	pop	r19
    5852:	2f 91       	pop	r18
    5854:	0f 90       	pop	r0
    5856:	0b be       	out	0x3b, r0	; 59
    5858:	0f 90       	pop	r0
    585a:	0f be       	out	0x3f, r0	; 63
    585c:	0f 90       	pop	r0
    585e:	1f 90       	pop	r1
    5860:	18 95       	reti

00005862 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    5862:	1f 92       	push	r1
    5864:	0f 92       	push	r0
    5866:	0f b6       	in	r0, 0x3f	; 63
    5868:	0f 92       	push	r0
    586a:	11 24       	eor	r1, r1

	return;  	
} 
    586c:	0f 90       	pop	r0
    586e:	0f be       	out	0x3f, r0	; 63
    5870:	0f 90       	pop	r0
    5872:	1f 90       	pop	r1
    5874:	18 95       	reti

00005876 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    5876:	04 b6       	in	r0, 0x34	; 52
    5878:	03 fe       	sbrs	r0, 3
    587a:	02 c0       	rjmp	.+4      	; 0x5880 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    587c:	80 e1       	ldi	r24, 0x10	; 16
    587e:	01 c0       	rjmp	.+2      	; 0x5882 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    5880:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    5882:	04 b6       	in	r0, 0x34	; 52
    5884:	02 fe       	sbrs	r0, 2
    5886:	06 c0       	rjmp	.+12     	; 0x5894 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    5888:	94 b7       	in	r25, 0x34	; 52
    588a:	9b 7f       	andi	r25, 0xFB	; 251
    588c:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    588e:	04 b6       	in	r0, 0x34	; 52
    5890:	00 fe       	sbrs	r0, 0
		error|=0x04;
    5892:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    5894:	04 b6       	in	r0, 0x34	; 52
    5896:	01 fe       	sbrs	r0, 1
    5898:	05 c0       	rjmp	.+10     	; 0x58a4 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    589a:	94 b7       	in	r25, 0x34	; 52
    589c:	9d 7f       	andi	r25, 0xFD	; 253
    589e:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    58a0:	82 60       	ori	r24, 0x02	; 2
    58a2:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    58a4:	81 11       	cpse	r24, r1
    58a6:	0c c0       	rjmp	.+24     	; 0x58c0 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    58a8:	04 b6       	in	r0, 0x34	; 52
    58aa:	00 fe       	sbrs	r0, 0
    58ac:	04 c0       	rjmp	.+8      	; 0x58b6 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    58ae:	94 b7       	in	r25, 0x34	; 52
    58b0:	9e 7f       	andi	r25, 0xFE	; 254
    58b2:	94 bf       	out	0x34, r25	; 52
    58b4:	01 c0       	rjmp	.+2      	; 0x58b8 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    58b6:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    58b8:	90 91 b0 00 	lds	r25, 0x00B0
    58bc:	91 11       	cpse	r25, r1
    58be:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    58c0:	08 95       	ret

000058c2 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    58c2:	81 11       	cpse	r24, r1
    58c4:	02 c0       	rjmp	.+4      	; 0x58ca <nrk_ext_int_enable+0x8>
    58c6:	e8 9a       	sbi	0x1d, 0	; 29
    58c8:	39 c0       	rjmp	.+114    	; 0x593c <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    58ca:	81 30       	cpi	r24, 0x01	; 1
    58cc:	11 f4       	brne	.+4      	; 0x58d2 <nrk_ext_int_enable+0x10>
    58ce:	e9 9a       	sbi	0x1d, 1	; 29
    58d0:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    58d2:	82 30       	cpi	r24, 0x02	; 2
    58d4:	11 f4       	brne	.+4      	; 0x58da <nrk_ext_int_enable+0x18>
    58d6:	ea 9a       	sbi	0x1d, 2	; 29
    58d8:	31 c0       	rjmp	.+98     	; 0x593c <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    58da:	83 30       	cpi	r24, 0x03	; 3
    58dc:	21 f4       	brne	.+8      	; 0x58e6 <nrk_ext_int_enable+0x24>
    58de:	80 91 6b 00 	lds	r24, 0x006B
    58e2:	81 60       	ori	r24, 0x01	; 1
    58e4:	29 c0       	rjmp	.+82     	; 0x5938 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    58e6:	84 30       	cpi	r24, 0x04	; 4
    58e8:	21 f4       	brne	.+8      	; 0x58f2 <nrk_ext_int_enable+0x30>
    58ea:	80 91 6b 00 	lds	r24, 0x006B
    58ee:	82 60       	ori	r24, 0x02	; 2
    58f0:	23 c0       	rjmp	.+70     	; 0x5938 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    58f2:	85 30       	cpi	r24, 0x05	; 5
    58f4:	21 f4       	brne	.+8      	; 0x58fe <nrk_ext_int_enable+0x3c>
    58f6:	80 91 6b 00 	lds	r24, 0x006B
    58fa:	84 60       	ori	r24, 0x04	; 4
    58fc:	1d c0       	rjmp	.+58     	; 0x5938 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    58fe:	86 30       	cpi	r24, 0x06	; 6
    5900:	21 f4       	brne	.+8      	; 0x590a <nrk_ext_int_enable+0x48>
    5902:	80 91 6b 00 	lds	r24, 0x006B
    5906:	88 60       	ori	r24, 0x08	; 8
    5908:	17 c0       	rjmp	.+46     	; 0x5938 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    590a:	87 30       	cpi	r24, 0x07	; 7
    590c:	21 f4       	brne	.+8      	; 0x5916 <nrk_ext_int_enable+0x54>
    590e:	80 91 6b 00 	lds	r24, 0x006B
    5912:	80 61       	ori	r24, 0x10	; 16
    5914:	11 c0       	rjmp	.+34     	; 0x5938 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    5916:	88 30       	cpi	r24, 0x08	; 8
    5918:	21 f4       	brne	.+8      	; 0x5922 <nrk_ext_int_enable+0x60>
    591a:	80 91 6b 00 	lds	r24, 0x006B
    591e:	80 62       	ori	r24, 0x20	; 32
    5920:	0b c0       	rjmp	.+22     	; 0x5938 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    5922:	89 30       	cpi	r24, 0x09	; 9
    5924:	21 f4       	brne	.+8      	; 0x592e <nrk_ext_int_enable+0x6c>
    5926:	80 91 6b 00 	lds	r24, 0x006B
    592a:	80 64       	ori	r24, 0x40	; 64
    592c:	05 c0       	rjmp	.+10     	; 0x5938 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    592e:	8a 30       	cpi	r24, 0x0A	; 10
    5930:	39 f4       	brne	.+14     	; 0x5940 <nrk_ext_int_enable+0x7e>
    5932:	80 91 6b 00 	lds	r24, 0x006B
    5936:	80 68       	ori	r24, 0x80	; 128
    5938:	80 93 6b 00 	sts	0x006B, r24
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	08 95       	ret
return NRK_ERROR;
    5940:	8f ef       	ldi	r24, 0xFF	; 255
}
    5942:	08 95       	ret

00005944 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    5944:	81 11       	cpse	r24, r1
    5946:	02 c0       	rjmp	.+4      	; 0x594c <nrk_ext_int_disable+0x8>
    5948:	e8 98       	cbi	0x1d, 0	; 29
    594a:	39 c0       	rjmp	.+114    	; 0x59be <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    594c:	81 30       	cpi	r24, 0x01	; 1
    594e:	11 f4       	brne	.+4      	; 0x5954 <nrk_ext_int_disable+0x10>
    5950:	e9 98       	cbi	0x1d, 1	; 29
    5952:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5954:	82 30       	cpi	r24, 0x02	; 2
    5956:	11 f4       	brne	.+4      	; 0x595c <nrk_ext_int_disable+0x18>
    5958:	e9 98       	cbi	0x1d, 1	; 29
    595a:	31 c0       	rjmp	.+98     	; 0x59be <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    595c:	83 30       	cpi	r24, 0x03	; 3
    595e:	21 f4       	brne	.+8      	; 0x5968 <nrk_ext_int_disable+0x24>
    5960:	80 91 6b 00 	lds	r24, 0x006B
    5964:	8e 7f       	andi	r24, 0xFE	; 254
    5966:	29 c0       	rjmp	.+82     	; 0x59ba <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    5968:	84 30       	cpi	r24, 0x04	; 4
    596a:	21 f4       	brne	.+8      	; 0x5974 <nrk_ext_int_disable+0x30>
    596c:	80 91 6b 00 	lds	r24, 0x006B
    5970:	8d 7f       	andi	r24, 0xFD	; 253
    5972:	23 c0       	rjmp	.+70     	; 0x59ba <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    5974:	85 30       	cpi	r24, 0x05	; 5
    5976:	21 f4       	brne	.+8      	; 0x5980 <nrk_ext_int_disable+0x3c>
    5978:	80 91 6b 00 	lds	r24, 0x006B
    597c:	8b 7f       	andi	r24, 0xFB	; 251
    597e:	1d c0       	rjmp	.+58     	; 0x59ba <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    5980:	86 30       	cpi	r24, 0x06	; 6
    5982:	21 f4       	brne	.+8      	; 0x598c <nrk_ext_int_disable+0x48>
    5984:	80 91 6b 00 	lds	r24, 0x006B
    5988:	87 7f       	andi	r24, 0xF7	; 247
    598a:	17 c0       	rjmp	.+46     	; 0x59ba <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    598c:	87 30       	cpi	r24, 0x07	; 7
    598e:	21 f4       	brne	.+8      	; 0x5998 <nrk_ext_int_disable+0x54>
    5990:	80 91 6b 00 	lds	r24, 0x006B
    5994:	8f 7e       	andi	r24, 0xEF	; 239
    5996:	11 c0       	rjmp	.+34     	; 0x59ba <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    5998:	88 30       	cpi	r24, 0x08	; 8
    599a:	21 f4       	brne	.+8      	; 0x59a4 <nrk_ext_int_disable+0x60>
    599c:	80 91 6b 00 	lds	r24, 0x006B
    59a0:	8f 7d       	andi	r24, 0xDF	; 223
    59a2:	0b c0       	rjmp	.+22     	; 0x59ba <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    59a4:	89 30       	cpi	r24, 0x09	; 9
    59a6:	21 f4       	brne	.+8      	; 0x59b0 <nrk_ext_int_disable+0x6c>
    59a8:	80 91 6b 00 	lds	r24, 0x006B
    59ac:	8f 7b       	andi	r24, 0xBF	; 191
    59ae:	05 c0       	rjmp	.+10     	; 0x59ba <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    59b0:	8a 30       	cpi	r24, 0x0A	; 10
    59b2:	39 f4       	brne	.+14     	; 0x59c2 <nrk_ext_int_disable+0x7e>
    59b4:	80 91 6b 00 	lds	r24, 0x006B
    59b8:	8f 77       	andi	r24, 0x7F	; 127
    59ba:	80 93 6b 00 	sts	0x006B, r24
    59be:	81 e0       	ldi	r24, 0x01	; 1
    59c0:	08 95       	ret
return NRK_ERROR;
    59c2:	8f ef       	ldi	r24, 0xFF	; 255
}
    59c4:	08 95       	ret

000059c6 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    59c6:	81 11       	cpse	r24, r1
    59c8:	26 c0       	rjmp	.+76     	; 0x5a16 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    59ca:	50 93 02 18 	sts	0x1802, r21
    59ce:	40 93 01 18 	sts	0x1801, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    59d2:	61 11       	cpse	r22, r1
    59d4:	04 c0       	rjmp	.+8      	; 0x59de <nrk_ext_int_configure+0x18>
    59d6:	80 91 69 00 	lds	r24, 0x0069
    59da:	8c 7f       	andi	r24, 0xFC	; 252
    59dc:	3d c0       	rjmp	.+122    	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    59de:	61 30       	cpi	r22, 0x01	; 1
    59e0:	49 f4       	brne	.+18     	; 0x59f4 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    59e2:	80 91 69 00 	lds	r24, 0x0069
    59e6:	8d 7f       	andi	r24, 0xFD	; 253
    59e8:	80 93 69 00 	sts	0x0069, r24
    59ec:	80 91 69 00 	lds	r24, 0x0069
    59f0:	81 60       	ori	r24, 0x01	; 1
    59f2:	32 c0       	rjmp	.+100    	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    59f4:	62 30       	cpi	r22, 0x02	; 2
    59f6:	49 f4       	brne	.+18     	; 0x5a0a <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    59f8:	80 91 69 00 	lds	r24, 0x0069
    59fc:	82 60       	ori	r24, 0x02	; 2
    59fe:	80 93 69 00 	sts	0x0069, r24
    5a02:	80 91 69 00 	lds	r24, 0x0069
    5a06:	8e 7f       	andi	r24, 0xFE	; 254
    5a08:	27 c0       	rjmp	.+78     	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    5a0a:	63 30       	cpi	r22, 0x03	; 3
    5a0c:	39 f5       	brne	.+78     	; 0x5a5c <nrk_ext_int_configure+0x96>
    5a0e:	80 91 69 00 	lds	r24, 0x0069
    5a12:	83 60       	ori	r24, 0x03	; 3
    5a14:	21 c0       	rjmp	.+66     	; 0x5a58 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    5a16:	81 30       	cpi	r24, 0x01	; 1
    5a18:	49 f5       	brne	.+82     	; 0x5a6c <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    5a1a:	50 93 00 18 	sts	0x1800, r21
    5a1e:	40 93 ff 17 	sts	0x17FF, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    5a22:	61 11       	cpse	r22, r1
    5a24:	04 c0       	rjmp	.+8      	; 0x5a2e <nrk_ext_int_configure+0x68>
    5a26:	80 91 69 00 	lds	r24, 0x0069
    5a2a:	83 7f       	andi	r24, 0xF3	; 243
    5a2c:	15 c0       	rjmp	.+42     	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5a2e:	61 30       	cpi	r22, 0x01	; 1
    5a30:	49 f4       	brne	.+18     	; 0x5a44 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    5a32:	80 91 69 00 	lds	r24, 0x0069
    5a36:	87 7f       	andi	r24, 0xF7	; 247
    5a38:	80 93 69 00 	sts	0x0069, r24
    5a3c:	80 91 69 00 	lds	r24, 0x0069
    5a40:	84 60       	ori	r24, 0x04	; 4
    5a42:	0a c0       	rjmp	.+20     	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5a44:	62 30       	cpi	r22, 0x02	; 2
    5a46:	61 f4       	brne	.+24     	; 0x5a60 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    5a48:	80 91 69 00 	lds	r24, 0x0069
    5a4c:	88 60       	ori	r24, 0x08	; 8
    5a4e:	80 93 69 00 	sts	0x0069, r24
    5a52:	80 91 69 00 	lds	r24, 0x0069
    5a56:	8b 7f       	andi	r24, 0xFB	; 251
    5a58:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    5a5c:	81 e0       	ldi	r24, 0x01	; 1
    5a5e:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5a60:	63 30       	cpi	r22, 0x03	; 3
    5a62:	e1 f7       	brne	.-8      	; 0x5a5c <nrk_ext_int_configure+0x96>
    5a64:	80 91 69 00 	lds	r24, 0x0069
    5a68:	8c 60       	ori	r24, 0x0C	; 12
    5a6a:	f6 cf       	rjmp	.-20     	; 0x5a58 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    5a6c:	82 30       	cpi	r24, 0x02	; 2
    5a6e:	31 f5       	brne	.+76     	; 0x5abc <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5a70:	50 93 04 18 	sts	0x1804, r21
    5a74:	40 93 03 18 	sts	0x1803, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5a78:	61 11       	cpse	r22, r1
    5a7a:	04 c0       	rjmp	.+8      	; 0x5a84 <nrk_ext_int_configure+0xbe>
    5a7c:	80 91 69 00 	lds	r24, 0x0069
    5a80:	8f 7c       	andi	r24, 0xCF	; 207
    5a82:	ea cf       	rjmp	.-44     	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5a84:	61 30       	cpi	r22, 0x01	; 1
    5a86:	49 f4       	brne	.+18     	; 0x5a9a <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    5a88:	80 91 69 00 	lds	r24, 0x0069
    5a8c:	8f 7d       	andi	r24, 0xDF	; 223
    5a8e:	80 93 69 00 	sts	0x0069, r24
    5a92:	80 91 69 00 	lds	r24, 0x0069
    5a96:	80 61       	ori	r24, 0x10	; 16
    5a98:	df cf       	rjmp	.-66     	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5a9a:	62 30       	cpi	r22, 0x02	; 2
    5a9c:	49 f4       	brne	.+18     	; 0x5ab0 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5a9e:	80 91 69 00 	lds	r24, 0x0069
    5aa2:	80 62       	ori	r24, 0x20	; 32
    5aa4:	80 93 69 00 	sts	0x0069, r24
    5aa8:	80 91 69 00 	lds	r24, 0x0069
    5aac:	8f 7e       	andi	r24, 0xEF	; 239
    5aae:	d4 cf       	rjmp	.-88     	; 0x5a58 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5ab0:	63 30       	cpi	r22, 0x03	; 3
    5ab2:	a1 f6       	brne	.-88     	; 0x5a5c <nrk_ext_int_configure+0x96>
    5ab4:	80 91 69 00 	lds	r24, 0x0069
    5ab8:	80 63       	ori	r24, 0x30	; 48
    5aba:	ce cf       	rjmp	.-100    	; 0x5a58 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5abc:	83 50       	subi	r24, 0x03	; 3
    5abe:	88 30       	cpi	r24, 0x08	; 8
    5ac0:	50 f4       	brcc	.+20     	; 0x5ad6 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5ac2:	80 91 68 00 	lds	r24, 0x0068
    5ac6:	81 60       	ori	r24, 0x01	; 1
    5ac8:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5acc:	50 93 06 18 	sts	0x1806, r21
    5ad0:	40 93 05 18 	sts	0x1805, r20
    5ad4:	c3 cf       	rjmp	.-122    	; 0x5a5c <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    5ad6:	8f ef       	ldi	r24, 0xFF	; 255
}
    5ad8:	08 95       	ret

00005ada <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    5ada:	1f 92       	push	r1
    5adc:	0f 92       	push	r0
    5ade:	0f b6       	in	r0, 0x3f	; 63
    5ae0:	0f 92       	push	r0
    5ae2:	11 24       	eor	r1, r1
    5ae4:	0b b6       	in	r0, 0x3b	; 59
    5ae6:	0f 92       	push	r0
    5ae8:	2f 93       	push	r18
    5aea:	3f 93       	push	r19
    5aec:	4f 93       	push	r20
    5aee:	5f 93       	push	r21
    5af0:	6f 93       	push	r22
    5af2:	7f 93       	push	r23
    5af4:	8f 93       	push	r24
    5af6:	9f 93       	push	r25
    5af8:	af 93       	push	r26
    5afa:	bf 93       	push	r27
    5afc:	ef 93       	push	r30
    5afe:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    5b00:	e0 91 05 18 	lds	r30, 0x1805
    5b04:	f0 91 06 18 	lds	r31, 0x1806
    5b08:	30 97       	sbiw	r30, 0x00	; 0
    5b0a:	11 f0       	breq	.+4      	; 0x5b10 <__vector_9+0x36>
    5b0c:	09 95       	icall
    5b0e:	04 c0       	rjmp	.+8      	; 0x5b18 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5b10:	60 e0       	ldi	r22, 0x00	; 0
    5b12:	8a e0       	ldi	r24, 0x0A	; 10
    5b14:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
	return;  	
}
    5b18:	ff 91       	pop	r31
    5b1a:	ef 91       	pop	r30
    5b1c:	bf 91       	pop	r27
    5b1e:	af 91       	pop	r26
    5b20:	9f 91       	pop	r25
    5b22:	8f 91       	pop	r24
    5b24:	7f 91       	pop	r23
    5b26:	6f 91       	pop	r22
    5b28:	5f 91       	pop	r21
    5b2a:	4f 91       	pop	r20
    5b2c:	3f 91       	pop	r19
    5b2e:	2f 91       	pop	r18
    5b30:	0f 90       	pop	r0
    5b32:	0b be       	out	0x3b, r0	; 59
    5b34:	0f 90       	pop	r0
    5b36:	0f be       	out	0x3f, r0	; 63
    5b38:	0f 90       	pop	r0
    5b3a:	1f 90       	pop	r1
    5b3c:	18 95       	reti

00005b3e <__vector_1>:


SIGNAL(INT0_vect) {
    5b3e:	1f 92       	push	r1
    5b40:	0f 92       	push	r0
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	0f 92       	push	r0
    5b46:	11 24       	eor	r1, r1
    5b48:	0b b6       	in	r0, 0x3b	; 59
    5b4a:	0f 92       	push	r0
    5b4c:	2f 93       	push	r18
    5b4e:	3f 93       	push	r19
    5b50:	4f 93       	push	r20
    5b52:	5f 93       	push	r21
    5b54:	6f 93       	push	r22
    5b56:	7f 93       	push	r23
    5b58:	8f 93       	push	r24
    5b5a:	9f 93       	push	r25
    5b5c:	af 93       	push	r26
    5b5e:	bf 93       	push	r27
    5b60:	ef 93       	push	r30
    5b62:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5b64:	e0 91 01 18 	lds	r30, 0x1801
    5b68:	f0 91 02 18 	lds	r31, 0x1802
    5b6c:	30 97       	sbiw	r30, 0x00	; 0
    5b6e:	11 f0       	breq	.+4      	; 0x5b74 <__vector_1+0x36>
    5b70:	09 95       	icall
    5b72:	04 c0       	rjmp	.+8      	; 0x5b7c <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5b74:	60 e0       	ldi	r22, 0x00	; 0
    5b76:	8a e0       	ldi	r24, 0x0A	; 10
    5b78:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
	return;  	
}
    5b7c:	ff 91       	pop	r31
    5b7e:	ef 91       	pop	r30
    5b80:	bf 91       	pop	r27
    5b82:	af 91       	pop	r26
    5b84:	9f 91       	pop	r25
    5b86:	8f 91       	pop	r24
    5b88:	7f 91       	pop	r23
    5b8a:	6f 91       	pop	r22
    5b8c:	5f 91       	pop	r21
    5b8e:	4f 91       	pop	r20
    5b90:	3f 91       	pop	r19
    5b92:	2f 91       	pop	r18
    5b94:	0f 90       	pop	r0
    5b96:	0b be       	out	0x3b, r0	; 59
    5b98:	0f 90       	pop	r0
    5b9a:	0f be       	out	0x3f, r0	; 63
    5b9c:	0f 90       	pop	r0
    5b9e:	1f 90       	pop	r1
    5ba0:	18 95       	reti

00005ba2 <__vector_2>:

SIGNAL(INT1_vect) {
    5ba2:	1f 92       	push	r1
    5ba4:	0f 92       	push	r0
    5ba6:	0f b6       	in	r0, 0x3f	; 63
    5ba8:	0f 92       	push	r0
    5baa:	11 24       	eor	r1, r1
    5bac:	0b b6       	in	r0, 0x3b	; 59
    5bae:	0f 92       	push	r0
    5bb0:	2f 93       	push	r18
    5bb2:	3f 93       	push	r19
    5bb4:	4f 93       	push	r20
    5bb6:	5f 93       	push	r21
    5bb8:	6f 93       	push	r22
    5bba:	7f 93       	push	r23
    5bbc:	8f 93       	push	r24
    5bbe:	9f 93       	push	r25
    5bc0:	af 93       	push	r26
    5bc2:	bf 93       	push	r27
    5bc4:	ef 93       	push	r30
    5bc6:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5bc8:	e0 91 ff 17 	lds	r30, 0x17FF
    5bcc:	f0 91 00 18 	lds	r31, 0x1800
    5bd0:	30 97       	sbiw	r30, 0x00	; 0
    5bd2:	11 f0       	breq	.+4      	; 0x5bd8 <__vector_2+0x36>
    5bd4:	09 95       	icall
    5bd6:	04 c0       	rjmp	.+8      	; 0x5be0 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5bd8:	60 e0       	ldi	r22, 0x00	; 0
    5bda:	8a e0       	ldi	r24, 0x0A	; 10
    5bdc:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
	return;  	
}
    5be0:	ff 91       	pop	r31
    5be2:	ef 91       	pop	r30
    5be4:	bf 91       	pop	r27
    5be6:	af 91       	pop	r26
    5be8:	9f 91       	pop	r25
    5bea:	8f 91       	pop	r24
    5bec:	7f 91       	pop	r23
    5bee:	6f 91       	pop	r22
    5bf0:	5f 91       	pop	r21
    5bf2:	4f 91       	pop	r20
    5bf4:	3f 91       	pop	r19
    5bf6:	2f 91       	pop	r18
    5bf8:	0f 90       	pop	r0
    5bfa:	0b be       	out	0x3b, r0	; 59
    5bfc:	0f 90       	pop	r0
    5bfe:	0f be       	out	0x3f, r0	; 63
    5c00:	0f 90       	pop	r0
    5c02:	1f 90       	pop	r1
    5c04:	18 95       	reti

00005c06 <__vector_3>:

SIGNAL(INT2_vect) {
    5c06:	1f 92       	push	r1
    5c08:	0f 92       	push	r0
    5c0a:	0f b6       	in	r0, 0x3f	; 63
    5c0c:	0f 92       	push	r0
    5c0e:	11 24       	eor	r1, r1
    5c10:	0b b6       	in	r0, 0x3b	; 59
    5c12:	0f 92       	push	r0
    5c14:	2f 93       	push	r18
    5c16:	3f 93       	push	r19
    5c18:	4f 93       	push	r20
    5c1a:	5f 93       	push	r21
    5c1c:	6f 93       	push	r22
    5c1e:	7f 93       	push	r23
    5c20:	8f 93       	push	r24
    5c22:	9f 93       	push	r25
    5c24:	af 93       	push	r26
    5c26:	bf 93       	push	r27
    5c28:	ef 93       	push	r30
    5c2a:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5c2c:	e0 91 03 18 	lds	r30, 0x1803
    5c30:	f0 91 04 18 	lds	r31, 0x1804
    5c34:	30 97       	sbiw	r30, 0x00	; 0
    5c36:	11 f0       	breq	.+4      	; 0x5c3c <__vector_3+0x36>
    5c38:	09 95       	icall
    5c3a:	04 c0       	rjmp	.+8      	; 0x5c44 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5c3c:	60 e0       	ldi	r22, 0x00	; 0
    5c3e:	8a e0       	ldi	r24, 0x0A	; 10
    5c40:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <nrk_kernel_error_add>
	return;  	
}
    5c44:	ff 91       	pop	r31
    5c46:	ef 91       	pop	r30
    5c48:	bf 91       	pop	r27
    5c4a:	af 91       	pop	r26
    5c4c:	9f 91       	pop	r25
    5c4e:	8f 91       	pop	r24
    5c50:	7f 91       	pop	r23
    5c52:	6f 91       	pop	r22
    5c54:	5f 91       	pop	r21
    5c56:	4f 91       	pop	r20
    5c58:	3f 91       	pop	r19
    5c5a:	2f 91       	pop	r18
    5c5c:	0f 90       	pop	r0
    5c5e:	0b be       	out	0x3b, r0	; 59
    5c60:	0f 90       	pop	r0
    5c62:	0f be       	out	0x3f, r0	; 63
    5c64:	0f 90       	pop	r0
    5c66:	1f 90       	pop	r1
    5c68:	18 95       	reti

00005c6a <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    5c6a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5c6e:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5c70:	84 b7       	in	r24, 0x34	; 52
    5c72:	87 7f       	andi	r24, 0xF7	; 247
    5c74:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5c76:	e0 e6       	ldi	r30, 0x60	; 96
    5c78:	f0 e0       	ldi	r31, 0x00	; 0
    5c7a:	80 81       	ld	r24, Z
    5c7c:	88 61       	ori	r24, 0x18	; 24
    5c7e:	80 83       	st	Z, r24
WDTCSR = 0;
    5c80:	10 82       	st	Z, r1
nrk_int_enable();
    5c82:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <nrk_int_enable>

00005c86 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    5c86:	0e 94 aa 1a 	call	0x3554	; 0x3554 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5c8a:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5c8c:	84 b7       	in	r24, 0x34	; 52
    5c8e:	87 7f       	andi	r24, 0xF7	; 247
    5c90:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5c92:	e0 e6       	ldi	r30, 0x60	; 96
    5c94:	f0 e0       	ldi	r31, 0x00	; 0
    5c96:	80 81       	ld	r24, Z
    5c98:	88 61       	ori	r24, 0x18	; 24
    5c9a:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5c9c:	8d e0       	ldi	r24, 0x0D	; 13
    5c9e:	80 83       	st	Z, r24
nrk_int_enable();
    5ca0:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <nrk_int_enable>

00005ca4 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5ca4:	04 b6       	in	r0, 0x34	; 52
    5ca6:	03 fe       	sbrs	r0, 3
    5ca8:	02 c0       	rjmp	.+4      	; 0x5cae <nrk_watchdog_check+0xa>
return NRK_ERROR;
    5caa:	8f ef       	ldi	r24, 0xFF	; 255
    5cac:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5cae:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5cb0:	08 95       	ret

00005cb2 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5cb2:	a8 95       	wdr
    5cb4:	08 95       	ret

00005cb6 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5cb6:	08 95       	ret

00005cb8 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5cb8:	83 b7       	in	r24, 0x33	; 51
    5cba:	81 7f       	andi	r24, 0xF1	; 241
    5cbc:	86 60       	ori	r24, 0x06	; 6
    5cbe:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5cc0:	83 b7       	in	r24, 0x33	; 51
    5cc2:	81 60       	ori	r24, 0x01	; 1
    5cc4:	83 bf       	out	0x33, r24	; 51
    5cc6:	88 95       	sleep
    5cc8:	83 b7       	in	r24, 0x33	; 51
    5cca:	8e 7f       	andi	r24, 0xFE	; 254
    5ccc:	83 bf       	out	0x33, r24	; 51
    5cce:	08 95       	ret

00005cd0 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5cd0:	83 b7       	in	r24, 0x33	; 51
    5cd2:	81 7f       	andi	r24, 0xF1	; 241
    5cd4:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5cd6:	83 b7       	in	r24, 0x33	; 51
    5cd8:	81 60       	ori	r24, 0x01	; 1
    5cda:	83 bf       	out	0x33, r24	; 51
    5cdc:	88 95       	sleep
    5cde:	83 b7       	in	r24, 0x33	; 51
    5ce0:	8e 7f       	andi	r24, 0xFE	; 254
    5ce2:	83 bf       	out	0x33, r24	; 51
    5ce4:	08 95       	ret

00005ce6 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	76 83       	std	Z+6, r23	; 0x06
    5cea:	65 83       	std	Z+5, r22	; 0x05
    5cec:	08 95       	ret

00005cee <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    5cee:	ef 92       	push	r14
    5cf0:	ff 92       	push	r15
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	cf 93       	push	r28
    5cf8:	df 93       	push	r29
    5cfa:	8c 01       	movw	r16, r24
    5cfc:	7b 01       	movw	r14, r22
    5cfe:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    5d00:	40 32       	cpi	r20, 0x20	; 32
    5d02:	51 05       	cpc	r21, r1
    5d04:	18 f4       	brcc	.+6      	; 0x5d0c <nrk_task_set_stk+0x1e>
    5d06:	81 e1       	ldi	r24, 0x11	; 17
    5d08:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    5d0c:	21 97       	sbiw	r28, 0x01	; 1
    5d0e:	ce 0d       	add	r28, r14
    5d10:	df 1d       	adc	r29, r15
    5d12:	f8 01       	movw	r30, r16
    5d14:	d2 83       	std	Z+2, r29	; 0x02
    5d16:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    5d18:	f4 82       	std	Z+4, r15	; 0x04
    5d1a:	e3 82       	std	Z+3, r14	; 0x03

}
    5d1c:	df 91       	pop	r29
    5d1e:	cf 91       	pop	r28
    5d20:	1f 91       	pop	r17
    5d22:	0f 91       	pop	r16
    5d24:	ff 90       	pop	r15
    5d26:	ef 90       	pop	r14
    5d28:	08 95       	ret

00005d2a <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    5d2a:	25 e5       	ldi	r18, 0x55	; 85
    5d2c:	fa 01       	movw	r30, r20
    5d2e:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    5d30:	fb 01       	movw	r30, r22
    5d32:	32 97       	sbiw	r30, 0x02	; 2
    5d34:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5d36:	31 96       	adiw	r30, 0x01	; 1
    5d38:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    5d3a:	33 97       	sbiw	r30, 0x03	; 3
    5d3c:	11 82       	std	Z+1, r1	; 0x01
    5d3e:	10 82       	st	Z, r1
    *(--stk) = 0;       
    5d40:	32 97       	sbiw	r30, 0x02	; 2
    5d42:	11 82       	std	Z+1, r1	; 0x01
    5d44:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5d46:	32 97       	sbiw	r30, 0x02	; 2
    5d48:	11 82       	std	Z+1, r1	; 0x01
    5d4a:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5d4c:	32 97       	sbiw	r30, 0x02	; 2
    5d4e:	11 82       	std	Z+1, r1	; 0x01
    5d50:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5d52:	32 97       	sbiw	r30, 0x02	; 2
    5d54:	11 82       	std	Z+1, r1	; 0x01
    5d56:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5d58:	32 97       	sbiw	r30, 0x02	; 2
    5d5a:	11 82       	std	Z+1, r1	; 0x01
    5d5c:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5d5e:	32 97       	sbiw	r30, 0x02	; 2
    5d60:	11 82       	std	Z+1, r1	; 0x01
    5d62:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d64:	32 97       	sbiw	r30, 0x02	; 2
    5d66:	11 82       	std	Z+1, r1	; 0x01
    5d68:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5d6a:	32 97       	sbiw	r30, 0x02	; 2
    5d6c:	11 82       	std	Z+1, r1	; 0x01
    5d6e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d70:	32 97       	sbiw	r30, 0x02	; 2
    5d72:	11 82       	std	Z+1, r1	; 0x01
    5d74:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d76:	32 97       	sbiw	r30, 0x02	; 2
    5d78:	11 82       	std	Z+1, r1	; 0x01
    5d7a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d7c:	32 97       	sbiw	r30, 0x02	; 2
    5d7e:	11 82       	std	Z+1, r1	; 0x01
    5d80:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d82:	32 97       	sbiw	r30, 0x02	; 2
    5d84:	11 82       	std	Z+1, r1	; 0x01
    5d86:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d88:	32 97       	sbiw	r30, 0x02	; 2
    5d8a:	11 82       	std	Z+1, r1	; 0x01
    5d8c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d8e:	32 97       	sbiw	r30, 0x02	; 2
    5d90:	11 82       	std	Z+1, r1	; 0x01
    5d92:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5d94:	32 97       	sbiw	r30, 0x02	; 2
    5d96:	11 82       	std	Z+1, r1	; 0x01
    5d98:	10 82       	st	Z, r1
    *(--stk) = 0;
    5d9a:	cb 01       	movw	r24, r22
    5d9c:	84 97       	sbiw	r24, 0x24	; 36
    5d9e:	fc 01       	movw	r30, r24
    5da0:	11 82       	std	Z+1, r1	; 0x01
    5da2:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5da4:	08 95       	ret

00005da6 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5da6:	85 e5       	ldi	r24, 0x55	; 85
    5da8:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5dac:	ee ef       	ldi	r30, 0xFE	; 254
    5dae:	f1 e4       	ldi	r31, 0x41	; 65
    5db0:	f0 93 d7 12 	sts	0x12D7, r31
    5db4:	e0 93 d6 12 	sts	0x12D6, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5db8:	87 e5       	ldi	r24, 0x57	; 87
    5dba:	9c e1       	ldi	r25, 0x1C	; 28
    5dbc:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5dbe:	80 93 ff 41 	sts	0x41FF, r24
    5dc2:	08 95       	ret

00005dc4 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5dc4:	87 e5       	ldi	r24, 0x57	; 87
    5dc6:	9c e1       	ldi	r25, 0x1C	; 28
    5dc8:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5dcc:	80 93 ff 41 	sts	0x41FF, r24
    5dd0:	08 95       	ret

00005dd2 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5dd2:	0e 94 16 2b 	call	0x562c	; 0x562c <_nrk_setup_timer>
  nrk_int_enable();  
    5dd6:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <nrk_int_enable>

00005dda <nrk_start_high_ready_task>:
    5dda:	a0 91 bf 17 	lds	r26, 0x17BF
    5dde:	b0 91 c0 17 	lds	r27, 0x17C0
    5de2:	cd 91       	ld	r28, X+
    5de4:	cd bf       	out	0x3d, r28	; 61
    5de6:	dd 91       	ld	r29, X+
    5de8:	de bf       	out	0x3e, r29	; 62
    5dea:	ff 91       	pop	r31
    5dec:	ef 91       	pop	r30
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	bf 91       	pop	r27
    5df4:	af 91       	pop	r26
    5df6:	9f 91       	pop	r25
    5df8:	8f 91       	pop	r24
    5dfa:	7f 91       	pop	r23
    5dfc:	6f 91       	pop	r22
    5dfe:	5f 91       	pop	r21
    5e00:	4f 91       	pop	r20
    5e02:	3f 91       	pop	r19
    5e04:	2f 91       	pop	r18
    5e06:	1f 91       	pop	r17
    5e08:	0f 91       	pop	r16
    5e0a:	ff 90       	pop	r15
    5e0c:	ef 90       	pop	r14
    5e0e:	df 90       	pop	r13
    5e10:	cf 90       	pop	r12
    5e12:	bf 90       	pop	r11
    5e14:	af 90       	pop	r10
    5e16:	9f 90       	pop	r9
    5e18:	8f 90       	pop	r8
    5e1a:	7f 90       	pop	r7
    5e1c:	6f 90       	pop	r6
    5e1e:	5f 90       	pop	r5
    5e20:	4f 90       	pop	r4
    5e22:	3f 90       	pop	r3
    5e24:	2f 90       	pop	r2
    5e26:	1f 90       	pop	r1
    5e28:	0f 90       	pop	r0
    5e2a:	0f be       	out	0x3f, r0	; 63
    5e2c:	0f 90       	pop	r0
    5e2e:	18 95       	reti

00005e30 <main>:
uint8_t print_incoming;
uint8_t blink_leds;

int main () {
  // setup ports/uart
  nrk_setup_ports ();
    5e30:	0e 94 55 16 	call	0x2caa	; 0x2caa <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    5e34:	80 e1       	ldi	r24, 0x10	; 16
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	0e 94 cb 19 	call	0x3396	; 0x3396 <nrk_setup_uart>
  nrk_init ();
    5e3c:	0e 94 b1 1a 	call	0x3562	; 0x3562 <nrk_init>

  // clear all LEDs
  nrk_led_clr(0);
    5e40:	80 e0       	ldi	r24, 0x00	; 0
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
  nrk_led_clr(1);
    5e48:	81 e0       	ldi	r24, 0x01	; 1
    5e4a:	90 e0       	ldi	r25, 0x00	; 0
    5e4c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
  nrk_led_clr(2);
    5e50:	82 e0       	ldi	r24, 0x02	; 2
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
  nrk_led_clr(3);
    5e58:	83 e0       	ldi	r24, 0x03	; 3
    5e5a:	90 e0       	ldi	r25, 0x00	; 0
    5e5c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <nrk_led_clr>
    
  // print flag
  print_incoming = 1;
    5e60:	81 e0       	ldi	r24, 0x01	; 1
    5e62:	80 93 5c 0c 	sts	0x0C5C, r24
  blink_leds = 1;
    5e66:	80 93 79 11 	sts	0x1179, r24

  // mutexs
  net_tx_buf_mux    = nrk_sem_create(1, 6);
    5e6a:	66 e0       	ldi	r22, 0x06	; 6
    5e6c:	0e 94 ab 20 	call	0x4156	; 0x4156 <nrk_sem_create>
    5e70:	90 93 f0 15 	sts	0x15F0, r25
    5e74:	80 93 ef 15 	sts	0x15EF, r24
  cmd_tx_queue_mux  = nrk_sem_create(1, 6);
    5e78:	66 e0       	ldi	r22, 0x06	; 6
    5e7a:	81 e0       	ldi	r24, 0x01	; 1
    5e7c:	0e 94 ab 20 	call	0x4156	; 0x4156 <nrk_sem_create>
    5e80:	90 93 39 09 	sts	0x0939, r25
    5e84:	80 93 38 09 	sts	0x0938, r24
  node_tx_queue_mux = nrk_sem_create(1, 6);
    5e88:	66 e0       	ldi	r22, 0x06	; 6
    5e8a:	81 e0       	ldi	r24, 0x01	; 1
    5e8c:	0e 94 ab 20 	call	0x4156	; 0x4156 <nrk_sem_create>
    5e90:	90 93 de 0e 	sts	0x0EDE, r25
    5e94:	80 93 dd 0e 	sts	0x0EDD, r24
  serv_tx_queue_mux = nrk_sem_create(1, 6);
    5e98:	66 e0       	ldi	r22, 0x06	; 6
    5e9a:	81 e0       	ldi	r24, 0x01	; 1
    5e9c:	0e 94 ab 20 	call	0x4156	; 0x4156 <nrk_sem_create>
    5ea0:	90 93 34 05 	sts	0x0534, r25
    5ea4:	80 93 33 05 	sts	0x0533, r24
  hand_rx_queue_mux = nrk_sem_create(1, 6);
    5ea8:	66 e0       	ldi	r22, 0x06	; 6
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	0e 94 ab 20 	call	0x4156	; 0x4156 <nrk_sem_create>
    5eb0:	90 93 03 0f 	sts	0x0F03, r25
    5eb4:	80 93 02 0f 	sts	0x0F02, r24

  // packet queues
  packet_queue_init(&cmd_tx_queue);
    5eb8:	82 ee       	ldi	r24, 0xE2	; 226
    5eba:	92 e1       	ldi	r25, 0x12	; 18
    5ebc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <packet_queue_init>
  packet_queue_init(&node_tx_queue);
    5ec0:	80 ec       	ldi	r24, 0xC0	; 192
    5ec2:	91 e1       	ldi	r25, 0x11	; 17
    5ec4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <packet_queue_init>
  packet_queue_init(&serv_tx_queue);
    5ec8:	8b e4       	ldi	r24, 0x4B	; 75
    5eca:	92 e1       	ldi	r25, 0x12	; 18
    5ecc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <packet_queue_init>
  packet_queue_init(&hand_rx_queue);
    5ed0:	8a e3       	ldi	r24, 0x3A	; 58
    5ed2:	99 e0       	ldi	r25, 0x09	; 9
    5ed4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <packet_queue_init>

  nrk_time_set (0, 0);
    5ed8:	20 e0       	ldi	r18, 0x00	; 0
    5eda:	30 e0       	ldi	r19, 0x00	; 0
    5edc:	a9 01       	movw	r20, r18
    5ede:	60 e0       	ldi	r22, 0x00	; 0
    5ee0:	70 e0       	ldi	r23, 0x00	; 0
    5ee2:	cb 01       	movw	r24, r22
    5ee4:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <nrk_time_set>
  bmac_task_config();
    5ee8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <bmac_task_config>
  nrk_create_taskset();
    5eec:	0e 94 0b 06 	call	0xc16	; 0xc16 <nrk_create_taskset>
  bmac_init (13);
    5ef0:	8d e0       	ldi	r24, 0x0D	; 13
    5ef2:	0e 94 cb 07 	call	0xf96	; 0xf96 <bmac_init>
  nrk_start ();
    5ef6:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <nrk_start>
  return 0;
}
    5efa:	80 e0       	ldi	r24, 0x00	; 0
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	08 95       	ret

00005f00 <vfprintf>:
    5f00:	6f 92       	push	r6
    5f02:	7f 92       	push	r7
    5f04:	8f 92       	push	r8
    5f06:	9f 92       	push	r9
    5f08:	af 92       	push	r10
    5f0a:	bf 92       	push	r11
    5f0c:	cf 92       	push	r12
    5f0e:	df 92       	push	r13
    5f10:	ef 92       	push	r14
    5f12:	ff 92       	push	r15
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	cd b7       	in	r28, 0x3d	; 61
    5f1e:	de b7       	in	r29, 0x3e	; 62
    5f20:	2c 97       	sbiw	r28, 0x0c	; 12
    5f22:	0f b6       	in	r0, 0x3f	; 63
    5f24:	f8 94       	cli
    5f26:	de bf       	out	0x3e, r29	; 62
    5f28:	0f be       	out	0x3f, r0	; 63
    5f2a:	cd bf       	out	0x3d, r28	; 61
    5f2c:	6c 01       	movw	r12, r24
    5f2e:	5b 01       	movw	r10, r22
    5f30:	7a 01       	movw	r14, r20
    5f32:	fc 01       	movw	r30, r24
    5f34:	17 82       	std	Z+7, r1	; 0x07
    5f36:	16 82       	std	Z+6, r1	; 0x06
    5f38:	83 81       	ldd	r24, Z+3	; 0x03
    5f3a:	81 ff       	sbrs	r24, 1
    5f3c:	0e c1       	rjmp	.+540    	; 0x615a <vfprintf+0x25a>
    5f3e:	ce 01       	movw	r24, r28
    5f40:	01 96       	adiw	r24, 0x01	; 1
    5f42:	4c 01       	movw	r8, r24
    5f44:	f6 01       	movw	r30, r12
    5f46:	03 81       	ldd	r16, Z+3	; 0x03
    5f48:	f5 01       	movw	r30, r10
    5f4a:	03 fd       	sbrc	r16, 3
    5f4c:	15 91       	lpm	r17, Z+
    5f4e:	03 ff       	sbrs	r16, 3
    5f50:	11 91       	ld	r17, Z+
    5f52:	5f 01       	movw	r10, r30
    5f54:	11 23       	and	r17, r17
    5f56:	09 f4       	brne	.+2      	; 0x5f5a <vfprintf+0x5a>
    5f58:	fc c0       	rjmp	.+504    	; 0x6152 <vfprintf+0x252>
    5f5a:	15 32       	cpi	r17, 0x25	; 37
    5f5c:	49 f4       	brne	.+18     	; 0x5f70 <vfprintf+0x70>
    5f5e:	03 fd       	sbrc	r16, 3
    5f60:	15 91       	lpm	r17, Z+
    5f62:	03 ff       	sbrs	r16, 3
    5f64:	11 91       	ld	r17, Z+
    5f66:	5f 01       	movw	r10, r30
    5f68:	15 32       	cpi	r17, 0x25	; 37
    5f6a:	11 f0       	breq	.+4      	; 0x5f70 <vfprintf+0x70>
    5f6c:	20 e0       	ldi	r18, 0x00	; 0
    5f6e:	1b c0       	rjmp	.+54     	; 0x5fa6 <vfprintf+0xa6>
    5f70:	b6 01       	movw	r22, r12
    5f72:	81 2f       	mov	r24, r17
    5f74:	90 e0       	ldi	r25, 0x00	; 0
    5f76:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    5f7a:	37 01       	movw	r6, r14
    5f7c:	73 01       	movw	r14, r6
    5f7e:	e2 cf       	rjmp	.-60     	; 0x5f44 <vfprintf+0x44>
    5f80:	11 23       	and	r17, r17
    5f82:	09 f4       	brne	.+2      	; 0x5f86 <vfprintf+0x86>
    5f84:	e6 c0       	rjmp	.+460    	; 0x6152 <vfprintf+0x252>
    5f86:	61 2f       	mov	r22, r17
    5f88:	70 e0       	ldi	r23, 0x00	; 0
    5f8a:	8e e9       	ldi	r24, 0x9E	; 158
    5f8c:	95 e0       	ldi	r25, 0x05	; 5
    5f8e:	2c 87       	std	Y+12, r18	; 0x0c
    5f90:	0e 94 18 32 	call	0x6430	; 0x6430 <strchr_P>
    5f94:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f96:	89 2b       	or	r24, r25
    5f98:	49 f0       	breq	.+18     	; 0x5fac <vfprintf+0xac>
    5f9a:	f5 01       	movw	r30, r10
    5f9c:	03 fd       	sbrc	r16, 3
    5f9e:	15 91       	lpm	r17, Z+
    5fa0:	03 ff       	sbrs	r16, 3
    5fa2:	11 91       	ld	r17, Z+
    5fa4:	5f 01       	movw	r10, r30
    5fa6:	27 ff       	sbrs	r18, 7
    5fa8:	eb cf       	rjmp	.-42     	; 0x5f80 <vfprintf+0x80>
    5faa:	09 c0       	rjmp	.+18     	; 0x5fbe <vfprintf+0xbe>
    5fac:	13 32       	cpi	r17, 0x23	; 35
    5fae:	29 f0       	breq	.+10     	; 0x5fba <vfprintf+0xba>
    5fb0:	1c 36       	cpi	r17, 0x6C	; 108
    5fb2:	09 f0       	breq	.+2      	; 0x5fb6 <vfprintf+0xb6>
    5fb4:	d5 c0       	rjmp	.+426    	; 0x6160 <vfprintf+0x260>
    5fb6:	20 68       	ori	r18, 0x80	; 128
    5fb8:	f0 cf       	rjmp	.-32     	; 0x5f9a <vfprintf+0x9a>
    5fba:	20 e1       	ldi	r18, 0x10	; 16
    5fbc:	ee cf       	rjmp	.-36     	; 0x5f9a <vfprintf+0x9a>
    5fbe:	02 2f       	mov	r16, r18
    5fc0:	11 23       	and	r17, r17
    5fc2:	09 f4       	brne	.+2      	; 0x5fc6 <vfprintf+0xc6>
    5fc4:	c6 c0       	rjmp	.+396    	; 0x6152 <vfprintf+0x252>
    5fc6:	61 2f       	mov	r22, r17
    5fc8:	70 e0       	ldi	r23, 0x00	; 0
    5fca:	87 e9       	ldi	r24, 0x97	; 151
    5fcc:	95 e0       	ldi	r25, 0x05	; 5
    5fce:	2c 87       	std	Y+12, r18	; 0x0c
    5fd0:	0e 94 18 32 	call	0x6430	; 0x6430 <strchr_P>
    5fd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    5fd6:	89 2b       	or	r24, r25
    5fd8:	41 f0       	breq	.+16     	; 0x5fea <vfprintf+0xea>
    5fda:	37 01       	movw	r6, r14
    5fdc:	f4 e0       	ldi	r31, 0x04	; 4
    5fde:	6f 0e       	add	r6, r31
    5fe0:	71 1c       	adc	r7, r1
    5fe2:	b6 01       	movw	r22, r12
    5fe4:	8f e3       	ldi	r24, 0x3F	; 63
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	11 c0       	rjmp	.+34     	; 0x600c <vfprintf+0x10c>
    5fea:	13 36       	cpi	r17, 0x63	; 99
    5fec:	39 f0       	breq	.+14     	; 0x5ffc <vfprintf+0xfc>
    5fee:	13 37       	cpi	r17, 0x73	; 115
    5ff0:	81 f0       	breq	.+32     	; 0x6012 <vfprintf+0x112>
    5ff2:	13 35       	cpi	r17, 0x53	; 83
    5ff4:	19 f5       	brne	.+70     	; 0x603c <vfprintf+0x13c>
    5ff6:	02 2f       	mov	r16, r18
    5ff8:	01 60       	ori	r16, 0x01	; 1
    5ffa:	0b c0       	rjmp	.+22     	; 0x6012 <vfprintf+0x112>
    5ffc:	37 01       	movw	r6, r14
    5ffe:	82 e0       	ldi	r24, 0x02	; 2
    6000:	68 0e       	add	r6, r24
    6002:	71 1c       	adc	r7, r1
    6004:	b6 01       	movw	r22, r12
    6006:	f7 01       	movw	r30, r14
    6008:	80 81       	ld	r24, Z
    600a:	91 81       	ldd	r25, Z+1	; 0x01
    600c:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    6010:	b5 cf       	rjmp	.-150    	; 0x5f7c <vfprintf+0x7c>
    6012:	37 01       	movw	r6, r14
    6014:	f2 e0       	ldi	r31, 0x02	; 2
    6016:	6f 0e       	add	r6, r31
    6018:	71 1c       	adc	r7, r1
    601a:	f7 01       	movw	r30, r14
    601c:	e0 80       	ld	r14, Z
    601e:	f1 80       	ldd	r15, Z+1	; 0x01
    6020:	f7 01       	movw	r30, r14
    6022:	00 fd       	sbrc	r16, 0
    6024:	85 91       	lpm	r24, Z+
    6026:	00 ff       	sbrs	r16, 0
    6028:	81 91       	ld	r24, Z+
    602a:	7f 01       	movw	r14, r30
    602c:	88 23       	and	r24, r24
    602e:	09 f4       	brne	.+2      	; 0x6032 <vfprintf+0x132>
    6030:	a5 cf       	rjmp	.-182    	; 0x5f7c <vfprintf+0x7c>
    6032:	b6 01       	movw	r22, r12
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    603a:	f2 cf       	rjmp	.-28     	; 0x6020 <vfprintf+0x120>
    603c:	14 36       	cpi	r17, 0x64	; 100
    603e:	11 f0       	breq	.+4      	; 0x6044 <vfprintf+0x144>
    6040:	19 36       	cpi	r17, 0x69	; 105
    6042:	29 f5       	brne	.+74     	; 0x608e <vfprintf+0x18e>
    6044:	37 01       	movw	r6, r14
    6046:	27 ff       	sbrs	r18, 7
    6048:	09 c0       	rjmp	.+18     	; 0x605c <vfprintf+0x15c>
    604a:	f4 e0       	ldi	r31, 0x04	; 4
    604c:	6f 0e       	add	r6, r31
    604e:	71 1c       	adc	r7, r1
    6050:	f7 01       	movw	r30, r14
    6052:	60 81       	ld	r22, Z
    6054:	71 81       	ldd	r23, Z+1	; 0x01
    6056:	82 81       	ldd	r24, Z+2	; 0x02
    6058:	93 81       	ldd	r25, Z+3	; 0x03
    605a:	0a c0       	rjmp	.+20     	; 0x6070 <vfprintf+0x170>
    605c:	f2 e0       	ldi	r31, 0x02	; 2
    605e:	6f 0e       	add	r6, r31
    6060:	71 1c       	adc	r7, r1
    6062:	f7 01       	movw	r30, r14
    6064:	60 81       	ld	r22, Z
    6066:	71 81       	ldd	r23, Z+1	; 0x01
    6068:	88 27       	eor	r24, r24
    606a:	77 fd       	sbrc	r23, 7
    606c:	80 95       	com	r24
    606e:	98 2f       	mov	r25, r24
    6070:	02 2f       	mov	r16, r18
    6072:	0f 7e       	andi	r16, 0xEF	; 239
    6074:	97 ff       	sbrs	r25, 7
    6076:	08 c0       	rjmp	.+16     	; 0x6088 <vfprintf+0x188>
    6078:	90 95       	com	r25
    607a:	80 95       	com	r24
    607c:	70 95       	com	r23
    607e:	61 95       	neg	r22
    6080:	7f 4f       	sbci	r23, 0xFF	; 255
    6082:	8f 4f       	sbci	r24, 0xFF	; 255
    6084:	9f 4f       	sbci	r25, 0xFF	; 255
    6086:	00 64       	ori	r16, 0x40	; 64
    6088:	2a e0       	ldi	r18, 0x0A	; 10
    608a:	30 e0       	ldi	r19, 0x00	; 0
    608c:	33 c0       	rjmp	.+102    	; 0x60f4 <vfprintf+0x1f4>
    608e:	10 37       	cpi	r17, 0x70	; 112
    6090:	99 f0       	breq	.+38     	; 0x60b8 <vfprintf+0x1b8>
    6092:	40 f4       	brcc	.+16     	; 0x60a4 <vfprintf+0x1a4>
    6094:	18 35       	cpi	r17, 0x58	; 88
    6096:	b1 f0       	breq	.+44     	; 0x60c4 <vfprintf+0x1c4>
    6098:	1f 36       	cpi	r17, 0x6F	; 111
    609a:	09 f0       	breq	.+2      	; 0x609e <vfprintf+0x19e>
    609c:	5a c0       	rjmp	.+180    	; 0x6152 <vfprintf+0x252>
    609e:	28 e0       	ldi	r18, 0x08	; 8
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	14 c0       	rjmp	.+40     	; 0x60cc <vfprintf+0x1cc>
    60a4:	15 37       	cpi	r17, 0x75	; 117
    60a6:	19 f0       	breq	.+6      	; 0x60ae <vfprintf+0x1ae>
    60a8:	18 37       	cpi	r17, 0x78	; 120
    60aa:	41 f0       	breq	.+16     	; 0x60bc <vfprintf+0x1bc>
    60ac:	52 c0       	rjmp	.+164    	; 0x6152 <vfprintf+0x252>
    60ae:	02 2f       	mov	r16, r18
    60b0:	0f 7e       	andi	r16, 0xEF	; 239
    60b2:	2a e0       	ldi	r18, 0x0A	; 10
    60b4:	30 e0       	ldi	r19, 0x00	; 0
    60b6:	0a c0       	rjmp	.+20     	; 0x60cc <vfprintf+0x1cc>
    60b8:	02 2f       	mov	r16, r18
    60ba:	00 61       	ori	r16, 0x10	; 16
    60bc:	04 62       	ori	r16, 0x24	; 36
    60be:	20 e1       	ldi	r18, 0x10	; 16
    60c0:	30 e0       	ldi	r19, 0x00	; 0
    60c2:	04 c0       	rjmp	.+8      	; 0x60cc <vfprintf+0x1cc>
    60c4:	02 2f       	mov	r16, r18
    60c6:	04 60       	ori	r16, 0x04	; 4
    60c8:	20 e1       	ldi	r18, 0x10	; 16
    60ca:	32 e0       	ldi	r19, 0x02	; 2
    60cc:	37 01       	movw	r6, r14
    60ce:	07 ff       	sbrs	r16, 7
    60d0:	09 c0       	rjmp	.+18     	; 0x60e4 <vfprintf+0x1e4>
    60d2:	f4 e0       	ldi	r31, 0x04	; 4
    60d4:	6f 0e       	add	r6, r31
    60d6:	71 1c       	adc	r7, r1
    60d8:	f7 01       	movw	r30, r14
    60da:	60 81       	ld	r22, Z
    60dc:	71 81       	ldd	r23, Z+1	; 0x01
    60de:	82 81       	ldd	r24, Z+2	; 0x02
    60e0:	93 81       	ldd	r25, Z+3	; 0x03
    60e2:	08 c0       	rjmp	.+16     	; 0x60f4 <vfprintf+0x1f4>
    60e4:	f2 e0       	ldi	r31, 0x02	; 2
    60e6:	6f 0e       	add	r6, r31
    60e8:	71 1c       	adc	r7, r1
    60ea:	f7 01       	movw	r30, r14
    60ec:	60 81       	ld	r22, Z
    60ee:	71 81       	ldd	r23, Z+1	; 0x01
    60f0:	80 e0       	ldi	r24, 0x00	; 0
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	a4 01       	movw	r20, r8
    60f6:	0e 94 6f 33 	call	0x66de	; 0x66de <__ultoa_invert>
    60fa:	18 2f       	mov	r17, r24
    60fc:	18 19       	sub	r17, r8
    60fe:	06 ff       	sbrs	r16, 6
    6100:	05 c0       	rjmp	.+10     	; 0x610c <vfprintf+0x20c>
    6102:	b6 01       	movw	r22, r12
    6104:	8d e2       	ldi	r24, 0x2D	; 45
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    610c:	04 ff       	sbrs	r16, 4
    610e:	15 c0       	rjmp	.+42     	; 0x613a <vfprintf+0x23a>
    6110:	fe 01       	movw	r30, r28
    6112:	e1 0f       	add	r30, r17
    6114:	f1 1d       	adc	r31, r1
    6116:	80 81       	ld	r24, Z
    6118:	80 33       	cpi	r24, 0x30	; 48
    611a:	79 f0       	breq	.+30     	; 0x613a <vfprintf+0x23a>
    611c:	b6 01       	movw	r22, r12
    611e:	80 e3       	ldi	r24, 0x30	; 48
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    6126:	02 ff       	sbrs	r16, 2
    6128:	08 c0       	rjmp	.+16     	; 0x613a <vfprintf+0x23a>
    612a:	00 72       	andi	r16, 0x20	; 32
    612c:	80 2f       	mov	r24, r16
    612e:	90 e0       	ldi	r25, 0x00	; 0
    6130:	b6 01       	movw	r22, r12
    6132:	88 5a       	subi	r24, 0xA8	; 168
    6134:	9f 4f       	sbci	r25, 0xFF	; 255
    6136:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    613a:	11 50       	subi	r17, 0x01	; 1
    613c:	f4 01       	movw	r30, r8
    613e:	e1 0f       	add	r30, r17
    6140:	f1 1d       	adc	r31, r1
    6142:	80 81       	ld	r24, Z
    6144:	b6 01       	movw	r22, r12
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	0e 94 bd 32 	call	0x657a	; 0x657a <fputc>
    614c:	11 11       	cpse	r17, r1
    614e:	f5 cf       	rjmp	.-22     	; 0x613a <vfprintf+0x23a>
    6150:	15 cf       	rjmp	.-470    	; 0x5f7c <vfprintf+0x7c>
    6152:	f6 01       	movw	r30, r12
    6154:	86 81       	ldd	r24, Z+6	; 0x06
    6156:	97 81       	ldd	r25, Z+7	; 0x07
    6158:	05 c0       	rjmp	.+10     	; 0x6164 <vfprintf+0x264>
    615a:	8f ef       	ldi	r24, 0xFF	; 255
    615c:	9f ef       	ldi	r25, 0xFF	; 255
    615e:	02 c0       	rjmp	.+4      	; 0x6164 <vfprintf+0x264>
    6160:	02 2f       	mov	r16, r18
    6162:	31 cf       	rjmp	.-414    	; 0x5fc6 <vfprintf+0xc6>
    6164:	2c 96       	adiw	r28, 0x0c	; 12
    6166:	0f b6       	in	r0, 0x3f	; 63
    6168:	f8 94       	cli
    616a:	de bf       	out	0x3e, r29	; 62
    616c:	0f be       	out	0x3f, r0	; 63
    616e:	cd bf       	out	0x3d, r28	; 61
    6170:	df 91       	pop	r29
    6172:	cf 91       	pop	r28
    6174:	1f 91       	pop	r17
    6176:	0f 91       	pop	r16
    6178:	ff 90       	pop	r15
    617a:	ef 90       	pop	r14
    617c:	df 90       	pop	r13
    617e:	cf 90       	pop	r12
    6180:	bf 90       	pop	r11
    6182:	af 90       	pop	r10
    6184:	9f 90       	pop	r9
    6186:	8f 90       	pop	r8
    6188:	7f 90       	pop	r7
    618a:	6f 90       	pop	r6
    618c:	08 95       	ret

0000618e <__muluhisi3>:
    618e:	0e 94 91 31 	call	0x6322	; 0x6322 <__umulhisi3>
    6192:	a5 9f       	mul	r26, r21
    6194:	90 0d       	add	r25, r0
    6196:	b4 9f       	mul	r27, r20
    6198:	90 0d       	add	r25, r0
    619a:	a4 9f       	mul	r26, r20
    619c:	80 0d       	add	r24, r0
    619e:	91 1d       	adc	r25, r1
    61a0:	11 24       	eor	r1, r1
    61a2:	08 95       	ret

000061a4 <__mulsi3>:
    61a4:	db 01       	movw	r26, r22
    61a6:	8f 93       	push	r24
    61a8:	9f 93       	push	r25
    61aa:	0e 94 c7 30 	call	0x618e	; 0x618e <__muluhisi3>
    61ae:	bf 91       	pop	r27
    61b0:	af 91       	pop	r26
    61b2:	a2 9f       	mul	r26, r18
    61b4:	80 0d       	add	r24, r0
    61b6:	91 1d       	adc	r25, r1
    61b8:	a3 9f       	mul	r26, r19
    61ba:	90 0d       	add	r25, r0
    61bc:	b2 9f       	mul	r27, r18
    61be:	90 0d       	add	r25, r0
    61c0:	11 24       	eor	r1, r1
    61c2:	08 95       	ret

000061c4 <__udivmodhi4>:
    61c4:	aa 1b       	sub	r26, r26
    61c6:	bb 1b       	sub	r27, r27
    61c8:	51 e1       	ldi	r21, 0x11	; 17
    61ca:	07 c0       	rjmp	.+14     	; 0x61da <__udivmodhi4_ep>

000061cc <__udivmodhi4_loop>:
    61cc:	aa 1f       	adc	r26, r26
    61ce:	bb 1f       	adc	r27, r27
    61d0:	a6 17       	cp	r26, r22
    61d2:	b7 07       	cpc	r27, r23
    61d4:	10 f0       	brcs	.+4      	; 0x61da <__udivmodhi4_ep>
    61d6:	a6 1b       	sub	r26, r22
    61d8:	b7 0b       	sbc	r27, r23

000061da <__udivmodhi4_ep>:
    61da:	88 1f       	adc	r24, r24
    61dc:	99 1f       	adc	r25, r25
    61de:	5a 95       	dec	r21
    61e0:	a9 f7       	brne	.-22     	; 0x61cc <__udivmodhi4_loop>
    61e2:	80 95       	com	r24
    61e4:	90 95       	com	r25
    61e6:	bc 01       	movw	r22, r24
    61e8:	cd 01       	movw	r24, r26
    61ea:	08 95       	ret

000061ec <__divmodhi4>:
    61ec:	97 fb       	bst	r25, 7
    61ee:	07 2e       	mov	r0, r23
    61f0:	16 f4       	brtc	.+4      	; 0x61f6 <__divmodhi4+0xa>
    61f2:	00 94       	com	r0
    61f4:	07 d0       	rcall	.+14     	; 0x6204 <__divmodhi4_neg1>
    61f6:	77 fd       	sbrc	r23, 7
    61f8:	09 d0       	rcall	.+18     	; 0x620c <__divmodhi4_neg2>
    61fa:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__udivmodhi4>
    61fe:	07 fc       	sbrc	r0, 7
    6200:	05 d0       	rcall	.+10     	; 0x620c <__divmodhi4_neg2>
    6202:	3e f4       	brtc	.+14     	; 0x6212 <__divmodhi4_exit>

00006204 <__divmodhi4_neg1>:
    6204:	90 95       	com	r25
    6206:	81 95       	neg	r24
    6208:	9f 4f       	sbci	r25, 0xFF	; 255
    620a:	08 95       	ret

0000620c <__divmodhi4_neg2>:
    620c:	70 95       	com	r23
    620e:	61 95       	neg	r22
    6210:	7f 4f       	sbci	r23, 0xFF	; 255

00006212 <__divmodhi4_exit>:
    6212:	08 95       	ret

00006214 <__udivmodsi4>:
    6214:	a1 e2       	ldi	r26, 0x21	; 33
    6216:	1a 2e       	mov	r1, r26
    6218:	aa 1b       	sub	r26, r26
    621a:	bb 1b       	sub	r27, r27
    621c:	fd 01       	movw	r30, r26
    621e:	0d c0       	rjmp	.+26     	; 0x623a <__udivmodsi4_ep>

00006220 <__udivmodsi4_loop>:
    6220:	aa 1f       	adc	r26, r26
    6222:	bb 1f       	adc	r27, r27
    6224:	ee 1f       	adc	r30, r30
    6226:	ff 1f       	adc	r31, r31
    6228:	a2 17       	cp	r26, r18
    622a:	b3 07       	cpc	r27, r19
    622c:	e4 07       	cpc	r30, r20
    622e:	f5 07       	cpc	r31, r21
    6230:	20 f0       	brcs	.+8      	; 0x623a <__udivmodsi4_ep>
    6232:	a2 1b       	sub	r26, r18
    6234:	b3 0b       	sbc	r27, r19
    6236:	e4 0b       	sbc	r30, r20
    6238:	f5 0b       	sbc	r31, r21

0000623a <__udivmodsi4_ep>:
    623a:	66 1f       	adc	r22, r22
    623c:	77 1f       	adc	r23, r23
    623e:	88 1f       	adc	r24, r24
    6240:	99 1f       	adc	r25, r25
    6242:	1a 94       	dec	r1
    6244:	69 f7       	brne	.-38     	; 0x6220 <__udivmodsi4_loop>
    6246:	60 95       	com	r22
    6248:	70 95       	com	r23
    624a:	80 95       	com	r24
    624c:	90 95       	com	r25
    624e:	9b 01       	movw	r18, r22
    6250:	ac 01       	movw	r20, r24
    6252:	bd 01       	movw	r22, r26
    6254:	cf 01       	movw	r24, r30
    6256:	08 95       	ret

00006258 <__umoddi3>:
    6258:	68 94       	set
    625a:	01 c0       	rjmp	.+2      	; 0x625e <__udivdi3_umoddi3>

0000625c <__udivdi3>:
    625c:	e8 94       	clt

0000625e <__udivdi3_umoddi3>:
    625e:	8f 92       	push	r8
    6260:	9f 92       	push	r9
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	0e 94 3a 31 	call	0x6274	; 0x6274 <__udivmod64>
    626a:	df 91       	pop	r29
    626c:	cf 91       	pop	r28
    626e:	9f 90       	pop	r9
    6270:	8f 90       	pop	r8
    6272:	08 95       	ret

00006274 <__udivmod64>:
    6274:	88 24       	eor	r8, r8
    6276:	99 24       	eor	r9, r9
    6278:	f4 01       	movw	r30, r8
    627a:	e4 01       	movw	r28, r8
    627c:	b0 e4       	ldi	r27, 0x40	; 64
    627e:	9f 93       	push	r25
    6280:	aa 27       	eor	r26, r26
    6282:	9a 15       	cp	r25, r10
    6284:	8b 04       	cpc	r8, r11
    6286:	9c 04       	cpc	r9, r12
    6288:	ed 05       	cpc	r30, r13
    628a:	fe 05       	cpc	r31, r14
    628c:	cf 05       	cpc	r28, r15
    628e:	d0 07       	cpc	r29, r16
    6290:	a1 07       	cpc	r26, r17
    6292:	98 f4       	brcc	.+38     	; 0x62ba <__udivmod64+0x46>
    6294:	ad 2f       	mov	r26, r29
    6296:	dc 2f       	mov	r29, r28
    6298:	cf 2f       	mov	r28, r31
    629a:	fe 2f       	mov	r31, r30
    629c:	e9 2d       	mov	r30, r9
    629e:	98 2c       	mov	r9, r8
    62a0:	89 2e       	mov	r8, r25
    62a2:	98 2f       	mov	r25, r24
    62a4:	87 2f       	mov	r24, r23
    62a6:	76 2f       	mov	r23, r22
    62a8:	65 2f       	mov	r22, r21
    62aa:	54 2f       	mov	r21, r20
    62ac:	43 2f       	mov	r20, r19
    62ae:	32 2f       	mov	r19, r18
    62b0:	22 27       	eor	r18, r18
    62b2:	b8 50       	subi	r27, 0x08	; 8
    62b4:	31 f7       	brne	.-52     	; 0x6282 <__udivmod64+0xe>
    62b6:	bf 91       	pop	r27
    62b8:	27 c0       	rjmp	.+78     	; 0x6308 <__udivmod64+0x94>
    62ba:	1b 2e       	mov	r1, r27
    62bc:	bf 91       	pop	r27
    62be:	bb 27       	eor	r27, r27
    62c0:	22 0f       	add	r18, r18
    62c2:	33 1f       	adc	r19, r19
    62c4:	44 1f       	adc	r20, r20
    62c6:	55 1f       	adc	r21, r21
    62c8:	66 1f       	adc	r22, r22
    62ca:	77 1f       	adc	r23, r23
    62cc:	88 1f       	adc	r24, r24
    62ce:	99 1f       	adc	r25, r25
    62d0:	88 1c       	adc	r8, r8
    62d2:	99 1c       	adc	r9, r9
    62d4:	ee 1f       	adc	r30, r30
    62d6:	ff 1f       	adc	r31, r31
    62d8:	cc 1f       	adc	r28, r28
    62da:	dd 1f       	adc	r29, r29
    62dc:	aa 1f       	adc	r26, r26
    62de:	bb 1f       	adc	r27, r27
    62e0:	8a 14       	cp	r8, r10
    62e2:	9b 04       	cpc	r9, r11
    62e4:	ec 05       	cpc	r30, r12
    62e6:	fd 05       	cpc	r31, r13
    62e8:	ce 05       	cpc	r28, r14
    62ea:	df 05       	cpc	r29, r15
    62ec:	a0 07       	cpc	r26, r16
    62ee:	b1 07       	cpc	r27, r17
    62f0:	48 f0       	brcs	.+18     	; 0x6304 <__udivmod64+0x90>
    62f2:	8a 18       	sub	r8, r10
    62f4:	9b 08       	sbc	r9, r11
    62f6:	ec 09       	sbc	r30, r12
    62f8:	fd 09       	sbc	r31, r13
    62fa:	ce 09       	sbc	r28, r14
    62fc:	df 09       	sbc	r29, r15
    62fe:	a0 0b       	sbc	r26, r16
    6300:	b1 0b       	sbc	r27, r17
    6302:	21 60       	ori	r18, 0x01	; 1
    6304:	1a 94       	dec	r1
    6306:	e1 f6       	brne	.-72     	; 0x62c0 <__udivmod64+0x4c>
    6308:	2e f4       	brtc	.+10     	; 0x6314 <__udivmod64+0xa0>
    630a:	94 01       	movw	r18, r8
    630c:	af 01       	movw	r20, r30
    630e:	be 01       	movw	r22, r28
    6310:	cd 01       	movw	r24, r26
    6312:	00 0c       	add	r0, r0
    6314:	08 95       	ret

00006316 <__tablejump2__>:
    6316:	ee 0f       	add	r30, r30
    6318:	ff 1f       	adc	r31, r31

0000631a <__tablejump__>:
    631a:	05 90       	lpm	r0, Z+
    631c:	f4 91       	lpm	r31, Z
    631e:	e0 2d       	mov	r30, r0
    6320:	09 94       	ijmp

00006322 <__umulhisi3>:
    6322:	a2 9f       	mul	r26, r18
    6324:	b0 01       	movw	r22, r0
    6326:	b3 9f       	mul	r27, r19
    6328:	c0 01       	movw	r24, r0
    632a:	a3 9f       	mul	r26, r19
    632c:	70 0d       	add	r23, r0
    632e:	81 1d       	adc	r24, r1
    6330:	11 24       	eor	r1, r1
    6332:	91 1d       	adc	r25, r1
    6334:	b2 9f       	mul	r27, r18
    6336:	70 0d       	add	r23, r0
    6338:	81 1d       	adc	r24, r1
    633a:	11 24       	eor	r1, r1
    633c:	91 1d       	adc	r25, r1
    633e:	08 95       	ret

00006340 <do_rand>:
    6340:	8f 92       	push	r8
    6342:	9f 92       	push	r9
    6344:	af 92       	push	r10
    6346:	bf 92       	push	r11
    6348:	cf 92       	push	r12
    634a:	df 92       	push	r13
    634c:	ef 92       	push	r14
    634e:	ff 92       	push	r15
    6350:	cf 93       	push	r28
    6352:	df 93       	push	r29
    6354:	ec 01       	movw	r28, r24
    6356:	68 81       	ld	r22, Y
    6358:	79 81       	ldd	r23, Y+1	; 0x01
    635a:	8a 81       	ldd	r24, Y+2	; 0x02
    635c:	9b 81       	ldd	r25, Y+3	; 0x03
    635e:	61 15       	cp	r22, r1
    6360:	71 05       	cpc	r23, r1
    6362:	81 05       	cpc	r24, r1
    6364:	91 05       	cpc	r25, r1
    6366:	21 f4       	brne	.+8      	; 0x6370 <do_rand+0x30>
    6368:	64 e2       	ldi	r22, 0x24	; 36
    636a:	79 ed       	ldi	r23, 0xD9	; 217
    636c:	8b e5       	ldi	r24, 0x5B	; 91
    636e:	97 e0       	ldi	r25, 0x07	; 7
    6370:	2d e1       	ldi	r18, 0x1D	; 29
    6372:	33 ef       	ldi	r19, 0xF3	; 243
    6374:	41 e0       	ldi	r20, 0x01	; 1
    6376:	50 e0       	ldi	r21, 0x00	; 0
    6378:	0e 94 3b 35 	call	0x6a76	; 0x6a76 <__divmodsi4>
    637c:	49 01       	movw	r8, r18
    637e:	5a 01       	movw	r10, r20
    6380:	9b 01       	movw	r18, r22
    6382:	ac 01       	movw	r20, r24
    6384:	a7 ea       	ldi	r26, 0xA7	; 167
    6386:	b1 e4       	ldi	r27, 0x41	; 65
    6388:	0e 94 c7 30 	call	0x618e	; 0x618e <__muluhisi3>
    638c:	6b 01       	movw	r12, r22
    638e:	7c 01       	movw	r14, r24
    6390:	ac ee       	ldi	r26, 0xEC	; 236
    6392:	b4 ef       	ldi	r27, 0xF4	; 244
    6394:	a5 01       	movw	r20, r10
    6396:	94 01       	movw	r18, r8
    6398:	0e 94 36 35 	call	0x6a6c	; 0x6a6c <__mulohisi3>
    639c:	dc 01       	movw	r26, r24
    639e:	cb 01       	movw	r24, r22
    63a0:	8c 0d       	add	r24, r12
    63a2:	9d 1d       	adc	r25, r13
    63a4:	ae 1d       	adc	r26, r14
    63a6:	bf 1d       	adc	r27, r15
    63a8:	b7 ff       	sbrs	r27, 7
    63aa:	03 c0       	rjmp	.+6      	; 0x63b2 <do_rand+0x72>
    63ac:	01 97       	sbiw	r24, 0x01	; 1
    63ae:	a1 09       	sbc	r26, r1
    63b0:	b0 48       	sbci	r27, 0x80	; 128
    63b2:	88 83       	st	Y, r24
    63b4:	99 83       	std	Y+1, r25	; 0x01
    63b6:	aa 83       	std	Y+2, r26	; 0x02
    63b8:	bb 83       	std	Y+3, r27	; 0x03
    63ba:	9f 77       	andi	r25, 0x7F	; 127
    63bc:	df 91       	pop	r29
    63be:	cf 91       	pop	r28
    63c0:	ff 90       	pop	r15
    63c2:	ef 90       	pop	r14
    63c4:	df 90       	pop	r13
    63c6:	cf 90       	pop	r12
    63c8:	bf 90       	pop	r11
    63ca:	af 90       	pop	r10
    63cc:	9f 90       	pop	r9
    63ce:	8f 90       	pop	r8
    63d0:	08 95       	ret

000063d2 <rand_r>:
    63d2:	0c 94 a0 31 	jmp	0x6340	; 0x6340 <do_rand>

000063d6 <rand>:
    63d6:	80 e0       	ldi	r24, 0x00	; 0
    63d8:	92 e0       	ldi	r25, 0x02	; 2
    63da:	0c 94 a0 31 	jmp	0x6340	; 0x6340 <do_rand>

000063de <srand>:
    63de:	a0 e0       	ldi	r26, 0x00	; 0
    63e0:	b0 e0       	ldi	r27, 0x00	; 0
    63e2:	80 93 00 02 	sts	0x0200, r24
    63e6:	90 93 01 02 	sts	0x0201, r25
    63ea:	a0 93 02 02 	sts	0x0202, r26
    63ee:	b0 93 03 02 	sts	0x0203, r27
    63f2:	08 95       	ret

000063f4 <atoi>:
    63f4:	fc 01       	movw	r30, r24
    63f6:	88 27       	eor	r24, r24
    63f8:	99 27       	eor	r25, r25
    63fa:	e8 94       	clt
    63fc:	21 91       	ld	r18, Z+
    63fe:	20 32       	cpi	r18, 0x20	; 32
    6400:	e9 f3       	breq	.-6      	; 0x63fc <atoi+0x8>
    6402:	29 30       	cpi	r18, 0x09	; 9
    6404:	10 f0       	brcs	.+4      	; 0x640a <atoi+0x16>
    6406:	2e 30       	cpi	r18, 0x0E	; 14
    6408:	c8 f3       	brcs	.-14     	; 0x63fc <atoi+0x8>
    640a:	2b 32       	cpi	r18, 0x2B	; 43
    640c:	41 f0       	breq	.+16     	; 0x641e <atoi+0x2a>
    640e:	2d 32       	cpi	r18, 0x2D	; 45
    6410:	39 f4       	brne	.+14     	; 0x6420 <atoi+0x2c>
    6412:	68 94       	set
    6414:	04 c0       	rjmp	.+8      	; 0x641e <atoi+0x2a>
    6416:	0e 94 2c 32 	call	0x6458	; 0x6458 <__mulhi_const_10>
    641a:	82 0f       	add	r24, r18
    641c:	91 1d       	adc	r25, r1
    641e:	21 91       	ld	r18, Z+
    6420:	20 53       	subi	r18, 0x30	; 48
    6422:	2a 30       	cpi	r18, 0x0A	; 10
    6424:	c0 f3       	brcs	.-16     	; 0x6416 <atoi+0x22>
    6426:	1e f4       	brtc	.+6      	; 0x642e <atoi+0x3a>
    6428:	90 95       	com	r25
    642a:	81 95       	neg	r24
    642c:	9f 4f       	sbci	r25, 0xFF	; 255
    642e:	08 95       	ret

00006430 <strchr_P>:
    6430:	fc 01       	movw	r30, r24
    6432:	05 90       	lpm	r0, Z+
    6434:	06 16       	cp	r0, r22
    6436:	21 f0       	breq	.+8      	; 0x6440 <strchr_P+0x10>
    6438:	00 20       	and	r0, r0
    643a:	d9 f7       	brne	.-10     	; 0x6432 <strchr_P+0x2>
    643c:	c0 01       	movw	r24, r0
    643e:	08 95       	ret
    6440:	31 97       	sbiw	r30, 0x01	; 1
    6442:	cf 01       	movw	r24, r30
    6444:	08 95       	ret

00006446 <memcpy>:
    6446:	fb 01       	movw	r30, r22
    6448:	dc 01       	movw	r26, r24
    644a:	02 c0       	rjmp	.+4      	; 0x6450 <memcpy+0xa>
    644c:	01 90       	ld	r0, Z+
    644e:	0d 92       	st	X+, r0
    6450:	41 50       	subi	r20, 0x01	; 1
    6452:	50 40       	sbci	r21, 0x00	; 0
    6454:	d8 f7       	brcc	.-10     	; 0x644c <memcpy+0x6>
    6456:	08 95       	ret

00006458 <__mulhi_const_10>:
    6458:	7a e0       	ldi	r23, 0x0A	; 10
    645a:	97 9f       	mul	r25, r23
    645c:	90 2d       	mov	r25, r0
    645e:	87 9f       	mul	r24, r23
    6460:	80 2d       	mov	r24, r0
    6462:	91 0d       	add	r25, r1
    6464:	11 24       	eor	r1, r1
    6466:	08 95       	ret

00006468 <fdevopen>:
    6468:	0f 93       	push	r16
    646a:	1f 93       	push	r17
    646c:	cf 93       	push	r28
    646e:	df 93       	push	r29
    6470:	00 97       	sbiw	r24, 0x00	; 0
    6472:	31 f4       	brne	.+12     	; 0x6480 <fdevopen+0x18>
    6474:	61 15       	cp	r22, r1
    6476:	71 05       	cpc	r23, r1
    6478:	19 f4       	brne	.+6      	; 0x6480 <fdevopen+0x18>
    647a:	80 e0       	ldi	r24, 0x00	; 0
    647c:	90 e0       	ldi	r25, 0x00	; 0
    647e:	3a c0       	rjmp	.+116    	; 0x64f4 <fdevopen+0x8c>
    6480:	8b 01       	movw	r16, r22
    6482:	ec 01       	movw	r28, r24
    6484:	6e e0       	ldi	r22, 0x0E	; 14
    6486:	70 e0       	ldi	r23, 0x00	; 0
    6488:	81 e0       	ldi	r24, 0x01	; 1
    648a:	90 e0       	ldi	r25, 0x00	; 0
    648c:	0e 94 e3 33 	call	0x67c6	; 0x67c6 <calloc>
    6490:	fc 01       	movw	r30, r24
    6492:	00 97       	sbiw	r24, 0x00	; 0
    6494:	91 f3       	breq	.-28     	; 0x647a <fdevopen+0x12>
    6496:	80 e8       	ldi	r24, 0x80	; 128
    6498:	83 83       	std	Z+3, r24	; 0x03
    649a:	01 15       	cp	r16, r1
    649c:	11 05       	cpc	r17, r1
    649e:	71 f0       	breq	.+28     	; 0x64bc <fdevopen+0x54>
    64a0:	13 87       	std	Z+11, r17	; 0x0b
    64a2:	02 87       	std	Z+10, r16	; 0x0a
    64a4:	81 e8       	ldi	r24, 0x81	; 129
    64a6:	83 83       	std	Z+3, r24	; 0x03
    64a8:	80 91 07 18 	lds	r24, 0x1807
    64ac:	90 91 08 18 	lds	r25, 0x1808
    64b0:	89 2b       	or	r24, r25
    64b2:	21 f4       	brne	.+8      	; 0x64bc <fdevopen+0x54>
    64b4:	f0 93 08 18 	sts	0x1808, r31
    64b8:	e0 93 07 18 	sts	0x1807, r30
    64bc:	20 97       	sbiw	r28, 0x00	; 0
    64be:	c9 f0       	breq	.+50     	; 0x64f2 <fdevopen+0x8a>
    64c0:	d1 87       	std	Z+9, r29	; 0x09
    64c2:	c0 87       	std	Z+8, r28	; 0x08
    64c4:	83 81       	ldd	r24, Z+3	; 0x03
    64c6:	82 60       	ori	r24, 0x02	; 2
    64c8:	83 83       	std	Z+3, r24	; 0x03
    64ca:	80 91 09 18 	lds	r24, 0x1809
    64ce:	90 91 0a 18 	lds	r25, 0x180A
    64d2:	89 2b       	or	r24, r25
    64d4:	71 f4       	brne	.+28     	; 0x64f2 <fdevopen+0x8a>
    64d6:	f0 93 0a 18 	sts	0x180A, r31
    64da:	e0 93 09 18 	sts	0x1809, r30
    64de:	80 91 0b 18 	lds	r24, 0x180B
    64e2:	90 91 0c 18 	lds	r25, 0x180C
    64e6:	89 2b       	or	r24, r25
    64e8:	21 f4       	brne	.+8      	; 0x64f2 <fdevopen+0x8a>
    64ea:	f0 93 0c 18 	sts	0x180C, r31
    64ee:	e0 93 0b 18 	sts	0x180B, r30
    64f2:	cf 01       	movw	r24, r30
    64f4:	df 91       	pop	r29
    64f6:	cf 91       	pop	r28
    64f8:	1f 91       	pop	r17
    64fa:	0f 91       	pop	r16
    64fc:	08 95       	ret

000064fe <fgetc>:
    64fe:	cf 93       	push	r28
    6500:	df 93       	push	r29
    6502:	ec 01       	movw	r28, r24
    6504:	2b 81       	ldd	r18, Y+3	; 0x03
    6506:	20 ff       	sbrs	r18, 0
    6508:	33 c0       	rjmp	.+102    	; 0x6570 <fgetc+0x72>
    650a:	26 ff       	sbrs	r18, 6
    650c:	0a c0       	rjmp	.+20     	; 0x6522 <fgetc+0x24>
    650e:	2f 7b       	andi	r18, 0xBF	; 191
    6510:	2b 83       	std	Y+3, r18	; 0x03
    6512:	8e 81       	ldd	r24, Y+6	; 0x06
    6514:	9f 81       	ldd	r25, Y+7	; 0x07
    6516:	01 96       	adiw	r24, 0x01	; 1
    6518:	9f 83       	std	Y+7, r25	; 0x07
    651a:	8e 83       	std	Y+6, r24	; 0x06
    651c:	8a 81       	ldd	r24, Y+2	; 0x02
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	29 c0       	rjmp	.+82     	; 0x6574 <fgetc+0x76>
    6522:	22 ff       	sbrs	r18, 2
    6524:	0f c0       	rjmp	.+30     	; 0x6544 <fgetc+0x46>
    6526:	e8 81       	ld	r30, Y
    6528:	f9 81       	ldd	r31, Y+1	; 0x01
    652a:	80 81       	ld	r24, Z
    652c:	99 27       	eor	r25, r25
    652e:	87 fd       	sbrc	r24, 7
    6530:	90 95       	com	r25
    6532:	00 97       	sbiw	r24, 0x00	; 0
    6534:	19 f4       	brne	.+6      	; 0x653c <fgetc+0x3e>
    6536:	20 62       	ori	r18, 0x20	; 32
    6538:	2b 83       	std	Y+3, r18	; 0x03
    653a:	1a c0       	rjmp	.+52     	; 0x6570 <fgetc+0x72>
    653c:	31 96       	adiw	r30, 0x01	; 1
    653e:	f9 83       	std	Y+1, r31	; 0x01
    6540:	e8 83       	st	Y, r30
    6542:	0e c0       	rjmp	.+28     	; 0x6560 <fgetc+0x62>
    6544:	ea 85       	ldd	r30, Y+10	; 0x0a
    6546:	fb 85       	ldd	r31, Y+11	; 0x0b
    6548:	09 95       	icall
    654a:	97 ff       	sbrs	r25, 7
    654c:	09 c0       	rjmp	.+18     	; 0x6560 <fgetc+0x62>
    654e:	2b 81       	ldd	r18, Y+3	; 0x03
    6550:	01 96       	adiw	r24, 0x01	; 1
    6552:	11 f0       	breq	.+4      	; 0x6558 <fgetc+0x5a>
    6554:	80 e2       	ldi	r24, 0x20	; 32
    6556:	01 c0       	rjmp	.+2      	; 0x655a <fgetc+0x5c>
    6558:	80 e1       	ldi	r24, 0x10	; 16
    655a:	82 2b       	or	r24, r18
    655c:	8b 83       	std	Y+3, r24	; 0x03
    655e:	08 c0       	rjmp	.+16     	; 0x6570 <fgetc+0x72>
    6560:	2e 81       	ldd	r18, Y+6	; 0x06
    6562:	3f 81       	ldd	r19, Y+7	; 0x07
    6564:	2f 5f       	subi	r18, 0xFF	; 255
    6566:	3f 4f       	sbci	r19, 0xFF	; 255
    6568:	3f 83       	std	Y+7, r19	; 0x07
    656a:	2e 83       	std	Y+6, r18	; 0x06
    656c:	99 27       	eor	r25, r25
    656e:	02 c0       	rjmp	.+4      	; 0x6574 <fgetc+0x76>
    6570:	8f ef       	ldi	r24, 0xFF	; 255
    6572:	9f ef       	ldi	r25, 0xFF	; 255
    6574:	df 91       	pop	r29
    6576:	cf 91       	pop	r28
    6578:	08 95       	ret

0000657a <fputc>:
    657a:	0f 93       	push	r16
    657c:	1f 93       	push	r17
    657e:	cf 93       	push	r28
    6580:	df 93       	push	r29
    6582:	fb 01       	movw	r30, r22
    6584:	23 81       	ldd	r18, Z+3	; 0x03
    6586:	21 fd       	sbrc	r18, 1
    6588:	03 c0       	rjmp	.+6      	; 0x6590 <fputc+0x16>
    658a:	8f ef       	ldi	r24, 0xFF	; 255
    658c:	9f ef       	ldi	r25, 0xFF	; 255
    658e:	28 c0       	rjmp	.+80     	; 0x65e0 <fputc+0x66>
    6590:	22 ff       	sbrs	r18, 2
    6592:	16 c0       	rjmp	.+44     	; 0x65c0 <fputc+0x46>
    6594:	46 81       	ldd	r20, Z+6	; 0x06
    6596:	57 81       	ldd	r21, Z+7	; 0x07
    6598:	24 81       	ldd	r18, Z+4	; 0x04
    659a:	35 81       	ldd	r19, Z+5	; 0x05
    659c:	42 17       	cp	r20, r18
    659e:	53 07       	cpc	r21, r19
    65a0:	44 f4       	brge	.+16     	; 0x65b2 <fputc+0x38>
    65a2:	a0 81       	ld	r26, Z
    65a4:	b1 81       	ldd	r27, Z+1	; 0x01
    65a6:	9d 01       	movw	r18, r26
    65a8:	2f 5f       	subi	r18, 0xFF	; 255
    65aa:	3f 4f       	sbci	r19, 0xFF	; 255
    65ac:	31 83       	std	Z+1, r19	; 0x01
    65ae:	20 83       	st	Z, r18
    65b0:	8c 93       	st	X, r24
    65b2:	26 81       	ldd	r18, Z+6	; 0x06
    65b4:	37 81       	ldd	r19, Z+7	; 0x07
    65b6:	2f 5f       	subi	r18, 0xFF	; 255
    65b8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ba:	37 83       	std	Z+7, r19	; 0x07
    65bc:	26 83       	std	Z+6, r18	; 0x06
    65be:	10 c0       	rjmp	.+32     	; 0x65e0 <fputc+0x66>
    65c0:	eb 01       	movw	r28, r22
    65c2:	09 2f       	mov	r16, r25
    65c4:	18 2f       	mov	r17, r24
    65c6:	00 84       	ldd	r0, Z+8	; 0x08
    65c8:	f1 85       	ldd	r31, Z+9	; 0x09
    65ca:	e0 2d       	mov	r30, r0
    65cc:	09 95       	icall
    65ce:	89 2b       	or	r24, r25
    65d0:	e1 f6       	brne	.-72     	; 0x658a <fputc+0x10>
    65d2:	8e 81       	ldd	r24, Y+6	; 0x06
    65d4:	9f 81       	ldd	r25, Y+7	; 0x07
    65d6:	01 96       	adiw	r24, 0x01	; 1
    65d8:	9f 83       	std	Y+7, r25	; 0x07
    65da:	8e 83       	std	Y+6, r24	; 0x06
    65dc:	81 2f       	mov	r24, r17
    65de:	90 2f       	mov	r25, r16
    65e0:	df 91       	pop	r29
    65e2:	cf 91       	pop	r28
    65e4:	1f 91       	pop	r17
    65e6:	0f 91       	pop	r16
    65e8:	08 95       	ret

000065ea <printf>:
    65ea:	cf 93       	push	r28
    65ec:	df 93       	push	r29
    65ee:	cd b7       	in	r28, 0x3d	; 61
    65f0:	de b7       	in	r29, 0x3e	; 62
    65f2:	ae 01       	movw	r20, r28
    65f4:	4b 5f       	subi	r20, 0xFB	; 251
    65f6:	5f 4f       	sbci	r21, 0xFF	; 255
    65f8:	fa 01       	movw	r30, r20
    65fa:	61 91       	ld	r22, Z+
    65fc:	71 91       	ld	r23, Z+
    65fe:	af 01       	movw	r20, r30
    6600:	80 91 09 18 	lds	r24, 0x1809
    6604:	90 91 0a 18 	lds	r25, 0x180A
    6608:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <vfprintf>
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	08 95       	ret

00006612 <putchar>:
    6612:	60 91 09 18 	lds	r22, 0x1809
    6616:	70 91 0a 18 	lds	r23, 0x180A
    661a:	0c 94 bd 32 	jmp	0x657a	; 0x657a <fputc>

0000661e <puts>:
    661e:	0f 93       	push	r16
    6620:	1f 93       	push	r17
    6622:	cf 93       	push	r28
    6624:	df 93       	push	r29
    6626:	e0 91 09 18 	lds	r30, 0x1809
    662a:	f0 91 0a 18 	lds	r31, 0x180A
    662e:	23 81       	ldd	r18, Z+3	; 0x03
    6630:	21 ff       	sbrs	r18, 1
    6632:	1b c0       	rjmp	.+54     	; 0x666a <puts+0x4c>
    6634:	8c 01       	movw	r16, r24
    6636:	d0 e0       	ldi	r29, 0x00	; 0
    6638:	c0 e0       	ldi	r28, 0x00	; 0
    663a:	f8 01       	movw	r30, r16
    663c:	81 91       	ld	r24, Z+
    663e:	8f 01       	movw	r16, r30
    6640:	60 91 09 18 	lds	r22, 0x1809
    6644:	70 91 0a 18 	lds	r23, 0x180A
    6648:	db 01       	movw	r26, r22
    664a:	18 96       	adiw	r26, 0x08	; 8
    664c:	ed 91       	ld	r30, X+
    664e:	fc 91       	ld	r31, X
    6650:	19 97       	sbiw	r26, 0x09	; 9
    6652:	88 23       	and	r24, r24
    6654:	31 f0       	breq	.+12     	; 0x6662 <puts+0x44>
    6656:	09 95       	icall
    6658:	89 2b       	or	r24, r25
    665a:	79 f3       	breq	.-34     	; 0x663a <puts+0x1c>
    665c:	df ef       	ldi	r29, 0xFF	; 255
    665e:	cf ef       	ldi	r28, 0xFF	; 255
    6660:	ec cf       	rjmp	.-40     	; 0x663a <puts+0x1c>
    6662:	8a e0       	ldi	r24, 0x0A	; 10
    6664:	09 95       	icall
    6666:	89 2b       	or	r24, r25
    6668:	19 f0       	breq	.+6      	; 0x6670 <puts+0x52>
    666a:	8f ef       	ldi	r24, 0xFF	; 255
    666c:	9f ef       	ldi	r25, 0xFF	; 255
    666e:	02 c0       	rjmp	.+4      	; 0x6674 <puts+0x56>
    6670:	8d 2f       	mov	r24, r29
    6672:	9c 2f       	mov	r25, r28
    6674:	df 91       	pop	r29
    6676:	cf 91       	pop	r28
    6678:	1f 91       	pop	r17
    667a:	0f 91       	pop	r16
    667c:	08 95       	ret

0000667e <sprintf>:
    667e:	0f 93       	push	r16
    6680:	1f 93       	push	r17
    6682:	cf 93       	push	r28
    6684:	df 93       	push	r29
    6686:	cd b7       	in	r28, 0x3d	; 61
    6688:	de b7       	in	r29, 0x3e	; 62
    668a:	2e 97       	sbiw	r28, 0x0e	; 14
    668c:	0f b6       	in	r0, 0x3f	; 63
    668e:	f8 94       	cli
    6690:	de bf       	out	0x3e, r29	; 62
    6692:	0f be       	out	0x3f, r0	; 63
    6694:	cd bf       	out	0x3d, r28	; 61
    6696:	0d 89       	ldd	r16, Y+21	; 0x15
    6698:	1e 89       	ldd	r17, Y+22	; 0x16
    669a:	86 e0       	ldi	r24, 0x06	; 6
    669c:	8c 83       	std	Y+4, r24	; 0x04
    669e:	1a 83       	std	Y+2, r17	; 0x02
    66a0:	09 83       	std	Y+1, r16	; 0x01
    66a2:	8f ef       	ldi	r24, 0xFF	; 255
    66a4:	9f e7       	ldi	r25, 0x7F	; 127
    66a6:	9e 83       	std	Y+6, r25	; 0x06
    66a8:	8d 83       	std	Y+5, r24	; 0x05
    66aa:	ae 01       	movw	r20, r28
    66ac:	47 5e       	subi	r20, 0xE7	; 231
    66ae:	5f 4f       	sbci	r21, 0xFF	; 255
    66b0:	6f 89       	ldd	r22, Y+23	; 0x17
    66b2:	78 8d       	ldd	r23, Y+24	; 0x18
    66b4:	ce 01       	movw	r24, r28
    66b6:	01 96       	adiw	r24, 0x01	; 1
    66b8:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <vfprintf>
    66bc:	2f 81       	ldd	r18, Y+7	; 0x07
    66be:	38 85       	ldd	r19, Y+8	; 0x08
    66c0:	f8 01       	movw	r30, r16
    66c2:	e2 0f       	add	r30, r18
    66c4:	f3 1f       	adc	r31, r19
    66c6:	10 82       	st	Z, r1
    66c8:	2e 96       	adiw	r28, 0x0e	; 14
    66ca:	0f b6       	in	r0, 0x3f	; 63
    66cc:	f8 94       	cli
    66ce:	de bf       	out	0x3e, r29	; 62
    66d0:	0f be       	out	0x3f, r0	; 63
    66d2:	cd bf       	out	0x3d, r28	; 61
    66d4:	df 91       	pop	r29
    66d6:	cf 91       	pop	r28
    66d8:	1f 91       	pop	r17
    66da:	0f 91       	pop	r16
    66dc:	08 95       	ret

000066de <__ultoa_invert>:
    66de:	fa 01       	movw	r30, r20
    66e0:	aa 27       	eor	r26, r26
    66e2:	28 30       	cpi	r18, 0x08	; 8
    66e4:	51 f1       	breq	.+84     	; 0x673a <__ultoa_invert+0x5c>
    66e6:	20 31       	cpi	r18, 0x10	; 16
    66e8:	81 f1       	breq	.+96     	; 0x674a <__ultoa_invert+0x6c>
    66ea:	e8 94       	clt
    66ec:	6f 93       	push	r22
    66ee:	6e 7f       	andi	r22, 0xFE	; 254
    66f0:	6e 5f       	subi	r22, 0xFE	; 254
    66f2:	7f 4f       	sbci	r23, 0xFF	; 255
    66f4:	8f 4f       	sbci	r24, 0xFF	; 255
    66f6:	9f 4f       	sbci	r25, 0xFF	; 255
    66f8:	af 4f       	sbci	r26, 0xFF	; 255
    66fa:	b1 e0       	ldi	r27, 0x01	; 1
    66fc:	3e d0       	rcall	.+124    	; 0x677a <__ultoa_invert+0x9c>
    66fe:	b4 e0       	ldi	r27, 0x04	; 4
    6700:	3c d0       	rcall	.+120    	; 0x677a <__ultoa_invert+0x9c>
    6702:	67 0f       	add	r22, r23
    6704:	78 1f       	adc	r23, r24
    6706:	89 1f       	adc	r24, r25
    6708:	9a 1f       	adc	r25, r26
    670a:	a1 1d       	adc	r26, r1
    670c:	68 0f       	add	r22, r24
    670e:	79 1f       	adc	r23, r25
    6710:	8a 1f       	adc	r24, r26
    6712:	91 1d       	adc	r25, r1
    6714:	a1 1d       	adc	r26, r1
    6716:	6a 0f       	add	r22, r26
    6718:	71 1d       	adc	r23, r1
    671a:	81 1d       	adc	r24, r1
    671c:	91 1d       	adc	r25, r1
    671e:	a1 1d       	adc	r26, r1
    6720:	20 d0       	rcall	.+64     	; 0x6762 <__ultoa_invert+0x84>
    6722:	09 f4       	brne	.+2      	; 0x6726 <__ultoa_invert+0x48>
    6724:	68 94       	set
    6726:	3f 91       	pop	r19
    6728:	2a e0       	ldi	r18, 0x0A	; 10
    672a:	26 9f       	mul	r18, r22
    672c:	11 24       	eor	r1, r1
    672e:	30 19       	sub	r19, r0
    6730:	30 5d       	subi	r19, 0xD0	; 208
    6732:	31 93       	st	Z+, r19
    6734:	de f6       	brtc	.-74     	; 0x66ec <__ultoa_invert+0xe>
    6736:	cf 01       	movw	r24, r30
    6738:	08 95       	ret
    673a:	46 2f       	mov	r20, r22
    673c:	47 70       	andi	r20, 0x07	; 7
    673e:	40 5d       	subi	r20, 0xD0	; 208
    6740:	41 93       	st	Z+, r20
    6742:	b3 e0       	ldi	r27, 0x03	; 3
    6744:	0f d0       	rcall	.+30     	; 0x6764 <__ultoa_invert+0x86>
    6746:	c9 f7       	brne	.-14     	; 0x673a <__ultoa_invert+0x5c>
    6748:	f6 cf       	rjmp	.-20     	; 0x6736 <__ultoa_invert+0x58>
    674a:	46 2f       	mov	r20, r22
    674c:	4f 70       	andi	r20, 0x0F	; 15
    674e:	40 5d       	subi	r20, 0xD0	; 208
    6750:	4a 33       	cpi	r20, 0x3A	; 58
    6752:	18 f0       	brcs	.+6      	; 0x675a <__ultoa_invert+0x7c>
    6754:	49 5d       	subi	r20, 0xD9	; 217
    6756:	31 fd       	sbrc	r19, 1
    6758:	40 52       	subi	r20, 0x20	; 32
    675a:	41 93       	st	Z+, r20
    675c:	02 d0       	rcall	.+4      	; 0x6762 <__ultoa_invert+0x84>
    675e:	a9 f7       	brne	.-22     	; 0x674a <__ultoa_invert+0x6c>
    6760:	ea cf       	rjmp	.-44     	; 0x6736 <__ultoa_invert+0x58>
    6762:	b4 e0       	ldi	r27, 0x04	; 4
    6764:	a6 95       	lsr	r26
    6766:	97 95       	ror	r25
    6768:	87 95       	ror	r24
    676a:	77 95       	ror	r23
    676c:	67 95       	ror	r22
    676e:	ba 95       	dec	r27
    6770:	c9 f7       	brne	.-14     	; 0x6764 <__ultoa_invert+0x86>
    6772:	00 97       	sbiw	r24, 0x00	; 0
    6774:	61 05       	cpc	r22, r1
    6776:	71 05       	cpc	r23, r1
    6778:	08 95       	ret
    677a:	9b 01       	movw	r18, r22
    677c:	ac 01       	movw	r20, r24
    677e:	0a 2e       	mov	r0, r26
    6780:	06 94       	lsr	r0
    6782:	57 95       	ror	r21
    6784:	47 95       	ror	r20
    6786:	37 95       	ror	r19
    6788:	27 95       	ror	r18
    678a:	ba 95       	dec	r27
    678c:	c9 f7       	brne	.-14     	; 0x6780 <__ultoa_invert+0xa2>
    678e:	62 0f       	add	r22, r18
    6790:	73 1f       	adc	r23, r19
    6792:	84 1f       	adc	r24, r20
    6794:	95 1f       	adc	r25, r21
    6796:	a0 1d       	adc	r26, r0
    6798:	08 95       	ret

0000679a <__eerd_byte_m128rfa1>:
    679a:	f9 99       	sbic	0x1f, 1	; 31
    679c:	fe cf       	rjmp	.-4      	; 0x679a <__eerd_byte_m128rfa1>
    679e:	92 bd       	out	0x22, r25	; 34
    67a0:	81 bd       	out	0x21, r24	; 33
    67a2:	f8 9a       	sbi	0x1f, 0	; 31
    67a4:	99 27       	eor	r25, r25
    67a6:	80 b5       	in	r24, 0x20	; 32
    67a8:	08 95       	ret

000067aa <__eewr_byte_m128rfa1>:
    67aa:	26 2f       	mov	r18, r22

000067ac <__eewr_r18_m128rfa1>:
    67ac:	f9 99       	sbic	0x1f, 1	; 31
    67ae:	fe cf       	rjmp	.-4      	; 0x67ac <__eewr_r18_m128rfa1>
    67b0:	1f ba       	out	0x1f, r1	; 31
    67b2:	92 bd       	out	0x22, r25	; 34
    67b4:	81 bd       	out	0x21, r24	; 33
    67b6:	20 bd       	out	0x20, r18	; 32
    67b8:	0f b6       	in	r0, 0x3f	; 63
    67ba:	f8 94       	cli
    67bc:	fa 9a       	sbi	0x1f, 2	; 31
    67be:	f9 9a       	sbi	0x1f, 1	; 31
    67c0:	0f be       	out	0x3f, r0	; 63
    67c2:	01 96       	adiw	r24, 0x01	; 1
    67c4:	08 95       	ret

000067c6 <calloc>:
    67c6:	0f 93       	push	r16
    67c8:	1f 93       	push	r17
    67ca:	cf 93       	push	r28
    67cc:	df 93       	push	r29
    67ce:	86 9f       	mul	r24, r22
    67d0:	80 01       	movw	r16, r0
    67d2:	87 9f       	mul	r24, r23
    67d4:	10 0d       	add	r17, r0
    67d6:	96 9f       	mul	r25, r22
    67d8:	10 0d       	add	r17, r0
    67da:	11 24       	eor	r1, r1
    67dc:	c8 01       	movw	r24, r16
    67de:	0e 94 ff 33 	call	0x67fe	; 0x67fe <malloc>
    67e2:	ec 01       	movw	r28, r24
    67e4:	00 97       	sbiw	r24, 0x00	; 0
    67e6:	29 f0       	breq	.+10     	; 0x67f2 <calloc+0x2c>
    67e8:	a8 01       	movw	r20, r16
    67ea:	60 e0       	ldi	r22, 0x00	; 0
    67ec:	70 e0       	ldi	r23, 0x00	; 0
    67ee:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <memset>
    67f2:	ce 01       	movw	r24, r28
    67f4:	df 91       	pop	r29
    67f6:	cf 91       	pop	r28
    67f8:	1f 91       	pop	r17
    67fa:	0f 91       	pop	r16
    67fc:	08 95       	ret

000067fe <malloc>:
    67fe:	cf 93       	push	r28
    6800:	df 93       	push	r29
    6802:	82 30       	cpi	r24, 0x02	; 2
    6804:	91 05       	cpc	r25, r1
    6806:	10 f4       	brcc	.+4      	; 0x680c <malloc+0xe>
    6808:	82 e0       	ldi	r24, 0x02	; 2
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	e0 91 0f 18 	lds	r30, 0x180F
    6810:	f0 91 10 18 	lds	r31, 0x1810
    6814:	20 e0       	ldi	r18, 0x00	; 0
    6816:	30 e0       	ldi	r19, 0x00	; 0
    6818:	c0 e0       	ldi	r28, 0x00	; 0
    681a:	d0 e0       	ldi	r29, 0x00	; 0
    681c:	30 97       	sbiw	r30, 0x00	; 0
    681e:	11 f1       	breq	.+68     	; 0x6864 <malloc+0x66>
    6820:	40 81       	ld	r20, Z
    6822:	51 81       	ldd	r21, Z+1	; 0x01
    6824:	48 17       	cp	r20, r24
    6826:	59 07       	cpc	r21, r25
    6828:	c0 f0       	brcs	.+48     	; 0x685a <malloc+0x5c>
    682a:	48 17       	cp	r20, r24
    682c:	59 07       	cpc	r21, r25
    682e:	61 f4       	brne	.+24     	; 0x6848 <malloc+0x4a>
    6830:	82 81       	ldd	r24, Z+2	; 0x02
    6832:	93 81       	ldd	r25, Z+3	; 0x03
    6834:	20 97       	sbiw	r28, 0x00	; 0
    6836:	19 f0       	breq	.+6      	; 0x683e <malloc+0x40>
    6838:	9b 83       	std	Y+3, r25	; 0x03
    683a:	8a 83       	std	Y+2, r24	; 0x02
    683c:	2b c0       	rjmp	.+86     	; 0x6894 <malloc+0x96>
    683e:	90 93 10 18 	sts	0x1810, r25
    6842:	80 93 0f 18 	sts	0x180F, r24
    6846:	26 c0       	rjmp	.+76     	; 0x6894 <malloc+0x96>
    6848:	21 15       	cp	r18, r1
    684a:	31 05       	cpc	r19, r1
    684c:	19 f0       	breq	.+6      	; 0x6854 <malloc+0x56>
    684e:	42 17       	cp	r20, r18
    6850:	53 07       	cpc	r21, r19
    6852:	18 f4       	brcc	.+6      	; 0x685a <malloc+0x5c>
    6854:	9a 01       	movw	r18, r20
    6856:	be 01       	movw	r22, r28
    6858:	df 01       	movw	r26, r30
    685a:	ef 01       	movw	r28, r30
    685c:	02 80       	ldd	r0, Z+2	; 0x02
    685e:	f3 81       	ldd	r31, Z+3	; 0x03
    6860:	e0 2d       	mov	r30, r0
    6862:	dc cf       	rjmp	.-72     	; 0x681c <malloc+0x1e>
    6864:	21 15       	cp	r18, r1
    6866:	31 05       	cpc	r19, r1
    6868:	09 f1       	breq	.+66     	; 0x68ac <malloc+0xae>
    686a:	28 1b       	sub	r18, r24
    686c:	39 0b       	sbc	r19, r25
    686e:	24 30       	cpi	r18, 0x04	; 4
    6870:	31 05       	cpc	r19, r1
    6872:	90 f4       	brcc	.+36     	; 0x6898 <malloc+0x9a>
    6874:	12 96       	adiw	r26, 0x02	; 2
    6876:	8d 91       	ld	r24, X+
    6878:	9c 91       	ld	r25, X
    687a:	13 97       	sbiw	r26, 0x03	; 3
    687c:	61 15       	cp	r22, r1
    687e:	71 05       	cpc	r23, r1
    6880:	21 f0       	breq	.+8      	; 0x688a <malloc+0x8c>
    6882:	fb 01       	movw	r30, r22
    6884:	93 83       	std	Z+3, r25	; 0x03
    6886:	82 83       	std	Z+2, r24	; 0x02
    6888:	04 c0       	rjmp	.+8      	; 0x6892 <malloc+0x94>
    688a:	90 93 10 18 	sts	0x1810, r25
    688e:	80 93 0f 18 	sts	0x180F, r24
    6892:	fd 01       	movw	r30, r26
    6894:	32 96       	adiw	r30, 0x02	; 2
    6896:	44 c0       	rjmp	.+136    	; 0x6920 <malloc+0x122>
    6898:	fd 01       	movw	r30, r26
    689a:	e2 0f       	add	r30, r18
    689c:	f3 1f       	adc	r31, r19
    689e:	81 93       	st	Z+, r24
    68a0:	91 93       	st	Z+, r25
    68a2:	22 50       	subi	r18, 0x02	; 2
    68a4:	31 09       	sbc	r19, r1
    68a6:	2d 93       	st	X+, r18
    68a8:	3c 93       	st	X, r19
    68aa:	3a c0       	rjmp	.+116    	; 0x6920 <malloc+0x122>
    68ac:	20 91 0d 18 	lds	r18, 0x180D
    68b0:	30 91 0e 18 	lds	r19, 0x180E
    68b4:	23 2b       	or	r18, r19
    68b6:	41 f4       	brne	.+16     	; 0x68c8 <malloc+0xca>
    68b8:	20 91 06 02 	lds	r18, 0x0206
    68bc:	30 91 07 02 	lds	r19, 0x0207
    68c0:	30 93 0e 18 	sts	0x180E, r19
    68c4:	20 93 0d 18 	sts	0x180D, r18
    68c8:	20 91 04 02 	lds	r18, 0x0204
    68cc:	30 91 05 02 	lds	r19, 0x0205
    68d0:	21 15       	cp	r18, r1
    68d2:	31 05       	cpc	r19, r1
    68d4:	41 f4       	brne	.+16     	; 0x68e6 <malloc+0xe8>
    68d6:	2d b7       	in	r18, 0x3d	; 61
    68d8:	3e b7       	in	r19, 0x3e	; 62
    68da:	40 91 08 02 	lds	r20, 0x0208
    68de:	50 91 09 02 	lds	r21, 0x0209
    68e2:	24 1b       	sub	r18, r20
    68e4:	35 0b       	sbc	r19, r21
    68e6:	e0 91 0d 18 	lds	r30, 0x180D
    68ea:	f0 91 0e 18 	lds	r31, 0x180E
    68ee:	e2 17       	cp	r30, r18
    68f0:	f3 07       	cpc	r31, r19
    68f2:	a0 f4       	brcc	.+40     	; 0x691c <malloc+0x11e>
    68f4:	2e 1b       	sub	r18, r30
    68f6:	3f 0b       	sbc	r19, r31
    68f8:	28 17       	cp	r18, r24
    68fa:	39 07       	cpc	r19, r25
    68fc:	78 f0       	brcs	.+30     	; 0x691c <malloc+0x11e>
    68fe:	ac 01       	movw	r20, r24
    6900:	4e 5f       	subi	r20, 0xFE	; 254
    6902:	5f 4f       	sbci	r21, 0xFF	; 255
    6904:	24 17       	cp	r18, r20
    6906:	35 07       	cpc	r19, r21
    6908:	48 f0       	brcs	.+18     	; 0x691c <malloc+0x11e>
    690a:	4e 0f       	add	r20, r30
    690c:	5f 1f       	adc	r21, r31
    690e:	50 93 0e 18 	sts	0x180E, r21
    6912:	40 93 0d 18 	sts	0x180D, r20
    6916:	81 93       	st	Z+, r24
    6918:	91 93       	st	Z+, r25
    691a:	02 c0       	rjmp	.+4      	; 0x6920 <malloc+0x122>
    691c:	e0 e0       	ldi	r30, 0x00	; 0
    691e:	f0 e0       	ldi	r31, 0x00	; 0
    6920:	cf 01       	movw	r24, r30
    6922:	df 91       	pop	r29
    6924:	cf 91       	pop	r28
    6926:	08 95       	ret

00006928 <free>:
    6928:	0f 93       	push	r16
    692a:	1f 93       	push	r17
    692c:	cf 93       	push	r28
    692e:	df 93       	push	r29
    6930:	00 97       	sbiw	r24, 0x00	; 0
    6932:	09 f4       	brne	.+2      	; 0x6936 <free+0xe>
    6934:	8c c0       	rjmp	.+280    	; 0x6a4e <free+0x126>
    6936:	fc 01       	movw	r30, r24
    6938:	32 97       	sbiw	r30, 0x02	; 2
    693a:	13 82       	std	Z+3, r1	; 0x03
    693c:	12 82       	std	Z+2, r1	; 0x02
    693e:	00 91 0f 18 	lds	r16, 0x180F
    6942:	10 91 10 18 	lds	r17, 0x1810
    6946:	01 15       	cp	r16, r1
    6948:	11 05       	cpc	r17, r1
    694a:	81 f4       	brne	.+32     	; 0x696c <free+0x44>
    694c:	20 81       	ld	r18, Z
    694e:	31 81       	ldd	r19, Z+1	; 0x01
    6950:	82 0f       	add	r24, r18
    6952:	93 1f       	adc	r25, r19
    6954:	20 91 0d 18 	lds	r18, 0x180D
    6958:	30 91 0e 18 	lds	r19, 0x180E
    695c:	28 17       	cp	r18, r24
    695e:	39 07       	cpc	r19, r25
    6960:	79 f5       	brne	.+94     	; 0x69c0 <free+0x98>
    6962:	f0 93 0e 18 	sts	0x180E, r31
    6966:	e0 93 0d 18 	sts	0x180D, r30
    696a:	71 c0       	rjmp	.+226    	; 0x6a4e <free+0x126>
    696c:	d8 01       	movw	r26, r16
    696e:	40 e0       	ldi	r20, 0x00	; 0
    6970:	50 e0       	ldi	r21, 0x00	; 0
    6972:	ae 17       	cp	r26, r30
    6974:	bf 07       	cpc	r27, r31
    6976:	50 f4       	brcc	.+20     	; 0x698c <free+0x64>
    6978:	12 96       	adiw	r26, 0x02	; 2
    697a:	2d 91       	ld	r18, X+
    697c:	3c 91       	ld	r19, X
    697e:	13 97       	sbiw	r26, 0x03	; 3
    6980:	ad 01       	movw	r20, r26
    6982:	21 15       	cp	r18, r1
    6984:	31 05       	cpc	r19, r1
    6986:	09 f1       	breq	.+66     	; 0x69ca <free+0xa2>
    6988:	d9 01       	movw	r26, r18
    698a:	f3 cf       	rjmp	.-26     	; 0x6972 <free+0x4a>
    698c:	9d 01       	movw	r18, r26
    698e:	da 01       	movw	r26, r20
    6990:	33 83       	std	Z+3, r19	; 0x03
    6992:	22 83       	std	Z+2, r18	; 0x02
    6994:	60 81       	ld	r22, Z
    6996:	71 81       	ldd	r23, Z+1	; 0x01
    6998:	86 0f       	add	r24, r22
    699a:	97 1f       	adc	r25, r23
    699c:	82 17       	cp	r24, r18
    699e:	93 07       	cpc	r25, r19
    69a0:	69 f4       	brne	.+26     	; 0x69bc <free+0x94>
    69a2:	ec 01       	movw	r28, r24
    69a4:	28 81       	ld	r18, Y
    69a6:	39 81       	ldd	r19, Y+1	; 0x01
    69a8:	26 0f       	add	r18, r22
    69aa:	37 1f       	adc	r19, r23
    69ac:	2e 5f       	subi	r18, 0xFE	; 254
    69ae:	3f 4f       	sbci	r19, 0xFF	; 255
    69b0:	31 83       	std	Z+1, r19	; 0x01
    69b2:	20 83       	st	Z, r18
    69b4:	8a 81       	ldd	r24, Y+2	; 0x02
    69b6:	9b 81       	ldd	r25, Y+3	; 0x03
    69b8:	93 83       	std	Z+3, r25	; 0x03
    69ba:	82 83       	std	Z+2, r24	; 0x02
    69bc:	45 2b       	or	r20, r21
    69be:	29 f4       	brne	.+10     	; 0x69ca <free+0xa2>
    69c0:	f0 93 10 18 	sts	0x1810, r31
    69c4:	e0 93 0f 18 	sts	0x180F, r30
    69c8:	42 c0       	rjmp	.+132    	; 0x6a4e <free+0x126>
    69ca:	13 96       	adiw	r26, 0x03	; 3
    69cc:	fc 93       	st	X, r31
    69ce:	ee 93       	st	-X, r30
    69d0:	12 97       	sbiw	r26, 0x02	; 2
    69d2:	ed 01       	movw	r28, r26
    69d4:	49 91       	ld	r20, Y+
    69d6:	59 91       	ld	r21, Y+
    69d8:	9e 01       	movw	r18, r28
    69da:	24 0f       	add	r18, r20
    69dc:	35 1f       	adc	r19, r21
    69de:	e2 17       	cp	r30, r18
    69e0:	f3 07       	cpc	r31, r19
    69e2:	71 f4       	brne	.+28     	; 0x6a00 <free+0xd8>
    69e4:	80 81       	ld	r24, Z
    69e6:	91 81       	ldd	r25, Z+1	; 0x01
    69e8:	84 0f       	add	r24, r20
    69ea:	95 1f       	adc	r25, r21
    69ec:	02 96       	adiw	r24, 0x02	; 2
    69ee:	11 96       	adiw	r26, 0x01	; 1
    69f0:	9c 93       	st	X, r25
    69f2:	8e 93       	st	-X, r24
    69f4:	82 81       	ldd	r24, Z+2	; 0x02
    69f6:	93 81       	ldd	r25, Z+3	; 0x03
    69f8:	13 96       	adiw	r26, 0x03	; 3
    69fa:	9c 93       	st	X, r25
    69fc:	8e 93       	st	-X, r24
    69fe:	12 97       	sbiw	r26, 0x02	; 2
    6a00:	e0 e0       	ldi	r30, 0x00	; 0
    6a02:	f0 e0       	ldi	r31, 0x00	; 0
    6a04:	d8 01       	movw	r26, r16
    6a06:	12 96       	adiw	r26, 0x02	; 2
    6a08:	8d 91       	ld	r24, X+
    6a0a:	9c 91       	ld	r25, X
    6a0c:	13 97       	sbiw	r26, 0x03	; 3
    6a0e:	00 97       	sbiw	r24, 0x00	; 0
    6a10:	19 f0       	breq	.+6      	; 0x6a18 <free+0xf0>
    6a12:	f8 01       	movw	r30, r16
    6a14:	8c 01       	movw	r16, r24
    6a16:	f6 cf       	rjmp	.-20     	; 0x6a04 <free+0xdc>
    6a18:	8d 91       	ld	r24, X+
    6a1a:	9c 91       	ld	r25, X
    6a1c:	98 01       	movw	r18, r16
    6a1e:	2e 5f       	subi	r18, 0xFE	; 254
    6a20:	3f 4f       	sbci	r19, 0xFF	; 255
    6a22:	82 0f       	add	r24, r18
    6a24:	93 1f       	adc	r25, r19
    6a26:	20 91 0d 18 	lds	r18, 0x180D
    6a2a:	30 91 0e 18 	lds	r19, 0x180E
    6a2e:	28 17       	cp	r18, r24
    6a30:	39 07       	cpc	r19, r25
    6a32:	69 f4       	brne	.+26     	; 0x6a4e <free+0x126>
    6a34:	30 97       	sbiw	r30, 0x00	; 0
    6a36:	29 f4       	brne	.+10     	; 0x6a42 <free+0x11a>
    6a38:	10 92 10 18 	sts	0x1810, r1
    6a3c:	10 92 0f 18 	sts	0x180F, r1
    6a40:	02 c0       	rjmp	.+4      	; 0x6a46 <free+0x11e>
    6a42:	13 82       	std	Z+3, r1	; 0x03
    6a44:	12 82       	std	Z+2, r1	; 0x02
    6a46:	10 93 0e 18 	sts	0x180E, r17
    6a4a:	00 93 0d 18 	sts	0x180D, r16
    6a4e:	df 91       	pop	r29
    6a50:	cf 91       	pop	r28
    6a52:	1f 91       	pop	r17
    6a54:	0f 91       	pop	r16
    6a56:	08 95       	ret

00006a58 <memset>:
    6a58:	dc 01       	movw	r26, r24
    6a5a:	01 c0       	rjmp	.+2      	; 0x6a5e <memset+0x6>
    6a5c:	6d 93       	st	X+, r22
    6a5e:	41 50       	subi	r20, 0x01	; 1
    6a60:	50 40       	sbci	r21, 0x00	; 0
    6a62:	e0 f7       	brcc	.-8      	; 0x6a5c <memset+0x4>
    6a64:	08 95       	ret

00006a66 <__mulshisi3>:
    6a66:	b7 ff       	sbrs	r27, 7
    6a68:	0c 94 c7 30 	jmp	0x618e	; 0x618e <__muluhisi3>

00006a6c <__mulohisi3>:
    6a6c:	0e 94 c7 30 	call	0x618e	; 0x618e <__muluhisi3>
    6a70:	82 1b       	sub	r24, r18
    6a72:	93 0b       	sbc	r25, r19
    6a74:	08 95       	ret

00006a76 <__divmodsi4>:
    6a76:	05 2e       	mov	r0, r21
    6a78:	97 fb       	bst	r25, 7
    6a7a:	1e f4       	brtc	.+6      	; 0x6a82 <__divmodsi4+0xc>
    6a7c:	00 94       	com	r0
    6a7e:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <__negsi2>
    6a82:	57 fd       	sbrc	r21, 7
    6a84:	07 d0       	rcall	.+14     	; 0x6a94 <__divmodsi4_neg2>
    6a86:	0e 94 0a 31 	call	0x6214	; 0x6214 <__udivmodsi4>
    6a8a:	07 fc       	sbrc	r0, 7
    6a8c:	03 d0       	rcall	.+6      	; 0x6a94 <__divmodsi4_neg2>
    6a8e:	4e f4       	brtc	.+18     	; 0x6aa2 <__divmodsi4_exit>
    6a90:	0c 94 52 35 	jmp	0x6aa4	; 0x6aa4 <__negsi2>

00006a94 <__divmodsi4_neg2>:
    6a94:	50 95       	com	r21
    6a96:	40 95       	com	r20
    6a98:	30 95       	com	r19
    6a9a:	21 95       	neg	r18
    6a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    6a9e:	4f 4f       	sbci	r20, 0xFF	; 255
    6aa0:	5f 4f       	sbci	r21, 0xFF	; 255

00006aa2 <__divmodsi4_exit>:
    6aa2:	08 95       	ret

00006aa4 <__negsi2>:
    6aa4:	90 95       	com	r25
    6aa6:	80 95       	com	r24
    6aa8:	70 95       	com	r23
    6aaa:	61 95       	neg	r22
    6aac:	7f 4f       	sbci	r23, 0xFF	; 255
    6aae:	8f 4f       	sbci	r24, 0xFF	; 255
    6ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab2:	08 95       	ret

00006ab4 <_exit>:
    6ab4:	f8 94       	cli

00006ab6 <__stop_program>:
    6ab6:	ff cf       	rjmp	.-2      	; 0x6ab6 <__stop_program>
