
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000282  00800200  00007298  0000732c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008ae  00800482  00800482  000075ae  2**0
                  ALLOC
  3 .stab         00016c44  00000000  00000000  000075b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a5c7  00000000  00000000  0001e1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000287bb  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  000287cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0002992c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0002a99e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  0002a9bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__ctors_end>
       4:	0c 94 fb 31 	jmp	0x63f6	; 0x63f6 <__vector_1>
       8:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__vector_2>
       c:	0c 94 5f 32 	jmp	0x64be	; 0x64be <__vector_3>
      10:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      14:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      18:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      1c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      20:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      24:	0c 94 c9 31 	jmp	0x6392	; 0x6392 <__vector_9>
      28:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      2c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      30:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      34:	0c 94 28 30 	jmp	0x6050	; 0x6050 <__vector_13>
      38:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      3c:	0c 94 28 30 	jmp	0x6050	; 0x6050 <__vector_13>
      40:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      44:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      48:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      4c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      50:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      54:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      58:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      5c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      60:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      64:	0c 94 bf 18 	jmp	0x317e	; 0x317e <__vector_25>
      68:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      6c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      70:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      74:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      78:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      7c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      80:	0c 94 5b 30 	jmp	0x60b6	; 0x60b6 <__vector_32>
      84:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      88:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      8c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      90:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      94:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      98:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      9c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      a0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      a4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      a8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      ac:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      b0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      b4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      b8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      bc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      c0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      c4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      c8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      cc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      d0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      d4:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      d8:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      dc:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      e0:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
      e4:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__vector_57>
      e8:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <__vector_58>
      ec:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__vector_59>
      f0:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__vector_60>
      f4:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__vector_61>
      f8:	0c 94 74 16 	jmp	0x2ce8	; 0x2ce8 <__vector_62>
      fc:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__vector_63>
     100:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <__vector_64>
     104:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     108:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     10c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     110:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     114:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     118:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     11c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__bad_interrupt>
     120:	9e 19       	sub	r25, r14
     122:	ab 19       	sub	r26, r11
     124:	b8 19       	sub	r27, r8
     126:	c5 19       	sub	r28, r5
     128:	d2 19       	sub	r29, r2
     12a:	df 19       	sub	r29, r15
     12c:	ec 19       	sub	r30, r12
     12e:	0f 1a       	sub	r0, r31
     130:	1d 1a       	sub	r1, r29
     132:	2b 1a       	sub	r2, r27
     134:	39 1a       	sub	r3, r25
     136:	47 1a       	sub	r4, r23
     138:	55 1a       	sub	r5, r21
     13a:	55 1a       	sub	r5, r21
     13c:	78 1a       	sub	r7, r24
     13e:	7a 1a       	sub	r7, r26
     140:	7c 1a       	sub	r7, r28
     142:	7e 1a       	sub	r7, r30
     144:	80 1a       	sub	r8, r16
     146:	82 1a       	sub	r8, r18
     148:	84 1a       	sub	r8, r20
     14a:	a3 1a       	sub	r10, r19
     14c:	c6 1a       	sub	r12, r22
     14e:	ea 1a       	sub	r14, r26
     150:	0d 1b       	sub	r16, r29
     152:	30 1b       	sub	r19, r16
     154:	53 1b       	sub	r21, r19
     156:	76 1b       	sub	r23, r22
     158:	b0 1b       	sub	r27, r16
     15a:	bd 1b       	sub	r27, r29
     15c:	ca 1b       	sub	r28, r26
     15e:	d7 1b       	sub	r29, r23
     160:	e4 1b       	sub	r30, r20
     162:	f1 1b       	sub	r31, r17
     164:	fe 1b       	sub	r31, r30
     166:	17 1c       	adc	r1, r7
     168:	24 1c       	adc	r2, r4
     16a:	31 1c       	adc	r3, r1
     16c:	3e 1c       	adc	r3, r14
     16e:	4b 1c       	adc	r4, r11
     170:	58 1c       	adc	r5, r8
     172:	65 1c       	adc	r6, r5
     174:	fd 1f       	adc	r31, r29
     176:	03 20       	and	r0, r3
     178:	06 20       	and	r0, r6
     17a:	09 20       	and	r0, r9
     17c:	0c 20       	and	r0, r12
     17e:	0f 20       	and	r0, r15
     180:	15 20       	and	r1, r5
     182:	12 20       	and	r1, r2
     184:	18 20       	and	r1, r8
     186:	1b 20       	and	r1, r11
     188:	1e 20       	and	r1, r14
     18a:	27 20       	and	r2, r7
     18c:	2a 20       	and	r2, r10
     18e:	2d 20       	and	r2, r13
     190:	30 20       	and	r3, r0
     192:	24 20       	and	r2, r4
     194:	fa 1f       	adc	r31, r26
     196:	00 20       	and	r0, r0
     198:	33 20       	and	r3, r3
     19a:	36 20       	and	r3, r6
     19c:	21 20       	and	r2, r1
     19e:	f7 1f       	adc	r31, r23
     1a0:	cd 20       	and	r12, r13
     1a2:	d0 20       	and	r13, r0
     1a4:	db 20       	and	r13, r11
     1a6:	e0 20       	and	r14, r0
     1a8:	e7 20       	and	r14, r7
     1aa:	f0 20       	and	r15, r0
     1ac:	f3 20       	and	r15, r3
     1ae:	f8 20       	and	r15, r8
     1b0:	ff 20       	and	r15, r15
     1b2:	08 21       	and	r16, r8

000001b4 <__trampolines_end>:
     1b4:	46 61       	ori	r20, 0x16	; 22
     1b6:	69 6c       	ori	r22, 0xC9	; 201
     1b8:	65 64       	ori	r22, 0x45	; 69
     1ba:	20 74       	andi	r18, 0x40	; 64
     1bc:	6f 20       	and	r6, r15
     1be:	6c 6f       	ori	r22, 0xFC	; 252
     1c0:	61 64       	ori	r22, 0x41	; 65
     1c2:	20 6d       	ori	r18, 0xD0	; 208
     1c4:	79 20       	and	r7, r9
     1c6:	41 44       	sbci	r20, 0x41	; 65
     1c8:	43 20       	and	r4, r3
     1ca:	64 72       	andi	r22, 0x24	; 36
     1cc:	69 76       	andi	r22, 0x69	; 105
     1ce:	65 72       	andi	r22, 0x25	; 37
     1d0:	0d 0a       	sbc	r0, r29
	...

000001d3 <__c.3879>:
     1d3:	43 72 65 61 74 65 20 44 6f 6e 65 0d 0a 00           Create Done...

000001e1 <__c.3762>:
     1e1:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     1f1:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

000001fd <__c.3736>:
     1fd:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     20d:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     21d:	0d 0a 00                                            ...

00000220 <__c.3734>:
     220:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     230:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     240:	74 0d 0a 00                                         t...

00000244 <__c.3718>:
     244:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     254:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     264:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000270 <__c.3716>:
     270:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     280:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     290:	61 69 6c 65 64 0d 0a 00                             ailed...

00000298 <__c.3714>:
     298:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2a8:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     2b8:	61 69 6c 65 64 0d 0a 00                             ailed...

000002c0 <__c.3708>:
     2c0:	0d 0a 43 75 72 72 65 6e 74 20 4c 69 67 68 74 20     ..Current Light 
     2d0:	56 61 6c 75 65 73 3a 0d 0a 00                       Values:...

000002da <__c.3754>:
     2da:	0d 0a 4e 65 69 67 68 62 6f 72 20 47 72 61 70 68     ..Neighbor Graph
     2ea:	3a 0d 0a 00                                         :...

000002ee <__c.3125>:
     2ee:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     2fe:	65 64 0d 0a 00                                      ed...

00000303 <__c.3381>:
     303:	55 4e 4b 4f 57 4e 00                                UNKOWN.

0000030a <__c.3378>:
     30a:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000319 <__c.3375>:
     319:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

0000032a <__c.3372>:
     32a:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     33a:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000345 <__c.3369>:
     345:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     355:	20 53 69 67 6e 61 6c 00                              Signal.

0000035d <__c.3366>:
     35d:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     36d:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000037d <__c.3363>:
     37d:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     38d:	72 6f 72 00                                         ror.

00000391 <__c.3360>:
     391:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000003a2 <__c.3357>:
     3a2:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     3b2:	61 72 74 00                                         art.

000003b6 <__c.3354>:
     3b6:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000003c5 <__c.3351>:
     3c5:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     3d5:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000003e0 <__c.3348>:
     3e0:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000003ec <__c.3345>:
     3ec:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     3fc:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     40c:	20 6f 6b 3f 00                                       ok?.

00000411 <__c.3342>:
     411:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     421:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000042f <__c.3339>:
     42f:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     43f:	72 74 00                                            rt.

00000442 <__c.3336>:
     442:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     452:	49 44 00                                            ID.

00000455 <__c.3333>:
     455:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     465:	20 57 61 6b 65 75 70 00                              Wakeup.

0000046d <__c.3330>:
     46d:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     47d:	6c 61 74 65 64 00                                   lated.

00000483 <__c.3327>:
     483:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     493:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000049e <__c.3324>:
     49e:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     4ae:	69 6e 74 65 72 00                                   inter.

000004b4 <__c.3321>:
     4b4:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     4c4:	6c 6f 77 00                                         low.

000004c8 <__c.3318>:
     4c8:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     4d8:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     4e8:	6e 6f 75 67 68 21 00                                nough!.

000004ef <__c.3314>:
     4ef:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     4ff:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     50f:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     51f:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

0000052b <__c.3311>:
     52b:	29 3a 20 00                                         ): .

0000052f <__c.3309>:
     52f:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000053b <__c.3246>:
     53b:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

0000054a <__c.2228>:
     54a:	45 46 47 65 66 67 00                                EFGefg.

00000551 <__c.2222>:
     551:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000562 <__ctors_end>:
     562:	11 24       	eor	r1, r1
     564:	1f be       	out	0x3f, r1	; 63
     566:	cf ef       	ldi	r28, 0xFF	; 255
     568:	d1 e4       	ldi	r29, 0x41	; 65
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	cd bf       	out	0x3d, r28	; 61

0000056e <__do_copy_data>:
     56e:	14 e0       	ldi	r17, 0x04	; 4
     570:	a0 e0       	ldi	r26, 0x00	; 0
     572:	b2 e0       	ldi	r27, 0x02	; 2
     574:	e8 e9       	ldi	r30, 0x98	; 152
     576:	f2 e7       	ldi	r31, 0x72	; 114
     578:	00 e0       	ldi	r16, 0x00	; 0
     57a:	0b bf       	out	0x3b, r16	; 59
     57c:	02 c0       	rjmp	.+4      	; 0x582 <__do_copy_data+0x14>
     57e:	07 90       	elpm	r0, Z+
     580:	0d 92       	st	X+, r0
     582:	a2 38       	cpi	r26, 0x82	; 130
     584:	b1 07       	cpc	r27, r17
     586:	d9 f7       	brne	.-10     	; 0x57e <__do_copy_data+0x10>

00000588 <__do_clear_bss>:
     588:	1d e0       	ldi	r17, 0x0D	; 13
     58a:	a2 e8       	ldi	r26, 0x82	; 130
     58c:	b4 e0       	ldi	r27, 0x04	; 4
     58e:	01 c0       	rjmp	.+2      	; 0x592 <.do_clear_bss_start>

00000590 <.do_clear_bss_loop>:
     590:	1d 92       	st	X+, r1

00000592 <.do_clear_bss_start>:
     592:	a0 33       	cpi	r26, 0x30	; 48
     594:	b1 07       	cpc	r27, r17
     596:	e1 f7       	brne	.-8      	; 0x590 <.do_clear_bss_loop>
     598:	0e 94 74 33 	call	0x66e8	; 0x66e8 <main>
     59c:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <_exit>

000005a0 <__bad_interrupt>:
     5a0:	0c 94 1e 30 	jmp	0x603c	; 0x603c <__vector_default>

000005a4 <receive_message>:
 * FORMAT [msg_type][id][seq_num][hop_num][neighbor][sens_value]
 * @returns message_type for node to act on
 */

void receive_message(packet *new_packet)
{
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	00 d0       	rcall	.+0      	; 0x5b2 <receive_message+0xe>
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	8c 01       	movw	r16, r24
  // local variable declarations
  uint8_t *rx_cpy;
  uint16_t node_id;
  int8_t rssi;
  uint8_t len = 0;
     5b8:	19 82       	std	Y+1, r1	; 0x01
  msg_type return_message;

  node_id = 0;

  // Get the RX packet -> if not ready then return as such
  nrk_led_set (ORANGE_LED);
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_led_set>
  if(bmac_rx_pkt_ready()) 
     5c2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <bmac_rx_pkt_ready>
     5c6:	88 23       	and	r24, r24
     5c8:	09 f4       	brne	.+2      	; 0x5cc <receive_message+0x28>
     5ca:	5b c0       	rjmp	.+182    	; 0x682 <receive_message+0xde>
  {
    // get packet and store in rx_cpy
    rx_cpy = bmac_rx_pkt_get(&len, &rssi);
     5cc:	be 01       	movw	r22, r28
     5ce:	6e 5f       	subi	r22, 0xFE	; 254
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	ce 01       	movw	r24, r28
     5d4:	01 96       	adiw	r24, 0x01	; 1
     5d6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <bmac_rx_pkt_get>
     5da:	7c 01       	movw	r14, r24
    printf("RX: %s\r\n", rx_cpy);
     5dc:	ff 92       	push	r15
     5de:	8f 93       	push	r24
     5e0:	8b e5       	ldi	r24, 0x5B	; 91
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
  
    parse_msg(new_packet, rx_cpy, len);
     5ec:	49 81       	ldd	r20, Y+1	; 0x01
     5ee:	b7 01       	movw	r22, r14
     5f0:	c8 01       	movw	r24, r16
     5f2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <parse_msg>
  
    print_packet(new_packet);
     5f6:	c8 01       	movw	r24, r16
     5f8:	0e 94 19 11 	call	0x2232	; 0x2232 <print_packet>
    if(new_packet->type == MSG_GATEWAY)
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	f8 01       	movw	r30, r16
     606:	80 81       	ld	r24, Z
     608:	83 30       	cpi	r24, 0x03	; 3
     60a:	c1 f4       	brne	.+48     	; 0x63c <receive_message+0x98>
    {
      // update new timer parameters
      sensor_time_limit.secs = new_packet->sensor_sample_rate;
     60c:	84 85       	ldd	r24, Z+12	; 0x0c
     60e:	95 85       	ldd	r25, Z+13	; 0x0d
     610:	a0 e0       	ldi	r26, 0x00	; 0
     612:	b0 e0       	ldi	r27, 0x00	; 0
     614:	80 93 0f 08 	sts	0x080F, r24
     618:	90 93 10 08 	sts	0x0810, r25
     61c:	a0 93 11 08 	sts	0x0811, r26
     620:	b0 93 12 08 	sts	0x0812, r27
      neighbor_time_limit.secs = new_packet->neighbor_update_rate;
     624:	86 85       	ldd	r24, Z+14	; 0x0e
     626:	97 85       	ldd	r25, Z+15	; 0x0f
     628:	a0 e0       	ldi	r26, 0x00	; 0
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	80 93 86 07 	sts	0x0786, r24
     630:	90 93 87 07 	sts	0x0787, r25
     634:	a0 93 88 07 	sts	0x0788, r26
     638:	b0 93 89 07 	sts	0x0789, r27
    }
  
    // check to see if packet is from the originator (hop = 0), if so.. add him to your table he's your new neighbor!
    if(new_packet->num_hops == 0)
     63c:	f8 01       	movw	r30, r16
     63e:	84 81       	ldd	r24, Z+4	; 0x04
     640:	81 11       	cpse	r24, r1
     642:	1d c0       	rjmp	.+58     	; 0x67e <receive_message+0xda>
      {
      print_neighbor_table(&local_neighbor_table);
     644:	8b e5       	ldi	r24, 0x5B	; 91
     646:	95 e0       	ldi	r25, 0x05	; 5
     648:	0e 94 0c 10 	call	0x2018	; 0x2018 <print_neighbor_table>
      // now check to see if the source_id of packet is in local neighbor table
      int8_t source_node_in_neighbor_table = in_neighbor_table(&local_neighbor_table, new_packet->source_id);
     64c:	f8 01       	movw	r30, r16
     64e:	61 81       	ldd	r22, Z+1	; 0x01
     650:	8b e5       	ldi	r24, 0x5B	; 91
     652:	95 e0       	ldi	r25, 0x05	; 5
     654:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <in_neighbor_table>
      
      if(source_node_in_neighbor_table == -1)
     658:	8f 3f       	cpi	r24, 0xFF	; 255
     65a:	31 f4       	brne	.+12     	; 0x668 <receive_message+0xc4>
      {
        // source node for this packet has not been seen before,
        // add to local neighbor table.
        neighbor_t new_neighbor;
        new_neighbor.id = new_packet->source_id;
     65c:	f8 01       	movw	r30, r16
     65e:	61 81       	ldd	r22, Z+1	; 0x01
        add_neighbor(&local_neighbor_table, new_neighbor);
     660:	8b e5       	ldi	r24, 0x5B	; 91
     662:	95 e0       	ldi	r25, 0x05	; 5
     664:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <add_neighbor>
      }
      
      print_neighbor_table(&local_neighbor_table);
     668:	8b e5       	ldi	r24, 0x5B	; 91
     66a:	95 e0       	ldi	r25, 0x05	; 5
     66c:	0e 94 0c 10 	call	0x2018	; 0x2018 <print_neighbor_table>
  
      nrk_led_clr(ORANGE_LED);
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 96 1c 	call	0x392c	; 0x392c <nrk_led_clr>
      // Release the RX buffer so future packets can arrive
      memset(rx_cpy, 0, sizeof(rx_cpy));
     678:	f7 01       	movw	r30, r14
     67a:	11 82       	std	Z+1, r1	; 0x01
     67c:	10 82       	st	Z, r1
    }
    bmac_rx_pkt_release ();
     67e:	0e 94 82 06 	call	0xd04	; 0xd04 <bmac_rx_pkt_release>
  }
  return;
}
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	ff 90       	pop	r15
     690:	ef 90       	pop	r14
     692:	08 95       	ret

00000694 <hop_task>:
****************************************************************************************************/


uint16_t light;
void hop_task ()
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	e8 97       	sbiw	r28, 0x38	; 56
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
  uint8_t new_node = NONE;
  int8_t in_seq_pool;
  uint16_t local_seq_num;

  // init bmac on channel 13
  bmac_init (13);
     6a8:	8d e0       	ldi	r24, 0x0D	; 13
     6aa:	0e 94 82 05 	call	0xb04	; 0xb04 <bmac_init>

  // This sets the next RX buffer.
  // This can be called at anytime before releasing the packet
  // if you wish to do a zero-copy buffer switch
  bmac_rx_pkt_set_buffer(rx_buf, RF_MAX_PAYLOAD_SIZE);
     6ae:	64 e7       	ldi	r22, 0x74	; 116
     6b0:	87 e1       	ldi	r24, 0x17	; 23
     6b2:	98 e0       	ldi	r25, 0x08	; 8
     6b4:	0e 94 74 05 	call	0xae8	; 0xae8 <bmac_rx_pkt_set_buffer>

    //Timer management
  nrk_time_t neighbor_start_time, current_time;
  nrk_time_t sensor_start_time;

  sensor_time_limit.secs = 10;
     6b8:	8a e0       	ldi	r24, 0x0A	; 10
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	a0 e0       	ldi	r26, 0x00	; 0
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	80 93 0f 08 	sts	0x080F, r24
     6c4:	90 93 10 08 	sts	0x0810, r25
     6c8:	a0 93 11 08 	sts	0x0811, r26
     6cc:	b0 93 12 08 	sts	0x0812, r27
  neighbor_time_limit.secs = 15;
     6d0:	8f e0       	ldi	r24, 0x0F	; 15
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	a0 e0       	ldi	r26, 0x00	; 0
     6d6:	b0 e0       	ldi	r27, 0x00	; 0
     6d8:	80 93 86 07 	sts	0x0786, r24
     6dc:	90 93 87 07 	sts	0x0787, r25
     6e0:	a0 93 88 07 	sts	0x0788, r26
     6e4:	b0 93 89 07 	sts	0x0789, r27
  // local variable instantiation
  int8_t val;
  msg_type received;
  // new packet is the packet received (parsed into type packet)
  packet new_packet;
  uint8_t new_node = NONE;
     6e8:	31 2c       	mov	r3, r1
    if(delta_sensor.secs >= sensor_time_limit.secs)
    {
      light = sample_light();

      // now send the value
      sprintf (tx_buf, "[%d][%d][%d][%d][%d]", MSG_NODE_SENSOR_VALUE, MAC_ADDR, local_seq_count, 0, light);
     6ea:	87 e0       	ldi	r24, 0x07	; 7
     6ec:	28 2e       	mov	r2, r24
     6ee:	9e e9       	ldi	r25, 0x9E	; 158
     6f0:	69 2e       	mov	r6, r25
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	79 2e       	mov	r7, r25
    uint16_t difference_n = delta_neighbor.secs;
    //printf("current time %d \r\n", current_time.secs);
    if(delta_neighbor.secs >= neighbor_time_limit.secs)
    {
      // send neighbortable
      sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d,%d,%d]", MSG_NODE_NEIGHBORS, MAC_ADDR, local_seq_count,
     6f6:	24 e6       	ldi	r18, 0x64	; 100
     6f8:	42 2e       	mov	r4, r18
     6fa:	22 e0       	ldi	r18, 0x02	; 2
     6fc:	52 2e       	mov	r5, r18
  while(1)
  {
   /*******************************     Section to handle received message         *************************
    *
    ****************************************************************************************************/
    receive_message(&new_packet);
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <receive_message>
    
    // check to our sequence pool to see if we have already received this packet
    in_seq_pool = in_sequence_pool(&seq_pool, new_packet.source_id);
     706:	6a 81       	ldd	r22, Y+2	; 0x02
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	0e 94 a7 12 	call	0x254e	; 0x254e <in_sequence_pool>
    if((in_seq_pool == -1) && (new_packet.source_id != MAC_ADDR)) {
     710:	8f 3f       	cpi	r24, 0xFF	; 255
     712:	59 f4       	brne	.+22     	; 0x72a <hop_task+0x96>
     714:	6a 81       	ldd	r22, Y+2	; 0x02
     716:	67 30       	cpi	r22, 0x07	; 7
     718:	41 f0       	breq	.+16     	; 0x72a <hop_task+0x96>
      add_to_sequence_pool(&seq_pool, new_packet.source_id, new_packet.seq_num);
     71a:	4b 81       	ldd	r20, Y+3	; 0x03
     71c:	5c 81       	ldd	r21, Y+4	; 0x04
     71e:	83 e0       	ldi	r24, 0x03	; 3
     720:	99 e0       	ldi	r25, 0x09	; 9
     722:	0e 94 d7 12 	call	0x25ae	; 0x25ae <add_to_sequence_pool>
      new_node = NODE_FOUND;
     726:	33 24       	eor	r3, r3
     728:	33 94       	inc	r3
    }
    
    local_seq_num = get_sequence_number(&seq_pool, new_packet.source_id);
     72a:	6a 81       	ldd	r22, Y+2	; 0x02
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	99 e0       	ldi	r25, 0x09	; 9
     730:	0e 94 c3 12 	call	0x2586	; 0x2586 <get_sequence_number>
    if((new_packet.source_id != MAC_ADDR) && (new_packet.source_id != GATEWAY_ID) &&
     734:	6a 81       	ldd	r22, Y+2	; 0x02
     736:	67 30       	cpi	r22, 0x07	; 7
     738:	39 f1       	breq	.+78     	; 0x788 <hop_task+0xf4>
     73a:	61 30       	cpi	r22, 0x01	; 1
     73c:	29 f1       	breq	.+74     	; 0x788 <hop_task+0xf4>
        ((new_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND))) {
     73e:	4b 81       	ldd	r20, Y+3	; 0x03
     740:	5c 81       	ldd	r21, Y+4	; 0x04
      add_to_sequence_pool(&seq_pool, new_packet.source_id, new_packet.seq_num);
      new_node = NODE_FOUND;
    }
    
    local_seq_num = get_sequence_number(&seq_pool, new_packet.source_id);
    if((new_packet.source_id != MAC_ADDR) && (new_packet.source_id != GATEWAY_ID) &&
     742:	84 17       	cp	r24, r20
     744:	95 07       	cpc	r25, r21
     746:	18 f0       	brcs	.+6      	; 0x74e <hop_task+0xba>
        ((new_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND))) {
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	38 12       	cpse	r3, r24
     74c:	1c c0       	rjmp	.+56     	; 0x786 <hop_task+0xf2>
      
      // update the sequence pool
      update_sequence_pool(&seq_pool, new_packet.source_id, new_packet.seq_num);
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	99 e0       	ldi	r25, 0x09	; 9
     752:	0e 94 04 13 	call	0x2608	; 0x2608 <update_sequence_pool>
      new_node = NONE;

      // increase the hop counter and forward the packet
      new_packet.num_hops += 1;      // now forward the packet!
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	8d 83       	std	Y+5, r24	; 0x05
      assemble_packet(&tx_buf,&new_packet);
     75c:	be 01       	movw	r22, r28
     75e:	6f 5f       	subi	r22, 0xFF	; 255
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	8f e8       	ldi	r24, 0x8F	; 143
     764:	98 e0       	ldi	r25, 0x08	; 8
     766:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <assemble_packet>
      val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);      
     76a:	ef e8       	ldi	r30, 0x8F	; 143
     76c:	f8 e0       	ldi	r31, 0x08	; 8
     76e:	01 90       	ld	r0, Z+
     770:	00 20       	and	r0, r0
     772:	e9 f7       	brne	.-6      	; 0x76e <hop_task+0xda>
     774:	31 97       	sbiw	r30, 0x01	; 1
     776:	ef 58       	subi	r30, 0x8F	; 143
     778:	f8 40       	sbci	r31, 0x08	; 8
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	6e 0f       	add	r22, r30
     77e:	8f e8       	ldi	r24, 0x8F	; 143
     780:	98 e0       	ldi	r25, 0x08	; 8
     782:	0e 94 16 06 	call	0xc2c	; 0xc2c <bmac_tx_pkt>
     786:	31 2c       	mov	r3, r1

   /*************************** Section to check intervals and send local values  *************************
         *
  *********************************************************************************************************/
    // get the current tick time for comparison
    nrk_time_get(&current_time);
     788:	ce 01       	movw	r24, r28
     78a:	89 96       	adiw	r24, 0x29	; 41
     78c:	0e 94 76 28 	call	0x50ec	; 0x50ec <nrk_time_get>

    nrk_status_t status;
    nrk_time_t delta_sensor;
    nrk_time_t delta_neighbor;
    status = nrk_time_sub (&delta_sensor,current_time, sensor_start_time);
     790:	89 a0       	ldd	r8, Y+33	; 0x21
     792:	9a a0       	ldd	r9, Y+34	; 0x22
     794:	ab a0       	ldd	r10, Y+35	; 0x23
     796:	bc a0       	ldd	r11, Y+36	; 0x24
     798:	cd a0       	ldd	r12, Y+37	; 0x25
     79a:	de a0       	ldd	r13, Y+38	; 0x26
     79c:	ef a0       	ldd	r14, Y+39	; 0x27
     79e:	f8 a4       	ldd	r15, Y+40	; 0x28
     7a0:	09 a5       	ldd	r16, Y+41	; 0x29
     7a2:	1a a5       	ldd	r17, Y+42	; 0x2a
     7a4:	2b a5       	ldd	r18, Y+43	; 0x2b
     7a6:	3c a5       	ldd	r19, Y+44	; 0x2c
     7a8:	4d a5       	ldd	r20, Y+45	; 0x2d
     7aa:	5e a5       	ldd	r21, Y+46	; 0x2e
     7ac:	6f a5       	ldd	r22, Y+47	; 0x2f
     7ae:	78 a9       	ldd	r23, Y+48	; 0x30
     7b0:	ce 01       	movw	r24, r28
     7b2:	49 96       	adiw	r24, 0x19	; 25
     7b4:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <nrk_time_sub>
    uint16_t difference_s = delta_sensor.secs;
    if(delta_sensor.secs >= sensor_time_limit.secs)
     7b8:	49 8d       	ldd	r20, Y+25	; 0x19
     7ba:	5a 8d       	ldd	r21, Y+26	; 0x1a
     7bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
     7be:	7c 8d       	ldd	r23, Y+28	; 0x1c
     7c0:	80 91 0f 08 	lds	r24, 0x080F
     7c4:	90 91 10 08 	lds	r25, 0x0810
     7c8:	a0 91 11 08 	lds	r26, 0x0811
     7cc:	b0 91 12 08 	lds	r27, 0x0812
     7d0:	48 17       	cp	r20, r24
     7d2:	59 07       	cpc	r21, r25
     7d4:	6a 07       	cpc	r22, r26
     7d6:	7b 07       	cpc	r23, r27
     7d8:	e8 f1       	brcs	.+122    	; 0x854 <hop_task+0x1c0>
    {
      light = sample_light();
     7da:	0e 94 86 12 	call	0x250c	; 0x250c <sample_light>
     7de:	80 93 84 07 	sts	0x0784, r24
     7e2:	90 93 85 07 	sts	0x0785, r25

      // now send the value
      sprintf (tx_buf, "[%d][%d][%d][%d][%d]", MSG_NODE_SENSOR_VALUE, MAC_ADDR, local_seq_count, 0, light);
     7e6:	9f 93       	push	r25
     7e8:	8f 93       	push	r24
     7ea:	1f 92       	push	r1
     7ec:	1f 92       	push	r1
     7ee:	80 91 0e 09 	lds	r24, 0x090E
     7f2:	8f 93       	push	r24
     7f4:	80 91 0d 09 	lds	r24, 0x090D
     7f8:	8f 93       	push	r24
     7fa:	1f 92       	push	r1
     7fc:	2f 92       	push	r2
     7fe:	1f 92       	push	r1
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	9f 93       	push	r25
     804:	7f 92       	push	r7
     806:	6f 92       	push	r6
     808:	0f e8       	ldi	r16, 0x8F	; 143
     80a:	18 e0       	ldi	r17, 0x08	; 8
     80c:	1f 93       	push	r17
     80e:	0f 93       	push	r16
     810:	0e 94 56 37 	call	0x6eac	; 0x6eac <sprintf>
      val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     814:	f8 01       	movw	r30, r16
     816:	01 90       	ld	r0, Z+
     818:	00 20       	and	r0, r0
     81a:	e9 f7       	brne	.-6      	; 0x816 <hop_task+0x182>
     81c:	31 97       	sbiw	r30, 0x01	; 1
     81e:	8f 01       	movw	r16, r30
     820:	0f 58       	subi	r16, 0x8F	; 143
     822:	18 40       	sbci	r17, 0x08	; 8
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	60 0f       	add	r22, r16
     828:	8f e8       	ldi	r24, 0x8F	; 143
     82a:	98 e0       	ldi	r25, 0x08	; 8
     82c:	0e 94 16 06 	call	0xc2c	; 0xc2c <bmac_tx_pkt>

      local_seq_count ++;
     830:	80 91 0d 09 	lds	r24, 0x090D
     834:	90 91 0e 09 	lds	r25, 0x090E
     838:	01 96       	adiw	r24, 0x01	; 1
     83a:	90 93 0e 09 	sts	0x090E, r25
     83e:	80 93 0d 09 	sts	0x090D, r24
      nrk_time_get(&sensor_start_time);
     842:	ce 01       	movw	r24, r28
     844:	81 96       	adiw	r24, 0x21	; 33
     846:	0e 94 76 28 	call	0x50ec	; 0x50ec <nrk_time_get>
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
    }

    nrk_time_get(&current_time);
     854:	ce 01       	movw	r24, r28
     856:	89 96       	adiw	r24, 0x29	; 41
     858:	0e 94 76 28 	call	0x50ec	; 0x50ec <nrk_time_get>
    status = nrk_time_sub (&delta_neighbor,current_time, neighbor_start_time);
     85c:	89 a8       	ldd	r8, Y+49	; 0x31
     85e:	9a a8       	ldd	r9, Y+50	; 0x32
     860:	ab a8       	ldd	r10, Y+51	; 0x33
     862:	bc a8       	ldd	r11, Y+52	; 0x34
     864:	cd a8       	ldd	r12, Y+53	; 0x35
     866:	de a8       	ldd	r13, Y+54	; 0x36
     868:	ef a8       	ldd	r14, Y+55	; 0x37
     86a:	f8 ac       	ldd	r15, Y+56	; 0x38
     86c:	09 a5       	ldd	r16, Y+41	; 0x29
     86e:	1a a5       	ldd	r17, Y+42	; 0x2a
     870:	2b a5       	ldd	r18, Y+43	; 0x2b
     872:	3c a5       	ldd	r19, Y+44	; 0x2c
     874:	4d a5       	ldd	r20, Y+45	; 0x2d
     876:	5e a5       	ldd	r21, Y+46	; 0x2e
     878:	6f a5       	ldd	r22, Y+47	; 0x2f
     87a:	78 a9       	ldd	r23, Y+48	; 0x30
     87c:	ce 01       	movw	r24, r28
     87e:	41 96       	adiw	r24, 0x11	; 17
     880:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <nrk_time_sub>
    uint16_t difference_n = delta_neighbor.secs;
    //printf("current time %d \r\n", current_time.secs);
    if(delta_neighbor.secs >= neighbor_time_limit.secs)
     884:	49 89       	ldd	r20, Y+17	; 0x11
     886:	5a 89       	ldd	r21, Y+18	; 0x12
     888:	6b 89       	ldd	r22, Y+19	; 0x13
     88a:	7c 89       	ldd	r23, Y+20	; 0x14
     88c:	80 91 86 07 	lds	r24, 0x0786
     890:	90 91 87 07 	lds	r25, 0x0787
     894:	a0 91 88 07 	lds	r26, 0x0788
     898:	b0 91 89 07 	lds	r27, 0x0789
     89c:	48 17       	cp	r20, r24
     89e:	59 07       	cpc	r21, r25
     8a0:	6a 07       	cpc	r22, r26
     8a2:	7b 07       	cpc	r23, r27
     8a4:	08 f4       	brcc	.+2      	; 0x8a8 <hop_task+0x214>
     8a6:	4b c0       	rjmp	.+150    	; 0x93e <hop_task+0x2aa>
    {
      // send neighbortable
      sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d,%d,%d]", MSG_NODE_NEIGHBORS, MAC_ADDR, local_seq_count,
     8a8:	80 91 5f 05 	lds	r24, 0x055F
     8ac:	1f 92       	push	r1
     8ae:	8f 93       	push	r24
     8b0:	80 91 5e 05 	lds	r24, 0x055E
     8b4:	1f 92       	push	r1
     8b6:	8f 93       	push	r24
     8b8:	80 91 5d 05 	lds	r24, 0x055D
     8bc:	1f 92       	push	r1
     8be:	8f 93       	push	r24
     8c0:	80 91 85 07 	lds	r24, 0x0785
     8c4:	8f 93       	push	r24
     8c6:	80 91 84 07 	lds	r24, 0x0784
     8ca:	8f 93       	push	r24
     8cc:	1f 92       	push	r1
     8ce:	1f 92       	push	r1
     8d0:	80 91 0e 09 	lds	r24, 0x090E
     8d4:	8f 93       	push	r24
     8d6:	80 91 0d 09 	lds	r24, 0x090D
     8da:	8f 93       	push	r24
     8dc:	1f 92       	push	r1
     8de:	2f 92       	push	r2
     8e0:	1f 92       	push	r1
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	9f 93       	push	r25
     8e6:	5f 92       	push	r5
     8e8:	4f 92       	push	r4
     8ea:	0f e8       	ldi	r16, 0x8F	; 143
     8ec:	18 e0       	ldi	r17, 0x08	; 8
     8ee:	1f 93       	push	r17
     8f0:	0f 93       	push	r16
     8f2:	0e 94 56 37 	call	0x6eac	; 0x6eac <sprintf>
      0, light, local_neighbor_table.neighbors[0].id, local_neighbor_table.neighbors[1].id, local_neighbor_table.neighbors[2].id);
      val=bmac_tx_pkt(tx_buf, strlen(tx_buf)+1);
     8f6:	f8 01       	movw	r30, r16
     8f8:	01 90       	ld	r0, Z+
     8fa:	00 20       	and	r0, r0
     8fc:	e9 f7       	brne	.-6      	; 0x8f8 <hop_task+0x264>
     8fe:	31 97       	sbiw	r30, 0x01	; 1
     900:	8f 01       	movw	r16, r30
     902:	0f 58       	subi	r16, 0x8F	; 143
     904:	18 40       	sbci	r17, 0x08	; 8
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	60 0f       	add	r22, r16
     90a:	8f e8       	ldi	r24, 0x8F	; 143
     90c:	98 e0       	ldi	r25, 0x08	; 8
     90e:	0e 94 16 06 	call	0xc2c	; 0xc2c <bmac_tx_pkt>
      
      // Reset neighbor table
      init_neighbor_table(&local_neighbor_table);
     912:	8b e5       	ldi	r24, 0x5B	; 91
     914:	95 e0       	ldi	r25, 0x05	; 5
     916:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <init_neighbor_table>
      
      local_seq_count ++;
     91a:	80 91 0d 09 	lds	r24, 0x090D
     91e:	90 91 0e 09 	lds	r25, 0x090E
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	90 93 0e 09 	sts	0x090E, r25
     928:	80 93 0d 09 	sts	0x090D, r24
      nrk_time_get(&neighbor_start_time);
     92c:	ce 01       	movw	r24, r28
     92e:	c1 96       	adiw	r24, 0x31	; 49
     930:	0e 94 76 28 	call	0x50ec	; 0x50ec <nrk_time_get>
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
    }

    nrk_wait_until_next_period();
     93e:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <nrk_wait_until_next_period>
  }
     942:	dd ce       	rjmp	.-582    	; 0x6fe <hop_task+0x6a>

00000944 <nrk_create_taskset>:
}

void nrk_create_taskset ()
{
  nrk_task_set_stk( &HOP_TASK, hop_task_stack, NRK_APP_STACKSIZE);
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	52 e0       	ldi	r21, 0x02	; 2
     948:	64 e8       	ldi	r22, 0x84	; 132
     94a:	75 e0       	ldi	r23, 0x05	; 5
     94c:	80 e6       	ldi	r24, 0x60	; 96
     94e:	95 e0       	ldi	r25, 0x05	; 5
     950:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <nrk_task_set_stk>
  HOP_TASK.task = hop_task;
     954:	e0 e6       	ldi	r30, 0x60	; 96
     956:	f5 e0       	ldi	r31, 0x05	; 5
     958:	8a e4       	ldi	r24, 0x4A	; 74
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	96 83       	std	Z+6, r25	; 0x06
     95e:	85 83       	std	Z+5, r24	; 0x05
  HOP_TASK.prio = 2;
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	80 87       	std	Z+8, r24	; 0x08
  HOP_TASK.FirstActivation = TRUE;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	87 83       	std	Z+7, r24	; 0x07
  HOP_TASK.Type = BASIC_TASK;
     968:	81 87       	std	Z+9, r24	; 0x09
  HOP_TASK.SchType = PREEMPTIVE;
     96a:	82 87       	std	Z+10, r24	; 0x0a
  HOP_TASK.period.secs = 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	a0 e0       	ldi	r26, 0x00	; 0
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	83 87       	std	Z+11, r24	; 0x0b
     976:	94 87       	std	Z+12, r25	; 0x0c
     978:	a5 87       	std	Z+13, r26	; 0x0d
     97a:	b6 87       	std	Z+14, r27	; 0x0e
  HOP_TASK.period.nano_secs = 0;
     97c:	17 86       	std	Z+15, r1	; 0x0f
     97e:	10 8a       	std	Z+16, r1	; 0x10
     980:	11 8a       	std	Z+17, r1	; 0x11
     982:	12 8a       	std	Z+18, r1	; 0x12
  HOP_TASK.cpu_reserve.secs = 1;
     984:	83 8b       	std	Z+19, r24	; 0x13
     986:	94 8b       	std	Z+20, r25	; 0x14
     988:	a5 8b       	std	Z+21, r26	; 0x15
     98a:	b6 8b       	std	Z+22, r27	; 0x16
  HOP_TASK.cpu_reserve.nano_secs = 0;
     98c:	17 8a       	std	Z+23, r1	; 0x17
     98e:	10 8e       	std	Z+24, r1	; 0x18
     990:	11 8e       	std	Z+25, r1	; 0x19
     992:	12 8e       	std	Z+26, r1	; 0x1a
  HOP_TASK.offset.secs = 0;
     994:	13 8e       	std	Z+27, r1	; 0x1b
     996:	14 8e       	std	Z+28, r1	; 0x1c
     998:	15 8e       	std	Z+29, r1	; 0x1d
     99a:	16 8e       	std	Z+30, r1	; 0x1e
  HOP_TASK.offset.nano_secs = 0;
     99c:	17 8e       	std	Z+31, r1	; 0x1f
     99e:	10 a2       	std	Z+32, r1	; 0x20
     9a0:	11 a2       	std	Z+33, r1	; 0x21
     9a2:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&HOP_TASK);
     9a4:	cf 01       	movw	r24, r30
     9a6:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <nrk_activate_task>

  nrk_kprintf( PSTR("Create Done\r\n") );
     9aa:	83 ed       	ldi	r24, 0xD3	; 211
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0c 94 35 19 	jmp	0x326a	; 0x326a <nrk_kprintf>

000009b2 <nrk_register_drivers>:
  //     #define NRK_MAX_DRIVER_CNT
  //     in nrk_cfg.h
  // Make sure to add:
  //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
  //     in makefile
  val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
     9b2:	63 e0       	ldi	r22, 0x03	; 3
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	9d e0       	ldi	r25, 0x0D	; 13
     9b8:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <nrk_register_driver>
  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     9bc:	8f 3f       	cpi	r24, 0xFF	; 255
     9be:	21 f4       	brne	.+8      	; 0x9c8 <nrk_register_drivers+0x16>
     9c0:	84 eb       	ldi	r24, 0xB4	; 180
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0c 94 35 19 	jmp	0x326a	; 0x326a <nrk_kprintf>
     9c8:	08 95       	ret

000009ca <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     9ca:	08 95       	ret

000009cc <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     9cc:	64 30       	cpi	r22, 0x04	; 4
     9ce:	21 f4       	brne	.+8      	; 0x9d8 <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     9d0:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <rf_security_set_ctr_counter>
  return NRK_OK;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     9da:	08 95       	ret

000009dc <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	08 95       	ret

000009e0 <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	08 95       	ret

000009e6 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     9e6:	0e 94 84 13 	call	0x2708	; 0x2708 <rf_auto_ack_disable>
  return NRK_OK;
}
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	08 95       	ret

000009ee <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     9ee:	0e 94 7e 13 	call	0x26fc	; 0x26fc <rf_auto_ack_enable>
  return NRK_OK;
}
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret

000009f6 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     9f6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <rf_addr_decode_disable>
  return NRK_OK;
}
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	08 95       	ret

000009fe <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     9fe:	0e 94 72 13 	call	0x26e4	; 0x26e4 <rf_addr_decode_enable>
  return NRK_OK;
}
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	08 95       	ret

00000a06 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     a06:	0e 94 8a 13 	call	0x2714	; 0x2714 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	08 95       	ret

00000a0e <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     a0e:	90 93 90 07 	sts	0x0790, r25
     a12:	80 93 8f 07 	sts	0x078F, r24
  return NRK_OK;
}
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	08 95       	ret

00000a1a <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     a1a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <rf_security_last_pkt_status>
}
     a1e:	08 95       	ret

00000a20 <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     a20:	60 31       	cpi	r22, 0x10	; 16
     a22:	21 f4       	brne	.+8      	; 0xa2c <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     a24:	0e 94 ed 16 	call	0x2dda	; 0x2dda <rf_security_set_key>
  return NRK_OK;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     a2e:	08 95       	ret

00000a30 <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	08 95       	ret

00000a34 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	08 95       	ret

00000a38 <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     a38:	80 32       	cpi	r24, 0x20	; 32
     a3a:	20 f4       	brcc	.+8      	; 0xa44 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     a3c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <rf_tx_power>
  return NRK_OK;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     a44:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     a46:	08 95       	ret

00000a48 <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     a48:	80 93 8b 04 	sts	0x048B, r24
     a4c:	08 95       	ret

00000a4e <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     a4e:	99 27       	eor	r25, r25
     a50:	87 fd       	sbrc	r24, 7
     a52:	90 95       	com	r25
     a54:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <rf_set_cca_thresh>
  return NRK_OK;
}
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 95       	ret

00000a5c <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	1f 92       	push	r1
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     a66:	8b 31       	cpi	r24, 0x1B	; 27
     a68:	80 f4       	brcc	.+32     	; 0xa8a <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     a6a:	80 93 95 04 	sts	0x0495, r24
  rf_power_up ();
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	0e 94 52 13 	call	0x26a4	; 0x26a4 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	4f ef       	ldi	r20, 0xFF	; 255
     a7a:	5f ef       	ldi	r21, 0xFF	; 255
     a7c:	69 81       	ldd	r22, Y+1	; 0x01
     a7e:	8f e0       	ldi	r24, 0x0F	; 15
     a80:	99 e0       	ldi	r25, 0x09	; 9
     a82:	0e 94 aa 13 	call	0x2754	; 0x2754 <rf_init>
  return NRK_OK;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     a8a:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     a94:	80 91 98 04 	lds	r24, 0x0498
     a98:	88 23       	and	r24, r24
     a9a:	11 f1       	breq	.+68     	; 0xae0 <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     a9c:	80 91 9a 07 	lds	r24, 0x079A
     aa0:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	bc 01       	movw	r22, r24
     aae:	cd 01       	movw	r24, r26
     ab0:	00 90 9a 07 	lds	r0, 0x079A
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <bmac_wait_until_rx_pkt+0x2a>
     ab6:	66 0f       	add	r22, r22
     ab8:	77 1f       	adc	r23, r23
     aba:	88 1f       	adc	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	0a 94       	dec	r0
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <bmac_wait_until_rx_pkt+0x22>
     ac2:	0e 94 c3 23 	call	0x4786	; 0x4786 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     ac6:	dc 01       	movw	r26, r24
     ac8:	cb 01       	movw	r24, r22
     aca:	00 90 9a 07 	lds	r0, 0x079A
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <bmac_wait_until_rx_pkt+0x44>
     ad0:	b6 95       	lsr	r27
     ad2:	a7 95       	ror	r26
     ad4:	97 95       	ror	r25
     ad6:	87 95       	ror	r24
     ad8:	0a 94       	dec	r0
     ada:	d2 f7       	brpl	.-12     	; 0xad0 <bmac_wait_until_rx_pkt+0x3c>
     adc:	80 ff       	sbrs	r24, 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
     ae6:	08 95       	ret

00000ae8 <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	51 f0       	breq	.+20     	; 0xb00 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     aec:	90 93 15 09 	sts	0x0915, r25
     af0:	80 93 14 09 	sts	0x0914, r24
  bmac_rfRxInfo.max_length = size;
     af4:	60 93 13 09 	sts	0x0913, r22
  rx_buf_empty = 1;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	80 93 98 04 	sts	0x0498, r24
  return NRK_OK;
     afe:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     b00:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     b02:	08 95       	ret

00000b04 <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	18 2f       	mov	r17, r24
  bmac_running = 0;
     b0c:	10 92 97 04 	sts	0x0497, r1
  tx_reserve = -1;
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	80 93 8a 04 	sts	0x048A, r24
  cca_active = true;
     b16:	d1 e0       	ldi	r29, 0x01	; 1
     b18:	d0 93 8b 04 	sts	0x048B, r29
  rx_failure_cnt = 0;
     b1c:	10 92 9a 04 	sts	0x049A, r1
     b20:	10 92 9b 04 	sts	0x049B, r1
     b24:	10 92 9c 04 	sts	0x049C, r1
     b28:	10 92 9d 04 	sts	0x049D, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     b2c:	10 92 8c 04 	sts	0x048C, r1
     b30:	10 92 8d 04 	sts	0x048D, r1
     b34:	10 92 8e 04 	sts	0x048E, r1
     b38:	10 92 8f 04 	sts	0x048F, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	91 ee       	ldi	r25, 0xE1	; 225
     b40:	a5 ef       	ldi	r26, 0xF5	; 245
     b42:	b5 e0       	ldi	r27, 0x05	; 5
     b44:	80 93 90 04 	sts	0x0490, r24
     b48:	90 93 91 04 	sts	0x0491, r25
     b4c:	a0 93 92 04 	sts	0x0492, r26
     b50:	b0 93 93 04 	sts	0x0493, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
     b54:	0e 94 10 22 	call	0x4420	; 0x4420 <nrk_signal_create>
     b58:	c8 2f       	mov	r28, r24
     b5a:	80 93 9a 07 	sts	0x079A, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     b5e:	8f 3f       	cpi	r24, 0xFF	; 255
     b60:	19 f4       	brne	.+6      	; 0xb68 <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     b62:	88 e9       	ldi	r24, 0x98	; 152
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	09 c0       	rjmp	.+18     	; 0xb7a <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     b68:	0e 94 10 22 	call	0x4420	; 0x4420 <nrk_signal_create>
     b6c:	c8 2f       	mov	r28, r24
     b6e:	80 93 1c 0b 	sts	0x0B1C, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     b72:	8f 3f       	cpi	r24, 0xFF	; 255
     b74:	69 f4       	brne	.+26     	; 0xb90 <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     b76:	80 e7       	ldi	r24, 0x70	; 112
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     b7e:	e0 91 fb 0c 	lds	r30, 0x0CFB
     b82:	f0 91 fc 0c 	lds	r31, 0x0CFC
     b86:	60 85       	ldd	r22, Z+8	; 0x08
     b88:	8e e0       	ldi	r24, 0x0E	; 14
     b8a:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
    return NRK_ERROR;
     b8e:	2a c0       	rjmp	.+84     	; 0xbe4 <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
     b90:	0e 94 10 22 	call	0x4420	; 0x4420 <nrk_signal_create>
     b94:	c8 2f       	mov	r28, r24
     b96:	80 93 8e 07 	sts	0x078E, r24
  if (bmac_enable_signal == NRK_ERROR) {
     b9a:	8f 3f       	cpi	r24, 0xFF	; 255
     b9c:	19 f4       	brne	.+6      	; 0xba4 <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     b9e:	84 e4       	ldi	r24, 0x44	; 68
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	eb cf       	rjmp	.-42     	; 0xb7a <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     ba4:	10 92 99 04 	sts	0x0499, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     ba8:	10 92 98 04 	sts	0x0498, r1
  bmac_rfRxInfo.pPayload = NULL;
     bac:	10 92 15 09 	sts	0x0915, r1
     bb0:	10 92 14 09 	sts	0x0914, r1
  bmac_rfRxInfo.max_length = 0;
     bb4:	10 92 13 09 	sts	0x0913, r1

  // Setup the cc2420 chip
  rf_power_up ();
     bb8:	0e 94 52 13 	call	0x26a4	; 0x26a4 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	4f ef       	ldi	r20, 0xFF	; 255
     bc2:	5f ef       	ldi	r21, 0xFF	; 255
     bc4:	61 2f       	mov	r22, r17
     bc6:	8f e0       	ldi	r24, 0x0F	; 15
     bc8:	99 e0       	ldi	r25, 0x09	; 9
     bca:	0e 94 aa 13 	call	0x2754	; 0x2754 <rf_init>
  g_chan = chan;
     bce:	10 93 95 04 	sts	0x0495, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <rf_set_cca_thresh>
  bmac_running = 1;
     bda:	d0 93 97 04 	sts	0x0497, r29
  is_enabled = 1;
     bde:	d0 93 94 04 	sts	0x0494, r29
  return NRK_OK;
     be2:	c1 e0       	ldi	r28, 0x01	; 1
}
     be4:	8c 2f       	mov	r24, r28
     be6:	df 91       	pop	r29
     be8:	cf 91       	pop	r28
     bea:	1f 91       	pop	r17
     bec:	08 95       	ret

00000bee <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     bee:	20 91 99 04 	lds	r18, 0x0499
     bf2:	21 30       	cpi	r18, 0x01	; 1
     bf4:	59 f0       	breq	.+22     	; 0xc0c <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     bf6:	21 e0       	ldi	r18, 0x01	; 1
     bf8:	20 93 99 04 	sts	0x0499, r18
  bmac_rfTxInfo.pPayload = buf;
     bfc:	90 93 93 07 	sts	0x0793, r25
     c00:	80 93 92 07 	sts	0x0792, r24
  bmac_rfTxInfo.length = len;
     c04:	60 93 91 07 	sts	0x0791, r22
  return NRK_OK;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     c0e:	08 95       	ret

00000c10 <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     c10:	80 91 9a 07 	lds	r24, 0x079A
     c14:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     c18:	80 91 9a 07 	lds	r24, 0x079A
     c1c:	08 95       	ret

00000c1e <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     c1e:	80 91 1c 0b 	lds	r24, 0x0B1C
     c22:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     c26:	80 91 1c 0b 	lds	r24, 0x0B1C
     c2a:	08 95       	ret

00000c2c <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
     c34:	20 91 99 04 	lds	r18, 0x0499
     c38:	21 30       	cpi	r18, 0x01	; 1
     c3a:	f1 f1       	breq	.+124    	; 0xcb8 <bmac_tx_pkt+0x8c>
     c3c:	f6 2e       	mov	r15, r22
     c3e:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     c40:	80 91 1c 0b 	lds	r24, 0x0B1C
     c44:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_signal_register>
  tx_data_ready = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 99 04 	sts	0x0499, r24
  bmac_rfTxInfo.pPayload = buf;
     c4e:	d0 92 93 07 	sts	0x0793, r13
     c52:	c0 92 92 07 	sts	0x0792, r12
  bmac_rfTxInfo.length = len;
     c56:	f0 92 91 07 	sts	0x0791, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e0       	ldi	r26, 0x00	; 0
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	bc 01       	movw	r22, r24
     c64:	cd 01       	movw	r24, r26
     c66:	00 90 1c 0b 	lds	r0, 0x0B1C
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <bmac_tx_pkt+0x48>
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	d2 f7       	brpl	.-12     	; 0xc6c <bmac_tx_pkt+0x40>
     c78:	0e 94 c3 23 	call	0x4786	; 0x4786 <nrk_event_wait>
     c7c:	6b 01       	movw	r12, r22
     c7e:	7c 01       	movw	r14, r24
  if (mask == 0)
     c80:	61 15       	cp	r22, r1
     c82:	71 05       	cpc	r23, r1
     c84:	81 05       	cpc	r24, r1
     c86:	91 05       	cpc	r25, r1
     c88:	21 f4       	brne	.+8      	; 0xc92 <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     c8a:	80 e2       	ldi	r24, 0x20	; 32
     c8c:	92 e0       	ldi	r25, 0x02	; 2
     c8e:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     c92:	00 90 1c 0b 	lds	r0, 0x0B1C
     c96:	04 c0       	rjmp	.+8      	; 0xca0 <bmac_tx_pkt+0x74>
     c98:	f6 94       	lsr	r15
     c9a:	e7 94       	ror	r14
     c9c:	d7 94       	ror	r13
     c9e:	c7 94       	ror	r12
     ca0:	0a 94       	dec	r0
     ca2:	d2 f7       	brpl	.-12     	; 0xc98 <bmac_tx_pkt+0x6c>
     ca4:	c0 fc       	sbrc	r12, 0
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     ca8:	8d ef       	ldi	r24, 0xFD	; 253
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
  if (pkt_got_ack)
     cb0:	80 91 96 04 	lds	r24, 0x0496
     cb4:	81 11       	cpse	r24, r1
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	08 95       	ret

00000cc8 <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
     cc8:	20 91 98 04 	lds	r18, 0x0498
     ccc:	22 23       	and	r18, r18
     cce:	39 f0       	breq	.+14     	; 0xcde <bmac_rx_pkt_get+0x16>
    *len = 0;
     cd0:	fc 01       	movw	r30, r24
     cd2:	10 82       	st	Z, r1
    *rssi = 0;
     cd4:	fb 01       	movw	r30, r22
     cd6:	10 82       	st	Z, r1
    return NULL;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
     cde:	20 91 12 09 	lds	r18, 0x0912
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
     ce6:	80 91 17 09 	lds	r24, 0x0917
     cea:	fb 01       	movw	r30, r22
     cec:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
     cee:	80 91 14 09 	lds	r24, 0x0914
     cf2:	90 91 15 09 	lds	r25, 0x0915
}
     cf6:	08 95       	ret

00000cf8 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 91 98 04 	lds	r25, 0x0498
     cfe:	91 11       	cpse	r25, r1
     d00:	80 e0       	ldi	r24, 0x00	; 0
}
     d02:	08 95       	ret

00000d04 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 98 04 	sts	0x0498, r24
  return NRK_OK;
}
     d0a:	08 95       	ret

00000d0c <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     d0c:	10 92 94 04 	sts	0x0494, r1
  rf_power_down ();
     d10:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <rf_power_down>

00000d14 <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	80 93 94 04 	sts	0x0494, r24
  rf_power_up ();
     d1a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     d1e:	80 91 8e 07 	lds	r24, 0x078E
     d22:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <nrk_event_signal>

00000d26 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	28 97       	sbiw	r28, 0x08	; 8
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	29 83       	std	Y+1, r18	; 0x01
     d3c:	3a 83       	std	Y+2, r19	; 0x02
     d3e:	4b 83       	std	Y+3, r20	; 0x03
     d40:	5c 83       	std	Y+4, r21	; 0x04
     d42:	6d 83       	std	Y+5, r22	; 0x05
     d44:	7e 83       	std	Y+6, r23	; 0x06
     d46:	8f 83       	std	Y+7, r24	; 0x07
     d48:	98 87       	std	Y+8, r25	; 0x08
     d4a:	49 81       	ldd	r20, Y+1	; 0x01
     d4c:	5a 81       	ldd	r21, Y+2	; 0x02
     d4e:	6b 81       	ldd	r22, Y+3	; 0x03
     d50:	7c 81       	ldd	r23, Y+4	; 0x04
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	af 81       	ldd	r26, Y+7	; 0x07
     d58:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	41 f4       	brne	.+16     	; 0xd74 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
     d64:	81 15       	cp	r24, r1
     d66:	2d e2       	ldi	r18, 0x2D	; 45
     d68:	92 07       	cpc	r25, r18
     d6a:	21 e3       	ldi	r18, 0x31	; 49
     d6c:	a2 07       	cpc	r26, r18
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	b2 07       	cpc	r27, r18
     d72:	90 f0       	brcs	.+36     	; 0xd98 <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
     d74:	40 93 8c 04 	sts	0x048C, r20
     d78:	50 93 8d 04 	sts	0x048D, r21
     d7c:	60 93 8e 04 	sts	0x048E, r22
     d80:	70 93 8f 04 	sts	0x048F, r23
  _bmac_check_period.nano_secs = period.nano_secs;
     d84:	80 93 90 04 	sts	0x0490, r24
     d88:	90 93 91 04 	sts	0x0491, r25
     d8c:	a0 93 92 04 	sts	0x0492, r26
     d90:	b0 93 93 04 	sts	0x0493, r27
  return NRK_OK;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
     d98:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
     d9a:	28 96       	adiw	r28, 0x08	; 8
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
     dac:	80 91 97 04 	lds	r24, 0x0497
     db0:	08 95       	ret

00000db2 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
     db2:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
     db4:	0e 94 1a 14 	call	0x2834	; 0x2834 <rf_rx_on>
  val += rf_cca_check ();
     db8:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <rf_cca_check>
     dbc:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
     dbe:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <rf_cca_check>
     dc2:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
     dc4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <rf_cca_check>
     dc8:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
     dca:	0e 94 20 14 	call	0x2840	; 0x2840 <rf_rx_off>
     dce:	8c 2f       	mov	r24, r28
     dd0:	1c 16       	cp	r1, r28
     dd2:	0c f4       	brge	.+2      	; 0xdd6 <_bmac_channel_check+0x24>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
     dda:	0e 94 1a 14 	call	0x2834	; 0x2834 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
     dde:	10 92 82 04 	sts	0x0482, r1
     de2:	10 92 83 04 	sts	0x0483, r1
     de6:	10 92 84 04 	sts	0x0484, r1
     dea:	10 92 85 04 	sts	0x0485, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
     dee:	80 e4       	ldi	r24, 0x40	; 64
     df0:	68 2f       	mov	r22, r24
     df2:	80 93 86 04 	sts	0x0486, r24
     df6:	8b e4       	ldi	r24, 0x4B	; 75
     df8:	80 93 87 04 	sts	0x0487, r24
     dfc:	8c e4       	ldi	r24, 0x4C	; 76
     dfe:	80 93 88 04 	sts	0x0488, r24
     e02:	10 92 89 04 	sts	0x0489, r1
  nrk_wait (dummy_t);
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 91 83 04 	lds	r19, 0x0483
     e0c:	40 91 84 04 	lds	r20, 0x0484
     e10:	50 91 85 04 	lds	r21, 0x0485
     e14:	7b e4       	ldi	r23, 0x4B	; 75
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <nrk_wait>

  n = rf_rx_packet_nonblock ();
     e1c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	e9 f0       	breq	.+58     	; 0xe5e <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
     e24:	80 91 9a 04 	lds	r24, 0x049A
     e28:	90 91 9b 04 	lds	r25, 0x049B
     e2c:	a0 91 9c 04 	lds	r26, 0x049C
     e30:	b0 91 9d 04 	lds	r27, 0x049D
     e34:	8f 3f       	cpi	r24, 0xFF	; 255
     e36:	2f ef       	ldi	r18, 0xFF	; 255
     e38:	92 07       	cpc	r25, r18
     e3a:	a1 05       	cpc	r26, r1
     e3c:	b1 05       	cpc	r27, r1
     e3e:	58 f4       	brcc	.+22     	; 0xe56 <_bmac_rx+0x7c>
      rx_failure_cnt++;
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	a1 1d       	adc	r26, r1
     e44:	b1 1d       	adc	r27, r1
     e46:	80 93 9a 04 	sts	0x049A, r24
     e4a:	90 93 9b 04 	sts	0x049B, r25
     e4e:	a0 93 9c 04 	sts	0x049C, r26
     e52:	b0 93 9d 04 	sts	0x049D, r27
    rf_rx_off ();
     e56:	0e 94 20 14 	call	0x2840	; 0x2840 <rf_rx_off>
    return 0;
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
     e5e:	10 92 98 04 	sts	0x0498, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
     e62:	0e 94 20 14 	call	0x2840	; 0x2840 <rf_rx_off>
  return 1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
}
     e68:	08 95       	ret

00000e6a <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
     e6a:	80 91 9a 04 	lds	r24, 0x049A
     e6e:	90 91 9b 04 	lds	r25, 0x049B
     e72:	08 95       	ret

00000e74 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
     e74:	10 92 9a 04 	sts	0x049A, r1
     e78:	10 92 9b 04 	sts	0x049B, r1
     e7c:	10 92 9c 04 	sts	0x049C, r1
     e80:	10 92 9d 04 	sts	0x049D, r1
  return NRK_OK;
}
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	08 95       	ret

00000e88 <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	58 f0       	brcs	.+22     	; 0xea2 <_b_pow+0x1a>
    return 1;
  if (in > 7)
     e8c:	88 30       	cpi	r24, 0x08	; 8
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <_b_pow+0xa>
    in = 6;                     // cap it at 128 
     e90:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
     e92:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
     e94:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
     e96:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
     e98:	2f 5f       	subi	r18, 0xFF	; 255
     e9a:	28 13       	cpse	r18, r24
     e9c:	fc cf       	rjmp	.-8      	; 0xe96 <_b_pow+0xe>
    result = result * 2;
  return result;
     e9e:	89 2f       	mov	r24, r25
     ea0:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
     ea4:	08 95       	ret

00000ea6 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
     eb2:	80 91 8b 04 	lds	r24, 0x048B
     eb6:	88 23       	and	r24, r24
     eb8:	09 f4       	brne	.+2      	; 0xebc <_bmac_tx+0x16>
     eba:	43 c0       	rjmp	.+134    	; 0xf42 <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
     ebc:	8c e8       	ldi	r24, 0x8C	; 140
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	0e 94 e6 29 	call	0x53cc	; 0x53cc <_nrk_time_to_ticks>
     ec4:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
     ec6:	0e 94 31 36 	call	0x6c62	; 0x6c62 <rand>
     eca:	6a e0       	ldi	r22, 0x0A	; 10
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__divmodhi4>
     ed2:	bc 01       	movw	r22, r24
     ed4:	6f 5f       	subi	r22, 0xFF	; 255
     ed6:	7f 4f       	sbci	r23, 0xFF	; 255
     ed8:	ce 01       	movw	r24, r28
     eda:	0e 94 09 35 	call	0x6a12	; 0x6a12 <__udivmodhi4>
     ede:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
     ee0:	0e 94 6e 27 	call	0x4edc	; 0x4edc <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
     ee4:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
     ee6:	0a e0       	ldi	r16, 0x0A	; 10
     ee8:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
     eea:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_bmac_channel_check>
     eee:	d8 2f       	mov	r29, r24
      if (v == 1)
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	39 f1       	breq	.+78     	; 0xf42 <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
     ef4:	0e 94 31 36 	call	0x6c62	; 0x6c62 <rand>
     ef8:	7c 01       	movw	r14, r24
     efa:	8c 2f       	mov	r24, r28
     efc:	0e 94 44 07 	call	0xe88	; 0xe88 <_b_pow>
     f00:	68 2f       	mov	r22, r24
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	c7 01       	movw	r24, r14
     f06:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
     f0a:	99 27       	eor	r25, r25
     f0c:	0e 94 02 27 	call	0x4e04	; 0x4e04 <nrk_wait_until_next_n_periods>
      backoff_count++;
     f10:	cf 5f       	subi	r28, 0xFF	; 255
     f12:	c7 30       	cpi	r28, 0x07	; 7
     f14:	08 f0       	brcs	.+2      	; 0xf18 <_bmac_tx+0x72>
     f16:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
     f18:	8c e8       	ldi	r24, 0x8C	; 140
     f1a:	94 e0       	ldi	r25, 0x04	; 4
     f1c:	0e 94 e6 29 	call	0x53cc	; 0x53cc <_nrk_time_to_ticks>
     f20:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
     f22:	0e 94 31 36 	call	0x6c62	; 0x6c62 <rand>
     f26:	b8 01       	movw	r22, r16
     f28:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__divmodhi4>
     f2c:	bc 01       	movw	r22, r24
     f2e:	6f 5f       	subi	r22, 0xFF	; 255
     f30:	7f 4f       	sbci	r23, 0xFF	; 255
     f32:	c7 01       	movw	r24, r14
     f34:	0e 94 09 35 	call	0x6a12	; 0x6a12 <__udivmodhi4>
     f38:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
     f3a:	0e 94 6e 27 	call	0x4edc	; 0x4edc <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
     f3e:	dd 23       	and	r29, r29
     f40:	a1 f2       	breq	.-88     	; 0xeea <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
     f42:	10 92 94 07 	sts	0x0794, r1
  bmac_rfTxInfo.ackRequest = 0;
     f46:	10 92 95 07 	sts	0x0795, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
     f4a:	20 91 8c 04 	lds	r18, 0x048C
     f4e:	30 91 8d 04 	lds	r19, 0x048D
     f52:	88 ee       	ldi	r24, 0xE8	; 232
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	28 9f       	mul	r18, r24
     f58:	e0 01       	movw	r28, r0
     f5a:	29 9f       	mul	r18, r25
     f5c:	d0 0d       	add	r29, r0
     f5e:	38 9f       	mul	r19, r24
     f60:	d0 0d       	add	r29, r0
     f62:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
     f64:	60 91 90 04 	lds	r22, 0x0490
     f68:	70 91 91 04 	lds	r23, 0x0491
     f6c:	80 91 92 04 	lds	r24, 0x0492
     f70:	90 91 93 04 	lds	r25, 0x0493
     f74:	20 e4       	ldi	r18, 0x40	; 64
     f76:	32 e4       	ldi	r19, 0x42	; 66
     f78:	4f e0       	ldi	r20, 0x0F	; 15
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
     f80:	c2 0f       	add	r28, r18
     f82:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
     f84:	0e 94 1a 14 	call	0x2834	; 0x2834 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
     f88:	be 01       	movw	r22, r28
     f8a:	8f e8       	ldi	r24, 0x8F	; 143
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	0e 94 26 14 	call	0x284c	; 0x284c <rf_tx_packet_repeat>
     f92:	80 93 96 04 	sts	0x0496, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
     f96:	0e 94 20 14 	call	0x2840	; 0x2840 <rf_rx_off>
  tx_data_ready = 0;
     f9a:	10 92 99 04 	sts	0x0499, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
     f9e:	80 91 1c 0b 	lds	r24, 0x0B1C
     fa2:	0e 94 52 23 	call	0x46a4	; 0x46a4 <nrk_event_signal>
  return NRK_OK;
}
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	ff 90       	pop	r15
     fb2:	ef 90       	pop	r14
     fb4:	08 95       	ret

00000fb6 <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
     fb6:	80 91 97 04 	lds	r24, 0x0497
     fba:	81 11       	cpse	r24, r1
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
     fbe:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <nrk_wait_until_next_period>
     fc2:	f9 cf       	rjmp	.-14     	; 0xfb6 <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
     fc4:	80 91 8e 07 	lds	r24, 0x078E
     fc8:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_signal_register>
  if (v == NRK_ERROR)
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	21 f4       	brne	.+8      	; 0xfd8 <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
     fd0:	81 ee       	ldi	r24, 0xE1	; 225
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
     fd8:	c1 2c       	mov	r12, r1
     fda:	d1 2c       	mov	r13, r1
     fdc:	76 01       	movw	r14, r12
     fde:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
     fe0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <rf_power_up>
    if (is_enabled) {
     fe4:	80 91 94 04 	lds	r24, 0x0494
     fe8:	88 23       	and	r24, r24
     fea:	69 f1       	breq	.+90     	; 0x1046 <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
     fec:	80 91 98 04 	lds	r24, 0x0498
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	41 f4       	brne	.+16     	; 0x1004 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
     ff4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
     ff8:	81 11       	cpse	r24, r1
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
     ffc:	0e 94 ed 06 	call	0xdda	; 0xdda <_bmac_rx>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	21 f4       	brne	.+8      	; 0x100c <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    1004:	80 91 9a 07 	lds	r24, 0x079A
    1008:	0e 94 52 23 	call	0x46a4	; 0x46a4 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    100c:	80 91 99 04 	lds	r24, 0x0499
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	11 f4       	brne	.+4      	; 0x1018 <bmac_nw_task+0x62>
        _bmac_tx ();
    1014:	0e 94 53 07 	call	0xea6	; 0xea6 <_bmac_tx>
      }
      rf_rx_off ();
    1018:	0e 94 20 14 	call	0x2840	; 0x2840 <rf_rx_off>
      rf_power_down ();
    101c:	0e 94 2c 13 	call	0x2658	; 0x2658 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    1020:	20 91 8c 04 	lds	r18, 0x048C
    1024:	30 91 8d 04 	lds	r19, 0x048D
    1028:	40 91 8e 04 	lds	r20, 0x048E
    102c:	50 91 8f 04 	lds	r21, 0x048F
    1030:	60 91 90 04 	lds	r22, 0x0490
    1034:	70 91 91 04 	lds	r23, 0x0491
    1038:	80 91 92 04 	lds	r24, 0x0492
    103c:	90 91 93 04 	lds	r25, 0x0493
    1040:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <nrk_wait>
    1044:	cd cf       	rjmp	.-102    	; 0xfe0 <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    1046:	80 91 8e 07 	lds	r24, 0x078E
    104a:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	00 90 8e 07 	lds	r0, 0x078E
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <bmac_nw_task+0xaa>
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	88 1f       	adc	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	d2 f7       	brpl	.-12     	; 0x1058 <bmac_nw_task+0xa2>
    1064:	0e 94 c3 23 	call	0x4786	; 0x4786 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	00 90 8e 07 	lds	r0, 0x078E
    1070:	04 c0       	rjmp	.+8      	; 0x107a <bmac_nw_task+0xc4>
    1072:	b6 95       	lsr	r27
    1074:	a7 95       	ror	r26
    1076:	97 95       	ror	r25
    1078:	87 95       	ror	r24
    107a:	0a 94       	dec	r0
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <bmac_nw_task+0xbc>
    107e:	80 ff       	sbrs	r24, 0
    1080:	e2 cf       	rjmp	.-60     	; 0x1046 <bmac_nw_task+0x90>
    1082:	ae cf       	rjmp	.-164    	; 0xfe0 <bmac_nw_task+0x2a>

00001084 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    1084:	6b ed       	ldi	r22, 0xDB	; 219
    1086:	77 e0       	ldi	r23, 0x07	; 7
    1088:	8e e1       	ldi	r24, 0x1E	; 30
    108a:	95 e0       	ldi	r25, 0x05	; 5
    108c:	0e 94 cf 32 	call	0x659e	; 0x659e <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1090:	40 e8       	ldi	r20, 0x80	; 128
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	6e e9       	ldi	r22, 0x9E	; 158
    1096:	74 e0       	ldi	r23, 0x04	; 4
    1098:	8e e1       	ldi	r24, 0x1E	; 30
    109a:	95 e0       	ldi	r25, 0x05	; 5
    109c:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    10a0:	ee e1       	ldi	r30, 0x1E	; 30
    10a2:	f5 e0       	ldi	r31, 0x05	; 5
    10a4:	84 e1       	ldi	r24, 0x14	; 20
    10a6:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    10ac:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    10ae:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    10b0:	13 86       	std	Z+11, r1	; 0x0b
    10b2:	14 86       	std	Z+12, r1	; 0x0c
    10b4:	15 86       	std	Z+13, r1	; 0x0d
    10b6:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	9d e2       	ldi	r25, 0x2D	; 45
    10bc:	a1 e3       	ldi	r26, 0x31	; 49
    10be:	b1 e0       	ldi	r27, 0x01	; 1
    10c0:	87 87       	std	Z+15, r24	; 0x0f
    10c2:	90 8b       	std	Z+16, r25	; 0x10
    10c4:	a1 8b       	std	Z+17, r26	; 0x11
    10c6:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    10c8:	13 8a       	std	Z+19, r1	; 0x13
    10ca:	14 8a       	std	Z+20, r1	; 0x14
    10cc:	15 8a       	std	Z+21, r1	; 0x15
    10ce:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    10d0:	17 8a       	std	Z+23, r1	; 0x17
    10d2:	10 8e       	std	Z+24, r1	; 0x18
    10d4:	11 8e       	std	Z+25, r1	; 0x19
    10d6:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    10d8:	13 8e       	std	Z+27, r1	; 0x1b
    10da:	14 8e       	std	Z+28, r1	; 0x1c
    10dc:	15 8e       	std	Z+29, r1	; 0x1d
    10de:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    10e0:	17 8e       	std	Z+31, r1	; 0x1f
    10e2:	10 a2       	std	Z+32, r1	; 0x20
    10e4:	11 a2       	std	Z+33, r1	; 0x21
    10e6:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    10e8:	cf 01       	movw	r24, r30
    10ea:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <nrk_activate_task>

000010ee <open>:
}

int8_t open(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    // Note that here nothing needs to be done for the I2C. This is the original
    // code for the firefly 2.2 board driver
	if (is_open == 1) return NRK_ERROR;
    10ee:	80 91 c0 0b 	lds	r24, 0x0BC0
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	11 f4       	brne	.+4      	; 0x10fa <open+0xc>
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	08 95       	ret
    is_open = 1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 c0 0b 	sts	0x0BC0, r24
    if (opt & READ_FLAG) {
    1100:	60 ff       	sbrs	r22, 0
    1102:	18 c0       	rjmp	.+48     	; 0x1134 <open+0x46>
        // Turn on Sensor Node Power
        //PORTE &= ~(PWR_CTRL_MASK);
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_set(PWR_CTRL_PIN);
    1104:	80 91 28 02 	lds	r24, 0x0228
    1108:	0e 94 8b 19 	call	0x3316	; 0x3316 <nrk_gpio_set>
        channel = 0;
    110c:	10 92 c5 0b 	sts	0x0BC5, r1
        ADC_SET_CHANNEL(0);
    1110:	80 91 7c 00 	lds	r24, 0x007C
    1114:	80 7e       	andi	r24, 0xE0	; 224
    1116:	80 93 7c 00 	sts	0x007C, r24
    111a:	80 91 7c 00 	lds	r24, 0x007C
    111e:	90 91 7c 00 	lds	r25, 0x007C
    1122:	80 7e       	andi	r24, 0xE0	; 224
    1124:	89 2b       	or	r24, r25
    1126:	80 93 7c 00 	sts	0x007C, r24
        nrk_spin_wait_us(ADC_STARTUP_DELAY);
    112a:	88 ee       	ldi	r24, 0xE8	; 232
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <nrk_spin_wait_us>
    1132:	05 c0       	rjmp	.+10     	; 0x113e <open+0x50>
    1134:	86 2f       	mov	r24, r22
    1136:	86 70       	andi	r24, 0x06	; 6
        return NRK_OK;
    }
    if (opt & WRITE_FLAG) {
        return NRK_ERROR;
    }
    if (opt & APPEND_FLAG) {
    1138:	f1 f6       	brne	.-68     	; 0x10f6 <open+0x8>
        return NRK_ERROR;
    }
    if (((opt)&(READ_FLAG | WRITE_FLAG | APPEND_FLAG)) == 0)
    113a:	67 70       	andi	r22, 0x07	; 7
    113c:	e1 f2       	breq	.-72     	; 0x10f6 <open+0x8>
        return NRK_ERROR;
    else return NRK_OK;
    113e:	81 e0       	ldi	r24, 0x01	; 1

}
    1140:	08 95       	ret

00001142 <close>:

int8_t close(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    // Turn off sensor power
    //PORTE |= PWR_CTRL_MASK;
    nrk_gpio_clr(PWR_CTRL_PIN);
    1142:	80 91 28 02 	lds	r24, 0x0228
    1146:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <nrk_gpio_clr>
    //PORTE &= ~(PWR_CTRL_MASK);
    	is_open = 0;
    114a:	10 92 c0 0b 	sts	0x0BC0, r1
    close_i2c(); // Shut down the I2C
    114e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <close_i2c>
    ADC_DISABLE();
    1152:	ea e7       	ldi	r30, 0x7A	; 122
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8f 77       	andi	r24, 0x7F	; 127
    115a:	80 83       	st	Z, r24
    return NRK_OK;
}
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	08 95       	ret

00001160 <get_status>:

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    1160:	61 30       	cpi	r22, 0x01	; 1
    1162:	19 f4       	brne	.+6      	; 0x116a <get_status+0xa>
    1164:	80 91 c5 0b 	lds	r24, 0x0BC5
    1168:	08 95       	ret
    return NRK_ERROR;
    116a:	8f ef       	ldi	r24, 0xFF	; 255
}
    116c:	08 95       	ret

0000116e <set_status>:
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    // use "key" and "value" here
    if (key == SENSOR_SELECT) {
    116e:	61 30       	cpi	r22, 0x01	; 1
    1170:	91 f5       	brne	.+100    	; 0x11d6 <set_status+0x68>
        // Set to audio channel if it is an average value
        if (value == AUDIO_P2P) {
    1172:	2c 30       	cpi	r18, 0x0C	; 12
    1174:	81 f4       	brne	.+32     	; 0x1196 <set_status+0x28>
            channel = value;
    1176:	20 93 c5 0b 	sts	0x0BC5, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(AUDIO);
    117a:	80 91 7c 00 	lds	r24, 0x007C
    117e:	80 7e       	andi	r24, 0xE0	; 224
    1180:	80 93 7c 00 	sts	0x007C, r24
    1184:	90 91 7c 00 	lds	r25, 0x007C
    1188:	20 91 7c 00 	lds	r18, 0x007C
    118c:	89 2f       	mov	r24, r25
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	80 7e       	andi	r24, 0xE0	; 224
    1192:	83 60       	ori	r24, 0x03	; 3
    1194:	17 c0       	rjmp	.+46     	; 0x11c4 <set_status+0x56>
            nrk_spin_wait_us(ADC_SETUP_DELAY);
            return NRK_OK;

        } else {
            if (value > 13) { // Update for all of the sensors
    1196:	2e 30       	cpi	r18, 0x0E	; 14
    1198:	20 f0       	brcs	.+8      	; 0x11a2 <set_status+0x34>
                _nrk_errno_set(1);
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
    11a0:	1a c0       	rjmp	.+52     	; 0x11d6 <set_status+0x68>
                return NRK_ERROR;
            }
            channel = value;
    11a2:	20 93 c5 0b 	sts	0x0BC5, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(channel);
    11a6:	80 91 7c 00 	lds	r24, 0x007C
    11aa:	80 7e       	andi	r24, 0xE0	; 224
    11ac:	80 93 7c 00 	sts	0x007C, r24
    11b0:	90 91 7c 00 	lds	r25, 0x007C
    11b4:	20 91 7c 00 	lds	r18, 0x007C
    11b8:	89 2f       	mov	r24, r25
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	80 7e       	andi	r24, 0xE0	; 224
    11be:	30 91 c5 0b 	lds	r19, 0x0BC5
    11c2:	83 2b       	or	r24, r19
    11c4:	82 2b       	or	r24, r18
    11c6:	80 93 7c 00 	sts	0x007C, r24
            nrk_spin_wait_us(ADC_SETUP_DELAY);
    11ca:	88 ec       	ldi	r24, 0xC8	; 200
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <nrk_spin_wait_us>
            return NRK_OK;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	08 95       	ret
        }
    }
    return NRK_ERROR;
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
}
    11d8:	08 95       	ret

000011da <get_eeprom_values>:

void get_eeprom_values(){
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	66 97       	sbiw	r28, 0x16	; 22
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
   uint8_t raw_eeprom_data[22]; // Buffer for storing the raw values being returned
   int j = 0;
   int rv;

   // Get the values
  rv = ee24xx_read_bytes(0xAA, 22, raw_eeprom_data);
    11ee:	ae 01       	movw	r20, r28
    11f0:	4f 5f       	subi	r20, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	66 e1       	ldi	r22, 0x16	; 22
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	8a ea       	ldi	r24, 0xAA	; 170
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ee24xx_read_bytes>
    1200:	fe 01       	movw	r30, r28
    1202:	31 96       	adiw	r30, 0x01	; 1
    1204:	a6 e9       	ldi	r26, 0x96	; 150
    1206:	bb e0       	ldi	r27, 0x0B	; 11
    1208:	9e 01       	movw	r18, r28
    120a:	29 5e       	subi	r18, 0xE9	; 233
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
      eeprom_values[j] = ((raw_eeprom_data[2*j] | 0x0000) << 8) |
    120e:	80 81       	ld	r24, Z
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	98 2f       	mov	r25, r24
    1214:	88 27       	eor	r24, r24
    1216:	41 81       	ldd	r20, Z+1	; 0x01
    1218:	84 2b       	or	r24, r20
    121a:	8d 93       	st	X+, r24
    121c:	9d 93       	st	X+, r25
    121e:	32 96       	adiw	r30, 0x02	; 2
      //  printf("%02x ", raw_eeprom_data[j]);
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
    1220:	e2 17       	cp	r30, r18
    1222:	f3 07       	cpc	r31, r19
    1224:	a1 f7       	brne	.-24     	; 0x120e <get_eeprom_values+0x34>
      printf("MC: %i\r\n", MC);
      printf("MD: %i\r\n", MD);
      printf("-------------------------------------------------\r\n");
  }
  */
}
    1226:	66 96       	adiw	r28, 0x16	; 22
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <init_adc>:
    return val;
}
*/
void init_adc() {
    // Initialize values here
    ADC_INIT();
    1238:	ea e7       	ldi	r30, 0x7A	; 122
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	80 83       	st	Z, r24
    ADC_ENABLE();
    1240:	80 81       	ld	r24, Z
    1242:	80 68       	ori	r24, 0x80	; 128
    1244:	80 83       	st	Z, r24
    channel = 0;
    1246:	10 92 c5 0b 	sts	0x0BC5, r1
    ADC_SET_CHANNEL(0);
    124a:	ac e7       	ldi	r26, 0x7C	; 124
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	8c 91       	ld	r24, X
    1250:	80 7e       	andi	r24, 0xE0	; 224
    1252:	8c 93       	st	X, r24
    1254:	8c 91       	ld	r24, X
    1256:	9c 91       	ld	r25, X
    1258:	80 7e       	andi	r24, 0xE0	; 224
    125a:	89 2b       	or	r24, r25
    125c:	8c 93       	st	X, r24
    ADC_DISABLE();
    125e:	80 81       	ld	r24, Z
    1260:	8f 77       	andi	r24, 0x7F	; 127
    1262:	80 83       	st	Z, r24
    1264:	08 95       	ret

00001266 <init>:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}

int8_t init(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    1266:	cf 93       	push	r28
        // For handling the ADC
        // Set the pwr ctrl pin as output
	//DDRE = 0;
        //DDRE |= PWR_CTRL_MASK;
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_direction(PWR_CTRL_PIN, NRK_PIN_OUTPUT);
    1268:	c0 91 28 02 	lds	r28, 0x0228
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	8c 2f       	mov	r24, r28
    1270:	0e 94 9b 1b 	call	0x3736	; 0x3736 <nrk_gpio_direction>
        //nrk_gpio_clr(PWR_CTRL_PIN);
        nrk_gpio_set(PWR_CTRL_PIN);
    1274:	8c 2f       	mov	r24, r28
    1276:	0e 94 8b 19 	call	0x3316	; 0x3316 <nrk_gpio_set>
	// Input for motion detector
        nrk_gpio_direction(NRK_PORTF_6, NRK_PIN_INPUT );
    127a:	c0 91 13 02 	lds	r28, 0x0213
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	8c 2f       	mov	r24, r28
    1282:	0e 94 9b 1b 	call	0x3736	; 0x3736 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTF_6);
    1286:	8c 2f       	mov	r24, r28
    1288:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
    128c:	c0 91 29 02 	lds	r28, 0x0229
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	8c 2f       	mov	r24, r28
    1294:	0e 94 9b 1b 	call	0x3736	; 0x3736 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
    1298:	8c 2f       	mov	r24, r28
    129a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <nrk_gpio_clr>
	nrk_gpio_pullups(0);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <nrk_gpio_pullups>

        init_adc();
    12a4:	0e 94 1c 09 	call	0x1238	; 0x1238 <init_adc>
        
        // For handling the I2C
         init_i2c();
    12a8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <init_i2c>

	set_i2c_device(BOSCH_EEPROM_ADDRESS);
    12ac:	8e ee       	ldi	r24, 0xEE	; 238
    12ae:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <set_i2c_device>
        get_eeprom_values();
    12b2:	0e 94 ed 08 	call	0x11da	; 0x11da <get_eeprom_values>
        is_open = 0;
    12b6:	10 92 c0 0b 	sts	0x0BC0, r1
        return 1;
    
}
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <delay>:
    ADC_GET_SAMPLE_10(adc_val);
    return adc_val;
}

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
    12c0:	88 ec       	ldi	r24, 0xC8	; 200
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <nrk_spin_wait_us>

000012c8 <get_adc_val>:
    ADC_DISABLE();
}

uint16_t get_adc_val() {
    uint16_t adc_val;
    ADC_SAMPLE_SINGLE();
    12c8:	80 91 7a 00 	lds	r24, 0x007A
    12cc:	80 64       	ori	r24, 0x40	; 64
    12ce:	80 93 7a 00 	sts	0x007A, r24
    12d2:	80 91 7a 00 	lds	r24, 0x007A
    12d6:	84 ff       	sbrs	r24, 4
    12d8:	fc cf       	rjmp	.-8      	; 0x12d2 <get_adc_val+0xa>
    delay();
    12da:	0e 94 60 09 	call	0x12c0	; 0x12c0 <delay>
    ADC_GET_SAMPLE_10(adc_val);
    12de:	80 91 78 00 	lds	r24, 0x0078
    12e2:	20 91 79 00 	lds	r18, 0x0079
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    return adc_val;
}
    12e8:	92 2b       	or	r25, r18
    12ea:	08 95       	ret

000012ec <calc_true_press>:

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
}

int32_t calc_true_press(uint8_t oss){
    12ec:	4f 92       	push	r4
    12ee:	5f 92       	push	r5
    12f0:	6f 92       	push	r6
    12f2:	7f 92       	push	r7
    12f4:	8f 92       	push	r8
    12f6:	9f 92       	push	r9
    12f8:	af 92       	push	r10
    12fa:	bf 92       	push	r11
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	28 97       	sbiw	r28, 0x08	; 8
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	18 2f       	mov	r17, r24

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
    131c:	c0 90 bc 0b 	lds	r12, 0x0BBC
    1320:	d0 90 bd 0b 	lds	r13, 0x0BBD
    1324:	e0 90 be 0b 	lds	r14, 0x0BBE
    1328:	f0 90 bf 0b 	lds	r15, 0x0BBF
    132c:	20 ea       	ldi	r18, 0xA0	; 160
    132e:	c2 1a       	sub	r12, r18
    1330:	2f e0       	ldi	r18, 0x0F	; 15
    1332:	d2 0a       	sbc	r13, r18
    1334:	e1 08       	sbc	r14, r1
    1336:	f1 08       	sbc	r15, r1
    1338:	c0 92 ac 0b 	sts	0x0BAC, r12
    133c:	d0 92 ad 0b 	sts	0x0BAD, r13
    1340:	e0 92 ae 0b 	sts	0x0BAE, r14
    1344:	f0 92 af 0b 	sts	0x0BAF, r15
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
    1348:	a7 01       	movw	r20, r14
    134a:	96 01       	movw	r18, r12
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <__mulsi3>
    1354:	4b 01       	movw	r8, r22
    1356:	5c 01       	movw	r10, r24
    1358:	5c e0       	ldi	r21, 0x0C	; 12
    135a:	b5 94       	asr	r11
    135c:	a7 94       	ror	r10
    135e:	97 94       	ror	r9
    1360:	87 94       	ror	r8
    1362:	5a 95       	dec	r21
    1364:	d1 f7       	brne	.-12     	; 0x135a <calc_true_press+0x6e>
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
    1366:	40 91 96 0b 	lds	r20, 0x0B96
    136a:	50 91 97 0b 	lds	r21, 0x0B97
    136e:	66 27       	eor	r22, r22
    1370:	57 fd       	sbrc	r21, 7
    1372:	60 95       	com	r22
    1374:	76 2f       	mov	r23, r22
    1376:	db 01       	movw	r26, r22
    1378:	ca 01       	movw	r24, r20
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	aa 1f       	adc	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	6a 95       	dec	r22
    1386:	d1 f7       	brne	.-12     	; 0x137c <calc_true_press+0x90>
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	ab 83       	std	Y+3, r26	; 0x03
    138e:	bc 83       	std	Y+4, r27	; 0x04

int32_t calc_true_press(uint8_t oss){

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
    1390:	a0 91 a4 0b 	lds	r26, 0x0BA4
    1394:	b0 91 a5 0b 	lds	r27, 0x0BA5
    1398:	a5 01       	movw	r20, r10
    139a:	94 01       	movw	r18, r8
    139c:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <__mulshisi3>
    13a0:	41 2c       	mov	r4, r1
    13a2:	e8 e0       	ldi	r30, 0x08	; 8
    13a4:	5e 2e       	mov	r5, r30
    13a6:	61 2c       	mov	r6, r1
    13a8:	71 2c       	mov	r7, r1
    13aa:	a3 01       	movw	r20, r6
    13ac:	92 01       	movw	r18, r4
    13ae:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    13b2:	2d 83       	std	Y+5, r18	; 0x05
    13b4:	3e 83       	std	Y+6, r19	; 0x06
    13b6:	4f 83       	std	Y+7, r20	; 0x07
    13b8:	58 87       	std	Y+8, r21	; 0x08
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
    13ba:	a0 91 98 0b 	lds	r26, 0x0B98
    13be:	b0 91 99 0b 	lds	r27, 0x0B99
    13c2:	a7 01       	movw	r20, r14
    13c4:	96 01       	movw	r18, r12
    13c6:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <__mulshisi3>
    13ca:	a3 01       	movw	r20, r6
    13cc:	92 01       	movw	r18, r4
    13ce:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	af 81       	ldd	r26, Y+7	; 0x07
    13d8:	b8 85       	ldd	r27, Y+8	; 0x08
    13da:	82 0f       	add	r24, r18
    13dc:	93 1f       	adc	r25, r19
    13de:	a4 1f       	adc	r26, r20
    13e0:	b5 1f       	adc	r27, r21
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
    13e2:	29 81       	ldd	r18, Y+1	; 0x01
    13e4:	3a 81       	ldd	r19, Y+2	; 0x02
    13e6:	4b 81       	ldd	r20, Y+3	; 0x03
    13e8:	5c 81       	ldd	r21, Y+4	; 0x04
    13ea:	82 0f       	add	r24, r18
    13ec:	93 1f       	adc	r25, r19
    13ee:	a4 1f       	adc	r26, r20
    13f0:	b5 1f       	adc	r27, r21
    13f2:	01 2e       	mov	r0, r17
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <calc_true_press+0x112>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	aa 1f       	adc	r26, r26
    13fc:	bb 1f       	adc	r27, r27
    13fe:	0a 94       	dec	r0
    1400:	d2 f7       	brpl	.-12     	; 0x13f6 <calc_true_press+0x10a>
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	6e 5f       	subi	r22, 0xFE	; 254
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	f4 e0       	ldi	r31, 0x04	; 4
    1410:	4f 2e       	mov	r4, r31
    1412:	51 2c       	mov	r5, r1
    1414:	61 2c       	mov	r6, r1
    1416:	71 2c       	mov	r7, r1
    1418:	a3 01       	movw	r20, r6
    141a:	92 01       	movw	r18, r4
    141c:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    1420:	29 83       	std	Y+1, r18	; 0x01
    1422:	3a 83       	std	Y+2, r19	; 0x02
    1424:	4b 83       	std	Y+3, r20	; 0x03
    1426:	5c 83       	std	Y+4, r21	; 0x04
    1428:	20 93 db 0b 	sts	0x0BDB, r18
    142c:	30 93 dc 0b 	sts	0x0BDC, r19
    1430:	40 93 dd 0b 	sts	0x0BDD, r20
    1434:	50 93 de 0b 	sts	0x0BDE, r21
//    X1 = AC3 * B6 / pow(2,13);                          if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = AC3 * B6 / 8192;                          if(DEBUG) printf("X1 %li\r\n", X1);
    1438:	a0 91 9a 0b 	lds	r26, 0x0B9A
    143c:	b0 91 9b 0b 	lds	r27, 0x0B9B
    1440:	a7 01       	movw	r20, r14
    1442:	96 01       	movw	r18, r12
    1444:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <__mulshisi3>
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e2       	ldi	r19, 0x20	; 32
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    1454:	69 01       	movw	r12, r18
    1456:	7a 01       	movw	r14, r20
//    X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);      if(DEBUG) printf("X2 %li\r\n", X2);
    X2 = (B1 * (B6 * B6 / 4096)) / 65536;      if(DEBUG) printf("X2 %li\r\n", X2);
    1458:	a0 91 a2 0b 	lds	r26, 0x0BA2
    145c:	b0 91 a3 0b 	lds	r27, 0x0BA3
    1460:	a5 01       	movw	r20, r10
    1462:	94 01       	movw	r18, r8
    1464:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <__mulshisi3>
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
//    X3 = ((X1 + X2) + 2) / pow(2,2);                    if(DEBUG) printf("X3 %li\r\n", X3);
    X3 = ((X1 + X2) + 2) / 4;                    if(DEBUG) printf("X3 %li\r\n", X3);
    1474:	d7 01       	movw	r26, r14
    1476:	c6 01       	movw	r24, r12
    1478:	82 0f       	add	r24, r18
    147a:	93 1f       	adc	r25, r19
    147c:	a4 1f       	adc	r26, r20
    147e:	b5 1f       	adc	r27, r21
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	6e 5f       	subi	r22, 0xFE	; 254
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	8f 4f       	sbci	r24, 0xFF	; 255
    148a:	9f 4f       	sbci	r25, 0xFF	; 255
    148c:	a3 01       	movw	r20, r6
    148e:	92 01       	movw	r18, r4
    1490:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    1494:	20 93 c6 0b 	sts	0x0BC6, r18
    1498:	30 93 c7 0b 	sts	0x0BC7, r19
    149c:	40 93 c8 0b 	sts	0x0BC8, r20
    14a0:	50 93 c9 0b 	sts	0x0BC9, r21
//    B4 = AC4 * (X3 + 32768) / pow(2,15);                if(DEBUG) printf("B4 %lu\r\n", B4);
    B4 = AC4 * (X3 + 32768) / 32768;                if(DEBUG) printf("B4 %lu\r\n", B4);
    14a4:	a0 91 9c 0b 	lds	r26, 0x0B9C
    14a8:	b0 91 9d 0b 	lds	r27, 0x0B9D
    14ac:	30 58       	subi	r19, 0x80	; 128
    14ae:	4f 4f       	sbci	r20, 0xFF	; 255
    14b0:	5f 4f       	sbci	r21, 0xFF	; 255
    14b2:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e8       	ldi	r19, 0x80	; 128
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    14c2:	69 01       	movw	r12, r18
    14c4:	7a 01       	movw	r14, r20
    14c6:	20 93 ca 0b 	sts	0x0BCA, r18
    14ca:	30 93 cb 0b 	sts	0x0BCB, r19
    14ce:	40 93 cc 0b 	sts	0x0BCC, r20
    14d2:	50 93 cd 0b 	sts	0x0BCD, r21
    B7 = (UP - B3) * (50000 >> oss);                    if(DEBUG) printf("B7 %lu\r\n", B7);
    14d6:	80 91 d3 0b 	lds	r24, 0x0BD3
    14da:	90 91 d4 0b 	lds	r25, 0x0BD4
    14de:	a0 91 d5 0b 	lds	r26, 0x0BD5
    14e2:	b0 91 d6 0b 	lds	r27, 0x0BD6
    14e6:	9c 01       	movw	r18, r24
    14e8:	ad 01       	movw	r20, r26
    14ea:	89 80       	ldd	r8, Y+1	; 0x01
    14ec:	9a 80       	ldd	r9, Y+2	; 0x02
    14ee:	ab 80       	ldd	r10, Y+3	; 0x03
    14f0:	bc 80       	ldd	r11, Y+4	; 0x04
    14f2:	28 19       	sub	r18, r8
    14f4:	39 09       	sbc	r19, r9
    14f6:	4a 09       	sbc	r20, r10
    14f8:	5b 09       	sbc	r21, r11
    14fa:	80 e5       	ldi	r24, 0x50	; 80
    14fc:	93 ec       	ldi	r25, 0xC3	; 195
    14fe:	a0 e0       	ldi	r26, 0x00	; 0
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	bc 01       	movw	r22, r24
    1504:	cd 01       	movw	r24, r26
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <calc_true_press+0x224>
    1508:	95 95       	asr	r25
    150a:	87 95       	ror	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	1a 95       	dec	r17
    1512:	d2 f7       	brpl	.-12     	; 0x1508 <calc_true_press+0x21c>
    1514:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <__mulsi3>
    1518:	60 93 cf 0b 	sts	0x0BCF, r22
    151c:	70 93 d0 0b 	sts	0x0BD0, r23
    1520:	80 93 d1 0b 	sts	0x0BD1, r24
    1524:	90 93 d2 0b 	sts	0x0BD2, r25

    if(B7 < 0x80000000)
    1528:	97 fd       	sbrc	r25, 7
    152a:	11 c0       	rjmp	.+34     	; 0x154e <calc_true_press+0x262>
       P = (B7 * 2)/ B4;
    152c:	66 0f       	add	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	88 1f       	adc	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	a7 01       	movw	r20, r14
    1536:	96 01       	movw	r18, r12
    1538:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    153c:	20 93 d7 0b 	sts	0x0BD7, r18
    1540:	30 93 d8 0b 	sts	0x0BD8, r19
    1544:	40 93 d9 0b 	sts	0x0BD9, r20
    1548:	50 93 da 0b 	sts	0x0BDA, r21
    154c:	12 c0       	rjmp	.+36     	; 0x1572 <calc_true_press+0x286>
    else
        P = (B7 / B4) * 2;
    154e:	a7 01       	movw	r20, r14
    1550:	96 01       	movw	r18, r12
    1552:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    1556:	da 01       	movw	r26, r20
    1558:	c9 01       	movw	r24, r18
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	aa 1f       	adc	r26, r26
    1560:	bb 1f       	adc	r27, r27
    1562:	80 93 d7 0b 	sts	0x0BD7, r24
    1566:	90 93 d8 0b 	sts	0x0BD8, r25
    156a:	a0 93 d9 0b 	sts	0x0BD9, r26
    156e:	b0 93 da 0b 	sts	0x0BDA, r27
                                                        if(DEBUG) printf("P %li\r\n", P);
    X1 = (P / 256) * (P / 256);               if(DEBUG) printf("X1 %li\r\n", X1);
    1572:	c0 90 d7 0b 	lds	r12, 0x0BD7
    1576:	d0 90 d8 0b 	lds	r13, 0x0BD8
    157a:	e0 90 d9 0b 	lds	r14, 0x0BD9
    157e:	f0 90 da 0b 	lds	r15, 0x0BDA
    1582:	c7 01       	movw	r24, r14
    1584:	b6 01       	movw	r22, r12
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	31 e0       	ldi	r19, 0x01	; 1
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    1592:	ca 01       	movw	r24, r20
    1594:	b9 01       	movw	r22, r18
    1596:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <__mulsi3>
    159a:	9b 01       	movw	r18, r22
    159c:	ac 01       	movw	r20, r24
//    X1 = (P / pow(2,8)) * (P / pow(2,8));               if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (X1 * 3038) / 65536;                       if(DEBUG) printf("X1 %li\r\n", X1);
    159e:	ae ed       	ldi	r26, 0xDE	; 222
    15a0:	bb e0       	ldi	r27, 0x0B	; 11
    15a2:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    15a6:	4c 01       	movw	r8, r24
    15a8:	bb 24       	eor	r11, r11
    15aa:	97 fc       	sbrc	r9, 7
    15ac:	b0 94       	com	r11
    15ae:	ab 2c       	mov	r10, r11
    15b0:	80 92 c1 0b 	sts	0x0BC1, r8
    15b4:	90 92 c2 0b 	sts	0x0BC2, r9
    15b8:	a0 92 c3 0b 	sts	0x0BC3, r10
    15bc:	b0 92 c4 0b 	sts	0x0BC4, r11
//    X1 = (X1 * 3038) / pow(2,16);                       if(DEBUG) printf("X1 %li\r\n", X1);
    X2 = (-7357 * P ) / 65536;                      if(DEBUG) printf("X2 %li\r\n", X2);
    15c0:	a3 e4       	ldi	r26, 0x43	; 67
    15c2:	b3 ee       	ldi	r27, 0xE3	; 227
    15c4:	a7 01       	movw	r20, r14
    15c6:	96 01       	movw	r18, r12
    15c8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulohisi3>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    15d8:	20 93 b4 0b 	sts	0x0BB4, r18
    15dc:	30 93 b5 0b 	sts	0x0BB5, r19
    15e0:	40 93 b6 0b 	sts	0x0BB6, r20
    15e4:	50 93 b7 0b 	sts	0x0BB7, r21
//	X2 = (-7357 * P ) / pow(2,16);                      if(DEBUG) printf("X2 %li\r\n", X2);
//    P = P + (X1 + X2 + 3791) / pow(2,4);                if(DEBUG) printf("P %li\r\n", P);
    P = P + (X1 + X2 + 3791) / 16;                if(DEBUG) printf("P %li\r\n", P);
    15e8:	d5 01       	movw	r26, r10
    15ea:	c4 01       	movw	r24, r8
    15ec:	82 0f       	add	r24, r18
    15ee:	93 1f       	adc	r25, r19
    15f0:	a4 1f       	adc	r26, r20
    15f2:	b5 1f       	adc	r27, r21
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	61 53       	subi	r22, 0x31	; 49
    15fa:	71 4f       	sbci	r23, 0xF1	; 241
    15fc:	8f 4f       	sbci	r24, 0xFF	; 255
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	20 e1       	ldi	r18, 0x10	; 16
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    160c:	c7 01       	movw	r24, r14
    160e:	b6 01       	movw	r22, r12
    1610:	62 0f       	add	r22, r18
    1612:	73 1f       	adc	r23, r19
    1614:	84 1f       	adc	r24, r20
    1616:	95 1f       	adc	r25, r21
    1618:	60 93 d7 0b 	sts	0x0BD7, r22
    161c:	70 93 d8 0b 	sts	0x0BD8, r23
    1620:	80 93 d9 0b 	sts	0x0BD9, r24
    1624:	90 93 da 0b 	sts	0x0BDA, r25

    if(DEBUG) printf("Pressure is %li Pascals\r\n", P);

    return P;

}
    1628:	28 96       	adiw	r28, 0x08	; 8
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	bf 90       	pop	r11
    1644:	af 90       	pop	r10
    1646:	9f 90       	pop	r9
    1648:	8f 90       	pop	r8
    164a:	7f 90       	pop	r7
    164c:	6f 90       	pop	r6
    164e:	5f 90       	pop	r5
    1650:	4f 90       	pop	r4
    1652:	08 95       	ret

00001654 <calc_true_temp>:


inline int32_t calc_true_temp(){
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29

    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)32768;
    1664:	c6 e9       	ldi	r28, 0x96	; 150
    1666:	db e0       	ldi	r29, 0x0B	; 11
    1668:	8a 85       	ldd	r24, Y+10	; 0x0a
    166a:	9b 85       	ldd	r25, Y+11	; 0x0b
    166c:	40 91 b0 0b 	lds	r20, 0x0BB0
    1670:	50 91 b1 0b 	lds	r21, 0x0BB1
    1674:	60 91 b2 0b 	lds	r22, 0x0BB2
    1678:	70 91 b3 0b 	lds	r23, 0x0BB3
    167c:	9a 01       	movw	r18, r20
    167e:	ab 01       	movw	r20, r22
    1680:	28 1b       	sub	r18, r24
    1682:	39 0b       	sbc	r19, r25
    1684:	41 09       	sbc	r20, r1
    1686:	51 09       	sbc	r21, r1
    1688:	a8 85       	ldd	r26, Y+8	; 0x08
    168a:	b9 85       	ldd	r27, Y+9	; 0x09
    168c:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e8       	ldi	r19, 0x80	; 128
    1694:	40 e0       	ldi	r20, 0x00	; 0
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    169c:	69 01       	movw	r12, r18
    169e:	7a 01       	movw	r14, r20
    16a0:	20 93 c1 0b 	sts	0x0BC1, r18
    16a4:	30 93 c2 0b 	sts	0x0BC2, r19
    16a8:	40 93 c3 0b 	sts	0x0BC3, r20
    16ac:	50 93 c4 0b 	sts	0x0BC4, r21
//    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)pow(2,15);
if(DEBUG) printf("X1 %li\r\n", X1);
//    X2 = (int32_t) MC * pow(2,11) / (X1 + MD);
    X2 = (int32_t) MC * 2048 / (X1 + MD);
    16b0:	6a 89       	ldd	r22, Y+18	; 0x12
    16b2:	7b 89       	ldd	r23, Y+19	; 0x13
    16b4:	cb 01       	movw	r24, r22
    16b6:	aa 27       	eor	r26, r26
    16b8:	97 fd       	sbrc	r25, 7
    16ba:	a0 95       	com	r26
    16bc:	ba 2f       	mov	r27, r26
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	2b e0       	ldi	r18, 0x0B	; 11
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	2a 95       	dec	r18
    16ce:	d1 f7       	brne	.-12     	; 0x16c4 <calc_true_temp+0x70>
    16d0:	0c 89       	ldd	r16, Y+20	; 0x14
    16d2:	1d 89       	ldd	r17, Y+21	; 0x15
    16d4:	22 27       	eor	r18, r18
    16d6:	17 fd       	sbrc	r17, 7
    16d8:	20 95       	com	r18
    16da:	32 2f       	mov	r19, r18
    16dc:	a9 01       	movw	r20, r18
    16de:	98 01       	movw	r18, r16
    16e0:	2c 0d       	add	r18, r12
    16e2:	3d 1d       	adc	r19, r13
    16e4:	4e 1d       	adc	r20, r14
    16e6:	5f 1d       	adc	r21, r15
    16e8:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    16ec:	20 93 b4 0b 	sts	0x0BB4, r18
    16f0:	30 93 b5 0b 	sts	0x0BB5, r19
    16f4:	40 93 b6 0b 	sts	0x0BB6, r20
    16f8:	50 93 b7 0b 	sts	0x0BB7, r21
if(DEBUG) printf("X2 %li\r\n", X2);
    B5 = X1 + X2;
    16fc:	d7 01       	movw	r26, r14
    16fe:	c6 01       	movw	r24, r12
    1700:	82 0f       	add	r24, r18
    1702:	93 1f       	adc	r25, r19
    1704:	a4 1f       	adc	r26, r20
    1706:	b5 1f       	adc	r27, r21
    1708:	80 93 bc 0b 	sts	0x0BBC, r24
    170c:	90 93 bd 0b 	sts	0x0BBD, r25
    1710:	a0 93 be 0b 	sts	0x0BBE, r26
    1714:	b0 93 bf 0b 	sts	0x0BBF, r27
if(DEBUG) printf("B5 %li\r\n", B5);
//    T = (B5 + 8) / pow(2,4);
    T = (B5 + 8) / 16;
    1718:	bc 01       	movw	r22, r24
    171a:	cd 01       	movw	r24, r26
    171c:	68 5f       	subi	r22, 0xF8	; 248
    171e:	7f 4f       	sbci	r23, 0xFF	; 255
    1720:	8f 4f       	sbci	r24, 0xFF	; 255
    1722:	9f 4f       	sbci	r25, 0xFF	; 255
    1724:	20 e1       	ldi	r18, 0x10	; 16
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    1730:	20 93 b8 0b 	sts	0x0BB8, r18
    1734:	30 93 b9 0b 	sts	0x0BB9, r19
    1738:	40 93 ba 0b 	sts	0x0BBA, r20
    173c:	50 93 bb 0b 	sts	0x0BBB, r21
if(DEBUG) printf("XT %li\r\n", T);

    if(DEBUG) printf("Temperature is %li /10 degrees Celcius.\r\n", T);

    return T;
}
    1740:	ca 01       	movw	r24, r20
    1742:	b9 01       	movw	r22, r18
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	cf 90       	pop	r12
    1754:	08 95       	ret

00001756 <read_uncomp_temp>:

void read_uncomp_temp(){
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	00 d0       	rcall	.+0      	; 0x175c <read_uncomp_temp+0x6>
    175c:	1f 92       	push	r1
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62

    uint8_t write_buf[1];
    uint8_t rx_buf[2];
    uint8_t i;

    write_buf[0] = 0x2E;
    1762:	8e e2       	ldi	r24, 0x2E	; 46
    1764:	8b 83       	std	Y+3, r24	; 0x03

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, 1, write_buf);
    1766:	ae 01       	movw	r20, r28
    1768:	4d 5f       	subi	r20, 0xFD	; 253
    176a:	5f 4f       	sbci	r21, 0xFF	; 255
    176c:	61 e0       	ldi	r22, 0x01	; 1
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	84 ef       	ldi	r24, 0xF4	; 244
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
 //   nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
    1778:	84 e9       	ldi	r24, 0x94	; 148
    177a:	91 e1       	ldi	r25, 0x11	; 17
    177c:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7
    ee24xx_read_bytes(0xF6, 2, rx_buf);
    1780:	ae 01       	movw	r20, r28
    1782:	4f 5f       	subi	r20, 0xFF	; 255
    1784:	5f 4f       	sbci	r21, 0xFF	; 255
    1786:	62 e0       	ldi	r22, 0x02	; 2
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	86 ef       	ldi	r24, 0xF6	; 246
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ee24xx_read_bytes>
//    if(DEBUG){
  //      for(i = 0; i < 2; i++)
  //          printf("uncomp_temp[%i] is %u\r\n", i, rx_buf[i]);
  //  }

    UT = (((uint16_t)rx_buf[0] | 0x0000) << 8) | ((uint16_t)rx_buf[1]);
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	98 2f       	mov	r25, r24
    1798:	88 27       	eor	r24, r24
    179a:	2a 81       	ldd	r18, Y+2	; 0x02
    179c:	82 2b       	or	r24, r18
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	80 93 b0 0b 	sts	0x0BB0, r24
    17a6:	90 93 b1 0b 	sts	0x0BB1, r25
    17aa:	a0 93 b2 0b 	sts	0x0BB2, r26
    17ae:	b0 93 b3 0b 	sts	0x0BB3, r27

//    if(DEBUG)
  //   printf("UT is %i\r\n", UT);

}
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <calc_temp>:


int32_t calc_temp(){
    read_uncomp_temp();
    17be:	0e 94 ab 0b 	call	0x1756	; 0x1756 <read_uncomp_temp>
    return calc_true_temp();
    17c2:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <calc_true_temp>

000017c6 <read_uncomp_press>:
int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
}

void read_uncomp_press(uint8_t oss){
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <read_uncomp_press+0x8>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <read_uncomp_press+0xa>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	18 2f       	mov	r17, r24

    uint8_t write_buf[1]; // Used to send a value to the Bosch sensor
    uint8_t rx_buf[3]; // Used to store the received values from the sensor
    uint8_t i;

    write_buf[0] = 0x34 + (oss << 6);
    17d6:	82 95       	swap	r24
    17d8:	88 0f       	add	r24, r24
    17da:	88 0f       	add	r24, r24
    17dc:	80 7c       	andi	r24, 0xC0	; 192
    17de:	8c 5c       	subi	r24, 0xCC	; 204
    17e0:	8c 83       	std	Y+4, r24	; 0x04

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, sizeof(write_buf), write_buf);
    17e2:	ae 01       	movw	r20, r28
    17e4:	4c 5f       	subi	r20, 0xFC	; 252
    17e6:	5f 4f       	sbci	r21, 0xFF	; 255
    17e8:	61 e0       	ldi	r22, 0x01	; 1
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	84 ef       	ldi	r24, 0xF4	; 244
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
//    nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
    17f4:	84 e9       	ldi	r24, 0x94	; 148
    17f6:	91 e1       	ldi	r25, 0x11	; 17
    17f8:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7, 0xF8
    ee24xx_read_bytes(PRESS_BASE_REGISTER, sizeof(rx_buf), rx_buf);
    17fc:	ae 01       	movw	r20, r28
    17fe:	4f 5f       	subi	r20, 0xFF	; 255
    1800:	5f 4f       	sbci	r21, 0xFF	; 255
    1802:	63 e0       	ldi	r22, 0x03	; 3
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	86 ef       	ldi	r24, 0xF6	; 246
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ee24xx_read_bytes>
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
    180e:	2a 81       	ldd	r18, Y+2	; 0x02
            printf("uncomp_press[%i] is %u\r\n", i, rx_buf[i]);
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	dc 01       	movw	r26, r24
    181a:	99 27       	eor	r25, r25
    181c:	88 27       	eor	r24, r24
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
    181e:	92 2b       	or	r25, r18
     UP = UP  + rx_buf[2];
    1820:	2b 81       	ldd	r18, Y+3	; 0x03
    1822:	82 0f       	add	r24, r18
    1824:	91 1d       	adc	r25, r1
    1826:	a1 1d       	adc	r26, r1
    1828:	b1 1d       	adc	r27, r1
     UP = UP >> (8-oss);
    182a:	28 e0       	ldi	r18, 0x08	; 8
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	21 1b       	sub	r18, r17
    1830:	31 09       	sbc	r19, r1
    1832:	04 c0       	rjmp	.+8      	; 0x183c <read_uncomp_press+0x76>
    1834:	b5 95       	asr	r27
    1836:	a7 95       	ror	r26
    1838:	97 95       	ror	r25
    183a:	87 95       	ror	r24
    183c:	2a 95       	dec	r18
    183e:	d2 f7       	brpl	.-12     	; 0x1834 <read_uncomp_press+0x6e>
    1840:	80 93 d3 0b 	sts	0x0BD3, r24
    1844:	90 93 d4 0b 	sts	0x0BD4, r25
    1848:	a0 93 d5 0b 	sts	0x0BD5, r26
    184c:	b0 93 d6 0b 	sts	0x0BD6, r27

 //    if(DEBUG)
 //    printf("UP is %li\r\n", UP);

}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	08 95       	ret

00001860 <calc_press>:
    read_uncomp_temp();
    return calc_true_temp();
}


int32_t calc_press(uint8_t oss){
    1860:	cf 93       	push	r28
    1862:	c8 2f       	mov	r28, r24
    read_uncomp_press(oss);
    1864:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <read_uncomp_press>
    return calc_true_press(oss);
    1868:	8c 2f       	mov	r24, r28
}
    186a:	cf 91       	pop	r28
}


int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
    186c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <calc_true_press>

00001870 <read>:
        return NRK_ERROR;
    else return NRK_OK;

}

int8_t read(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29

    int32_t value_from_sensor;



    ADC_ENABLE();
    1882:	80 91 7a 00 	lds	r24, 0x007A
    1886:	80 68       	ori	r24, 0x80	; 128
    1888:	80 93 7a 00 	sts	0x007A, r24
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	82 0f       	add	r24, r18
    1890:	82 30       	cpi	r24, 0x02	; 2
    1892:	18 f0       	brcs	.+6      	; 0x189a <read+0x2a>
    1894:	24 30       	cpi	r18, 0x04	; 4
    1896:	09 f0       	breq	.+2      	; 0x189a <read+0x2a>
    1898:	a8 c0       	rjmp	.+336    	; 0x19ea <read+0x17a>
    189a:	12 2f       	mov	r17, r18
    189c:	ea 01       	movw	r28, r20
    if ((channel != TEMP2) && (channel != PRESS) && channel <= 7) {
    189e:	80 91 c5 0b 	lds	r24, 0x0BC5
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	78 f4       	brcc	.+30     	; 0x18c4 <read+0x54>
        /* Conversion to 8-bit value*/
        uint16_t val = get_adc_val();
    18a6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <get_adc_val>

        if (size == 2) {
    18aa:	12 30       	cpi	r17, 0x02	; 2
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <read+0x44>
            buffer[count] = val & 0xFF;
    18ae:	88 83       	st	Y, r24
            count++;
            buffer[count] = (val >> 8) & 0xFF;
    18b0:	99 83       	std	Y+1, r25	; 0x01
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <read+0x80>
        }

        if (size == 1) {
    18b4:	11 30       	cpi	r17, 0x01	; 1
    18b6:	09 f0       	breq	.+2      	; 0x18ba <read+0x4a>
    18b8:	7a c0       	rjmp	.+244    	; 0x19ae <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
    18ba:	96 95       	lsr	r25
    18bc:	87 95       	ror	r24
    18be:	96 95       	lsr	r25
    18c0:	87 95       	ror	r24
    18c2:	1e c0       	rjmp	.+60     	; 0x1900 <read+0x90>
        }


    } else if (channel == MOTION ){
    18c4:	8d 30       	cpi	r24, 0x0D	; 13
    18c6:	f1 f4       	brne	.+60     	; 0x1904 <read+0x94>

	// Pull the pin low to dissipate charge otherwise it always floats high
	// In the future, we either need a buffer or a tiny pull down 
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_OUTPUT);
    18c8:	f0 90 29 02 	lds	r15, 0x0229
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	8f 2d       	mov	r24, r15
    18d0:	0e 94 9b 1b 	call	0x3736	; 0x3736 <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
    18d4:	8f 2d       	mov	r24, r15
    18d6:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	8f 2d       	mov	r24, r15
    18de:	0e 94 9b 1b 	call	0x3736	; 0x3736 <nrk_gpio_direction>
	if(size==2) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); count++; buffer[count]=0;  }
    18e2:	12 30       	cpi	r17, 0x02	; 2
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <read+0x84>
    18e6:	8f 2d       	mov	r24, r15
    18e8:	0e 94 66 1a 	call	0x34cc	; 0x34cc <nrk_gpio_get>
    18ec:	88 83       	st	Y, r24
    18ee:	19 82       	std	Y+1, r1	; 0x01
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	74 c0       	rjmp	.+232    	; 0x19dc <read+0x16c>
	if(size==1) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); }
    18f4:	11 30       	cpi	r17, 0x01	; 1
    18f6:	09 f0       	breq	.+2      	; 0x18fa <read+0x8a>
    18f8:	5a c0       	rjmp	.+180    	; 0x19ae <read+0x13e>
    18fa:	8f 2d       	mov	r24, r15
    18fc:	0e 94 66 1a 	call	0x34cc	; 0x34cc <nrk_gpio_get>
    1900:	88 83       	st	Y, r24
    1902:	55 c0       	rjmp	.+170    	; 0x19ae <read+0x13e>
     } 
	else if (channel == AUDIO_P2P) {
    1904:	8c 30       	cpi	r24, 0x0C	; 12
    1906:	b9 f5       	brne	.+110    	; 0x1976 <read+0x106>
    1908:	a1 2c       	mov	r10, r1
    190a:	bb 24       	eor	r11, r11
    190c:	b3 94       	inc	r11
    190e:	e1 2c       	mov	r14, r1
    1910:	f1 2c       	mov	r15, r1
    1912:	cc 24       	eor	r12, r12
    1914:	c3 94       	inc	r12
    1916:	64 e0       	ldi	r22, 0x04	; 4
    1918:	d6 2e       	mov	r13, r22
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
            // 10ms snapshot at around 11KHz measured on scope
	    ADC_SAMPLE_SINGLE();
    191a:	80 91 7a 00 	lds	r24, 0x007A
    191e:	80 64       	ori	r24, 0x40	; 64
    1920:	80 93 7a 00 	sts	0x007A, r24
    1924:	80 91 7a 00 	lds	r24, 0x007A
    1928:	84 ff       	sbrs	r24, 4
    192a:	fc cf       	rjmp	.-8      	; 0x1924 <read+0xb4>
            nrk_spin_wait_us(32);
    192c:	80 e2       	ldi	r24, 0x20	; 32
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <nrk_spin_wait_us>
    	    ADC_GET_SAMPLE_10(val);
    1934:	80 91 78 00 	lds	r24, 0x0078
    1938:	20 91 79 00 	lds	r18, 0x0079
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	92 2b       	or	r25, r18
    1940:	8c 15       	cp	r24, r12
    1942:	9d 05       	cpc	r25, r13
    1944:	08 f4       	brcc	.+2      	; 0x1948 <read+0xd8>
    1946:	6c 01       	movw	r12, r24
    1948:	e8 16       	cp	r14, r24
    194a:	f9 06       	cpc	r15, r25
    194c:	08 f4       	brcc	.+2      	; 0x1950 <read+0xe0>
    194e:	7c 01       	movw	r14, r24
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	a8 1a       	sub	r10, r24
    1954:	b1 08       	sbc	r11, r1
        //uint16_t val=get_adc_val();
        uint16_t val, min, max;
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
    1956:	09 f7       	brne	.-62     	; 0x191a <read+0xaa>
            nrk_spin_wait_us(32);
    	    ADC_GET_SAMPLE_10(val);
            if (val < min)min = val;
            if (val > max)max = val;
        }
        val = max - min;
    1958:	ec 18       	sub	r14, r12
    195a:	fd 08       	sbc	r15, r13
        if (size == 2) {
    195c:	12 30       	cpi	r17, 0x02	; 2
    195e:	19 f4       	brne	.+6      	; 0x1966 <read+0xf6>
            buffer[count] = val & 0xFF;
    1960:	e8 82       	st	Y, r14
            count++;
            buffer[count] = (val >> 8) & 0xFF;
    1962:	f9 82       	std	Y+1, r15	; 0x01
    1964:	c5 cf       	rjmp	.-118    	; 0x18f0 <read+0x80>
        }

        if (size == 1) {
    1966:	11 30       	cpi	r17, 0x01	; 1
    1968:	11 f5       	brne	.+68     	; 0x19ae <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
    196a:	f6 94       	lsr	r15
    196c:	e7 94       	ror	r14
    196e:	f6 94       	lsr	r15
    1970:	e7 94       	ror	r14
    1972:	e8 82       	st	Y, r14
    1974:	1c c0       	rjmp	.+56     	; 0x19ae <read+0x13e>
        }
    }
    else if(channel == HUMIDITY)
    1976:	8b 30       	cpi	r24, 0x0B	; 11
    1978:	e1 f4       	brne	.+56     	; 0x19b2 <read+0x142>
    {
	h_cnt=0;
    197a:	10 92 ce 0b 	sts	0x0BCE, r1
	// Port F.2
	// Wait while pin is high
	do{
	}while((PINF & 0x4) == 0x4 );
    197e:	7a 99       	sbic	0x0f, 2	; 15
    1980:	fe cf       	rjmp	.-4      	; 0x197e <read+0x10e>
	// Wait while pin is low
	do{
	}while((PINF & 0x4) == 0 );
    1982:	7a 9b       	sbis	0x0f, 2	; 15
    1984:	fe cf       	rjmp	.-4      	; 0x1982 <read+0x112>
	//_nrk_high_speed_timer_stop();
	//_nrk_high_speed_timer_reset();
	//_nrk_high_speed_timer_start();
	do{
	// Make h_cnt only 8 bit so it accumulates faster
	h_cnt++;
    1986:	80 91 ce 0b 	lds	r24, 0x0BCE
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	80 93 ce 0b 	sts	0x0BCE, r24
	}while((PINF & 0x4) == 0x4 );
    1990:	7a 99       	sbic	0x0f, 2	; 15
    1992:	f9 cf       	rjmp	.-14     	; 0x1986 <read+0x116>
//	h_cnt=_nrk_high_speed_timer_get();
	buffer[0]=h_cnt&0xff;
    1994:	88 83       	st	Y, r24
	buffer[1]=h_cnt >> 8;
    1996:	80 91 ce 0b 	lds	r24, 0x0BCE
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	19 82       	std	Y+1, r1	; 0x01
	buffer[2]=h_cnt >> 16;
    199e:	33 0f       	add	r19, r19
    19a0:	22 0b       	sbc	r18, r18
    19a2:	32 2f       	mov	r19, r18
    19a4:	2a 83       	std	Y+2, r18	; 0x02
	buffer[3]=h_cnt >> 24;
    19a6:	99 0f       	add	r25, r25
    19a8:	88 0b       	sbc	r24, r24
    19aa:	98 2f       	mov	r25, r24
    19ac:	8b 83       	std	Y+3, r24	; 0x03
    int32_t value_from_sensor;



    ADC_ENABLE();
    uint8_t count = 0;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	15 c0       	rjmp	.+42     	; 0x19dc <read+0x16c>
	buffer[3]=h_cnt >> 24;

    }
    // Here the special cases of the I2C sensors (pressure and temperature)
    // are dealt with
    else if(channel == TEMP2 || channel == PRESS){
    19b2:	97 ef       	ldi	r25, 0xF7	; 247
    19b4:	98 0f       	add	r25, r24
    19b6:	92 30       	cpi	r25, 0x02	; 2
    19b8:	d0 f7       	brcc	.-12     	; 0x19ae <read+0x13e>

        // Size must be 2 for these measurements. If the user has specified 1,
        // give them a zero to indicate something is wrong
        if(size != 4)
    19ba:	24 30       	cpi	r18, 0x04	; 4
    19bc:	b1 f4       	brne	.+44     	; 0x19ea <read+0x17a>
            return 0;

        if(channel == TEMP2)
    19be:	8a 30       	cpi	r24, 0x0A	; 10
    19c0:	19 f4       	brne	.+6      	; 0x19c8 <read+0x158>
	{
            value_from_sensor = calc_temp();
    19c2:	0e 94 df 0b 	call	0x17be	; 0x17be <calc_temp>
    19c6:	05 c0       	rjmp	.+10     	; 0x19d2 <read+0x162>
	}
	    else{
            calc_temp(); /* Note this is neccessary because the pressure calculations depend upon the
    19c8:	0e 94 df 0b 	call	0x17be	; 0x17be <calc_temp>
             raw temperature values*/
            value_from_sensor = calc_press(0); // OSS hard coded to 0 for now, doesn't really matter
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	0e 94 30 0c 	call	0x1860	; 0x1860 <calc_press>
        }
        // Now break up the value to fit in the buffer
        buffer[count] = value_from_sensor & 0xFF;
    19d2:	68 83       	st	Y, r22
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
    19d4:	79 83       	std	Y+1, r23	; 0x01
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
    19d6:	8a 83       	std	Y+2, r24	; 0x02
        count++;
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;
    19d8:	9b 83       	std	Y+3, r25	; 0x03
        buffer[count] = value_from_sensor & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
        count++;
    19da:	83 e0       	ldi	r24, 0x03	; 3
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;

    }

    ADC_DISABLE();
    19dc:	90 91 7a 00 	lds	r25, 0x007A
    19e0:	9f 77       	andi	r25, 0x7F	; 127
    19e2:	90 93 7a 00 	sts	0x007A, r25
    count++;
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <read+0x17c>
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    ADC_DISABLE();
    count++;
    return count;


}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	08 95       	ret

00001a00 <dev_manager_ff3_sensors>:



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	99 f0       	breq	.+38     	; 0x1a2a <dev_manager_ff3_sensors+0x2a>
    1a04:	38 f4       	brcc	.+14     	; 0x1a14 <dev_manager_ff3_sensors+0x14>
    1a06:	88 23       	and	r24, r24
    1a08:	69 f0       	breq	.+26     	; 0x1a24 <dev_manager_ff3_sensors+0x24>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	c9 f4       	brne	.+50     	; 0x1a40 <dev_manager_ff3_sensors+0x40>

        case INIT:
            return init(action, opt, buffer, size);

        case OPEN:
            return open(action, opt, buffer, size);
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <open>



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	89 f0       	breq	.+34     	; 0x1a3a <dev_manager_ff3_sensors+0x3a>
    1a18:	58 f0       	brcs	.+22     	; 0x1a30 <dev_manager_ff3_sensors+0x30>
    1a1a:	85 30       	cpi	r24, 0x05	; 5
    1a1c:	89 f4       	brne	.+34     	; 0x1a40 <dev_manager_ff3_sensors+0x40>

        case OPEN:
            return open(action, opt, buffer, size);

        case READ:
            return read(action, opt, buffer, size);
    1a1e:	85 e0       	ldi	r24, 0x05	; 5
    1a20:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <read>
         * well as the I2C methods of getting inputs, even though only one of
         * them will be used at any given time.
         */

        case INIT:
            return init(action, opt, buffer, size);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	0c 94 33 09 	jmp	0x1266	; 0x1266 <init>

        case READ:
            return read(action, opt, buffer, size);

        case CLOSE:
            return close(action, opt, buffer, size);
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <close>

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    1a30:	61 30       	cpi	r22, 0x01	; 1
    1a32:	61 f4       	brne	.+24     	; 0x1a4c <dev_manager_ff3_sensors+0x4c>
    1a34:	80 91 c5 0b 	lds	r24, 0x0BC5
    1a38:	08 95       	ret

        case GET_STATUS:
            return get_status(action, opt, buffer, size);

        case SET_STATUS:
            return set_status(action, opt, buffer, size);
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	0c 94 b7 08 	jmp	0x116e	; 0x116e <set_status>

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	8c e0       	ldi	r24, 0x0C	; 12
    1a44:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
            return 0;
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	08 95       	ret
    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    return NRK_ERROR;
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}
    1a4e:	08 95       	ret

00001a50 <set_i2c_device>:

uint8_t i2c_address; // The address of the slave node to write to

void set_i2c_device(uint8_t address)
{
    i2c_address = address;
    1a50:	80 93 e0 0b 	sts	0x0BE0, r24
    1a54:	08 95       	ret

00001a56 <init_i2c>:
{

  // Set up the SCL frequency
  // To operate at a clock frequency of 1 MHz, set TWBR and TWPS to 0
  // TODO: Generalize later
  TWBR = 0x02; // TWI Bit Rate Register
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	80 93 b8 00 	sts	0x00B8, r24
  TWSR = 0x00; // TWPS is the value of the prescaler in the TWI status register (the 2 LSB)
    1a5c:	10 92 b9 00 	sts	0x00B9, r1

  // Enable the SCL/SDA
  PRR0 = PRR0 & 0x7F; // Set the MSB in PRRO to 0 (see page 378)
    1a60:	e4 e6       	ldi	r30, 0x64	; 100
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 77       	andi	r24, 0x7F	; 127
    1a68:	80 83       	st	Z, r24
  TWCR = TWCR | 0x04; // Set the TWEN bit in the TWCR (see page 196)
    1a6a:	ec eb       	ldi	r30, 0xBC	; 188
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	84 60       	ori	r24, 0x04	; 4
    1a72:	80 83       	st	Z, r24
    1a74:	08 95       	ret

00001a76 <close_i2c>:

}

void close_i2c(void)
{
   PRR0 = PRR0 & 0xFF; // Set the MSB in PRRO to 1 (see page 378)
    1a76:	e4 e6       	ldi	r30, 0x64	; 100
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 83       	st	Z, r24
   TWCR = TWCR & 0xFB; // Set the TWEN bit in the TWCR (see page 196)
    1a7e:	ec eb       	ldi	r30, 0xBC	; 188
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8b 7f       	andi	r24, 0xFB	; 251
    1a86:	80 83       	st	Z, r24
    1a88:	08 95       	ret

00001a8a <ee24xx_read_bytes>:

  uint8_t sla, twcr, n = 0;
  int rv = 0;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    1a8a:	97 70       	andi	r25, 0x07	; 7
    1a8c:	99 0f       	add	r25, r25
    1a8e:	20 91 e0 0b 	lds	r18, 0x0BE0
    1a92:	92 2b       	or	r25, r18
    1a94:	35 e6       	ldi	r19, 0x65	; 101
  restart:
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1a96:	f4 ea       	ldi	r31, 0xA4	; 164
    1a98:	a4 ea       	ldi	r26, 0xA4	; 164
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1a9a:	e4 e8       	ldi	r30, 0x84	; 132
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    1a9c:	b9 2f       	mov	r27, r25
    1a9e:	b1 60       	ori	r27, 0x01	; 1
    1aa0:	31 50       	subi	r19, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
  restart:
  if (n++ >= MAX_ITER)
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <ee24xx_read_bytes+0x1c>
    1aa4:	8e c0       	rjmp	.+284    	; 0x1bc2 <ee24xx_read_bytes+0x138>
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1aa6:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1aaa:	20 91 bc 00 	lds	r18, 0x00BC
    1aae:	27 ff       	sbrs	r18, 7
    1ab0:	fc cf       	rjmp	.-8      	; 0x1aaa <ee24xx_read_bytes+0x20>
  switch ((twst = TW_STATUS))
    1ab2:	20 91 b9 00 	lds	r18, 0x00B9
    1ab6:	28 7f       	andi	r18, 0xF8	; 248
    1ab8:	20 93 df 0b 	sts	0x0BDF, r18
    1abc:	20 31       	cpi	r18, 0x10	; 16
    1abe:	29 f0       	breq	.+10     	; 0x1aca <ee24xx_read_bytes+0x40>
    1ac0:	28 33       	cpi	r18, 0x38	; 56
    1ac2:	89 f3       	breq	.-30     	; 0x1aa6 <ee24xx_read_bytes+0x1c>
    1ac4:	28 30       	cpi	r18, 0x08	; 8
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <ee24xx_read_bytes+0x40>
    1ac8:	7c c0       	rjmp	.+248    	; 0x1bc2 <ee24xx_read_bytes+0x138>
				/* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    1aca:	90 93 bb 00 	sts	0x00BB, r25
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1ace:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1ad2:	20 91 bc 00 	lds	r18, 0x00BC
    1ad6:	27 ff       	sbrs	r18, 7
    1ad8:	fc cf       	rjmp	.-8      	; 0x1ad2 <ee24xx_read_bytes+0x48>
  switch ((twst = TW_STATUS))
    1ada:	20 91 b9 00 	lds	r18, 0x00B9
    1ade:	28 7f       	andi	r18, 0xF8	; 248
    1ae0:	20 93 df 0b 	sts	0x0BDF, r18
    1ae4:	20 32       	cpi	r18, 0x20	; 32
    1ae6:	e1 f2       	breq	.-72     	; 0x1aa0 <ee24xx_read_bytes+0x16>
    1ae8:	28 33       	cpi	r18, 0x38	; 56
    1aea:	e9 f2       	breq	.-70     	; 0x1aa6 <ee24xx_read_bytes+0x1c>
    1aec:	28 31       	cpi	r18, 0x18	; 24
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <ee24xx_read_bytes+0x68>
    1af0:	61 c0       	rjmp	.+194    	; 0x1bb4 <ee24xx_read_bytes+0x12a>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    1af2:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1af6:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1afa:	20 91 bc 00 	lds	r18, 0x00BC
    1afe:	27 ff       	sbrs	r18, 7
    1b00:	fc cf       	rjmp	.-8      	; 0x1afa <ee24xx_read_bytes+0x70>
  switch ((twst = TW_STATUS))
    1b02:	20 91 b9 00 	lds	r18, 0x00B9
    1b06:	28 7f       	andi	r18, 0xF8	; 248
    1b08:	20 93 df 0b 	sts	0x0BDF, r18
    1b0c:	20 33       	cpi	r18, 0x30	; 48
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <ee24xx_read_bytes+0x88>
    1b10:	4e c0       	rjmp	.+156    	; 0x1bae <ee24xx_read_bytes+0x124>
    1b12:	28 33       	cpi	r18, 0x38	; 56
    1b14:	41 f2       	breq	.-112    	; 0x1aa6 <ee24xx_read_bytes+0x1c>
    1b16:	28 32       	cpi	r18, 0x28	; 40
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <ee24xx_read_bytes+0x92>
    1b1a:	4c c0       	rjmp	.+152    	; 0x1bb4 <ee24xx_read_bytes+0x12a>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
    1b1c:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1b20:	20 91 bc 00 	lds	r18, 0x00BC
    1b24:	27 ff       	sbrs	r18, 7
    1b26:	fc cf       	rjmp	.-8      	; 0x1b20 <ee24xx_read_bytes+0x96>
  switch ((twst = TW_STATUS))
    1b28:	20 91 b9 00 	lds	r18, 0x00B9
    1b2c:	28 7f       	andi	r18, 0xF8	; 248
    1b2e:	20 93 df 0b 	sts	0x0BDF, r18
    1b32:	20 31       	cpi	r18, 0x10	; 16
    1b34:	29 f0       	breq	.+10     	; 0x1b40 <ee24xx_read_bytes+0xb6>
    1b36:	28 33       	cpi	r18, 0x38	; 56
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <ee24xx_read_bytes+0xb2>
    1b3a:	b5 cf       	rjmp	.-150    	; 0x1aa6 <ee24xx_read_bytes+0x1c>
    1b3c:	28 30       	cpi	r18, 0x08	; 8
    1b3e:	d1 f5       	brne	.+116    	; 0x1bb4 <ee24xx_read_bytes+0x12a>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    1b40:	b0 93 bb 00 	sts	0x00BB, r27
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1b44:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1b48:	20 91 bc 00 	lds	r18, 0x00BC
    1b4c:	27 ff       	sbrs	r18, 7
    1b4e:	fc cf       	rjmp	.-8      	; 0x1b48 <ee24xx_read_bytes+0xbe>
  switch ((twst = TW_STATUS))
    1b50:	20 91 b9 00 	lds	r18, 0x00B9
    1b54:	28 7f       	andi	r18, 0xF8	; 248
    1b56:	20 93 df 0b 	sts	0x0BDF, r18
    1b5a:	20 34       	cpi	r18, 0x40	; 64
    1b5c:	29 f0       	breq	.+10     	; 0x1b68 <ee24xx_read_bytes+0xde>
    1b5e:	28 34       	cpi	r18, 0x48	; 72
    1b60:	31 f1       	breq	.+76     	; 0x1bae <ee24xx_read_bytes+0x124>
    1b62:	28 33       	cpi	r18, 0x38	; 56
    1b64:	39 f5       	brne	.+78     	; 0x1bb4 <ee24xx_read_bytes+0x12a>
    1b66:	9f cf       	rjmp	.-194    	; 0x1aa6 <ee24xx_read_bytes+0x1c>
    1b68:	fa 01       	movw	r30, r20
    1b6a:	94 ec       	ldi	r25, 0xC4	; 196
    1b6c:	9f 01       	movw	r18, r30
    1b6e:	24 1b       	sub	r18, r20
    1b70:	35 0b       	sbc	r19, r21

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    1b72:	16 16       	cp	r1, r22
    1b74:	17 06       	cpc	r1, r23
    1b76:	04 f5       	brge	.+64     	; 0x1bb8 <ee24xx_read_bytes+0x12e>
       len > 0;
       len--)
    {
      if (len == 1)
    1b78:	61 30       	cpi	r22, 0x01	; 1
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <ee24xx_read_bytes+0xf6>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
    1b7e:	94 e8       	ldi	r25, 0x84	; 132
      TWCR = twcr;		/* clear int to start transmission */
    1b80:	90 93 bc 00 	sts	0x00BC, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1b84:	80 91 bc 00 	lds	r24, 0x00BC
    1b88:	87 ff       	sbrs	r24, 7
    1b8a:	fc cf       	rjmp	.-8      	; 0x1b84 <ee24xx_read_bytes+0xfa>
      switch ((twst = TW_STATUS))
    1b8c:	80 91 b9 00 	lds	r24, 0x00B9
    1b90:	88 7f       	andi	r24, 0xF8	; 248
    1b92:	80 93 df 0b 	sts	0x0BDF, r24
    1b96:	80 35       	cpi	r24, 0x50	; 80
    1b98:	21 f0       	breq	.+8      	; 0x1ba2 <ee24xx_read_bytes+0x118>
    1b9a:	88 35       	cpi	r24, 0x58	; 88
    1b9c:	59 f4       	brne	.+22     	; 0x1bb4 <ee24xx_read_bytes+0x12a>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
	  /* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
    1ba2:	80 91 bb 00 	lds	r24, 0x00BB
    1ba6:	81 93       	st	Z+, r24
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
       len > 0;
       len--)
    1ba8:	61 50       	subi	r22, 0x01	; 1
    1baa:	71 09       	sbc	r23, r1
    1bac:	df cf       	rjmp	.-66     	; 0x1b6c <ee24xx_read_bytes+0xe2>
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{


  uint8_t sla, twcr, n = 0;
  int rv = 0;
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <ee24xx_read_bytes+0x12e>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    1bb4:	2f ef       	ldi	r18, 0xFF	; 255
    1bb6:	3f ef       	ldi	r19, 0xFF	; 255
	  goto error;
	}
    }
  quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    1bb8:	84 e9       	ldi	r24, 0x94	; 148
    1bba:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    1bbe:	c9 01       	movw	r24, r18
    1bc0:	08 95       	ret

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    1bc6:	08 95       	ret

00001bc8 <ee24xx_write_page>:
 * actual number of data byte written.  It is up to the caller to
 * re-invoke it in order to write further data.
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
    1bc8:	9c 01       	movw	r18, r24
  int rv = 0;
  uint16_t endaddr;



  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    1bca:	68 0f       	add	r22, r24
    1bcc:	79 1f       	adc	r23, r25
    1bce:	87 60       	ori	r24, 0x07	; 7
    1bd0:	68 17       	cp	r22, r24
    1bd2:	79 07       	cpc	r23, r25
    1bd4:	18 f0       	brcs	.+6      	; 0x1bdc <ee24xx_write_page+0x14>
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	6f 5f       	subi	r22, 0xFF	; 255
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    1bdc:	83 2f       	mov	r24, r19
    1bde:	87 70       	andi	r24, 0x07	; 7
    1be0:	88 0f       	add	r24, r24
    1be2:	90 91 e0 0b 	lds	r25, 0x0BE0
    1be6:	89 2b       	or	r24, r25
    1be8:	e5 e6       	ldi	r30, 0x65	; 101
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1bea:	a4 ea       	ldi	r26, 0xA4	; 164
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1bec:	f4 e8       	ldi	r31, 0x84	; 132
    1bee:	e1 50       	subi	r30, 0x01	; 1

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);

  restart:
  if (n++ >= MAX_ITER)
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <ee24xx_write_page+0x2c>
    1bf2:	61 c0       	rjmp	.+194    	; 0x1cb6 <ee24xx_write_page+0xee>
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1bf4:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1bf8:	90 91 bc 00 	lds	r25, 0x00BC
    1bfc:	97 ff       	sbrs	r25, 7
    1bfe:	fc cf       	rjmp	.-8      	; 0x1bf8 <ee24xx_write_page+0x30>
  switch ((twst = TW_STATUS))
    1c00:	90 91 b9 00 	lds	r25, 0x00B9
    1c04:	98 7f       	andi	r25, 0xF8	; 248
    1c06:	90 93 df 0b 	sts	0x0BDF, r25
    1c0a:	90 31       	cpi	r25, 0x10	; 16
    1c0c:	29 f0       	breq	.+10     	; 0x1c18 <ee24xx_write_page+0x50>
    1c0e:	98 33       	cpi	r25, 0x38	; 56
    1c10:	89 f3       	breq	.-30     	; 0x1bf4 <ee24xx_write_page+0x2c>
    1c12:	98 30       	cpi	r25, 0x08	; 8
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <ee24xx_write_page+0x50>
    1c16:	4f c0       	rjmp	.+158    	; 0x1cb6 <ee24xx_write_page+0xee>
        return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    1c18:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1c1c:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1c20:	90 91 bc 00 	lds	r25, 0x00BC
    1c24:	97 ff       	sbrs	r25, 7
    1c26:	fc cf       	rjmp	.-8      	; 0x1c20 <ee24xx_write_page+0x58>
  switch ((twst = TW_STATUS))
    1c28:	90 91 b9 00 	lds	r25, 0x00B9
    1c2c:	98 7f       	andi	r25, 0xF8	; 248
    1c2e:	90 93 df 0b 	sts	0x0BDF, r25
    1c32:	90 32       	cpi	r25, 0x20	; 32
    1c34:	e1 f2       	breq	.-72     	; 0x1bee <ee24xx_write_page+0x26>
    1c36:	98 33       	cpi	r25, 0x38	; 56
    1c38:	e9 f2       	breq	.-70     	; 0x1bf4 <ee24xx_write_page+0x2c>
    1c3a:	98 31       	cpi	r25, 0x18	; 24
    1c3c:	a9 f5       	brne	.+106    	; 0x1ca8 <ee24xx_write_page+0xe0>

    default:
        goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    1c3e:	20 93 bb 00 	sts	0x00BB, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1c42:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1c46:	90 91 bc 00 	lds	r25, 0x00BC
    1c4a:	97 ff       	sbrs	r25, 7
    1c4c:	fc cf       	rjmp	.-8      	; 0x1c46 <ee24xx_write_page+0x7e>
  switch ((twst = TW_STATUS))
    1c4e:	90 91 b9 00 	lds	r25, 0x00B9
    1c52:	98 7f       	andi	r25, 0xF8	; 248
    1c54:	90 93 df 0b 	sts	0x0BDF, r25
    1c58:	90 33       	cpi	r25, 0x30	; 48
    1c5a:	19 f1       	breq	.+70     	; 0x1ca2 <ee24xx_write_page+0xda>
    1c5c:	98 33       	cpi	r25, 0x38	; 56
    1c5e:	51 f2       	breq	.-108    	; 0x1bf4 <ee24xx_write_page+0x2c>
    1c60:	98 32       	cpi	r25, 0x28	; 40
    1c62:	11 f5       	brne	.+68     	; 0x1ca8 <ee24xx_write_page+0xe0>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
    1c64:	62 1b       	sub	r22, r18
    1c66:	73 0b       	sbc	r23, r19
    1c68:	fa 01       	movw	r30, r20
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    1c6e:	44 e8       	ldi	r20, 0x84	; 132
    1c70:	cb 01       	movw	r24, r22
    1c72:	82 1b       	sub	r24, r18
    1c74:	93 0b       	sbc	r25, r19
    default:

        goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    1c76:	18 16       	cp	r1, r24
    1c78:	19 06       	cpc	r1, r25
    1c7a:	c4 f4       	brge	.+48     	; 0x1cac <ee24xx_write_page+0xe4>
    {
      TWDR = *buf++;
    1c7c:	81 91       	ld	r24, Z+
    1c7e:	80 93 bb 00 	sts	0x00BB, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    1c82:	40 93 bc 00 	sts	0x00BC, r20
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1c86:	80 91 bc 00 	lds	r24, 0x00BC
    1c8a:	87 ff       	sbrs	r24, 7
    1c8c:	fc cf       	rjmp	.-8      	; 0x1c86 <ee24xx_write_page+0xbe>
      switch ((twst = TW_STATUS))
    1c8e:	80 91 b9 00 	lds	r24, 0x00B9
    1c92:	88 7f       	andi	r24, 0xF8	; 248
    1c94:	80 93 df 0b 	sts	0x0BDF, r24
    1c98:	88 32       	cpi	r24, 0x28	; 40
    1c9a:	31 f4       	brne	.+12     	; 0x1ca8 <ee24xx_write_page+0xe0>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
    1c9c:	2f 5f       	subi	r18, 0xFF	; 255
    1c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca0:	e7 cf       	rjmp	.-50     	; 0x1c70 <ee24xx_write_page+0xa8>
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <ee24xx_write_page+0xe4>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    1ca8:	2f ef       	ldi	r18, 0xFF	; 255
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
	default:
            goto error;
	}
    }
  quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    1cac:	84 e9       	ldi	r24, 0x94	; 148
    1cae:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    1cb2:	c9 01       	movw	r24, r18
    1cb4:	08 95       	ret

    case TW_MT_ARB_LOST:
      goto begin;

    default:
        return -1;		/* error: not in start condition */
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    1cba:	08 95       	ret

00001cbc <ee24xx_write_bytes>:
 * function until either an error has been returned, or all bytes
 * have been written.
 */
int
ee24xx_write_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	6c 01       	movw	r12, r24
    1cce:	8b 01       	movw	r16, r22
    1cd0:	7a 01       	movw	r14, r20
  int rv, total;



  total = 0;
    1cd2:	c0 e0       	ldi	r28, 0x00	; 0
    1cd4:	d0 e0       	ldi	r29, 0x00	; 0
    {
#if DEBUG
      printf("Calling ee24xx_write_page(%d, %d, %p)",
	     eeaddr, len, buf);
#endif
      rv = ee24xx_write_page(eeaddr, len, buf);
    1cd6:	a7 01       	movw	r20, r14
    1cd8:	b8 01       	movw	r22, r16
    1cda:	c6 01       	movw	r24, r12
    1cdc:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <ee24xx_write_page>
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
    1ce0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce2:	2f ef       	ldi	r18, 0xFF	; 255
    1ce4:	92 07       	cpc	r25, r18
    1ce6:	69 f0       	breq	.+26     	; 0x1d02 <ee24xx_write_bytes+0x46>
	return -1;
      eeaddr += rv;
    1ce8:	c8 0e       	add	r12, r24
    1cea:	d9 1e       	adc	r13, r25
      len -= rv;
    1cec:	08 1b       	sub	r16, r24
    1cee:	19 0b       	sbc	r17, r25
      buf += rv;
    1cf0:	e8 0e       	add	r14, r24
    1cf2:	f9 1e       	adc	r15, r25
      total += rv;
    1cf4:	c8 0f       	add	r28, r24
    1cf6:	d9 1f       	adc	r29, r25
    }
  while (len > 0);
    1cf8:	10 16       	cp	r1, r16
    1cfa:	11 06       	cpc	r1, r17
    1cfc:	64 f3       	brlt	.-40     	; 0x1cd6 <ee24xx_write_bytes+0x1a>

  return total;
    1cfe:	ce 01       	movw	r24, r28
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <ee24xx_write_bytes+0x4a>
      rv = ee24xx_write_page(eeaddr, len, buf);
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
	return -1;
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	08 95       	ret

00001d18 <error>:

void
error(void)
{

  printf("error: TWI status %#x\n", twst);
    1d18:	80 91 df 0b 	lds	r24, 0x0BDF
    1d1c:	1f 92       	push	r1
    1d1e:	8f 93       	push	r24
    1d20:	83 e8       	ldi	r24, 0x83	; 131
    1d22:	92 e0       	ldi	r25, 0x02	; 2
    1d24:	9f 93       	push	r25
    1d26:	8f 93       	push	r24
    1d28:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	08 95       	ret

00001d36 <assemble_packet>:
 */
 
#include <assembler.h>

void assemble_packet(uint8_t *tx_buf, packet *tx)
{
    1d36:	fb 01       	movw	r30, r22
    switch(tx->type)
    1d38:	20 81       	ld	r18, Z
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	39 f1       	breq	.+78     	; 0x1d8c <assemble_packet+0x56>
    1d3e:	23 30       	cpi	r18, 0x03	; 3
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <assemble_packet+0xe>
    1d42:	4e c0       	rjmp	.+156    	; 0x1de0 <assemble_packet+0xaa>
    1d44:	21 30       	cpi	r18, 0x01	; 1
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <assemble_packet+0x14>
    1d48:	6f c0       	rjmp	.+222    	; 0x1e28 <assemble_packet+0xf2>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            sprintf (tx_buf, "[%d][%d][%d][%d][%d]", tx->type, tx->source_id, tx->seq_num, 
    1d4a:	36 81       	ldd	r19, Z+6	; 0x06
    1d4c:	3f 93       	push	r19
    1d4e:	35 81       	ldd	r19, Z+5	; 0x05
    1d50:	3f 93       	push	r19
    1d52:	34 81       	ldd	r19, Z+4	; 0x04
    1d54:	1f 92       	push	r1
    1d56:	3f 93       	push	r19
    1d58:	33 81       	ldd	r19, Z+3	; 0x03
    1d5a:	3f 93       	push	r19
    1d5c:	32 81       	ldd	r19, Z+2	; 0x02
    1d5e:	3f 93       	push	r19
    1d60:	31 81       	ldd	r19, Z+1	; 0x01
    1d62:	1f 92       	push	r1
    1d64:	3f 93       	push	r19
    1d66:	1f 92       	push	r1
    1d68:	2f 93       	push	r18
    1d6a:	2e e9       	ldi	r18, 0x9E	; 158
    1d6c:	32 e0       	ldi	r19, 0x02	; 2
    1d6e:	3f 93       	push	r19
    1d70:	2f 93       	push	r18
    1d72:	9f 93       	push	r25
    1d74:	8f 93       	push	r24
    1d76:	0e 94 56 37 	call	0x6eac	; 0x6eac <sprintf>
            tx->num_hops, tx->light_value);
            break;
    1d7a:	8d b7       	in	r24, 0x3d	; 61
    1d7c:	9e b7       	in	r25, 0x3e	; 62
    1d7e:	0e 96       	adiw	r24, 0x0e	; 14
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	9e bf       	out	0x3e, r25	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	8d bf       	out	0x3d, r24	; 61
    1d8a:	08 95       	ret
        }
        
        case MSG_NODE_NEIGHBORS:
        {
          sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d,%d,%d]", tx->type, tx->source_id, tx->seq_num, 
    1d8c:	33 85       	ldd	r19, Z+11	; 0x0b
    1d8e:	1f 92       	push	r1
    1d90:	3f 93       	push	r19
    1d92:	32 85       	ldd	r19, Z+10	; 0x0a
    1d94:	1f 92       	push	r1
    1d96:	3f 93       	push	r19
    1d98:	31 85       	ldd	r19, Z+9	; 0x09
    1d9a:	1f 92       	push	r1
    1d9c:	3f 93       	push	r19
    1d9e:	36 81       	ldd	r19, Z+6	; 0x06
    1da0:	3f 93       	push	r19
    1da2:	35 81       	ldd	r19, Z+5	; 0x05
    1da4:	3f 93       	push	r19
    1da6:	34 81       	ldd	r19, Z+4	; 0x04
    1da8:	1f 92       	push	r1
    1daa:	3f 93       	push	r19
    1dac:	33 81       	ldd	r19, Z+3	; 0x03
    1dae:	3f 93       	push	r19
    1db0:	32 81       	ldd	r19, Z+2	; 0x02
    1db2:	3f 93       	push	r19
    1db4:	31 81       	ldd	r19, Z+1	; 0x01
    1db6:	1f 92       	push	r1
    1db8:	3f 93       	push	r19
    1dba:	1f 92       	push	r1
    1dbc:	2f 93       	push	r18
    1dbe:	24 e6       	ldi	r18, 0x64	; 100
    1dc0:	32 e0       	ldi	r19, 0x02	; 2
    1dc2:	3f 93       	push	r19
    1dc4:	2f 93       	push	r18
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
    1dca:	0e 94 56 37 	call	0x6eac	; 0x6eac <sprintf>
          tx->num_hops, tx->light_value, tx->neighbor_table.neighbors[0].id,  tx->neighbor_table.neighbors[1].id, tx->neighbor_table.neighbors[2].id);
            break;
    1dce:	8d b7       	in	r24, 0x3d	; 61
    1dd0:	9e b7       	in	r25, 0x3e	; 62
    1dd2:	44 96       	adiw	r24, 0x14	; 20
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	9e bf       	out	0x3e, r25	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	8d bf       	out	0x3d, r24	; 61
    1dde:	08 95       	ret
        }
        
        case MSG_GATEWAY:
        {
          sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d]", tx->type, tx->source_id, tx->seq_num, 
    1de0:	37 85       	ldd	r19, Z+15	; 0x0f
    1de2:	3f 93       	push	r19
    1de4:	36 85       	ldd	r19, Z+14	; 0x0e
    1de6:	3f 93       	push	r19
    1de8:	35 85       	ldd	r19, Z+13	; 0x0d
    1dea:	3f 93       	push	r19
    1dec:	34 85       	ldd	r19, Z+12	; 0x0c
    1dee:	3f 93       	push	r19
    1df0:	34 81       	ldd	r19, Z+4	; 0x04
    1df2:	1f 92       	push	r1
    1df4:	3f 93       	push	r19
    1df6:	33 81       	ldd	r19, Z+3	; 0x03
    1df8:	3f 93       	push	r19
    1dfa:	32 81       	ldd	r19, Z+2	; 0x02
    1dfc:	3f 93       	push	r19
    1dfe:	31 81       	ldd	r19, Z+1	; 0x01
    1e00:	1f 92       	push	r1
    1e02:	3f 93       	push	r19
    1e04:	1f 92       	push	r1
    1e06:	2f 93       	push	r18
    1e08:	2a e9       	ldi	r18, 0x9A	; 154
    1e0a:	32 e0       	ldi	r19, 0x02	; 2
    1e0c:	3f 93       	push	r19
    1e0e:	2f 93       	push	r18
    1e10:	9f 93       	push	r25
    1e12:	8f 93       	push	r24
    1e14:	0e 94 56 37 	call	0x6eac	; 0x6eac <sprintf>
          tx->num_hops, tx->sensor_sample_rate, tx->neighbor_update_rate);
            break;
    1e18:	8d b7       	in	r24, 0x3d	; 61
    1e1a:	9e b7       	in	r25, 0x3e	; 62
    1e1c:	40 96       	adiw	r24, 0x10	; 16
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	9e bf       	out	0x3e, r25	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	8d bf       	out	0x3d, r24	; 61
    1e28:	08 95       	ret

00001e2a <in_light_pool>:
 * @param lp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_light_pool(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	21 91       	ld	r18, Z+
    1e2e:	cf 01       	movw	r24, r30
    1e30:	3e 2f       	mov	r19, r30
    1e32:	38 1b       	sub	r19, r24
    1e34:	32 17       	cp	r19, r18
    1e36:	28 f4       	brcc	.+10     	; 0x1e42 <in_light_pool+0x18>
        if(lp->node_id[i] == node_address) {
    1e38:	31 91       	ld	r19, Z+
    1e3a:	36 13       	cpse	r19, r22
    1e3c:	f9 cf       	rjmp	.-14     	; 0x1e30 <in_light_pool+0x6>
            return 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    1e40:	08 95       	ret
    for(uint8_t i = 0; i < lp->size; i++) {
        if(lp->node_id[i] == node_address) {
            return 1;
        }
    }
    return -1;
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	08 95       	ret

00001e46 <get_light_pool_index>:
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    1e46:	fc 01       	movw	r30, r24
    1e48:	81 91       	ld	r24, Z+
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	98 17       	cp	r25, r24
    1e4e:	39 f0       	breq	.+14     	; 0x1e5e <get_light_pool_index+0x18>
        if(lp->node_id[i] == node_address) {
    1e50:	21 91       	ld	r18, Z+
    1e52:	26 13       	cpse	r18, r22
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <get_light_pool_index+0x14>
            return i;
    1e56:	89 2f       	mov	r24, r25
    1e58:	08 95       	ret
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    1e5a:	9f 5f       	subi	r25, 0xFF	; 255
    1e5c:	f7 cf       	rjmp	.-18     	; 0x1e4c <get_light_pool_index+0x6>
        if(lp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1e60:	08 95       	ret

00001e62 <add_to_light_pool>:
 * @param lp - light pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param light_value - light value of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    if((lp->size < MAX_POOL) && (in_light_pool(lp, node_address) == -1)) {
    1e6e:	fc 01       	movw	r30, r24
    1e70:	c0 81       	ld	r28, Z
    1e72:	c8 30       	cpi	r28, 0x08	; 8
    1e74:	d8 f4       	brcc	.+54     	; 0x1eac <add_to_light_pool+0x4a>
    1e76:	7a 01       	movw	r14, r20
    1e78:	d6 2f       	mov	r29, r22
    1e7a:	8c 01       	movw	r16, r24
    1e7c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <in_light_pool>
    1e80:	8f 3f       	cpi	r24, 0xFF	; 255
    1e82:	a1 f4       	brne	.+40     	; 0x1eac <add_to_light_pool+0x4a>
        uint8_t index = lp->size;
        lp->size++;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	8c 0f       	add	r24, r28
    1e88:	f8 01       	movw	r30, r16
    1e8a:	80 83       	st	Z, r24
        lp->node_id[index] = node_address;
    1e8c:	2c 2f       	mov	r18, r28
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	d1 83       	std	Z+1, r29	; 0x01
        lp->light_values[index] = light_value;
    1e96:	2e 5f       	subi	r18, 0xFE	; 254
    1e98:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	f1 82       	std	Z+1, r15	; 0x01
    1ea6:	e0 82       	st	Z, r14
        return 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <add_to_light_pool+0x4c>
    }
    return -1;
    1eac:	8f ef       	ldi	r24, 0xFF	; 255
}
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	08 95       	ret

00001ebc <update_light_pool>:
 * @param lp - light pool to be updated
 * @param node_address - node whose light value needs updating
 * @param light_value - new light value of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	ec 01       	movw	r28, r24
    1ec8:	16 2f       	mov	r17, r22
    1eca:	7a 01       	movw	r14, r20
    int8_t in_lp, index;
    
    in_lp = in_light_pool(lp, node_address);
    1ecc:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <in_light_pool>
    if(in_lp == -1) {
    1ed0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed2:	31 f4       	brne	.+12     	; 0x1ee0 <update_light_pool+0x24>
        add_to_light_pool(lp, node_address, light_value);
    1ed4:	a7 01       	movw	r20, r14
    1ed6:	61 2f       	mov	r22, r17
    1ed8:	ce 01       	movw	r24, r28
    1eda:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <add_to_light_pool>
    1ede:	0d c0       	rjmp	.+26     	; 0x1efa <update_light_pool+0x3e>
        return 1;
    } else {
        index = get_light_pool_index(lp, node_address);
    1ee0:	61 2f       	mov	r22, r17
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <get_light_pool_index>
        if(index >= 0) {
    1ee8:	87 fd       	sbrc	r24, 7
    1eea:	09 c0       	rjmp	.+18     	; 0x1efe <update_light_pool+0x42>
            lp->light_values[index] = light_value;
    1eec:	92 e0       	ldi	r25, 0x02	; 2
    1eee:	89 02       	muls	r24, r25
    1ef0:	c0 0d       	add	r28, r0
    1ef2:	d1 1d       	adc	r29, r1
    1ef4:	11 24       	eor	r1, r1
    1ef6:	fd 82       	std	Y+5, r15	; 0x05
    1ef8:	ec 82       	std	Y+4, r14	; 0x04
            return 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <update_light_pool+0x44>
        }        
    }

    return -1;
    1efe:	8f ef       	ldi	r24, 0xFF	; 255
}
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	08 95       	ret

00001f0c <print_light_pool>:

void print_light_pool(light_pool_t *lp) {
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	8c 01       	movw	r16, r24
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    1f18:	80 ec       	ldi	r24, 0xC0	; 192
    1f1a:	92 e0       	ldi	r25, 0x02	; 2
    1f1c:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
    for(uint8_t k = 0; k < lp->size; k++) {
    1f20:	c0 e0       	ldi	r28, 0x00	; 0
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    1f22:	93 eb       	ldi	r25, 0xB3	; 179
    1f24:	e9 2e       	mov	r14, r25
    1f26:	92 e0       	ldi	r25, 0x02	; 2
    1f28:	f9 2e       	mov	r15, r25
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	80 81       	ld	r24, Z
    1f2e:	c8 17       	cp	r28, r24
    1f30:	f0 f4       	brcc	.+60     	; 0x1f6e <print_light_pool+0x62>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    1f32:	2c 2f       	mov	r18, r28
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	f9 01       	movw	r30, r18
    1f38:	32 96       	adiw	r30, 0x02	; 2
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e0 0f       	add	r30, r16
    1f40:	f1 1f       	adc	r31, r17
    1f42:	81 81       	ldd	r24, Z+1	; 0x01
    1f44:	8f 93       	push	r24
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 93       	push	r24
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	e2 0f       	add	r30, r18
    1f4e:	f3 1f       	adc	r31, r19
    1f50:	81 81       	ldd	r24, Z+1	; 0x01
    1f52:	1f 92       	push	r1
    1f54:	8f 93       	push	r24
    1f56:	ff 92       	push	r15
    1f58:	ef 92       	push	r14
    1f5a:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    1f5e:	cf 5f       	subi	r28, 0xFF	; 255
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	de cf       	rjmp	.-68     	; 0x1f2a <print_light_pool+0x1e>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    }
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	08 95       	ret

00001f7a <init_neighbor_table>:

/*** NEIGHBOR TABLE OPERATIONS ***/
/**
 * init_neighbor_table
 */
void init_neighbor_table(neighbor_table_t *nt) {
    1f7a:	fc 01       	movw	r30, r24
    nt->size = 0;
    1f7c:	10 82       	st	Z, r1

    // need to actually force id values to 0 because when we send our the neighbor packet...
    // we send all 4 items. Therefore an old value can still be in [3] but the size could be 2.
    for(uint8_t i = 0; i < MAX_NEIGHBOR_TABLE; i++)
    {
        nt->neighbors[i].id = 0;
    1f7e:	12 82       	std	Z+2, r1	; 0x02
    1f80:	13 82       	std	Z+3, r1	; 0x03
    1f82:	14 82       	std	Z+4, r1	; 0x04
    1f84:	08 95       	ret

00001f86 <in_neighbor_table>:
 * @param nt - neighbor table to search
 * @param node_address - node to search for
 * @returns '1' if node is found, '-1' otherwise
 */
int8_t in_neighbor_table(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    1f86:	fc 01       	movw	r30, r24
    1f88:	20 81       	ld	r18, Z
    1f8a:	02 96       	adiw	r24, 0x02	; 2
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	3e 2f       	mov	r19, r30
    1f90:	38 1b       	sub	r19, r24
    1f92:	32 17       	cp	r19, r18
    1f94:	28 f4       	brcc	.+10     	; 0x1fa0 <in_neighbor_table+0x1a>
        if(nt->neighbors[i].id == node_address) {
    1f96:	31 91       	ld	r19, Z+
    1f98:	36 13       	cpse	r19, r22
    1f9a:	f9 cf       	rjmp	.-14     	; 0x1f8e <in_neighbor_table+0x8>
            return 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    1f9e:	08 95       	ret
    for(uint8_t i = 0; i < nt->size; i++) {
        if(nt->neighbors[i].id == node_address) {
            return 1;
        }
    }
    return -1;
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	08 95       	ret

00001fa4 <add_neighbor>:
}

void add_neighbor(neighbor_table_t *nt, neighbor_t new_neighbor) {
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	ec 01       	movw	r28, r24
    1fac:	16 2f       	mov	r17, r22
    uint8_t in_nt = in_neighbor_table(nt, new_neighbor.id);
    printf("neighbor table size %d\r\n", nt->size);
    1fae:	88 81       	ld	r24, Y
    1fb0:	1f 92       	push	r1
    1fb2:	8f 93       	push	r24
    1fb4:	8c ec       	ldi	r24, 0xCC	; 204
    1fb6:	92 e0       	ldi	r25, 0x02	; 2
    1fb8:	9f 93       	push	r25
    1fba:	8f 93       	push	r24
    1fbc:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    if((nt->size < MAX_NEIGHBOR_TABLE) && (in_nt != -1))
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	88 81       	ld	r24, Y
    1fca:	83 30       	cpi	r24, 0x03	; 3
    1fcc:	a0 f4       	brcc	.+40     	; 0x1ff6 <add_neighbor+0x52>
    {
        printf("new neighbor %d\r\n", new_neighbor.id);
    1fce:	1f 92       	push	r1
    1fd0:	1f 93       	push	r17
    1fd2:	85 ee       	ldi	r24, 0xE5	; 229
    1fd4:	92 e0       	ldi	r25, 0x02	; 2
    1fd6:	9f 93       	push	r25
    1fd8:	8f 93       	push	r24
    1fda:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
        nt->neighbors[nt->size] = new_neighbor;
    1fde:	88 81       	ld	r24, Y
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e8 0f       	add	r30, r24
    1fe4:	f1 1d       	adc	r31, r1
    1fe6:	12 83       	std	Z+2, r17	; 0x02
        nt->size++;
    1fe8:	88 81       	ld	r24, Y
    1fea:	8f 5f       	subi	r24, 0xFF	; 255
    1fec:	88 83       	st	Y, r24
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    }
}
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	08 95       	ret

00001ffe <get_neighbor_table_index>:
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    1ffe:	fc 01       	movw	r30, r24
    2000:	20 81       	ld	r18, Z
    2002:	32 96       	adiw	r30, 0x02	; 2
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	82 17       	cp	r24, r18
    2008:	29 f0       	breq	.+10     	; 0x2014 <get_neighbor_table_index+0x16>
        if(nt->neighbors[i].id == node_address) {
    200a:	91 91       	ld	r25, Z+
    200c:	96 17       	cp	r25, r22
    200e:	19 f0       	breq	.+6      	; 0x2016 <get_neighbor_table_index+0x18>
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    2010:	8f 5f       	subi	r24, 0xFF	; 255
    2012:	f9 cf       	rjmp	.-14     	; 0x2006 <get_neighbor_table_index+0x8>
        if(nt->neighbors[i].id == node_address) {
            return i;
        }
    }
    return -1;
    2014:	8f ef       	ldi	r24, 0xFF	; 255
}
    2016:	08 95       	ret

00002018 <print_neighbor_table>:
}*

/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    2018:	af 92       	push	r10
    201a:	bf 92       	push	r11
    201c:	df 92       	push	r13
    201e:	ef 92       	push	r14
    2020:	ff 92       	push	r15
    2022:	0f 93       	push	r16
    2024:	1f 93       	push	r17
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	ec 01       	movw	r28, r24
    printf("[");
    202c:	8b e5       	ldi	r24, 0x5B	; 91
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 20 37 	call	0x6e40	; 0x6e40 <putchar>
    for (uint8_t i=0; i < nt->size; i++) {
    2034:	d1 2c       	mov	r13, r1
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
    2036:	07 ef       	ldi	r16, 0xF7	; 247
    2038:	12 e0       	ldi	r17, 0x02	; 2
        if (i < (nt->size-1))
            printf(", ");
    203a:	8a ef       	ldi	r24, 0xFA	; 250
    203c:	e8 2e       	mov	r14, r24
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	f8 2e       	mov	r15, r24
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    2042:	88 81       	ld	r24, Y
    2044:	d8 16       	cp	r13, r24
    2046:	f8 f4       	brcc	.+62     	; 0x2086 <print_neighbor_table+0x6e>
        uint8_t node_id = nt->neighbors[i].id;
    2048:	ad 2c       	mov	r10, r13
    204a:	b1 2c       	mov	r11, r1
    204c:	fe 01       	movw	r30, r28
    204e:	ea 0d       	add	r30, r10
    2050:	fb 1d       	adc	r31, r11
        printf("%d", node_id);
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	1f 92       	push	r1
    2056:	8f 93       	push	r24
    2058:	1f 93       	push	r17
    205a:	0f 93       	push	r16
    205c:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
        if (i < (nt->size-1))
    2060:	28 81       	ld	r18, Y
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	21 50       	subi	r18, 0x01	; 1
    2066:	31 09       	sbc	r19, r1
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	a2 16       	cp	r10, r18
    2072:	b3 06       	cpc	r11, r19
    2074:	34 f4       	brge	.+12     	; 0x2082 <print_neighbor_table+0x6a>
            printf(", ");
    2076:	ff 92       	push	r15
    2078:	ef 92       	push	r14
    207a:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    2082:	d3 94       	inc	r13
    2084:	de cf       	rjmp	.-68     	; 0x2042 <print_neighbor_table+0x2a>
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    2086:	8a ed       	ldi	r24, 0xDA	; 218
    2088:	93 e0       	ldi	r25, 0x03	; 3
}
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	ff 90       	pop	r15
    2094:	ef 90       	pop	r14
    2096:	df 90       	pop	r13
    2098:	bf 90       	pop	r11
    209a:	af 90       	pop	r10
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    209c:	0c 94 26 37 	jmp	0x6e4c	; 0x6e4c <puts>

000020a0 <in_neighbor_graph>:
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    20a0:	fc 01       	movw	r30, r24
    20a2:	30 81       	ld	r19, Z
    20a4:	02 96       	adiw	r24, 0x02	; 2
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	23 17       	cp	r18, r19
    20aa:	41 f0       	breq	.+16     	; 0x20bc <in_neighbor_graph+0x1c>
    20ac:	05 96       	adiw	r24, 0x05	; 5
    20ae:	fc 01       	movw	r30, r24
    20b0:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    20b2:	40 81       	ld	r20, Z
    20b4:	46 17       	cp	r20, r22
    20b6:	21 f0       	breq	.+8      	; 0x20c0 <in_neighbor_graph+0x20>
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	f6 cf       	rjmp	.-20     	; 0x20a8 <in_neighbor_graph+0x8>
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
        }
    }
    return -1;
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	08 95       	ret
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    20c2:	08 95       	ret

000020c4 <get_neighbor_graph_index>:
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    20c4:	fc 01       	movw	r30, r24
    20c6:	40 81       	ld	r20, Z
    20c8:	9c 01       	movw	r18, r24
    20ca:	2e 5f       	subi	r18, 0xFE	; 254
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	84 17       	cp	r24, r20
    20d2:	49 f0       	breq	.+18     	; 0x20e6 <get_neighbor_graph_index+0x22>
    20d4:	2b 5f       	subi	r18, 0xFB	; 251
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
    20d8:	f9 01       	movw	r30, r18
    20da:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    20dc:	90 81       	ld	r25, Z
    20de:	96 17       	cp	r25, r22
    20e0:	19 f0       	breq	.+6      	; 0x20e8 <get_neighbor_graph_index+0x24>
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	f5 cf       	rjmp	.-22     	; 0x20d0 <get_neighbor_graph_index+0xc>
        if(ng->neighbor_tables[i].origin == node_address) {
            return i;
        }
    }
    return -1;
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
}
    20e8:	08 95       	ret

000020ea <add_to_neighbor_graph>:
 *
 * @param ng - neighbor graph to which to add
 * @param new_table - new neighbor table to add to the neighbor graph
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	dc 01       	movw	r26, r24
    20f0:	fb 01       	movw	r30, r22
    //printf("     add %d to neighbor_graph\r\n", nt->origin);
    if((ng->size < MAX_GRAPH)) {
    20f2:	8c 91       	ld	r24, X
    20f4:	88 30       	cpi	r24, 0x08	; 8
    20f6:	00 f5       	brcc	.+64     	; 0x2138 <add_to_neighbor_graph+0x4e>
        uint8_t index = ng->size;
        ng->size++;
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	98 0f       	add	r25, r24
    20fc:	9c 93       	st	X, r25
        ng->neighbor_tables[index].size = nt->size;
    20fe:	90 81       	ld	r25, Z
    2100:	45 e0       	ldi	r20, 0x05	; 5
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	ed 01       	movw	r28, r26
    2108:	48 9f       	mul	r20, r24
    210a:	c0 0d       	add	r28, r0
    210c:	d1 1d       	adc	r29, r1
    210e:	11 24       	eor	r1, r1
    2110:	99 83       	std	Y+1, r25	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    2112:	81 81       	ldd	r24, Z+1	; 0x01
    2114:	8a 83       	std	Y+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    2116:	82 81       	ldd	r24, Z+2	; 0x02
    2118:	8b 83       	std	Y+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    211a:	83 81       	ldd	r24, Z+3	; 0x03
    211c:	8c 83       	std	Y+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    211e:	54 81       	ldd	r21, Z+4	; 0x04
    2120:	2f 5f       	subi	r18, 0xFF	; 255
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	42 9f       	mul	r20, r18
    2126:	c0 01       	movw	r24, r0
    2128:	43 9f       	mul	r20, r19
    212a:	90 0d       	add	r25, r0
    212c:	11 24       	eor	r1, r1
    212e:	a8 0f       	add	r26, r24
    2130:	b9 1f       	adc	r27, r25
    2132:	5c 93       	st	X, r21
        return 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	01 c0       	rjmp	.+2      	; 0x213a <add_to_neighbor_graph+0x50>
    }
    return -1;
    2138:	8f ef       	ldi	r24, 0xFF	; 255
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <update_neighbor_graph>:
 * 
 * @param ng - neighbor graph to update
 * @param nt - neighbor table to update
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    2140:	ff 92       	push	r15
    2142:	0f 93       	push	r16
    2144:	1f 93       	push	r17
    2146:	cf 93       	push	r28
    2148:	df 93       	push	r29
    214a:	8c 01       	movw	r16, r24
    214c:	eb 01       	movw	r28, r22
    int8_t in_ng, index;
    
    in_ng = in_neighbor_graph(ng, nt->origin);
    214e:	f9 80       	ldd	r15, Y+1	; 0x01
    2150:	6f 2d       	mov	r22, r15
    2152:	0e 94 50 10 	call	0x20a0	; 0x20a0 <in_neighbor_graph>
    if(in_ng == -1) {
    2156:	8f 3f       	cpi	r24, 0xFF	; 255
    2158:	29 f4       	brne	.+10     	; 0x2164 <update_neighbor_graph+0x24>
        add_to_neighbor_graph(ng, nt);
    215a:	be 01       	movw	r22, r28
    215c:	c8 01       	movw	r24, r16
    215e:	0e 94 75 10 	call	0x20ea	; 0x20ea <add_to_neighbor_graph>
        return 1;
    2162:	24 c0       	rjmp	.+72     	; 0x21ac <update_neighbor_graph+0x6c>
    } else {
        index = get_neighbor_graph_index(ng, nt->origin);
    2164:	6f 2d       	mov	r22, r15
    2166:	c8 01       	movw	r24, r16
    2168:	0e 94 62 10 	call	0x20c4	; 0x20c4 <get_neighbor_graph_index>
        ng->neighbor_tables[index].size = nt->size;
    216c:	28 2f       	mov	r18, r24
    216e:	33 27       	eor	r19, r19
    2170:	27 fd       	sbrc	r18, 7
    2172:	30 95       	com	r19
    2174:	88 81       	ld	r24, Y
    2176:	45 e0       	ldi	r20, 0x05	; 5
    2178:	42 9f       	mul	r20, r18
    217a:	f0 01       	movw	r30, r0
    217c:	43 9f       	mul	r20, r19
    217e:	f0 0d       	add	r31, r0
    2180:	11 24       	eor	r1, r1
    2182:	e0 0f       	add	r30, r16
    2184:	f1 1f       	adc	r31, r17
    2186:	81 83       	std	Z+1, r24	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	82 83       	std	Z+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	83 83       	std	Z+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	84 83       	std	Z+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    2194:	5c 81       	ldd	r21, Y+4	; 0x04
    2196:	2f 5f       	subi	r18, 0xFF	; 255
    2198:	3f 4f       	sbci	r19, 0xFF	; 255
    219a:	42 9f       	mul	r20, r18
    219c:	c0 01       	movw	r24, r0
    219e:	43 9f       	mul	r20, r19
    21a0:	90 0d       	add	r25, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	f8 01       	movw	r30, r16
    21a6:	e8 0f       	add	r30, r24
    21a8:	f9 1f       	adc	r31, r25
    21aa:	50 83       	st	Z, r21
        return 1;
    }
    return -1;
}
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	08 95       	ret

000021ba <print_neighbor_graph>:
 * print_neighbor_graph:
 *  - print the current neighbor information
 * 
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	8c 01       	movw	r16, r24
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    21c8:	8a ed       	ldi	r24, 0xDA	; 218
    21ca:	92 e0       	ldi	r25, 0x02	; 2
    21cc:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
    for(uint8_t i = 0; i < ng->size; i++) {
    21d0:	c0 e0       	ldi	r28, 0x00	; 0
        nt = ng->neighbor_tables[i];
    21d2:	d5 e0       	ldi	r29, 0x05	; 5
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    21d4:	8d ef       	ldi	r24, 0xFD	; 253
    21d6:	e8 2e       	mov	r14, r24
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	f8 2e       	mov	r15, r24
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    21dc:	f8 01       	movw	r30, r16
    21de:	80 81       	ld	r24, Z
    21e0:	c8 17       	cp	r28, r24
    21e2:	00 f5       	brcc	.+64     	; 0x2224 <print_neighbor_graph+0x6a>
        nt = ng->neighbor_tables[i];
    21e4:	f8 01       	movw	r30, r16
    21e6:	dc 9f       	mul	r29, r28
    21e8:	e0 0d       	add	r30, r0
    21ea:	f1 1d       	adc	r31, r1
    21ec:	11 24       	eor	r1, r1
    21ee:	31 96       	adiw	r30, 0x01	; 1
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    21f0:	84 81       	ldd	r24, Z+4	; 0x04
    21f2:	1f 92       	push	r1
    21f4:	8f 93       	push	r24
    21f6:	83 81       	ldd	r24, Z+3	; 0x03
    21f8:	1f 92       	push	r1
    21fa:	8f 93       	push	r24
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	1f 92       	push	r1
    2200:	8f 93       	push	r24
    2202:	81 81       	ldd	r24, Z+1	; 0x01
    2204:	1f 92       	push	r1
    2206:	8f 93       	push	r24
    2208:	ff 92       	push	r15
    220a:	ef 92       	push	r14
    220c:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    2210:	cf 5f       	subi	r28, 0xFF	; 255
    2212:	8d b7       	in	r24, 0x3d	; 61
    2214:	9e b7       	in	r25, 0x3e	; 62
    2216:	0a 96       	adiw	r24, 0x0a	; 10
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	9e bf       	out	0x3e, r25	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	8d bf       	out	0x3d, r24	; 61
    2222:	dc cf       	rjmp	.-72     	; 0x21dc <print_neighbor_graph+0x22>
        nt = ng->neighbor_tables[i];
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    }
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	08 95       	ret

00002232 <print_packet>:
 */
 
#include <parser.h>

void print_packet(packet *p)
{
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	ec 01       	movw	r28, r24
    printf("msg_type: %d\r\n", p->type);
    2238:	88 81       	ld	r24, Y
    223a:	1f 92       	push	r1
    223c:	8f 93       	push	r24
    223e:	84 e2       	ldi	r24, 0x24	; 36
    2240:	93 e0       	ldi	r25, 0x03	; 3
    2242:	9f 93       	push	r25
    2244:	8f 93       	push	r24
    2246:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    printf("source_id: %d\r\n", p->source_id);
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	1f 92       	push	r1
    224e:	8f 93       	push	r24
    2250:	83 e3       	ldi	r24, 0x33	; 51
    2252:	93 e0       	ldi	r25, 0x03	; 3
    2254:	9f 93       	push	r25
    2256:	8f 93       	push	r24
    2258:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    printf("seq_num: %d\r\n", p->seq_num);
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	8f 93       	push	r24
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	8f 93       	push	r24
    2264:	83 e4       	ldi	r24, 0x43	; 67
    2266:	93 e0       	ldi	r25, 0x03	; 3
    2268:	9f 93       	push	r25
    226a:	8f 93       	push	r24
    226c:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    printf("num_hops: %d\r\n", p->num_hops);
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	1f 92       	push	r1
    2274:	8f 93       	push	r24
    2276:	81 e5       	ldi	r24, 0x51	; 81
    2278:	93 e0       	ldi	r25, 0x03	; 3
    227a:	9f 93       	push	r25
    227c:	8f 93       	push	r24
    227e:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    switch(p->type)
    2282:	8d b7       	in	r24, 0x3d	; 61
    2284:	9e b7       	in	r25, 0x3e	; 62
    2286:	40 96       	adiw	r24, 0x10	; 16
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	9e bf       	out	0x3e, r25	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	8d bf       	out	0x3d, r24	; 61
    2292:	88 81       	ld	r24, Y
    2294:	82 30       	cpi	r24, 0x02	; 2
    2296:	a1 f0       	breq	.+40     	; 0x22c0 <print_packet+0x8e>
    2298:	83 30       	cpi	r24, 0x03	; 3
    229a:	a1 f1       	breq	.+104    	; 0x2304 <print_packet+0xd2>
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	09 f0       	breq	.+2      	; 0x22a2 <print_packet+0x70>
    22a0:	4d c0       	rjmp	.+154    	; 0x233c <print_packet+0x10a>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            printf("light value: %d\r\n", p->light_value);
    22a2:	8e 81       	ldd	r24, Y+6	; 0x06
    22a4:	8f 93       	push	r24
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	8f 93       	push	r24
    22aa:	80 e6       	ldi	r24, 0x60	; 96
    22ac:	93 e0       	ldi	r25, 0x03	; 3
    22ae:	9f 93       	push	r25
    22b0:	8f 93       	push	r24
    22b2:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
            break;
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	3e c0       	rjmp	.+124    	; 0x233c <print_packet+0x10a>
        }
        case MSG_NODE_NEIGHBORS:
        {
            printf("light value: %d\r\n", p->light_value);
    22c0:	8e 81       	ldd	r24, Y+6	; 0x06
    22c2:	8f 93       	push	r24
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	8f 93       	push	r24
    22c8:	80 e6       	ldi	r24, 0x60	; 96
    22ca:	93 e0       	ldi	r25, 0x03	; 3
    22cc:	9f 93       	push	r25
    22ce:	8f 93       	push	r24
    22d0:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
            printf("neighbors: [%d,%d,%d]\r\n",
    22d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    22d6:	1f 92       	push	r1
    22d8:	8f 93       	push	r24
    22da:	8a 85       	ldd	r24, Y+10	; 0x0a
    22dc:	1f 92       	push	r1
    22de:	8f 93       	push	r24
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	1f 92       	push	r1
    22e4:	8f 93       	push	r24
    22e6:	82 e7       	ldi	r24, 0x72	; 114
    22e8:	93 e0       	ldi	r25, 0x03	; 3
    22ea:	9f 93       	push	r25
    22ec:	8f 93       	push	r24
    22ee:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
                p->neighbor_table.neighbors[0].id,
                p->neighbor_table.neighbors[1].id,
                p->neighbor_table.neighbors[2].id);
            break;
    22f2:	8d b7       	in	r24, 0x3d	; 61
    22f4:	9e b7       	in	r25, 0x3e	; 62
    22f6:	0c 96       	adiw	r24, 0x0c	; 12
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	9e bf       	out	0x3e, r25	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	8d bf       	out	0x3d, r24	; 61
    2302:	1c c0       	rjmp	.+56     	; 0x233c <print_packet+0x10a>
        }
        case MSG_GATEWAY:
        {
            printf("sample_rate: %d\r\n", p->sensor_sample_rate);
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	8f 93       	push	r24
    2308:	8c 85       	ldd	r24, Y+12	; 0x0c
    230a:	8f 93       	push	r24
    230c:	8a e8       	ldi	r24, 0x8A	; 138
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	9f 93       	push	r25
    2312:	8f 93       	push	r24
    2314:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
            printf("neighbor_rate: %d\r\n", p->neighbor_update_rate);
    2318:	8f 85       	ldd	r24, Y+15	; 0x0f
    231a:	8f 93       	push	r24
    231c:	8e 85       	ldd	r24, Y+14	; 0x0e
    231e:	8f 93       	push	r24
    2320:	8c e9       	ldi	r24, 0x9C	; 156
    2322:	93 e0       	ldi	r25, 0x03	; 3
    2324:	9f 93       	push	r25
    2326:	8f 93       	push	r24
    2328:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
            break;
    232c:	8d b7       	in	r24, 0x3d	; 61
    232e:	9e b7       	in	r25, 0x3e	; 62
    2330:	08 96       	adiw	r24, 0x08	; 8
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	9e bf       	out	0x3e, r25	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	8d bf       	out	0x3d, r24	; 61
        }
    }
}
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	08 95       	ret

00002342 <parse_comma>:

// start_index is index in input of location after opening bracket.
uint8_t parse_comma(char *output, char *input, uint8_t start_index)
{
    2342:	cf 93       	push	r28
    memset(output, 0, MAX_NEIGHBOR_BUF_SIZE);
    2344:	fc 01       	movw	r30, r24
    2346:	10 82       	st	Z, r1
    2348:	11 82       	std	Z+1, r1	; 0x01
    234a:	12 82       	std	Z+2, r1	; 0x02
    234c:	13 82       	std	Z+3, r1	; 0x03
    uint8_t pos = start_index;
    234e:	c4 2f       	mov	r28, r20
    2350:	2c 2f       	mov	r18, r28
    2352:	24 1b       	sub	r18, r20
    uint8_t item_length = 0;
    while(pos < MAX_BUF_SIZE && input[pos] != ',' && input[pos] != '\0')
    2354:	c8 31       	cpi	r28, 0x18	; 24
    2356:	50 f4       	brcc	.+20     	; 0x236c <parse_comma+0x2a>
    2358:	fb 01       	movw	r30, r22
    235a:	ec 0f       	add	r30, r28
    235c:	f1 1d       	adc	r31, r1
    235e:	30 81       	ld	r19, Z
    2360:	3c 32       	cpi	r19, 0x2C	; 44
    2362:	21 f0       	breq	.+8      	; 0x236c <parse_comma+0x2a>
    2364:	33 23       	and	r19, r19
    2366:	11 f0       	breq	.+4      	; 0x236c <parse_comma+0x2a>
    {
        item_length ++;
        pos ++;
    2368:	cf 5f       	subi	r28, 0xFF	; 255
    236a:	f2 cf       	rjmp	.-28     	; 0x2350 <parse_comma+0xe>
    }
    //memcpy(output, input + start_index, item_length);
    strncpy(output, input + start_index, item_length);
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	64 0f       	add	r22, r20
    2370:	71 1d       	adc	r23, r1
    2372:	a9 01       	movw	r20, r18
    2374:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <strncpy>
    return pos;
}
    2378:	8c 2f       	mov	r24, r28
    237a:	cf 91       	pop	r28
    237c:	08 95       	ret

0000237e <parse_bracket>:

// start_index is index in input of location after opening bracket.
uint8_t parse_bracket(char *output, char *input, uint8_t start_index)
{
    237e:	cf 93       	push	r28
    memset(output, 0, MAX_BUF_SIZE);
    2380:	28 e1       	ldi	r18, 0x18	; 24
    2382:	fc 01       	movw	r30, r24
    2384:	11 92       	st	Z+, r1
    2386:	2a 95       	dec	r18
    2388:	e9 f7       	brne	.-6      	; 0x2384 <parse_bracket+0x6>
    uint8_t pos = start_index;
    238a:	c4 2f       	mov	r28, r20
    238c:	2c 2f       	mov	r18, r28
    238e:	24 1b       	sub	r18, r20
    uint8_t item_length = 0;
    while(pos < MAX_BUF_SIZE && input[pos] != ']' && input[pos] != '\0')
    2390:	c8 31       	cpi	r28, 0x18	; 24
    2392:	50 f4       	brcc	.+20     	; 0x23a8 <parse_bracket+0x2a>
    2394:	fb 01       	movw	r30, r22
    2396:	ec 0f       	add	r30, r28
    2398:	f1 1d       	adc	r31, r1
    239a:	30 81       	ld	r19, Z
    239c:	3d 35       	cpi	r19, 0x5D	; 93
    239e:	21 f0       	breq	.+8      	; 0x23a8 <parse_bracket+0x2a>
    23a0:	33 23       	and	r19, r19
    23a2:	11 f0       	breq	.+4      	; 0x23a8 <parse_bracket+0x2a>
    {
        item_length ++;
        pos ++;
    23a4:	cf 5f       	subi	r28, 0xFF	; 255
    23a6:	f2 cf       	rjmp	.-28     	; 0x238c <parse_bracket+0xe>
    }
    //memcpy(output, input + start_index, item_length);
    strncpy(output, input + start_index, item_length);
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	64 0f       	add	r22, r20
    23ac:	71 1d       	adc	r23, r1
    23ae:	a9 01       	movw	r20, r18
    23b0:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <strncpy>
    return pos;
}
    23b4:	8c 2f       	mov	r24, r28
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

000023ba <parse_msg>:
src - the pointer to the received data buffer
len - the length of the received data buffer
msg_type - the type of message
*/
void parse_msg(packet *parsed_packet, char *src, uint8_t len)
{
    23ba:	df 92       	push	r13
    23bc:	ef 92       	push	r14
    23be:	ff 92       	push	r15
    23c0:	0f 93       	push	r16
    23c2:	1f 93       	push	r17
    23c4:	cf 93       	push	r28
    23c6:	df 93       	push	r29
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
    23cc:	69 97       	sbiw	r28, 0x19	; 25
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	8c 01       	movw	r16, r24
    23da:	7b 01       	movw	r14, r22
    uint8_t pos = 0;
    uint8_t item_length = 0;
    char temp_buf[MAX_BUF_SIZE];
    msg_type type = src[1] - '0';
    23dc:	fb 01       	movw	r30, r22
    23de:	21 81       	ldd	r18, Z+1	; 0x01
    23e0:	20 53       	subi	r18, 0x30	; 48
    parsed_packet->type = type;
    23e2:	fc 01       	movw	r30, r24
    23e4:	20 83       	st	Z, r18
    
    // parse source id
    parsed_packet->source_id = (src[4] - '0');
    23e6:	fb 01       	movw	r30, r22
    23e8:	84 81       	ldd	r24, Z+4	; 0x04
    23ea:	80 53       	subi	r24, 0x30	; 48
    23ec:	f8 01       	movw	r30, r16
    23ee:	81 83       	std	Z+1, r24	; 0x01

    // parse sequence number
    pos = 6;
    item_length = 0;
    pos = parse_bracket(temp_buf, src, 7);
    23f0:	47 e0       	ldi	r20, 0x07	; 7
    23f2:	ce 01       	movw	r24, r28
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	29 8f       	std	Y+25, r18	; 0x19
    23f8:	0e 94 bf 11 	call	0x237e	; 0x237e <parse_bracket>
    23fc:	d8 2e       	mov	r13, r24
    parsed_packet->seq_num = atoi(temp_buf);
    23fe:	ce 01       	movw	r24, r28
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	0e 94 40 36 	call	0x6c80	; 0x6c80 <atoi>
    2406:	f8 01       	movw	r30, r16
    2408:	93 83       	std	Z+3, r25	; 0x03
    240a:	82 83       	std	Z+2, r24	; 0x02

    // parse num_hops
    pos += 2; // skip ']['
    240c:	42 e0       	ldi	r20, 0x02	; 2
    240e:	4d 0d       	add	r20, r13
    pos = parse_bracket(temp_buf, src, pos);
    2410:	b7 01       	movw	r22, r14
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	0e 94 bf 11 	call	0x237e	; 0x237e <parse_bracket>
    241a:	d8 2e       	mov	r13, r24
    parsed_packet->num_hops = atoi(temp_buf);
    241c:	ce 01       	movw	r24, r28
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	0e 94 40 36 	call	0x6c80	; 0x6c80 <atoi>
    2424:	f8 01       	movw	r30, r16
    2426:	84 83       	std	Z+4, r24	; 0x04
    
    switch(type)
    2428:	29 8d       	ldd	r18, Y+25	; 0x19
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	a1 f0       	breq	.+40     	; 0x2456 <parse_msg+0x9c>
    242e:	23 30       	cpi	r18, 0x03	; 3
    2430:	e9 f1       	breq	.+122    	; 0x24ac <parse_msg+0xf2>
    2432:	21 30       	cpi	r18, 0x01	; 1
    2434:	09 f0       	breq	.+2      	; 0x2438 <parse_msg+0x7e>
    2436:	58 c0       	rjmp	.+176    	; 0x24e8 <parse_msg+0x12e>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            // parse light value
            pos += 2; // skip
    2438:	42 e0       	ldi	r20, 0x02	; 2
    243a:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    243c:	b7 01       	movw	r22, r14
    243e:	ce 01       	movw	r24, r28
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	0e 94 bf 11 	call	0x237e	; 0x237e <parse_bracket>
            parsed_packet->light_value = atoi(temp_buf);
    2446:	ce 01       	movw	r24, r28
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	0e 94 40 36 	call	0x6c80	; 0x6c80 <atoi>
    244e:	f8 01       	movw	r30, r16
    2450:	96 83       	std	Z+6, r25	; 0x06
    2452:	85 83       	std	Z+5, r24	; 0x05
            break;
    2454:	4d c0       	rjmp	.+154    	; 0x24f0 <parse_msg+0x136>
        }

        case MSG_NODE_NEIGHBORS:
        {
            // parse light value
            pos += 2; // skip
    2456:	42 e0       	ldi	r20, 0x02	; 2
    2458:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    245a:	b7 01       	movw	r22, r14
    245c:	ce 01       	movw	r24, r28
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	0e 94 bf 11 	call	0x237e	; 0x237e <parse_bracket>
    2464:	d8 2e       	mov	r13, r24
            parsed_packet->light_value = atoi(temp_buf);
    2466:	ce 01       	movw	r24, r28
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	0e 94 40 36 	call	0x6c80	; 0x6c80 <atoi>
    246e:	f8 01       	movw	r30, r16
    2470:	96 83       	std	Z+6, r25	; 0x06
    2472:	85 83       	std	Z+5, r24	; 0x05

            // parse neighbor table
            pos += 2;
    2474:	d3 94       	inc	r13
    2476:	d3 94       	inc	r13
    2478:	d8 01       	movw	r26, r16
    247a:	19 96       	adiw	r26, 0x09	; 9
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	8d 2d       	mov	r24, r13
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	f9 01       	movw	r30, r18
    2486:	e8 0f       	add	r30, r24
    2488:	f9 1f       	adc	r31, r25
    248a:	ee 0d       	add	r30, r14
    248c:	ff 1d       	adc	r31, r15
            for(uint8_t i = 0; i < 3; i++)
            {
                uint8_t neighbor_id = src[pos+i*2] - '0';
    248e:	40 81       	ld	r20, Z
    2490:	40 53       	subi	r20, 0x30	; 48
                parsed_packet->neighbor_table.neighbors[i].id = neighbor_id;
    2492:	4d 93       	st	X+, r20
                parsed_packet->neighbor_table.size += 1;
    2494:	f8 01       	movw	r30, r16
    2496:	47 81       	ldd	r20, Z+7	; 0x07
    2498:	4f 5f       	subi	r20, 0xFF	; 255
    249a:	47 83       	std	Z+7, r20	; 0x07
    249c:	2e 5f       	subi	r18, 0xFE	; 254
    249e:	3f 4f       	sbci	r19, 0xFF	; 255
            pos = parse_bracket(temp_buf, src, pos);
            parsed_packet->light_value = atoi(temp_buf);

            // parse neighbor table
            pos += 2;
            for(uint8_t i = 0; i < 3; i++)
    24a0:	26 30       	cpi	r18, 0x06	; 6
    24a2:	31 05       	cpc	r19, r1
    24a4:	79 f7       	brne	.-34     	; 0x2484 <parse_msg+0xca>
            {
                uint8_t neighbor_id = src[pos+i*2] - '0';
                parsed_packet->neighbor_table.neighbors[i].id = neighbor_id;
                parsed_packet->neighbor_table.size += 1;
            }
            parsed_packet->neighbor_table.origin = parsed_packet->source_id;
    24a6:	81 81       	ldd	r24, Z+1	; 0x01
    24a8:	80 87       	std	Z+8, r24	; 0x08
            break;
    24aa:	22 c0       	rjmp	.+68     	; 0x24f0 <parse_msg+0x136>
        }

        case MSG_GATEWAY:
        {
            // parse sample_rate
            pos += 2;
    24ac:	42 e0       	ldi	r20, 0x02	; 2
    24ae:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    24b0:	b7 01       	movw	r22, r14
    24b2:	ce 01       	movw	r24, r28
    24b4:	01 96       	adiw	r24, 0x01	; 1
    24b6:	0e 94 bf 11 	call	0x237e	; 0x237e <parse_bracket>
    24ba:	d8 2e       	mov	r13, r24
           // printf("sample_rate string %s \r\n", temp_buf);
            parsed_packet->sensor_sample_rate = atoi(temp_buf);
    24bc:	ce 01       	movw	r24, r28
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	0e 94 40 36 	call	0x6c80	; 0x6c80 <atoi>
    24c4:	f8 01       	movw	r30, r16
    24c6:	95 87       	std	Z+13, r25	; 0x0d
    24c8:	84 87       	std	Z+12, r24	; 0x0c
            
            // parse neighbor_rate
            pos += 2; // skip ']['
    24ca:	42 e0       	ldi	r20, 0x02	; 2
    24cc:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    24ce:	b7 01       	movw	r22, r14
    24d0:	ce 01       	movw	r24, r28
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	0e 94 bf 11 	call	0x237e	; 0x237e <parse_bracket>
            //printf("neighbor_rate string %s \r\n", temp_buf);
            parsed_packet->neighbor_update_rate = atoi(temp_buf);
    24d8:	ce 01       	movw	r24, r28
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	0e 94 40 36 	call	0x6c80	; 0x6c80 <atoi>
    24e0:	f8 01       	movw	r30, r16
    24e2:	97 87       	std	Z+15, r25	; 0x0f
    24e4:	86 87       	std	Z+14, r24	; 0x0e
            
            break;
    24e6:	04 c0       	rjmp	.+8      	; 0x24f0 <parse_msg+0x136>
        }

        default:{printf("invalid type\r\n");}
    24e8:	80 eb       	ldi	r24, 0xB0	; 176
    24ea:	93 e0       	ldi	r25, 0x03	; 3
    24ec:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <puts>
    }
    24f0:	69 96       	adiw	r28, 0x19	; 25
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	df 90       	pop	r13
    250a:	08 95       	ret

0000250c <sample_light>:
 * Kedar Amladi // kamladi. Daniel Santoro // ddsantor. Adam Selevan // aselevan.
 */
 
#include <sample_sensor.h>

uint16_t sample_light(){
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	00 d0       	rcall	.+0      	; 0x2514 <sample_light+0x8>
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    uint8_t fd;
    int8_t val;
    uint16_t light;
    
    // Open ADC device as read 
    fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
    2518:	65 e0       	ldi	r22, 0x05	; 5
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <nrk_open>
    2520:	18 2f       	mov	r17, r24
    if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
    
    // state actions
    val = nrk_set_status(fd,SENSOR_SELECT,LIGHT);
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <nrk_set_status>
    val = nrk_read(fd,&light,2);
    252a:	42 e0       	ldi	r20, 0x02	; 2
    252c:	be 01       	movw	r22, r28
    252e:	6f 5f       	subi	r22, 0xFF	; 255
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	81 2f       	mov	r24, r17
    2534:	0e 94 76 2e 	call	0x5cec	; 0x5cec <nrk_read>
    //printf("...light/threshold=%d/%d\r\n",light, light_threshold);
    
    nrk_close(fd); // power down sensor for power savings
    2538:	81 2f       	mov	r24, r17
    253a:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <nrk_close>
    
    return light;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	08 95       	ret

0000254e <in_sequence_pool>:
 * @param sp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_sequence_pool(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    254e:	fc 01       	movw	r30, r24
    2550:	21 91       	ld	r18, Z+
    2552:	cf 01       	movw	r24, r30
    2554:	3e 2f       	mov	r19, r30
    2556:	38 1b       	sub	r19, r24
    2558:	32 17       	cp	r19, r18
    255a:	28 f4       	brcc	.+10     	; 0x2566 <in_sequence_pool+0x18>
        if(sp->node_id[i] == node_address) {
    255c:	31 91       	ld	r19, Z+
    255e:	36 13       	cpse	r19, r22
    2560:	f9 cf       	rjmp	.-14     	; 0x2554 <in_sequence_pool+0x6>
            return (int8_t)1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return (int8_t)-1;
}
    2564:	08 95       	ret
    for(uint8_t i = 0; i < sp->size; i++) {
        if(sp->node_id[i] == node_address) {
            return (int8_t)1;
        }
    }
    return (int8_t)-1;
    2566:	8f ef       	ldi	r24, 0xFF	; 255
    2568:	08 95       	ret

0000256a <get_sequence_pool_index>:
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    256a:	fc 01       	movw	r30, r24
    256c:	81 91       	ld	r24, Z+
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	98 17       	cp	r25, r24
    2572:	39 f0       	breq	.+14     	; 0x2582 <get_sequence_pool_index+0x18>
        if(sp->node_id[i] == node_address) {
    2574:	21 91       	ld	r18, Z+
    2576:	26 13       	cpse	r18, r22
    2578:	02 c0       	rjmp	.+4      	; 0x257e <get_sequence_pool_index+0x14>
            return i;
    257a:	89 2f       	mov	r24, r25
    257c:	08 95       	ret
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    257e:	9f 5f       	subi	r25, 0xFF	; 255
    2580:	f7 cf       	rjmp	.-18     	; 0x2570 <get_sequence_pool_index+0x6>
        if(sp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    2582:	8f ef       	ldi	r24, 0xFF	; 255
}
    2584:	08 95       	ret

00002586 <get_sequence_number>:

uint16_t get_sequence_number(sequence_pool_t *sp, uint8_t node_address) {
    2586:	cf 93       	push	r28
    2588:	df 93       	push	r29
    258a:	ec 01       	movw	r28, r24
    int8_t index = get_sequence_pool_index(sp, node_address);
    258c:	0e 94 b5 12 	call	0x256a	; 0x256a <get_sequence_pool_index>
    if(index != -1) {
    2590:	8f 3f       	cpi	r24, 0xFF	; 255
    2592:	41 f0       	breq	.+16     	; 0x25a4 <get_sequence_number+0x1e>
        return sp->seq_nums[index];
    2594:	92 e0       	ldi	r25, 0x02	; 2
    2596:	89 02       	muls	r24, r25
    2598:	c0 0d       	add	r28, r0
    259a:	d1 1d       	adc	r29, r1
    259c:	11 24       	eor	r1, r1
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	9d 81       	ldd	r25, Y+5	; 0x05
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <get_sequence_number+0x22>
    }
    return 0;
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
}
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	08 95       	ret

000025ae <add_to_sequence_pool>:
 * @param sp - sequence pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param seq_num - sequence number of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    25ae:	ef 92       	push	r14
    25b0:	ff 92       	push	r15
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    if((sp->size < MAX_POOL) && (in_sequence_pool(sp, node_address) == -1)) {
    25ba:	fc 01       	movw	r30, r24
    25bc:	c0 81       	ld	r28, Z
    25be:	c8 30       	cpi	r28, 0x08	; 8
    25c0:	d8 f4       	brcc	.+54     	; 0x25f8 <add_to_sequence_pool+0x4a>
    25c2:	7a 01       	movw	r14, r20
    25c4:	d6 2f       	mov	r29, r22
    25c6:	8c 01       	movw	r16, r24
    25c8:	0e 94 a7 12 	call	0x254e	; 0x254e <in_sequence_pool>
    25cc:	8f 3f       	cpi	r24, 0xFF	; 255
    25ce:	a1 f4       	brne	.+40     	; 0x25f8 <add_to_sequence_pool+0x4a>
        uint8_t index = sp->size;
        sp->size++;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	8c 0f       	add	r24, r28
    25d4:	f8 01       	movw	r30, r16
    25d6:	80 83       	st	Z, r24
        sp->node_id[index] = node_address;
    25d8:	2c 2f       	mov	r18, r28
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	d1 83       	std	Z+1, r29	; 0x01
        sp->seq_nums[index] = seq_num;
    25e2:	2e 5f       	subi	r18, 0xFE	; 254
    25e4:	3f 4f       	sbci	r19, 0xFF	; 255
    25e6:	22 0f       	add	r18, r18
    25e8:	33 1f       	adc	r19, r19
    25ea:	f8 01       	movw	r30, r16
    25ec:	e2 0f       	add	r30, r18
    25ee:	f3 1f       	adc	r31, r19
    25f0:	f1 82       	std	Z+1, r15	; 0x01
    25f2:	e0 82       	st	Z, r14
        return 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <add_to_sequence_pool+0x4c>
    }
    return -1;
    25f8:	8f ef       	ldi	r24, 0xFF	; 255
}
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	08 95       	ret

00002608 <update_sequence_pool>:
 * @param sp - sequence pool to be updated
 * @param node_address - node whose sequence number needs updating
 * @param seq_num - new sequence number of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	ec 01       	movw	r28, r24
    2612:	8a 01       	movw	r16, r20
    int8_t index = get_sequence_pool_index(sp, node_address);
    2614:	0e 94 b5 12 	call	0x256a	; 0x256a <get_sequence_pool_index>
    if(index >= 0) {
    2618:	87 fd       	sbrc	r24, 7
    261a:	09 c0       	rjmp	.+18     	; 0x262e <update_sequence_pool+0x26>
        sp->seq_nums[index] = seq_num;
    261c:	92 e0       	ldi	r25, 0x02	; 2
    261e:	89 02       	muls	r24, r25
    2620:	c0 0d       	add	r28, r0
    2622:	d1 1d       	adc	r29, r1
    2624:	11 24       	eor	r1, r1
    2626:	1d 83       	std	Y+5, r17	; 0x05
    2628:	0c 83       	std	Y+4, r16	; 0x04
        return 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <update_sequence_pool+0x28>
    }
    return -1;
    262e:	8f ef       	ldi	r24, 0xFF	; 255
}
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	1f 91       	pop	r17
    2636:	0f 91       	pop	r16
    2638:	08 95       	ret

0000263a <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    263a:	90 91 41 01 	lds	r25, 0x0141
    263e:	9f 71       	andi	r25, 0x1F	; 31
    2640:	9f 31       	cpi	r25, 0x1F	; 31
    2642:	d9 f3       	breq	.-10     	; 0x263a <rf_cmd>
		continue;
	TRX_STATE = cmd;
    2644:	80 93 42 01 	sts	0x0142, r24
    2648:	08 95       	ret

0000264a <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	80 93 e7 0b 	sts	0x0BE7, r24
    2650:	08 95       	ret

00002652 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    2652:	10 92 e7 0b 	sts	0x0BE7, r1
    2656:	08 95       	ret

00002658 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    2658:	80 91 41 01 	lds	r24, 0x0141
    265c:	8f 71       	andi	r24, 0x1F	; 31
    265e:	8f 31       	cpi	r24, 0x1F	; 31
    2660:	d9 f3       	breq	.-10     	; 0x2658 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    2662:	80 91 41 01 	lds	r24, 0x0141
    2666:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    2668:	e1 f0       	breq	.+56     	; 0x26a2 <rf_power_down+0x4a>
    266a:	8f 30       	cpi	r24, 0x0F	; 15
    266c:	d1 f0       	breq	.+52     	; 0x26a2 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    266e:	80 91 41 01 	lds	r24, 0x0141
    2672:	8f 71       	andi	r24, 0x1F	; 31
    2674:	88 30       	cpi	r24, 0x08	; 8
    2676:	31 f4       	brne	.+12     	; 0x2684 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    2678:	80 91 39 01 	lds	r24, 0x0139
    267c:	82 60       	ori	r24, 0x02	; 2
    267e:	80 93 39 01 	sts	0x0139, r24
    2682:	0b c0       	rjmp	.+22     	; 0x269a <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    2684:	88 e0       	ldi	r24, 0x08	; 8
    2686:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    268a:	80 91 41 01 	lds	r24, 0x0141
    268e:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    2690:	88 30       	cpi	r24, 0x08	; 8
    2692:	d9 f7       	brne	.-10     	; 0x268a <rf_power_down+0x32>
    2694:	f1 cf       	rjmp	.-30     	; 0x2678 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    2696:	8f 30       	cpi	r24, 0x0F	; 15
    2698:	21 f0       	breq	.+8      	; 0x26a2 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    269a:	80 91 41 01 	lds	r24, 0x0141
    269e:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    26a0:	d1 f7       	brne	.-12     	; 0x2696 <rf_power_down+0x3e>
    26a2:	08 95       	ret

000026a4 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    26a4:	80 91 41 01 	lds	r24, 0x0141
    26a8:	8f 71       	andi	r24, 0x1F	; 31
    26aa:	8f 31       	cpi	r24, 0x1F	; 31
    26ac:	d9 f3       	breq	.-10     	; 0x26a4 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    26ae:	80 91 41 01 	lds	r24, 0x0141
    26b2:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    26b4:	11 f0       	breq	.+4      	; 0x26ba <rf_power_up+0x16>
    26b6:	8f 30       	cpi	r24, 0x0F	; 15
    26b8:	51 f4       	brne	.+20     	; 0x26ce <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    26ba:	80 91 39 01 	lds	r24, 0x0139
    26be:	8d 7f       	andi	r24, 0xFD	; 253
    26c0:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    26c4:	80 91 41 01 	lds	r24, 0x0141
    26c8:	8f 71       	andi	r24, 0x1F	; 31
    26ca:	88 30       	cpi	r24, 0x08	; 8
    26cc:	d9 f7       	brne	.-10     	; 0x26c4 <rf_power_up+0x20>
    26ce:	08 95       	ret

000026d0 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    26d0:	e5 e4       	ldi	r30, 0x45	; 69
    26d2:	f1 e0       	ldi	r31, 0x01	; 1
    26d4:	90 81       	ld	r25, Z
    26d6:	90 7f       	andi	r25, 0xF0	; 240
    26d8:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    26da:	90 81       	ld	r25, Z
    26dc:	8f 70       	andi	r24, 0x0F	; 15
    26de:	98 2b       	or	r25, r24
    26e0:	90 83       	st	Z, r25
    26e2:	08 95       	ret

000026e4 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    26e4:	e7 e5       	ldi	r30, 0x57	; 87
    26e6:	f1 e0       	ldi	r31, 0x01	; 1
    26e8:	80 81       	ld	r24, Z
    26ea:	8d 7f       	andi	r24, 0xFD	; 253
    26ec:	80 83       	st	Z, r24
    26ee:	08 95       	ret

000026f0 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    26f0:	e7 e5       	ldi	r30, 0x57	; 87
    26f2:	f1 e0       	ldi	r31, 0x01	; 1
    26f4:	80 81       	ld	r24, Z
    26f6:	82 60       	ori	r24, 0x02	; 2
    26f8:	80 83       	st	Z, r24
    26fa:	08 95       	ret

000026fc <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    26fc:	ee e6       	ldi	r30, 0x6E	; 110
    26fe:	f1 e0       	ldi	r31, 0x01	; 1
    2700:	80 81       	ld	r24, Z
    2702:	8f 7e       	andi	r24, 0xEF	; 239
    2704:	80 83       	st	Z, r24
    2706:	08 95       	ret

00002708 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    2708:	ee e6       	ldi	r30, 0x6E	; 110
    270a:	f1 e0       	ldi	r31, 0x01	; 1
    270c:	80 81       	ld	r24, Z
    270e:	80 61       	ori	r24, 0x10	; 16
    2710:	80 83       	st	Z, r24
    2712:	08 95       	ret

00002714 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    2714:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    2718:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    271c:	90 93 f1 0b 	sts	0x0BF1, r25
    2720:	80 93 f0 0b 	sts	0x0BF0, r24
    2724:	08 95       	ret

00002726 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    2726:	90 93 eb 0b 	sts	0x0BEB, r25
    272a:	80 93 ea 0b 	sts	0x0BEA, r24
	PHY_CC_CCA &= ~(0x1F);
    272e:	e8 e4       	ldi	r30, 0x48	; 72
    2730:	f1 e0       	ldi	r31, 0x01	; 1
    2732:	80 81       	ld	r24, Z
    2734:	80 7e       	andi	r24, 0xE0	; 224
    2736:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    2738:	80 81       	ld	r24, Z
    273a:	68 2b       	or	r22, r24
    273c:	60 83       	st	Z, r22
    273e:	08 95       	ret

00002740 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    2740:	90 93 44 05 	sts	0x0544, r25
    2744:	80 93 43 05 	sts	0x0543, r24
    2748:	08 95       	ret

0000274a <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    274a:	90 93 42 05 	sts	0x0542, r25
    274e:	80 93 41 05 	sts	0x0541, r24
    2752:	08 95       	ret

00002754 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	fc 01       	movw	r30, r24
    275e:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    2760:	80 e2       	ldi	r24, 0x20	; 32
    2762:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    2766:	80 ec       	ldi	r24, 0xC0	; 192
    2768:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    276c:	60 62       	ori	r22, 0x20	; 32
    276e:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    2772:	85 ec       	ldi	r24, 0xC5	; 197
    2774:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    2778:	87 ea       	ldi	r24, 0xA7	; 167
    277a:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    277e:	80 e8       	ldi	r24, 0x80	; 128
    2780:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    2784:	20 93 60 01 	sts	0x0160, r18
    2788:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    278c:	40 93 62 01 	sts	0x0162, r20
    2790:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    2794:	c6 e4       	ldi	r28, 0x46	; 70
    2796:	d1 e0       	ldi	r29, 0x01	; 1
    2798:	08 81       	ld	r16, Y
    279a:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    279c:	98 81       	ld	r25, Y
    279e:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    27a0:	30 2f       	mov	r19, r16
    27a2:	32 95       	swap	r19
    27a4:	36 95       	lsr	r19
    27a6:	37 70       	andi	r19, 0x07	; 7
    27a8:	60 e4       	ldi	r22, 0x40	; 64
    27aa:	36 9f       	mul	r19, r22
    27ac:	80 01       	movw	r16, r0
    27ae:	11 24       	eor	r1, r1
    27b0:	22 95       	swap	r18
    27b2:	26 95       	lsr	r18
    27b4:	23 70       	andi	r18, 0x03	; 3
    27b6:	62 2f       	mov	r22, r18
    27b8:	60 2b       	or	r22, r16
    27ba:	82 95       	swap	r24
    27bc:	86 95       	lsr	r24
    27be:	83 70       	andi	r24, 0x03	; 3
    27c0:	70 e1       	ldi	r23, 0x10	; 16
    27c2:	87 9f       	mul	r24, r23
    27c4:	90 01       	movw	r18, r0
    27c6:	11 24       	eor	r1, r1
    27c8:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    27ca:	92 95       	swap	r25
    27cc:	96 95       	lsr	r25
    27ce:	93 70       	andi	r25, 0x03	; 3
    27d0:	84 e0       	ldi	r24, 0x04	; 4
    27d2:	98 9f       	mul	r25, r24
    27d4:	b0 01       	movw	r22, r0
    27d6:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    27d8:	62 2b       	or	r22, r18
    27da:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    27de:	88 81       	ld	r24, Y
    27e0:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    27e2:	92 95       	swap	r25
    27e4:	96 95       	lsr	r25
    27e6:	93 70       	andi	r25, 0x03	; 3
    27e8:	39 2f       	mov	r19, r25
    27ea:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    27ec:	98 2f       	mov	r25, r24
    27ee:	92 95       	swap	r25
    27f0:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    27f2:	93 2b       	or	r25, r19
    27f4:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    27f8:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    27fc:	8f ef       	ldi	r24, 0xFF	; 255
    27fe:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    2802:	ca ee       	ldi	r28, 0xEA	; 234
    2804:	db e0       	ldi	r29, 0x0B	; 11
    2806:	f9 83       	std	Y+1, r31	; 0x01
    2808:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    280a:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    280c:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    280e:	5d 83       	std	Y+5, r21	; 0x05
    2810:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    2812:	bf 83       	std	Y+7, r27	; 0x07
    2814:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    2816:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	80 93 0c 0c 	sts	0x0C0C, r24
	rx_ready = 0;
    281e:	10 92 2b 0c 	sts	0x0C2B, r1
	tx_done = 0;
    2822:	10 92 fb 0b 	sts	0x0BFB, r1

	use_glossy = 0;
    2826:	10 92 e7 0b 	sts	0x0BE7, r1

} // rf_init() 
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	08 95       	ret

00002834 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    2834:	86 e1       	ldi	r24, 0x16	; 22
    2836:	0c 94 1d 13 	jmp	0x263a	; 0x263a <rf_cmd>

0000283a <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    283a:	86 e1       	ldi	r24, 0x16	; 22
    283c:	0c 94 1d 13 	jmp	0x263a	; 0x263a <rf_cmd>

00002840 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    2840:	88 e0       	ldi	r24, 0x08	; 8
    2842:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>
	rx_ready = 0;
    2846:	10 92 2b 0c 	sts	0x0C2B, r1
    284a:	08 95       	ret

0000284c <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    284c:	3f 92       	push	r3
    284e:	4f 92       	push	r4
    2850:	5f 92       	push	r5
    2852:	6f 92       	push	r6
    2854:	7f 92       	push	r7
    2856:	8f 92       	push	r8
    2858:	9f 92       	push	r9
    285a:	af 92       	push	r10
    285c:	bf 92       	push	r11
    285e:	cf 92       	push	r12
    2860:	df 92       	push	r13
    2862:	ef 92       	push	r14
    2864:	ff 92       	push	r15
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    2870:	80 91 0c 0c 	lds	r24, 0x0C0C
    2874:	81 11       	cpse	r24, r1
    2876:	02 c0       	rjmp	.+4      	; 0x287c <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    2878:	8f ef       	ldi	r24, 0xFF	; 255
    287a:	26 c1       	rjmp	.+588    	; 0x2ac8 <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    287c:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    287e:	80 91 ec 0b 	lds	r24, 0x0BEC
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	80 93 ec 0b 	sts	0x0BEC, r24
	machead->fcf = fcf;
    2888:	90 91 81 01 	lds	r25, 0x0181
    288c:	90 7e       	andi	r25, 0xE0	; 224
    288e:	91 60       	ori	r25, 0x01	; 1
    2890:	20 fb       	bst	r18, 0
    2892:	95 f9       	bld	r25, 5
    2894:	9f 73       	andi	r25, 0x3F	; 63
    2896:	90 64       	ori	r25, 0x40	; 64
    2898:	90 93 81 01 	sts	0x0181, r25
    289c:	88 e8       	ldi	r24, 0x88	; 136
    289e:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    28a2:	80 91 e7 0b 	lds	r24, 0x0BE7
    28a6:	88 23       	and	r24, r24
    28a8:	d1 f0       	breq	.+52     	; 0x28de <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    28aa:	8f ef       	ldi	r24, 0xFF	; 255
    28ac:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    28b0:	8a ea       	ldi	r24, 0xAA	; 170
    28b2:	9a ea       	ldi	r25, 0xAA	; 170
    28b4:	90 93 89 01 	sts	0x0189, r25
    28b8:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	9f ef       	ldi	r25, 0xFF	; 255
    28c0:	90 93 87 01 	sts	0x0187, r25
    28c4:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    28c8:	20 91 63 01 	lds	r18, 0x0163
    28cc:	80 91 62 01 	lds	r24, 0x0162
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	92 2b       	or	r25, r18
    28d4:	90 93 85 01 	sts	0x0185, r25
    28d8:	80 93 84 01 	sts	0x0184, r24
    28dc:	1e c0       	rjmp	.+60     	; 0x291a <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    28de:	80 91 ec 0b 	lds	r24, 0x0BEC
    28e2:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    28e6:	80 91 61 01 	lds	r24, 0x0161
    28ea:	20 91 60 01 	lds	r18, 0x0160
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	38 2b       	or	r19, r24
    28f2:	30 93 89 01 	sts	0x0189, r19
    28f6:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    28fa:	88 81       	ld	r24, Y
    28fc:	99 81       	ldd	r25, Y+1	; 0x01
    28fe:	90 93 87 01 	sts	0x0187, r25
    2902:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    2906:	80 91 63 01 	lds	r24, 0x0163
    290a:	20 91 62 01 	lds	r18, 0x0162
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	38 2b       	or	r19, r24
    2912:	30 93 85 01 	sts	0x0185, r19
    2916:	20 93 84 01 	sts	0x0184, r18
    291a:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    291c:	4a 81       	ldd	r20, Y+2	; 0x02
    291e:	55 27       	eor	r21, r21
    2920:	47 fd       	sbrc	r20, 7
    2922:	50 95       	com	r21
    2924:	6b 81       	ldd	r22, Y+3	; 0x03
    2926:	7c 81       	ldd	r23, Y+4	; 0x04
    2928:	8a e8       	ldi	r24, 0x8A	; 138
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	85 5f       	subi	r24, 0xF5	; 245
    2934:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    2938:	80 91 41 01 	lds	r24, 0x0141
    293c:	98 2f       	mov	r25, r24
    293e:	9f 71       	andi	r25, 0x1F	; 31
    2940:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    2942:	9f ef       	ldi	r25, 0xFF	; 255
    2944:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    2946:	92 30       	cpi	r25, 0x02	; 2
    2948:	b8 f3       	brcs	.-18     	; 0x2938 <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    294a:	91 e1       	ldi	r25, 0x11	; 17
    294c:	39 16       	cp	r3, r25
    294e:	a1 f3       	breq	.-24     	; 0x2938 <rf_tx_packet_repeat+0xec>
    2950:	92 e1       	ldi	r25, 0x12	; 18
    2952:	39 16       	cp	r3, r25
    2954:	89 f3       	breq	.-30     	; 0x2938 <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    2956:	9f e1       	ldi	r25, 0x1F	; 31
    2958:	39 16       	cp	r3, r25
    295a:	71 f3       	breq	.-36     	; 0x2938 <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    295c:	98 ef       	ldi	r25, 0xF8	; 248
    295e:	93 0d       	add	r25, r3
    2960:	92 30       	cpi	r25, 0x02	; 2
    2962:	20 f0       	brcs	.+8      	; 0x296c <rf_tx_packet_repeat+0x120>
    2964:	8f 70       	andi	r24, 0x0F	; 15
    2966:	86 30       	cpi	r24, 0x06	; 6
    2968:	09 f0       	breq	.+2      	; 0x296c <rf_tx_packet_repeat+0x120>
    296a:	86 cf       	rjmp	.-244    	; 0x2878 <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    296c:	86 e1       	ldi	r24, 0x16	; 22
    296e:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    2972:	8d 81       	ldd	r24, Y+5	; 0x05
    2974:	81 11       	cpse	r24, r1
    2976:	0a c0       	rjmp	.+20     	; 0x298c <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    2978:	89 e0       	ldi	r24, 0x09	; 9
    297a:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>
	if(pRTI->ackRequest)
    297e:	8e 81       	ldd	r24, Y+6	; 0x06
    2980:	88 23       	and	r24, r24
    2982:	91 f0       	breq	.+36     	; 0x29a8 <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    2984:	89 e1       	ldi	r24, 0x19	; 25
    2986:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>
    298a:	0e c0       	rjmp	.+28     	; 0x29a8 <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    298c:	80 91 48 01 	lds	r24, 0x0148
    2990:	80 68       	ori	r24, 0x80	; 128
    2992:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    2996:	80 91 41 01 	lds	r24, 0x0141
    299a:	87 ff       	sbrs	r24, 7
    299c:	fc cf       	rjmp	.-8      	; 0x2996 <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    299e:	80 91 41 01 	lds	r24, 0x0141
    29a2:	86 ff       	sbrs	r24, 6
    29a4:	69 cf       	rjmp	.-302    	; 0x2878 <rf_tx_packet_repeat+0x2c>
    29a6:	e8 cf       	rjmp	.-48     	; 0x2978 <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    29a8:	61 14       	cp	r6, r1
    29aa:	71 04       	cpc	r7, r1
    29ac:	a9 f1       	breq	.+106    	; 0x2a18 <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    29ae:	83 ef       	ldi	r24, 0xF3	; 243
    29b0:	9b e0       	ldi	r25, 0x0B	; 11
    29b2:	0e 94 76 28 	call	0x50ec	; 0x50ec <nrk_time_get>
		target_t.secs = curr_t.secs;
    29b6:	80 91 f3 0b 	lds	r24, 0x0BF3
    29ba:	90 91 f4 0b 	lds	r25, 0x0BF4
    29be:	a0 91 f5 0b 	lds	r26, 0x0BF5
    29c2:	b0 91 f6 0b 	lds	r27, 0x0BF6
    29c6:	80 93 0d 0c 	sts	0x0C0D, r24
    29ca:	90 93 0e 0c 	sts	0x0C0E, r25
    29ce:	a0 93 0f 0c 	sts	0x0C0F, r26
    29d2:	b0 93 10 0c 	sts	0x0C10, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    29d6:	d3 01       	movw	r26, r6
    29d8:	20 e4       	ldi	r18, 0x40	; 64
    29da:	32 e4       	ldi	r19, 0x42	; 66
    29dc:	4f e0       	ldi	r20, 0x0F	; 15
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    29e4:	00 91 f7 0b 	lds	r16, 0x0BF7
    29e8:	10 91 f8 0b 	lds	r17, 0x0BF8
    29ec:	20 91 f9 0b 	lds	r18, 0x0BF9
    29f0:	30 91 fa 0b 	lds	r19, 0x0BFA
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	80 0f       	add	r24, r16
    29fa:	91 1f       	adc	r25, r17
    29fc:	a2 1f       	adc	r26, r18
    29fe:	b3 1f       	adc	r27, r19
    2a00:	80 93 11 0c 	sts	0x0C11, r24
    2a04:	90 93 12 0c 	sts	0x0C12, r25
    2a08:	a0 93 13 0c 	sts	0x0C13, r26
    2a0c:	b0 93 14 0c 	sts	0x0C14, r27
		nrk_time_compact_nanos(&target_t);
    2a10:	8d e0       	ldi	r24, 0x0D	; 13
    2a12:	9c e0       	ldi	r25, 0x0C	; 12
    2a14:	0e 94 5f 29 	call	0x52be	; 0x52be <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    2a18:	10 92 fb 0b 	sts	0x0BFB, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    2a1c:	82 e0       	ldi	r24, 0x02	; 2
    2a1e:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    2a22:	41 2c       	mov	r4, r1
    2a24:	51 2c       	mov	r5, r1
    2a26:	80 91 fb 0b 	lds	r24, 0x0BFB
    2a2a:	81 11       	cpse	r24, r1
    2a2c:	08 c0       	rjmp	.+16     	; 0x2a3e <rf_tx_packet_repeat+0x1f2>
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	48 1a       	sub	r4, r24
    2a32:	58 0a       	sbc	r5, r24
    2a34:	98 ee       	ldi	r25, 0xE8	; 232
    2a36:	49 16       	cp	r4, r25
    2a38:	9d ef       	ldi	r25, 0xFD	; 253
    2a3a:	59 06       	cpc	r5, r25
    2a3c:	a1 f7       	brne	.-24     	; 0x2a26 <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    2a3e:	61 14       	cp	r6, r1
    2a40:	71 04       	cpc	r7, r1
    2a42:	21 f4       	brne	.+8      	; 0x2a4c <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2a44:	8e 81       	ldd	r24, Y+6	; 0x06
    2a46:	81 11       	cpse	r24, r1
    2a48:	2d c0       	rjmp	.+90     	; 0x2aa4 <rf_tx_packet_repeat+0x258>
    2a4a:	32 c0       	rjmp	.+100    	; 0x2ab0 <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    2a4c:	83 ef       	ldi	r24, 0xF3	; 243
    2a4e:	9b e0       	ldi	r25, 0x0B	; 11
    2a50:	0e 94 76 28 	call	0x50ec	; 0x50ec <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    2a54:	80 90 f3 0b 	lds	r8, 0x0BF3
    2a58:	90 90 f4 0b 	lds	r9, 0x0BF4
    2a5c:	a0 90 f5 0b 	lds	r10, 0x0BF5
    2a60:	b0 90 f6 0b 	lds	r11, 0x0BF6
    2a64:	c0 90 f7 0b 	lds	r12, 0x0BF7
    2a68:	d0 90 f8 0b 	lds	r13, 0x0BF8
    2a6c:	e0 90 f9 0b 	lds	r14, 0x0BF9
    2a70:	f0 90 fa 0b 	lds	r15, 0x0BFA
    2a74:	00 91 0d 0c 	lds	r16, 0x0C0D
    2a78:	10 91 0e 0c 	lds	r17, 0x0C0E
    2a7c:	20 91 0f 0c 	lds	r18, 0x0C0F
    2a80:	30 91 10 0c 	lds	r19, 0x0C10
    2a84:	40 91 11 0c 	lds	r20, 0x0C11
    2a88:	50 91 12 0c 	lds	r21, 0x0C12
    2a8c:	60 91 13 0c 	lds	r22, 0x0C13
    2a90:	70 91 14 0c 	lds	r23, 0x0C14
    2a94:	8c e2       	ldi	r24, 0x2C	; 44
    2a96:	9c e0       	ldi	r25, 0x0C	; 12
    2a98:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <nrk_time_sub>
    2a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <rf_tx_packet_repeat+0x256>
    2aa0:	bb cf       	rjmp	.-138    	; 0x2a18 <rf_tx_packet_repeat+0x1cc>
    2aa2:	d0 cf       	rjmp	.-96     	; 0x2a44 <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    2aa4:	80 91 42 01 	lds	r24, 0x0142
    2aa8:	82 95       	swap	r24
    2aaa:	86 95       	lsr	r24
    2aac:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2aae:	39 f4       	brne	.+14     	; 0x2abe <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    2ab0:	88 ee       	ldi	r24, 0xE8	; 232
    2ab2:	48 16       	cp	r4, r24
    2ab4:	8d ef       	ldi	r24, 0xFD	; 253
    2ab6:	58 06       	cpc	r5, r24
    2ab8:	11 f0       	breq	.+4      	; 0x2abe <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2aba:	c1 e0       	ldi	r28, 0x01	; 1
    2abc:	01 c0       	rjmp	.+2      	; 0x2ac0 <rf_tx_packet_repeat+0x274>
    2abe:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    2ac0:	83 2d       	mov	r24, r3
    2ac2:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    2ac6:	8c 2f       	mov	r24, r28
}
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	1f 91       	pop	r17
    2ace:	0f 91       	pop	r16
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	df 90       	pop	r13
    2ad6:	cf 90       	pop	r12
    2ad8:	bf 90       	pop	r11
    2ada:	af 90       	pop	r10
    2adc:	9f 90       	pop	r9
    2ade:	8f 90       	pop	r8
    2ae0:	7f 90       	pop	r7
    2ae2:	6f 90       	pop	r6
    2ae4:	5f 90       	pop	r5
    2ae6:	4f 90       	pop	r4
    2ae8:	3f 90       	pop	r3
    2aea:	08 95       	ret

00002aec <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    2aec:	60 e0       	ldi	r22, 0x00	; 0
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	0c 94 26 14 	jmp	0x284c	; 0x284c <rf_tx_packet_repeat>

00002af4 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    2af8:	80 91 0c 0c 	lds	r24, 0x0C0C
    2afc:	88 23       	and	r24, r24
    2afe:	41 f1       	breq	.+80     	; 0x2b50 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    2b00:	80 91 41 01 	lds	r24, 0x0141
    2b04:	c8 2f       	mov	r28, r24
    2b06:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    2b08:	9f ef       	ldi	r25, 0xFF	; 255
    2b0a:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    2b0c:	92 30       	cpi	r25, 0x02	; 2
    2b0e:	c0 f3       	brcs	.-16     	; 0x2b00 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    2b10:	c1 31       	cpi	r28, 0x11	; 17
    2b12:	b1 f3       	breq	.-20     	; 0x2b00 <rf_cca_check+0xc>
    2b14:	c2 31       	cpi	r28, 0x12	; 18
    2b16:	a1 f3       	breq	.-24     	; 0x2b00 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    2b18:	cf 31       	cpi	r28, 0x1F	; 31
    2b1a:	91 f3       	breq	.-28     	; 0x2b00 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    2b1c:	c8 30       	cpi	r28, 0x08	; 8
    2b1e:	19 f0       	breq	.+6      	; 0x2b26 <rf_cca_check+0x32>
    2b20:	8f 70       	andi	r24, 0x0F	; 15
    2b22:	86 30       	cpi	r24, 0x06	; 6
    2b24:	a9 f4       	brne	.+42     	; 0x2b50 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    2b26:	86 e1       	ldi	r24, 0x16	; 22
    2b28:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    2b2c:	80 91 48 01 	lds	r24, 0x0148
    2b30:	80 68       	ori	r24, 0x80	; 128
    2b32:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    2b36:	80 91 41 01 	lds	r24, 0x0141
    2b3a:	87 ff       	sbrs	r24, 7
    2b3c:	fc cf       	rjmp	.-8      	; 0x2b36 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    2b3e:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    2b42:	8c 2f       	mov	r24, r28
    2b44:	0e 94 1d 13 	call	0x263a	; 0x263a <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    2b48:	d6 fb       	bst	r29, 6
    2b4a:	88 27       	eor	r24, r24
    2b4c:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    2b50:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

00002b58 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    2b58:	80 91 0c 0c 	lds	r24, 0x0C0C
    2b5c:	88 23       	and	r24, r24
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <rf_rx_packet_nonblock+0xa>
    2b60:	a0 c0       	rjmp	.+320    	; 0x2ca2 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    2b62:	80 91 2b 0c 	lds	r24, 0x0C2B
    2b66:	88 23       	and	r24, r24
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <rf_rx_packet_nonblock+0x14>
    2b6a:	99 c0       	rjmp	.+306    	; 0x2c9e <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    2b6c:	80 91 7b 01 	lds	r24, 0x017B
    2b70:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2b74:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	02 97       	sbiw	r24, 0x02	; 2
    2b7c:	24 81       	ldd	r18, Z+4	; 0x04
    2b7e:	33 27       	eor	r19, r19
    2b80:	27 fd       	sbrc	r18, 7
    2b82:	30 95       	com	r19
    2b84:	28 17       	cp	r18, r24
    2b86:	39 07       	cpc	r19, r25
    2b88:	0c f4       	brge	.+2      	; 0x2b8c <rf_rx_packet_nonblock+0x34>
    2b8a:	8b c0       	rjmp	.+278    	; 0x2ca2 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    2b8c:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2b90:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2b94:	80 91 82 01 	lds	r24, 0x0182
    2b98:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    2b9a:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2b9e:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2ba2:	80 91 87 01 	lds	r24, 0x0187
    2ba6:	90 91 88 01 	lds	r25, 0x0188
    2baa:	92 83       	std	Z+2, r25	; 0x02
    2bac:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    2bae:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2bb2:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2bb6:	80 91 7b 01 	lds	r24, 0x017B
    2bba:	8b 50       	subi	r24, 0x0B	; 11
    2bbc:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    2bbe:	a0 91 ea 0b 	lds	r26, 0x0BEA
    2bc2:	b0 91 eb 0b 	lds	r27, 0x0BEB
    2bc6:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2bca:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2bce:	13 96       	adiw	r26, 0x03	; 3
    2bd0:	9c 91       	ld	r25, X
    2bd2:	84 81       	ldd	r24, Z+4	; 0x04
    2bd4:	89 17       	cp	r24, r25
    2bd6:	3c f0       	brlt	.+14     	; 0x2be6 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    2bd8:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2bdc:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2be0:	83 81       	ldd	r24, Z+3	; 0x03
    2be2:	87 ff       	sbrs	r24, 7
    2be4:	0d c0       	rjmp	.+26     	; 0x2c00 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    2be6:	10 92 2b 0c 	sts	0x0C2B, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    2bea:	80 91 4c 01 	lds	r24, 0x014C
    2bee:	8f 77       	andi	r24, 0x7F	; 127
    2bf0:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    2bf4:	80 91 4c 01 	lds	r24, 0x014C
    2bf8:	80 68       	ori	r24, 0x80	; 128
    2bfa:	80 93 4c 01 	sts	0x014C, r24
    2bfe:	51 c0       	rjmp	.+162    	; 0x2ca2 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    2c00:	a0 91 ea 0b 	lds	r26, 0x0BEA
    2c04:	b0 91 eb 0b 	lds	r27, 0x0BEB
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    2c08:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2c0c:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2c10:	13 96       	adiw	r26, 0x03	; 3
    2c12:	4c 91       	ld	r20, X
    2c14:	55 27       	eor	r21, r21
    2c16:	47 fd       	sbrc	r20, 7
    2c18:	50 95       	com	r21
    2c1a:	69 e8       	ldi	r22, 0x89	; 137
    2c1c:	71 e0       	ldi	r23, 0x01	; 1
    2c1e:	85 81       	ldd	r24, Z+5	; 0x05
    2c20:	96 81       	ldd	r25, Z+6	; 0x06
    2c22:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    2c26:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2c2a:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2c2e:	80 91 80 01 	lds	r24, 0x0180
    2c32:	85 fb       	bst	r24, 5
    2c34:	88 27       	eor	r24, r24
    2c36:	80 f9       	bld	r24, 0
    2c38:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    2c3a:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2c3e:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2c42:	80 91 47 01 	lds	r24, 0x0147
    2c46:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    2c48:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2c4c:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2c50:	80 91 46 01 	lds	r24, 0x0146
    2c54:	86 95       	lsr	r24
    2c56:	86 95       	lsr	r24
    2c58:	86 95       	lsr	r24
    2c5a:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    2c5c:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2c60:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2c64:	80 91 47 01 	lds	r24, 0x0147
    2c68:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    2c6a:	a0 91 ea 0b 	lds	r26, 0x0BEA
    2c6e:	b0 91 eb 0b 	lds	r27, 0x0BEB
    2c72:	e0 91 7b 01 	lds	r30, 0x017B
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	e0 58       	subi	r30, 0x80	; 128
    2c7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7c:	80 81       	ld	r24, Z
    2c7e:	1b 96       	adiw	r26, 0x0b	; 11
    2c80:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    2c82:	10 92 2b 0c 	sts	0x0C2B, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    2c86:	80 91 4c 01 	lds	r24, 0x014C
    2c8a:	8f 77       	andi	r24, 0x7F	; 127
    2c8c:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    2c90:	80 91 4c 01 	lds	r24, 0x014C
    2c94:	80 68       	ori	r24, 0x80	; 128
    2c96:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    2ca4:	08 95       	ret

00002ca6 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    2ca6:	1f 92       	push	r1
    2ca8:	0f 92       	push	r0
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	0f 92       	push	r0
    2cae:	11 24       	eor	r1, r1
    2cb0:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    2cb2:	80 e8       	ldi	r24, 0x80	; 128
    2cb4:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2cb8:	8f 91       	pop	r24
    2cba:	0f 90       	pop	r0
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	0f 90       	pop	r0
    2cc0:	1f 90       	pop	r1
    2cc2:	18 95       	reti

00002cc4 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    2cc4:	1f 92       	push	r1
    2cc6:	0f 92       	push	r0
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	0f 92       	push	r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 fb 0b 	sts	0x0BFB, r24
	IRQ_STATUS = (1 << TX_END);
    2cd6:	80 e4       	ldi	r24, 0x40	; 64
    2cd8:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    2cdc:	8f 91       	pop	r24
    2cde:	0f 90       	pop	r0
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	0f 90       	pop	r0
    2ce4:	1f 90       	pop	r1
    2ce6:	18 95       	reti

00002ce8 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    2ce8:	1f 92       	push	r1
    2cea:	0f 92       	push	r0
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	0f 92       	push	r0
    2cf0:	11 24       	eor	r1, r1
    2cf2:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    2cf4:	80 e2       	ldi	r24, 0x20	; 32
    2cf6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2cfa:	8f 91       	pop	r24
    2cfc:	0f 90       	pop	r0
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	0f 90       	pop	r0
    2d02:	1f 90       	pop	r1
    2d04:	18 95       	reti

00002d06 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    2d06:	1f 92       	push	r1
    2d08:	0f 92       	push	r0
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	0f 92       	push	r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    2d12:	80 e1       	ldi	r24, 0x10	; 16
    2d14:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2d18:	8f 91       	pop	r24
    2d1a:	0f 90       	pop	r0
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	0f 90       	pop	r0
    2d20:	1f 90       	pop	r1
    2d22:	18 95       	reti

00002d24 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    2d24:	1f 92       	push	r1
    2d26:	0f 92       	push	r0
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	0f 92       	push	r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	0b b6       	in	r0, 0x3b	; 59
    2d30:	0f 92       	push	r0
    2d32:	2f 93       	push	r18
    2d34:	3f 93       	push	r19
    2d36:	4f 93       	push	r20
    2d38:	5f 93       	push	r21
    2d3a:	6f 93       	push	r22
    2d3c:	7f 93       	push	r23
    2d3e:	8f 93       	push	r24
    2d40:	9f 93       	push	r25
    2d42:	af 93       	push	r26
    2d44:	bf 93       	push	r27
    2d46:	ef 93       	push	r30
    2d48:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    2d4a:	84 e0       	ldi	r24, 0x04	; 4
    2d4c:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    2d50:	e0 91 43 05 	lds	r30, 0x0543
    2d54:	f0 91 44 05 	lds	r31, 0x0544
    2d58:	30 97       	sbiw	r30, 0x00	; 0
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <__vector_59+0x3a>
		rx_start_func();
    2d5c:	09 95       	icall

	return;
}
    2d5e:	ff 91       	pop	r31
    2d60:	ef 91       	pop	r30
    2d62:	bf 91       	pop	r27
    2d64:	af 91       	pop	r26
    2d66:	9f 91       	pop	r25
    2d68:	8f 91       	pop	r24
    2d6a:	7f 91       	pop	r23
    2d6c:	6f 91       	pop	r22
    2d6e:	5f 91       	pop	r21
    2d70:	4f 91       	pop	r20
    2d72:	3f 91       	pop	r19
    2d74:	2f 91       	pop	r18
    2d76:	0f 90       	pop	r0
    2d78:	0b be       	out	0x3b, r0	; 59
    2d7a:	0f 90       	pop	r0
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	0f 90       	pop	r0
    2d80:	1f 90       	pop	r1
    2d82:	18 95       	reti

00002d84 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    2d84:	1f 92       	push	r1
    2d86:	0f 92       	push	r0
    2d88:	0f b6       	in	r0, 0x3f	; 63
    2d8a:	0f 92       	push	r0
    2d8c:	11 24       	eor	r1, r1
    2d8e:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2d96:	8f 91       	pop	r24
    2d98:	0f 90       	pop	r0
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	0f 90       	pop	r0
    2d9e:	1f 90       	pop	r1
    2da0:	18 95       	reti

00002da2 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    2da2:	1f 92       	push	r1
    2da4:	0f 92       	push	r0
    2da6:	0f b6       	in	r0, 0x3f	; 63
    2da8:	0f 92       	push	r0
    2daa:	11 24       	eor	r1, r1
    2dac:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2db4:	8f 91       	pop	r24
    2db6:	0f 90       	pop	r0
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	0f 90       	pop	r0
    2dbc:	1f 90       	pop	r1
    2dbe:	18 95       	reti

00002dc0 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    2dc0:	e9 e4       	ldi	r30, 0x49	; 73
    2dc2:	f1 e0       	ldi	r31, 0x01	; 1
    2dc4:	90 81       	ld	r25, Z
    2dc6:	90 7f       	andi	r25, 0xF0	; 240
    2dc8:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    2dca:	90 81       	ld	r25, Z
    2dcc:	8f 70       	andi	r24, 0x0F	; 15
    2dce:	98 2b       	or	r25, r24
    2dd0:	90 83       	st	Z, r25
    2dd2:	08 95       	ret

00002dd4 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    2dd4:	8f ef       	ldi	r24, 0xFF	; 255
    2dd6:	08 95       	ret

00002dd8 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    2dd8:	08 95       	ret

00002dda <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    2dda:	08 95       	ret

00002ddc <rf_security_disable>:
}



void rf_security_disable()
{
    2ddc:	08 95       	ret

00002dde <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	08 95       	ret

00002de2 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    2de2:	80 91 e5 0b 	lds	r24, 0x0BE5
    2de6:	90 91 e6 0b 	lds	r25, 0x0BE6
    2dea:	08 95       	ret

00002dec <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	08 95       	ret

00002df0 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    2df0:	08 95       	ret

00002df2 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	08 95       	ret

00002df6 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	08 95       	ret

00002dfa <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	08 95       	ret

00002dfe <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    2dfe:	08 95       	ret

00002e00 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    2e00:	08 95       	ret

00002e02 <rf_test_mode>:
}



void rf_test_mode()
{
    2e02:	08 95       	ret

00002e04 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    2e04:	08 95       	ret

00002e06 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    2e06:	08 95       	ret

00002e08 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    2e08:	08 95       	ret

00002e0a <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    2e0a:	08 95       	ret

00002e0c <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    2e0c:	08 95       	ret

00002e0e <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    2e0e:	e7 e3       	ldi	r30, 0x37	; 55
    2e10:	f1 e0       	ldi	r31, 0x01	; 1
    2e12:	80 81       	ld	r24, Z
    2e14:	83 60       	ori	r24, 0x03	; 3
    2e16:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    2e18:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    2e1a:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    2e1c:	8d b1       	in	r24, 0x0d	; 13
    2e1e:	80 6e       	ori	r24, 0xE0	; 224
    2e20:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    2e22:	8e b1       	in	r24, 0x0e	; 14
    2e24:	80 6e       	ori	r24, 0xE0	; 224
    2e26:	8e b9       	out	0x0e, r24	; 14
    2e28:	08 95       	ret

00002e2a <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    2e2a:	e7 e3       	ldi	r30, 0x37	; 55
    2e2c:	f1 e0       	ldi	r31, 0x01	; 1
    2e2e:	80 81       	ld	r24, Z
    2e30:	83 60       	ori	r24, 0x03	; 3
    2e32:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    2e34:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    2e36:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    2e38:	8d b1       	in	r24, 0x0d	; 13
    2e3a:	80 6e       	ori	r24, 0xE0	; 224
    2e3c:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    2e3e:	8e b1       	in	r24, 0x0e	; 14
    2e40:	80 6e       	ori	r24, 0xE0	; 224
    2e42:	8e b9       	out	0x0e, r24	; 14
    2e44:	08 95       	ret

00002e46 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    2e46:	cf 92       	push	r12
    2e48:	df 92       	push	r13
    2e4a:	ef 92       	push	r14
    2e4c:	ff 92       	push	r15
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    2e54:	df 93       	push	r29
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	27 97       	sbiw	r28, 0x07	; 7
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    2e66:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    2e6a:	e0 91 ea 0b 	lds	r30, 0x0BEA
    2e6e:	f0 91 eb 0b 	lds	r31, 0x0BEB
    2e72:	c0 80       	ld	r12, Z
    2e74:	d3 80       	ldd	r13, Z+3	; 0x03
    2e76:	e5 80       	ldd	r14, Z+5	; 0x05
    2e78:	f6 80       	ldd	r15, Z+6	; 0x06
    2e7a:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    2e7c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <rf_rx_packet_nonblock>
	if (err < 1) {
    2e80:	18 16       	cp	r1, r24
    2e82:	1c f0       	brlt	.+6      	; 0x2e8a <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    2e84:	8e eb       	ldi	r24, 0xBE	; 190
    2e86:	93 e0       	ldi	r25, 0x03	; 3
    2e88:	06 c0       	rjmp	.+12     	; 0x2e96 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    2e8a:	f7 01       	movw	r30, r14
    2e8c:	10 81       	ld	r17, Z
	if (ttl == 0) {
    2e8e:	11 11       	cpse	r17, r1
    2e90:	07 c0       	rjmp	.+14     	; 0x2ea0 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    2e92:	8d ed       	ldi	r24, 0xDD	; 221
    2e94:	93 e0       	ldi	r25, 0x03	; 3
    2e96:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <puts>
#endif
		nrk_int_enable();
    2e9a:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
		return;
    2e9e:	31 c0       	rjmp	.+98     	; 0x2f02 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    2ea0:	15 30       	cpi	r17, 0x05	; 5
    2ea2:	21 f4       	brne	.+8      	; 0x2eac <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    2ea4:	8a e0       	ldi	r24, 0x0A	; 10
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	0e 94 20 37 	call	0x6e40	; 0x6e40 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    2eac:	c7 01       	movw	r24, r14
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	9f 93       	push	r25
    2eb2:	8f 93       	push	r24
    2eb4:	80 2f       	mov	r24, r16
    2eb6:	99 27       	eor	r25, r25
    2eb8:	87 fd       	sbrc	r24, 7
    2eba:	90 95       	com	r25
    2ebc:	9f 93       	push	r25
    2ebe:	0f 93       	push	r16
    2ec0:	1f 92       	push	r1
    2ec2:	1f 93       	push	r17
    2ec4:	1f 92       	push	r1
    2ec6:	cf 92       	push	r12
    2ec8:	8f ef       	ldi	r24, 0xFF	; 255
    2eca:	93 e0       	ldi	r25, 0x03	; 3
    2ecc:	9f 93       	push	r25
    2ece:	8f 93       	push	r24
    2ed0:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    2ed4:	fd 82       	std	Y+5, r15	; 0x05
    2ed6:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    2ed8:	11 50       	subi	r17, 0x01	; 1
    2eda:	f7 01       	movw	r30, r14
    2edc:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    2ede:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    2ee0:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    2ee2:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    2ee4:	8f ef       	ldi	r24, 0xFF	; 255
    2ee6:	9f ef       	ldi	r25, 0xFF	; 255
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    2eec:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    2ef0:	ce 01       	movw	r24, r28
    2ef2:	01 96       	adiw	r24, 0x01	; 1
    2ef4:	0e 94 76 15 	call	0x2aec	; 0x2aec <rf_tx_packet>
#endif
	return;
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
}
    2f02:	27 96       	adiw	r28, 0x07	; 7
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	ff 90       	pop	r15
    2f18:	ef 90       	pop	r14
    2f1a:	df 90       	pop	r13
    2f1c:	cf 90       	pop	r12
    2f1e:	08 95       	ret

00002f20 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    2f20:	1f 92       	push	r1
    2f22:	0f 92       	push	r0
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	0f 92       	push	r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	0b b6       	in	r0, 0x3b	; 59
    2f2c:	0f 92       	push	r0
    2f2e:	2f 93       	push	r18
    2f30:	3f 93       	push	r19
    2f32:	4f 93       	push	r20
    2f34:	5f 93       	push	r21
    2f36:	6f 93       	push	r22
    2f38:	7f 93       	push	r23
    2f3a:	8f 93       	push	r24
    2f3c:	9f 93       	push	r25
    2f3e:	af 93       	push	r26
    2f40:	bf 93       	push	r27
    2f42:	ef 93       	push	r30
    2f44:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 91 7b 01 	lds	r25, 0x017B
    2f4c:	89 17       	cp	r24, r25
    2f4e:	10 f4       	brcc	.+4      	; 0x2f54 <__vector_60+0x34>
    2f50:	8f 5f       	subi	r24, 0xFF	; 255
    2f52:	fa cf       	rjmp	.-12     	; 0x2f48 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    2f54:	80 91 46 01 	lds	r24, 0x0146
    2f58:	87 ff       	sbrs	r24, 7
    2f5a:	04 c0       	rjmp	.+8      	; 0x2f64 <__vector_60+0x44>
		rx_ready = 1;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	80 93 2b 0c 	sts	0x0C2B, r24
    2f62:	04 c0       	rjmp	.+8      	; 0x2f6c <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    2f64:	88 e2       	ldi	r24, 0x28	; 40
    2f66:	94 e0       	ldi	r25, 0x04	; 4
    2f68:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    2f6c:	88 e0       	ldi	r24, 0x08	; 8
    2f6e:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    2f72:	80 91 46 01 	lds	r24, 0x0146
    2f76:	87 ff       	sbrs	r24, 7
    2f78:	05 c0       	rjmp	.+10     	; 0x2f84 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    2f7a:	80 91 e7 0b 	lds	r24, 0x0BE7
    2f7e:	81 11       	cpse	r24, r1
    2f80:	0e 94 23 17 	call	0x2e46	; 0x2e46 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    2f84:	e0 91 41 05 	lds	r30, 0x0541
    2f88:	f0 91 42 05 	lds	r31, 0x0542
    2f8c:	30 97       	sbiw	r30, 0x00	; 0
    2f8e:	09 f0       	breq	.+2      	; 0x2f92 <__vector_60+0x72>
		rx_end_func();
    2f90:	09 95       	icall

	return;
}
    2f92:	ff 91       	pop	r31
    2f94:	ef 91       	pop	r30
    2f96:	bf 91       	pop	r27
    2f98:	af 91       	pop	r26
    2f9a:	9f 91       	pop	r25
    2f9c:	8f 91       	pop	r24
    2f9e:	7f 91       	pop	r23
    2fa0:	6f 91       	pop	r22
    2fa2:	5f 91       	pop	r21
    2fa4:	4f 91       	pop	r20
    2fa6:	3f 91       	pop	r19
    2fa8:	2f 91       	pop	r18
    2faa:	0f 90       	pop	r0
    2fac:	0b be       	out	0x3b, r0	; 59
    2fae:	0f 90       	pop	r0
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	0f 90       	pop	r0
    2fb4:	1f 90       	pop	r1
    2fb6:	18 95       	reti

00002fb8 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    2fb8:	ac ef       	ldi	r26, 0xFC	; 252
    2fba:	bb e0       	ldi	r27, 0x0B	; 11
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    2fc0:	20 81       	ld	r18, Z
    2fc2:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    2fc4:	21 91       	ld	r18, Z+
    2fc6:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    2fca:	e8 17       	cp	r30, r24
    2fcc:	f9 07       	cpc	r31, r25
    2fce:	c1 f7       	brne	.-16     	; 0x2fc0 <aes_setkey+0x8>
    2fd0:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    2fd2:	10 92 3e 01 	sts	0x013E, r1
    2fd6:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    2fd8:	e1 f7       	brne	.-8      	; 0x2fd2 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    2fda:	80 e8       	ldi	r24, 0x80	; 128
    2fdc:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    2fe0:	80 91 3d 01 	lds	r24, 0x013D
    2fe4:	80 ff       	sbrs	r24, 0
    2fe6:	fc cf       	rjmp	.-8      	; 0x2fe0 <aes_setkey+0x28>
    2fe8:	e5 e1       	ldi	r30, 0x15	; 21
    2fea:	fc e0       	ldi	r31, 0x0C	; 12
    2fec:	80 e1       	ldi	r24, 0x10	; 16
    2fee:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    2ff0:	90 91 3f 01 	lds	r25, 0x013F
    2ff4:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    2ff6:	8e 13       	cpse	r24, r30
    2ff8:	fb cf       	rjmp	.-10     	; 0x2ff0 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    2ffa:	08 95       	ret

00002ffc <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    3002:	66 23       	and	r22, r22
    3004:	09 f4       	brne	.+2      	; 0x3008 <aes_encrypt+0xc>
    3006:	45 c0       	rjmp	.+138    	; 0x3092 <aes_encrypt+0x96>
    3008:	86 2f       	mov	r24, r22
    300a:	8f 70       	andi	r24, 0x0F	; 15
    300c:	09 f0       	breq	.+2      	; 0x3010 <aes_encrypt+0x14>
    300e:	41 c0       	rjmp	.+130    	; 0x3092 <aes_encrypt+0x96>
    3010:	ec ef       	ldi	r30, 0xFC	; 252
    3012:	fb e0       	ldi	r31, 0x0B	; 11
    3014:	90 e1       	ldi	r25, 0x10	; 16
    3016:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    3018:	21 91       	ld	r18, Z+
    301a:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    301e:	9e 13       	cpse	r25, r30
    3020:	fb cf       	rjmp	.-10     	; 0x3018 <aes_encrypt+0x1c>
    3022:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    3024:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    3026:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    3028:	40 e1       	ldi	r20, 0x10	; 16
    302a:	94 9f       	mul	r25, r20
    302c:	90 01       	movw	r18, r0
    302e:	11 24       	eor	r1, r1
    3030:	26 17       	cp	r18, r22
    3032:	37 07       	cpc	r19, r23
    3034:	7c f5       	brge	.+94     	; 0x3094 <aes_encrypt+0x98>
      if(i==0)
    3036:	91 11       	cpse	r25, r1
    3038:	03 c0       	rjmp	.+6      	; 0x3040 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    303a:	10 92 3c 01 	sts	0x013C, r1
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    3040:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	2a 0f       	add	r18, r26
    304a:	3b 1f       	adc	r19, r27
    304c:	e9 01       	movw	r28, r18
    304e:	c4 0f       	add	r28, r20
    3050:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    3052:	f8 81       	ld	r31, Y
    3054:	f0 93 3e 01 	sts	0x013E, r31
    3058:	4f 5f       	subi	r20, 0xFF	; 255
    305a:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    305c:	40 31       	cpi	r20, 0x10	; 16
    305e:	51 05       	cpc	r21, r1
    3060:	a9 f7       	brne	.-22     	; 0x304c <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    3062:	40 91 3c 01 	lds	r20, 0x013C
    3066:	40 68       	ori	r20, 0x80	; 128
    3068:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    306c:	40 91 3d 01 	lds	r20, 0x013D
    3070:	40 ff       	sbrs	r20, 0
    3072:	fc cf       	rjmp	.-8      	; 0x306c <aes_encrypt+0x70>
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    3078:	f0 91 3e 01 	lds	r31, 0x013E
    307c:	e9 01       	movw	r28, r18
    307e:	c4 0f       	add	r28, r20
    3080:	d5 1f       	adc	r29, r21
    3082:	f8 83       	st	Y, r31
    3084:	4f 5f       	subi	r20, 0xFF	; 255
    3086:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    3088:	40 31       	cpi	r20, 0x10	; 16
    308a:	51 05       	cpc	r21, r1
    308c:	a9 f7       	brne	.-22     	; 0x3078 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    308e:	9f 5f       	subi	r25, 0xFF	; 255
    3090:	cb cf       	rjmp	.-106    	; 0x3028 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    3092:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    3094:	df 91       	pop	r29
    3096:	cf 91       	pop	r28
    3098:	08 95       	ret

0000309a <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    30a4:	61 30       	cpi	r22, 0x01	; 1
    30a6:	09 f4       	brne	.+2      	; 0x30aa <aes_decrypt+0x10>
    30a8:	58 c0       	rjmp	.+176    	; 0x315a <aes_decrypt+0xc0>
    30aa:	86 2f       	mov	r24, r22
    30ac:	8f 70       	andi	r24, 0x0F	; 15
    30ae:	09 f0       	breq	.+2      	; 0x30b2 <aes_decrypt+0x18>
    30b0:	54 c0       	rjmp	.+168    	; 0x315a <aes_decrypt+0xc0>
    30b2:	e5 e1       	ldi	r30, 0x15	; 21
    30b4:	fc e0       	ldi	r31, 0x0C	; 12
    30b6:	90 e1       	ldi	r25, 0x10	; 16
    30b8:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    30ba:	21 91       	ld	r18, Z+
    30bc:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    30c0:	9e 13       	cpse	r25, r30
    30c2:	fb cf       	rjmp	.-10     	; 0x30ba <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    30c4:	62 95       	swap	r22
    30c6:	6f 70       	andi	r22, 0x0F	; 15
    30c8:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    30ca:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    30cc:	6f 3f       	cpi	r22, 0xFF	; 255
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <aes_decrypt+0x38>
    30d0:	45 c0       	rjmp	.+138    	; 0x315c <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    30d2:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    30d6:	46 2f       	mov	r20, r22
    30d8:	55 27       	eor	r21, r21
    30da:	47 fd       	sbrc	r20, 7
    30dc:	50 95       	com	r21
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	ed 01       	movw	r28, r26
    30e4:	90 e1       	ldi	r25, 0x10	; 16
    30e6:	69 02       	muls	r22, r25
    30e8:	c0 0d       	add	r28, r0
    30ea:	d1 1d       	adc	r29, r1
    30ec:	11 24       	eor	r1, r1
    30ee:	fe 01       	movw	r30, r28
    30f0:	e2 0f       	add	r30, r18
    30f2:	f3 1f       	adc	r31, r19
    30f4:	90 81       	ld	r25, Z
    30f6:	90 93 3e 01 	sts	0x013E, r25
    30fa:	2f 5f       	subi	r18, 0xFF	; 255
    30fc:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    30fe:	20 31       	cpi	r18, 0x10	; 16
    3100:	31 05       	cpc	r19, r1
    3102:	a9 f7       	brne	.-22     	; 0x30ee <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    3104:	90 91 3c 01 	lds	r25, 0x013C
    3108:	90 68       	ori	r25, 0x80	; 128
    310a:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    310e:	90 91 3d 01 	lds	r25, 0x013D
    3112:	90 ff       	sbrs	r25, 0
    3114:	fc cf       	rjmp	.-8      	; 0x310e <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    3116:	41 50       	subi	r20, 0x01	; 1
    3118:	51 09       	sbc	r21, r1
    311a:	94 e0       	ldi	r25, 0x04	; 4
    311c:	44 0f       	add	r20, r20
    311e:	55 1f       	adc	r21, r21
    3120:	9a 95       	dec	r25
    3122:	e1 f7       	brne	.-8      	; 0x311c <aes_decrypt+0x82>
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    3128:	90 91 3e 01 	lds	r25, 0x013E
    312c:	8e 01       	movw	r16, r28
    312e:	02 0f       	add	r16, r18
    3130:	13 1f       	adc	r17, r19
    3132:	f8 01       	movw	r30, r16
    3134:	90 83       	st	Z, r25
         if(i!=0)
    3136:	66 23       	and	r22, r22
    3138:	49 f0       	breq	.+18     	; 0x314c <aes_decrypt+0xb2>
    313a:	f9 01       	movw	r30, r18
    313c:	e4 0f       	add	r30, r20
    313e:	f5 1f       	adc	r31, r21
    3140:	ea 0f       	add	r30, r26
    3142:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    3144:	e0 81       	ld	r30, Z
    3146:	9e 27       	eor	r25, r30
    3148:	f8 01       	movw	r30, r16
    314a:	90 83       	st	Z, r25
    314c:	2f 5f       	subi	r18, 0xFF	; 255
    314e:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    3150:	20 31       	cpi	r18, 0x10	; 16
    3152:	31 05       	cpc	r19, r1
    3154:	49 f7       	brne	.-46     	; 0x3128 <aes_decrypt+0x8e>
    3156:	61 50       	subi	r22, 0x01	; 1
    3158:	b9 cf       	rjmp	.-142    	; 0x30cc <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    315a:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	08 95       	ret

00003166 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    3166:	90 91 c0 00 	lds	r25, 0x00C0
    316a:	95 ff       	sbrs	r25, 5
    316c:	fc cf       	rjmp	.-8      	; 0x3166 <putc0>
    316e:	90 91 c0 00 	lds	r25, 0x00C0
    3172:	9f 7d       	andi	r25, 0xDF	; 223
    3174:	90 93 c0 00 	sts	0x00C0, r25
    3178:	80 93 c6 00 	sts	0x00C6, r24
    317c:	08 95       	ret

0000317e <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    317e:	1f 92       	push	r1
    3180:	0f 92       	push	r0
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	0f 92       	push	r0
    3186:	11 24       	eor	r1, r1
    3188:	0b b6       	in	r0, 0x3b	; 59
    318a:	0f 92       	push	r0
    318c:	2f 93       	push	r18
    318e:	3f 93       	push	r19
    3190:	4f 93       	push	r20
    3192:	5f 93       	push	r21
    3194:	6f 93       	push	r22
    3196:	7f 93       	push	r23
    3198:	8f 93       	push	r24
    319a:	9f 93       	push	r25
    319c:	af 93       	push	r26
    319e:	bf 93       	push	r27
    31a0:	ef 93       	push	r30
    31a2:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    31a4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    31a8:	80 91 c0 00 	lds	r24, 0x00C0
    31ac:	87 ff       	sbrs	r24, 7
    31ae:	fc cf       	rjmp	.-8      	; 0x31a8 <__vector_25+0x2a>
    31b0:	80 91 c0 00 	lds	r24, 0x00C0
    31b4:	8f 77       	andi	r24, 0x7F	; 127
    31b6:	80 93 c0 00 	sts	0x00C0, r24
    31ba:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    31be:	80 91 56 05 	lds	r24, 0x0556
    31c2:	90 91 57 05 	lds	r25, 0x0557
    31c6:	fc 01       	movw	r30, r24
    31c8:	ea 5b       	subi	r30, 0xBA	; 186
    31ca:	fa 4f       	sbci	r31, 0xFA	; 250
    31cc:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    31ce:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    31d0:	80 31       	cpi	r24, 0x10	; 16
    31d2:	91 05       	cpc	r25, r1
    31d4:	29 f0       	breq	.+10     	; 0x31e0 <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    31d6:	90 93 57 05 	sts	0x0557, r25
    31da:	80 93 56 05 	sts	0x0556, r24
    31de:	04 c0       	rjmp	.+8      	; 0x31e8 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    31e0:	10 92 57 05 	sts	0x0557, r1
    31e4:	10 92 56 05 	sts	0x0556, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    31e8:	80 91 45 05 	lds	r24, 0x0545
    31ec:	0e 94 52 23 	call	0x46a4	; 0x46a4 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    31f0:	80 91 c0 00 	lds	r24, 0x00C0
    31f4:	8f 77       	andi	r24, 0x7F	; 127
    31f6:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    31fa:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
}
    31fe:	ff 91       	pop	r31
    3200:	ef 91       	pop	r30
    3202:	bf 91       	pop	r27
    3204:	af 91       	pop	r26
    3206:	9f 91       	pop	r25
    3208:	8f 91       	pop	r24
    320a:	7f 91       	pop	r23
    320c:	6f 91       	pop	r22
    320e:	5f 91       	pop	r21
    3210:	4f 91       	pop	r20
    3212:	3f 91       	pop	r19
    3214:	2f 91       	pop	r18
    3216:	0f 90       	pop	r0
    3218:	0b be       	out	0x3b, r0	; 59
    321a:	0f 90       	pop	r0
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	0f 90       	pop	r0
    3220:	1f 90       	pop	r1
    3222:	18 95       	reti

00003224 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    3224:	81 11       	cpse	r24, r1
    3226:	0d c0       	rjmp	.+26     	; 0x3242 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	40 91 58 05 	lds	r20, 0x0558
    322e:	50 91 59 05 	lds	r21, 0x0559
    3232:	20 91 56 05 	lds	r18, 0x0556
    3236:	30 91 57 05 	lds	r19, 0x0557
    323a:	42 17       	cp	r20, r18
    323c:	53 07       	cpc	r21, r19
    323e:	51 f4       	brne	.+20     	; 0x3254 <nrk_uart_data_ready+0x30>
    3240:	08 c0       	rjmp	.+16     	; 0x3252 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	31 f4       	brne	.+12     	; 0x3252 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    3246:	80 91 c8 00 	lds	r24, 0x00C8
    324a:	88 1f       	adc	r24, r24
    324c:	88 27       	eor	r24, r24
    324e:	88 1f       	adc	r24, r24
    3250:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    3252:	80 e0       	ldi	r24, 0x00	; 0
}
    3254:	08 95       	ret

00003256 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3256:	80 91 45 05 	lds	r24, 0x0545
    325a:	8f 3f       	cpi	r24, 0xFF	; 255
    325c:	19 f4       	brne	.+6      	; 0x3264 <nrk_uart_rx_signal_get+0xe>
    325e:	8e e0       	ldi	r24, 0x0E	; 14
    3260:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_error_add>
   return uart_rx_signal;
}
    3264:	80 91 45 05 	lds	r24, 0x0545
    3268:	08 95       	ret

0000326a <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    326e:	fc 01       	movw	r30, r24
    3270:	24 91       	lpm	r18, Z
    3272:	ec 01       	movw	r28, r24
    3274:	21 96       	adiw	r28, 0x01	; 1
    3276:	22 23       	and	r18, r18
    3278:	51 f0       	breq	.+20     	; 0x328e <nrk_kprintf+0x24>
        putchar(c);
    327a:	60 91 28 0d 	lds	r22, 0x0D28
    327e:	70 91 29 0d 	lds	r23, 0x0D29
    3282:	82 2f       	mov	r24, r18
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    328a:	ce 01       	movw	r24, r28
    328c:	f0 cf       	rjmp	.-32     	; 0x326e <nrk_kprintf+0x4>
}
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	08 95       	ret

00003294 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    3294:	20 91 58 05 	lds	r18, 0x0558
    3298:	30 91 59 05 	lds	r19, 0x0559
    329c:	80 91 56 05 	lds	r24, 0x0556
    32a0:	90 91 57 05 	lds	r25, 0x0557
    32a4:	28 17       	cp	r18, r24
    32a6:	39 07       	cpc	r19, r25
    32a8:	69 f4       	brne	.+26     	; 0x32c4 <getc0+0x30>
    32aa:	80 91 45 05 	lds	r24, 0x0545
    32ae:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_signal_register>
    32b2:	60 91 45 05 	lds	r22, 0x0545
    32b6:	77 27       	eor	r23, r23
    32b8:	67 fd       	sbrc	r22, 7
    32ba:	70 95       	com	r23
    32bc:	87 2f       	mov	r24, r23
    32be:	97 2f       	mov	r25, r23
    32c0:	0e 94 c3 23 	call	0x4786	; 0x4786 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    32c4:	6f 3f       	cpi	r22, 0xFF	; 255
    32c6:	21 f4       	brne	.+8      	; 0x32d0 <getc0+0x3c>
    32c8:	8e ee       	ldi	r24, 0xEE	; 238
    32ca:	92 e0       	ldi	r25, 0x02	; 2
    32cc:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    32d0:	20 91 58 05 	lds	r18, 0x0558
    32d4:	30 91 59 05 	lds	r19, 0x0559
    32d8:	f9 01       	movw	r30, r18
    32da:	ea 5b       	subi	r30, 0xBA	; 186
    32dc:	fa 4f       	sbci	r31, 0xFA	; 250
    32de:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    32e0:	2f 5f       	subi	r18, 0xFF	; 255
    32e2:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    32e4:	20 31       	cpi	r18, 0x10	; 16
    32e6:	31 05       	cpc	r19, r1
    32e8:	28 f4       	brcc	.+10     	; 0x32f4 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    32ea:	30 93 59 05 	sts	0x0559, r19
    32ee:	20 93 58 05 	sts	0x0558, r18
    32f2:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    32f4:	10 92 59 05 	sts	0x0559, r1
    32f8:	10 92 58 05 	sts	0x0558, r1

   return tmp;
}
    32fc:	08 95       	ret

000032fe <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    32fe:	86 e0       	ldi	r24, 0x06	; 6
    3300:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    3302:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    3304:	88 ef       	ldi	r24, 0xF8	; 248
    3306:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    3308:	80 ef       	ldi	r24, 0xF0	; 240
    330a:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	8d b9       	out	0x0d, r24	; 13
    3310:	08 95       	ret

00003312 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    3312:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <PORT_INIT>

00003316 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3316:	8f 3f       	cpi	r24, 0xFF	; 255
    3318:	09 f4       	brne	.+2      	; 0x331c <nrk_gpio_set+0x6>
    331a:	6c c0       	rjmp	.+216    	; 0x33f4 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    331c:	e8 2f       	mov	r30, r24
    331e:	e7 70       	andi	r30, 0x07	; 7
    3320:	4e 2f       	mov	r20, r30
    3322:	50 e0       	ldi	r21, 0x00	; 0
    3324:	47 30       	cpi	r20, 0x07	; 7
    3326:	51 05       	cpc	r21, r1
    3328:	08 f0       	brcs	.+2      	; 0x332c <nrk_gpio_set+0x16>
    332a:	64 c0       	rjmp	.+200    	; 0x33f4 <nrk_gpio_set+0xde>
    332c:	fa 01       	movw	r30, r20
    332e:	e0 57       	subi	r30, 0x70	; 112
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	86 95       	lsr	r24
    3334:	86 95       	lsr	r24
    3336:	86 95       	lsr	r24
    3338:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    333c:	42 b1       	in	r20, 0x02	; 2
    333e:	21 e0       	ldi	r18, 0x01	; 1
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	b9 01       	movw	r22, r18
    3344:	02 c0       	rjmp	.+4      	; 0x334a <nrk_gpio_set+0x34>
    3346:	66 0f       	add	r22, r22
    3348:	77 1f       	adc	r23, r23
    334a:	8a 95       	dec	r24
    334c:	e2 f7       	brpl	.-8      	; 0x3346 <nrk_gpio_set+0x30>
    334e:	cb 01       	movw	r24, r22
    3350:	84 2b       	or	r24, r20
    3352:	82 b9       	out	0x02, r24	; 2
    3354:	4d c0       	rjmp	.+154    	; 0x33f0 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3356:	45 b1       	in	r20, 0x05	; 5
    3358:	21 e0       	ldi	r18, 0x01	; 1
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	b9 01       	movw	r22, r18
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <nrk_gpio_set+0x4e>
    3360:	66 0f       	add	r22, r22
    3362:	77 1f       	adc	r23, r23
    3364:	8a 95       	dec	r24
    3366:	e2 f7       	brpl	.-8      	; 0x3360 <nrk_gpio_set+0x4a>
    3368:	cb 01       	movw	r24, r22
    336a:	84 2b       	or	r24, r20
    336c:	85 b9       	out	0x05, r24	; 5
    336e:	40 c0       	rjmp	.+128    	; 0x33f0 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    3370:	48 b1       	in	r20, 0x08	; 8
    3372:	21 e0       	ldi	r18, 0x01	; 1
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	b9 01       	movw	r22, r18
    3378:	02 c0       	rjmp	.+4      	; 0x337e <nrk_gpio_set+0x68>
    337a:	66 0f       	add	r22, r22
    337c:	77 1f       	adc	r23, r23
    337e:	8a 95       	dec	r24
    3380:	e2 f7       	brpl	.-8      	; 0x337a <nrk_gpio_set+0x64>
    3382:	cb 01       	movw	r24, r22
    3384:	84 2b       	or	r24, r20
    3386:	88 b9       	out	0x08, r24	; 8
    3388:	33 c0       	rjmp	.+102    	; 0x33f0 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    338a:	4b b1       	in	r20, 0x0b	; 11
    338c:	21 e0       	ldi	r18, 0x01	; 1
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	b9 01       	movw	r22, r18
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <nrk_gpio_set+0x82>
    3394:	66 0f       	add	r22, r22
    3396:	77 1f       	adc	r23, r23
    3398:	8a 95       	dec	r24
    339a:	e2 f7       	brpl	.-8      	; 0x3394 <nrk_gpio_set+0x7e>
    339c:	cb 01       	movw	r24, r22
    339e:	84 2b       	or	r24, r20
    33a0:	8b b9       	out	0x0b, r24	; 11
    33a2:	26 c0       	rjmp	.+76     	; 0x33f0 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    33a4:	4e b1       	in	r20, 0x0e	; 14
    33a6:	21 e0       	ldi	r18, 0x01	; 1
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	b9 01       	movw	r22, r18
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <nrk_gpio_set+0x9c>
    33ae:	66 0f       	add	r22, r22
    33b0:	77 1f       	adc	r23, r23
    33b2:	8a 95       	dec	r24
    33b4:	e2 f7       	brpl	.-8      	; 0x33ae <nrk_gpio_set+0x98>
    33b6:	cb 01       	movw	r24, r22
    33b8:	84 2b       	or	r24, r20
    33ba:	8e b9       	out	0x0e, r24	; 14
    33bc:	19 c0       	rjmp	.+50     	; 0x33f0 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    33be:	41 b3       	in	r20, 0x11	; 17
    33c0:	21 e0       	ldi	r18, 0x01	; 1
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	b9 01       	movw	r22, r18
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <nrk_gpio_set+0xb6>
    33c8:	66 0f       	add	r22, r22
    33ca:	77 1f       	adc	r23, r23
    33cc:	8a 95       	dec	r24
    33ce:	e2 f7       	brpl	.-8      	; 0x33c8 <nrk_gpio_set+0xb2>
    33d0:	cb 01       	movw	r24, r22
    33d2:	84 2b       	or	r24, r20
    33d4:	81 bb       	out	0x11, r24	; 17
    33d6:	0c c0       	rjmp	.+24     	; 0x33f0 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    33d8:	44 b3       	in	r20, 0x14	; 20
    33da:	21 e0       	ldi	r18, 0x01	; 1
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	b9 01       	movw	r22, r18
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <nrk_gpio_set+0xd0>
    33e2:	66 0f       	add	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	8a 95       	dec	r24
    33e8:	e2 f7       	brpl	.-8      	; 0x33e2 <nrk_gpio_set+0xcc>
    33ea:	cb 01       	movw	r24, r22
    33ec:	84 2b       	or	r24, r20
    33ee:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    33f2:	08 95       	ret
                default: return -1;
    33f4:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    33f6:	08 95       	ret

000033f8 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    33f8:	8f 3f       	cpi	r24, 0xFF	; 255
    33fa:	09 f4       	brne	.+2      	; 0x33fe <nrk_gpio_clr+0x6>
    33fc:	65 c0       	rjmp	.+202    	; 0x34c8 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    33fe:	e8 2f       	mov	r30, r24
    3400:	e7 70       	andi	r30, 0x07	; 7
    3402:	4e 2f       	mov	r20, r30
    3404:	50 e0       	ldi	r21, 0x00	; 0
    3406:	47 30       	cpi	r20, 0x07	; 7
    3408:	51 05       	cpc	r21, r1
    340a:	08 f0       	brcs	.+2      	; 0x340e <nrk_gpio_clr+0x16>
    340c:	5d c0       	rjmp	.+186    	; 0x34c8 <nrk_gpio_clr+0xd0>
    340e:	fa 01       	movw	r30, r20
    3410:	e9 56       	subi	r30, 0x69	; 105
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	86 95       	lsr	r24
    3416:	86 95       	lsr	r24
    3418:	86 95       	lsr	r24
    341a:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    341e:	42 b1       	in	r20, 0x02	; 2
    3420:	21 e0       	ldi	r18, 0x01	; 1
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	b9 01       	movw	r22, r18
    3426:	02 c0       	rjmp	.+4      	; 0x342c <nrk_gpio_clr+0x34>
    3428:	66 0f       	add	r22, r22
    342a:	77 1f       	adc	r23, r23
    342c:	8a 95       	dec	r24
    342e:	e2 f7       	brpl	.-8      	; 0x3428 <nrk_gpio_clr+0x30>
    3430:	cb 01       	movw	r24, r22
    3432:	80 95       	com	r24
    3434:	84 23       	and	r24, r20
    3436:	82 b9       	out	0x02, r24	; 2
    3438:	45 c0       	rjmp	.+138    	; 0x34c4 <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    343a:	45 b1       	in	r20, 0x05	; 5
    343c:	21 e0       	ldi	r18, 0x01	; 1
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	b9 01       	movw	r22, r18
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <nrk_gpio_clr+0x50>
    3444:	66 0f       	add	r22, r22
    3446:	77 1f       	adc	r23, r23
    3448:	8a 95       	dec	r24
    344a:	e2 f7       	brpl	.-8      	; 0x3444 <nrk_gpio_clr+0x4c>
    344c:	cb 01       	movw	r24, r22
    344e:	80 95       	com	r24
    3450:	84 23       	and	r24, r20
    3452:	85 b9       	out	0x05, r24	; 5
    3454:	37 c0       	rjmp	.+110    	; 0x34c4 <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3456:	48 b1       	in	r20, 0x08	; 8
    3458:	21 e0       	ldi	r18, 0x01	; 1
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	b9 01       	movw	r22, r18
    345e:	02 c0       	rjmp	.+4      	; 0x3464 <nrk_gpio_clr+0x6c>
    3460:	66 0f       	add	r22, r22
    3462:	77 1f       	adc	r23, r23
    3464:	8a 95       	dec	r24
    3466:	e2 f7       	brpl	.-8      	; 0x3460 <nrk_gpio_clr+0x68>
    3468:	cb 01       	movw	r24, r22
    346a:	80 95       	com	r24
    346c:	84 23       	and	r24, r20
    346e:	88 b9       	out	0x08, r24	; 8
    3470:	29 c0       	rjmp	.+82     	; 0x34c4 <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    3472:	4b b1       	in	r20, 0x0b	; 11
    3474:	21 e0       	ldi	r18, 0x01	; 1
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	b9 01       	movw	r22, r18
    347a:	02 c0       	rjmp	.+4      	; 0x3480 <nrk_gpio_clr+0x88>
    347c:	66 0f       	add	r22, r22
    347e:	77 1f       	adc	r23, r23
    3480:	8a 95       	dec	r24
    3482:	e2 f7       	brpl	.-8      	; 0x347c <nrk_gpio_clr+0x84>
    3484:	cb 01       	movw	r24, r22
    3486:	80 95       	com	r24
    3488:	84 23       	and	r24, r20
    348a:	8b b9       	out	0x0b, r24	; 11
    348c:	1b c0       	rjmp	.+54     	; 0x34c4 <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    348e:	4e b1       	in	r20, 0x0e	; 14
    3490:	21 e0       	ldi	r18, 0x01	; 1
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	b9 01       	movw	r22, r18
    3496:	02 c0       	rjmp	.+4      	; 0x349c <nrk_gpio_clr+0xa4>
    3498:	66 0f       	add	r22, r22
    349a:	77 1f       	adc	r23, r23
    349c:	8a 95       	dec	r24
    349e:	e2 f7       	brpl	.-8      	; 0x3498 <nrk_gpio_clr+0xa0>
    34a0:	cb 01       	movw	r24, r22
    34a2:	80 95       	com	r24
    34a4:	84 23       	and	r24, r20
    34a6:	8e b9       	out	0x0e, r24	; 14
    34a8:	0d c0       	rjmp	.+26     	; 0x34c4 <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    34aa:	41 b3       	in	r20, 0x11	; 17
    34ac:	21 e0       	ldi	r18, 0x01	; 1
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	b9 01       	movw	r22, r18
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <nrk_gpio_clr+0xc0>
    34b4:	66 0f       	add	r22, r22
    34b6:	77 1f       	adc	r23, r23
    34b8:	8a 95       	dec	r24
    34ba:	e2 f7       	brpl	.-8      	; 0x34b4 <nrk_gpio_clr+0xbc>
    34bc:	cb 01       	movw	r24, r22
    34be:	80 95       	com	r24
    34c0:	84 23       	and	r24, r20
    34c2:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    34c4:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    34c6:	08 95       	ret
                default: return -1;
    34c8:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    34ca:	08 95       	ret

000034cc <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    34cc:	8f 3f       	cpi	r24, 0xFF	; 255
    34ce:	31 f1       	breq	.+76     	; 0x351c <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    34d0:	e8 2f       	mov	r30, r24
    34d2:	e7 70       	andi	r30, 0x07	; 7
    34d4:	4e 2f       	mov	r20, r30
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	47 30       	cpi	r20, 0x07	; 7
    34da:	51 05       	cpc	r21, r1
    34dc:	f8 f4       	brcc	.+62     	; 0x351c <nrk_gpio_get+0x50>
    34de:	fa 01       	movw	r30, r20
    34e0:	e2 56       	subi	r30, 0x62	; 98
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	28 2f       	mov	r18, r24
    34e6:	26 95       	lsr	r18
    34e8:	26 95       	lsr	r18
    34ea:	26 95       	lsr	r18
    34ec:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    34f0:	90 b1       	in	r25, 0x00	; 0
    34f2:	0b c0       	rjmp	.+22     	; 0x350a <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    34f4:	93 b1       	in	r25, 0x03	; 3
    34f6:	09 c0       	rjmp	.+18     	; 0x350a <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    34f8:	96 b1       	in	r25, 0x06	; 6
    34fa:	07 c0       	rjmp	.+14     	; 0x350a <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    34fc:	99 b1       	in	r25, 0x09	; 9
    34fe:	05 c0       	rjmp	.+10     	; 0x350a <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    3500:	9c b1       	in	r25, 0x0c	; 12
    3502:	03 c0       	rjmp	.+6      	; 0x350a <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    3504:	9f b1       	in	r25, 0x0f	; 15
    3506:	01 c0       	rjmp	.+2      	; 0x350a <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    3508:	92 b3       	in	r25, 0x12	; 18
    350a:	89 2f       	mov	r24, r25
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <nrk_gpio_get+0x48>
    3510:	95 95       	asr	r25
    3512:	87 95       	ror	r24
    3514:	2a 95       	dec	r18
    3516:	e2 f7       	brpl	.-8      	; 0x3510 <nrk_gpio_get+0x44>
    3518:	81 70       	andi	r24, 0x01	; 1
    351a:	08 95       	ret
                default: return -1;
    351c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    351e:	08 95       	ret

00003520 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    3520:	8f 3f       	cpi	r24, 0xFF	; 255
    3522:	09 f4       	brne	.+2      	; 0x3526 <nrk_gpio_toggle+0x6>
    3524:	06 c1       	rjmp	.+524    	; 0x3732 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    3526:	e8 2f       	mov	r30, r24
    3528:	e7 70       	andi	r30, 0x07	; 7
    352a:	4e 2f       	mov	r20, r30
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	47 30       	cpi	r20, 0x07	; 7
    3530:	51 05       	cpc	r21, r1
    3532:	08 f0       	brcs	.+2      	; 0x3536 <nrk_gpio_toggle+0x16>
    3534:	fe c0       	rjmp	.+508    	; 0x3732 <nrk_gpio_toggle+0x212>
    3536:	fa 01       	movw	r30, r20
    3538:	eb 55       	subi	r30, 0x5B	; 91
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	86 95       	lsr	r24
    353e:	86 95       	lsr	r24
    3540:	86 95       	lsr	r24
    3542:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    3546:	20 b1       	in	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	08 2e       	mov	r0, r24
    354c:	02 c0       	rjmp	.+4      	; 0x3552 <nrk_gpio_toggle+0x32>
    354e:	35 95       	asr	r19
    3550:	27 95       	ror	r18
    3552:	0a 94       	dec	r0
    3554:	e2 f7       	brpl	.-8      	; 0x354e <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    3556:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    3558:	20 fd       	sbrc	r18, 0
    355a:	0b c0       	rjmp	.+22     	; 0x3572 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    355c:	21 e0       	ldi	r18, 0x01	; 1
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	b9 01       	movw	r22, r18
    3562:	02 c0       	rjmp	.+4      	; 0x3568 <nrk_gpio_toggle+0x48>
    3564:	66 0f       	add	r22, r22
    3566:	77 1f       	adc	r23, r23
    3568:	8a 95       	dec	r24
    356a:	e2 f7       	brpl	.-8      	; 0x3564 <nrk_gpio_toggle+0x44>
    356c:	cb 01       	movw	r24, r22
    356e:	84 2b       	or	r24, r20
    3570:	0b c0       	rjmp	.+22     	; 0x3588 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    3572:	21 e0       	ldi	r18, 0x01	; 1
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	b9 01       	movw	r22, r18
    3578:	02 c0       	rjmp	.+4      	; 0x357e <nrk_gpio_toggle+0x5e>
    357a:	66 0f       	add	r22, r22
    357c:	77 1f       	adc	r23, r23
    357e:	8a 95       	dec	r24
    3580:	e2 f7       	brpl	.-8      	; 0x357a <nrk_gpio_toggle+0x5a>
    3582:	cb 01       	movw	r24, r22
    3584:	80 95       	com	r24
    3586:	84 23       	and	r24, r20
    3588:	82 b9       	out	0x02, r24	; 2
    358a:	16 c0       	rjmp	.+44     	; 0x35b8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    358c:	23 b1       	in	r18, 0x03	; 3
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	08 2e       	mov	r0, r24
    3592:	02 c0       	rjmp	.+4      	; 0x3598 <nrk_gpio_toggle+0x78>
    3594:	35 95       	asr	r19
    3596:	27 95       	ror	r18
    3598:	0a 94       	dec	r0
    359a:	e2 f7       	brpl	.-8      	; 0x3594 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    359c:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    359e:	20 fd       	sbrc	r18, 0
    35a0:	0d c0       	rjmp	.+26     	; 0x35bc <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    35a2:	21 e0       	ldi	r18, 0x01	; 1
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	b9 01       	movw	r22, r18
    35a8:	02 c0       	rjmp	.+4      	; 0x35ae <nrk_gpio_toggle+0x8e>
    35aa:	66 0f       	add	r22, r22
    35ac:	77 1f       	adc	r23, r23
    35ae:	8a 95       	dec	r24
    35b0:	e2 f7       	brpl	.-8      	; 0x35aa <nrk_gpio_toggle+0x8a>
    35b2:	cb 01       	movw	r24, r22
    35b4:	84 2b       	or	r24, r20
    35b6:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    35bc:	21 e0       	ldi	r18, 0x01	; 1
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	b9 01       	movw	r22, r18
    35c2:	02 c0       	rjmp	.+4      	; 0x35c8 <nrk_gpio_toggle+0xa8>
    35c4:	66 0f       	add	r22, r22
    35c6:	77 1f       	adc	r23, r23
    35c8:	8a 95       	dec	r24
    35ca:	e2 f7       	brpl	.-8      	; 0x35c4 <nrk_gpio_toggle+0xa4>
    35cc:	cb 01       	movw	r24, r22
    35ce:	80 95       	com	r24
    35d0:	84 23       	and	r24, r20
    35d2:	f1 cf       	rjmp	.-30     	; 0x35b6 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    35d4:	26 b1       	in	r18, 0x06	; 6
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	08 2e       	mov	r0, r24
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <nrk_gpio_toggle+0xc0>
    35dc:	35 95       	asr	r19
    35de:	27 95       	ror	r18
    35e0:	0a 94       	dec	r0
    35e2:	e2 f7       	brpl	.-8      	; 0x35dc <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    35e4:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    35e6:	20 fd       	sbrc	r18, 0
    35e8:	0b c0       	rjmp	.+22     	; 0x3600 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    35ea:	21 e0       	ldi	r18, 0x01	; 1
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	b9 01       	movw	r22, r18
    35f0:	02 c0       	rjmp	.+4      	; 0x35f6 <nrk_gpio_toggle+0xd6>
    35f2:	66 0f       	add	r22, r22
    35f4:	77 1f       	adc	r23, r23
    35f6:	8a 95       	dec	r24
    35f8:	e2 f7       	brpl	.-8      	; 0x35f2 <nrk_gpio_toggle+0xd2>
    35fa:	cb 01       	movw	r24, r22
    35fc:	84 2b       	or	r24, r20
    35fe:	0b c0       	rjmp	.+22     	; 0x3616 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    3600:	21 e0       	ldi	r18, 0x01	; 1
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	b9 01       	movw	r22, r18
    3606:	02 c0       	rjmp	.+4      	; 0x360c <nrk_gpio_toggle+0xec>
    3608:	66 0f       	add	r22, r22
    360a:	77 1f       	adc	r23, r23
    360c:	8a 95       	dec	r24
    360e:	e2 f7       	brpl	.-8      	; 0x3608 <nrk_gpio_toggle+0xe8>
    3610:	cb 01       	movw	r24, r22
    3612:	80 95       	com	r24
    3614:	84 23       	and	r24, r20
    3616:	88 b9       	out	0x08, r24	; 8
    3618:	cf cf       	rjmp	.-98     	; 0x35b8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    361a:	29 b1       	in	r18, 0x09	; 9
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	08 2e       	mov	r0, r24
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <nrk_gpio_toggle+0x106>
    3622:	35 95       	asr	r19
    3624:	27 95       	ror	r18
    3626:	0a 94       	dec	r0
    3628:	e2 f7       	brpl	.-8      	; 0x3622 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    362a:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    362c:	20 fd       	sbrc	r18, 0
    362e:	0b c0       	rjmp	.+22     	; 0x3646 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    3630:	21 e0       	ldi	r18, 0x01	; 1
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	b9 01       	movw	r22, r18
    3636:	02 c0       	rjmp	.+4      	; 0x363c <nrk_gpio_toggle+0x11c>
    3638:	66 0f       	add	r22, r22
    363a:	77 1f       	adc	r23, r23
    363c:	8a 95       	dec	r24
    363e:	e2 f7       	brpl	.-8      	; 0x3638 <nrk_gpio_toggle+0x118>
    3640:	cb 01       	movw	r24, r22
    3642:	84 2b       	or	r24, r20
    3644:	0b c0       	rjmp	.+22     	; 0x365c <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    3646:	21 e0       	ldi	r18, 0x01	; 1
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	b9 01       	movw	r22, r18
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <nrk_gpio_toggle+0x132>
    364e:	66 0f       	add	r22, r22
    3650:	77 1f       	adc	r23, r23
    3652:	8a 95       	dec	r24
    3654:	e2 f7       	brpl	.-8      	; 0x364e <nrk_gpio_toggle+0x12e>
    3656:	cb 01       	movw	r24, r22
    3658:	80 95       	com	r24
    365a:	84 23       	and	r24, r20
    365c:	8b b9       	out	0x0b, r24	; 11
    365e:	ac cf       	rjmp	.-168    	; 0x35b8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    3660:	2c b1       	in	r18, 0x0c	; 12
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	08 2e       	mov	r0, r24
    3666:	02 c0       	rjmp	.+4      	; 0x366c <nrk_gpio_toggle+0x14c>
    3668:	35 95       	asr	r19
    366a:	27 95       	ror	r18
    366c:	0a 94       	dec	r0
    366e:	e2 f7       	brpl	.-8      	; 0x3668 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3670:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    3672:	20 fd       	sbrc	r18, 0
    3674:	0b c0       	rjmp	.+22     	; 0x368c <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    3676:	21 e0       	ldi	r18, 0x01	; 1
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	b9 01       	movw	r22, r18
    367c:	02 c0       	rjmp	.+4      	; 0x3682 <nrk_gpio_toggle+0x162>
    367e:	66 0f       	add	r22, r22
    3680:	77 1f       	adc	r23, r23
    3682:	8a 95       	dec	r24
    3684:	e2 f7       	brpl	.-8      	; 0x367e <nrk_gpio_toggle+0x15e>
    3686:	cb 01       	movw	r24, r22
    3688:	84 2b       	or	r24, r20
    368a:	0b c0       	rjmp	.+22     	; 0x36a2 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    368c:	21 e0       	ldi	r18, 0x01	; 1
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	b9 01       	movw	r22, r18
    3692:	02 c0       	rjmp	.+4      	; 0x3698 <nrk_gpio_toggle+0x178>
    3694:	66 0f       	add	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	8a 95       	dec	r24
    369a:	e2 f7       	brpl	.-8      	; 0x3694 <nrk_gpio_toggle+0x174>
    369c:	cb 01       	movw	r24, r22
    369e:	80 95       	com	r24
    36a0:	84 23       	and	r24, r20
    36a2:	8e b9       	out	0x0e, r24	; 14
    36a4:	89 cf       	rjmp	.-238    	; 0x35b8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    36a6:	2f b1       	in	r18, 0x0f	; 15
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	08 2e       	mov	r0, r24
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <nrk_gpio_toggle+0x192>
    36ae:	35 95       	asr	r19
    36b0:	27 95       	ror	r18
    36b2:	0a 94       	dec	r0
    36b4:	e2 f7       	brpl	.-8      	; 0x36ae <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    36b6:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    36b8:	20 fd       	sbrc	r18, 0
    36ba:	0b c0       	rjmp	.+22     	; 0x36d2 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    36bc:	21 e0       	ldi	r18, 0x01	; 1
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	b9 01       	movw	r22, r18
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <nrk_gpio_toggle+0x1a8>
    36c4:	66 0f       	add	r22, r22
    36c6:	77 1f       	adc	r23, r23
    36c8:	8a 95       	dec	r24
    36ca:	e2 f7       	brpl	.-8      	; 0x36c4 <nrk_gpio_toggle+0x1a4>
    36cc:	cb 01       	movw	r24, r22
    36ce:	84 2b       	or	r24, r20
    36d0:	0b c0       	rjmp	.+22     	; 0x36e8 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    36d2:	21 e0       	ldi	r18, 0x01	; 1
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	b9 01       	movw	r22, r18
    36d8:	02 c0       	rjmp	.+4      	; 0x36de <nrk_gpio_toggle+0x1be>
    36da:	66 0f       	add	r22, r22
    36dc:	77 1f       	adc	r23, r23
    36de:	8a 95       	dec	r24
    36e0:	e2 f7       	brpl	.-8      	; 0x36da <nrk_gpio_toggle+0x1ba>
    36e2:	cb 01       	movw	r24, r22
    36e4:	80 95       	com	r24
    36e6:	84 23       	and	r24, r20
    36e8:	81 bb       	out	0x11, r24	; 17
    36ea:	66 cf       	rjmp	.-308    	; 0x35b8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    36ec:	22 b3       	in	r18, 0x12	; 18
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	08 2e       	mov	r0, r24
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <nrk_gpio_toggle+0x1d8>
    36f4:	35 95       	asr	r19
    36f6:	27 95       	ror	r18
    36f8:	0a 94       	dec	r0
    36fa:	e2 f7       	brpl	.-8      	; 0x36f4 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    36fc:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    36fe:	20 fd       	sbrc	r18, 0
    3700:	0b c0       	rjmp	.+22     	; 0x3718 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    3702:	21 e0       	ldi	r18, 0x01	; 1
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	b9 01       	movw	r22, r18
    3708:	02 c0       	rjmp	.+4      	; 0x370e <nrk_gpio_toggle+0x1ee>
    370a:	66 0f       	add	r22, r22
    370c:	77 1f       	adc	r23, r23
    370e:	8a 95       	dec	r24
    3710:	e2 f7       	brpl	.-8      	; 0x370a <nrk_gpio_toggle+0x1ea>
    3712:	cb 01       	movw	r24, r22
    3714:	84 2b       	or	r24, r20
    3716:	0b c0       	rjmp	.+22     	; 0x372e <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    3718:	21 e0       	ldi	r18, 0x01	; 1
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	b9 01       	movw	r22, r18
    371e:	02 c0       	rjmp	.+4      	; 0x3724 <nrk_gpio_toggle+0x204>
    3720:	66 0f       	add	r22, r22
    3722:	77 1f       	adc	r23, r23
    3724:	8a 95       	dec	r24
    3726:	e2 f7       	brpl	.-8      	; 0x3720 <nrk_gpio_toggle+0x200>
    3728:	cb 01       	movw	r24, r22
    372a:	80 95       	com	r24
    372c:	84 23       	and	r24, r20
    372e:	84 bb       	out	0x14, r24	; 20
    3730:	43 cf       	rjmp	.-378    	; 0x35b8 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    3732:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    3734:	08 95       	ret

00003736 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    3736:	8f 3f       	cpi	r24, 0xFF	; 255
    3738:	09 f4       	brne	.+2      	; 0x373c <nrk_gpio_direction+0x6>
    373a:	d5 c0       	rjmp	.+426    	; 0x38e6 <nrk_gpio_direction+0x1b0>
    373c:	e8 2f       	mov	r30, r24
    373e:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    3740:	4e 2f       	mov	r20, r30
    3742:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    3744:	61 11       	cpse	r22, r1
    3746:	67 c0       	rjmp	.+206    	; 0x3816 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    3748:	47 30       	cpi	r20, 0x07	; 7
    374a:	51 05       	cpc	r21, r1
    374c:	08 f0       	brcs	.+2      	; 0x3750 <nrk_gpio_direction+0x1a>
    374e:	cb c0       	rjmp	.+406    	; 0x38e6 <nrk_gpio_direction+0x1b0>
    3750:	fa 01       	movw	r30, r20
    3752:	e4 55       	subi	r30, 0x54	; 84
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	86 95       	lsr	r24
    3758:	86 95       	lsr	r24
    375a:	86 95       	lsr	r24
    375c:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    3760:	41 b1       	in	r20, 0x01	; 1
    3762:	21 e0       	ldi	r18, 0x01	; 1
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	b9 01       	movw	r22, r18
    3768:	02 c0       	rjmp	.+4      	; 0x376e <nrk_gpio_direction+0x38>
    376a:	66 0f       	add	r22, r22
    376c:	77 1f       	adc	r23, r23
    376e:	8a 95       	dec	r24
    3770:	e2 f7       	brpl	.-8      	; 0x376a <nrk_gpio_direction+0x34>
    3772:	cb 01       	movw	r24, r22
    3774:	80 95       	com	r24
    3776:	84 23       	and	r24, r20
    3778:	65 c0       	rjmp	.+202    	; 0x3844 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    377a:	44 b1       	in	r20, 0x04	; 4
    377c:	21 e0       	ldi	r18, 0x01	; 1
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	b9 01       	movw	r22, r18
    3782:	02 c0       	rjmp	.+4      	; 0x3788 <nrk_gpio_direction+0x52>
    3784:	66 0f       	add	r22, r22
    3786:	77 1f       	adc	r23, r23
    3788:	8a 95       	dec	r24
    378a:	e2 f7       	brpl	.-8      	; 0x3784 <nrk_gpio_direction+0x4e>
    378c:	cb 01       	movw	r24, r22
    378e:	80 95       	com	r24
    3790:	84 23       	and	r24, r20
    3792:	65 c0       	rjmp	.+202    	; 0x385e <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    3794:	47 b1       	in	r20, 0x07	; 7
    3796:	21 e0       	ldi	r18, 0x01	; 1
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	b9 01       	movw	r22, r18
    379c:	02 c0       	rjmp	.+4      	; 0x37a2 <nrk_gpio_direction+0x6c>
    379e:	66 0f       	add	r22, r22
    37a0:	77 1f       	adc	r23, r23
    37a2:	8a 95       	dec	r24
    37a4:	e2 f7       	brpl	.-8      	; 0x379e <nrk_gpio_direction+0x68>
    37a6:	cb 01       	movw	r24, r22
    37a8:	80 95       	com	r24
    37aa:	84 23       	and	r24, r20
    37ac:	65 c0       	rjmp	.+202    	; 0x3878 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    37ae:	4a b1       	in	r20, 0x0a	; 10
    37b0:	21 e0       	ldi	r18, 0x01	; 1
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	b9 01       	movw	r22, r18
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <nrk_gpio_direction+0x86>
    37b8:	66 0f       	add	r22, r22
    37ba:	77 1f       	adc	r23, r23
    37bc:	8a 95       	dec	r24
    37be:	e2 f7       	brpl	.-8      	; 0x37b8 <nrk_gpio_direction+0x82>
    37c0:	cb 01       	movw	r24, r22
    37c2:	80 95       	com	r24
    37c4:	84 23       	and	r24, r20
    37c6:	65 c0       	rjmp	.+202    	; 0x3892 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    37c8:	4d b1       	in	r20, 0x0d	; 13
    37ca:	21 e0       	ldi	r18, 0x01	; 1
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	b9 01       	movw	r22, r18
    37d0:	02 c0       	rjmp	.+4      	; 0x37d6 <nrk_gpio_direction+0xa0>
    37d2:	66 0f       	add	r22, r22
    37d4:	77 1f       	adc	r23, r23
    37d6:	8a 95       	dec	r24
    37d8:	e2 f7       	brpl	.-8      	; 0x37d2 <nrk_gpio_direction+0x9c>
    37da:	cb 01       	movw	r24, r22
    37dc:	80 95       	com	r24
    37de:	84 23       	and	r24, r20
    37e0:	65 c0       	rjmp	.+202    	; 0x38ac <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    37e2:	40 b3       	in	r20, 0x10	; 16
    37e4:	21 e0       	ldi	r18, 0x01	; 1
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	b9 01       	movw	r22, r18
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <nrk_gpio_direction+0xba>
    37ec:	66 0f       	add	r22, r22
    37ee:	77 1f       	adc	r23, r23
    37f0:	8a 95       	dec	r24
    37f2:	e2 f7       	brpl	.-8      	; 0x37ec <nrk_gpio_direction+0xb6>
    37f4:	cb 01       	movw	r24, r22
    37f6:	80 95       	com	r24
    37f8:	84 23       	and	r24, r20
    37fa:	65 c0       	rjmp	.+202    	; 0x38c6 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    37fc:	43 b3       	in	r20, 0x13	; 19
    37fe:	21 e0       	ldi	r18, 0x01	; 1
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	b9 01       	movw	r22, r18
    3804:	02 c0       	rjmp	.+4      	; 0x380a <nrk_gpio_direction+0xd4>
    3806:	66 0f       	add	r22, r22
    3808:	77 1f       	adc	r23, r23
    380a:	8a 95       	dec	r24
    380c:	e2 f7       	brpl	.-8      	; 0x3806 <nrk_gpio_direction+0xd0>
    380e:	cb 01       	movw	r24, r22
    3810:	80 95       	com	r24
    3812:	84 23       	and	r24, r20
    3814:	65 c0       	rjmp	.+202    	; 0x38e0 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    3816:	47 30       	cpi	r20, 0x07	; 7
    3818:	51 05       	cpc	r21, r1
    381a:	08 f0       	brcs	.+2      	; 0x381e <nrk_gpio_direction+0xe8>
    381c:	64 c0       	rjmp	.+200    	; 0x38e6 <nrk_gpio_direction+0x1b0>
    381e:	fa 01       	movw	r30, r20
    3820:	ed 54       	subi	r30, 0x4D	; 77
    3822:	ff 4f       	sbci	r31, 0xFF	; 255
    3824:	86 95       	lsr	r24
    3826:	86 95       	lsr	r24
    3828:	86 95       	lsr	r24
    382a:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    382e:	41 b1       	in	r20, 0x01	; 1
    3830:	21 e0       	ldi	r18, 0x01	; 1
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	b9 01       	movw	r22, r18
    3836:	02 c0       	rjmp	.+4      	; 0x383c <nrk_gpio_direction+0x106>
    3838:	66 0f       	add	r22, r22
    383a:	77 1f       	adc	r23, r23
    383c:	8a 95       	dec	r24
    383e:	e2 f7       	brpl	.-8      	; 0x3838 <nrk_gpio_direction+0x102>
    3840:	cb 01       	movw	r24, r22
    3842:	84 2b       	or	r24, r20
    3844:	81 b9       	out	0x01, r24	; 1
    3846:	4d c0       	rjmp	.+154    	; 0x38e2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    3848:	44 b1       	in	r20, 0x04	; 4
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	b9 01       	movw	r22, r18
    3850:	02 c0       	rjmp	.+4      	; 0x3856 <nrk_gpio_direction+0x120>
    3852:	66 0f       	add	r22, r22
    3854:	77 1f       	adc	r23, r23
    3856:	8a 95       	dec	r24
    3858:	e2 f7       	brpl	.-8      	; 0x3852 <nrk_gpio_direction+0x11c>
    385a:	cb 01       	movw	r24, r22
    385c:	84 2b       	or	r24, r20
    385e:	84 b9       	out	0x04, r24	; 4
    3860:	40 c0       	rjmp	.+128    	; 0x38e2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    3862:	47 b1       	in	r20, 0x07	; 7
    3864:	21 e0       	ldi	r18, 0x01	; 1
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	b9 01       	movw	r22, r18
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <nrk_gpio_direction+0x13a>
    386c:	66 0f       	add	r22, r22
    386e:	77 1f       	adc	r23, r23
    3870:	8a 95       	dec	r24
    3872:	e2 f7       	brpl	.-8      	; 0x386c <nrk_gpio_direction+0x136>
    3874:	cb 01       	movw	r24, r22
    3876:	84 2b       	or	r24, r20
    3878:	87 b9       	out	0x07, r24	; 7
    387a:	33 c0       	rjmp	.+102    	; 0x38e2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    387c:	4a b1       	in	r20, 0x0a	; 10
    387e:	21 e0       	ldi	r18, 0x01	; 1
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	b9 01       	movw	r22, r18
    3884:	02 c0       	rjmp	.+4      	; 0x388a <nrk_gpio_direction+0x154>
    3886:	66 0f       	add	r22, r22
    3888:	77 1f       	adc	r23, r23
    388a:	8a 95       	dec	r24
    388c:	e2 f7       	brpl	.-8      	; 0x3886 <nrk_gpio_direction+0x150>
    388e:	cb 01       	movw	r24, r22
    3890:	84 2b       	or	r24, r20
    3892:	8a b9       	out	0x0a, r24	; 10
    3894:	26 c0       	rjmp	.+76     	; 0x38e2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    3896:	4d b1       	in	r20, 0x0d	; 13
    3898:	21 e0       	ldi	r18, 0x01	; 1
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	b9 01       	movw	r22, r18
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <nrk_gpio_direction+0x16e>
    38a0:	66 0f       	add	r22, r22
    38a2:	77 1f       	adc	r23, r23
    38a4:	8a 95       	dec	r24
    38a6:	e2 f7       	brpl	.-8      	; 0x38a0 <nrk_gpio_direction+0x16a>
    38a8:	cb 01       	movw	r24, r22
    38aa:	84 2b       	or	r24, r20
    38ac:	8d b9       	out	0x0d, r24	; 13
    38ae:	19 c0       	rjmp	.+50     	; 0x38e2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    38b0:	40 b3       	in	r20, 0x10	; 16
    38b2:	21 e0       	ldi	r18, 0x01	; 1
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	b9 01       	movw	r22, r18
    38b8:	02 c0       	rjmp	.+4      	; 0x38be <nrk_gpio_direction+0x188>
    38ba:	66 0f       	add	r22, r22
    38bc:	77 1f       	adc	r23, r23
    38be:	8a 95       	dec	r24
    38c0:	e2 f7       	brpl	.-8      	; 0x38ba <nrk_gpio_direction+0x184>
    38c2:	cb 01       	movw	r24, r22
    38c4:	84 2b       	or	r24, r20
    38c6:	80 bb       	out	0x10, r24	; 16
    38c8:	0c c0       	rjmp	.+24     	; 0x38e2 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    38ca:	43 b3       	in	r20, 0x13	; 19
    38cc:	21 e0       	ldi	r18, 0x01	; 1
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	b9 01       	movw	r22, r18
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <nrk_gpio_direction+0x1a2>
    38d4:	66 0f       	add	r22, r22
    38d6:	77 1f       	adc	r23, r23
    38d8:	8a 95       	dec	r24
    38da:	e2 f7       	brpl	.-8      	; 0x38d4 <nrk_gpio_direction+0x19e>
    38dc:	cb 01       	movw	r24, r22
    38de:	84 2b       	or	r24, r20
    38e0:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    38e2:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    38e4:	08 95       	ret
                        default: return -1;
    38e6:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    38e8:	08 95       	ret

000038ea <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    38ea:	81 11       	cpse	r24, r1
    38ec:	06 c0       	rjmp	.+12     	; 0x38fa <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    38ee:	80 b1       	in	r24, 0x00	; 0
    38f0:	86 95       	lsr	r24
    38f2:	81 70       	andi	r24, 0x01	; 1
    38f4:	91 e0       	ldi	r25, 0x01	; 1
    38f6:	89 27       	eor	r24, r25
    38f8:	08 95       	ret
	} 
return -1;
    38fa:	8f ef       	ldi	r24, 0xFF	; 255
}
    38fc:	08 95       	ret

000038fe <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    38fe:	00 97       	sbiw	r24, 0x00	; 0
    3900:	11 f4       	brne	.+4      	; 0x3906 <nrk_led_toggle+0x8>
    3902:	83 e2       	ldi	r24, 0x23	; 35
    3904:	0d c0       	rjmp	.+26     	; 0x3920 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    3906:	81 30       	cpi	r24, 0x01	; 1
    3908:	91 05       	cpc	r25, r1
    390a:	11 f4       	brne	.+4      	; 0x3910 <nrk_led_toggle+0x12>
    390c:	8b e2       	ldi	r24, 0x2B	; 43
    390e:	08 c0       	rjmp	.+16     	; 0x3920 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    3910:	82 30       	cpi	r24, 0x02	; 2
    3912:	91 05       	cpc	r25, r1
    3914:	11 f4       	brne	.+4      	; 0x391a <nrk_led_toggle+0x1c>
    3916:	83 e3       	ldi	r24, 0x33	; 51
    3918:	03 c0       	rjmp	.+6      	; 0x3920 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    391a:	03 97       	sbiw	r24, 0x03	; 3
    391c:	29 f4       	brne	.+10     	; 0x3928 <nrk_led_toggle+0x2a>
    391e:	8b e3       	ldi	r24, 0x3B	; 59
    3920:	0e 94 90 1a 	call	0x3520	; 0x3520 <nrk_gpio_toggle>
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	08 95       	ret
return -1;
    3928:	8f ef       	ldi	r24, 0xFF	; 255
}
    392a:	08 95       	ret

0000392c <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	11 f4       	brne	.+4      	; 0x3934 <nrk_led_clr+0x8>
    3930:	83 e2       	ldi	r24, 0x23	; 35
    3932:	0d c0       	rjmp	.+26     	; 0x394e <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    3934:	81 30       	cpi	r24, 0x01	; 1
    3936:	91 05       	cpc	r25, r1
    3938:	11 f4       	brne	.+4      	; 0x393e <nrk_led_clr+0x12>
    393a:	8b e2       	ldi	r24, 0x2B	; 43
    393c:	08 c0       	rjmp	.+16     	; 0x394e <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    393e:	82 30       	cpi	r24, 0x02	; 2
    3940:	91 05       	cpc	r25, r1
    3942:	11 f4       	brne	.+4      	; 0x3948 <nrk_led_clr+0x1c>
    3944:	83 e3       	ldi	r24, 0x33	; 51
    3946:	03 c0       	rjmp	.+6      	; 0x394e <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    3948:	03 97       	sbiw	r24, 0x03	; 3
    394a:	29 f4       	brne	.+10     	; 0x3956 <nrk_led_clr+0x2a>
    394c:	8b e3       	ldi	r24, 0x3B	; 59
    394e:	0e 94 8b 19 	call	0x3316	; 0x3316 <nrk_gpio_set>
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	08 95       	ret
return -1;
    3956:	8f ef       	ldi	r24, 0xFF	; 255
}
    3958:	08 95       	ret

0000395a <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	11 f4       	brne	.+4      	; 0x3962 <nrk_led_set+0x8>
    395e:	83 e2       	ldi	r24, 0x23	; 35
    3960:	0d c0       	rjmp	.+26     	; 0x397c <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    3962:	81 30       	cpi	r24, 0x01	; 1
    3964:	91 05       	cpc	r25, r1
    3966:	11 f4       	brne	.+4      	; 0x396c <nrk_led_set+0x12>
    3968:	8b e2       	ldi	r24, 0x2B	; 43
    396a:	08 c0       	rjmp	.+16     	; 0x397c <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    396c:	82 30       	cpi	r24, 0x02	; 2
    396e:	91 05       	cpc	r25, r1
    3970:	11 f4       	brne	.+4      	; 0x3976 <nrk_led_set+0x1c>
    3972:	83 e3       	ldi	r24, 0x33	; 51
    3974:	03 c0       	rjmp	.+6      	; 0x397c <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    3976:	03 97       	sbiw	r24, 0x03	; 3
    3978:	29 f4       	brne	.+10     	; 0x3984 <nrk_led_set+0x2a>
    397a:	8b e3       	ldi	r24, 0x3B	; 59
    397c:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <nrk_gpio_clr>
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	08 95       	ret
return -1;
    3984:	8f ef       	ldi	r24, 0xFF	; 255
}
    3986:	08 95       	ret

00003988 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    3988:	88 23       	and	r24, r24
    398a:	19 f0       	breq	.+6      	; 0x3992 <nrk_gpio_pullups+0xa>
    398c:	85 b7       	in	r24, 0x35	; 53
    398e:	8f 7e       	andi	r24, 0xEF	; 239
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    3992:	85 b7       	in	r24, 0x35	; 53
    3994:	80 61       	ori	r24, 0x10	; 16
    3996:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	08 95       	ret

0000399c <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    399c:	90 91 c8 00 	lds	r25, 0x00C8
    39a0:	95 ff       	sbrs	r25, 5
    39a2:	fc cf       	rjmp	.-8      	; 0x399c <putc1>
    39a4:	80 93 ce 00 	sts	0x00CE, r24
    39a8:	08 95       	ret

000039aa <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    39aa:	90 93 c5 00 	sts	0x00C5, r25
    39ae:	80 93 c4 00 	sts	0x00C4, r24
    39b2:	86 e0       	ldi	r24, 0x06	; 6
    39b4:	80 93 c2 00 	sts	0x00C2, r24
    39b8:	e1 ec       	ldi	r30, 0xC1	; 193
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	8b 7f       	andi	r24, 0xFB	; 251
    39c0:	80 83       	st	Z, r24
    39c2:	a0 ec       	ldi	r26, 0xC0	; 192
    39c4:	b0 e0       	ldi	r27, 0x00	; 0
    39c6:	8c 91       	ld	r24, X
    39c8:	82 60       	ori	r24, 0x02	; 2
    39ca:	8c 93       	st	X, r24
ENABLE_UART0();
    39cc:	80 81       	ld	r24, Z
    39ce:	88 61       	ori	r24, 0x18	; 24
    39d0:	80 83       	st	Z, r24
    39d2:	08 95       	ret

000039d4 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    39d4:	90 93 cd 00 	sts	0x00CD, r25
    39d8:	80 93 cc 00 	sts	0x00CC, r24
    39dc:	86 e0       	ldi	r24, 0x06	; 6
    39de:	80 93 ca 00 	sts	0x00CA, r24
    39e2:	e9 ec       	ldi	r30, 0xC9	; 201
    39e4:	f0 e0       	ldi	r31, 0x00	; 0
    39e6:	80 81       	ld	r24, Z
    39e8:	8b 7f       	andi	r24, 0xFB	; 251
    39ea:	80 83       	st	Z, r24
    39ec:	a8 ec       	ldi	r26, 0xC8	; 200
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	8c 91       	ld	r24, X
    39f2:	82 60       	ori	r24, 0x02	; 2
    39f4:	8c 93       	st	X, r24
ENABLE_UART1();
    39f6:	80 81       	ld	r24, Z
    39f8:	88 61       	ori	r24, 0x18	; 24
    39fa:	80 83       	st	Z, r24
    39fc:	08 95       	ret

000039fe <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    39fe:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    3a02:	6a e4       	ldi	r22, 0x4A	; 74
    3a04:	79 e1       	ldi	r23, 0x19	; 25
    3a06:	83 eb       	ldi	r24, 0xB3	; 179
    3a08:	98 e1       	ldi	r25, 0x18	; 24
    3a0a:	0e 94 89 36 	call	0x6d12	; 0x6d12 <fdevopen>
    3a0e:	90 93 29 0d 	sts	0x0D29, r25
    3a12:	80 93 28 0d 	sts	0x0D28, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    3a16:	6a e4       	ldi	r22, 0x4A	; 74
    3a18:	79 e1       	ldi	r23, 0x19	; 25
    3a1a:	83 eb       	ldi	r24, 0xB3	; 179
    3a1c:	98 e1       	ldi	r25, 0x18	; 24
    3a1e:	0e 94 89 36 	call	0x6d12	; 0x6d12 <fdevopen>
    3a22:	90 93 27 0d 	sts	0x0D27, r25
    3a26:	80 93 26 0d 	sts	0x0D26, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    3a2a:	0e 94 10 22 	call	0x4420	; 0x4420 <nrk_signal_create>
    3a2e:	80 93 45 05 	sts	0x0545, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3a32:	8f 3f       	cpi	r24, 0xFF	; 255
    3a34:	19 f4       	brne	.+6      	; 0x3a3c <nrk_setup_uart+0x3e>
    3a36:	8e e0       	ldi	r24, 0x0E	; 14
    3a38:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_error_add>
   uart_rx_buf_start=0;
    3a3c:	10 92 59 05 	sts	0x0559, r1
    3a40:	10 92 58 05 	sts	0x0558, r1
   uart_rx_buf_end=0;
    3a44:	10 92 57 05 	sts	0x0557, r1
    3a48:	10 92 56 05 	sts	0x0556, r1
   ENABLE_UART0_RX_INT();
    3a4c:	80 91 c1 00 	lds	r24, 0x00C1
    3a50:	80 68       	ori	r24, 0x80	; 128
    3a52:	80 93 c1 00 	sts	0x00C1, r24
    3a56:	08 95       	ret

00003a58 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    3a58:	80 91 c8 00 	lds	r24, 0x00C8
    3a5c:	87 ff       	sbrs	r24, 7
    3a5e:	fc cf       	rjmp	.-8      	; 0x3a58 <getc1>
    3a60:	80 91 c8 00 	lds	r24, 0x00C8
    3a64:	8f 77       	andi	r24, 0x7F	; 127
    3a66:	80 93 c8 00 	sts	0x00C8, r24
    3a6a:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    3a6e:	08 95       	ret

00003a70 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	d1 f7       	brne	.-12     	; 0x3a70 <halWait>

} // halWait
    3a7c:	08 95       	ret

00003a7e <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    3a7e:	0c 94 e4 37 	jmp	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>

00003a82 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    3a82:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <__eewr_byte_m128rfa1>
}
    3a86:	08 95       	ret

00003a88 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    3a88:	ef 92       	push	r14
    3a8a:	ff 92       	push	r15
    3a8c:	0f 93       	push	r16
    3a8e:	1f 93       	push	r17
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
    3a94:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3a9e:	18 2f       	mov	r17, r24
    3aa0:	f7 01       	movw	r30, r14
    3aa2:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3aac:	08 2f       	mov	r16, r24
    3aae:	f7 01       	movw	r30, r14
    3ab0:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    3ab2:	82 e0       	ldi	r24, 0x02	; 2
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3aba:	d8 2f       	mov	r29, r24
    3abc:	f7 01       	movw	r30, r14
    3abe:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    3ac0:	83 e0       	ldi	r24, 0x03	; 3
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3ac8:	c8 2f       	mov	r28, r24
    3aca:	f7 01       	movw	r30, r14
    3acc:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    3ace:	84 e0       	ldi	r24, 0x04	; 4
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3ad6:	10 0f       	add	r17, r16
    3ad8:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    3ada:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    3adc:	8c 17       	cp	r24, r28
    3ade:	11 f0       	breq	.+4      	; 0x3ae4 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    3ae0:	8f ef       	ldi	r24, 0xFF	; 255
    3ae2:	01 c0       	rjmp	.+2      	; 0x3ae6 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    3ae4:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    3ae6:	df 91       	pop	r29
    3ae8:	cf 91       	pop	r28
    3aea:	1f 91       	pop	r17
    3aec:	0f 91       	pop	r16
    3aee:	ff 90       	pop	r15
    3af0:	ef 90       	pop	r14
    3af2:	08 95       	ret

00003af4 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    3afa:	85 e0       	ldi	r24, 0x05	; 5
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3b02:	88 83       	st	Y, r24
return NRK_OK;
}
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	08 95       	ret

00003b0c <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	60 81       	ld	r22, Z
    3b10:	86 e0       	ldi	r24, 0x06	; 6
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	08 95       	ret

00003b1c <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    3b1c:	cf 93       	push	r28
    3b1e:	df 93       	push	r29
    3b20:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    3b22:	86 e0       	ldi	r24, 0x06	; 6
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3b2a:	88 83       	st	Y, r24
  return NRK_OK;
}
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	08 95       	ret

00003b34 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	8c 01       	movw	r16, r24
    3b3e:	c0 e0       	ldi	r28, 0x00	; 0
    3b40:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    3b42:	ce 01       	movw	r24, r28
    3b44:	08 96       	adiw	r24, 0x08	; 8
    3b46:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3b4a:	f8 01       	movw	r30, r16
    3b4c:	81 93       	st	Z+, r24
    3b4e:	8f 01       	movw	r16, r30
    3b50:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    3b52:	c0 31       	cpi	r28, 0x10	; 16
    3b54:	d1 05       	cpc	r29, r1
    3b56:	a9 f7       	brne	.-22     	; 0x3b42 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	1f 91       	pop	r17
    3b60:	0f 91       	pop	r16
    3b62:	08 95       	ret

00003b64 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	8c 01       	movw	r16, r24
    3b6e:	c0 e0       	ldi	r28, 0x00	; 0
    3b70:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    3b72:	f8 01       	movw	r30, r16
    3b74:	61 91       	ld	r22, Z+
    3b76:	8f 01       	movw	r16, r30
    3b78:	ce 01       	movw	r24, r28
    3b7a:	08 96       	adiw	r24, 0x08	; 8
    3b7c:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <__eewr_byte_m128rfa1>
    3b80:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    3b82:	c0 31       	cpi	r28, 0x10	; 16
    3b84:	d1 05       	cpc	r29, r1
    3b86:	a9 f7       	brne	.-22     	; 0x3b72 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	df 91       	pop	r29
    3b8c:	cf 91       	pop	r28
    3b8e:	1f 91       	pop	r17
    3b90:	0f 91       	pop	r16
    3b92:	08 95       	ret

00003b94 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    3b9a:	87 e0       	ldi	r24, 0x07	; 7
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <__eerd_byte_m128rfa1>
    3ba2:	88 83       	st	Y, r24
  return NRK_OK;
}
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	df 91       	pop	r29
    3ba8:	cf 91       	pop	r28
    3baa:	08 95       	ret

00003bac <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    3bac:	fc 01       	movw	r30, r24
    3bae:	60 81       	ld	r22, Z
    3bb0:	87 e0       	ldi	r24, 0x07	; 7
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	0e 94 ec 37 	call	0x6fd8	; 0x6fd8 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	08 95       	ret

00003bbc <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    3bbc:	f8 94       	cli
    3bbe:	08 95       	ret

00003bc0 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    3bc0:	78 94       	sei
    3bc2:	08 95       	ret

00003bc4 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    3bc4:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
while(1);
    3bc8:	ff cf       	rjmp	.-2      	; 0x3bc8 <nrk_halt+0x4>

00003bca <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    3bca:	1f 93       	push	r17
    3bcc:	cf 93       	push	r28
    3bce:	df 93       	push	r29
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
    3bd4:	a3 97       	sbiw	r28, 0x23	; 35
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    3be0:	0e 94 10 22 	call	0x4420	; 0x4420 <nrk_signal_create>
    3be4:	80 93 eb 0c 	sts	0x0CEB, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    3be8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bea:	21 f4       	brne	.+8      	; 0x3bf4 <nrk_init+0x2a>
    3bec:	60 e0       	ldi	r22, 0x00	; 0
    3bee:	8e e0       	ldi	r24, 0x0E	; 14
    3bf0:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    3bf4:	0e 94 97 30 	call	0x612e	; 0x612e <_nrk_startup_error>
    3bf8:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3bfa:	80 ff       	sbrs	r24, 0
    3bfc:	04 c0       	rjmp	.+8      	; 0x3c06 <nrk_init+0x3c>
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	86 e0       	ldi	r24, 0x06	; 6
    3c02:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    3c06:	11 ff       	sbrs	r17, 1
    3c08:	04 c0       	rjmp	.+8      	; 0x3c12 <nrk_init+0x48>
    3c0a:	60 e0       	ldi	r22, 0x00	; 0
    3c0c:	84 e1       	ldi	r24, 0x14	; 20
    3c0e:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    3c12:	12 ff       	sbrs	r17, 2
    3c14:	04 c0       	rjmp	.+8      	; 0x3c1e <nrk_init+0x54>
    3c16:	60 e0       	ldi	r22, 0x00	; 0
    3c18:	83 e1       	ldi	r24, 0x13	; 19
    3c1a:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    3c1e:	10 92 ee 0c 	sts	0x0CEE, r1
    nrk_cur_task_TCB = NULL;
    3c22:	10 92 fc 0c 	sts	0x0CFC, r1
    3c26:	10 92 fb 0c 	sts	0x0CFB, r1
    
    nrk_high_ready_TCB = NULL;
    3c2a:	10 92 ed 0c 	sts	0x0CED, r1
    3c2e:	10 92 ec 0c 	sts	0x0CEC, r1
    nrk_high_ready_prio = 0; 
    3c32:	10 92 fd 0c 	sts	0x0CFD, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    3c36:	10 92 fa 0c 	sts	0x0CFA, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3c3a:	8f ef       	ldi	r24, 0xFF	; 255
    3c3c:	80 93 e4 0c 	sts	0x0CE4, r24
    nrk_sem_list[i].value=-1;
    3c40:	80 93 e6 0c 	sts	0x0CE6, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3c44:	80 93 e5 0c 	sts	0x0CE5, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3c48:	80 93 e7 0c 	sts	0x0CE7, r24
    nrk_sem_list[i].value=-1;
    3c4c:	80 93 e9 0c 	sts	0x0CE9, r24
    nrk_sem_list[i].resource_ceiling=-1;
    3c50:	80 93 e8 0c 	sts	0x0CE8, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3c54:	93 e6       	ldi	r25, 0x63	; 99
    3c56:	90 93 40 0c 	sts	0x0C40, r25
        nrk_task_TCB[i].task_ID = -1; 
    3c5a:	80 93 3e 0c 	sts	0x0C3E, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3c5e:	90 93 6b 0c 	sts	0x0C6B, r25
        nrk_task_TCB[i].task_ID = -1; 
    3c62:	80 93 69 0c 	sts	0x0C69, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3c66:	90 93 96 0c 	sts	0x0C96, r25
        nrk_task_TCB[i].task_ID = -1; 
    3c6a:	80 93 94 0c 	sts	0x0C94, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3c6e:	90 93 c1 0c 	sts	0x0CC1, r25
        nrk_task_TCB[i].task_ID = -1; 
    3c72:	80 93 bf 0c 	sts	0x0CBF, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3c76:	8e ef       	ldi	r24, 0xFE	; 254
    3c78:	9c e0       	ldi	r25, 0x0C	; 12
    3c7a:	23 e0       	ldi	r18, 0x03	; 3
    3c7c:	3d e0       	ldi	r19, 0x0D	; 13
    3c7e:	30 93 02 0d 	sts	0x0D02, r19
    3c82:	20 93 01 0d 	sts	0x0D01, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3c86:	90 93 05 0d 	sts	0x0D05, r25
    3c8a:	80 93 04 0d 	sts	0x0D04, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3c8e:	48 e0       	ldi	r20, 0x08	; 8
    3c90:	5d e0       	ldi	r21, 0x0D	; 13
    3c92:	50 93 07 0d 	sts	0x0D07, r21
    3c96:	40 93 06 0d 	sts	0x0D06, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3c9a:	30 93 0a 0d 	sts	0x0D0A, r19
    3c9e:	20 93 09 0d 	sts	0x0D09, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3ca2:	2d e0       	ldi	r18, 0x0D	; 13
    3ca4:	3d e0       	ldi	r19, 0x0D	; 13
    3ca6:	30 93 0c 0d 	sts	0x0D0C, r19
    3caa:	20 93 0b 0d 	sts	0x0D0B, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3cae:	50 93 0f 0d 	sts	0x0D0F, r21
    3cb2:	40 93 0e 0d 	sts	0x0D0E, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    3cb6:	42 e1       	ldi	r20, 0x12	; 18
    3cb8:	5d e0       	ldi	r21, 0x0D	; 13
    3cba:	50 93 11 0d 	sts	0x0D11, r21
    3cbe:	40 93 10 0d 	sts	0x0D10, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    3cc2:	30 93 14 0d 	sts	0x0D14, r19
    3cc6:	20 93 13 0d 	sts	0x0D13, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    3cca:	10 92 00 0d 	sts	0x0D00, r1
    3cce:	10 92 ff 0c 	sts	0x0CFF, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    3cd2:	10 92 16 0d 	sts	0x0D16, r1
    3cd6:	10 92 15 0d 	sts	0x0D15, r1
	_head_node = NULL;
    3cda:	10 92 f1 0c 	sts	0x0CF1, r1
    3cde:	10 92 f0 0c 	sts	0x0CF0, r1
	_free_node = &_nrk_readyQ[0];
    3ce2:	90 93 35 0c 	sts	0x0C35, r25
    3ce6:	80 93 34 0c 	sts	0x0C34, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3cea:	60 e0       	ldi	r22, 0x00	; 0
    3cec:	7b e2       	ldi	r23, 0x2B	; 43
    3cee:	ce 01       	movw	r24, r28
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	0e 94 cf 32 	call	0x659e	; 0x659e <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    3cf6:	40 e0       	ldi	r20, 0x00	; 0
    3cf8:	52 e0       	ldi	r21, 0x02	; 2
    3cfa:	6c e1       	ldi	r22, 0x1C	; 28
    3cfc:	79 e0       	ldi	r23, 0x09	; 9
    3cfe:	ce 01       	movw	r24, r28
    3d00:	01 96       	adiw	r24, 0x01	; 1
    3d02:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    3d06:	85 e5       	ldi	r24, 0x55	; 85
    3d08:	80 93 1c 09 	sts	0x091C, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    3d0c:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    3d0e:	1c 86       	std	Y+12, r1	; 0x0c
    3d10:	1d 86       	std	Y+13, r1	; 0x0d
    3d12:	1e 86       	std	Y+14, r1	; 0x0e
    3d14:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    3d16:	18 8a       	std	Y+16, r1	; 0x10
    3d18:	19 8a       	std	Y+17, r1	; 0x11
    3d1a:	1a 8a       	std	Y+18, r1	; 0x12
    3d1c:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    3d1e:	1c 8a       	std	Y+20, r1	; 0x14
    3d20:	1d 8a       	std	Y+21, r1	; 0x15
    3d22:	1e 8a       	std	Y+22, r1	; 0x16
    3d24:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    3d26:	18 8e       	std	Y+24, r1	; 0x18
    3d28:	19 8e       	std	Y+25, r1	; 0x19
    3d2a:	1a 8e       	std	Y+26, r1	; 0x1a
    3d2c:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    3d2e:	1c 8e       	std	Y+28, r1	; 0x1c
    3d30:	1d 8e       	std	Y+29, r1	; 0x1d
    3d32:	1e 8e       	std	Y+30, r1	; 0x1e
    3d34:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    3d36:	18 a2       	std	Y+32, r1	; 0x20
    3d38:	19 a2       	std	Y+33, r1	; 0x21
    3d3a:	1a a2       	std	Y+34, r1	; 0x22
    3d3c:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    3d42:	92 e0       	ldi	r25, 0x02	; 2
    3d44:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    3d46:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    3d48:	ce 01       	movw	r24, r28
    3d4a:	01 96       	adiw	r24, 0x01	; 1
    3d4c:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <nrk_activate_task>
	
}
    3d50:	a3 96       	adiw	r28, 0x23	; 35
    3d52:	0f b6       	in	r0, 0x3f	; 63
    3d54:	f8 94       	cli
    3d56:	de bf       	out	0x3e, r29	; 62
    3d58:	0f be       	out	0x3f, r0	; 63
    3d5a:	cd bf       	out	0x3d, r28	; 61
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	1f 91       	pop	r17
    3d62:	08 95       	ret

00003d64 <nrk_start>:




void nrk_start (void)
{
    3d64:	0e e3       	ldi	r16, 0x3E	; 62
    3d66:	1c e0       	ldi	r17, 0x0C	; 12
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3d68:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    3d6e:	ff ef       	ldi	r31, 0xFF	; 255
    3d70:	df 12       	cpse	r13, r31
    3d72:	22 c0       	rjmp	.+68     	; 0x3db8 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3d74:	cf 5f       	subi	r28, 0xFF	; 255
    3d76:	05 5d       	subi	r16, 0xD5	; 213
    3d78:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7a:	c4 30       	cpi	r28, 0x04	; 4
    3d7c:	b1 f7       	brne	.-20     	; 0x3d6a <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    3d7e:	0e 94 24 25 	call	0x4a48	; 0x4a48 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3d82:	2b e2       	ldi	r18, 0x2B	; 43
    3d84:	82 02       	muls	r24, r18
    3d86:	c0 01       	movw	r24, r0
    3d88:	11 24       	eor	r1, r1
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	ea 5c       	subi	r30, 0xCA	; 202
    3d8e:	f3 4f       	sbci	r31, 0xF3	; 243
    3d90:	82 85       	ldd	r24, Z+10	; 0x0a
    3d92:	80 93 fd 0c 	sts	0x0CFD, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3d96:	f0 93 fc 0c 	sts	0x0CFC, r31
    3d9a:	e0 93 fb 0c 	sts	0x0CFB, r30
    3d9e:	f0 93 ed 0c 	sts	0x0CED, r31
    3da2:	e0 93 ec 0c 	sts	0x0CEC, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    3da6:	80 93 ee 0c 	sts	0x0CEE, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3daa:	0e 94 45 33 	call	0x668a	; 0x668a <nrk_target_start>
    nrk_stack_pointer_init(); 
    3dae:	0e 94 2f 33 	call	0x665e	; 0x665e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    3db2:	0e 94 49 33 	call	0x6692	; 0x6692 <nrk_start_high_ready_task>
    3db6:	16 c0       	rjmp	.+44     	; 0x3de4 <nrk_start+0x80>
    3db8:	8e e3       	ldi	r24, 0x3E	; 62
    3dba:	e8 2e       	mov	r14, r24
    3dbc:	8c e0       	ldi	r24, 0x0C	; 12
    3dbe:	f8 2e       	mov	r15, r24
    3dc0:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    3dc2:	cd 17       	cp	r28, r29
    3dc4:	41 f0       	breq	.+16     	; 0x3dd6 <nrk_start+0x72>
    3dc6:	f7 01       	movw	r30, r14
    3dc8:	80 81       	ld	r24, Z
    3dca:	d8 12       	cpse	r13, r24
    3dcc:	04 c0       	rjmp	.+8      	; 0x3dd6 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    3dce:	6d 2d       	mov	r22, r13
    3dd0:	85 e0       	ldi	r24, 0x05	; 5
    3dd2:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    3dd6:	df 5f       	subi	r29, 0xFF	; 255
    3dd8:	fb e2       	ldi	r31, 0x2B	; 43
    3dda:	ef 0e       	add	r14, r31
    3ddc:	f1 1c       	adc	r15, r1
    3dde:	d4 30       	cpi	r29, 0x04	; 4
    3de0:	81 f7       	brne	.-32     	; 0x3dc2 <nrk_start+0x5e>
    3de2:	c8 cf       	rjmp	.-112    	; 0x3d74 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    3de4:	ff cf       	rjmp	.-2      	; 0x3de4 <nrk_start+0x80>

00003de6 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    3de6:	cf 92       	push	r12
    3de8:	df 92       	push	r13
    3dea:	ef 92       	push	r14
    3dec:	ff 92       	push	r15
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	ec 01       	movw	r28, r24
    3df8:	8b 01       	movw	r16, r22
    3dfa:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    3dfc:	89 85       	ldd	r24, Y+9	; 0x09
    3dfe:	82 30       	cpi	r24, 0x02	; 2
    3e00:	21 f0       	breq	.+8      	; 0x3e0a <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    3e02:	80 91 ea 0c 	lds	r24, 0x0CEA
    3e06:	88 83       	st	Y, r24
    3e08:	01 c0       	rjmp	.+2      	; 0x3e0c <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    3e0a:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    3e0c:	80 91 ea 0c 	lds	r24, 0x0CEA
    3e10:	84 30       	cpi	r24, 0x04	; 4
    3e12:	20 f0       	brcs	.+8      	; 0x3e1c <nrk_TCB_init+0x36>
    3e14:	60 e0       	ldi	r22, 0x00	; 0
    3e16:	87 e0       	ldi	r24, 0x07	; 7
    3e18:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    3e1c:	89 85       	ldd	r24, Y+9	; 0x09
    3e1e:	82 30       	cpi	r24, 0x02	; 2
    3e20:	29 f0       	breq	.+10     	; 0x3e2c <nrk_TCB_init+0x46>
    3e22:	80 91 ea 0c 	lds	r24, 0x0CEA
    3e26:	8f 5f       	subi	r24, 0xFF	; 255
    3e28:	80 93 ea 0c 	sts	0x0CEA, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    3e2c:	80 91 ea 0c 	lds	r24, 0x0CEA
    3e30:	81 11       	cpse	r24, r1
    3e32:	03 c0       	rjmp	.+6      	; 0x3e3a <nrk_TCB_init+0x54>
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	80 93 ea 0c 	sts	0x0CEA, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    3e3a:	38 81       	ld	r19, Y
    3e3c:	2b e2       	ldi	r18, 0x2B	; 43
    3e3e:	32 03       	mulsu	r19, r18
    3e40:	f0 01       	movw	r30, r0
    3e42:	11 24       	eor	r1, r1
    3e44:	ea 5c       	subi	r30, 0xCA	; 202
    3e46:	f3 4f       	sbci	r31, 0xF3	; 243
    3e48:	11 83       	std	Z+1, r17	; 0x01
    3e4a:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    3e4c:	88 85       	ldd	r24, Y+8	; 0x08
    3e4e:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    3e50:	38 81       	ld	r19, Y
    3e52:	32 03       	mulsu	r19, r18
    3e54:	f0 01       	movw	r30, r0
    3e56:	11 24       	eor	r1, r1
    3e58:	ea 5c       	subi	r30, 0xCA	; 202
    3e5a:	f3 4f       	sbci	r31, 0xF3	; 243
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
    3e5e:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    3e60:	38 81       	ld	r19, Y
    3e62:	32 03       	mulsu	r19, r18
    3e64:	f0 01       	movw	r30, r0
    3e66:	11 24       	eor	r1, r1
    3e68:	ea 5c       	subi	r30, 0xCA	; 202
    3e6a:	f3 4f       	sbci	r31, 0xF3	; 243
    3e6c:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    3e6e:	08 81       	ld	r16, Y
    3e70:	02 03       	mulsu	r16, r18
    3e72:	80 01       	movw	r16, r0
    3e74:	11 24       	eor	r1, r1
    3e76:	0a 5c       	subi	r16, 0xCA	; 202
    3e78:	13 4f       	sbci	r17, 0xF3	; 243
    3e7a:	f8 01       	movw	r30, r16
    3e7c:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    3e7e:	ce 01       	movw	r24, r28
    3e80:	0b 96       	adiw	r24, 0x0b	; 11
    3e82:	0e 94 92 2a 	call	0x5524	; 0x5524 <_nrk_time_to_ticks_long>
    3e86:	f8 01       	movw	r30, r16
    3e88:	61 a3       	std	Z+33, r22	; 0x21
    3e8a:	72 a3       	std	Z+34, r23	; 0x22
    3e8c:	83 a3       	std	Z+35, r24	; 0x23
    3e8e:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    3e90:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e92:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e94:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e96:	be 85       	ldd	r27, Y+14	; 0x0e
    3e98:	88 33       	cpi	r24, 0x38	; 56
    3e9a:	99 48       	sbci	r25, 0x89	; 137
    3e9c:	a1 44       	sbci	r26, 0x41	; 65
    3e9e:	b1 05       	cpc	r27, r1
    3ea0:	20 f0       	brcs	.+8      	; 0x3eaa <nrk_TCB_init+0xc4>
    3ea2:	68 81       	ld	r22, Y
    3ea4:	86 e1       	ldi	r24, 0x16	; 22
    3ea6:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    3eaa:	c8 80       	ld	r12, Y
    3eac:	dd 24       	eor	r13, r13
    3eae:	c7 fc       	sbrc	r12, 7
    3eb0:	d0 94       	com	r13
    3eb2:	ce 01       	movw	r24, r28
    3eb4:	4b 96       	adiw	r24, 0x1b	; 27
    3eb6:	0e 94 92 2a 	call	0x5524	; 0x5524 <_nrk_time_to_ticks_long>
    3eba:	1b e2       	ldi	r17, 0x2B	; 43
    3ebc:	1c 9d       	mul	r17, r12
    3ebe:	f0 01       	movw	r30, r0
    3ec0:	1d 9d       	mul	r17, r13
    3ec2:	f0 0d       	add	r31, r0
    3ec4:	11 24       	eor	r1, r1
    3ec6:	ea 5c       	subi	r30, 0xCA	; 202
    3ec8:	f3 4f       	sbci	r31, 0xF3	; 243
    3eca:	65 8b       	std	Z+21, r22	; 0x15
    3ecc:	76 8b       	std	Z+22, r23	; 0x16
    3ece:	87 8b       	std	Z+23, r24	; 0x17
    3ed0:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    3ed2:	28 81       	ld	r18, Y
    3ed4:	21 03       	mulsu	r18, r17
    3ed6:	c0 01       	movw	r24, r0
    3ed8:	11 24       	eor	r1, r1
    3eda:	9c 01       	movw	r18, r24
    3edc:	2a 5c       	subi	r18, 0xCA	; 202
    3ede:	33 4f       	sbci	r19, 0xF3	; 243
    3ee0:	69 01       	movw	r12, r18
    3ee2:	f9 01       	movw	r30, r18
    3ee4:	45 89       	ldd	r20, Z+21	; 0x15
    3ee6:	56 89       	ldd	r21, Z+22	; 0x16
    3ee8:	67 89       	ldd	r22, Z+23	; 0x17
    3eea:	70 8d       	ldd	r23, Z+24	; 0x18
    3eec:	81 a1       	ldd	r24, Z+33	; 0x21
    3eee:	92 a1       	ldd	r25, Z+34	; 0x22
    3ef0:	a3 a1       	ldd	r26, Z+35	; 0x23
    3ef2:	b4 a1       	ldd	r27, Z+36	; 0x24
    3ef4:	84 0f       	add	r24, r20
    3ef6:	95 1f       	adc	r25, r21
    3ef8:	a6 1f       	adc	r26, r22
    3efa:	b7 1f       	adc	r27, r23
    3efc:	81 8f       	std	Z+25, r24	; 0x19
    3efe:	92 8f       	std	Z+26, r25	; 0x1a
    3f00:	a3 8f       	std	Z+27, r26	; 0x1b
    3f02:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    3f04:	ce 01       	movw	r24, r28
    3f06:	43 96       	adiw	r24, 0x13	; 19
    3f08:	0e 94 92 2a 	call	0x5524	; 0x5524 <_nrk_time_to_ticks_long>
    3f0c:	f6 01       	movw	r30, r12
    3f0e:	65 a3       	std	Z+37, r22	; 0x25
    3f10:	76 a3       	std	Z+38, r23	; 0x26
    3f12:	87 a3       	std	Z+39, r24	; 0x27
    3f14:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    3f16:	28 81       	ld	r18, Y
    3f18:	21 03       	mulsu	r18, r17
    3f1a:	f0 01       	movw	r30, r0
    3f1c:	11 24       	eor	r1, r1
    3f1e:	ea 5c       	subi	r30, 0xCA	; 202
    3f20:	f3 4f       	sbci	r31, 0xF3	; 243
    3f22:	85 a1       	ldd	r24, Z+37	; 0x25
    3f24:	96 a1       	ldd	r25, Z+38	; 0x26
    3f26:	a7 a1       	ldd	r26, Z+39	; 0x27
    3f28:	b0 a5       	ldd	r27, Z+40	; 0x28
    3f2a:	85 8f       	std	Z+29, r24	; 0x1d
    3f2c:	96 8f       	std	Z+30, r25	; 0x1e
    3f2e:	a7 8f       	std	Z+31, r26	; 0x1f
    3f30:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	92 a7       	std	Z+42, r25	; 0x2a
    3f38:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3f3a:	f3 82       	std	Z+3, r15	; 0x03
    3f3c:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3f3e:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    3f40:	df 91       	pop	r29
    3f42:	cf 91       	pop	r28
    3f44:	1f 91       	pop	r17
    3f46:	0f 91       	pop	r16
    3f48:	ff 90       	pop	r15
    3f4a:	ef 90       	pop	r14
    3f4c:	df 90       	pop	r13
    3f4e:	cf 90       	pop	r12
    3f50:	08 95       	ret

00003f52 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    3f52:	0c 94 24 2b 	jmp	0x5648	; 0x5648 <_nrk_scheduler>

00003f56 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    3f56:	85 e6       	ldi	r24, 0x65	; 101
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	08 95       	ret

00003f5c <_nrk_errno_set>:
    3f5c:	e0 91 fb 0c 	lds	r30, 0x0CFB
    3f60:	f0 91 fc 0c 	lds	r31, 0x0CFC
    3f64:	84 87       	std	Z+12, r24	; 0x0c
    3f66:	08 95       	ret

00003f68 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    3f68:	e0 91 fb 0c 	lds	r30, 0x0CFB
    3f6c:	f0 91 fc 0c 	lds	r31, 0x0CFC
}
    3f70:	84 85       	ldd	r24, Z+12	; 0x0c
    3f72:	08 95       	ret

00003f74 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    3f74:	fc 01       	movw	r30, r24
    if (error_num == 0)
    3f76:	80 91 1b 09 	lds	r24, 0x091B
    3f7a:	88 23       	and	r24, r24
    3f7c:	31 f0       	breq	.+12     	; 0x3f8a <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    3f7e:	db 01       	movw	r26, r22
    3f80:	8c 93       	st	X, r24
    *task_id = error_task;
    3f82:	80 91 83 05 	lds	r24, 0x0583
    3f86:	80 83       	st	Z, r24
    return 1;
    3f88:	81 e0       	ldi	r24, 0x01	; 1
}
    3f8a:	08 95       	ret

00003f8c <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    3f8c:	80 91 1b 09 	lds	r24, 0x091B
    3f90:	88 23       	and	r24, r24
    3f92:	09 f4       	brne	.+2      	; 0x3f96 <nrk_error_print+0xa>
    3f94:	84 c0       	rjmp	.+264    	; 0x409e <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    3f96:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    3f9a:	8f e2       	ldi	r24, 0x2F	; 47
    3f9c:	95 e0       	ldi	r25, 0x05	; 5
    3f9e:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
        printf ("%d", error_task);
    3fa2:	80 91 83 05 	lds	r24, 0x0583
    3fa6:	1f 92       	push	r1
    3fa8:	8f 93       	push	r24
    3faa:	87 ef       	ldi	r24, 0xF7	; 247
    3fac:	92 e0       	ldi	r25, 0x02	; 2
    3fae:	9f 93       	push	r25
    3fb0:	8f 93       	push	r24
    3fb2:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
        nrk_kprintf (PSTR ("): "));
    3fb6:	8b e2       	ldi	r24, 0x2B	; 43
    3fb8:	95 e0       	ldi	r25, 0x05	; 5
    3fba:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	80 91 1b 09 	lds	r24, 0x091B
    3fca:	88 31       	cpi	r24, 0x18	; 24
    3fcc:	10 f0       	brcs	.+4      	; 0x3fd2 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    3fce:	10 92 1b 09 	sts	0x091B, r1
        switch (error_num)
    3fd2:	e0 91 1b 09 	lds	r30, 0x091B
    3fd6:	8e 2f       	mov	r24, r30
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	fc 01       	movw	r30, r24
    3fdc:	31 97       	sbiw	r30, 0x01	; 1
    3fde:	e6 31       	cpi	r30, 0x16	; 22
    3fe0:	f1 05       	cpc	r31, r1
    3fe2:	08 f0       	brcs	.+2      	; 0x3fe6 <nrk_error_print+0x5a>
    3fe4:	46 c0       	rjmp	.+140    	; 0x4072 <nrk_error_print+0xe6>
    3fe6:	e6 54       	subi	r30, 0x46	; 70
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    3fee:	8f ee       	ldi	r24, 0xEF	; 239
    3ff0:	94 e0       	ldi	r25, 0x04	; 4
    3ff2:	41 c0       	rjmp	.+130    	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    3ff4:	88 ec       	ldi	r24, 0xC8	; 200
    3ff6:	94 e0       	ldi	r25, 0x04	; 4
    3ff8:	3e c0       	rjmp	.+124    	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    3ffa:	84 eb       	ldi	r24, 0xB4	; 180
    3ffc:	94 e0       	ldi	r25, 0x04	; 4
    3ffe:	3b c0       	rjmp	.+118    	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    4000:	8e e9       	ldi	r24, 0x9E	; 158
    4002:	94 e0       	ldi	r25, 0x04	; 4
    4004:	38 c0       	rjmp	.+112    	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    4006:	83 e8       	ldi	r24, 0x83	; 131
    4008:	94 e0       	ldi	r25, 0x04	; 4
    400a:	35 c0       	rjmp	.+106    	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    400c:	8d e6       	ldi	r24, 0x6D	; 109
    400e:	94 e0       	ldi	r25, 0x04	; 4
    4010:	32 c0       	rjmp	.+100    	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    4012:	85 e5       	ldi	r24, 0x55	; 85
    4014:	94 e0       	ldi	r25, 0x04	; 4
    4016:	2f c0       	rjmp	.+94     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    4018:	82 e4       	ldi	r24, 0x42	; 66
    401a:	94 e0       	ldi	r25, 0x04	; 4
    401c:	2c c0       	rjmp	.+88     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    401e:	8f e2       	ldi	r24, 0x2F	; 47
    4020:	94 e0       	ldi	r25, 0x04	; 4
    4022:	29 c0       	rjmp	.+82     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    4024:	81 e1       	ldi	r24, 0x11	; 17
    4026:	94 e0       	ldi	r25, 0x04	; 4
    4028:	26 c0       	rjmp	.+76     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    402a:	8c ee       	ldi	r24, 0xEC	; 236
    402c:	93 e0       	ldi	r25, 0x03	; 3
    402e:	23 c0       	rjmp	.+70     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    4030:	80 ee       	ldi	r24, 0xE0	; 224
    4032:	93 e0       	ldi	r25, 0x03	; 3
    4034:	20 c0       	rjmp	.+64     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    4036:	85 ec       	ldi	r24, 0xC5	; 197
    4038:	93 e0       	ldi	r25, 0x03	; 3
    403a:	1d c0       	rjmp	.+58     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    403c:	86 eb       	ldi	r24, 0xB6	; 182
    403e:	93 e0       	ldi	r25, 0x03	; 3
    4040:	1a c0       	rjmp	.+52     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    4042:	82 ea       	ldi	r24, 0xA2	; 162
    4044:	93 e0       	ldi	r25, 0x03	; 3
    4046:	17 c0       	rjmp	.+46     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    4048:	81 e9       	ldi	r24, 0x91	; 145
    404a:	93 e0       	ldi	r25, 0x03	; 3
    404c:	14 c0       	rjmp	.+40     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    404e:	8d e7       	ldi	r24, 0x7D	; 125
    4050:	93 e0       	ldi	r25, 0x03	; 3
    4052:	11 c0       	rjmp	.+34     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    4054:	8d e5       	ldi	r24, 0x5D	; 93
    4056:	93 e0       	ldi	r25, 0x03	; 3
    4058:	0e c0       	rjmp	.+28     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    405a:	85 e4       	ldi	r24, 0x45	; 69
    405c:	93 e0       	ldi	r25, 0x03	; 3
    405e:	0b c0       	rjmp	.+22     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    4060:	8a e2       	ldi	r24, 0x2A	; 42
    4062:	93 e0       	ldi	r25, 0x03	; 3
    4064:	08 c0       	rjmp	.+16     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    4066:	89 e1       	ldi	r24, 0x19	; 25
    4068:	93 e0       	ldi	r25, 0x03	; 3
    406a:	05 c0       	rjmp	.+10     	; 0x4076 <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    406c:	8a e0       	ldi	r24, 0x0A	; 10
    406e:	93 e0       	ldi	r25, 0x03	; 3
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    4072:	83 e0       	ldi	r24, 0x03	; 3
    4074:	93 e0       	ldi	r25, 0x03	; 3
    4076:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>
        }
        putchar ('\r');
    407a:	60 91 28 0d 	lds	r22, 0x0D28
    407e:	70 91 29 0d 	lds	r23, 0x0D29
    4082:	8d e0       	ldi	r24, 0x0D	; 13
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
        putchar ('\n');
    408a:	60 91 28 0d 	lds	r22, 0x0D28
    408e:	70 91 29 0d 	lds	r23, 0x0D29
    4092:	8a e0       	ldi	r24, 0x0A	; 10
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    409a:	10 92 1b 09 	sts	0x091B, r1
    return t;
}
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	08 95       	ret

000040a2 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    40a2:	80 93 1b 09 	sts	0x091B, r24
    error_task = nrk_cur_task_TCB->task_ID;
    40a6:	e0 91 fb 0c 	lds	r30, 0x0CFB
    40aa:	f0 91 fc 0c 	lds	r31, 0x0CFC
    40ae:	80 85       	ldd	r24, Z+8	; 0x08
    40b0:	80 93 83 05 	sts	0x0583, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    40b4:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <nrk_error_print>

000040b8 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    40b8:	80 93 1b 09 	sts	0x091B, r24
    error_task = task;
    40bc:	60 93 83 05 	sts	0x0583, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    40c0:	0c 94 c6 1f 	jmp	0x3f8c	; 0x3f8c <nrk_error_print>

000040c4 <pause>:
    }

}

void pause()
{
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	1f 92       	push	r1
    40ca:	cd b7       	in	r28, 0x3d	; 61
    40cc:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    40ce:	19 82       	std	Y+1, r1	; 0x01
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
    40d2:	84 36       	cpi	r24, 0x64	; 100
    40d4:	40 f4       	brcc	.+16     	; 0x40e6 <pause+0x22>
        nrk_spin_wait_us (2000);
    40d6:	80 ed       	ldi	r24, 0xD0	; 208
    40d8:	97 e0       	ldi	r25, 0x07	; 7
    40da:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	8f 5f       	subi	r24, 0xFF	; 255
    40e2:	89 83       	std	Y+1, r24	; 0x01
    40e4:	f5 cf       	rjmp	.-22     	; 0x40d0 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    40e6:	0f 90       	pop	r0
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	08 95       	ret

000040ee <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_led_set>
    pause();
    40f6:	0e 94 62 20 	call	0x40c4	; 0x40c4 <pause>
    pause();
    40fa:	0e 94 62 20 	call	0x40c4	; 0x40c4 <pause>
    pause();
    40fe:	0e 94 62 20 	call	0x40c4	; 0x40c4 <pause>
    nrk_led_clr(GREEN_LED);
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0e 94 96 1c 	call	0x392c	; 0x392c <nrk_led_clr>
    pause();
    410a:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <pause>

0000410e <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 ad 1c 	call	0x395a	; 0x395a <nrk_led_set>
    pause();
    4116:	0e 94 62 20 	call	0x40c4	; 0x40c4 <pause>
    nrk_led_clr(GREEN_LED);
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	0e 94 96 1c 	call	0x392c	; 0x392c <nrk_led_clr>
    pause();
    4122:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <pause>

00004126 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    4126:	ff 92       	push	r15
    4128:	0f 93       	push	r16
    412a:	1f 93       	push	r17
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	00 d0       	rcall	.+0      	; 0x4132 <blink_morse_code_error+0xc>
    4132:	1f 92       	push	r1
    4134:	cd b7       	in	r28, 0x3d	; 61
    4136:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    4138:	1f 92       	push	r1
    413a:	8f 93       	push	r24
    413c:	87 ef       	ldi	r24, 0xF7	; 247
    413e:	92 e0       	ldi	r25, 0x02	; 2
    4140:	9f 93       	push	r25
    4142:	8f 93       	push	r24
    4144:	8e 01       	movw	r16, r28
    4146:	0f 5f       	subi	r16, 0xFF	; 255
    4148:	1f 4f       	sbci	r17, 0xFF	; 255
    414a:	1f 93       	push	r17
    414c:	0f 93       	push	r16
    414e:	0e 94 56 37 	call	0x6eac	; 0x6eac <sprintf>

    for(i=0; i<strlen(str); i++ )
    4152:	0f 90       	pop	r0
    4154:	0f 90       	pop	r0
    4156:	0f 90       	pop	r0
    4158:	0f 90       	pop	r0
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	f1 2c       	mov	r15, r1
    4160:	f8 01       	movw	r30, r16
    4162:	01 90       	ld	r0, Z+
    4164:	00 20       	and	r0, r0
    4166:	e9 f7       	brne	.-6      	; 0x4162 <blink_morse_code_error+0x3c>
    4168:	31 97       	sbiw	r30, 0x01	; 1
    416a:	e0 1b       	sub	r30, r16
    416c:	f1 0b       	sbc	r31, r17
    416e:	8f 2d       	mov	r24, r15
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	8e 17       	cp	r24, r30
    4174:	9f 07       	cpc	r25, r31
    4176:	08 f0       	brcs	.+2      	; 0x417a <blink_morse_code_error+0x54>
    4178:	5d c0       	rjmp	.+186    	; 0x4234 <__stack+0x35>
    {
        switch( str[i])
    417a:	f8 01       	movw	r30, r16
    417c:	e8 0f       	add	r30, r24
    417e:	f9 1f       	adc	r31, r25
    4180:	e0 81       	ld	r30, Z
    4182:	8e 2f       	mov	r24, r30
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	fc 01       	movw	r30, r24
    4188:	f0 97       	sbiw	r30, 0x30	; 48
    418a:	ea 30       	cpi	r30, 0x0A	; 10
    418c:	f1 05       	cpc	r31, r1
    418e:	08 f0       	brcs	.+2      	; 0x4192 <blink_morse_code_error+0x6c>
    4190:	49 c0       	rjmp	.+146    	; 0x4224 <__stack+0x25>
    4192:	e0 53       	subi	r30, 0x30	; 48
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	0c 94 d1 35 	jmp	0x6ba2	; 0x6ba2 <__tablejump2__>
        {
        case '0':
            blink_dash();
    419a:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
    419e:	02 c0       	rjmp	.+4      	; 0x41a4 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    41a0:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            blink_dash();
    41a4:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    41a8:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    41ac:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    41b0:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            break;
    41b4:	37 c0       	rjmp	.+110    	; 0x4224 <__stack+0x25>
        case '2':
            blink_dot();
    41b6:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            blink_dot();
    41ba:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
    41be:	f4 cf       	rjmp	.-24     	; 0x41a8 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    41c0:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            blink_dot();
    41c4:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            blink_dot();
    41c8:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
    41cc:	ef cf       	rjmp	.-34     	; 0x41ac <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    41ce:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            blink_dot();
    41d2:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            blink_dot();
    41d6:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            blink_dot();
    41da:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
    41de:	e8 cf       	rjmp	.-48     	; 0x41b0 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    41e0:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    41e6:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dot();
    41ea:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
    41ee:	04 c0       	rjmp	.+8      	; 0x41f8 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    41f0:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    41f4:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dot();
    41f8:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
    41fc:	06 c0       	rjmp	.+12     	; 0x420a <__stack+0xb>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    41fe:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    4202:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    4206:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dot();
    420a:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
    420e:	08 c0       	rjmp	.+16     	; 0x4220 <__stack+0x21>
            blink_dot();
            break;
        case '9':
            blink_dash();
    4210:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    4214:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    4218:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dash();
    421c:	0e 94 77 20 	call	0x40ee	; 0x40ee <blink_dash>
            blink_dot();
    4220:	0e 94 87 20 	call	0x410e	; 0x410e <blink_dot>
            break;
        }
        pause();
    4224:	0e 94 62 20 	call	0x40c4	; 0x40c4 <pause>
        pause();
    4228:	0e 94 62 20 	call	0x40c4	; 0x40c4 <pause>
        pause();
    422c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    4230:	f3 94       	inc	r15
    4232:	96 cf       	rjmp	.-212    	; 0x4160 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	df 91       	pop	r29
    423c:	cf 91       	pop	r28
    423e:	1f 91       	pop	r17
    4240:	0f 91       	pop	r16
    4242:	ff 90       	pop	r15
    4244:	08 95       	ret

00004246 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    4246:	6f 92       	push	r6
    4248:	7f 92       	push	r7
    424a:	8f 92       	push	r8
    424c:	9f 92       	push	r9
    424e:	af 92       	push	r10
    4250:	bf 92       	push	r11
    4252:	cf 92       	push	r12
    4254:	df 92       	push	r13
    4256:	ef 92       	push	r14
    4258:	ff 92       	push	r15
    425a:	0f 93       	push	r16
    425c:	1f 93       	push	r17
    425e:	cf 93       	push	r28
    4260:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    4262:	8b e3       	ldi	r24, 0x3B	; 59
    4264:	95 e0       	ldi	r25, 0x05	; 5
    4266:	0e 94 35 19 	call	0x326a	; 0x326a <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    426a:	e0 91 fb 0c 	lds	r30, 0x0CFB
    426e:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4272:	80 85       	ldd	r24, Z+8	; 0x08
    4274:	28 2f       	mov	r18, r24
    4276:	33 27       	eor	r19, r19
    4278:	27 fd       	sbrc	r18, 7
    427a:	30 95       	com	r19
    427c:	3f 93       	push	r19
    427e:	8f 93       	push	r24
    4280:	81 e4       	ldi	r24, 0x41	; 65
    4282:	94 e0       	ldi	r25, 0x04	; 4
    4284:	9f 93       	push	r25
    4286:	8f 93       	push	r24
    4288:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    428c:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4290:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4294:	c2 81       	ldd	r28, Z+2	; 0x02
    4296:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	85 e7       	ldi	r24, 0x75	; 117
    429e:	94 e0       	ldi	r25, 0x04	; 4
    42a0:	9f 93       	push	r25
    42a2:	8f 93       	push	r24
    42a4:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    printf( "canary = %x ",*stkc );
    42a8:	88 81       	ld	r24, Y
    42aa:	1f 92       	push	r1
    42ac:	8f 93       	push	r24
    42ae:	8a e4       	ldi	r24, 0x4A	; 74
    42b0:	94 e0       	ldi	r25, 0x04	; 4
    42b2:	9f 93       	push	r25
    42b4:	8f 93       	push	r24
    42b6:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    42ba:	e0 91 fb 0c 	lds	r30, 0x0CFB
    42be:	f0 91 fc 0c 	lds	r31, 0x0CFC
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    42c2:	81 81       	ldd	r24, Z+1	; 0x01
    42c4:	8f 93       	push	r24
    42c6:	80 81       	ld	r24, Z
    42c8:	8f 93       	push	r24
    42ca:	87 e5       	ldi	r24, 0x57	; 87
    42cc:	94 e0       	ldi	r25, 0x04	; 4
    42ce:	9f 93       	push	r25
    42d0:	8f 93       	push	r24
    42d2:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    42d6:	80 91 fc 0c 	lds	r24, 0x0CFC
    42da:	8f 93       	push	r24
    42dc:	80 91 fb 0c 	lds	r24, 0x0CFB
    42e0:	8f 93       	push	r24
    42e2:	81 e6       	ldi	r24, 0x61	; 97
    42e4:	94 e0       	ldi	r25, 0x04	; 4
    42e6:	9f 93       	push	r25
    42e8:	8f 93       	push	r24
    42ea:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    42ee:	c6 e3       	ldi	r28, 0x36	; 54
    42f0:	dc e0       	ldi	r29, 0x0C	; 12
    42f2:	ed b7       	in	r30, 0x3d	; 61
    42f4:	fe b7       	in	r31, 0x3e	; 62
    42f6:	74 96       	adiw	r30, 0x14	; 20
    42f8:	0f b6       	in	r0, 0x3f	; 63
    42fa:	f8 94       	cli
    42fc:	fe bf       	out	0x3e, r31	; 62
    42fe:	0f be       	out	0x3f, r0	; 63
    4300:	ed bf       	out	0x3d, r30	; 61
    4302:	00 e0       	ldi	r16, 0x00	; 0
    4304:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    4306:	81 e7       	ldi	r24, 0x71	; 113
    4308:	68 2e       	mov	r6, r24
    430a:	84 e0       	ldi	r24, 0x04	; 4
    430c:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    430e:	9a e4       	ldi	r25, 0x4A	; 74
    4310:	89 2e       	mov	r8, r25
    4312:	94 e0       	ldi	r25, 0x04	; 4
    4314:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    4316:	27 e5       	ldi	r18, 0x57	; 87
    4318:	a2 2e       	mov	r10, r18
    431a:	24 e0       	ldi	r18, 0x04	; 4
    431c:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    431e:	31 e6       	ldi	r19, 0x61	; 97
    4320:	c3 2e       	mov	r12, r19
    4322:	34 e0       	ldi	r19, 0x04	; 4
    4324:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    4326:	ea 80       	ldd	r14, Y+2	; 0x02
    4328:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    432a:	ff 92       	push	r15
    432c:	ef 92       	push	r14
    432e:	1f 93       	push	r17
    4330:	0f 93       	push	r16
    4332:	7f 92       	push	r7
    4334:	6f 92       	push	r6
    4336:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
        printf( "canary = %x ",*stkc );
    433a:	f7 01       	movw	r30, r14
    433c:	80 81       	ld	r24, Z
    433e:	1f 92       	push	r1
    4340:	8f 93       	push	r24
    4342:	9f 92       	push	r9
    4344:	8f 92       	push	r8
    4346:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    434a:	89 81       	ldd	r24, Y+1	; 0x01
    434c:	8f 93       	push	r24
    434e:	88 81       	ld	r24, Y
    4350:	8f 93       	push	r24
    4352:	bf 92       	push	r11
    4354:	af 92       	push	r10
    4356:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    435a:	df 93       	push	r29
    435c:	cf 93       	push	r28
    435e:	df 92       	push	r13
    4360:	cf 92       	push	r12
    4362:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <printf>
    4366:	0f 5f       	subi	r16, 0xFF	; 255
    4368:	1f 4f       	sbci	r17, 0xFF	; 255
    436a:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    436c:	ed b7       	in	r30, 0x3d	; 61
    436e:	fe b7       	in	r31, 0x3e	; 62
    4370:	72 96       	adiw	r30, 0x12	; 18
    4372:	0f b6       	in	r0, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	fe bf       	out	0x3e, r31	; 62
    4378:	0f be       	out	0x3f, r0	; 63
    437a:	ed bf       	out	0x3d, r30	; 61
    437c:	04 30       	cpi	r16, 0x04	; 4
    437e:	11 05       	cpc	r17, r1
    4380:	91 f6       	brne	.-92     	; 0x4326 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	1f 91       	pop	r17
    4388:	0f 91       	pop	r16
    438a:	ff 90       	pop	r15
    438c:	ef 90       	pop	r14
    438e:	df 90       	pop	r13
    4390:	cf 90       	pop	r12
    4392:	bf 90       	pop	r11
    4394:	af 90       	pop	r10
    4396:	9f 90       	pop	r9
    4398:	8f 90       	pop	r8
    439a:	7f 90       	pop	r7
    439c:	6f 90       	pop	r6
    439e:	08 95       	ret

000043a0 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    43a0:	cf 93       	push	r28
    43a2:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    43a4:	e0 91 fb 0c 	lds	r30, 0x0CFB
    43a8:	f0 91 fc 0c 	lds	r31, 0x0CFC
    43ac:	c2 81       	ldd	r28, Z+2	; 0x02
    43ae:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    43b0:	88 81       	ld	r24, Y
    43b2:	85 35       	cpi	r24, 0x55	; 85
    43b4:	39 f0       	breq	.+14     	; 0x43c4 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    43b6:	0e 94 23 21 	call	0x4246	; 0x4246 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    43c0:	85 e5       	ldi	r24, 0x55	; 85
    43c2:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    43c4:	e0 91 fb 0c 	lds	r30, 0x0CFB
    43c8:	f0 91 fc 0c 	lds	r31, 0x0CFC
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    43cc:	80 81       	ld	r24, Z
    43ce:	91 81       	ldd	r25, Z+1	; 0x01
    43d0:	81 15       	cp	r24, r1
    43d2:	92 44       	sbci	r25, 0x42	; 66
    43d4:	38 f0       	brcs	.+14     	; 0x43e4 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    43d6:	0e 94 23 21 	call	0x4246	; 0x4246 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    43da:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    43e0:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <nrk_error_add>




#endif
}
    43e4:	df 91       	pop	r29
    43e6:	cf 91       	pop	r28
    43e8:	08 95       	ret

000043ea <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    43ea:	2b e2       	ldi	r18, 0x2B	; 43
    43ec:	82 02       	muls	r24, r18
    43ee:	c0 01       	movw	r24, r0
    43f0:	11 24       	eor	r1, r1
    43f2:	fc 01       	movw	r30, r24
    43f4:	ea 5c       	subi	r30, 0xCA	; 202
    43f6:	f3 4f       	sbci	r31, 0xF3	; 243
    43f8:	a2 81       	ldd	r26, Z+2	; 0x02
    43fa:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    43fc:	8c 91       	ld	r24, X
    43fe:	85 35       	cpi	r24, 0x55	; 85
    4400:	19 f0       	breq	.+6      	; 0x4408 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    4402:	85 e5       	ldi	r24, 0x55	; 85
    4404:	8c 93       	st	X, r24
    4406:	08 c0       	rjmp	.+16     	; 0x4418 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    4408:	80 81       	ld	r24, Z
    440a:	91 81       	ldd	r25, Z+1	; 0x01
    440c:	81 15       	cp	r24, r1
    440e:	92 44       	sbci	r25, 0x42	; 66
    4410:	28 f0       	brcs	.+10     	; 0x441c <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    4412:	82 e1       	ldi	r24, 0x12	; 18
    4414:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_error_add>
        return NRK_ERROR;
    4418:	8f ef       	ldi	r24, 0xFF	; 255
    441a:	08 95       	ret
    }
#endif
    return NRK_OK;
    441c:	81 e0       	ldi	r24, 0x01	; 1
}
    441e:	08 95       	ret

00004420 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    4420:	0f 93       	push	r16
    4422:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    4424:	40 91 96 07 	lds	r20, 0x0796
    4428:	50 91 97 07 	lds	r21, 0x0797
    442c:	60 91 98 07 	lds	r22, 0x0798
    4430:	70 91 99 07 	lds	r23, 0x0799
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	8a 01       	movw	r16, r20
    443a:	9b 01       	movw	r18, r22
    443c:	08 2e       	mov	r0, r24
    443e:	04 c0       	rjmp	.+8      	; 0x4448 <nrk_signal_create+0x28>
    4440:	36 95       	lsr	r19
    4442:	27 95       	ror	r18
    4444:	17 95       	ror	r17
    4446:	07 95       	ror	r16
    4448:	0a 94       	dec	r0
    444a:	d2 f7       	brpl	.-12     	; 0x4440 <nrk_signal_create+0x20>
    444c:	00 fd       	sbrc	r16, 0
    444e:	19 c0       	rjmp	.+50     	; 0x4482 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    4450:	01 e0       	ldi	r16, 0x01	; 1
    4452:	10 e0       	ldi	r17, 0x00	; 0
    4454:	20 e0       	ldi	r18, 0x00	; 0
    4456:	30 e0       	ldi	r19, 0x00	; 0
    4458:	08 2e       	mov	r0, r24
    445a:	04 c0       	rjmp	.+8      	; 0x4464 <nrk_signal_create+0x44>
    445c:	00 0f       	add	r16, r16
    445e:	11 1f       	adc	r17, r17
    4460:	22 1f       	adc	r18, r18
    4462:	33 1f       	adc	r19, r19
    4464:	0a 94       	dec	r0
    4466:	d2 f7       	brpl	.-12     	; 0x445c <nrk_signal_create+0x3c>
    4468:	40 2b       	or	r20, r16
    446a:	51 2b       	or	r21, r17
    446c:	62 2b       	or	r22, r18
    446e:	73 2b       	or	r23, r19
    4470:	40 93 96 07 	sts	0x0796, r20
    4474:	50 93 97 07 	sts	0x0797, r21
    4478:	60 93 98 07 	sts	0x0798, r22
    447c:	70 93 99 07 	sts	0x0799, r23
			return i;
    4480:	05 c0       	rjmp	.+10     	; 0x448c <nrk_signal_create+0x6c>
    4482:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    4484:	80 32       	cpi	r24, 0x20	; 32
    4486:	91 05       	cpc	r25, r1
    4488:	b9 f6       	brne	.-82     	; 0x4438 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    448a:	8f ef       	ldi	r24, 0xFF	; 255


}
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	08 95       	ret

00004492 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    4492:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4496:	f0 91 fc 0c 	lds	r31, 0x0CFC
    449a:	65 85       	ldd	r22, Z+13	; 0x0d
    449c:	76 85       	ldd	r23, Z+14	; 0x0e
    449e:	87 85       	ldd	r24, Z+15	; 0x0f
    44a0:	90 89       	ldd	r25, Z+16	; 0x10
}
    44a2:	08 95       	ret

000044a4 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    44a4:	cf 92       	push	r12
    44a6:	df 92       	push	r13
    44a8:	ef 92       	push	r14
    44aa:	ff 92       	push	r15
    44ac:	0f 93       	push	r16
    44ae:	1f 93       	push	r17
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    44b4:	c1 2c       	mov	r12, r1
    44b6:	d1 2c       	mov	r13, r1
    44b8:	76 01       	movw	r14, r12
    44ba:	c3 94       	inc	r12
    44bc:	08 2e       	mov	r0, r24
    44be:	04 c0       	rjmp	.+8      	; 0x44c8 <nrk_signal_delete+0x24>
    44c0:	cc 0c       	add	r12, r12
    44c2:	dd 1c       	adc	r13, r13
    44c4:	ee 1c       	adc	r14, r14
    44c6:	ff 1c       	adc	r15, r15
    44c8:	0a 94       	dec	r0
    44ca:	d2 f7       	brpl	.-12     	; 0x44c0 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    44cc:	40 91 96 07 	lds	r20, 0x0796
    44d0:	50 91 97 07 	lds	r21, 0x0797
    44d4:	60 91 98 07 	lds	r22, 0x0798
    44d8:	70 91 99 07 	lds	r23, 0x0799
    44dc:	4c 21       	and	r20, r12
    44de:	5d 21       	and	r21, r13
    44e0:	6e 21       	and	r22, r14
    44e2:	7f 21       	and	r23, r15
    44e4:	45 2b       	or	r20, r21
    44e6:	46 2b       	or	r20, r22
    44e8:	47 2b       	or	r20, r23
    44ea:	09 f4       	brne	.+2      	; 0x44ee <nrk_signal_delete+0x4a>
    44ec:	60 c0       	rjmp	.+192    	; 0x45ae <nrk_signal_delete+0x10a>
    44ee:	08 2f       	mov	r16, r24

	nrk_int_disable();
    44f0:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    44f4:	ef e3       	ldi	r30, 0x3F	; 63
    44f6:	fc e0       	ldi	r31, 0x0C	; 12
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    44f8:	b7 01       	movw	r22, r14
    44fa:	a6 01       	movw	r20, r12
    44fc:	40 95       	com	r20
    44fe:	50 95       	com	r21
    4500:	60 95       	com	r22
    4502:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4504:	13 e0       	ldi	r17, 0x03	; 3
    4506:	df 01       	movw	r26, r30
    4508:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    450a:	8c 91       	ld	r24, X
    450c:	8f 3f       	cpi	r24, 0xFF	; 255
    450e:	39 f1       	breq	.+78     	; 0x455e <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    4510:	84 81       	ldd	r24, Z+4	; 0x04
    4512:	95 81       	ldd	r25, Z+5	; 0x05
    4514:	a6 81       	ldd	r26, Z+6	; 0x06
    4516:	b7 81       	ldd	r27, Z+7	; 0x07
    4518:	8c 15       	cp	r24, r12
    451a:	9d 05       	cpc	r25, r13
    451c:	ae 05       	cpc	r26, r14
    451e:	bf 05       	cpc	r27, r15
    4520:	51 f4       	brne	.+20     	; 0x4536 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    4522:	10 86       	std	Z+8, r1	; 0x08
    4524:	11 86       	std	Z+9, r1	; 0x09
    4526:	12 86       	std	Z+10, r1	; 0x0a
    4528:	13 86       	std	Z+11, r1	; 0x0b
    452a:	9f 01       	movw	r18, r30
    452c:	22 50       	subi	r18, 0x02	; 2
    452e:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    4530:	e9 01       	movw	r28, r18
    4532:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4534:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4536:	84 23       	and	r24, r20
    4538:	95 23       	and	r25, r21
    453a:	a6 23       	and	r26, r22
    453c:	b7 23       	and	r27, r23
    453e:	84 83       	std	Z+4, r24	; 0x04
    4540:	95 83       	std	Z+5, r25	; 0x05
    4542:	a6 83       	std	Z+6, r26	; 0x06
    4544:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    4546:	80 85       	ldd	r24, Z+8	; 0x08
    4548:	91 85       	ldd	r25, Z+9	; 0x09
    454a:	a2 85       	ldd	r26, Z+10	; 0x0a
    454c:	b3 85       	ldd	r27, Z+11	; 0x0b
    454e:	84 23       	and	r24, r20
    4550:	95 23       	and	r25, r21
    4552:	a6 23       	and	r26, r22
    4554:	b7 23       	and	r27, r23
    4556:	80 87       	std	Z+8, r24	; 0x08
    4558:	91 87       	std	Z+9, r25	; 0x09
    455a:	a2 87       	std	Z+10, r26	; 0x0a
    455c:	b3 87       	std	Z+11, r27	; 0x0b
    455e:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    4560:	dc e0       	ldi	r29, 0x0C	; 12
    4562:	eb 3e       	cpi	r30, 0xEB	; 235
    4564:	fd 07       	cpc	r31, r29
    4566:	79 f6       	brne	.-98     	; 0x4506 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    4568:	8e ef       	ldi	r24, 0xFE	; 254
    456a:	9f ef       	ldi	r25, 0xFF	; 255
    456c:	af ef       	ldi	r26, 0xFF	; 255
    456e:	bf ef       	ldi	r27, 0xFF	; 255
    4570:	04 c0       	rjmp	.+8      	; 0x457a <nrk_signal_delete+0xd6>
    4572:	88 0f       	add	r24, r24
    4574:	99 1f       	adc	r25, r25
    4576:	aa 1f       	adc	r26, r26
    4578:	bb 1f       	adc	r27, r27
    457a:	0a 95       	dec	r16
    457c:	d2 f7       	brpl	.-12     	; 0x4572 <nrk_signal_delete+0xce>
    457e:	40 91 96 07 	lds	r20, 0x0796
    4582:	50 91 97 07 	lds	r21, 0x0797
    4586:	60 91 98 07 	lds	r22, 0x0798
    458a:	70 91 99 07 	lds	r23, 0x0799
    458e:	84 23       	and	r24, r20
    4590:	95 23       	and	r25, r21
    4592:	a6 23       	and	r26, r22
    4594:	b7 23       	and	r27, r23
    4596:	80 93 96 07 	sts	0x0796, r24
    459a:	90 93 97 07 	sts	0x0797, r25
    459e:	a0 93 98 07 	sts	0x0798, r26
    45a2:	b0 93 99 07 	sts	0x0799, r27
	nrk_int_enable();
    45a6:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>

	return NRK_OK;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	01 c0       	rjmp	.+2      	; 0x45b0 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    45ae:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    45b0:	df 91       	pop	r29
    45b2:	cf 91       	pop	r28
    45b4:	1f 91       	pop	r17
    45b6:	0f 91       	pop	r16
    45b8:	ff 90       	pop	r15
    45ba:	ef 90       	pop	r14
    45bc:	df 90       	pop	r13
    45be:	cf 90       	pop	r12
    45c0:	08 95       	ret

000045c2 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    45c2:	0f 93       	push	r16
    45c4:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    45c6:	41 e0       	ldi	r20, 0x01	; 1
    45c8:	50 e0       	ldi	r21, 0x00	; 0
    45ca:	60 e0       	ldi	r22, 0x00	; 0
    45cc:	70 e0       	ldi	r23, 0x00	; 0
    45ce:	8a 01       	movw	r16, r20
    45d0:	9b 01       	movw	r18, r22
    45d2:	04 c0       	rjmp	.+8      	; 0x45dc <nrk_signal_unregister+0x1a>
    45d4:	00 0f       	add	r16, r16
    45d6:	11 1f       	adc	r17, r17
    45d8:	22 1f       	adc	r18, r18
    45da:	33 1f       	adc	r19, r19
    45dc:	8a 95       	dec	r24
    45de:	d2 f7       	brpl	.-12     	; 0x45d4 <nrk_signal_unregister+0x12>
    45e0:	d9 01       	movw	r26, r18
    45e2:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    45e4:	e0 91 fb 0c 	lds	r30, 0x0CFB
    45e8:	f0 91 fc 0c 	lds	r31, 0x0CFC
    45ec:	45 85       	ldd	r20, Z+13	; 0x0d
    45ee:	56 85       	ldd	r21, Z+14	; 0x0e
    45f0:	67 85       	ldd	r22, Z+15	; 0x0f
    45f2:	70 89       	ldd	r23, Z+16	; 0x10
    45f4:	04 23       	and	r16, r20
    45f6:	15 23       	and	r17, r21
    45f8:	26 23       	and	r18, r22
    45fa:	37 23       	and	r19, r23
    45fc:	01 2b       	or	r16, r17
    45fe:	02 2b       	or	r16, r18
    4600:	03 2b       	or	r16, r19
    4602:	d1 f0       	breq	.+52     	; 0x4638 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    4604:	80 95       	com	r24
    4606:	90 95       	com	r25
    4608:	a0 95       	com	r26
    460a:	b0 95       	com	r27
    460c:	48 23       	and	r20, r24
    460e:	59 23       	and	r21, r25
    4610:	6a 23       	and	r22, r26
    4612:	7b 23       	and	r23, r27
    4614:	45 87       	std	Z+13, r20	; 0x0d
    4616:	56 87       	std	Z+14, r21	; 0x0e
    4618:	67 87       	std	Z+15, r22	; 0x0f
    461a:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    461c:	41 89       	ldd	r20, Z+17	; 0x11
    461e:	52 89       	ldd	r21, Z+18	; 0x12
    4620:	63 89       	ldd	r22, Z+19	; 0x13
    4622:	74 89       	ldd	r23, Z+20	; 0x14
    4624:	84 23       	and	r24, r20
    4626:	95 23       	and	r25, r21
    4628:	a6 23       	and	r26, r22
    462a:	b7 23       	and	r27, r23
    462c:	81 8b       	std	Z+17, r24	; 0x11
    462e:	92 8b       	std	Z+18, r25	; 0x12
    4630:	a3 8b       	std	Z+19, r26	; 0x13
    4632:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	01 c0       	rjmp	.+2      	; 0x463a <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    4638:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    463a:	1f 91       	pop	r17
    463c:	0f 91       	pop	r16
    463e:	08 95       	ret

00004640 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    4640:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    4642:	40 91 96 07 	lds	r20, 0x0796
    4646:	50 91 97 07 	lds	r21, 0x0797
    464a:	60 91 98 07 	lds	r22, 0x0798
    464e:	70 91 99 07 	lds	r23, 0x0799
    4652:	08 2e       	mov	r0, r24
    4654:	04 c0       	rjmp	.+8      	; 0x465e <nrk_signal_register+0x1e>
    4656:	76 95       	lsr	r23
    4658:	67 95       	ror	r22
    465a:	57 95       	ror	r21
    465c:	47 95       	ror	r20
    465e:	0a 94       	dec	r0
    4660:	d2 f7       	brpl	.-12     	; 0x4656 <nrk_signal_register+0x16>
    4662:	40 ff       	sbrs	r20, 0
    4664:	1d c0       	rjmp	.+58     	; 0x46a0 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    4666:	e0 91 fb 0c 	lds	r30, 0x0CFB
    466a:	f0 91 fc 0c 	lds	r31, 0x0CFC
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	a0 e0       	ldi	r26, 0x00	; 0
    4674:	b0 e0       	ldi	r27, 0x00	; 0
    4676:	04 c0       	rjmp	.+8      	; 0x4680 <nrk_signal_register+0x40>
    4678:	88 0f       	add	r24, r24
    467a:	99 1f       	adc	r25, r25
    467c:	aa 1f       	adc	r26, r26
    467e:	bb 1f       	adc	r27, r27
    4680:	2a 95       	dec	r18
    4682:	d2 f7       	brpl	.-12     	; 0x4678 <nrk_signal_register+0x38>
    4684:	45 85       	ldd	r20, Z+13	; 0x0d
    4686:	56 85       	ldd	r21, Z+14	; 0x0e
    4688:	67 85       	ldd	r22, Z+15	; 0x0f
    468a:	70 89       	ldd	r23, Z+16	; 0x10
    468c:	84 2b       	or	r24, r20
    468e:	95 2b       	or	r25, r21
    4690:	a6 2b       	or	r26, r22
    4692:	b7 2b       	or	r27, r23
    4694:	85 87       	std	Z+13, r24	; 0x0d
    4696:	96 87       	std	Z+14, r25	; 0x0e
    4698:	a7 87       	std	Z+15, r26	; 0x0f
    469a:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	08 95       	ret
	}
            
	return NRK_ERROR;
    46a0:	8f ef       	ldi	r24, 0xFF	; 255
}
    46a2:	08 95       	ret

000046a4 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    46a4:	cf 92       	push	r12
    46a6:	df 92       	push	r13
    46a8:	ef 92       	push	r14
    46aa:	ff 92       	push	r15
    46ac:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    46ae:	c1 2c       	mov	r12, r1
    46b0:	d1 2c       	mov	r13, r1
    46b2:	76 01       	movw	r14, r12
    46b4:	c3 94       	inc	r12
    46b6:	04 c0       	rjmp	.+8      	; 0x46c0 <nrk_event_signal+0x1c>
    46b8:	cc 0c       	add	r12, r12
    46ba:	dd 1c       	adc	r13, r13
    46bc:	ee 1c       	adc	r14, r14
    46be:	ff 1c       	adc	r15, r15
    46c0:	8a 95       	dec	r24
    46c2:	d2 f7       	brpl	.-12     	; 0x46b8 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    46c4:	80 91 96 07 	lds	r24, 0x0796
    46c8:	90 91 97 07 	lds	r25, 0x0797
    46cc:	a0 91 98 07 	lds	r26, 0x0798
    46d0:	b0 91 99 07 	lds	r27, 0x0799
    46d4:	8c 21       	and	r24, r12
    46d6:	9d 21       	and	r25, r13
    46d8:	ae 21       	and	r26, r14
    46da:	bf 21       	and	r27, r15
    46dc:	89 2b       	or	r24, r25
    46de:	8a 2b       	or	r24, r26
    46e0:	8b 2b       	or	r24, r27
    46e2:	11 f4       	brne	.+4      	; 0x46e8 <nrk_event_signal+0x44>
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	44 c0       	rjmp	.+136    	; 0x4770 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    46e8:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    46ec:	ed e3       	ldi	r30, 0x3D	; 61
    46ee:	fc e0       	ldi	r31, 0x0C	; 12
    46f0:	af e3       	ldi	r26, 0x3F	; 63
    46f2:	bc e0       	ldi	r27, 0x0C	; 12

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    46f4:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    46f6:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    46f8:	90 81       	ld	r25, Z
    46fa:	91 30       	cpi	r25, 0x01	; 1
    46fc:	b9 f4       	brne	.+46     	; 0x472c <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    46fe:	42 85       	ldd	r20, Z+10	; 0x0a
    4700:	53 85       	ldd	r21, Z+11	; 0x0b
    4702:	64 85       	ldd	r22, Z+12	; 0x0c
    4704:	75 85       	ldd	r23, Z+13	; 0x0d
    4706:	4c 21       	and	r20, r12
    4708:	5d 21       	and	r21, r13
    470a:	6e 21       	and	r22, r14
    470c:	7f 21       	and	r23, r15
    470e:	45 2b       	or	r20, r21
    4710:	46 2b       	or	r20, r22
    4712:	47 2b       	or	r20, r23
    4714:	59 f0       	breq	.+22     	; 0x472c <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4716:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    4718:	16 86       	std	Z+14, r1	; 0x0e
    471a:	17 86       	std	Z+15, r1	; 0x0f
    471c:	10 8a       	std	Z+16, r1	; 0x10
    471e:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    4720:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    4722:	c2 86       	std	Z+10, r12	; 0x0a
    4724:	d3 86       	std	Z+11, r13	; 0x0b
    4726:	e4 86       	std	Z+12, r14	; 0x0c
    4728:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    472a:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    472c:	90 81       	ld	r25, Z
    472e:	92 30       	cpi	r25, 0x02	; 2
    4730:	a1 f4       	brne	.+40     	; 0x475a <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    4732:	42 85       	ldd	r20, Z+10	; 0x0a
    4734:	53 85       	ldd	r21, Z+11	; 0x0b
    4736:	64 85       	ldd	r22, Z+12	; 0x0c
    4738:	75 85       	ldd	r23, Z+13	; 0x0d
    473a:	4c 15       	cp	r20, r12
    473c:	5d 05       	cpc	r21, r13
    473e:	6e 05       	cpc	r22, r14
    4740:	7f 05       	cpc	r23, r15
    4742:	59 f4       	brne	.+22     	; 0x475a <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4744:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    4746:	16 86       	std	Z+14, r1	; 0x0e
    4748:	17 86       	std	Z+15, r1	; 0x0f
    474a:	10 8a       	std	Z+16, r1	; 0x10
    474c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    474e:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    4750:	12 86       	std	Z+10, r1	; 0x0a
    4752:	13 86       	std	Z+11, r1	; 0x0b
    4754:	14 86       	std	Z+12, r1	; 0x0c
    4756:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    4758:	c1 e0       	ldi	r28, 0x01	; 1
    475a:	bb 96       	adiw	r30, 0x2b	; 43
    475c:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    475e:	9c e0       	ldi	r25, 0x0C	; 12
    4760:	e9 3e       	cpi	r30, 0xE9	; 233
    4762:	f9 07       	cpc	r31, r25
    4764:	49 f6       	brne	.-110    	; 0x46f8 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    4766:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
	if(event_occured)
    476a:	c1 11       	cpse	r28, r1
    476c:	05 c0       	rjmp	.+10     	; 0x4778 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    476e:	82 e0       	ldi	r24, 0x02	; 2
    4770:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
	return NRK_ERROR;
    4774:	8f ef       	ldi	r24, 0xFF	; 255
    4776:	01 c0       	rjmp	.+2      	; 0x477a <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    4778:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    477a:	cf 91       	pop	r28
    477c:	ff 90       	pop	r15
    477e:	ef 90       	pop	r14
    4780:	df 90       	pop	r13
    4782:	cf 90       	pop	r12
    4784:	08 95       	ret

00004786 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    4786:	0f 93       	push	r16
    4788:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    478a:	e0 91 fb 0c 	lds	r30, 0x0CFB
    478e:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4792:	05 85       	ldd	r16, Z+13	; 0x0d
    4794:	16 85       	ldd	r17, Z+14	; 0x0e
    4796:	27 85       	ldd	r18, Z+15	; 0x0f
    4798:	30 89       	ldd	r19, Z+16	; 0x10
    479a:	06 23       	and	r16, r22
    479c:	17 23       	and	r17, r23
    479e:	28 23       	and	r18, r24
    47a0:	39 23       	and	r19, r25
    47a2:	01 15       	cp	r16, r1
    47a4:	11 05       	cpc	r17, r1
    47a6:	21 05       	cpc	r18, r1
    47a8:	31 05       	cpc	r19, r1
    47aa:	11 f1       	breq	.+68     	; 0x47f0 <nrk_event_wait+0x6a>
    47ac:	dc 01       	movw	r26, r24
    47ae:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    47b0:	81 8b       	std	Z+17, r24	; 0x11
    47b2:	92 8b       	std	Z+18, r25	; 0x12
    47b4:	a3 8b       	std	Z+19, r26	; 0x13
    47b6:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    47b8:	21 e0       	ldi	r18, 0x01	; 1
    47ba:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    47bc:	00 90 eb 0c 	lds	r0, 0x0CEB
    47c0:	04 c0       	rjmp	.+8      	; 0x47ca <nrk_event_wait+0x44>
    47c2:	b6 95       	lsr	r27
    47c4:	a7 95       	ror	r26
    47c6:	97 95       	ror	r25
    47c8:	87 95       	ror	r24
    47ca:	0a 94       	dec	r0
    47cc:	d2 f7       	brpl	.-12     	; 0x47c2 <nrk_event_wait+0x3c>
    47ce:	80 ff       	sbrs	r24, 0
    47d0:	03 c0       	rjmp	.+6      	; 0x47d8 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    47d2:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <nrk_wait_until_nw>
    47d6:	04 c0       	rjmp	.+8      	; 0x47e0 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	0e 94 6e 27 	call	0x4edc	; 0x4edc <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    47e0:	e0 91 fb 0c 	lds	r30, 0x0CFB
    47e4:	f0 91 fc 0c 	lds	r31, 0x0CFC
    47e8:	01 89       	ldd	r16, Z+17	; 0x11
    47ea:	12 89       	ldd	r17, Z+18	; 0x12
    47ec:	23 89       	ldd	r18, Z+19	; 0x13
    47ee:	34 89       	ldd	r19, Z+20	; 0x14
}
    47f0:	c9 01       	movw	r24, r18
    47f2:	b8 01       	movw	r22, r16
    47f4:	1f 91       	pop	r17
    47f6:	0f 91       	pop	r16
    47f8:	08 95       	ret

000047fa <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    47fa:	90 91 fa 0c 	lds	r25, 0x0CFA
    47fe:	91 11       	cpse	r25, r1
    4800:	1d c0       	rjmp	.+58     	; 0x483c <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    4802:	90 91 e4 0c 	lds	r25, 0x0CE4
    4806:	9f 3f       	cpi	r25, 0xFF	; 255
    4808:	31 f0       	breq	.+12     	; 0x4816 <nrk_sem_create+0x1c>
    480a:	90 91 e7 0c 	lds	r25, 0x0CE7
    480e:	9f 3f       	cpi	r25, 0xFF	; 255
    4810:	21 f0       	breq	.+8      	; 0x481a <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    4812:	e2 e0       	ldi	r30, 0x02	; 2
    4814:	03 c0       	rjmp	.+6      	; 0x481c <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    4816:	e0 e0       	ldi	r30, 0x00	; 0
    4818:	01 c0       	rjmp	.+2      	; 0x481c <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    481a:	e1 e0       	ldi	r30, 0x01	; 1
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    481c:	f0 e0       	ldi	r31, 0x00	; 0
    481e:	9f 01       	movw	r18, r30
    4820:	22 0f       	add	r18, r18
    4822:	33 1f       	adc	r19, r19
    4824:	e2 0f       	add	r30, r18
    4826:	f3 1f       	adc	r31, r19
    4828:	ec 51       	subi	r30, 0x1C	; 28
    482a:	f3 4f       	sbci	r31, 0xF3	; 243
    482c:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    482e:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    4830:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	80 93 fa 0c 	sts	0x0CFA, r24
	return	&nrk_sem_list[i];
    4838:	cf 01       	movw	r24, r30
    483a:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    4840:	08 95       	ret

00004842 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4842:	2c e0       	ldi	r18, 0x0C	; 12
    4844:	84 3e       	cpi	r24, 0xE4	; 228
    4846:	92 07       	cpc	r25, r18
    4848:	29 f0       	breq	.+10     	; 0x4854 <nrk_get_resource_index+0x12>
    484a:	87 5e       	subi	r24, 0xE7	; 231
    484c:	9c 40       	sbci	r25, 0x0C	; 12
    484e:	21 f4       	brne	.+8      	; 0x4858 <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	08 95       	ret
    4854:	80 e0       	ldi	r24, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    4856:	08 95       	ret
	return NRK_ERROR;
    4858:	8f ef       	ldi	r24, 0xFF	; 255
}
    485a:	08 95       	ret

0000485c <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    485c:	0e 94 21 24 	call	0x4842	; 0x4842 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4860:	8f 3f       	cpi	r24, 0xFF	; 255
    4862:	11 f4       	brne	.+4      	; 0x4868 <nrk_sem_query+0xc>
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	02 c0       	rjmp	.+4      	; 0x486c <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4868:	82 30       	cpi	r24, 0x02	; 2
    486a:	21 f4       	brne	.+8      	; 0x4874 <nrk_sem_query+0x18>
    486c:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
    4870:	8f ef       	ldi	r24, 0xFF	; 255
    4872:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    4874:	99 27       	eor	r25, r25
    4876:	87 fd       	sbrc	r24, 7
    4878:	90 95       	com	r25
    487a:	fc 01       	movw	r30, r24
    487c:	ee 0f       	add	r30, r30
    487e:	ff 1f       	adc	r31, r31
    4880:	8e 0f       	add	r24, r30
    4882:	9f 1f       	adc	r25, r31
    4884:	fc 01       	movw	r30, r24
    4886:	ec 51       	subi	r30, 0x1C	; 28
    4888:	f3 4f       	sbci	r31, 0xF3	; 243
    488a:	82 81       	ldd	r24, Z+2	; 0x02
}
    488c:	08 95       	ret

0000488e <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    488e:	ef 92       	push	r14
    4890:	ff 92       	push	r15
    4892:	0f 93       	push	r16
    4894:	1f 93       	push	r17
    4896:	cf 93       	push	r28
    4898:	df 93       	push	r29
    489a:	1f 92       	push	r1
    489c:	cd b7       	in	r28, 0x3d	; 61
    489e:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    48a0:	0e 94 21 24 	call	0x4842	; 0x4842 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    48a4:	8f 3f       	cpi	r24, 0xFF	; 255
    48a6:	11 f4       	brne	.+4      	; 0x48ac <nrk_sem_pend+0x1e>
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	02 c0       	rjmp	.+4      	; 0x48b0 <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    48ac:	82 30       	cpi	r24, 0x02	; 2
    48ae:	21 f4       	brne	.+8      	; 0x48b8 <nrk_sem_pend+0x2a>
    48b0:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
    48b4:	8f ef       	ldi	r24, 0xFF	; 255
    48b6:	41 c0       	rjmp	.+130    	; 0x493a <nrk_sem_pend+0xac>
	
	nrk_int_disable();
    48b8:	89 83       	std	Y+1, r24	; 0x01
    48ba:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    48be:	89 81       	ldd	r24, Y+1	; 0x01
    48c0:	e8 2e       	mov	r14, r24
    48c2:	ff 24       	eor	r15, r15
    48c4:	e7 fc       	sbrc	r14, 7
    48c6:	f0 94       	com	r15
    48c8:	87 01       	movw	r16, r14
    48ca:	00 0f       	add	r16, r16
    48cc:	11 1f       	adc	r17, r17
    48ce:	f8 01       	movw	r30, r16
    48d0:	ee 0d       	add	r30, r14
    48d2:	ff 1d       	adc	r31, r15
    48d4:	ec 51       	subi	r30, 0x1C	; 28
    48d6:	f3 4f       	sbci	r31, 0xF3	; 243
    48d8:	92 81       	ldd	r25, Z+2	; 0x02
    48da:	91 11       	cpse	r25, r1
    48dc:	16 c0       	rjmp	.+44     	; 0x490a <nrk_sem_pend+0x7c>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    48de:	e0 91 fb 0c 	lds	r30, 0x0CFB
    48e2:	f0 91 fc 0c 	lds	r31, 0x0CFC
    48e6:	97 81       	ldd	r25, Z+7	; 0x07
    48e8:	92 60       	ori	r25, 0x02	; 2
    48ea:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    48ec:	99 27       	eor	r25, r25
    48ee:	87 fd       	sbrc	r24, 7
    48f0:	90 95       	com	r25
    48f2:	a9 2f       	mov	r26, r25
    48f4:	b9 2f       	mov	r27, r25
    48f6:	81 8b       	std	Z+17, r24	; 0x11
    48f8:	92 8b       	std	Z+18, r25	; 0x12
    48fa:	a3 8b       	std	Z+19, r26	; 0x13
    48fc:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    48fe:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	0e 94 6e 27 	call	0x4edc	; 0x4edc <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    490a:	0e 0d       	add	r16, r14
    490c:	1f 1d       	adc	r17, r15
    490e:	d8 01       	movw	r26, r16
    4910:	ac 51       	subi	r26, 0x1C	; 28
    4912:	b3 4f       	sbci	r27, 0xF3	; 243
    4914:	12 96       	adiw	r26, 0x02	; 2
    4916:	8c 91       	ld	r24, X
    4918:	12 97       	sbiw	r26, 0x02	; 2
    491a:	81 50       	subi	r24, 0x01	; 1
    491c:	12 96       	adiw	r26, 0x02	; 2
    491e:	8c 93       	st	X, r24
    4920:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    4922:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4926:	f0 91 fc 0c 	lds	r31, 0x0CFC
    492a:	11 96       	adiw	r26, 0x01	; 1
    492c:	8c 91       	ld	r24, X
    492e:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    4934:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>

	return NRK_OK;
    4938:	81 e0       	ldi	r24, 0x01	; 1
}
    493a:	0f 90       	pop	r0
    493c:	df 91       	pop	r29
    493e:	cf 91       	pop	r28
    4940:	1f 91       	pop	r17
    4942:	0f 91       	pop	r16
    4944:	ff 90       	pop	r15
    4946:	ef 90       	pop	r14
    4948:	08 95       	ret

0000494a <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    494a:	0f 93       	push	r16
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	1f 92       	push	r1
    4954:	cd b7       	in	r28, 0x3d	; 61
    4956:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    4958:	0e 94 21 24 	call	0x4842	; 0x4842 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    495c:	8f 3f       	cpi	r24, 0xFF	; 255
    495e:	11 f4       	brne	.+4      	; 0x4964 <nrk_sem_post+0x1a>
    4960:	81 e0       	ldi	r24, 0x01	; 1
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4964:	82 30       	cpi	r24, 0x02	; 2
    4966:	21 f4       	brne	.+8      	; 0x4970 <nrk_sem_post+0x26>
    4968:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
    496c:	8f ef       	ldi	r24, 0xFF	; 255
    496e:	44 c0       	rjmp	.+136    	; 0x49f8 <nrk_sem_post+0xae>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    4970:	48 2f       	mov	r20, r24
    4972:	55 27       	eor	r21, r21
    4974:	47 fd       	sbrc	r20, 7
    4976:	50 95       	com	r21
    4978:	9a 01       	movw	r18, r20
    497a:	22 0f       	add	r18, r18
    497c:	33 1f       	adc	r19, r19
    497e:	24 0f       	add	r18, r20
    4980:	35 1f       	adc	r19, r21
    4982:	89 01       	movw	r16, r18
    4984:	0c 51       	subi	r16, 0x1C	; 28
    4986:	13 4f       	sbci	r17, 0xF3	; 243
    4988:	f8 01       	movw	r30, r16
    498a:	22 81       	ldd	r18, Z+2	; 0x02
    498c:	90 81       	ld	r25, Z
    498e:	29 17       	cp	r18, r25
    4990:	94 f5       	brge	.+100    	; 0x49f6 <nrk_sem_post+0xac>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    4992:	89 83       	std	Y+1, r24	; 0x01
    4994:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>

		nrk_sem_list[id].value++;
    4998:	f8 01       	movw	r30, r16
    499a:	92 81       	ldd	r25, Z+2	; 0x02
    499c:	9f 5f       	subi	r25, 0xFF	; 255
    499e:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    49a0:	e0 91 fb 0c 	lds	r30, 0x0CFB
    49a4:	f0 91 fc 0c 	lds	r31, 0x0CFC
    49a8:	14 82       	std	Z+4, r1	; 0x04
    49aa:	ed e3       	ldi	r30, 0x3D	; 61
    49ac:	fc e0       	ldi	r31, 0x0C	; 12

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    49ae:	89 81       	ldd	r24, Y+1	; 0x01
    49b0:	99 27       	eor	r25, r25
    49b2:	87 fd       	sbrc	r24, 7
    49b4:	90 95       	com	r25
    49b6:	a9 2f       	mov	r26, r25
    49b8:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    49ba:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    49bc:	30 81       	ld	r19, Z
    49be:	32 30       	cpi	r19, 0x02	; 2
    49c0:	99 f4       	brne	.+38     	; 0x49e8 <nrk_sem_post+0x9e>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    49c2:	42 85       	ldd	r20, Z+10	; 0x0a
    49c4:	53 85       	ldd	r21, Z+11	; 0x0b
    49c6:	64 85       	ldd	r22, Z+12	; 0x0c
    49c8:	75 85       	ldd	r23, Z+13	; 0x0d
    49ca:	48 17       	cp	r20, r24
    49cc:	59 07       	cpc	r21, r25
    49ce:	6a 07       	cpc	r22, r26
    49d0:	7b 07       	cpc	r23, r27
    49d2:	51 f4       	brne	.+20     	; 0x49e8 <nrk_sem_post+0x9e>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    49d4:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    49d6:	16 86       	std	Z+14, r1	; 0x0e
    49d8:	17 86       	std	Z+15, r1	; 0x0f
    49da:	10 8a       	std	Z+16, r1	; 0x10
    49dc:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    49de:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    49e0:	12 86       	std	Z+10, r1	; 0x0a
    49e2:	13 86       	std	Z+11, r1	; 0x0b
    49e4:	14 86       	std	Z+12, r1	; 0x0c
    49e6:	15 86       	std	Z+13, r1	; 0x0d
    49e8:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    49ea:	3c e0       	ldi	r19, 0x0C	; 12
    49ec:	e9 3e       	cpi	r30, 0xE9	; 233
    49ee:	f3 07       	cpc	r31, r19
    49f0:	29 f7       	brne	.-54     	; 0x49bc <nrk_sem_post+0x72>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    49f2:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
	}
		
return NRK_OK;
    49f6:	81 e0       	ldi	r24, 0x01	; 1
}
    49f8:	0f 90       	pop	r0
    49fa:	df 91       	pop	r29
    49fc:	cf 91       	pop	r28
    49fe:	1f 91       	pop	r17
    4a00:	0f 91       	pop	r16
    4a02:	08 95       	ret

00004a04 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    4a04:	0e 94 21 24 	call	0x4842	; 0x4842 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4a08:	8f 3f       	cpi	r24, 0xFF	; 255
    4a0a:	11 f4       	brne	.+4      	; 0x4a10 <nrk_sem_delete+0xc>
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	02 c0       	rjmp	.+4      	; 0x4a14 <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4a10:	82 30       	cpi	r24, 0x02	; 2
    4a12:	21 f4       	brne	.+8      	; 0x4a1c <nrk_sem_delete+0x18>
    4a14:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
    4a18:	8f ef       	ldi	r24, 0xFF	; 255
    4a1a:	08 95       	ret

	nrk_sem_list[id].count=-1;
    4a1c:	99 27       	eor	r25, r25
    4a1e:	87 fd       	sbrc	r24, 7
    4a20:	90 95       	com	r25
    4a22:	fc 01       	movw	r30, r24
    4a24:	ee 0f       	add	r30, r30
    4a26:	ff 1f       	adc	r31, r31
    4a28:	8e 0f       	add	r24, r30
    4a2a:	9f 1f       	adc	r25, r31
    4a2c:	fc 01       	movw	r30, r24
    4a2e:	ec 51       	subi	r30, 0x1C	; 28
    4a30:	f3 4f       	sbci	r31, 0xF3	; 243
    4a32:	8f ef       	ldi	r24, 0xFF	; 255
    4a34:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    4a36:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    4a38:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    4a3a:	80 91 fa 0c 	lds	r24, 0x0CFA
    4a3e:	81 50       	subi	r24, 0x01	; 1
    4a40:	80 93 fa 0c 	sts	0x0CFA, r24
return NRK_OK;
    4a44:	81 e0       	ldi	r24, 0x01	; 1
}
    4a46:	08 95       	ret

00004a48 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    4a48:	e0 91 f0 0c 	lds	r30, 0x0CF0
    4a4c:	f0 91 f1 0c 	lds	r31, 0x0CF1
}
    4a50:	80 81       	ld	r24, Z
    4a52:	08 95       	ret

00004a54 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    4a54:	e0 91 f0 0c 	lds	r30, 0x0CF0
    4a58:	f0 91 f1 0c 	lds	r31, 0x0CF1
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    4a5c:	30 97       	sbiw	r30, 0x00	; 0
    4a5e:	21 f0       	breq	.+8      	; 0x4a68 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    4a60:	03 80       	ldd	r0, Z+3	; 0x03
    4a62:	f4 81       	ldd	r31, Z+4	; 0x04
    4a64:	e0 2d       	mov	r30, r0
    4a66:	fa cf       	rjmp	.-12     	; 0x4a5c <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    4a68:	08 95       	ret

00004a6a <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    4a6a:	af 92       	push	r10
    4a6c:	bf 92       	push	r11
    4a6e:	cf 92       	push	r12
    4a70:	df 92       	push	r13
    4a72:	ef 92       	push	r14
    4a74:	ff 92       	push	r15
    4a76:	0f 93       	push	r16
    4a78:	1f 93       	push	r17
    4a7a:	cf 93       	push	r28
    4a7c:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    4a7e:	e0 91 34 0c 	lds	r30, 0x0C34
    4a82:	f0 91 35 0c 	lds	r31, 0x0C35
    4a86:	30 97       	sbiw	r30, 0x00	; 0
    4a88:	09 f4       	brne	.+2      	; 0x4a8c <nrk_add_to_readyQ+0x22>
    4a8a:	94 c0       	rjmp	.+296    	; 0x4bb4 <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    4a8c:	00 91 f0 0c 	lds	r16, 0x0CF0
    4a90:	10 91 f1 0c 	lds	r17, 0x0CF1
    CurNode = _free_node;

    if (_head_node != NULL)
    4a94:	01 15       	cp	r16, r1
    4a96:	11 05       	cpc	r17, r1
    4a98:	09 f4       	brne	.+2      	; 0x4a9c <nrk_add_to_readyQ+0x32>
    4a9a:	4c c0       	rjmp	.+152    	; 0x4b34 <nrk_add_to_readyQ+0xca>
    4a9c:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    4a9e:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    4aa0:	58 2f       	mov	r21, r24
    4aa2:	54 03       	mulsu	r21, r20
    4aa4:	90 01       	movw	r18, r0
    4aa6:	11 24       	eor	r1, r1
    4aa8:	2a 5c       	subi	r18, 0xCA	; 202
    4aaa:	33 4f       	sbci	r19, 0xF3	; 243
    4aac:	79 01       	movw	r14, r18
    4aae:	9a e0       	ldi	r25, 0x0A	; 10
    4ab0:	e9 0e       	add	r14, r25
    4ab2:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    4ab4:	69 01       	movw	r12, r18
    4ab6:	c4 e0       	ldi	r28, 0x04	; 4
    4ab8:	cc 0e       	add	r12, r28
    4aba:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    4abc:	59 01       	movw	r10, r18
    4abe:	db e0       	ldi	r29, 0x0B	; 11
    4ac0:	ad 0e       	add	r10, r29
    4ac2:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    4ac4:	2c 91       	ld	r18, X
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	42 9f       	mul	r20, r18
    4aca:	b0 01       	movw	r22, r0
    4acc:	43 9f       	mul	r20, r19
    4ace:	70 0d       	add	r23, r0
    4ad0:	11 24       	eor	r1, r1
    4ad2:	6a 5c       	subi	r22, 0xCA	; 202
    4ad4:	73 4f       	sbci	r23, 0xF3	; 243
    4ad6:	eb 01       	movw	r28, r22
    4ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    4ada:	99 23       	and	r25, r25
    4adc:	29 f0       	breq	.+10     	; 0x4ae8 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    4ade:	5b 85       	ldd	r21, Y+11	; 0x0b
    4ae0:	e7 01       	movw	r28, r14
    4ae2:	98 81       	ld	r25, Y
    4ae4:	59 17       	cp	r21, r25
    4ae6:	40 f1       	brcs	.+80     	; 0x4b38 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    4ae8:	e6 01       	movw	r28, r12
    4aea:	98 81       	ld	r25, Y
    4aec:	99 23       	and	r25, r25
    4aee:	69 f0       	breq	.+26     	; 0x4b0a <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    4af0:	42 9f       	mul	r20, r18
    4af2:	b0 01       	movw	r22, r0
    4af4:	43 9f       	mul	r20, r19
    4af6:	70 0d       	add	r23, r0
    4af8:	11 24       	eor	r1, r1
    4afa:	6a 5c       	subi	r22, 0xCA	; 202
    4afc:	73 4f       	sbci	r23, 0xF3	; 243
    4afe:	eb 01       	movw	r28, r22
    4b00:	5a 85       	ldd	r21, Y+10	; 0x0a
    4b02:	e5 01       	movw	r28, r10
    4b04:	98 81       	ld	r25, Y
    4b06:	59 17       	cp	r21, r25
    4b08:	b8 f0       	brcs	.+46     	; 0x4b38 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    4b0a:	42 9f       	mul	r20, r18
    4b0c:	b0 01       	movw	r22, r0
    4b0e:	43 9f       	mul	r20, r19
    4b10:	70 0d       	add	r23, r0
    4b12:	11 24       	eor	r1, r1
    4b14:	9b 01       	movw	r18, r22
    4b16:	2a 5c       	subi	r18, 0xCA	; 202
    4b18:	33 4f       	sbci	r19, 0xF3	; 243
    4b1a:	e9 01       	movw	r28, r18
    4b1c:	2a 85       	ldd	r18, Y+10	; 0x0a
    4b1e:	e7 01       	movw	r28, r14
    4b20:	98 81       	ld	r25, Y
    4b22:	29 17       	cp	r18, r25
    4b24:	48 f0       	brcs	.+18     	; 0x4b38 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    4b26:	13 96       	adiw	r26, 0x03	; 3
    4b28:	0d 90       	ld	r0, X+
    4b2a:	bc 91       	ld	r27, X
    4b2c:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    4b2e:	10 97       	sbiw	r26, 0x00	; 0
    4b30:	49 f6       	brne	.-110    	; 0x4ac4 <nrk_add_to_readyQ+0x5a>
    4b32:	02 c0       	rjmp	.+4      	; 0x4b38 <nrk_add_to_readyQ+0xce>
    4b34:	a0 e0       	ldi	r26, 0x00	; 0
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    4b38:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    4b3a:	c3 81       	ldd	r28, Z+3	; 0x03
    4b3c:	d4 81       	ldd	r29, Z+4	; 0x04
    4b3e:	d0 93 35 0c 	sts	0x0C35, r29
    4b42:	c0 93 34 0c 	sts	0x0C34, r28

    if (NextNode == _head_node)
    4b46:	a0 17       	cp	r26, r16
    4b48:	b1 07       	cpc	r27, r17
    4b4a:	b1 f4       	brne	.+44     	; 0x4b78 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    4b4c:	10 97       	sbiw	r26, 0x00	; 0
    4b4e:	49 f0       	breq	.+18     	; 0x4b62 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    4b50:	b4 83       	std	Z+4, r27	; 0x04
    4b52:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    4b54:	12 82       	std	Z+2, r1	; 0x02
    4b56:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    4b58:	12 96       	adiw	r26, 0x02	; 2
    4b5a:	fc 93       	st	X, r31
    4b5c:	ee 93       	st	-X, r30
    4b5e:	11 97       	sbiw	r26, 0x01	; 1
    4b60:	06 c0       	rjmp	.+12     	; 0x4b6e <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    4b62:	14 82       	std	Z+4, r1	; 0x04
    4b64:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    4b66:	12 82       	std	Z+2, r1	; 0x02
    4b68:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    4b6a:	fa 83       	std	Y+2, r31	; 0x02
    4b6c:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    4b6e:	f0 93 f1 0c 	sts	0x0CF1, r31
    4b72:	e0 93 f0 0c 	sts	0x0CF0, r30
    4b76:	1e c0       	rjmp	.+60     	; 0x4bb4 <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    4b78:	ac 17       	cp	r26, r28
    4b7a:	bd 07       	cpc	r27, r29
    4b7c:	79 f0       	breq	.+30     	; 0x4b9c <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    4b7e:	11 96       	adiw	r26, 0x01	; 1
    4b80:	8d 91       	ld	r24, X+
    4b82:	9c 91       	ld	r25, X
    4b84:	12 97       	sbiw	r26, 0x02	; 2
    4b86:	92 83       	std	Z+2, r25	; 0x02
    4b88:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    4b8a:	b4 83       	std	Z+4, r27	; 0x04
    4b8c:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    4b8e:	11 96       	adiw	r26, 0x01	; 1
    4b90:	cd 91       	ld	r28, X+
    4b92:	dc 91       	ld	r29, X
    4b94:	12 97       	sbiw	r26, 0x02	; 2
    4b96:	fc 83       	std	Y+4, r31	; 0x04
    4b98:	eb 83       	std	Y+3, r30	; 0x03
    4b9a:	08 c0       	rjmp	.+16     	; 0x4bac <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    4b9c:	14 82       	std	Z+4, r1	; 0x04
    4b9e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    4ba0:	11 96       	adiw	r26, 0x01	; 1
    4ba2:	8d 91       	ld	r24, X+
    4ba4:	9c 91       	ld	r25, X
    4ba6:	12 97       	sbiw	r26, 0x02	; 2
    4ba8:	92 83       	std	Z+2, r25	; 0x02
    4baa:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    4bac:	12 96       	adiw	r26, 0x02	; 2
    4bae:	fc 93       	st	X, r31
    4bb0:	ee 93       	st	-X, r30
    4bb2:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    4bb4:	df 91       	pop	r29
    4bb6:	cf 91       	pop	r28
    4bb8:	1f 91       	pop	r17
    4bba:	0f 91       	pop	r16
    4bbc:	ff 90       	pop	r15
    4bbe:	ef 90       	pop	r14
    4bc0:	df 90       	pop	r13
    4bc2:	cf 90       	pop	r12
    4bc4:	bf 90       	pop	r11
    4bc6:	af 90       	pop	r10
    4bc8:	08 95       	ret

00004bca <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    4bce:	e0 91 f0 0c 	lds	r30, 0x0CF0
    4bd2:	f0 91 f1 0c 	lds	r31, 0x0CF1
    4bd6:	30 97       	sbiw	r30, 0x00	; 0
    4bd8:	09 f4       	brne	.+2      	; 0x4bdc <nrk_rem_from_readyQ+0x12>
    4bda:	44 c0       	rjmp	.+136    	; 0x4c64 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    4bdc:	99 27       	eor	r25, r25
    4bde:	87 fd       	sbrc	r24, 7
    4be0:	90 95       	com	r25
    4be2:	20 81       	ld	r18, Z
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	28 17       	cp	r18, r24
    4be8:	39 07       	cpc	r19, r25
    4bea:	81 f4       	brne	.+32     	; 0x4c0c <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    4bec:	a3 81       	ldd	r26, Z+3	; 0x03
    4bee:	b4 81       	ldd	r27, Z+4	; 0x04
    4bf0:	b0 93 f1 0c 	sts	0x0CF1, r27
    4bf4:	a0 93 f0 0c 	sts	0x0CF0, r26
        _head_node->Prev = NULL;
    4bf8:	12 96       	adiw	r26, 0x02	; 2
    4bfa:	1c 92       	st	X, r1
    4bfc:	1e 92       	st	-X, r1
    4bfe:	11 97       	sbiw	r26, 0x01	; 1
    4c00:	18 c0       	rjmp	.+48     	; 0x4c32 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    4c02:	03 80       	ldd	r0, Z+3	; 0x03
    4c04:	f4 81       	ldd	r31, Z+4	; 0x04
    4c06:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    4c08:	30 97       	sbiw	r30, 0x00	; 0
    4c0a:	61 f1       	breq	.+88     	; 0x4c64 <nrk_rem_from_readyQ+0x9a>
    4c0c:	20 81       	ld	r18, Z
    4c0e:	30 e0       	ldi	r19, 0x00	; 0
    4c10:	28 17       	cp	r18, r24
    4c12:	39 07       	cpc	r19, r25
    4c14:	b1 f7       	brne	.-20     	; 0x4c02 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    4c16:	c1 81       	ldd	r28, Z+1	; 0x01
    4c18:	d2 81       	ldd	r29, Z+2	; 0x02
    4c1a:	83 81       	ldd	r24, Z+3	; 0x03
    4c1c:	94 81       	ldd	r25, Z+4	; 0x04
    4c1e:	9c 83       	std	Y+4, r25	; 0x04
    4c20:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    4c22:	a3 81       	ldd	r26, Z+3	; 0x03
    4c24:	b4 81       	ldd	r27, Z+4	; 0x04
    4c26:	10 97       	sbiw	r26, 0x00	; 0
    4c28:	21 f0       	breq	.+8      	; 0x4c32 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    4c2a:	12 96       	adiw	r26, 0x02	; 2
    4c2c:	dc 93       	st	X, r29
    4c2e:	ce 93       	st	-X, r28
    4c30:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    4c32:	a0 91 34 0c 	lds	r26, 0x0C34
    4c36:	b0 91 35 0c 	lds	r27, 0x0C35
    4c3a:	10 97       	sbiw	r26, 0x00	; 0
    4c3c:	39 f4       	brne	.+14     	; 0x4c4c <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    4c3e:	f0 93 35 0c 	sts	0x0C35, r31
    4c42:	e0 93 34 0c 	sts	0x0C34, r30
        _free_node->Next = NULL;
    4c46:	14 82       	std	Z+4, r1	; 0x04
    4c48:	13 82       	std	Z+3, r1	; 0x03
    4c4a:	0a c0       	rjmp	.+20     	; 0x4c60 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    4c4c:	b4 83       	std	Z+4, r27	; 0x04
    4c4e:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    4c50:	12 96       	adiw	r26, 0x02	; 2
    4c52:	fc 93       	st	X, r31
    4c54:	ee 93       	st	-X, r30
    4c56:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    4c58:	f0 93 35 0c 	sts	0x0C35, r31
    4c5c:	e0 93 34 0c 	sts	0x0C34, r30
    }
    _free_node->Prev = NULL;
    4c60:	12 82       	std	Z+2, r1	; 0x02
    4c62:	11 82       	std	Z+1, r1	; 0x01
}
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	08 95       	ret

00004c6a <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    4c6a:	ef 92       	push	r14
    4c6c:	ff 92       	push	r15
    4c6e:	0f 93       	push	r16
    4c70:	1f 93       	push	r17
    4c72:	cf 93       	push	r28
    4c74:	df 93       	push	r29
    4c76:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    4c78:	4b 81       	ldd	r20, Y+3	; 0x03
    4c7a:	5c 81       	ldd	r21, Y+4	; 0x04
    4c7c:	69 81       	ldd	r22, Y+1	; 0x01
    4c7e:	7a 81       	ldd	r23, Y+2	; 0x02
    4c80:	8d 81       	ldd	r24, Y+5	; 0x05
    4c82:	9e 81       	ldd	r25, Y+6	; 0x06
    4c84:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    4c88:	2f 81       	ldd	r18, Y+7	; 0x07
    4c8a:	22 23       	and	r18, r18
    4c8c:	71 f0       	breq	.+28     	; 0x4caa <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    4c8e:	4b 81       	ldd	r20, Y+3	; 0x03
    4c90:	5c 81       	ldd	r21, Y+4	; 0x04
    4c92:	e1 2c       	mov	r14, r1
    4c94:	f1 2c       	mov	r15, r1
    4c96:	00 e0       	ldi	r16, 0x00	; 0
    4c98:	10 e0       	ldi	r17, 0x00	; 0
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	bc 01       	movw	r22, r24
    4ca0:	ce 01       	movw	r24, r28
    4ca2:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    4ca6:	1f 82       	std	Y+7, r1	; 0x07
    4ca8:	0c c0       	rjmp	.+24     	; 0x4cc2 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    4caa:	e8 81       	ld	r30, Y
    4cac:	2b e2       	ldi	r18, 0x2B	; 43
    4cae:	e2 02       	muls	r30, r18
    4cb0:	f0 01       	movw	r30, r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	ea 5c       	subi	r30, 0xCA	; 202
    4cb6:	f3 4f       	sbci	r31, 0xF3	; 243
    4cb8:	21 85       	ldd	r18, Z+9	; 0x09
    4cba:	23 30       	cpi	r18, 0x03	; 3
    4cbc:	b9 f4       	brne	.+46     	; 0x4cec <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    4cbe:	91 83       	std	Z+1, r25	; 0x01
    4cc0:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    4cc2:	e8 81       	ld	r30, Y
    4cc4:	8b e2       	ldi	r24, 0x2B	; 43
    4cc6:	e8 02       	muls	r30, r24
    4cc8:	f0 01       	movw	r30, r0
    4cca:	11 24       	eor	r1, r1
    4ccc:	ea 5c       	subi	r30, 0xCA	; 202
    4cce:	f3 4f       	sbci	r31, 0xF3	; 243
    4cd0:	85 89       	ldd	r24, Z+21	; 0x15
    4cd2:	96 89       	ldd	r25, Z+22	; 0x16
    4cd4:	a7 89       	ldd	r26, Z+23	; 0x17
    4cd6:	b0 8d       	ldd	r27, Z+24	; 0x18
    4cd8:	89 2b       	or	r24, r25
    4cda:	8a 2b       	or	r24, r26
    4cdc:	8b 2b       	or	r24, r27
    4cde:	41 f4       	brne	.+16     	; 0x4cf0 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    4ce0:	82 e0       	ldi	r24, 0x02	; 2
    4ce2:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    4ce4:	88 81       	ld	r24, Y
    4ce6:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <nrk_add_to_readyQ>
    4cea:	02 c0       	rjmp	.+4      	; 0x4cf0 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    4cec:	8f ef       	ldi	r24, 0xFF	; 255
    4cee:	01 c0       	rjmp	.+2      	; 0x4cf2 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
}
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	1f 91       	pop	r17
    4cf8:	0f 91       	pop	r16
    4cfa:	ff 90       	pop	r15
    4cfc:	ef 90       	pop	r14
    4cfe:	08 95       	ret

00004d00 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    4d00:	1f 93       	push	r17
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	28 97       	sbiw	r28, 0x08	; 8
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	de bf       	out	0x3e, r29	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	cd bf       	out	0x3d, r28	; 61
    4d16:	29 83       	std	Y+1, r18	; 0x01
    4d18:	3a 83       	std	Y+2, r19	; 0x02
    4d1a:	4b 83       	std	Y+3, r20	; 0x03
    4d1c:	5c 83       	std	Y+4, r21	; 0x04
    4d1e:	6d 83       	std	Y+5, r22	; 0x05
    4d20:	7e 83       	std	Y+6, r23	; 0x06
    4d22:	8f 83       	std	Y+7, r24	; 0x07
    4d24:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    4d26:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    4d2a:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4d2e:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    4d30:	ce 01       	movw	r24, r28
    4d32:	01 96       	adiw	r24, 0x01	; 1
    4d34:	0e 94 92 2a 	call	0x5524	; 0x5524 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    4d38:	63 30       	cpi	r22, 0x03	; 3
    4d3a:	71 05       	cpc	r23, r1
    4d3c:	98 f0       	brcs	.+38     	; 0x4d64 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4d3e:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4d42:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4d46:	21 2f       	mov	r18, r17
    4d48:	30 e0       	ldi	r19, 0x00	; 0
    4d4a:	62 0f       	add	r22, r18
    4d4c:	73 1f       	adc	r23, r19
    4d4e:	cb 01       	movw	r24, r22
    4d50:	a0 e0       	ldi	r26, 0x00	; 0
    4d52:	b0 e0       	ldi	r27, 0x00	; 0
    4d54:	85 8b       	std	Z+21, r24	; 0x15
    4d56:	96 8b       	std	Z+22, r25	; 0x16
    4d58:	a7 8b       	std	Z+23, r26	; 0x17
    4d5a:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    4d5c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>

    return NRK_OK;
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	01 c0       	rjmp	.+2      	; 0x4d66 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    4d64:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    4d66:	28 96       	adiw	r28, 0x08	; 8
    4d68:	0f b6       	in	r0, 0x3f	; 63
    4d6a:	f8 94       	cli
    4d6c:	de bf       	out	0x3e, r29	; 62
    4d6e:	0f be       	out	0x3f, r0	; 63
    4d70:	cd bf       	out	0x3d, r28	; 61
    4d72:	df 91       	pop	r29
    4d74:	cf 91       	pop	r28
    4d76:	1f 91       	pop	r17
    4d78:	08 95       	ret

00004d7a <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    4d7a:	0e 94 c4 32 	call	0x6588	; 0x6588 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    4d7e:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4d82:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4d86:	85 81       	ldd	r24, Z+5	; 0x05
    4d88:	81 11       	cpse	r24, r1
    4d8a:	f7 cf       	rjmp	.-18     	; 0x4d7a <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    4d8c:	08 95       	ret

00004d8e <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    4d8e:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    4d90:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    4d94:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    4d98:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4d9c:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	92 a7       	std	Z+42, r25	; 0x2a
    4da6:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    4da8:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4daa:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4dae:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4db0:	88 3f       	cpi	r24, 0xF8	; 248
    4db2:	80 f4       	brcc	.+32     	; 0x4dd4 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4db4:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <_nrk_get_next_wakeup>
    4db8:	2c 2f       	mov	r18, r28
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	2f 5f       	subi	r18, 0xFF	; 255
    4dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	28 17       	cp	r18, r24
    4dc4:	39 07       	cpc	r19, r25
    4dc6:	34 f4       	brge	.+12     	; 0x4dd4 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    4dc8:	82 e0       	ldi	r24, 0x02	; 2
    4dca:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    4dcc:	80 93 95 0b 	sts	0x0B95, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4dd0:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4dd4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4dd8:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4ddc:	81 e0       	ldi	r24, 0x01	; 1
    4dde:	cf 91       	pop	r28
    4de0:	08 95       	ret

00004de2 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    4de2:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4de6:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4dea:	80 85       	ldd	r24, Z+8	; 0x08
    4dec:	0e 94 e5 25 	call	0x4bca	; 0x4bca <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    4df0:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4df4:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4df8:	84 e0       	ldi	r24, 0x04	; 4
    4dfa:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    4dfc:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <nrk_wait_until_next_period>
    return NRK_OK;
}
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	08 95       	ret

00004e04 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    4e04:	cf 93       	push	r28
    4e06:	df 93       	push	r29
    4e08:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    4e0a:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <nrk_stack_check>

    if (p == 0)
    4e0e:	20 97       	sbiw	r28, 0x00	; 0
    4e10:	11 f4       	brne	.+4      	; 0x4e16 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    4e12:	c1 e0       	ldi	r28, 0x01	; 1
    4e14:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    4e16:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4e1a:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4e1e:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4e22:	81 e0       	ldi	r24, 0x01	; 1
    4e24:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    4e26:	d2 a7       	std	Z+42, r29	; 0x2a
    4e28:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    4e2a:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4e2e:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    4e30:	88 3f       	cpi	r24, 0xF8	; 248
    4e32:	80 f4       	brcc	.+32     	; 0x4e54 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4e34:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <_nrk_get_next_wakeup>
    4e38:	2c 2f       	mov	r18, r28
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	2f 5f       	subi	r18, 0xFF	; 255
    4e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	28 17       	cp	r18, r24
    4e44:	39 07       	cpc	r19, r25
    4e46:	34 f4       	brge	.+12     	; 0x4e54 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    4e48:	82 e0       	ldi	r24, 0x02	; 2
    4e4a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4e4c:	80 93 95 0b 	sts	0x0B95, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4e50:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4e54:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4e58:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	df 91       	pop	r29
    4e60:	cf 91       	pop	r28
    4e62:	08 95       	ret

00004e64 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    4e64:	ef 92       	push	r14
    4e66:	ff 92       	push	r15
    4e68:	0f 93       	push	r16
    4e6a:	1f 93       	push	r17
    4e6c:	cf 93       	push	r28
    4e6e:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    4e70:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4e74:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4e78:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4e7c:	81 e0       	ldi	r24, 0x01	; 1
    4e7e:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4e80:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4e84:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    4e86:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4e8a:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4e8e:	e8 2e       	mov	r14, r24
    4e90:	f1 2c       	mov	r15, r1
    4e92:	c7 01       	movw	r24, r14
    4e94:	80 0f       	add	r24, r16
    4e96:	91 1f       	adc	r25, r17
    4e98:	a0 e0       	ldi	r26, 0x00	; 0
    4e9a:	b0 e0       	ldi	r27, 0x00	; 0
    4e9c:	85 8b       	std	Z+21, r24	; 0x15
    4e9e:	96 8b       	std	Z+22, r25	; 0x16
    4ea0:	a7 8b       	std	Z+23, r26	; 0x17
    4ea2:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4ea4:	c8 3f       	cpi	r28, 0xF8	; 248
    4ea6:	78 f4       	brcc	.+30     	; 0x4ec6 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4ea8:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <_nrk_get_next_wakeup>
    4eac:	9f ef       	ldi	r25, 0xFF	; 255
    4eae:	e9 1a       	sub	r14, r25
    4eb0:	f9 0a       	sbc	r15, r25
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	e8 16       	cp	r14, r24
    4eb6:	f9 06       	cpc	r15, r25
    4eb8:	34 f4       	brge	.+12     	; 0x4ec6 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    4eba:	82 e0       	ldi	r24, 0x02	; 2
    4ebc:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4ebe:	80 93 95 0b 	sts	0x0B95, r24
            _nrk_set_next_wakeup (timer);
    4ec2:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4ec6:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4eca:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	cf 91       	pop	r28
    4ed2:	1f 91       	pop	r17
    4ed4:	0f 91       	pop	r16
    4ed6:	ff 90       	pop	r15
    4ed8:	ef 90       	pop	r14
    4eda:	08 95       	ret

00004edc <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
    4ee0:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    4ee2:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4ee6:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4eea:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4eee:	21 e0       	ldi	r18, 0x01	; 1
    4ef0:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    4ef2:	ce 01       	movw	r24, r28
    4ef4:	a0 e0       	ldi	r26, 0x00	; 0
    4ef6:	b0 e0       	ldi	r27, 0x00	; 0
    4ef8:	85 8b       	std	Z+21, r24	; 0x15
    4efa:	96 8b       	std	Z+22, r25	; 0x16
    4efc:	a7 8b       	std	Z+23, r26	; 0x17
    4efe:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    4f00:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4f04:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4f06:	88 3f       	cpi	r24, 0xF8	; 248
    4f08:	80 f4       	brcc	.+32     	; 0x4f2a <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4f0a:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <_nrk_get_next_wakeup>
    4f0e:	2c 2f       	mov	r18, r28
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	2f 5f       	subi	r18, 0xFF	; 255
    4f14:	3f 4f       	sbci	r19, 0xFF	; 255
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	28 17       	cp	r18, r24
    4f1a:	39 07       	cpc	r19, r25
    4f1c:	34 f4       	brge	.+12     	; 0x4f2a <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    4f1e:	82 e0       	ldi	r24, 0x02	; 2
    4f20:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4f22:	80 93 95 0b 	sts	0x0B95, r24
            _nrk_set_next_wakeup (timer);
    4f26:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4f2a:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4f2e:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	08 95       	ret

00004f3a <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    4f3a:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    4f3c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4f40:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4f44:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    4f4c:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    4f4e:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4f52:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4f54:	88 3f       	cpi	r24, 0xF8	; 248
    4f56:	80 f4       	brcc	.+32     	; 0x4f78 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4f58:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <_nrk_get_next_wakeup>
    4f5c:	2c 2f       	mov	r18, r28
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	2f 5f       	subi	r18, 0xFF	; 255
    4f62:	3f 4f       	sbci	r19, 0xFF	; 255
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	28 17       	cp	r18, r24
    4f68:	39 07       	cpc	r19, r25
    4f6a:	34 f4       	brge	.+12     	; 0x4f78 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    4f6c:	82 e0       	ldi	r24, 0x02	; 2
    4f6e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4f70:	80 93 95 0b 	sts	0x0B95, r24
            _nrk_set_next_wakeup (timer);
    4f74:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4f78:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4f7c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4f80:	81 e0       	ldi	r24, 0x01	; 1
    4f82:	cf 91       	pop	r28
    4f84:	08 95       	ret

00004f86 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    4f86:	1f 93       	push	r17
    4f88:	cf 93       	push	r28
    4f8a:	df 93       	push	r29
    4f8c:	cd b7       	in	r28, 0x3d	; 61
    4f8e:	de b7       	in	r29, 0x3e	; 62
    4f90:	28 97       	sbiw	r28, 0x08	; 8
    4f92:	0f b6       	in	r0, 0x3f	; 63
    4f94:	f8 94       	cli
    4f96:	de bf       	out	0x3e, r29	; 62
    4f98:	0f be       	out	0x3f, r0	; 63
    4f9a:	cd bf       	out	0x3d, r28	; 61
    4f9c:	29 83       	std	Y+1, r18	; 0x01
    4f9e:	3a 83       	std	Y+2, r19	; 0x02
    4fa0:	4b 83       	std	Y+3, r20	; 0x03
    4fa2:	5c 83       	std	Y+4, r21	; 0x04
    4fa4:	6d 83       	std	Y+5, r22	; 0x05
    4fa6:	7e 83       	std	Y+6, r23	; 0x06
    4fa8:	8f 83       	std	Y+7, r24	; 0x07
    4faa:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    4fac:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <nrk_stack_check>

    nrk_int_disable ();
    4fb0:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4fb4:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4fb8:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
    4fbe:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	92 a7       	std	Z+42, r25	; 0x2a
    4fc6:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    4fc8:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    4fcc:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    4fce:	ce 01       	movw	r24, r28
    4fd0:	01 96       	adiw	r24, 0x01	; 1
    4fd2:	0e 94 92 2a 	call	0x5524	; 0x5524 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4fd6:	e0 91 fb 0c 	lds	r30, 0x0CFB
    4fda:	f0 91 fc 0c 	lds	r31, 0x0CFC
    4fde:	dc 01       	movw	r26, r24
    4fe0:	cb 01       	movw	r24, r22
    4fe2:	81 0f       	add	r24, r17
    4fe4:	91 1d       	adc	r25, r1
    4fe6:	a1 1d       	adc	r26, r1
    4fe8:	b1 1d       	adc	r27, r1
    4fea:	85 8b       	std	Z+21, r24	; 0x15
    4fec:	96 8b       	std	Z+22, r25	; 0x16
    4fee:	a7 8b       	std	Z+23, r26	; 0x17
    4ff0:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4ff2:	18 3f       	cpi	r17, 0xF8	; 248
    4ff4:	80 f4       	brcc	.+32     	; 0x5016 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4ff6:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <_nrk_get_next_wakeup>
    4ffa:	21 2f       	mov	r18, r17
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	2f 5f       	subi	r18, 0xFF	; 255
    5000:	3f 4f       	sbci	r19, 0xFF	; 255
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	28 17       	cp	r18, r24
    5006:	39 07       	cpc	r19, r25
    5008:	34 f4       	brge	.+12     	; 0x5016 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    500a:	82 e0       	ldi	r24, 0x02	; 2
    500c:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    500e:	80 93 95 0b 	sts	0x0B95, r24
            _nrk_set_next_wakeup (timer);
    5012:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    5016:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    501a:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    501e:	81 e0       	ldi	r24, 0x01	; 1
    5020:	28 96       	adiw	r28, 0x08	; 8
    5022:	0f b6       	in	r0, 0x3f	; 63
    5024:	f8 94       	cli
    5026:	de bf       	out	0x3e, r29	; 62
    5028:	0f be       	out	0x3f, r0	; 63
    502a:	cd bf       	out	0x3d, r28	; 61
    502c:	df 91       	pop	r29
    502e:	cf 91       	pop	r28
    5030:	1f 91       	pop	r17
    5032:	08 95       	ret

00005034 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    5034:	8f 92       	push	r8
    5036:	9f 92       	push	r9
    5038:	af 92       	push	r10
    503a:	bf 92       	push	r11
    503c:	cf 92       	push	r12
    503e:	df 92       	push	r13
    5040:	ef 92       	push	r14
    5042:	ff 92       	push	r15
    5044:	0f 93       	push	r16
    5046:	1f 93       	push	r17
    5048:	cf 93       	push	r28
    504a:	df 93       	push	r29
    504c:	cd b7       	in	r28, 0x3d	; 61
    504e:	de b7       	in	r29, 0x3e	; 62
    5050:	60 97       	sbiw	r28, 0x10	; 16
    5052:	0f b6       	in	r0, 0x3f	; 63
    5054:	f8 94       	cli
    5056:	de bf       	out	0x3e, r29	; 62
    5058:	0f be       	out	0x3f, r0	; 63
    505a:	cd bf       	out	0x3d, r28	; 61
    505c:	29 87       	std	Y+9, r18	; 0x09
    505e:	3a 87       	std	Y+10, r19	; 0x0a
    5060:	4b 87       	std	Y+11, r20	; 0x0b
    5062:	5c 87       	std	Y+12, r21	; 0x0c
    5064:	6d 87       	std	Y+13, r22	; 0x0d
    5066:	7e 87       	std	Y+14, r23	; 0x0e
    5068:	8f 87       	std	Y+15, r24	; 0x0f
    506a:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    506c:	ce 01       	movw	r24, r28
    506e:	01 96       	adiw	r24, 0x01	; 1
    5070:	0e 94 76 28 	call	0x50ec	; 0x50ec <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    5074:	89 80       	ldd	r8, Y+1	; 0x01
    5076:	9a 80       	ldd	r9, Y+2	; 0x02
    5078:	ab 80       	ldd	r10, Y+3	; 0x03
    507a:	bc 80       	ldd	r11, Y+4	; 0x04
    507c:	cd 80       	ldd	r12, Y+5	; 0x05
    507e:	de 80       	ldd	r13, Y+6	; 0x06
    5080:	ef 80       	ldd	r14, Y+7	; 0x07
    5082:	f8 84       	ldd	r15, Y+8	; 0x08
    5084:	09 85       	ldd	r16, Y+9	; 0x09
    5086:	1a 85       	ldd	r17, Y+10	; 0x0a
    5088:	2b 85       	ldd	r18, Y+11	; 0x0b
    508a:	3c 85       	ldd	r19, Y+12	; 0x0c
    508c:	4d 85       	ldd	r20, Y+13	; 0x0d
    508e:	5e 85       	ldd	r21, Y+14	; 0x0e
    5090:	6f 85       	ldd	r22, Y+15	; 0x0f
    5092:	78 89       	ldd	r23, Y+16	; 0x10
    5094:	ce 01       	movw	r24, r28
    5096:	09 96       	adiw	r24, 0x09	; 9
    5098:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    509c:	8f 3f       	cpi	r24, 0xFF	; 255
    509e:	61 f0       	breq	.+24     	; 0x50b8 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    50a0:	29 85       	ldd	r18, Y+9	; 0x09
    50a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    50a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    50a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    50a8:	6d 85       	ldd	r22, Y+13	; 0x0d
    50aa:	7e 85       	ldd	r23, Y+14	; 0x0e
    50ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    50ae:	98 89       	ldd	r25, Y+16	; 0x10
    50b0:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <nrk_wait>

    return NRK_OK;
    50b4:	81 e0       	ldi	r24, 0x01	; 1
    50b6:	01 c0       	rjmp	.+2      	; 0x50ba <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    50b8:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    50ba:	60 96       	adiw	r28, 0x10	; 16
    50bc:	0f b6       	in	r0, 0x3f	; 63
    50be:	f8 94       	cli
    50c0:	de bf       	out	0x3e, r29	; 62
    50c2:	0f be       	out	0x3f, r0	; 63
    50c4:	cd bf       	out	0x3d, r28	; 61
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	1f 91       	pop	r17
    50cc:	0f 91       	pop	r16
    50ce:	ff 90       	pop	r15
    50d0:	ef 90       	pop	r14
    50d2:	df 90       	pop	r13
    50d4:	cf 90       	pop	r12
    50d6:	bf 90       	pop	r11
    50d8:	af 90       	pop	r10
    50da:	9f 90       	pop	r9
    50dc:	8f 90       	pop	r8
    50de:	08 95       	ret

000050e0 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    50e0:	e0 91 fb 0c 	lds	r30, 0x0CFB
    50e4:	f0 91 fc 0c 	lds	r31, 0x0CFC
}
    50e8:	80 85       	ldd	r24, Z+8	; 0x08
    50ea:	08 95       	ret

000050ec <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    50ec:	0f 93       	push	r16
    50ee:	1f 93       	push	r17
    50f0:	cf 93       	push	r28
    50f2:	df 93       	push	r29
    50f4:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    50f6:	1c 82       	std	Y+4, r1	; 0x04
    50f8:	1d 82       	std	Y+5, r1	; 0x05
    50fa:	1e 82       	std	Y+6, r1	; 0x06
    50fc:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    50fe:	80 91 f2 0c 	lds	r24, 0x0CF2
    5102:	90 91 f3 0c 	lds	r25, 0x0CF3
    5106:	a0 91 f4 0c 	lds	r26, 0x0CF4
    510a:	b0 91 f5 0c 	lds	r27, 0x0CF5
    510e:	88 83       	st	Y, r24
    5110:	99 83       	std	Y+1, r25	; 0x01
    5112:	aa 83       	std	Y+2, r26	; 0x02
    5114:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    5116:	80 91 f6 0c 	lds	r24, 0x0CF6
    511a:	90 91 f7 0c 	lds	r25, 0x0CF7
    511e:	a0 91 f8 0c 	lds	r26, 0x0CF8
    5122:	b0 91 f9 0c 	lds	r27, 0x0CF9
    5126:	8c 83       	std	Y+4, r24	; 0x04
    5128:	9d 83       	std	Y+5, r25	; 0x05
    512a:	ae 83       	std	Y+6, r26	; 0x06
    512c:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    512e:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    5132:	a8 2f       	mov	r26, r24
    5134:	b0 e0       	ldi	r27, 0x00	; 0
    5136:	23 eb       	ldi	r18, 0xB3	; 179
    5138:	36 ee       	ldi	r19, 0xE6	; 230
    513a:	4e e0       	ldi	r20, 0x0E	; 14
    513c:	50 e0       	ldi	r21, 0x00	; 0
    513e:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    5142:	0c 81       	ldd	r16, Y+4	; 0x04
    5144:	1d 81       	ldd	r17, Y+5	; 0x05
    5146:	2e 81       	ldd	r18, Y+6	; 0x06
    5148:	3f 81       	ldd	r19, Y+7	; 0x07
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	80 0f       	add	r24, r16
    5150:	91 1f       	adc	r25, r17
    5152:	a2 1f       	adc	r26, r18
    5154:	b3 1f       	adc	r27, r19
    5156:	8c 83       	std	Y+4, r24	; 0x04
    5158:	9d 83       	std	Y+5, r25	; 0x05
    515a:	ae 83       	std	Y+6, r26	; 0x06
    515c:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    515e:	8c 81       	ldd	r24, Y+4	; 0x04
    5160:	9d 81       	ldd	r25, Y+5	; 0x05
    5162:	ae 81       	ldd	r26, Y+6	; 0x06
    5164:	bf 81       	ldd	r27, Y+7	; 0x07
    5166:	81 15       	cp	r24, r1
    5168:	2a ec       	ldi	r18, 0xCA	; 202
    516a:	92 07       	cpc	r25, r18
    516c:	2a e9       	ldi	r18, 0x9A	; 154
    516e:	a2 07       	cpc	r26, r18
    5170:	2b e3       	ldi	r18, 0x3B	; 59
    5172:	b2 07       	cpc	r27, r18
    5174:	98 f0       	brcs	.+38     	; 0x519c <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    5176:	9a 5c       	subi	r25, 0xCA	; 202
    5178:	aa 49       	sbci	r26, 0x9A	; 154
    517a:	bb 43       	sbci	r27, 0x3B	; 59
    517c:	8c 83       	std	Y+4, r24	; 0x04
    517e:	9d 83       	std	Y+5, r25	; 0x05
    5180:	ae 83       	std	Y+6, r26	; 0x06
    5182:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    5184:	88 81       	ld	r24, Y
    5186:	99 81       	ldd	r25, Y+1	; 0x01
    5188:	aa 81       	ldd	r26, Y+2	; 0x02
    518a:	bb 81       	ldd	r27, Y+3	; 0x03
    518c:	01 96       	adiw	r24, 0x01	; 1
    518e:	a1 1d       	adc	r26, r1
    5190:	b1 1d       	adc	r27, r1
    5192:	88 83       	st	Y, r24
    5194:	99 83       	std	Y+1, r25	; 0x01
    5196:	aa 83       	std	Y+2, r26	; 0x02
    5198:	bb 83       	std	Y+3, r27	; 0x03
    519a:	e1 cf       	rjmp	.-62     	; 0x515e <nrk_time_get+0x72>
    }

}
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	1f 91       	pop	r17
    51a2:	0f 91       	pop	r16
    51a4:	08 95       	ret

000051a6 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    51a6:	8f 92       	push	r8
    51a8:	9f 92       	push	r9
    51aa:	af 92       	push	r10
    51ac:	bf 92       	push	r11
    51ae:	cf 92       	push	r12
    51b0:	df 92       	push	r13
    51b2:	ef 92       	push	r14
    51b4:	ff 92       	push	r15
    51b6:	0f 93       	push	r16
    51b8:	1f 93       	push	r17
    51ba:	cf 93       	push	r28
    51bc:	df 93       	push	r29
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
    51c2:	60 97       	sbiw	r28, 0x10	; 16
    51c4:	0f b6       	in	r0, 0x3f	; 63
    51c6:	f8 94       	cli
    51c8:	de bf       	out	0x3e, r29	; 62
    51ca:	0f be       	out	0x3f, r0	; 63
    51cc:	cd bf       	out	0x3d, r28	; 61
    51ce:	fc 01       	movw	r30, r24
    51d0:	09 83       	std	Y+1, r16	; 0x01
    51d2:	1a 83       	std	Y+2, r17	; 0x02
    51d4:	2b 83       	std	Y+3, r18	; 0x03
    51d6:	3c 83       	std	Y+4, r19	; 0x04
    51d8:	4d 83       	std	Y+5, r20	; 0x05
    51da:	5e 83       	std	Y+6, r21	; 0x06
    51dc:	6f 83       	std	Y+7, r22	; 0x07
    51de:	78 87       	std	Y+8, r23	; 0x08
    51e0:	89 86       	std	Y+9, r8	; 0x09
    51e2:	9a 86       	std	Y+10, r9	; 0x0a
    51e4:	ab 86       	std	Y+11, r10	; 0x0b
    51e6:	bc 86       	std	Y+12, r11	; 0x0c
    51e8:	cd 86       	std	Y+13, r12	; 0x0d
    51ea:	de 86       	std	Y+14, r13	; 0x0e
    51ec:	ef 86       	std	Y+15, r14	; 0x0f
    51ee:	f8 8a       	std	Y+16, r15	; 0x10
    51f0:	09 81       	ldd	r16, Y+1	; 0x01
    51f2:	1a 81       	ldd	r17, Y+2	; 0x02
    51f4:	2b 81       	ldd	r18, Y+3	; 0x03
    51f6:	3c 81       	ldd	r19, Y+4	; 0x04
    51f8:	4d 81       	ldd	r20, Y+5	; 0x05
    51fa:	5e 81       	ldd	r21, Y+6	; 0x06
    51fc:	6f 81       	ldd	r22, Y+7	; 0x07
    51fe:	78 85       	ldd	r23, Y+8	; 0x08
    5200:	c9 84       	ldd	r12, Y+9	; 0x09
    5202:	da 84       	ldd	r13, Y+10	; 0x0a
    5204:	eb 84       	ldd	r14, Y+11	; 0x0b
    5206:	fc 84       	ldd	r15, Y+12	; 0x0c
    5208:	8d 85       	ldd	r24, Y+13	; 0x0d
    520a:	9e 85       	ldd	r25, Y+14	; 0x0e
    520c:	af 85       	ldd	r26, Y+15	; 0x0f
    520e:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    5210:	0c 15       	cp	r16, r12
    5212:	1d 05       	cpc	r17, r13
    5214:	2e 05       	cpc	r18, r14
    5216:	3f 05       	cpc	r19, r15
    5218:	f0 f1       	brcs	.+124    	; 0x5296 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    521a:	c0 16       	cp	r12, r16
    521c:	d1 06       	cpc	r13, r17
    521e:	e2 06       	cpc	r14, r18
    5220:	f3 06       	cpc	r15, r19
    5222:	91 f4       	brne	.+36     	; 0x5248 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    5224:	48 17       	cp	r20, r24
    5226:	59 07       	cpc	r21, r25
    5228:	6a 07       	cpc	r22, r26
    522a:	7b 07       	cpc	r23, r27
    522c:	a0 f1       	brcs	.+104    	; 0x5296 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    522e:	48 1b       	sub	r20, r24
    5230:	59 0b       	sbc	r21, r25
    5232:	6a 0b       	sbc	r22, r26
    5234:	7b 0b       	sbc	r23, r27
    5236:	44 83       	std	Z+4, r20	; 0x04
    5238:	55 83       	std	Z+5, r21	; 0x05
    523a:	66 83       	std	Z+6, r22	; 0x06
    523c:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    523e:	10 82       	st	Z, r1
    5240:	11 82       	std	Z+1, r1	; 0x01
    5242:	12 82       	std	Z+2, r1	; 0x02
    5244:	13 82       	std	Z+3, r1	; 0x03
    5246:	25 c0       	rjmp	.+74     	; 0x5292 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    5248:	48 17       	cp	r20, r24
    524a:	59 07       	cpc	r21, r25
    524c:	6a 07       	cpc	r22, r26
    524e:	7b 07       	cpc	r23, r27
    5250:	80 f4       	brcc	.+32     	; 0x5272 <nrk_time_sub+0xcc>
{
	high.secs--;
    5252:	01 50       	subi	r16, 0x01	; 1
    5254:	11 09       	sbc	r17, r1
    5256:	21 09       	sbc	r18, r1
    5258:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    525a:	0c 19       	sub	r16, r12
    525c:	1d 09       	sbc	r17, r13
    525e:	2e 09       	sbc	r18, r14
    5260:	3f 09       	sbc	r19, r15
    5262:	00 83       	st	Z, r16
    5264:	11 83       	std	Z+1, r17	; 0x01
    5266:	22 83       	std	Z+2, r18	; 0x02
    5268:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    526a:	56 53       	subi	r21, 0x36	; 54
    526c:	65 46       	sbci	r22, 0x65	; 101
    526e:	74 4c       	sbci	r23, 0xC4	; 196
    5270:	08 c0       	rjmp	.+16     	; 0x5282 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    5272:	0c 19       	sub	r16, r12
    5274:	1d 09       	sbc	r17, r13
    5276:	2e 09       	sbc	r18, r14
    5278:	3f 09       	sbc	r19, r15
    527a:	00 83       	st	Z, r16
    527c:	11 83       	std	Z+1, r17	; 0x01
    527e:	22 83       	std	Z+2, r18	; 0x02
    5280:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    5282:	48 1b       	sub	r20, r24
    5284:	59 0b       	sbc	r21, r25
    5286:	6a 0b       	sbc	r22, r26
    5288:	7b 0b       	sbc	r23, r27
    528a:	44 83       	std	Z+4, r20	; 0x04
    528c:	55 83       	std	Z+5, r21	; 0x05
    528e:	66 83       	std	Z+6, r22	; 0x06
    5290:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	01 c0       	rjmp	.+2      	; 0x5298 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    5296:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    5298:	60 96       	adiw	r28, 0x10	; 16
    529a:	0f b6       	in	r0, 0x3f	; 63
    529c:	f8 94       	cli
    529e:	de bf       	out	0x3e, r29	; 62
    52a0:	0f be       	out	0x3f, r0	; 63
    52a2:	cd bf       	out	0x3d, r28	; 61
    52a4:	df 91       	pop	r29
    52a6:	cf 91       	pop	r28
    52a8:	1f 91       	pop	r17
    52aa:	0f 91       	pop	r16
    52ac:	ff 90       	pop	r15
    52ae:	ef 90       	pop	r14
    52b0:	df 90       	pop	r13
    52b2:	cf 90       	pop	r12
    52b4:	bf 90       	pop	r11
    52b6:	af 90       	pop	r10
    52b8:	9f 90       	pop	r9
    52ba:	8f 90       	pop	r8
    52bc:	08 95       	ret

000052be <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    52be:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    52c0:	44 81       	ldd	r20, Z+4	; 0x04
    52c2:	55 81       	ldd	r21, Z+5	; 0x05
    52c4:	66 81       	ldd	r22, Z+6	; 0x06
    52c6:	77 81       	ldd	r23, Z+7	; 0x07
    52c8:	41 15       	cp	r20, r1
    52ca:	8a ec       	ldi	r24, 0xCA	; 202
    52cc:	58 07       	cpc	r21, r24
    52ce:	8a e9       	ldi	r24, 0x9A	; 154
    52d0:	68 07       	cpc	r22, r24
    52d2:	8b e3       	ldi	r24, 0x3B	; 59
    52d4:	78 07       	cpc	r23, r24
    52d6:	98 f0       	brcs	.+38     	; 0x52fe <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    52d8:	5a 5c       	subi	r21, 0xCA	; 202
    52da:	6a 49       	sbci	r22, 0x9A	; 154
    52dc:	7b 43       	sbci	r23, 0x3B	; 59
    52de:	44 83       	std	Z+4, r20	; 0x04
    52e0:	55 83       	std	Z+5, r21	; 0x05
    52e2:	66 83       	std	Z+6, r22	; 0x06
    52e4:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    52e6:	80 81       	ld	r24, Z
    52e8:	91 81       	ldd	r25, Z+1	; 0x01
    52ea:	a2 81       	ldd	r26, Z+2	; 0x02
    52ec:	b3 81       	ldd	r27, Z+3	; 0x03
    52ee:	01 96       	adiw	r24, 0x01	; 1
    52f0:	a1 1d       	adc	r26, r1
    52f2:	b1 1d       	adc	r27, r1
    52f4:	80 83       	st	Z, r24
    52f6:	91 83       	std	Z+1, r25	; 0x01
    52f8:	a2 83       	std	Z+2, r26	; 0x02
    52fa:	b3 83       	std	Z+3, r27	; 0x03
    52fc:	e1 cf       	rjmp	.-62     	; 0x52c0 <nrk_time_compact_nanos+0x2>
    }
}
    52fe:	08 95       	ret

00005300 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    5300:	8f 92       	push	r8
    5302:	9f 92       	push	r9
    5304:	af 92       	push	r10
    5306:	bf 92       	push	r11
    5308:	cf 92       	push	r12
    530a:	df 92       	push	r13
    530c:	ef 92       	push	r14
    530e:	ff 92       	push	r15
    5310:	0f 93       	push	r16
    5312:	1f 93       	push	r17
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	cd b7       	in	r28, 0x3d	; 61
    531a:	de b7       	in	r29, 0x3e	; 62
    531c:	60 97       	sbiw	r28, 0x10	; 16
    531e:	0f b6       	in	r0, 0x3f	; 63
    5320:	f8 94       	cli
    5322:	de bf       	out	0x3e, r29	; 62
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	cd bf       	out	0x3d, r28	; 61
    5328:	09 83       	std	Y+1, r16	; 0x01
    532a:	1a 83       	std	Y+2, r17	; 0x02
    532c:	2b 83       	std	Y+3, r18	; 0x03
    532e:	3c 83       	std	Y+4, r19	; 0x04
    5330:	4d 83       	std	Y+5, r20	; 0x05
    5332:	5e 83       	std	Y+6, r21	; 0x06
    5334:	6f 83       	std	Y+7, r22	; 0x07
    5336:	78 87       	std	Y+8, r23	; 0x08
    5338:	89 86       	std	Y+9, r8	; 0x09
    533a:	9a 86       	std	Y+10, r9	; 0x0a
    533c:	ab 86       	std	Y+11, r10	; 0x0b
    533e:	bc 86       	std	Y+12, r11	; 0x0c
    5340:	cd 86       	std	Y+13, r12	; 0x0d
    5342:	de 86       	std	Y+14, r13	; 0x0e
    5344:	ef 86       	std	Y+15, r14	; 0x0f
    5346:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    5348:	09 85       	ldd	r16, Y+9	; 0x09
    534a:	1a 85       	ldd	r17, Y+10	; 0x0a
    534c:	2b 85       	ldd	r18, Y+11	; 0x0b
    534e:	3c 85       	ldd	r19, Y+12	; 0x0c
    5350:	49 81       	ldd	r20, Y+1	; 0x01
    5352:	5a 81       	ldd	r21, Y+2	; 0x02
    5354:	6b 81       	ldd	r22, Y+3	; 0x03
    5356:	7c 81       	ldd	r23, Y+4	; 0x04
    5358:	40 0f       	add	r20, r16
    535a:	51 1f       	adc	r21, r17
    535c:	62 1f       	adc	r22, r18
    535e:	73 1f       	adc	r23, r19
    5360:	fc 01       	movw	r30, r24
    5362:	40 83       	st	Z, r20
    5364:	51 83       	std	Z+1, r21	; 0x01
    5366:	62 83       	std	Z+2, r22	; 0x02
    5368:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    536a:	0d 85       	ldd	r16, Y+13	; 0x0d
    536c:	1e 85       	ldd	r17, Y+14	; 0x0e
    536e:	2f 85       	ldd	r18, Y+15	; 0x0f
    5370:	38 89       	ldd	r19, Y+16	; 0x10
    5372:	4d 81       	ldd	r20, Y+5	; 0x05
    5374:	5e 81       	ldd	r21, Y+6	; 0x06
    5376:	6f 81       	ldd	r22, Y+7	; 0x07
    5378:	78 85       	ldd	r23, Y+8	; 0x08
    537a:	40 0f       	add	r20, r16
    537c:	51 1f       	adc	r21, r17
    537e:	62 1f       	adc	r22, r18
    5380:	73 1f       	adc	r23, r19
    5382:	44 83       	std	Z+4, r20	; 0x04
    5384:	55 83       	std	Z+5, r21	; 0x05
    5386:	66 83       	std	Z+6, r22	; 0x06
    5388:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    538a:	0e 94 5f 29 	call	0x52be	; 0x52be <nrk_time_compact_nanos>
return NRK_OK;
}
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	60 96       	adiw	r28, 0x10	; 16
    5392:	0f b6       	in	r0, 0x3f	; 63
    5394:	f8 94       	cli
    5396:	de bf       	out	0x3e, r29	; 62
    5398:	0f be       	out	0x3f, r0	; 63
    539a:	cd bf       	out	0x3d, r28	; 61
    539c:	df 91       	pop	r29
    539e:	cf 91       	pop	r28
    53a0:	1f 91       	pop	r17
    53a2:	0f 91       	pop	r16
    53a4:	ff 90       	pop	r15
    53a6:	ef 90       	pop	r14
    53a8:	df 90       	pop	r13
    53aa:	cf 90       	pop	r12
    53ac:	bf 90       	pop	r11
    53ae:	af 90       	pop	r10
    53b0:	9f 90       	pop	r9
    53b2:	8f 90       	pop	r8
    53b4:	08 95       	ret

000053b6 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    53b6:	e2 ef       	ldi	r30, 0xF2	; 242
    53b8:	fc e0       	ldi	r31, 0x0C	; 12
    53ba:	60 83       	st	Z, r22
    53bc:	71 83       	std	Z+1, r23	; 0x01
    53be:	82 83       	std	Z+2, r24	; 0x02
    53c0:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    53c2:	24 83       	std	Z+4, r18	; 0x04
    53c4:	35 83       	std	Z+5, r19	; 0x05
    53c6:	46 83       	std	Z+6, r20	; 0x06
    53c8:	57 83       	std	Z+7, r21	; 0x07
    53ca:	08 95       	ret

000053cc <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    53cc:	2f 92       	push	r2
    53ce:	3f 92       	push	r3
    53d0:	4f 92       	push	r4
    53d2:	5f 92       	push	r5
    53d4:	6f 92       	push	r6
    53d6:	7f 92       	push	r7
    53d8:	8f 92       	push	r8
    53da:	9f 92       	push	r9
    53dc:	af 92       	push	r10
    53de:	bf 92       	push	r11
    53e0:	cf 92       	push	r12
    53e2:	df 92       	push	r13
    53e4:	ef 92       	push	r14
    53e6:	ff 92       	push	r15
    53e8:	0f 93       	push	r16
    53ea:	1f 93       	push	r17
    53ec:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    53ee:	c0 80       	ld	r12, Z
    53f0:	d1 80       	ldd	r13, Z+1	; 0x01
    53f2:	e2 80       	ldd	r14, Z+2	; 0x02
    53f4:	f3 80       	ldd	r15, Z+3	; 0x03
    53f6:	c1 14       	cp	r12, r1
    53f8:	d1 04       	cpc	r13, r1
    53fa:	e1 04       	cpc	r14, r1
    53fc:	f1 04       	cpc	r15, r1
    53fe:	e1 f1       	breq	.+120    	; 0x5478 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    5400:	84 81       	ldd	r24, Z+4	; 0x04
    5402:	95 81       	ldd	r25, Z+5	; 0x05
    5404:	a6 81       	ldd	r26, Z+6	; 0x06
    5406:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    5408:	22 e4       	ldi	r18, 0x42	; 66
    540a:	c2 16       	cp	r12, r18
    540c:	d1 04       	cpc	r13, r1
    540e:	e1 04       	cpc	r14, r1
    5410:	f1 04       	cpc	r15, r1
    5412:	f0 f5       	brcc	.+124    	; 0x5490 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    5414:	1c 01       	movw	r2, r24
    5416:	2d 01       	movw	r4, r26
    5418:	61 2c       	mov	r6, r1
    541a:	71 2c       	mov	r7, r1
    541c:	43 01       	movw	r8, r6
    541e:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    5420:	8e 2f       	mov	r24, r30
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	a0 e0       	ldi	r26, 0x00	; 0
    5426:	b0 e0       	ldi	r27, 0x00	; 0
    5428:	8c 15       	cp	r24, r12
    542a:	9d 05       	cpc	r25, r13
    542c:	ae 05       	cpc	r26, r14
    542e:	bf 05       	cpc	r27, r15
    5430:	88 f4       	brcc	.+34     	; 0x5454 <_nrk_time_to_ticks+0x88>
    5432:	91 01       	movw	r18, r2
    5434:	a2 01       	movw	r20, r4
    5436:	b3 01       	movw	r22, r6
    5438:	c4 01       	movw	r24, r8
    543a:	36 53       	subi	r19, 0x36	; 54
    543c:	45 46       	sbci	r20, 0x65	; 101
    543e:	54 4c       	sbci	r21, 0xC4	; 196
    5440:	6f 4f       	sbci	r22, 0xFF	; 255
    5442:	7f 4f       	sbci	r23, 0xFF	; 255
    5444:	8f 4f       	sbci	r24, 0xFF	; 255
    5446:	9f 4f       	sbci	r25, 0xFF	; 255
    5448:	19 01       	movw	r2, r18
    544a:	2a 01       	movw	r4, r20
    544c:	3b 01       	movw	r6, r22
    544e:	4c 01       	movw	r8, r24
    5450:	ef 5f       	subi	r30, 0xFF	; 255
    5452:	e6 cf       	rjmp	.-52     	; 0x5420 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    5454:	83 eb       	ldi	r24, 0xB3	; 179
    5456:	a8 2e       	mov	r10, r24
    5458:	96 ee       	ldi	r25, 0xE6	; 230
    545a:	b9 2e       	mov	r11, r25
    545c:	2e e0       	ldi	r18, 0x0E	; 14
    545e:	c2 2e       	mov	r12, r18
    5460:	d1 2c       	mov	r13, r1
    5462:	e1 2c       	mov	r14, r1
    5464:	f1 2c       	mov	r15, r1
    5466:	00 e0       	ldi	r16, 0x00	; 0
    5468:	10 e0       	ldi	r17, 0x00	; 0
    546a:	91 01       	movw	r18, r2
    546c:	a2 01       	movw	r20, r4
    546e:	b3 01       	movw	r22, r6
    5470:	c4 01       	movw	r24, r8
    5472:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <__udivdi3>
    5476:	0a c0       	rjmp	.+20     	; 0x548c <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    5478:	64 81       	ldd	r22, Z+4	; 0x04
    547a:	75 81       	ldd	r23, Z+5	; 0x05
    547c:	86 81       	ldd	r24, Z+6	; 0x06
    547e:	97 81       	ldd	r25, Z+7	; 0x07
    5480:	23 eb       	ldi	r18, 0xB3	; 179
    5482:	36 ee       	ldi	r19, 0xE6	; 230
    5484:	4e e0       	ldi	r20, 0x0E	; 14
    5486:	50 e0       	ldi	r21, 0x00	; 0
    5488:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    548c:	c9 01       	movw	r24, r18
    548e:	02 c0       	rjmp	.+4      	; 0x5494 <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    5490:	80 e0       	ldi	r24, 0x00	; 0
    5492:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    5494:	1f 91       	pop	r17
    5496:	0f 91       	pop	r16
    5498:	ff 90       	pop	r15
    549a:	ef 90       	pop	r14
    549c:	df 90       	pop	r13
    549e:	cf 90       	pop	r12
    54a0:	bf 90       	pop	r11
    54a2:	af 90       	pop	r10
    54a4:	9f 90       	pop	r9
    54a6:	8f 90       	pop	r8
    54a8:	7f 90       	pop	r7
    54aa:	6f 90       	pop	r6
    54ac:	5f 90       	pop	r5
    54ae:	4f 90       	pop	r4
    54b0:	3f 90       	pop	r3
    54b2:	2f 90       	pop	r2
    54b4:	08 95       	ret

000054b6 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    54b6:	cf 92       	push	r12
    54b8:	df 92       	push	r13
    54ba:	ef 92       	push	r14
    54bc:	ff 92       	push	r15
    54be:	cf 93       	push	r28
    54c0:	df 93       	push	r29
    54c2:	cd b7       	in	r28, 0x3d	; 61
    54c4:	de b7       	in	r29, 0x3e	; 62
    54c6:	28 97       	sbiw	r28, 0x08	; 8
    54c8:	0f b6       	in	r0, 0x3f	; 63
    54ca:	f8 94       	cli
    54cc:	de bf       	out	0x3e, r29	; 62
    54ce:	0f be       	out	0x3f, r0	; 63
    54d0:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    54d2:	6b 01       	movw	r12, r22
    54d4:	7c 01       	movw	r14, r24
    54d6:	2a e0       	ldi	r18, 0x0A	; 10
    54d8:	f6 94       	lsr	r15
    54da:	e7 94       	ror	r14
    54dc:	d7 94       	ror	r13
    54de:	c7 94       	ror	r12
    54e0:	2a 95       	dec	r18
    54e2:	d1 f7       	brne	.-12     	; 0x54d8 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    54e4:	c9 82       	std	Y+1, r12	; 0x01
    54e6:	da 82       	std	Y+2, r13	; 0x02
    54e8:	eb 82       	std	Y+3, r14	; 0x03
    54ea:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    54ec:	9b 01       	movw	r18, r22
    54ee:	ac 01       	movw	r20, r24
    54f0:	33 70       	andi	r19, 0x03	; 3
    54f2:	44 27       	eor	r20, r20
    54f4:	55 27       	eor	r21, r21
    54f6:	63 eb       	ldi	r22, 0xB3	; 179
    54f8:	76 ee       	ldi	r23, 0xE6	; 230
    54fa:	8e e0       	ldi	r24, 0x0E	; 14
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <__mulsi3>

return t;
    5502:	2c 2d       	mov	r18, r12
    5504:	3a 81       	ldd	r19, Y+2	; 0x02
    5506:	4b 81       	ldd	r20, Y+3	; 0x03
    5508:	5c 81       	ldd	r21, Y+4	; 0x04
}
    550a:	28 96       	adiw	r28, 0x08	; 8
    550c:	0f b6       	in	r0, 0x3f	; 63
    550e:	f8 94       	cli
    5510:	de bf       	out	0x3e, r29	; 62
    5512:	0f be       	out	0x3f, r0	; 63
    5514:	cd bf       	out	0x3d, r28	; 61
    5516:	df 91       	pop	r29
    5518:	cf 91       	pop	r28
    551a:	ff 90       	pop	r15
    551c:	ef 90       	pop	r14
    551e:	df 90       	pop	r13
    5520:	cf 90       	pop	r12
    5522:	08 95       	ret

00005524 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    5524:	2f 92       	push	r2
    5526:	3f 92       	push	r3
    5528:	4f 92       	push	r4
    552a:	5f 92       	push	r5
    552c:	6f 92       	push	r6
    552e:	7f 92       	push	r7
    5530:	8f 92       	push	r8
    5532:	9f 92       	push	r9
    5534:	af 92       	push	r10
    5536:	bf 92       	push	r11
    5538:	cf 92       	push	r12
    553a:	df 92       	push	r13
    553c:	ef 92       	push	r14
    553e:	ff 92       	push	r15
    5540:	0f 93       	push	r16
    5542:	1f 93       	push	r17
    5544:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    5546:	c0 80       	ld	r12, Z
    5548:	d1 80       	ldd	r13, Z+1	; 0x01
    554a:	e2 80       	ldd	r14, Z+2	; 0x02
    554c:	f3 80       	ldd	r15, Z+3	; 0x03
    554e:	c1 14       	cp	r12, r1
    5550:	d1 04       	cpc	r13, r1
    5552:	e1 04       	cpc	r14, r1
    5554:	f1 04       	cpc	r15, r1
    5556:	b9 f1       	breq	.+110    	; 0x55c6 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    5558:	84 81       	ldd	r24, Z+4	; 0x04
    555a:	95 81       	ldd	r25, Z+5	; 0x05
    555c:	a6 81       	ldd	r26, Z+6	; 0x06
    555e:	b7 81       	ldd	r27, Z+7	; 0x07
    5560:	1c 01       	movw	r2, r24
    5562:	2d 01       	movw	r4, r26
    5564:	61 2c       	mov	r6, r1
    5566:	71 2c       	mov	r7, r1
    5568:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    556a:	e0 e0       	ldi	r30, 0x00	; 0
    556c:	8e 2f       	mov	r24, r30
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	a0 e0       	ldi	r26, 0x00	; 0
    5572:	b0 e0       	ldi	r27, 0x00	; 0
    5574:	8c 15       	cp	r24, r12
    5576:	9d 05       	cpc	r25, r13
    5578:	ae 05       	cpc	r26, r14
    557a:	bf 05       	cpc	r27, r15
    557c:	88 f4       	brcc	.+34     	; 0x55a0 <_nrk_time_to_ticks_long+0x7c>
    557e:	91 01       	movw	r18, r2
    5580:	a2 01       	movw	r20, r4
    5582:	b3 01       	movw	r22, r6
    5584:	c4 01       	movw	r24, r8
    5586:	36 53       	subi	r19, 0x36	; 54
    5588:	45 46       	sbci	r20, 0x65	; 101
    558a:	54 4c       	sbci	r21, 0xC4	; 196
    558c:	6f 4f       	sbci	r22, 0xFF	; 255
    558e:	7f 4f       	sbci	r23, 0xFF	; 255
    5590:	8f 4f       	sbci	r24, 0xFF	; 255
    5592:	9f 4f       	sbci	r25, 0xFF	; 255
    5594:	19 01       	movw	r2, r18
    5596:	2a 01       	movw	r4, r20
    5598:	3b 01       	movw	r6, r22
    559a:	4c 01       	movw	r8, r24
    559c:	ef 5f       	subi	r30, 0xFF	; 255
    559e:	e6 cf       	rjmp	.-52     	; 0x556c <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    55a0:	83 eb       	ldi	r24, 0xB3	; 179
    55a2:	a8 2e       	mov	r10, r24
    55a4:	96 ee       	ldi	r25, 0xE6	; 230
    55a6:	b9 2e       	mov	r11, r25
    55a8:	2e e0       	ldi	r18, 0x0E	; 14
    55aa:	c2 2e       	mov	r12, r18
    55ac:	d1 2c       	mov	r13, r1
    55ae:	e1 2c       	mov	r14, r1
    55b0:	f1 2c       	mov	r15, r1
    55b2:	00 e0       	ldi	r16, 0x00	; 0
    55b4:	10 e0       	ldi	r17, 0x00	; 0
    55b6:	91 01       	movw	r18, r2
    55b8:	a2 01       	movw	r20, r4
    55ba:	b3 01       	movw	r22, r6
    55bc:	c4 01       	movw	r24, r8
    55be:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <__udivdi3>
    55c2:	ca 01       	movw	r24, r20
    55c4:	0b c0       	rjmp	.+22     	; 0x55dc <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    55c6:	64 81       	ldd	r22, Z+4	; 0x04
    55c8:	75 81       	ldd	r23, Z+5	; 0x05
    55ca:	86 81       	ldd	r24, Z+6	; 0x06
    55cc:	97 81       	ldd	r25, Z+7	; 0x07
    55ce:	23 eb       	ldi	r18, 0xB3	; 179
    55d0:	36 ee       	ldi	r19, 0xE6	; 230
    55d2:	4e e0       	ldi	r20, 0x0E	; 14
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    55da:	ca 01       	movw	r24, r20
}
return ticks;
}
    55dc:	b9 01       	movw	r22, r18
    55de:	1f 91       	pop	r17
    55e0:	0f 91       	pop	r16
    55e2:	ff 90       	pop	r15
    55e4:	ef 90       	pop	r14
    55e6:	df 90       	pop	r13
    55e8:	cf 90       	pop	r12
    55ea:	bf 90       	pop	r11
    55ec:	af 90       	pop	r10
    55ee:	9f 90       	pop	r9
    55f0:	8f 90       	pop	r8
    55f2:	7f 90       	pop	r7
    55f4:	6f 90       	pop	r6
    55f6:	5f 90       	pop	r5
    55f8:	4f 90       	pop	r4
    55fa:	3f 90       	pop	r3
    55fc:	2f 90       	pop	r2
    55fe:	08 95       	ret

00005600 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    5600:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    5602:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    5604:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    5608:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <_nrk_get_next_wakeup>
    560c:	84 30       	cpi	r24, 0x04	; 4
    560e:	28 f4       	brcc	.+10     	; 0x561a <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    5610:	d0 93 ef 0c 	sts	0x0CEF, r29
	    nrk_idle();
    5614:	0e 94 c4 32 	call	0x6588	; 0x6588 <nrk_idle>
    5618:	08 c0       	rjmp	.+16     	; 0x562a <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    561a:	8a e0       	ldi	r24, 0x0A	; 10
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    5622:	c0 93 ef 0c 	sts	0x0CEF, r28
	    nrk_sleep();
    5626:	0e 94 b8 32 	call	0x6570	; 0x6570 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    562a:	80 91 1c 09 	lds	r24, 0x091C
    562e:	85 35       	cpi	r24, 0x55	; 85
    5630:	19 f0       	breq	.+6      	; 0x5638 <nrk_idle_task+0x38>
    5632:	88 e0       	ldi	r24, 0x08	; 8
    5634:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    5638:	80 91 fe 3f 	lds	r24, 0x3FFE
    563c:	85 35       	cpi	r24, 0x55	; 85
    563e:	11 f3       	breq	.-60     	; 0x5604 <nrk_idle_task+0x4>
    5640:	88 e0       	ldi	r24, 0x08	; 8
    5642:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_error_add>
    5646:	de cf       	rjmp	.-68     	; 0x5604 <nrk_idle_task+0x4>

00005648 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    5648:	2f 92       	push	r2
    564a:	3f 92       	push	r3
    564c:	4f 92       	push	r4
    564e:	5f 92       	push	r5
    5650:	6f 92       	push	r6
    5652:	7f 92       	push	r7
    5654:	8f 92       	push	r8
    5656:	9f 92       	push	r9
    5658:	af 92       	push	r10
    565a:	bf 92       	push	r11
    565c:	cf 92       	push	r12
    565e:	df 92       	push	r13
    5660:	ef 92       	push	r14
    5662:	ff 92       	push	r15
    5664:	0f 93       	push	r16
    5666:	1f 93       	push	r17
    5668:	cf 93       	push	r28
    566a:	df 93       	push	r29
    566c:	00 d0       	rcall	.+0      	; 0x566e <_nrk_scheduler+0x26>
    566e:	1f 92       	push	r1
    5670:	cd b7       	in	r28, 0x3d	; 61
    5672:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    5674:	0e 94 e9 2e 	call	0x5dd2	; 0x5dd2 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    5678:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    567c:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    5680:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <_nrk_high_speed_timer_get>
    5684:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    5686:	8a ef       	ldi	r24, 0xFA	; 250
    5688:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    568c:	a0 91 95 0b 	lds	r26, 0x0B95
    5690:	b0 e0       	ldi	r27, 0x00	; 0
    5692:	23 eb       	ldi	r18, 0xB3	; 179
    5694:	36 ee       	ldi	r19, 0xE6	; 230
    5696:	4e e0       	ldi	r20, 0x0E	; 14
    5698:	50 e0       	ldi	r21, 0x00	; 0
    569a:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    569e:	00 91 f6 0c 	lds	r16, 0x0CF6
    56a2:	10 91 f7 0c 	lds	r17, 0x0CF7
    56a6:	20 91 f8 0c 	lds	r18, 0x0CF8
    56aa:	30 91 f9 0c 	lds	r19, 0x0CF9
    56ae:	6b 01       	movw	r12, r22
    56b0:	7c 01       	movw	r14, r24
    56b2:	c0 0e       	add	r12, r16
    56b4:	d1 1e       	adc	r13, r17
    56b6:	e2 1e       	adc	r14, r18
    56b8:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    56ba:	c7 01       	movw	r24, r14
    56bc:	b6 01       	movw	r22, r12
    56be:	23 eb       	ldi	r18, 0xB3	; 179
    56c0:	36 ee       	ldi	r19, 0xE6	; 230
    56c2:	4e e0       	ldi	r20, 0x0E	; 14
    56c4:	50 e0       	ldi	r21, 0x00	; 0
    56c6:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    56ca:	26 01       	movw	r4, r12
    56cc:	37 01       	movw	r6, r14
    56ce:	46 1a       	sub	r4, r22
    56d0:	57 0a       	sbc	r5, r23
    56d2:	68 0a       	sbc	r6, r24
    56d4:	79 0a       	sbc	r7, r25
    56d6:	d3 01       	movw	r26, r6
    56d8:	c2 01       	movw	r24, r4
    56da:	00 91 f2 0c 	lds	r16, 0x0CF2
    56de:	10 91 f3 0c 	lds	r17, 0x0CF3
    56e2:	20 91 f4 0c 	lds	r18, 0x0CF4
    56e6:	30 91 f5 0c 	lds	r19, 0x0CF5

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    56ea:	43 eb       	ldi	r20, 0xB3	; 179
    56ec:	84 2e       	mov	r8, r20
    56ee:	46 ee       	ldi	r20, 0xE6	; 230
    56f0:	94 2e       	mov	r9, r20
    56f2:	4e e0       	ldi	r20, 0x0E	; 14
    56f4:	a4 2e       	mov	r10, r20
    56f6:	b1 2c       	mov	r11, r1
    56f8:	68 01       	movw	r12, r16
    56fa:	79 01       	movw	r14, r18
    56fc:	4f ef       	ldi	r20, 0xFF	; 255
    56fe:	c4 1a       	sub	r12, r20
    5700:	d4 0a       	sbc	r13, r20
    5702:	e4 0a       	sbc	r14, r20
    5704:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    5706:	81 15       	cp	r24, r1
    5708:	5a ec       	ldi	r21, 0xCA	; 202
    570a:	95 07       	cpc	r25, r21
    570c:	5a e9       	ldi	r21, 0x9A	; 154
    570e:	a5 07       	cpc	r26, r21
    5710:	5b e3       	ldi	r21, 0x3B	; 59
    5712:	b5 07       	cpc	r27, r21
    5714:	c8 f0       	brcs	.+50     	; 0x5748 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    5716:	2c 01       	movw	r4, r24
    5718:	3d 01       	movw	r6, r26
    571a:	2a ec       	ldi	r18, 0xCA	; 202
    571c:	52 1a       	sub	r5, r18
    571e:	2a e9       	ldi	r18, 0x9A	; 154
    5720:	62 0a       	sbc	r6, r18
    5722:	2b e3       	ldi	r18, 0x3B	; 59
    5724:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    5726:	c3 01       	movw	r24, r6
    5728:	b2 01       	movw	r22, r4
    572a:	a5 01       	movw	r20, r10
    572c:	94 01       	movw	r18, r8
    572e:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    5732:	a3 01       	movw	r20, r6
    5734:	92 01       	movw	r18, r4
    5736:	26 1b       	sub	r18, r22
    5738:	37 0b       	sbc	r19, r23
    573a:	48 0b       	sbc	r20, r24
    573c:	59 0b       	sbc	r21, r25
    573e:	da 01       	movw	r26, r20
    5740:	c9 01       	movw	r24, r18
    5742:	97 01       	movw	r18, r14
    5744:	86 01       	movw	r16, r12
    5746:	d8 cf       	rjmp	.-80     	; 0x56f8 <_nrk_scheduler+0xb0>
    5748:	80 93 f6 0c 	sts	0x0CF6, r24
    574c:	90 93 f7 0c 	sts	0x0CF7, r25
    5750:	a0 93 f8 0c 	sts	0x0CF8, r26
    5754:	b0 93 f9 0c 	sts	0x0CF9, r27
    5758:	00 93 f2 0c 	sts	0x0CF2, r16
    575c:	10 93 f3 0c 	sts	0x0CF3, r17
    5760:	20 93 f4 0c 	sts	0x0CF4, r18
    5764:	30 93 f5 0c 	sts	0x0CF5, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    5768:	e0 91 fb 0c 	lds	r30, 0x0CFB
    576c:	f0 91 fc 0c 	lds	r31, 0x0CFC
    5770:	85 81       	ldd	r24, Z+5	; 0x05
    5772:	88 23       	and	r24, r24
    5774:	39 f1       	breq	.+78     	; 0x57c4 <_nrk_scheduler+0x17c>
    5776:	81 85       	ldd	r24, Z+9	; 0x09
    5778:	84 30       	cpi	r24, 0x04	; 4
    577a:	21 f1       	breq	.+72     	; 0x57c4 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    577c:	87 81       	ldd	r24, Z+7	; 0x07
    577e:	82 30       	cpi	r24, 0x02	; 2
    5780:	29 f0       	breq	.+10     	; 0x578c <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    5782:	88 23       	and	r24, r24
    5784:	41 f0       	breq	.+16     	; 0x5796 <_nrk_scheduler+0x14e>
    5786:	86 81       	ldd	r24, Z+6	; 0x06
    5788:	81 11       	cpse	r24, r1
    578a:	02 c0       	rjmp	.+4      	; 0x5790 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    578c:	85 e0       	ldi	r24, 0x05	; 5
    578e:	01 c0       	rjmp	.+2      	; 0x5792 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5790:	83 e0       	ldi	r24, 0x03	; 3
    5792:	81 87       	std	Z+9, r24	; 0x09
    5794:	14 c0       	rjmp	.+40     	; 0x57be <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5796:	83 e0       	ldi	r24, 0x03	; 3
    5798:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    579a:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    579c:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    579e:	85 89       	ldd	r24, Z+21	; 0x15
    57a0:	96 89       	ldd	r25, Z+22	; 0x16
    57a2:	a7 89       	ldd	r26, Z+23	; 0x17
    57a4:	b0 8d       	ldd	r27, Z+24	; 0x18
    57a6:	89 2b       	or	r24, r25
    57a8:	8a 2b       	or	r24, r26
    57aa:	8b 2b       	or	r24, r27
    57ac:	41 f4       	brne	.+16     	; 0x57be <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    57ae:	81 8d       	ldd	r24, Z+25	; 0x19
    57b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    57b2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    57b4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    57b6:	85 8b       	std	Z+21, r24	; 0x15
    57b8:	96 8b       	std	Z+22, r25	; 0x16
    57ba:	a7 8b       	std	Z+23, r26	; 0x17
    57bc:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    57be:	80 85       	ldd	r24, Z+8	; 0x08
    57c0:	0e 94 e5 25 	call	0x4bca	; 0x4bca <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    57c4:	e0 91 fb 0c 	lds	r30, 0x0CFB
    57c8:	f0 91 fc 0c 	lds	r31, 0x0CFC
    57cc:	85 a1       	ldd	r24, Z+37	; 0x25
    57ce:	96 a1       	ldd	r25, Z+38	; 0x26
    57d0:	a7 a1       	ldd	r26, Z+39	; 0x27
    57d2:	b0 a5       	ldd	r27, Z+40	; 0x28
    57d4:	89 2b       	or	r24, r25
    57d6:	8a 2b       	or	r24, r26
    57d8:	8b 2b       	or	r24, r27
    57da:	09 f4       	brne	.+2      	; 0x57de <_nrk_scheduler+0x196>
    57dc:	44 c0       	rjmp	.+136    	; 0x5866 <_nrk_scheduler+0x21e>
    57de:	20 85       	ldd	r18, Z+8	; 0x08
    57e0:	22 23       	and	r18, r18
    57e2:	09 f4       	brne	.+2      	; 0x57e6 <_nrk_scheduler+0x19e>
    57e4:	40 c0       	rjmp	.+128    	; 0x5866 <_nrk_scheduler+0x21e>
    57e6:	81 85       	ldd	r24, Z+9	; 0x09
    57e8:	84 30       	cpi	r24, 0x04	; 4
    57ea:	e9 f1       	breq	.+122    	; 0x5866 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    57ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    57ee:	96 8d       	ldd	r25, Z+30	; 0x1e
    57f0:	a7 8d       	ldd	r26, Z+31	; 0x1f
    57f2:	b0 a1       	ldd	r27, Z+32	; 0x20
    57f4:	40 91 95 0b 	lds	r20, 0x0B95
    57f8:	50 e0       	ldi	r21, 0x00	; 0
    57fa:	60 e0       	ldi	r22, 0x00	; 0
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	84 17       	cp	r24, r20
    5800:	95 07       	cpc	r25, r21
    5802:	a6 07       	cpc	r26, r22
    5804:	b7 07       	cpc	r27, r23
    5806:	68 f4       	brcc	.+26     	; 0x5822 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    5808:	62 2f       	mov	r22, r18
    580a:	82 e0       	ldi	r24, 0x02	; 2
    580c:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    5810:	e0 91 fb 0c 	lds	r30, 0x0CFB
    5814:	f0 91 fc 0c 	lds	r31, 0x0CFC
    5818:	15 8e       	std	Z+29, r1	; 0x1d
    581a:	16 8e       	std	Z+30, r1	; 0x1e
    581c:	17 8e       	std	Z+31, r1	; 0x1f
    581e:	10 a2       	std	Z+32, r1	; 0x20
    5820:	08 c0       	rjmp	.+16     	; 0x5832 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    5822:	84 1b       	sub	r24, r20
    5824:	95 0b       	sbc	r25, r21
    5826:	a6 0b       	sbc	r26, r22
    5828:	b7 0b       	sbc	r27, r23
    582a:	85 8f       	std	Z+29, r24	; 0x1d
    582c:	96 8f       	std	Z+30, r25	; 0x1e
    582e:	a7 8f       	std	Z+31, r26	; 0x1f
    5830:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    5832:	e0 91 fb 0c 	lds	r30, 0x0CFB
    5836:	f0 91 fc 0c 	lds	r31, 0x0CFC
    583a:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    583c:	85 8d       	ldd	r24, Z+29	; 0x1d
    583e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5840:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5842:	b0 a1       	ldd	r27, Z+32	; 0x20
    5844:	89 2b       	or	r24, r25
    5846:	8a 2b       	or	r24, r26
    5848:	8b 2b       	or	r24, r27
    584a:	69 f4       	brne	.+26     	; 0x5866 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    584c:	61 2f       	mov	r22, r17
    584e:	83 e0       	ldi	r24, 0x03	; 3
    5850:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5854:	e0 91 fb 0c 	lds	r30, 0x0CFB
    5858:	f0 91 fc 0c 	lds	r31, 0x0CFC
    585c:	83 e0       	ldi	r24, 0x03	; 3
    585e:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    5860:	81 2f       	mov	r24, r17
    5862:	0e 94 e5 25 	call	0x4bca	; 0x4bca <nrk_rem_from_readyQ>
    5866:	8f e3       	ldi	r24, 0x3F	; 63
    5868:	9c e0       	ldi	r25, 0x0C	; 12
    586a:	9b 83       	std	Y+3, r25	; 0x03
    586c:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    586e:	00 e6       	ldi	r16, 0x60	; 96
    5870:	1a ee       	ldi	r17, 0xEA	; 234
    5872:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5874:	2a ef       	ldi	r18, 0xFA	; 250
    5876:	c2 2e       	mov	r12, r18
    5878:	d1 2c       	mov	r13, r1
    587a:	e1 2c       	mov	r14, r1
    587c:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    587e:	81 2c       	mov	r8, r1
    5880:	91 2c       	mov	r9, r1
    5882:	54 01       	movw	r10, r8
    5884:	83 94       	inc	r8
    5886:	ea 81       	ldd	r30, Y+2	; 0x02
    5888:	fb 81       	ldd	r31, Y+3	; 0x03
    588a:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    588c:	80 81       	ld	r24, Z
    588e:	8f 3f       	cpi	r24, 0xFF	; 255
    5890:	09 f4       	brne	.+2      	; 0x5894 <_nrk_scheduler+0x24c>
    5892:	04 c1       	rjmp	.+520    	; 0x5a9c <_nrk_scheduler+0x454>
    5894:	ea 81       	ldd	r30, Y+2	; 0x02
    5896:	fb 81       	ldd	r31, Y+3	; 0x03
    5898:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    589a:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    589c:	88 23       	and	r24, r24
    589e:	09 f4       	brne	.+2      	; 0x58a2 <_nrk_scheduler+0x25a>
    58a0:	67 c0       	rjmp	.+206    	; 0x5970 <_nrk_scheduler+0x328>
    58a2:	ea 81       	ldd	r30, Y+2	; 0x02
    58a4:	fb 81       	ldd	r31, Y+3	; 0x03
    58a6:	80 81       	ld	r24, Z
    58a8:	84 30       	cpi	r24, 0x04	; 4
    58aa:	09 f4       	brne	.+2      	; 0x58ae <_nrk_scheduler+0x266>
    58ac:	61 c0       	rjmp	.+194    	; 0x5970 <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    58ae:	44 84       	ldd	r4, Z+12	; 0x0c
    58b0:	55 84       	ldd	r5, Z+13	; 0x0d
    58b2:	66 84       	ldd	r6, Z+14	; 0x0e
    58b4:	77 84       	ldd	r7, Z+15	; 0x0f
    58b6:	60 91 95 0b 	lds	r22, 0x0B95
    58ba:	70 e0       	ldi	r23, 0x00	; 0
    58bc:	80 e0       	ldi	r24, 0x00	; 0
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	46 16       	cp	r4, r22
    58c2:	57 06       	cpc	r5, r23
    58c4:	68 06       	cpc	r6, r24
    58c6:	79 06       	cpc	r7, r25
    58c8:	48 f0       	brcs	.+18     	; 0x58dc <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    58ca:	46 1a       	sub	r4, r22
    58cc:	57 0a       	sbc	r5, r23
    58ce:	68 0a       	sbc	r6, r24
    58d0:	79 0a       	sbc	r7, r25
    58d2:	44 86       	std	Z+12, r4	; 0x0c
    58d4:	55 86       	std	Z+13, r5	; 0x0d
    58d6:	66 86       	std	Z+14, r6	; 0x0e
    58d8:	77 86       	std	Z+15, r7	; 0x0f
    58da:	06 c0       	rjmp	.+12     	; 0x58e8 <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    58dc:	ea 81       	ldd	r30, Y+2	; 0x02
    58de:	fb 81       	ldd	r31, Y+3	; 0x03
    58e0:	14 86       	std	Z+12, r1	; 0x0c
    58e2:	15 86       	std	Z+13, r1	; 0x0d
    58e4:	16 86       	std	Z+14, r1	; 0x0e
    58e6:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    58e8:	ea 81       	ldd	r30, Y+2	; 0x02
    58ea:	fb 81       	ldd	r31, Y+3	; 0x03
    58ec:	40 88       	ldd	r4, Z+16	; 0x10
    58ee:	51 88       	ldd	r5, Z+17	; 0x11
    58f0:	62 88       	ldd	r6, Z+18	; 0x12
    58f2:	73 88       	ldd	r7, Z+19	; 0x13
    58f4:	46 16       	cp	r4, r22
    58f6:	57 06       	cpc	r5, r23
    58f8:	68 06       	cpc	r6, r24
    58fa:	79 06       	cpc	r7, r25
    58fc:	48 f0       	brcs	.+18     	; 0x5910 <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    58fe:	46 1a       	sub	r4, r22
    5900:	57 0a       	sbc	r5, r23
    5902:	68 0a       	sbc	r6, r24
    5904:	79 0a       	sbc	r7, r25
    5906:	40 8a       	std	Z+16, r4	; 0x10
    5908:	51 8a       	std	Z+17, r5	; 0x11
    590a:	62 8a       	std	Z+18, r6	; 0x12
    590c:	73 8a       	std	Z+19, r7	; 0x13
    590e:	1e c0       	rjmp	.+60     	; 0x594c <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    5910:	ea 81       	ldd	r30, Y+2	; 0x02
    5912:	fb 81       	ldd	r31, Y+3	; 0x03
    5914:	20 8d       	ldd	r18, Z+24	; 0x18
    5916:	31 8d       	ldd	r19, Z+25	; 0x19
    5918:	42 8d       	ldd	r20, Z+26	; 0x1a
    591a:	53 8d       	ldd	r21, Z+27	; 0x1b
    591c:	62 17       	cp	r22, r18
    591e:	73 07       	cpc	r23, r19
    5920:	84 07       	cpc	r24, r20
    5922:	95 07       	cpc	r25, r21
    5924:	58 f4       	brcc	.+22     	; 0x593c <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    5926:	29 01       	movw	r4, r18
    5928:	3a 01       	movw	r6, r20
    592a:	46 1a       	sub	r4, r22
    592c:	57 0a       	sbc	r5, r23
    592e:	68 0a       	sbc	r6, r24
    5930:	79 0a       	sbc	r7, r25
    5932:	40 8a       	std	Z+16, r4	; 0x10
    5934:	51 8a       	std	Z+17, r5	; 0x11
    5936:	62 8a       	std	Z+18, r6	; 0x12
    5938:	73 8a       	std	Z+19, r7	; 0x13
    593a:	08 c0       	rjmp	.+16     	; 0x594c <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    593c:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    5940:	ea 81       	ldd	r30, Y+2	; 0x02
    5942:	fb 81       	ldd	r31, Y+3	; 0x03
    5944:	60 8b       	std	Z+16, r22	; 0x10
    5946:	71 8b       	std	Z+17, r23	; 0x11
    5948:	82 8b       	std	Z+18, r24	; 0x12
    594a:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    594c:	ea 81       	ldd	r30, Y+2	; 0x02
    594e:	fb 81       	ldd	r31, Y+3	; 0x03
    5950:	80 89       	ldd	r24, Z+16	; 0x10
    5952:	91 89       	ldd	r25, Z+17	; 0x11
    5954:	a2 89       	ldd	r26, Z+18	; 0x12
    5956:	b3 89       	ldd	r27, Z+19	; 0x13
    5958:	89 2b       	or	r24, r25
    595a:	8a 2b       	or	r24, r26
    595c:	8b 2b       	or	r24, r27
    595e:	41 f4       	brne	.+16     	; 0x5970 <_nrk_scheduler+0x328>
    5960:	80 8d       	ldd	r24, Z+24	; 0x18
    5962:	91 8d       	ldd	r25, Z+25	; 0x19
    5964:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5966:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5968:	80 8b       	std	Z+16, r24	; 0x10
    596a:	91 8b       	std	Z+17, r25	; 0x11
    596c:	a2 8b       	std	Z+18, r26	; 0x12
    596e:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    5970:	ea 81       	ldd	r30, Y+2	; 0x02
    5972:	fb 81       	ldd	r31, Y+3	; 0x03
    5974:	80 81       	ld	r24, Z
    5976:	83 30       	cpi	r24, 0x03	; 3
    5978:	09 f0       	breq	.+2      	; 0x597c <_nrk_scheduler+0x334>
    597a:	90 c0       	rjmp	.+288    	; 0x5a9c <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    597c:	84 85       	ldd	r24, Z+12	; 0x0c
    597e:	95 85       	ldd	r25, Z+13	; 0x0d
    5980:	a6 85       	ldd	r26, Z+14	; 0x0e
    5982:	b7 85       	ldd	r27, Z+15	; 0x0f
    5984:	89 2b       	or	r24, r25
    5986:	8a 2b       	or	r24, r26
    5988:	8b 2b       	or	r24, r27
    598a:	09 f0       	breq	.+2      	; 0x598e <_nrk_scheduler+0x346>
    598c:	74 c0       	rjmp	.+232    	; 0x5a76 <_nrk_scheduler+0x42e>
    598e:	df 01       	movw	r26, r30
    5990:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    5992:	8c 91       	ld	r24, X
    5994:	9f 01       	movw	r18, r30
    5996:	23 50       	subi	r18, 0x03	; 3
    5998:	31 09       	sbc	r19, r1
    599a:	88 23       	and	r24, r24
    599c:	a9 f0       	breq	.+42     	; 0x59c8 <_nrk_scheduler+0x380>
    599e:	f9 01       	movw	r30, r18
    59a0:	80 81       	ld	r24, Z
    59a2:	88 23       	and	r24, r24
    59a4:	89 f0       	breq	.+34     	; 0x59c8 <_nrk_scheduler+0x380>
    59a6:	b5 01       	movw	r22, r10
    59a8:	a4 01       	movw	r20, r8
    59aa:	00 90 eb 0c 	lds	r0, 0x0CEB
    59ae:	04 c0       	rjmp	.+8      	; 0x59b8 <_nrk_scheduler+0x370>
    59b0:	44 0f       	add	r20, r20
    59b2:	55 1f       	adc	r21, r21
    59b4:	66 1f       	adc	r22, r22
    59b6:	77 1f       	adc	r23, r23
    59b8:	0a 94       	dec	r0
    59ba:	d2 f7       	brpl	.-12     	; 0x59b0 <_nrk_scheduler+0x368>
    59bc:	ea 81       	ldd	r30, Y+2	; 0x02
    59be:	fb 81       	ldd	r31, Y+3	; 0x03
    59c0:	40 87       	std	Z+8, r20	; 0x08
    59c2:	51 87       	std	Z+9, r21	; 0x09
    59c4:	62 87       	std	Z+10, r22	; 0x0a
    59c6:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    59c8:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    59ca:	f9 01       	movw	r30, r18
    59cc:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    59ce:	ea 81       	ldd	r30, Y+2	; 0x02
    59d0:	fb 81       	ldd	r31, Y+3	; 0x03
    59d2:	a0 a1       	ldd	r26, Z+32	; 0x20
    59d4:	b1 a1       	ldd	r27, Z+33	; 0x21
    59d6:	a1 30       	cpi	r26, 0x01	; 1
    59d8:	b1 05       	cpc	r27, r1
    59da:	19 f5       	brne	.+70     	; 0x5a22 <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    59dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    59de:	95 8d       	ldd	r25, Z+29	; 0x1d
    59e0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    59e2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    59e4:	84 8b       	std	Z+20, r24	; 0x14
    59e6:	95 8b       	std	Z+21, r25	; 0x15
    59e8:	a6 8b       	std	Z+22, r26	; 0x16
    59ea:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    59ec:	92 e0       	ldi	r25, 0x02	; 2
    59ee:	49 2e       	mov	r4, r25
    59f0:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    59f2:	80 89       	ldd	r24, Z+16	; 0x10
    59f4:	91 89       	ldd	r25, Z+17	; 0x11
    59f6:	a2 89       	ldd	r26, Z+18	; 0x12
    59f8:	b3 89       	ldd	r27, Z+19	; 0x13
    59fa:	84 87       	std	Z+12, r24	; 0x0c
    59fc:	95 87       	std	Z+13, r25	; 0x0d
    59fe:	a6 87       	std	Z+14, r26	; 0x0e
    5a00:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5a02:	80 8d       	ldd	r24, Z+24	; 0x18
    5a04:	91 8d       	ldd	r25, Z+25	; 0x19
    5a06:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5a08:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5a0a:	89 2b       	or	r24, r25
    5a0c:	8a 2b       	or	r24, r26
    5a0e:	8b 2b       	or	r24, r27
    5a10:	21 f4       	brne	.+8      	; 0x5a1a <_nrk_scheduler+0x3d2>
    5a12:	c4 86       	std	Z+12, r12	; 0x0c
    5a14:	d5 86       	std	Z+13, r13	; 0x0d
    5a16:	e6 86       	std	Z+14, r14	; 0x0e
    5a18:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    5a1a:	89 81       	ldd	r24, Y+1	; 0x01
    5a1c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <nrk_add_to_readyQ>
    5a20:	2a c0       	rjmp	.+84     	; 0x5a76 <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    5a22:	ea 81       	ldd	r30, Y+2	; 0x02
    5a24:	fb 81       	ldd	r31, Y+3	; 0x03
    5a26:	44 8d       	ldd	r20, Z+28	; 0x1c
    5a28:	55 8d       	ldd	r21, Z+29	; 0x1d
    5a2a:	66 8d       	ldd	r22, Z+30	; 0x1e
    5a2c:	77 8d       	ldd	r23, Z+31	; 0x1f
    5a2e:	44 8b       	std	Z+20, r20	; 0x14
    5a30:	55 8b       	std	Z+21, r21	; 0x15
    5a32:	66 8b       	std	Z+22, r22	; 0x16
    5a34:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5a36:	40 8c       	ldd	r4, Z+24	; 0x18
    5a38:	51 8c       	ldd	r5, Z+25	; 0x19
    5a3a:	62 8c       	ldd	r6, Z+26	; 0x1a
    5a3c:	73 8c       	ldd	r7, Z+27	; 0x1b
    5a3e:	11 97       	sbiw	r26, 0x01	; 1
    5a40:	a3 01       	movw	r20, r6
    5a42:	92 01       	movw	r18, r4
    5a44:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    5a48:	64 87       	std	Z+12, r22	; 0x0c
    5a4a:	75 87       	std	Z+13, r23	; 0x0d
    5a4c:	86 87       	std	Z+14, r24	; 0x0e
    5a4e:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5a50:	60 8b       	std	Z+16, r22	; 0x10
    5a52:	71 8b       	std	Z+17, r23	; 0x11
    5a54:	82 8b       	std	Z+18, r24	; 0x12
    5a56:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5a58:	45 28       	or	r4, r5
    5a5a:	46 28       	or	r4, r6
    5a5c:	47 28       	or	r4, r7
    5a5e:	21 f4       	brne	.+8      	; 0x5a68 <_nrk_scheduler+0x420>
    5a60:	c4 86       	std	Z+12, r12	; 0x0c
    5a62:	d5 86       	std	Z+13, r13	; 0x0d
    5a64:	e6 86       	std	Z+14, r14	; 0x0e
    5a66:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    5a68:	44 24       	eor	r4, r4
    5a6a:	43 94       	inc	r4
    5a6c:	51 2c       	mov	r5, r1
    5a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    5a70:	fb 81       	ldd	r31, Y+3	; 0x03
    5a72:	51 a2       	std	Z+33, r5	; 0x21
    5a74:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    5a76:	ea 81       	ldd	r30, Y+2	; 0x02
    5a78:	fb 81       	ldd	r31, Y+3	; 0x03
    5a7a:	84 85       	ldd	r24, Z+12	; 0x0c
    5a7c:	95 85       	ldd	r25, Z+13	; 0x0d
    5a7e:	a6 85       	ldd	r26, Z+14	; 0x0e
    5a80:	b7 85       	ldd	r27, Z+15	; 0x0f
    5a82:	00 97       	sbiw	r24, 0x00	; 0
    5a84:	a1 05       	cpc	r26, r1
    5a86:	b1 05       	cpc	r27, r1
    5a88:	49 f0       	breq	.+18     	; 0x5a9c <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    5a8a:	a8 01       	movw	r20, r16
    5a8c:	60 e0       	ldi	r22, 0x00	; 0
    5a8e:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    5a90:	84 17       	cp	r24, r20
    5a92:	95 07       	cpc	r25, r21
    5a94:	a6 07       	cpc	r26, r22
    5a96:	b7 07       	cpc	r27, r23
    5a98:	08 f4       	brcc	.+2      	; 0x5a9c <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    5a9a:	8c 01       	movw	r16, r24
    5a9c:	f9 81       	ldd	r31, Y+1	; 0x01
    5a9e:	ff 5f       	subi	r31, 0xFF	; 255
    5aa0:	f9 83       	std	Y+1, r31	; 0x01
    5aa2:	2a 81       	ldd	r18, Y+2	; 0x02
    5aa4:	3b 81       	ldd	r19, Y+3	; 0x03
    5aa6:	25 5d       	subi	r18, 0xD5	; 213
    5aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    5aaa:	3b 83       	std	Y+3, r19	; 0x03
    5aac:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    5aae:	f4 30       	cpi	r31, 0x04	; 4
    5ab0:	09 f0       	breq	.+2      	; 0x5ab4 <_nrk_scheduler+0x46c>
    5ab2:	e9 ce       	rjmp	.-558    	; 0x5886 <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    5ab4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <nrk_get_high_ready_task_ID>
    5ab8:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    5aba:	3b e2       	ldi	r19, 0x2B	; 43
    5abc:	83 02       	muls	r24, r19
    5abe:	f0 01       	movw	r30, r0
    5ac0:	11 24       	eor	r1, r1
    5ac2:	ea 5c       	subi	r30, 0xCA	; 202
    5ac4:	f3 4f       	sbci	r31, 0xF3	; 243
    5ac6:	22 85       	ldd	r18, Z+10	; 0x0a
    5ac8:	20 93 fd 0c 	sts	0x0CFD, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    5acc:	f0 93 ed 0c 	sts	0x0CED, r31
    5ad0:	e0 93 ec 0c 	sts	0x0CEC, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    5ad4:	88 23       	and	r24, r24
    5ad6:	f9 f0       	breq	.+62     	; 0x5b16 <_nrk_scheduler+0x4ce>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    5ad8:	85 a1       	ldd	r24, Z+37	; 0x25
    5ada:	96 a1       	ldd	r25, Z+38	; 0x26
    5adc:	a7 a1       	ldd	r26, Z+39	; 0x27
    5ade:	b0 a5       	ldd	r27, Z+40	; 0x28
    5ae0:	89 2b       	or	r24, r25
    5ae2:	8a 2b       	or	r24, r26
    5ae4:	8b 2b       	or	r24, r27
    5ae6:	99 f0       	breq	.+38     	; 0x5b0e <_nrk_scheduler+0x4c6>
    5ae8:	85 8d       	ldd	r24, Z+29	; 0x1d
    5aea:	96 8d       	ldd	r25, Z+30	; 0x1e
    5aec:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5aee:	b0 a1       	ldd	r27, Z+32	; 0x20
    5af0:	8a 3f       	cpi	r24, 0xFA	; 250
    5af2:	91 05       	cpc	r25, r1
    5af4:	a1 05       	cpc	r26, r1
    5af6:	b1 05       	cpc	r27, r1
    5af8:	50 f4       	brcc	.+20     	; 0x5b0e <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    5afa:	a8 01       	movw	r20, r16
    5afc:	60 e0       	ldi	r22, 0x00	; 0
    5afe:	70 e0       	ldi	r23, 0x00	; 0
    5b00:	84 17       	cp	r24, r20
    5b02:	95 07       	cpc	r25, r21
    5b04:	a6 07       	cpc	r26, r22
    5b06:	b7 07       	cpc	r27, r23
    5b08:	e8 f4       	brcc	.+58     	; 0x5b44 <_nrk_scheduler+0x4fc>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    5b0a:	8c 01       	movw	r16, r24
    5b0c:	1b c0       	rjmp	.+54     	; 0x5b44 <_nrk_scheduler+0x4fc>
    5b0e:	0b 3f       	cpi	r16, 0xFB	; 251
    5b10:	11 05       	cpc	r17, r1
    5b12:	c0 f0       	brcs	.+48     	; 0x5b44 <_nrk_scheduler+0x4fc>
    5b14:	12 c0       	rjmp	.+36     	; 0x5b3a <_nrk_scheduler+0x4f2>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    5b16:	04 30       	cpi	r16, 0x04	; 4
    5b18:	11 05       	cpc	r17, r1
    5b1a:	a0 f0       	brcs	.+40     	; 0x5b44 <_nrk_scheduler+0x4fc>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    5b1c:	c8 01       	movw	r24, r16
    5b1e:	03 97       	sbiw	r24, 0x03	; 3
    5b20:	8a 3f       	cpi	r24, 0xFA	; 250
    5b22:	91 05       	cpc	r25, r1
    5b24:	38 f4       	brcc	.+14     	; 0x5b34 <_nrk_scheduler+0x4ec>
    5b26:	8c 01       	movw	r16, r24
    5b28:	82 30       	cpi	r24, 0x02	; 2
    5b2a:	91 05       	cpc	r25, r1
    5b2c:	58 f4       	brcc	.+22     	; 0x5b44 <_nrk_scheduler+0x4fc>
    5b2e:	02 e0       	ldi	r16, 0x02	; 2
    5b30:	10 e0       	ldi	r17, 0x00	; 0
    5b32:	08 c0       	rjmp	.+16     	; 0x5b44 <_nrk_scheduler+0x4fc>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    5b34:	0d 3f       	cpi	r16, 0xFD	; 253
    5b36:	11 05       	cpc	r17, r1
    5b38:	19 f0       	breq	.+6      	; 0x5b40 <_nrk_scheduler+0x4f8>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    5b3a:	0a ef       	ldi	r16, 0xFA	; 250
    5b3c:	10 e0       	ldi	r17, 0x00	; 0
    5b3e:	02 c0       	rjmp	.+4      	; 0x5b44 <_nrk_scheduler+0x4fc>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    5b40:	07 ef       	ldi	r16, 0xF7	; 247
    5b42:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    5b44:	20 93 ee 0c 	sts	0x0CEE, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    5b48:	f0 93 fc 0c 	sts	0x0CFC, r31
    5b4c:	e0 93 fb 0c 	sts	0x0CFB, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    5b50:	00 93 95 0b 	sts	0x0B95, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    5b54:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    5b58:	28 2f       	mov	r18, r24
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	2f 5f       	subi	r18, 0xFF	; 255
    5b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b60:	20 17       	cp	r18, r16
    5b62:	31 07       	cpc	r19, r17
    5b64:	40 f0       	brcs	.+16     	; 0x5b76 <_nrk_scheduler+0x52e>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    5b66:	0e 94 1b 30 	call	0x6036	; 0x6036 <_nrk_os_timer_get>
    5b6a:	08 2f       	mov	r16, r24
    5b6c:	10 e0       	ldi	r17, 0x00	; 0
    5b6e:	0e 5f       	subi	r16, 0xFE	; 254
    5b70:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    5b72:	00 93 95 0b 	sts	0x0B95, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    5b76:	f1 10       	cpse	r15, r1
    5b78:	10 92 ef 0c 	sts	0x0CEF, r1

    _nrk_set_next_wakeup(next_wake);
    5b7c:	80 2f       	mov	r24, r16
    5b7e:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    5b82:	6c ed       	ldi	r22, 0xDC	; 220
    5b84:	75 e0       	ldi	r23, 0x05	; 5
    5b86:	c1 01       	movw	r24, r2
    5b88:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    5b8c:	0e 94 3e 33 	call	0x667c	; 0x667c <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    5b90:	0f 90       	pop	r0
    5b92:	0f 90       	pop	r0
    5b94:	0f 90       	pop	r0
    5b96:	df 91       	pop	r29
    5b98:	cf 91       	pop	r28
    5b9a:	1f 91       	pop	r17
    5b9c:	0f 91       	pop	r16
    5b9e:	ff 90       	pop	r15
    5ba0:	ef 90       	pop	r14
    5ba2:	df 90       	pop	r13
    5ba4:	cf 90       	pop	r12
    5ba6:	bf 90       	pop	r11
    5ba8:	af 90       	pop	r10
    5baa:	9f 90       	pop	r9
    5bac:	8f 90       	pop	r8
    5bae:	7f 90       	pop	r7
    5bb0:	6f 90       	pop	r6
    5bb2:	5f 90       	pop	r5
    5bb4:	4f 90       	pop	r4
    5bb6:	3f 90       	pop	r3
    5bb8:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    5bba:	0c 94 49 33 	jmp	0x6692	; 0x6692 <nrk_start_high_ready_task>

00005bbe <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    5bbe:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    5bc0:	90 91 18 0d 	lds	r25, 0x0D18
    5bc4:	19 16       	cp	r1, r25
    5bc6:	74 f0       	brlt	.+28     	; 0x5be4 <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    5bc8:	84 e0       	ldi	r24, 0x04	; 4
    5bca:	98 02       	muls	r25, r24
    5bcc:	f0 01       	movw	r30, r0
    5bce:	11 24       	eor	r1, r1
    5bd0:	e7 5e       	subi	r30, 0xE7	; 231
    5bd2:	f2 4f       	sbci	r31, 0xF2	; 242
    5bd4:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    5bd6:	33 83       	std	Z+3, r19	; 0x03
    5bd8:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    5bda:	9f 5f       	subi	r25, 0xFF	; 255
    5bdc:	90 93 18 0d 	sts	0x0D18, r25
        return NRK_OK;
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	08 95       	ret
    }
    else
        return NRK_ERROR;
    5be4:	8f ef       	ldi	r24, 0xFF	; 255
}
    5be6:	08 95       	ret

00005be8 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    5be8:	0f 93       	push	r16
    5bea:	1f 93       	push	r17
    5bec:	cf 93       	push	r28
    5bee:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    5bf0:	40 91 18 0d 	lds	r20, 0x0D18
    5bf4:	55 27       	eor	r21, r21
    5bf6:	47 fd       	sbrc	r20, 7
    5bf8:	50 95       	com	r21
    5bfa:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    5bfc:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    5bfe:	2c 2f       	mov	r18, r28
    5c00:	30 e0       	ldi	r19, 0x00	; 0
    5c02:	24 17       	cp	r18, r20
    5c04:	35 07       	cpc	r19, r21
    5c06:	8c f5       	brge	.+98     	; 0x5c6a <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    5c08:	89 01       	movw	r16, r18
    5c0a:	00 0f       	add	r16, r16
    5c0c:	11 1f       	adc	r17, r17
    5c0e:	00 0f       	add	r16, r16
    5c10:	11 1f       	adc	r17, r17
    5c12:	d8 01       	movw	r26, r16
    5c14:	a7 5e       	subi	r26, 0xE7	; 231
    5c16:	b2 4f       	sbci	r27, 0xF2	; 242
    5c18:	ec 91       	ld	r30, X
    5c1a:	ff 27       	eor	r31, r31
    5c1c:	e7 fd       	sbrc	r30, 7
    5c1e:	f0 95       	com	r31
    5c20:	e8 17       	cp	r30, r24
    5c22:	f9 07       	cpc	r31, r25
    5c24:	01 f5       	brne	.+64     	; 0x5c66 <nrk_open+0x7e>
    5c26:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    5c28:	f9 01       	movw	r30, r18
    5c2a:	e3 5e       	subi	r30, 0xE3	; 227
    5c2c:	f2 4f       	sbci	r31, 0xF2	; 242
    5c2e:	80 81       	ld	r24, Z
    5c30:	81 11       	cpse	r24, r1
    5c32:	0b c0       	rjmp	.+22     	; 0x5c4a <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    5c34:	81 e0       	ldi	r24, 0x01	; 1
    5c36:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    5c38:	12 96       	adiw	r26, 0x02	; 2
    5c3a:	ed 91       	ld	r30, X+
    5c3c:	fc 91       	ld	r31, X
    5c3e:	13 97       	sbiw	r26, 0x03	; 3
    5c40:	20 e0       	ldi	r18, 0x00	; 0
    5c42:	40 e0       	ldi	r20, 0x00	; 0
    5c44:	50 e0       	ldi	r21, 0x00	; 0
    5c46:	80 e0       	ldi	r24, 0x00	; 0
    5c48:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    5c4a:	f8 01       	movw	r30, r16
    5c4c:	e7 5e       	subi	r30, 0xE7	; 231
    5c4e:	f2 4f       	sbci	r31, 0xF2	; 242
    5c50:	02 80       	ldd	r0, Z+2	; 0x02
    5c52:	f3 81       	ldd	r31, Z+3	; 0x03
    5c54:	e0 2d       	mov	r30, r0
    5c56:	20 e0       	ldi	r18, 0x00	; 0
    5c58:	40 e0       	ldi	r20, 0x00	; 0
    5c5a:	50 e0       	ldi	r21, 0x00	; 0
    5c5c:	6d 2f       	mov	r22, r29
    5c5e:	81 e0       	ldi	r24, 0x01	; 1
    5c60:	09 95       	icall
            return cnt;
    5c62:	8c 2f       	mov	r24, r28
    5c64:	03 c0       	rjmp	.+6      	; 0x5c6c <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    5c66:	cf 5f       	subi	r28, 0xFF	; 255
    5c68:	ca cf       	rjmp	.-108    	; 0x5bfe <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    5c6a:	8f ef       	ldi	r24, 0xFF	; 255
}
    5c6c:	df 91       	pop	r29
    5c6e:	cf 91       	pop	r28
    5c70:	1f 91       	pop	r17
    5c72:	0f 91       	pop	r16
    5c74:	08 95       	ret

00005c76 <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	20 91 18 0d 	lds	r18, 0x0D18
    5c7c:	33 27       	eor	r19, r19
    5c7e:	27 fd       	sbrc	r18, 7
    5c80:	30 95       	com	r19
    5c82:	28 17       	cp	r18, r24
    5c84:	39 07       	cpc	r19, r25
    5c86:	84 f0       	brlt	.+32     	; 0x5ca8 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    5c88:	88 0f       	add	r24, r24
    5c8a:	99 1f       	adc	r25, r25
    5c8c:	88 0f       	add	r24, r24
    5c8e:	99 1f       	adc	r25, r25
    5c90:	fc 01       	movw	r30, r24
    5c92:	e7 5e       	subi	r30, 0xE7	; 231
    5c94:	f2 4f       	sbci	r31, 0xF2	; 242
    5c96:	02 80       	ldd	r0, Z+2	; 0x02
    5c98:	f3 81       	ldd	r31, Z+3	; 0x03
    5c9a:	e0 2d       	mov	r30, r0
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	40 e0       	ldi	r20, 0x00	; 0
    5ca0:	50 e0       	ldi	r21, 0x00	; 0
    5ca2:	60 e0       	ldi	r22, 0x00	; 0
    5ca4:	82 e0       	ldi	r24, 0x02	; 2
    5ca6:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5ca8:	81 e0       	ldi	r24, 0x01	; 1
    5caa:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    5cae:	8f ef       	ldi	r24, 0xFF	; 255
    5cb0:	08 95       	ret

00005cb2 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    5cb2:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	e0 91 18 0d 	lds	r30, 0x0D18
    5cba:	ff 27       	eor	r31, r31
    5cbc:	e7 fd       	sbrc	r30, 7
    5cbe:	f0 95       	com	r31
    5cc0:	e8 17       	cp	r30, r24
    5cc2:	f9 07       	cpc	r31, r25
    5cc4:	74 f0       	brlt	.+28     	; 0x5ce2 <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    5cc6:	88 0f       	add	r24, r24
    5cc8:	99 1f       	adc	r25, r25
    5cca:	88 0f       	add	r24, r24
    5ccc:	99 1f       	adc	r25, r25
    5cce:	fc 01       	movw	r30, r24
    5cd0:	e7 5e       	subi	r30, 0xE7	; 231
    5cd2:	f2 4f       	sbci	r31, 0xF2	; 242
    5cd4:	02 80       	ldd	r0, Z+2	; 0x02
    5cd6:	f3 81       	ldd	r31, Z+3	; 0x03
    5cd8:	e0 2d       	mov	r30, r0
    5cda:	ab 01       	movw	r20, r22
    5cdc:	60 e0       	ldi	r22, 0x00	; 0
    5cde:	86 e0       	ldi	r24, 0x06	; 6
    5ce0:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    5ce8:	8f ef       	ldi	r24, 0xFF	; 255
    5cea:	08 95       	ret

00005cec <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    5cec:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    5cee:	90 e0       	ldi	r25, 0x00	; 0
    5cf0:	e0 91 18 0d 	lds	r30, 0x0D18
    5cf4:	ff 27       	eor	r31, r31
    5cf6:	e7 fd       	sbrc	r30, 7
    5cf8:	f0 95       	com	r31
    5cfa:	e8 17       	cp	r30, r24
    5cfc:	f9 07       	cpc	r31, r25
    5cfe:	74 f0       	brlt	.+28     	; 0x5d1c <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    5d00:	88 0f       	add	r24, r24
    5d02:	99 1f       	adc	r25, r25
    5d04:	88 0f       	add	r24, r24
    5d06:	99 1f       	adc	r25, r25
    5d08:	fc 01       	movw	r30, r24
    5d0a:	e7 5e       	subi	r30, 0xE7	; 231
    5d0c:	f2 4f       	sbci	r31, 0xF2	; 242
    5d0e:	02 80       	ldd	r0, Z+2	; 0x02
    5d10:	f3 81       	ldd	r31, Z+3	; 0x03
    5d12:	e0 2d       	mov	r30, r0
    5d14:	ab 01       	movw	r20, r22
    5d16:	60 e0       	ldi	r22, 0x00	; 0
    5d18:	85 e0       	ldi	r24, 0x05	; 5
    5d1a:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5d1c:	81 e0       	ldi	r24, 0x01	; 1
    5d1e:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    5d22:	8f ef       	ldi	r24, 0xFF	; 255
    5d24:	08 95       	ret

00005d26 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    5d26:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	e0 91 18 0d 	lds	r30, 0x0D18
    5d2e:	ff 27       	eor	r31, r31
    5d30:	e7 fd       	sbrc	r30, 7
    5d32:	f0 95       	com	r31
    5d34:	e8 17       	cp	r30, r24
    5d36:	f9 07       	cpc	r31, r25
    5d38:	74 f0       	brlt	.+28     	; 0x5d56 <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    5d3a:	88 0f       	add	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	88 0f       	add	r24, r24
    5d40:	99 1f       	adc	r25, r25
    5d42:	fc 01       	movw	r30, r24
    5d44:	e7 5e       	subi	r30, 0xE7	; 231
    5d46:	f2 4f       	sbci	r31, 0xF2	; 242
    5d48:	02 80       	ldd	r0, Z+2	; 0x02
    5d4a:	f3 81       	ldd	r31, Z+3	; 0x03
    5d4c:	e0 2d       	mov	r30, r0
    5d4e:	40 e0       	ldi	r20, 0x00	; 0
    5d50:	50 e0       	ldi	r21, 0x00	; 0
    5d52:	84 e0       	ldi	r24, 0x04	; 4
    5d54:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5d56:	81 e0       	ldi	r24, 0x01	; 1
    5d58:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    5d5c:	8f ef       	ldi	r24, 0xFF	; 255
    5d5e:	08 95       	ret

00005d60 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	20 91 18 0d 	lds	r18, 0x0D18
    5d66:	33 27       	eor	r19, r19
    5d68:	27 fd       	sbrc	r18, 7
    5d6a:	30 95       	com	r19
    5d6c:	28 17       	cp	r18, r24
    5d6e:	39 07       	cpc	r19, r25
    5d70:	7c f0       	brlt	.+30     	; 0x5d90 <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    5d72:	88 0f       	add	r24, r24
    5d74:	99 1f       	adc	r25, r25
    5d76:	88 0f       	add	r24, r24
    5d78:	99 1f       	adc	r25, r25
    5d7a:	fc 01       	movw	r30, r24
    5d7c:	e7 5e       	subi	r30, 0xE7	; 231
    5d7e:	f2 4f       	sbci	r31, 0xF2	; 242
    5d80:	02 80       	ldd	r0, Z+2	; 0x02
    5d82:	f3 81       	ldd	r31, Z+3	; 0x03
    5d84:	e0 2d       	mov	r30, r0
    5d86:	20 e0       	ldi	r18, 0x00	; 0
    5d88:	40 e0       	ldi	r20, 0x00	; 0
    5d8a:	50 e0       	ldi	r21, 0x00	; 0
    5d8c:	83 e0       	ldi	r24, 0x03	; 3
    5d8e:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5d90:	81 e0       	ldi	r24, 0x01	; 1
    5d92:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    5d96:	8f ef       	ldi	r24, 0xFF	; 255
    5d98:	08 95       	ret

00005d9a <nrk_spin_wait_us>:
	...
    5db2:	01 97       	sbiw	r24, 0x01	; 1
    5db4:	91 f7       	brne	.-28     	; 0x5d9a <nrk_spin_wait_us>
    5db6:	08 95       	ret

00005db8 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    5db8:	10 92 21 01 	sts	0x0121, r1
    5dbc:	08 95       	ret

00005dbe <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    5dbe:	89 e0       	ldi	r24, 0x09	; 9
    5dc0:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    5dc4:	8d e8       	ldi	r24, 0x8D	; 141
    5dc6:	9c e3       	ldi	r25, 0x3C	; 60
    5dc8:	90 93 29 01 	sts	0x0129, r25
    5dcc:	80 93 28 01 	sts	0x0128, r24
    5dd0:	08 95       	ret

00005dd2 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5dd2:	10 92 25 01 	sts	0x0125, r1
    5dd6:	10 92 24 01 	sts	0x0124, r1
    5dda:	08 95       	ret

00005ddc <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    5ddc:	cf 93       	push	r28
    5dde:	df 93       	push	r29
    5de0:	00 d0       	rcall	.+0      	; 0x5de2 <_nrk_precision_os_timer_get+0x6>
    5de2:	cd b7       	in	r28, 0x3d	; 61
    5de4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    5de6:	80 91 24 01 	lds	r24, 0x0124
    5dea:	90 91 25 01 	lds	r25, 0x0125
    5dee:	9a 83       	std	Y+2, r25	; 0x02
    5df0:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    5df2:	89 81       	ldd	r24, Y+1	; 0x01
    5df4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5df6:	0f 90       	pop	r0
    5df8:	0f 90       	pop	r0
    5dfa:	df 91       	pop	r29
    5dfc:	cf 91       	pop	r28
    5dfe:	08 95       	ret

00005e00 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    5e00:	10 92 81 00 	sts	0x0081, r1
    5e04:	08 95       	ret

00005e06 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    5e06:	81 e0       	ldi	r24, 0x01	; 1
    5e08:	80 93 81 00 	sts	0x0081, r24
    5e0c:	08 95       	ret

00005e0e <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5e0e:	83 b5       	in	r24, 0x23	; 35
    5e10:	81 60       	ori	r24, 0x01	; 1
    5e12:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    5e14:	10 92 85 00 	sts	0x0085, r1
    5e18:	10 92 84 00 	sts	0x0084, r1
    5e1c:	08 95       	ret

00005e1e <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	00 d0       	rcall	.+0      	; 0x5e24 <_nrk_high_speed_timer_get+0x6>
    5e24:	cd b7       	in	r28, 0x3d	; 61
    5e26:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    5e28:	80 91 84 00 	lds	r24, 0x0084
    5e2c:	90 91 85 00 	lds	r25, 0x0085
    5e30:	9a 83       	std	Y+2, r25	; 0x02
    5e32:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    5e34:	89 81       	ldd	r24, Y+1	; 0x01
    5e36:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5e38:	0f 90       	pop	r0
    5e3a:	0f 90       	pop	r0
    5e3c:	df 91       	pop	r29
    5e3e:	cf 91       	pop	r28
    5e40:	08 95       	ret

00005e42 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    5e42:	cf 92       	push	r12
    5e44:	df 92       	push	r13
    5e46:	ef 92       	push	r14
    5e48:	ff 92       	push	r15
    5e4a:	cf 93       	push	r28
    5e4c:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    5e4e:	ec 01       	movw	r28, r24
    5e50:	cc 0f       	add	r28, r28
    5e52:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    5e54:	c9 37       	cpi	r28, 0x79	; 121
    5e56:	8f ef       	ldi	r24, 0xFF	; 255
    5e58:	d8 07       	cpc	r29, r24
    5e5a:	10 f0       	brcs	.+4      	; 0x5e60 <nrk_high_speed_timer_wait+0x1e>
    5e5c:	c0 e0       	ldi	r28, 0x00	; 0
    5e5e:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    5e60:	6b 01       	movw	r12, r22
    5e62:	e1 2c       	mov	r14, r1
    5e64:	f1 2c       	mov	r15, r1
    5e66:	cc 0e       	add	r12, r28
    5e68:	dd 1e       	adc	r13, r29
    5e6a:	e1 1c       	adc	r14, r1
    5e6c:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    5e6e:	81 e0       	ldi	r24, 0x01	; 1
    5e70:	c8 16       	cp	r12, r24
    5e72:	d1 04       	cpc	r13, r1
    5e74:	e8 06       	cpc	r14, r24
    5e76:	f1 04       	cpc	r15, r1
    5e78:	40 f0       	brcs	.+16     	; 0x5e8a <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    5e7a:	81 e0       	ldi	r24, 0x01	; 1
    5e7c:	e8 1a       	sub	r14, r24
    5e7e:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    5e80:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <_nrk_high_speed_timer_get>
    5e84:	c8 17       	cp	r28, r24
    5e86:	d9 07       	cpc	r29, r25
    5e88:	d8 f3       	brcs	.-10     	; 0x5e80 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    5e8a:	0e 94 0f 2f 	call	0x5e1e	; 0x5e1e <_nrk_high_speed_timer_get>
    5e8e:	8c 15       	cp	r24, r12
    5e90:	9d 05       	cpc	r25, r13
    5e92:	d8 f3       	brcs	.-10     	; 0x5e8a <nrk_high_speed_timer_wait+0x48>
}
    5e94:	df 91       	pop	r29
    5e96:	cf 91       	pop	r28
    5e98:	ff 90       	pop	r15
    5e9a:	ef 90       	pop	r14
    5e9c:	df 90       	pop	r13
    5e9e:	cf 90       	pop	r12
    5ea0:	08 95       	ret

00005ea2 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    5ea2:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    5ea6:	e0 e7       	ldi	r30, 0x70	; 112
    5ea8:	f0 e0       	ldi	r31, 0x00	; 0
    5eaa:	80 81       	ld	r24, Z
    5eac:	8d 7f       	andi	r24, 0xFD	; 253
    5eae:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    5eb0:	80 81       	ld	r24, Z
    5eb2:	8e 7f       	andi	r24, 0xFE	; 254
    5eb4:	80 83       	st	Z, r24
    5eb6:	08 95       	ret

00005eb8 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    5eb8:	80 93 b2 00 	sts	0x00B2, r24
    5ebc:	08 95       	ret

00005ebe <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    5ebe:	e0 e7       	ldi	r30, 0x70	; 112
    5ec0:	f0 e0       	ldi	r31, 0x00	; 0
    5ec2:	80 81       	ld	r24, Z
    5ec4:	83 60       	ori	r24, 0x03	; 3
    5ec6:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    5ec8:	83 e0       	ldi	r24, 0x03	; 3
    5eca:	80 93 b1 00 	sts	0x00B1, r24
    5ece:	08 95       	ret

00005ed0 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    5ed0:	83 b5       	in	r24, 0x23	; 35
    5ed2:	82 60       	ori	r24, 0x02	; 2
    5ed4:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    5ed6:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    5eda:	10 92 93 0b 	sts	0x0B93, r1
    _nrk_prev_timer_val=0;
    5ede:	10 92 95 0b 	sts	0x0B95, r1
    5ee2:	08 95       	ret

00005ee4 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    5ee4:	cf 93       	push	r28
    5ee6:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    5ee8:	8e ef       	ldi	r24, 0xFE	; 254
    5eea:	80 93 95 0b 	sts	0x0B95, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    5eee:	80 e2       	ldi	r24, 0x20	; 32
    5ef0:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    5ef4:	80 91 95 0b 	lds	r24, 0x0B95
    5ef8:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    5efc:	83 e0       	ldi	r24, 0x03	; 3
    5efe:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    5f00:	92 e0       	ldi	r25, 0x02	; 2
    5f02:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    5f06:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    5f0a:	93 b5       	in	r25, 0x23	; 35
    5f0c:	92 60       	ori	r25, 0x02	; 2
    5f0e:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    5f10:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    5f12:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    5f14:	83 b5       	in	r24, 0x23	; 35
    5f16:	82 60       	ori	r24, 0x02	; 2
    5f18:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    5f1a:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    5f1e:	81 e0       	ldi	r24, 0x01	; 1
    5f20:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    5f24:	10 92 85 00 	sts	0x0085, r1
    5f28:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5f2c:	83 b5       	in	r24, 0x23	; 35
    5f2e:	82 60       	ori	r24, 0x02	; 2
    5f30:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5f32:	83 b5       	in	r24, 0x23	; 35
    5f34:	81 60       	ori	r24, 0x01	; 1
    5f36:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    5f38:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    5f3c:	c4 e2       	ldi	r28, 0x24	; 36
    5f3e:	d1 e0       	ldi	r29, 0x01	; 1
    5f40:	19 82       	std	Y+1, r1	; 0x01
    5f42:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5f44:	83 b5       	in	r24, 0x23	; 35
    5f46:	82 60       	ori	r24, 0x02	; 2
    5f48:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5f4a:	83 b5       	in	r24, 0x23	; 35
    5f4c:	81 60       	ori	r24, 0x01	; 1
    5f4e:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    5f50:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5f54:	19 82       	std	Y+1, r1	; 0x01
    5f56:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    5f58:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    5f5c:	0e 94 df 2e 	call	0x5dbe	; 0x5dbe <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    5f60:	10 92 93 0b 	sts	0x0B93, r1
}
    5f64:	df 91       	pop	r29
    5f66:	cf 91       	pop	r28
    5f68:	08 95       	ret

00005f6a <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    5f6a:	80 91 b3 00 	lds	r24, 0x00B3
}
    5f6e:	8f 5f       	subi	r24, 0xFF	; 255
    5f70:	08 95       	ret

00005f72 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    5f72:	81 50       	subi	r24, 0x01	; 1
    5f74:	80 93 b3 00 	sts	0x00B3, r24
    5f78:	08 95       	ret

00005f7a <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5f7a:	81 11       	cpse	r24, r1
    5f7c:	02 c0       	rjmp	.+4      	; 0x5f82 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    5f7e:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    5f82:	8f ef       	ldi	r24, 0xFF	; 255
    5f84:	08 95       	ret

00005f86 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5f86:	81 11       	cpse	r24, r1
    5f88:	06 c0       	rjmp	.+12     	; 0x5f96 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    5f8a:	10 92 95 00 	sts	0x0095, r1
    5f8e:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    5f92:	81 e0       	ldi	r24, 0x01	; 1
    5f94:	08 95       	ret
	}
return NRK_ERROR;
    5f96:	8f ef       	ldi	r24, 0xFF	; 255
}
    5f98:	08 95       	ret

00005f9a <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5f9a:	81 11       	cpse	r24, r1
    5f9c:	05 c0       	rjmp	.+10     	; 0x5fa8 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    5f9e:	80 91 94 00 	lds	r24, 0x0094
    5fa2:	90 91 95 00 	lds	r25, 0x0095
    5fa6:	08 95       	ret
	}
return 0;
    5fa8:	80 e0       	ldi	r24, 0x00	; 0
    5faa:	90 e0       	ldi	r25, 0x00	; 0

}
    5fac:	08 95       	ret

00005fae <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    5fae:	81 11       	cpse	r24, r1
    5fb0:	05 c0       	rjmp	.+10     	; 0x5fbc <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    5fb2:	82 e0       	ldi	r24, 0x02	; 2
    5fb4:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	08 95       	ret
	}
return NRK_ERROR;
    5fbc:	8f ef       	ldi	r24, 0xFF	; 255
}
    5fbe:	08 95       	ret

00005fc0 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    5fc0:	81 11       	cpse	r24, r1
    5fc2:	35 c0       	rjmp	.+106    	; 0x602e <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    5fc4:	cb 01       	movw	r24, r22
    5fc6:	01 97       	sbiw	r24, 0x01	; 1
    5fc8:	05 97       	sbiw	r24, 0x05	; 5
    5fca:	10 f4       	brcc	.+4      	; 0x5fd0 <nrk_timer_int_configure+0x10>
    5fcc:	60 93 94 0b 	sts	0x0B94, r22
	TCCR3A = 0;  
    5fd0:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    5fd4:	88 e0       	ldi	r24, 0x08	; 8
    5fd6:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    5fda:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    5fde:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    5fe2:	30 93 92 0b 	sts	0x0B92, r19
    5fe6:	20 93 91 0b 	sts	0x0B91, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    5fea:	80 91 94 0b 	lds	r24, 0x0B94
    5fee:	81 30       	cpi	r24, 0x01	; 1
    5ff0:	21 f4       	brne	.+8      	; 0x5ffa <nrk_timer_int_configure+0x3a>
    5ff2:	80 91 91 00 	lds	r24, 0x0091
    5ff6:	81 60       	ori	r24, 0x01	; 1
    5ff8:	11 c0       	rjmp	.+34     	; 0x601c <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    5ffa:	82 30       	cpi	r24, 0x02	; 2
    5ffc:	21 f4       	brne	.+8      	; 0x6006 <nrk_timer_int_configure+0x46>
    5ffe:	80 91 91 00 	lds	r24, 0x0091
    6002:	82 60       	ori	r24, 0x02	; 2
    6004:	0b c0       	rjmp	.+22     	; 0x601c <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    6006:	83 30       	cpi	r24, 0x03	; 3
    6008:	21 f4       	brne	.+8      	; 0x6012 <nrk_timer_int_configure+0x52>
    600a:	80 91 91 00 	lds	r24, 0x0091
    600e:	83 60       	ori	r24, 0x03	; 3
    6010:	05 c0       	rjmp	.+10     	; 0x601c <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    6012:	84 30       	cpi	r24, 0x04	; 4
    6014:	31 f4       	brne	.+12     	; 0x6022 <nrk_timer_int_configure+0x62>
    6016:	80 91 91 00 	lds	r24, 0x0091
    601a:	84 60       	ori	r24, 0x04	; 4
    601c:	80 93 91 00 	sts	0x0091, r24
    6020:	08 c0       	rjmp	.+16     	; 0x6032 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    6022:	85 30       	cpi	r24, 0x05	; 5
    6024:	31 f4       	brne	.+12     	; 0x6032 <nrk_timer_int_configure+0x72>
    6026:	80 91 91 00 	lds	r24, 0x0091
    602a:	85 60       	ori	r24, 0x05	; 5
    602c:	f7 cf       	rjmp	.-18     	; 0x601c <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    602e:	8f ef       	ldi	r24, 0xFF	; 255
    6030:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    6032:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    6034:	08 95       	ret

00006036 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    6036:	80 91 b2 00 	lds	r24, 0x00B2
}
    603a:	08 95       	ret

0000603c <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    603c:	1f 92       	push	r1
    603e:	0f 92       	push	r0
    6040:	0f b6       	in	r0, 0x3f	; 63
    6042:	0f 92       	push	r0
    6044:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6046:	60 e0       	ldi	r22, 0x00	; 0
    6048:	8a e0       	ldi	r24, 0x0A	; 10
    604a:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
	while(1);
    604e:	ff cf       	rjmp	.-2      	; 0x604e <__vector_default+0x12>

00006050 <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    6050:	0f 92       	push	r0
    6052:	0f b6       	in	r0, 0x3f	; 63
    6054:	0f 92       	push	r0
    6056:	1f 92       	push	r1
    6058:	2f 92       	push	r2
    605a:	3f 92       	push	r3
    605c:	4f 92       	push	r4
    605e:	5f 92       	push	r5
    6060:	6f 92       	push	r6
    6062:	7f 92       	push	r7
    6064:	8f 92       	push	r8
    6066:	9f 92       	push	r9
    6068:	af 92       	push	r10
    606a:	bf 92       	push	r11
    606c:	cf 92       	push	r12
    606e:	df 92       	push	r13
    6070:	ef 92       	push	r14
    6072:	ff 92       	push	r15
    6074:	0f 93       	push	r16
    6076:	1f 93       	push	r17
    6078:	2f 93       	push	r18
    607a:	3f 93       	push	r19
    607c:	4f 93       	push	r20
    607e:	5f 93       	push	r21
    6080:	6f 93       	push	r22
    6082:	7f 93       	push	r23
    6084:	8f 93       	push	r24
    6086:	9f 93       	push	r25
    6088:	af 93       	push	r26
    608a:	bf 93       	push	r27
    608c:	cf 93       	push	r28
    608e:	df 93       	push	r29
    6090:	ef 93       	push	r30
    6092:	ff 93       	push	r31
    6094:	a0 91 fb 0c 	lds	r26, 0x0CFB
    6098:	b0 91 fc 0c 	lds	r27, 0x0CFC
    609c:	0d b6       	in	r0, 0x3d	; 61
    609e:	0d 92       	st	X+, r0
    60a0:	0e b6       	in	r0, 0x3e	; 62
    60a2:	0d 92       	st	X+, r0
    60a4:	1f 92       	push	r1
    60a6:	a0 91 8b 08 	lds	r26, 0x088B
    60aa:	b0 91 8c 08 	lds	r27, 0x088C
    60ae:	1e 90       	ld	r1, -X
    60b0:	be bf       	out	0x3e, r27	; 62
    60b2:	ad bf       	out	0x3d, r26	; 61
    60b4:	08 95       	ret

000060b6 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    60b6:	1f 92       	push	r1
    60b8:	0f 92       	push	r0
    60ba:	0f b6       	in	r0, 0x3f	; 63
    60bc:	0f 92       	push	r0
    60be:	11 24       	eor	r1, r1
    60c0:	0b b6       	in	r0, 0x3b	; 59
    60c2:	0f 92       	push	r0
    60c4:	2f 93       	push	r18
    60c6:	3f 93       	push	r19
    60c8:	4f 93       	push	r20
    60ca:	5f 93       	push	r21
    60cc:	6f 93       	push	r22
    60ce:	7f 93       	push	r23
    60d0:	8f 93       	push	r24
    60d2:	9f 93       	push	r25
    60d4:	af 93       	push	r26
    60d6:	bf 93       	push	r27
    60d8:	ef 93       	push	r30
    60da:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    60dc:	e0 91 91 0b 	lds	r30, 0x0B91
    60e0:	f0 91 92 0b 	lds	r31, 0x0B92
    60e4:	30 97       	sbiw	r30, 0x00	; 0
    60e6:	11 f0       	breq	.+4      	; 0x60ec <__vector_32+0x36>
    60e8:	09 95       	icall
    60ea:	04 c0       	rjmp	.+8      	; 0x60f4 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    60ec:	60 e0       	ldi	r22, 0x00	; 0
    60ee:	8a e0       	ldi	r24, 0x0A	; 10
    60f0:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
	return;  	
}
    60f4:	ff 91       	pop	r31
    60f6:	ef 91       	pop	r30
    60f8:	bf 91       	pop	r27
    60fa:	af 91       	pop	r26
    60fc:	9f 91       	pop	r25
    60fe:	8f 91       	pop	r24
    6100:	7f 91       	pop	r23
    6102:	6f 91       	pop	r22
    6104:	5f 91       	pop	r21
    6106:	4f 91       	pop	r20
    6108:	3f 91       	pop	r19
    610a:	2f 91       	pop	r18
    610c:	0f 90       	pop	r0
    610e:	0b be       	out	0x3b, r0	; 59
    6110:	0f 90       	pop	r0
    6112:	0f be       	out	0x3f, r0	; 63
    6114:	0f 90       	pop	r0
    6116:	1f 90       	pop	r1
    6118:	18 95       	reti

0000611a <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    611a:	1f 92       	push	r1
    611c:	0f 92       	push	r0
    611e:	0f b6       	in	r0, 0x3f	; 63
    6120:	0f 92       	push	r0
    6122:	11 24       	eor	r1, r1

	return;  	
} 
    6124:	0f 90       	pop	r0
    6126:	0f be       	out	0x3f, r0	; 63
    6128:	0f 90       	pop	r0
    612a:	1f 90       	pop	r1
    612c:	18 95       	reti

0000612e <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    612e:	04 b6       	in	r0, 0x34	; 52
    6130:	03 fe       	sbrs	r0, 3
    6132:	02 c0       	rjmp	.+4      	; 0x6138 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    6134:	80 e1       	ldi	r24, 0x10	; 16
    6136:	01 c0       	rjmp	.+2      	; 0x613a <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    6138:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    613a:	04 b6       	in	r0, 0x34	; 52
    613c:	02 fe       	sbrs	r0, 2
    613e:	06 c0       	rjmp	.+12     	; 0x614c <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    6140:	94 b7       	in	r25, 0x34	; 52
    6142:	9b 7f       	andi	r25, 0xFB	; 251
    6144:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    6146:	04 b6       	in	r0, 0x34	; 52
    6148:	00 fe       	sbrs	r0, 0
		error|=0x04;
    614a:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    614c:	04 b6       	in	r0, 0x34	; 52
    614e:	01 fe       	sbrs	r0, 1
    6150:	05 c0       	rjmp	.+10     	; 0x615c <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    6152:	94 b7       	in	r25, 0x34	; 52
    6154:	9d 7f       	andi	r25, 0xFD	; 253
    6156:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    6158:	82 60       	ori	r24, 0x02	; 2
    615a:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    615c:	81 11       	cpse	r24, r1
    615e:	0c c0       	rjmp	.+24     	; 0x6178 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    6160:	04 b6       	in	r0, 0x34	; 52
    6162:	00 fe       	sbrs	r0, 0
    6164:	04 c0       	rjmp	.+8      	; 0x616e <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    6166:	94 b7       	in	r25, 0x34	; 52
    6168:	9e 7f       	andi	r25, 0xFE	; 254
    616a:	94 bf       	out	0x34, r25	; 52
    616c:	01 c0       	rjmp	.+2      	; 0x6170 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    616e:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    6170:	90 91 b0 00 	lds	r25, 0x00B0
    6174:	91 11       	cpse	r25, r1
    6176:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    6178:	08 95       	ret

0000617a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    617a:	81 11       	cpse	r24, r1
    617c:	02 c0       	rjmp	.+4      	; 0x6182 <nrk_ext_int_enable+0x8>
    617e:	e8 9a       	sbi	0x1d, 0	; 29
    6180:	39 c0       	rjmp	.+114    	; 0x61f4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    6182:	81 30       	cpi	r24, 0x01	; 1
    6184:	11 f4       	brne	.+4      	; 0x618a <nrk_ext_int_enable+0x10>
    6186:	e9 9a       	sbi	0x1d, 1	; 29
    6188:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    618a:	82 30       	cpi	r24, 0x02	; 2
    618c:	11 f4       	brne	.+4      	; 0x6192 <nrk_ext_int_enable+0x18>
    618e:	ea 9a       	sbi	0x1d, 2	; 29
    6190:	31 c0       	rjmp	.+98     	; 0x61f4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    6192:	83 30       	cpi	r24, 0x03	; 3
    6194:	21 f4       	brne	.+8      	; 0x619e <nrk_ext_int_enable+0x24>
    6196:	80 91 6b 00 	lds	r24, 0x006B
    619a:	81 60       	ori	r24, 0x01	; 1
    619c:	29 c0       	rjmp	.+82     	; 0x61f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    619e:	84 30       	cpi	r24, 0x04	; 4
    61a0:	21 f4       	brne	.+8      	; 0x61aa <nrk_ext_int_enable+0x30>
    61a2:	80 91 6b 00 	lds	r24, 0x006B
    61a6:	82 60       	ori	r24, 0x02	; 2
    61a8:	23 c0       	rjmp	.+70     	; 0x61f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    61aa:	85 30       	cpi	r24, 0x05	; 5
    61ac:	21 f4       	brne	.+8      	; 0x61b6 <nrk_ext_int_enable+0x3c>
    61ae:	80 91 6b 00 	lds	r24, 0x006B
    61b2:	84 60       	ori	r24, 0x04	; 4
    61b4:	1d c0       	rjmp	.+58     	; 0x61f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    61b6:	86 30       	cpi	r24, 0x06	; 6
    61b8:	21 f4       	brne	.+8      	; 0x61c2 <nrk_ext_int_enable+0x48>
    61ba:	80 91 6b 00 	lds	r24, 0x006B
    61be:	88 60       	ori	r24, 0x08	; 8
    61c0:	17 c0       	rjmp	.+46     	; 0x61f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    61c2:	87 30       	cpi	r24, 0x07	; 7
    61c4:	21 f4       	brne	.+8      	; 0x61ce <nrk_ext_int_enable+0x54>
    61c6:	80 91 6b 00 	lds	r24, 0x006B
    61ca:	80 61       	ori	r24, 0x10	; 16
    61cc:	11 c0       	rjmp	.+34     	; 0x61f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    61ce:	88 30       	cpi	r24, 0x08	; 8
    61d0:	21 f4       	brne	.+8      	; 0x61da <nrk_ext_int_enable+0x60>
    61d2:	80 91 6b 00 	lds	r24, 0x006B
    61d6:	80 62       	ori	r24, 0x20	; 32
    61d8:	0b c0       	rjmp	.+22     	; 0x61f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    61da:	89 30       	cpi	r24, 0x09	; 9
    61dc:	21 f4       	brne	.+8      	; 0x61e6 <nrk_ext_int_enable+0x6c>
    61de:	80 91 6b 00 	lds	r24, 0x006B
    61e2:	80 64       	ori	r24, 0x40	; 64
    61e4:	05 c0       	rjmp	.+10     	; 0x61f0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    61e6:	8a 30       	cpi	r24, 0x0A	; 10
    61e8:	39 f4       	brne	.+14     	; 0x61f8 <nrk_ext_int_enable+0x7e>
    61ea:	80 91 6b 00 	lds	r24, 0x006B
    61ee:	80 68       	ori	r24, 0x80	; 128
    61f0:	80 93 6b 00 	sts	0x006B, r24
    61f4:	81 e0       	ldi	r24, 0x01	; 1
    61f6:	08 95       	ret
return NRK_ERROR;
    61f8:	8f ef       	ldi	r24, 0xFF	; 255
}
    61fa:	08 95       	ret

000061fc <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    61fc:	81 11       	cpse	r24, r1
    61fe:	02 c0       	rjmp	.+4      	; 0x6204 <nrk_ext_int_disable+0x8>
    6200:	e8 98       	cbi	0x1d, 0	; 29
    6202:	39 c0       	rjmp	.+114    	; 0x6276 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    6204:	81 30       	cpi	r24, 0x01	; 1
    6206:	11 f4       	brne	.+4      	; 0x620c <nrk_ext_int_disable+0x10>
    6208:	e9 98       	cbi	0x1d, 1	; 29
    620a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    620c:	82 30       	cpi	r24, 0x02	; 2
    620e:	11 f4       	brne	.+4      	; 0x6214 <nrk_ext_int_disable+0x18>
    6210:	e9 98       	cbi	0x1d, 1	; 29
    6212:	31 c0       	rjmp	.+98     	; 0x6276 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    6214:	83 30       	cpi	r24, 0x03	; 3
    6216:	21 f4       	brne	.+8      	; 0x6220 <nrk_ext_int_disable+0x24>
    6218:	80 91 6b 00 	lds	r24, 0x006B
    621c:	8e 7f       	andi	r24, 0xFE	; 254
    621e:	29 c0       	rjmp	.+82     	; 0x6272 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    6220:	84 30       	cpi	r24, 0x04	; 4
    6222:	21 f4       	brne	.+8      	; 0x622c <nrk_ext_int_disable+0x30>
    6224:	80 91 6b 00 	lds	r24, 0x006B
    6228:	8d 7f       	andi	r24, 0xFD	; 253
    622a:	23 c0       	rjmp	.+70     	; 0x6272 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    622c:	85 30       	cpi	r24, 0x05	; 5
    622e:	21 f4       	brne	.+8      	; 0x6238 <nrk_ext_int_disable+0x3c>
    6230:	80 91 6b 00 	lds	r24, 0x006B
    6234:	8b 7f       	andi	r24, 0xFB	; 251
    6236:	1d c0       	rjmp	.+58     	; 0x6272 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    6238:	86 30       	cpi	r24, 0x06	; 6
    623a:	21 f4       	brne	.+8      	; 0x6244 <nrk_ext_int_disable+0x48>
    623c:	80 91 6b 00 	lds	r24, 0x006B
    6240:	87 7f       	andi	r24, 0xF7	; 247
    6242:	17 c0       	rjmp	.+46     	; 0x6272 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    6244:	87 30       	cpi	r24, 0x07	; 7
    6246:	21 f4       	brne	.+8      	; 0x6250 <nrk_ext_int_disable+0x54>
    6248:	80 91 6b 00 	lds	r24, 0x006B
    624c:	8f 7e       	andi	r24, 0xEF	; 239
    624e:	11 c0       	rjmp	.+34     	; 0x6272 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    6250:	88 30       	cpi	r24, 0x08	; 8
    6252:	21 f4       	brne	.+8      	; 0x625c <nrk_ext_int_disable+0x60>
    6254:	80 91 6b 00 	lds	r24, 0x006B
    6258:	8f 7d       	andi	r24, 0xDF	; 223
    625a:	0b c0       	rjmp	.+22     	; 0x6272 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    625c:	89 30       	cpi	r24, 0x09	; 9
    625e:	21 f4       	brne	.+8      	; 0x6268 <nrk_ext_int_disable+0x6c>
    6260:	80 91 6b 00 	lds	r24, 0x006B
    6264:	8f 7b       	andi	r24, 0xBF	; 191
    6266:	05 c0       	rjmp	.+10     	; 0x6272 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    6268:	8a 30       	cpi	r24, 0x0A	; 10
    626a:	39 f4       	brne	.+14     	; 0x627a <nrk_ext_int_disable+0x7e>
    626c:	80 91 6b 00 	lds	r24, 0x006B
    6270:	8f 77       	andi	r24, 0x7F	; 127
    6272:	80 93 6b 00 	sts	0x006B, r24
    6276:	81 e0       	ldi	r24, 0x01	; 1
    6278:	08 95       	ret
return NRK_ERROR;
    627a:	8f ef       	ldi	r24, 0xFF	; 255
}
    627c:	08 95       	ret

0000627e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    627e:	81 11       	cpse	r24, r1
    6280:	26 c0       	rjmp	.+76     	; 0x62ce <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    6282:	50 93 21 0d 	sts	0x0D21, r21
    6286:	40 93 20 0d 	sts	0x0D20, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    628a:	61 11       	cpse	r22, r1
    628c:	04 c0       	rjmp	.+8      	; 0x6296 <nrk_ext_int_configure+0x18>
    628e:	80 91 69 00 	lds	r24, 0x0069
    6292:	8c 7f       	andi	r24, 0xFC	; 252
    6294:	3d c0       	rjmp	.+122    	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    6296:	61 30       	cpi	r22, 0x01	; 1
    6298:	49 f4       	brne	.+18     	; 0x62ac <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    629a:	80 91 69 00 	lds	r24, 0x0069
    629e:	8d 7f       	andi	r24, 0xFD	; 253
    62a0:	80 93 69 00 	sts	0x0069, r24
    62a4:	80 91 69 00 	lds	r24, 0x0069
    62a8:	81 60       	ori	r24, 0x01	; 1
    62aa:	32 c0       	rjmp	.+100    	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    62ac:	62 30       	cpi	r22, 0x02	; 2
    62ae:	49 f4       	brne	.+18     	; 0x62c2 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    62b0:	80 91 69 00 	lds	r24, 0x0069
    62b4:	82 60       	ori	r24, 0x02	; 2
    62b6:	80 93 69 00 	sts	0x0069, r24
    62ba:	80 91 69 00 	lds	r24, 0x0069
    62be:	8e 7f       	andi	r24, 0xFE	; 254
    62c0:	27 c0       	rjmp	.+78     	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    62c2:	63 30       	cpi	r22, 0x03	; 3
    62c4:	39 f5       	brne	.+78     	; 0x6314 <nrk_ext_int_configure+0x96>
    62c6:	80 91 69 00 	lds	r24, 0x0069
    62ca:	83 60       	ori	r24, 0x03	; 3
    62cc:	21 c0       	rjmp	.+66     	; 0x6310 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    62ce:	81 30       	cpi	r24, 0x01	; 1
    62d0:	49 f5       	brne	.+82     	; 0x6324 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    62d2:	50 93 1f 0d 	sts	0x0D1F, r21
    62d6:	40 93 1e 0d 	sts	0x0D1E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    62da:	61 11       	cpse	r22, r1
    62dc:	04 c0       	rjmp	.+8      	; 0x62e6 <nrk_ext_int_configure+0x68>
    62de:	80 91 69 00 	lds	r24, 0x0069
    62e2:	83 7f       	andi	r24, 0xF3	; 243
    62e4:	15 c0       	rjmp	.+42     	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    62e6:	61 30       	cpi	r22, 0x01	; 1
    62e8:	49 f4       	brne	.+18     	; 0x62fc <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    62ea:	80 91 69 00 	lds	r24, 0x0069
    62ee:	87 7f       	andi	r24, 0xF7	; 247
    62f0:	80 93 69 00 	sts	0x0069, r24
    62f4:	80 91 69 00 	lds	r24, 0x0069
    62f8:	84 60       	ori	r24, 0x04	; 4
    62fa:	0a c0       	rjmp	.+20     	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    62fc:	62 30       	cpi	r22, 0x02	; 2
    62fe:	61 f4       	brne	.+24     	; 0x6318 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    6300:	80 91 69 00 	lds	r24, 0x0069
    6304:	88 60       	ori	r24, 0x08	; 8
    6306:	80 93 69 00 	sts	0x0069, r24
    630a:	80 91 69 00 	lds	r24, 0x0069
    630e:	8b 7f       	andi	r24, 0xFB	; 251
    6310:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    6314:	81 e0       	ldi	r24, 0x01	; 1
    6316:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    6318:	63 30       	cpi	r22, 0x03	; 3
    631a:	e1 f7       	brne	.-8      	; 0x6314 <nrk_ext_int_configure+0x96>
    631c:	80 91 69 00 	lds	r24, 0x0069
    6320:	8c 60       	ori	r24, 0x0C	; 12
    6322:	f6 cf       	rjmp	.-20     	; 0x6310 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    6324:	82 30       	cpi	r24, 0x02	; 2
    6326:	31 f5       	brne	.+76     	; 0x6374 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    6328:	50 93 23 0d 	sts	0x0D23, r21
    632c:	40 93 22 0d 	sts	0x0D22, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    6330:	61 11       	cpse	r22, r1
    6332:	04 c0       	rjmp	.+8      	; 0x633c <nrk_ext_int_configure+0xbe>
    6334:	80 91 69 00 	lds	r24, 0x0069
    6338:	8f 7c       	andi	r24, 0xCF	; 207
    633a:	ea cf       	rjmp	.-44     	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    633c:	61 30       	cpi	r22, 0x01	; 1
    633e:	49 f4       	brne	.+18     	; 0x6352 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    6340:	80 91 69 00 	lds	r24, 0x0069
    6344:	8f 7d       	andi	r24, 0xDF	; 223
    6346:	80 93 69 00 	sts	0x0069, r24
    634a:	80 91 69 00 	lds	r24, 0x0069
    634e:	80 61       	ori	r24, 0x10	; 16
    6350:	df cf       	rjmp	.-66     	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    6352:	62 30       	cpi	r22, 0x02	; 2
    6354:	49 f4       	brne	.+18     	; 0x6368 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    6356:	80 91 69 00 	lds	r24, 0x0069
    635a:	80 62       	ori	r24, 0x20	; 32
    635c:	80 93 69 00 	sts	0x0069, r24
    6360:	80 91 69 00 	lds	r24, 0x0069
    6364:	8f 7e       	andi	r24, 0xEF	; 239
    6366:	d4 cf       	rjmp	.-88     	; 0x6310 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    6368:	63 30       	cpi	r22, 0x03	; 3
    636a:	a1 f6       	brne	.-88     	; 0x6314 <nrk_ext_int_configure+0x96>
    636c:	80 91 69 00 	lds	r24, 0x0069
    6370:	80 63       	ori	r24, 0x30	; 48
    6372:	ce cf       	rjmp	.-100    	; 0x6310 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    6374:	83 50       	subi	r24, 0x03	; 3
    6376:	88 30       	cpi	r24, 0x08	; 8
    6378:	50 f4       	brcc	.+20     	; 0x638e <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    637a:	80 91 68 00 	lds	r24, 0x0068
    637e:	81 60       	ori	r24, 0x01	; 1
    6380:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    6384:	50 93 25 0d 	sts	0x0D25, r21
    6388:	40 93 24 0d 	sts	0x0D24, r20
    638c:	c3 cf       	rjmp	.-122    	; 0x6314 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    638e:	8f ef       	ldi	r24, 0xFF	; 255
}
    6390:	08 95       	ret

00006392 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    6392:	1f 92       	push	r1
    6394:	0f 92       	push	r0
    6396:	0f b6       	in	r0, 0x3f	; 63
    6398:	0f 92       	push	r0
    639a:	11 24       	eor	r1, r1
    639c:	0b b6       	in	r0, 0x3b	; 59
    639e:	0f 92       	push	r0
    63a0:	2f 93       	push	r18
    63a2:	3f 93       	push	r19
    63a4:	4f 93       	push	r20
    63a6:	5f 93       	push	r21
    63a8:	6f 93       	push	r22
    63aa:	7f 93       	push	r23
    63ac:	8f 93       	push	r24
    63ae:	9f 93       	push	r25
    63b0:	af 93       	push	r26
    63b2:	bf 93       	push	r27
    63b4:	ef 93       	push	r30
    63b6:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    63b8:	e0 91 24 0d 	lds	r30, 0x0D24
    63bc:	f0 91 25 0d 	lds	r31, 0x0D25
    63c0:	30 97       	sbiw	r30, 0x00	; 0
    63c2:	11 f0       	breq	.+4      	; 0x63c8 <__vector_9+0x36>
    63c4:	09 95       	icall
    63c6:	04 c0       	rjmp	.+8      	; 0x63d0 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    63c8:	60 e0       	ldi	r22, 0x00	; 0
    63ca:	8a e0       	ldi	r24, 0x0A	; 10
    63cc:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
	return;  	
}
    63d0:	ff 91       	pop	r31
    63d2:	ef 91       	pop	r30
    63d4:	bf 91       	pop	r27
    63d6:	af 91       	pop	r26
    63d8:	9f 91       	pop	r25
    63da:	8f 91       	pop	r24
    63dc:	7f 91       	pop	r23
    63de:	6f 91       	pop	r22
    63e0:	5f 91       	pop	r21
    63e2:	4f 91       	pop	r20
    63e4:	3f 91       	pop	r19
    63e6:	2f 91       	pop	r18
    63e8:	0f 90       	pop	r0
    63ea:	0b be       	out	0x3b, r0	; 59
    63ec:	0f 90       	pop	r0
    63ee:	0f be       	out	0x3f, r0	; 63
    63f0:	0f 90       	pop	r0
    63f2:	1f 90       	pop	r1
    63f4:	18 95       	reti

000063f6 <__vector_1>:


SIGNAL(INT0_vect) {
    63f6:	1f 92       	push	r1
    63f8:	0f 92       	push	r0
    63fa:	0f b6       	in	r0, 0x3f	; 63
    63fc:	0f 92       	push	r0
    63fe:	11 24       	eor	r1, r1
    6400:	0b b6       	in	r0, 0x3b	; 59
    6402:	0f 92       	push	r0
    6404:	2f 93       	push	r18
    6406:	3f 93       	push	r19
    6408:	4f 93       	push	r20
    640a:	5f 93       	push	r21
    640c:	6f 93       	push	r22
    640e:	7f 93       	push	r23
    6410:	8f 93       	push	r24
    6412:	9f 93       	push	r25
    6414:	af 93       	push	r26
    6416:	bf 93       	push	r27
    6418:	ef 93       	push	r30
    641a:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    641c:	e0 91 20 0d 	lds	r30, 0x0D20
    6420:	f0 91 21 0d 	lds	r31, 0x0D21
    6424:	30 97       	sbiw	r30, 0x00	; 0
    6426:	11 f0       	breq	.+4      	; 0x642c <__vector_1+0x36>
    6428:	09 95       	icall
    642a:	04 c0       	rjmp	.+8      	; 0x6434 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    642c:	60 e0       	ldi	r22, 0x00	; 0
    642e:	8a e0       	ldi	r24, 0x0A	; 10
    6430:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
	return;  	
}
    6434:	ff 91       	pop	r31
    6436:	ef 91       	pop	r30
    6438:	bf 91       	pop	r27
    643a:	af 91       	pop	r26
    643c:	9f 91       	pop	r25
    643e:	8f 91       	pop	r24
    6440:	7f 91       	pop	r23
    6442:	6f 91       	pop	r22
    6444:	5f 91       	pop	r21
    6446:	4f 91       	pop	r20
    6448:	3f 91       	pop	r19
    644a:	2f 91       	pop	r18
    644c:	0f 90       	pop	r0
    644e:	0b be       	out	0x3b, r0	; 59
    6450:	0f 90       	pop	r0
    6452:	0f be       	out	0x3f, r0	; 63
    6454:	0f 90       	pop	r0
    6456:	1f 90       	pop	r1
    6458:	18 95       	reti

0000645a <__vector_2>:

SIGNAL(INT1_vect) {
    645a:	1f 92       	push	r1
    645c:	0f 92       	push	r0
    645e:	0f b6       	in	r0, 0x3f	; 63
    6460:	0f 92       	push	r0
    6462:	11 24       	eor	r1, r1
    6464:	0b b6       	in	r0, 0x3b	; 59
    6466:	0f 92       	push	r0
    6468:	2f 93       	push	r18
    646a:	3f 93       	push	r19
    646c:	4f 93       	push	r20
    646e:	5f 93       	push	r21
    6470:	6f 93       	push	r22
    6472:	7f 93       	push	r23
    6474:	8f 93       	push	r24
    6476:	9f 93       	push	r25
    6478:	af 93       	push	r26
    647a:	bf 93       	push	r27
    647c:	ef 93       	push	r30
    647e:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    6480:	e0 91 1e 0d 	lds	r30, 0x0D1E
    6484:	f0 91 1f 0d 	lds	r31, 0x0D1F
    6488:	30 97       	sbiw	r30, 0x00	; 0
    648a:	11 f0       	breq	.+4      	; 0x6490 <__vector_2+0x36>
    648c:	09 95       	icall
    648e:	04 c0       	rjmp	.+8      	; 0x6498 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    6490:	60 e0       	ldi	r22, 0x00	; 0
    6492:	8a e0       	ldi	r24, 0x0A	; 10
    6494:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
	return;  	
}
    6498:	ff 91       	pop	r31
    649a:	ef 91       	pop	r30
    649c:	bf 91       	pop	r27
    649e:	af 91       	pop	r26
    64a0:	9f 91       	pop	r25
    64a2:	8f 91       	pop	r24
    64a4:	7f 91       	pop	r23
    64a6:	6f 91       	pop	r22
    64a8:	5f 91       	pop	r21
    64aa:	4f 91       	pop	r20
    64ac:	3f 91       	pop	r19
    64ae:	2f 91       	pop	r18
    64b0:	0f 90       	pop	r0
    64b2:	0b be       	out	0x3b, r0	; 59
    64b4:	0f 90       	pop	r0
    64b6:	0f be       	out	0x3f, r0	; 63
    64b8:	0f 90       	pop	r0
    64ba:	1f 90       	pop	r1
    64bc:	18 95       	reti

000064be <__vector_3>:

SIGNAL(INT2_vect) {
    64be:	1f 92       	push	r1
    64c0:	0f 92       	push	r0
    64c2:	0f b6       	in	r0, 0x3f	; 63
    64c4:	0f 92       	push	r0
    64c6:	11 24       	eor	r1, r1
    64c8:	0b b6       	in	r0, 0x3b	; 59
    64ca:	0f 92       	push	r0
    64cc:	2f 93       	push	r18
    64ce:	3f 93       	push	r19
    64d0:	4f 93       	push	r20
    64d2:	5f 93       	push	r21
    64d4:	6f 93       	push	r22
    64d6:	7f 93       	push	r23
    64d8:	8f 93       	push	r24
    64da:	9f 93       	push	r25
    64dc:	af 93       	push	r26
    64de:	bf 93       	push	r27
    64e0:	ef 93       	push	r30
    64e2:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    64e4:	e0 91 22 0d 	lds	r30, 0x0D22
    64e8:	f0 91 23 0d 	lds	r31, 0x0D23
    64ec:	30 97       	sbiw	r30, 0x00	; 0
    64ee:	11 f0       	breq	.+4      	; 0x64f4 <__vector_3+0x36>
    64f0:	09 95       	icall
    64f2:	04 c0       	rjmp	.+8      	; 0x64fc <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    64f4:	60 e0       	ldi	r22, 0x00	; 0
    64f6:	8a e0       	ldi	r24, 0x0A	; 10
    64f8:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <nrk_kernel_error_add>
	return;  	
}
    64fc:	ff 91       	pop	r31
    64fe:	ef 91       	pop	r30
    6500:	bf 91       	pop	r27
    6502:	af 91       	pop	r26
    6504:	9f 91       	pop	r25
    6506:	8f 91       	pop	r24
    6508:	7f 91       	pop	r23
    650a:	6f 91       	pop	r22
    650c:	5f 91       	pop	r21
    650e:	4f 91       	pop	r20
    6510:	3f 91       	pop	r19
    6512:	2f 91       	pop	r18
    6514:	0f 90       	pop	r0
    6516:	0b be       	out	0x3b, r0	; 59
    6518:	0f 90       	pop	r0
    651a:	0f be       	out	0x3f, r0	; 63
    651c:	0f 90       	pop	r0
    651e:	1f 90       	pop	r1
    6520:	18 95       	reti

00006522 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    6522:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6526:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    6528:	84 b7       	in	r24, 0x34	; 52
    652a:	87 7f       	andi	r24, 0xF7	; 247
    652c:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    652e:	e0 e6       	ldi	r30, 0x60	; 96
    6530:	f0 e0       	ldi	r31, 0x00	; 0
    6532:	80 81       	ld	r24, Z
    6534:	88 61       	ori	r24, 0x18	; 24
    6536:	80 83       	st	Z, r24
WDTCSR = 0;
    6538:	10 82       	st	Z, r1
nrk_int_enable();
    653a:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <nrk_int_enable>

0000653e <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    653e:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    6542:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    6544:	84 b7       	in	r24, 0x34	; 52
    6546:	87 7f       	andi	r24, 0xF7	; 247
    6548:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    654a:	e0 e6       	ldi	r30, 0x60	; 96
    654c:	f0 e0       	ldi	r31, 0x00	; 0
    654e:	80 81       	ld	r24, Z
    6550:	88 61       	ori	r24, 0x18	; 24
    6552:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    6554:	8d e0       	ldi	r24, 0x0D	; 13
    6556:	80 83       	st	Z, r24
nrk_int_enable();
    6558:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <nrk_int_enable>

0000655c <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    655c:	04 b6       	in	r0, 0x34	; 52
    655e:	03 fe       	sbrs	r0, 3
    6560:	02 c0       	rjmp	.+4      	; 0x6566 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    6562:	8f ef       	ldi	r24, 0xFF	; 255
    6564:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    6566:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    6568:	08 95       	ret

0000656a <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    656a:	a8 95       	wdr
    656c:	08 95       	ret

0000656e <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    656e:	08 95       	ret

00006570 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    6570:	83 b7       	in	r24, 0x33	; 51
    6572:	81 7f       	andi	r24, 0xF1	; 241
    6574:	86 60       	ori	r24, 0x06	; 6
    6576:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    6578:	83 b7       	in	r24, 0x33	; 51
    657a:	81 60       	ori	r24, 0x01	; 1
    657c:	83 bf       	out	0x33, r24	; 51
    657e:	88 95       	sleep
    6580:	83 b7       	in	r24, 0x33	; 51
    6582:	8e 7f       	andi	r24, 0xFE	; 254
    6584:	83 bf       	out	0x33, r24	; 51
    6586:	08 95       	ret

00006588 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    6588:	83 b7       	in	r24, 0x33	; 51
    658a:	81 7f       	andi	r24, 0xF1	; 241
    658c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    658e:	83 b7       	in	r24, 0x33	; 51
    6590:	81 60       	ori	r24, 0x01	; 1
    6592:	83 bf       	out	0x33, r24	; 51
    6594:	88 95       	sleep
    6596:	83 b7       	in	r24, 0x33	; 51
    6598:	8e 7f       	andi	r24, 0xFE	; 254
    659a:	83 bf       	out	0x33, r24	; 51
    659c:	08 95       	ret

0000659e <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    659e:	fc 01       	movw	r30, r24
    65a0:	76 83       	std	Z+6, r23	; 0x06
    65a2:	65 83       	std	Z+5, r22	; 0x05
    65a4:	08 95       	ret

000065a6 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    65a6:	ef 92       	push	r14
    65a8:	ff 92       	push	r15
    65aa:	0f 93       	push	r16
    65ac:	1f 93       	push	r17
    65ae:	cf 93       	push	r28
    65b0:	df 93       	push	r29
    65b2:	8c 01       	movw	r16, r24
    65b4:	7b 01       	movw	r14, r22
    65b6:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    65b8:	40 32       	cpi	r20, 0x20	; 32
    65ba:	51 05       	cpc	r21, r1
    65bc:	18 f4       	brcc	.+6      	; 0x65c4 <nrk_task_set_stk+0x1e>
    65be:	81 e1       	ldi	r24, 0x11	; 17
    65c0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    65c4:	21 97       	sbiw	r28, 0x01	; 1
    65c6:	ce 0d       	add	r28, r14
    65c8:	df 1d       	adc	r29, r15
    65ca:	f8 01       	movw	r30, r16
    65cc:	d2 83       	std	Z+2, r29	; 0x02
    65ce:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    65d0:	f4 82       	std	Z+4, r15	; 0x04
    65d2:	e3 82       	std	Z+3, r14	; 0x03

}
    65d4:	df 91       	pop	r29
    65d6:	cf 91       	pop	r28
    65d8:	1f 91       	pop	r17
    65da:	0f 91       	pop	r16
    65dc:	ff 90       	pop	r15
    65de:	ef 90       	pop	r14
    65e0:	08 95       	ret

000065e2 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    65e2:	25 e5       	ldi	r18, 0x55	; 85
    65e4:	fa 01       	movw	r30, r20
    65e6:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    65e8:	fb 01       	movw	r30, r22
    65ea:	32 97       	sbiw	r30, 0x02	; 2
    65ec:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    65ee:	31 96       	adiw	r30, 0x01	; 1
    65f0:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    65f2:	33 97       	sbiw	r30, 0x03	; 3
    65f4:	11 82       	std	Z+1, r1	; 0x01
    65f6:	10 82       	st	Z, r1
    *(--stk) = 0;       
    65f8:	32 97       	sbiw	r30, 0x02	; 2
    65fa:	11 82       	std	Z+1, r1	; 0x01
    65fc:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    65fe:	32 97       	sbiw	r30, 0x02	; 2
    6600:	11 82       	std	Z+1, r1	; 0x01
    6602:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    6604:	32 97       	sbiw	r30, 0x02	; 2
    6606:	11 82       	std	Z+1, r1	; 0x01
    6608:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    660a:	32 97       	sbiw	r30, 0x02	; 2
    660c:	11 82       	std	Z+1, r1	; 0x01
    660e:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    6610:	32 97       	sbiw	r30, 0x02	; 2
    6612:	11 82       	std	Z+1, r1	; 0x01
    6614:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    6616:	32 97       	sbiw	r30, 0x02	; 2
    6618:	11 82       	std	Z+1, r1	; 0x01
    661a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    661c:	32 97       	sbiw	r30, 0x02	; 2
    661e:	11 82       	std	Z+1, r1	; 0x01
    6620:	10 82       	st	Z, r1

    *(--stk) = 0; 
    6622:	32 97       	sbiw	r30, 0x02	; 2
    6624:	11 82       	std	Z+1, r1	; 0x01
    6626:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6628:	32 97       	sbiw	r30, 0x02	; 2
    662a:	11 82       	std	Z+1, r1	; 0x01
    662c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    662e:	32 97       	sbiw	r30, 0x02	; 2
    6630:	11 82       	std	Z+1, r1	; 0x01
    6632:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6634:	32 97       	sbiw	r30, 0x02	; 2
    6636:	11 82       	std	Z+1, r1	; 0x01
    6638:	10 82       	st	Z, r1
    *(--stk) = 0; 
    663a:	32 97       	sbiw	r30, 0x02	; 2
    663c:	11 82       	std	Z+1, r1	; 0x01
    663e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6640:	32 97       	sbiw	r30, 0x02	; 2
    6642:	11 82       	std	Z+1, r1	; 0x01
    6644:	10 82       	st	Z, r1
    *(--stk) = 0; 
    6646:	32 97       	sbiw	r30, 0x02	; 2
    6648:	11 82       	std	Z+1, r1	; 0x01
    664a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    664c:	32 97       	sbiw	r30, 0x02	; 2
    664e:	11 82       	std	Z+1, r1	; 0x01
    6650:	10 82       	st	Z, r1
    *(--stk) = 0;
    6652:	cb 01       	movw	r24, r22
    6654:	84 97       	sbiw	r24, 0x24	; 36
    6656:	fc 01       	movw	r30, r24
    6658:	11 82       	std	Z+1, r1	; 0x01
    665a:	10 82       	st	Z, r1


    return ((void *)stk);
}
    665c:	08 95       	ret

0000665e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    665e:	85 e5       	ldi	r24, 0x55	; 85
    6660:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    6664:	ee ef       	ldi	r30, 0xFE	; 254
    6666:	f1 e4       	ldi	r31, 0x41	; 65
    6668:	f0 93 8c 08 	sts	0x088C, r31
    666c:	e0 93 8b 08 	sts	0x088B, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    6670:	89 ea       	ldi	r24, 0xA9	; 169
    6672:	9f e1       	ldi	r25, 0x1F	; 31
    6674:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6676:	80 93 ff 41 	sts	0x41FF, r24
    667a:	08 95       	ret

0000667c <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    667c:	89 ea       	ldi	r24, 0xA9	; 169
    667e:	9f e1       	ldi	r25, 0x1F	; 31
    6680:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    6684:	80 93 ff 41 	sts	0x41FF, r24
    6688:	08 95       	ret

0000668a <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    668a:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <_nrk_setup_timer>
  nrk_int_enable();  
    668e:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <nrk_int_enable>

00006692 <nrk_start_high_ready_task>:
    6692:	a0 91 ec 0c 	lds	r26, 0x0CEC
    6696:	b0 91 ed 0c 	lds	r27, 0x0CED
    669a:	cd 91       	ld	r28, X+
    669c:	cd bf       	out	0x3d, r28	; 61
    669e:	dd 91       	ld	r29, X+
    66a0:	de bf       	out	0x3e, r29	; 62
    66a2:	ff 91       	pop	r31
    66a4:	ef 91       	pop	r30
    66a6:	df 91       	pop	r29
    66a8:	cf 91       	pop	r28
    66aa:	bf 91       	pop	r27
    66ac:	af 91       	pop	r26
    66ae:	9f 91       	pop	r25
    66b0:	8f 91       	pop	r24
    66b2:	7f 91       	pop	r23
    66b4:	6f 91       	pop	r22
    66b6:	5f 91       	pop	r21
    66b8:	4f 91       	pop	r20
    66ba:	3f 91       	pop	r19
    66bc:	2f 91       	pop	r18
    66be:	1f 91       	pop	r17
    66c0:	0f 91       	pop	r16
    66c2:	ff 90       	pop	r15
    66c4:	ef 90       	pop	r14
    66c6:	df 90       	pop	r13
    66c8:	cf 90       	pop	r12
    66ca:	bf 90       	pop	r11
    66cc:	af 90       	pop	r10
    66ce:	9f 90       	pop	r9
    66d0:	8f 90       	pop	r8
    66d2:	7f 90       	pop	r7
    66d4:	6f 90       	pop	r6
    66d6:	5f 90       	pop	r5
    66d8:	4f 90       	pop	r4
    66da:	3f 90       	pop	r3
    66dc:	2f 90       	pop	r2
    66de:	1f 90       	pop	r1
    66e0:	0f 90       	pop	r0
    66e2:	0f be       	out	0x3f, r0	; 63
    66e4:	0f 90       	pop	r0
    66e6:	18 95       	reti

000066e8 <main>:

void nrk_register_drivers();

int main ()
{
  nrk_setup_ports ();
    66e8:	0e 94 89 19 	call	0x3312	; 0x3312 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    66ec:	80 e1       	ldi	r24, 0x10	; 16
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <nrk_setup_uart>

  nrk_init ();
    66f4:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <nrk_init>

  nrk_led_clr (0);
    66f8:	80 e0       	ldi	r24, 0x00	; 0
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	0e 94 96 1c 	call	0x392c	; 0x392c <nrk_led_clr>
  nrk_led_clr (1);
    6700:	81 e0       	ldi	r24, 0x01	; 1
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	0e 94 96 1c 	call	0x392c	; 0x392c <nrk_led_clr>
  nrk_led_clr (2);
    6708:	82 e0       	ldi	r24, 0x02	; 2
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	0e 94 96 1c 	call	0x392c	; 0x392c <nrk_led_clr>
  nrk_led_clr (3);
    6710:	83 e0       	ldi	r24, 0x03	; 3
    6712:	90 e0       	ldi	r25, 0x00	; 0
    6714:	0e 94 96 1c 	call	0x392c	; 0x392c <nrk_led_clr>

  nrk_time_set (0, 0);
    6718:	20 e0       	ldi	r18, 0x00	; 0
    671a:	30 e0       	ldi	r19, 0x00	; 0
    671c:	a9 01       	movw	r20, r18
    671e:	60 e0       	ldi	r22, 0x00	; 0
    6720:	70 e0       	ldi	r23, 0x00	; 0
    6722:	cb 01       	movw	r24, r22
    6724:	0e 94 db 29 	call	0x53b6	; 0x53b6 <nrk_time_set>

  bmac_task_config ();
    6728:	0e 94 42 08 	call	0x1084	; 0x1084 <bmac_task_config>

  nrk_register_drivers();
    672c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <nrk_register_drivers>
  nrk_create_taskset ();
    6730:	0e 94 a2 04 	call	0x944	; 0x944 <nrk_create_taskset>
  nrk_start ();
    6734:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <nrk_start>

  return 0;
}
    6738:	80 e0       	ldi	r24, 0x00	; 0
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	08 95       	ret

0000673e <vfprintf>:
    673e:	6f 92       	push	r6
    6740:	7f 92       	push	r7
    6742:	8f 92       	push	r8
    6744:	9f 92       	push	r9
    6746:	af 92       	push	r10
    6748:	bf 92       	push	r11
    674a:	cf 92       	push	r12
    674c:	df 92       	push	r13
    674e:	ef 92       	push	r14
    6750:	ff 92       	push	r15
    6752:	0f 93       	push	r16
    6754:	1f 93       	push	r17
    6756:	cf 93       	push	r28
    6758:	df 93       	push	r29
    675a:	cd b7       	in	r28, 0x3d	; 61
    675c:	de b7       	in	r29, 0x3e	; 62
    675e:	2c 97       	sbiw	r28, 0x0c	; 12
    6760:	0f b6       	in	r0, 0x3f	; 63
    6762:	f8 94       	cli
    6764:	de bf       	out	0x3e, r29	; 62
    6766:	0f be       	out	0x3f, r0	; 63
    6768:	cd bf       	out	0x3d, r28	; 61
    676a:	6c 01       	movw	r12, r24
    676c:	5b 01       	movw	r10, r22
    676e:	7a 01       	movw	r14, r20
    6770:	fc 01       	movw	r30, r24
    6772:	17 82       	std	Z+7, r1	; 0x07
    6774:	16 82       	std	Z+6, r1	; 0x06
    6776:	83 81       	ldd	r24, Z+3	; 0x03
    6778:	81 ff       	sbrs	r24, 1
    677a:	0e c1       	rjmp	.+540    	; 0x6998 <vfprintf+0x25a>
    677c:	ce 01       	movw	r24, r28
    677e:	01 96       	adiw	r24, 0x01	; 1
    6780:	4c 01       	movw	r8, r24
    6782:	f6 01       	movw	r30, r12
    6784:	03 81       	ldd	r16, Z+3	; 0x03
    6786:	f5 01       	movw	r30, r10
    6788:	03 fd       	sbrc	r16, 3
    678a:	15 91       	lpm	r17, Z+
    678c:	03 ff       	sbrs	r16, 3
    678e:	11 91       	ld	r17, Z+
    6790:	5f 01       	movw	r10, r30
    6792:	11 23       	and	r17, r17
    6794:	09 f4       	brne	.+2      	; 0x6798 <vfprintf+0x5a>
    6796:	fc c0       	rjmp	.+504    	; 0x6990 <vfprintf+0x252>
    6798:	15 32       	cpi	r17, 0x25	; 37
    679a:	49 f4       	brne	.+18     	; 0x67ae <vfprintf+0x70>
    679c:	03 fd       	sbrc	r16, 3
    679e:	15 91       	lpm	r17, Z+
    67a0:	03 ff       	sbrs	r16, 3
    67a2:	11 91       	ld	r17, Z+
    67a4:	5f 01       	movw	r10, r30
    67a6:	15 32       	cpi	r17, 0x25	; 37
    67a8:	11 f0       	breq	.+4      	; 0x67ae <vfprintf+0x70>
    67aa:	20 e0       	ldi	r18, 0x00	; 0
    67ac:	1b c0       	rjmp	.+54     	; 0x67e4 <vfprintf+0xa6>
    67ae:	b6 01       	movw	r22, r12
    67b0:	81 2f       	mov	r24, r17
    67b2:	90 e0       	ldi	r25, 0x00	; 0
    67b4:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    67b8:	37 01       	movw	r6, r14
    67ba:	73 01       	movw	r14, r6
    67bc:	e2 cf       	rjmp	.-60     	; 0x6782 <vfprintf+0x44>
    67be:	11 23       	and	r17, r17
    67c0:	09 f4       	brne	.+2      	; 0x67c4 <vfprintf+0x86>
    67c2:	e6 c0       	rjmp	.+460    	; 0x6990 <vfprintf+0x252>
    67c4:	61 2f       	mov	r22, r17
    67c6:	70 e0       	ldi	r23, 0x00	; 0
    67c8:	81 e5       	ldi	r24, 0x51	; 81
    67ca:	95 e0       	ldi	r25, 0x05	; 5
    67cc:	2c 87       	std	Y+12, r18	; 0x0c
    67ce:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <strchr_P>
    67d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    67d4:	89 2b       	or	r24, r25
    67d6:	49 f0       	breq	.+18     	; 0x67ea <vfprintf+0xac>
    67d8:	f5 01       	movw	r30, r10
    67da:	03 fd       	sbrc	r16, 3
    67dc:	15 91       	lpm	r17, Z+
    67de:	03 ff       	sbrs	r16, 3
    67e0:	11 91       	ld	r17, Z+
    67e2:	5f 01       	movw	r10, r30
    67e4:	27 ff       	sbrs	r18, 7
    67e6:	eb cf       	rjmp	.-42     	; 0x67be <vfprintf+0x80>
    67e8:	09 c0       	rjmp	.+18     	; 0x67fc <vfprintf+0xbe>
    67ea:	13 32       	cpi	r17, 0x23	; 35
    67ec:	29 f0       	breq	.+10     	; 0x67f8 <vfprintf+0xba>
    67ee:	1c 36       	cpi	r17, 0x6C	; 108
    67f0:	09 f0       	breq	.+2      	; 0x67f4 <vfprintf+0xb6>
    67f2:	d5 c0       	rjmp	.+426    	; 0x699e <vfprintf+0x260>
    67f4:	20 68       	ori	r18, 0x80	; 128
    67f6:	f0 cf       	rjmp	.-32     	; 0x67d8 <vfprintf+0x9a>
    67f8:	20 e1       	ldi	r18, 0x10	; 16
    67fa:	ee cf       	rjmp	.-36     	; 0x67d8 <vfprintf+0x9a>
    67fc:	02 2f       	mov	r16, r18
    67fe:	11 23       	and	r17, r17
    6800:	09 f4       	brne	.+2      	; 0x6804 <vfprintf+0xc6>
    6802:	c6 c0       	rjmp	.+396    	; 0x6990 <vfprintf+0x252>
    6804:	61 2f       	mov	r22, r17
    6806:	70 e0       	ldi	r23, 0x00	; 0
    6808:	8a e4       	ldi	r24, 0x4A	; 74
    680a:	95 e0       	ldi	r25, 0x05	; 5
    680c:	2c 87       	std	Y+12, r18	; 0x0c
    680e:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <strchr_P>
    6812:	2c 85       	ldd	r18, Y+12	; 0x0c
    6814:	89 2b       	or	r24, r25
    6816:	41 f0       	breq	.+16     	; 0x6828 <vfprintf+0xea>
    6818:	37 01       	movw	r6, r14
    681a:	f4 e0       	ldi	r31, 0x04	; 4
    681c:	6f 0e       	add	r6, r31
    681e:	71 1c       	adc	r7, r1
    6820:	b6 01       	movw	r22, r12
    6822:	8f e3       	ldi	r24, 0x3F	; 63
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	11 c0       	rjmp	.+34     	; 0x684a <vfprintf+0x10c>
    6828:	13 36       	cpi	r17, 0x63	; 99
    682a:	39 f0       	breq	.+14     	; 0x683a <vfprintf+0xfc>
    682c:	13 37       	cpi	r17, 0x73	; 115
    682e:	81 f0       	breq	.+32     	; 0x6850 <vfprintf+0x112>
    6830:	13 35       	cpi	r17, 0x53	; 83
    6832:	19 f5       	brne	.+70     	; 0x687a <vfprintf+0x13c>
    6834:	02 2f       	mov	r16, r18
    6836:	01 60       	ori	r16, 0x01	; 1
    6838:	0b c0       	rjmp	.+22     	; 0x6850 <vfprintf+0x112>
    683a:	37 01       	movw	r6, r14
    683c:	82 e0       	ldi	r24, 0x02	; 2
    683e:	68 0e       	add	r6, r24
    6840:	71 1c       	adc	r7, r1
    6842:	b6 01       	movw	r22, r12
    6844:	f7 01       	movw	r30, r14
    6846:	80 81       	ld	r24, Z
    6848:	91 81       	ldd	r25, Z+1	; 0x01
    684a:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    684e:	b5 cf       	rjmp	.-150    	; 0x67ba <vfprintf+0x7c>
    6850:	37 01       	movw	r6, r14
    6852:	f2 e0       	ldi	r31, 0x02	; 2
    6854:	6f 0e       	add	r6, r31
    6856:	71 1c       	adc	r7, r1
    6858:	f7 01       	movw	r30, r14
    685a:	e0 80       	ld	r14, Z
    685c:	f1 80       	ldd	r15, Z+1	; 0x01
    685e:	f7 01       	movw	r30, r14
    6860:	00 fd       	sbrc	r16, 0
    6862:	85 91       	lpm	r24, Z+
    6864:	00 ff       	sbrs	r16, 0
    6866:	81 91       	ld	r24, Z+
    6868:	7f 01       	movw	r14, r30
    686a:	88 23       	and	r24, r24
    686c:	09 f4       	brne	.+2      	; 0x6870 <vfprintf+0x132>
    686e:	a5 cf       	rjmp	.-182    	; 0x67ba <vfprintf+0x7c>
    6870:	b6 01       	movw	r22, r12
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    6878:	f2 cf       	rjmp	.-28     	; 0x685e <vfprintf+0x120>
    687a:	14 36       	cpi	r17, 0x64	; 100
    687c:	11 f0       	breq	.+4      	; 0x6882 <vfprintf+0x144>
    687e:	19 36       	cpi	r17, 0x69	; 105
    6880:	29 f5       	brne	.+74     	; 0x68cc <vfprintf+0x18e>
    6882:	37 01       	movw	r6, r14
    6884:	27 ff       	sbrs	r18, 7
    6886:	09 c0       	rjmp	.+18     	; 0x689a <vfprintf+0x15c>
    6888:	f4 e0       	ldi	r31, 0x04	; 4
    688a:	6f 0e       	add	r6, r31
    688c:	71 1c       	adc	r7, r1
    688e:	f7 01       	movw	r30, r14
    6890:	60 81       	ld	r22, Z
    6892:	71 81       	ldd	r23, Z+1	; 0x01
    6894:	82 81       	ldd	r24, Z+2	; 0x02
    6896:	93 81       	ldd	r25, Z+3	; 0x03
    6898:	0a c0       	rjmp	.+20     	; 0x68ae <vfprintf+0x170>
    689a:	f2 e0       	ldi	r31, 0x02	; 2
    689c:	6f 0e       	add	r6, r31
    689e:	71 1c       	adc	r7, r1
    68a0:	f7 01       	movw	r30, r14
    68a2:	60 81       	ld	r22, Z
    68a4:	71 81       	ldd	r23, Z+1	; 0x01
    68a6:	88 27       	eor	r24, r24
    68a8:	77 fd       	sbrc	r23, 7
    68aa:	80 95       	com	r24
    68ac:	98 2f       	mov	r25, r24
    68ae:	02 2f       	mov	r16, r18
    68b0:	0f 7e       	andi	r16, 0xEF	; 239
    68b2:	97 ff       	sbrs	r25, 7
    68b4:	08 c0       	rjmp	.+16     	; 0x68c6 <vfprintf+0x188>
    68b6:	90 95       	com	r25
    68b8:	80 95       	com	r24
    68ba:	70 95       	com	r23
    68bc:	61 95       	neg	r22
    68be:	7f 4f       	sbci	r23, 0xFF	; 255
    68c0:	8f 4f       	sbci	r24, 0xFF	; 255
    68c2:	9f 4f       	sbci	r25, 0xFF	; 255
    68c4:	00 64       	ori	r16, 0x40	; 64
    68c6:	2a e0       	ldi	r18, 0x0A	; 10
    68c8:	30 e0       	ldi	r19, 0x00	; 0
    68ca:	33 c0       	rjmp	.+102    	; 0x6932 <vfprintf+0x1f4>
    68cc:	10 37       	cpi	r17, 0x70	; 112
    68ce:	99 f0       	breq	.+38     	; 0x68f6 <vfprintf+0x1b8>
    68d0:	40 f4       	brcc	.+16     	; 0x68e2 <vfprintf+0x1a4>
    68d2:	18 35       	cpi	r17, 0x58	; 88
    68d4:	b1 f0       	breq	.+44     	; 0x6902 <vfprintf+0x1c4>
    68d6:	1f 36       	cpi	r17, 0x6F	; 111
    68d8:	09 f0       	breq	.+2      	; 0x68dc <vfprintf+0x19e>
    68da:	5a c0       	rjmp	.+180    	; 0x6990 <vfprintf+0x252>
    68dc:	28 e0       	ldi	r18, 0x08	; 8
    68de:	30 e0       	ldi	r19, 0x00	; 0
    68e0:	14 c0       	rjmp	.+40     	; 0x690a <vfprintf+0x1cc>
    68e2:	15 37       	cpi	r17, 0x75	; 117
    68e4:	19 f0       	breq	.+6      	; 0x68ec <vfprintf+0x1ae>
    68e6:	18 37       	cpi	r17, 0x78	; 120
    68e8:	41 f0       	breq	.+16     	; 0x68fa <vfprintf+0x1bc>
    68ea:	52 c0       	rjmp	.+164    	; 0x6990 <vfprintf+0x252>
    68ec:	02 2f       	mov	r16, r18
    68ee:	0f 7e       	andi	r16, 0xEF	; 239
    68f0:	2a e0       	ldi	r18, 0x0A	; 10
    68f2:	30 e0       	ldi	r19, 0x00	; 0
    68f4:	0a c0       	rjmp	.+20     	; 0x690a <vfprintf+0x1cc>
    68f6:	02 2f       	mov	r16, r18
    68f8:	00 61       	ori	r16, 0x10	; 16
    68fa:	04 62       	ori	r16, 0x24	; 36
    68fc:	20 e1       	ldi	r18, 0x10	; 16
    68fe:	30 e0       	ldi	r19, 0x00	; 0
    6900:	04 c0       	rjmp	.+8      	; 0x690a <vfprintf+0x1cc>
    6902:	02 2f       	mov	r16, r18
    6904:	04 60       	ori	r16, 0x04	; 4
    6906:	20 e1       	ldi	r18, 0x10	; 16
    6908:	32 e0       	ldi	r19, 0x02	; 2
    690a:	37 01       	movw	r6, r14
    690c:	07 ff       	sbrs	r16, 7
    690e:	09 c0       	rjmp	.+18     	; 0x6922 <vfprintf+0x1e4>
    6910:	f4 e0       	ldi	r31, 0x04	; 4
    6912:	6f 0e       	add	r6, r31
    6914:	71 1c       	adc	r7, r1
    6916:	f7 01       	movw	r30, r14
    6918:	60 81       	ld	r22, Z
    691a:	71 81       	ldd	r23, Z+1	; 0x01
    691c:	82 81       	ldd	r24, Z+2	; 0x02
    691e:	93 81       	ldd	r25, Z+3	; 0x03
    6920:	08 c0       	rjmp	.+16     	; 0x6932 <vfprintf+0x1f4>
    6922:	f2 e0       	ldi	r31, 0x02	; 2
    6924:	6f 0e       	add	r6, r31
    6926:	71 1c       	adc	r7, r1
    6928:	f7 01       	movw	r30, r14
    692a:	60 81       	ld	r22, Z
    692c:	71 81       	ldd	r23, Z+1	; 0x01
    692e:	80 e0       	ldi	r24, 0x00	; 0
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	a4 01       	movw	r20, r8
    6934:	0e 94 86 37 	call	0x6f0c	; 0x6f0c <__ultoa_invert>
    6938:	18 2f       	mov	r17, r24
    693a:	18 19       	sub	r17, r8
    693c:	06 ff       	sbrs	r16, 6
    693e:	05 c0       	rjmp	.+10     	; 0x694a <vfprintf+0x20c>
    6940:	b6 01       	movw	r22, r12
    6942:	8d e2       	ldi	r24, 0x2D	; 45
    6944:	90 e0       	ldi	r25, 0x00	; 0
    6946:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    694a:	04 ff       	sbrs	r16, 4
    694c:	15 c0       	rjmp	.+42     	; 0x6978 <vfprintf+0x23a>
    694e:	fe 01       	movw	r30, r28
    6950:	e1 0f       	add	r30, r17
    6952:	f1 1d       	adc	r31, r1
    6954:	80 81       	ld	r24, Z
    6956:	80 33       	cpi	r24, 0x30	; 48
    6958:	79 f0       	breq	.+30     	; 0x6978 <vfprintf+0x23a>
    695a:	b6 01       	movw	r22, r12
    695c:	80 e3       	ldi	r24, 0x30	; 48
    695e:	90 e0       	ldi	r25, 0x00	; 0
    6960:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    6964:	02 ff       	sbrs	r16, 2
    6966:	08 c0       	rjmp	.+16     	; 0x6978 <vfprintf+0x23a>
    6968:	00 72       	andi	r16, 0x20	; 32
    696a:	80 2f       	mov	r24, r16
    696c:	90 e0       	ldi	r25, 0x00	; 0
    696e:	b6 01       	movw	r22, r12
    6970:	88 5a       	subi	r24, 0xA8	; 168
    6972:	9f 4f       	sbci	r25, 0xFF	; 255
    6974:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    6978:	11 50       	subi	r17, 0x01	; 1
    697a:	f4 01       	movw	r30, r8
    697c:	e1 0f       	add	r30, r17
    697e:	f1 1d       	adc	r31, r1
    6980:	80 81       	ld	r24, Z
    6982:	b6 01       	movw	r22, r12
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <fputc>
    698a:	11 11       	cpse	r17, r1
    698c:	f5 cf       	rjmp	.-22     	; 0x6978 <vfprintf+0x23a>
    698e:	15 cf       	rjmp	.-470    	; 0x67ba <vfprintf+0x7c>
    6990:	f6 01       	movw	r30, r12
    6992:	86 81       	ldd	r24, Z+6	; 0x06
    6994:	97 81       	ldd	r25, Z+7	; 0x07
    6996:	05 c0       	rjmp	.+10     	; 0x69a2 <vfprintf+0x264>
    6998:	8f ef       	ldi	r24, 0xFF	; 255
    699a:	9f ef       	ldi	r25, 0xFF	; 255
    699c:	02 c0       	rjmp	.+4      	; 0x69a2 <vfprintf+0x264>
    699e:	02 2f       	mov	r16, r18
    69a0:	31 cf       	rjmp	.-414    	; 0x6804 <vfprintf+0xc6>
    69a2:	2c 96       	adiw	r28, 0x0c	; 12
    69a4:	0f b6       	in	r0, 0x3f	; 63
    69a6:	f8 94       	cli
    69a8:	de bf       	out	0x3e, r29	; 62
    69aa:	0f be       	out	0x3f, r0	; 63
    69ac:	cd bf       	out	0x3d, r28	; 61
    69ae:	df 91       	pop	r29
    69b0:	cf 91       	pop	r28
    69b2:	1f 91       	pop	r17
    69b4:	0f 91       	pop	r16
    69b6:	ff 90       	pop	r15
    69b8:	ef 90       	pop	r14
    69ba:	df 90       	pop	r13
    69bc:	cf 90       	pop	r12
    69be:	bf 90       	pop	r11
    69c0:	af 90       	pop	r10
    69c2:	9f 90       	pop	r9
    69c4:	8f 90       	pop	r8
    69c6:	7f 90       	pop	r7
    69c8:	6f 90       	pop	r6
    69ca:	08 95       	ret

000069cc <__muluhisi3>:
    69cc:	0e 94 d7 35 	call	0x6bae	; 0x6bae <__umulhisi3>
    69d0:	a5 9f       	mul	r26, r21
    69d2:	90 0d       	add	r25, r0
    69d4:	b4 9f       	mul	r27, r20
    69d6:	90 0d       	add	r25, r0
    69d8:	a4 9f       	mul	r26, r20
    69da:	80 0d       	add	r24, r0
    69dc:	91 1d       	adc	r25, r1
    69de:	11 24       	eor	r1, r1
    69e0:	08 95       	ret

000069e2 <__mulshisi3>:
    69e2:	b7 ff       	sbrs	r27, 7
    69e4:	0c 94 e6 34 	jmp	0x69cc	; 0x69cc <__muluhisi3>

000069e8 <__mulohisi3>:
    69e8:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    69ec:	82 1b       	sub	r24, r18
    69ee:	93 0b       	sbc	r25, r19
    69f0:	08 95       	ret

000069f2 <__mulsi3>:
    69f2:	db 01       	movw	r26, r22
    69f4:	8f 93       	push	r24
    69f6:	9f 93       	push	r25
    69f8:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    69fc:	bf 91       	pop	r27
    69fe:	af 91       	pop	r26
    6a00:	a2 9f       	mul	r26, r18
    6a02:	80 0d       	add	r24, r0
    6a04:	91 1d       	adc	r25, r1
    6a06:	a3 9f       	mul	r26, r19
    6a08:	90 0d       	add	r25, r0
    6a0a:	b2 9f       	mul	r27, r18
    6a0c:	90 0d       	add	r25, r0
    6a0e:	11 24       	eor	r1, r1
    6a10:	08 95       	ret

00006a12 <__udivmodhi4>:
    6a12:	aa 1b       	sub	r26, r26
    6a14:	bb 1b       	sub	r27, r27
    6a16:	51 e1       	ldi	r21, 0x11	; 17
    6a18:	07 c0       	rjmp	.+14     	; 0x6a28 <__udivmodhi4_ep>

00006a1a <__udivmodhi4_loop>:
    6a1a:	aa 1f       	adc	r26, r26
    6a1c:	bb 1f       	adc	r27, r27
    6a1e:	a6 17       	cp	r26, r22
    6a20:	b7 07       	cpc	r27, r23
    6a22:	10 f0       	brcs	.+4      	; 0x6a28 <__udivmodhi4_ep>
    6a24:	a6 1b       	sub	r26, r22
    6a26:	b7 0b       	sbc	r27, r23

00006a28 <__udivmodhi4_ep>:
    6a28:	88 1f       	adc	r24, r24
    6a2a:	99 1f       	adc	r25, r25
    6a2c:	5a 95       	dec	r21
    6a2e:	a9 f7       	brne	.-22     	; 0x6a1a <__udivmodhi4_loop>
    6a30:	80 95       	com	r24
    6a32:	90 95       	com	r25
    6a34:	bc 01       	movw	r22, r24
    6a36:	cd 01       	movw	r24, r26
    6a38:	08 95       	ret

00006a3a <__divmodhi4>:
    6a3a:	97 fb       	bst	r25, 7
    6a3c:	07 2e       	mov	r0, r23
    6a3e:	16 f4       	brtc	.+4      	; 0x6a44 <__divmodhi4+0xa>
    6a40:	00 94       	com	r0
    6a42:	07 d0       	rcall	.+14     	; 0x6a52 <__divmodhi4_neg1>
    6a44:	77 fd       	sbrc	r23, 7
    6a46:	09 d0       	rcall	.+18     	; 0x6a5a <__divmodhi4_neg2>
    6a48:	0e 94 09 35 	call	0x6a12	; 0x6a12 <__udivmodhi4>
    6a4c:	07 fc       	sbrc	r0, 7
    6a4e:	05 d0       	rcall	.+10     	; 0x6a5a <__divmodhi4_neg2>
    6a50:	3e f4       	brtc	.+14     	; 0x6a60 <__divmodhi4_exit>

00006a52 <__divmodhi4_neg1>:
    6a52:	90 95       	com	r25
    6a54:	81 95       	neg	r24
    6a56:	9f 4f       	sbci	r25, 0xFF	; 255
    6a58:	08 95       	ret

00006a5a <__divmodhi4_neg2>:
    6a5a:	70 95       	com	r23
    6a5c:	61 95       	neg	r22
    6a5e:	7f 4f       	sbci	r23, 0xFF	; 255

00006a60 <__divmodhi4_exit>:
    6a60:	08 95       	ret

00006a62 <__udivmodsi4>:
    6a62:	a1 e2       	ldi	r26, 0x21	; 33
    6a64:	1a 2e       	mov	r1, r26
    6a66:	aa 1b       	sub	r26, r26
    6a68:	bb 1b       	sub	r27, r27
    6a6a:	fd 01       	movw	r30, r26
    6a6c:	0d c0       	rjmp	.+26     	; 0x6a88 <__udivmodsi4_ep>

00006a6e <__udivmodsi4_loop>:
    6a6e:	aa 1f       	adc	r26, r26
    6a70:	bb 1f       	adc	r27, r27
    6a72:	ee 1f       	adc	r30, r30
    6a74:	ff 1f       	adc	r31, r31
    6a76:	a2 17       	cp	r26, r18
    6a78:	b3 07       	cpc	r27, r19
    6a7a:	e4 07       	cpc	r30, r20
    6a7c:	f5 07       	cpc	r31, r21
    6a7e:	20 f0       	brcs	.+8      	; 0x6a88 <__udivmodsi4_ep>
    6a80:	a2 1b       	sub	r26, r18
    6a82:	b3 0b       	sbc	r27, r19
    6a84:	e4 0b       	sbc	r30, r20
    6a86:	f5 0b       	sbc	r31, r21

00006a88 <__udivmodsi4_ep>:
    6a88:	66 1f       	adc	r22, r22
    6a8a:	77 1f       	adc	r23, r23
    6a8c:	88 1f       	adc	r24, r24
    6a8e:	99 1f       	adc	r25, r25
    6a90:	1a 94       	dec	r1
    6a92:	69 f7       	brne	.-38     	; 0x6a6e <__udivmodsi4_loop>
    6a94:	60 95       	com	r22
    6a96:	70 95       	com	r23
    6a98:	80 95       	com	r24
    6a9a:	90 95       	com	r25
    6a9c:	9b 01       	movw	r18, r22
    6a9e:	ac 01       	movw	r20, r24
    6aa0:	bd 01       	movw	r22, r26
    6aa2:	cf 01       	movw	r24, r30
    6aa4:	08 95       	ret

00006aa6 <__divmodsi4>:
    6aa6:	05 2e       	mov	r0, r21
    6aa8:	97 fb       	bst	r25, 7
    6aaa:	1e f4       	brtc	.+6      	; 0x6ab2 <__divmodsi4+0xc>
    6aac:	00 94       	com	r0
    6aae:	0e 94 c9 35 	call	0x6b92	; 0x6b92 <__negsi2>
    6ab2:	57 fd       	sbrc	r21, 7
    6ab4:	07 d0       	rcall	.+14     	; 0x6ac4 <__divmodsi4_neg2>
    6ab6:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__udivmodsi4>
    6aba:	07 fc       	sbrc	r0, 7
    6abc:	03 d0       	rcall	.+6      	; 0x6ac4 <__divmodsi4_neg2>
    6abe:	4e f4       	brtc	.+18     	; 0x6ad2 <__divmodsi4_exit>
    6ac0:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__negsi2>

00006ac4 <__divmodsi4_neg2>:
    6ac4:	50 95       	com	r21
    6ac6:	40 95       	com	r20
    6ac8:	30 95       	com	r19
    6aca:	21 95       	neg	r18
    6acc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ace:	4f 4f       	sbci	r20, 0xFF	; 255
    6ad0:	5f 4f       	sbci	r21, 0xFF	; 255

00006ad2 <__divmodsi4_exit>:
    6ad2:	08 95       	ret

00006ad4 <__umoddi3>:
    6ad4:	68 94       	set
    6ad6:	01 c0       	rjmp	.+2      	; 0x6ada <__udivdi3_umoddi3>

00006ad8 <__udivdi3>:
    6ad8:	e8 94       	clt

00006ada <__udivdi3_umoddi3>:
    6ada:	8f 92       	push	r8
    6adc:	9f 92       	push	r9
    6ade:	cf 93       	push	r28
    6ae0:	df 93       	push	r29
    6ae2:	0e 94 78 35 	call	0x6af0	; 0x6af0 <__udivmod64>
    6ae6:	df 91       	pop	r29
    6ae8:	cf 91       	pop	r28
    6aea:	9f 90       	pop	r9
    6aec:	8f 90       	pop	r8
    6aee:	08 95       	ret

00006af0 <__udivmod64>:
    6af0:	88 24       	eor	r8, r8
    6af2:	99 24       	eor	r9, r9
    6af4:	f4 01       	movw	r30, r8
    6af6:	e4 01       	movw	r28, r8
    6af8:	b0 e4       	ldi	r27, 0x40	; 64
    6afa:	9f 93       	push	r25
    6afc:	aa 27       	eor	r26, r26
    6afe:	9a 15       	cp	r25, r10
    6b00:	8b 04       	cpc	r8, r11
    6b02:	9c 04       	cpc	r9, r12
    6b04:	ed 05       	cpc	r30, r13
    6b06:	fe 05       	cpc	r31, r14
    6b08:	cf 05       	cpc	r28, r15
    6b0a:	d0 07       	cpc	r29, r16
    6b0c:	a1 07       	cpc	r26, r17
    6b0e:	98 f4       	brcc	.+38     	; 0x6b36 <__udivmod64+0x46>
    6b10:	ad 2f       	mov	r26, r29
    6b12:	dc 2f       	mov	r29, r28
    6b14:	cf 2f       	mov	r28, r31
    6b16:	fe 2f       	mov	r31, r30
    6b18:	e9 2d       	mov	r30, r9
    6b1a:	98 2c       	mov	r9, r8
    6b1c:	89 2e       	mov	r8, r25
    6b1e:	98 2f       	mov	r25, r24
    6b20:	87 2f       	mov	r24, r23
    6b22:	76 2f       	mov	r23, r22
    6b24:	65 2f       	mov	r22, r21
    6b26:	54 2f       	mov	r21, r20
    6b28:	43 2f       	mov	r20, r19
    6b2a:	32 2f       	mov	r19, r18
    6b2c:	22 27       	eor	r18, r18
    6b2e:	b8 50       	subi	r27, 0x08	; 8
    6b30:	31 f7       	brne	.-52     	; 0x6afe <__udivmod64+0xe>
    6b32:	bf 91       	pop	r27
    6b34:	27 c0       	rjmp	.+78     	; 0x6b84 <__udivmod64+0x94>
    6b36:	1b 2e       	mov	r1, r27
    6b38:	bf 91       	pop	r27
    6b3a:	bb 27       	eor	r27, r27
    6b3c:	22 0f       	add	r18, r18
    6b3e:	33 1f       	adc	r19, r19
    6b40:	44 1f       	adc	r20, r20
    6b42:	55 1f       	adc	r21, r21
    6b44:	66 1f       	adc	r22, r22
    6b46:	77 1f       	adc	r23, r23
    6b48:	88 1f       	adc	r24, r24
    6b4a:	99 1f       	adc	r25, r25
    6b4c:	88 1c       	adc	r8, r8
    6b4e:	99 1c       	adc	r9, r9
    6b50:	ee 1f       	adc	r30, r30
    6b52:	ff 1f       	adc	r31, r31
    6b54:	cc 1f       	adc	r28, r28
    6b56:	dd 1f       	adc	r29, r29
    6b58:	aa 1f       	adc	r26, r26
    6b5a:	bb 1f       	adc	r27, r27
    6b5c:	8a 14       	cp	r8, r10
    6b5e:	9b 04       	cpc	r9, r11
    6b60:	ec 05       	cpc	r30, r12
    6b62:	fd 05       	cpc	r31, r13
    6b64:	ce 05       	cpc	r28, r14
    6b66:	df 05       	cpc	r29, r15
    6b68:	a0 07       	cpc	r26, r16
    6b6a:	b1 07       	cpc	r27, r17
    6b6c:	48 f0       	brcs	.+18     	; 0x6b80 <__udivmod64+0x90>
    6b6e:	8a 18       	sub	r8, r10
    6b70:	9b 08       	sbc	r9, r11
    6b72:	ec 09       	sbc	r30, r12
    6b74:	fd 09       	sbc	r31, r13
    6b76:	ce 09       	sbc	r28, r14
    6b78:	df 09       	sbc	r29, r15
    6b7a:	a0 0b       	sbc	r26, r16
    6b7c:	b1 0b       	sbc	r27, r17
    6b7e:	21 60       	ori	r18, 0x01	; 1
    6b80:	1a 94       	dec	r1
    6b82:	e1 f6       	brne	.-72     	; 0x6b3c <__udivmod64+0x4c>
    6b84:	2e f4       	brtc	.+10     	; 0x6b90 <__udivmod64+0xa0>
    6b86:	94 01       	movw	r18, r8
    6b88:	af 01       	movw	r20, r30
    6b8a:	be 01       	movw	r22, r28
    6b8c:	cd 01       	movw	r24, r26
    6b8e:	00 0c       	add	r0, r0
    6b90:	08 95       	ret

00006b92 <__negsi2>:
    6b92:	90 95       	com	r25
    6b94:	80 95       	com	r24
    6b96:	70 95       	com	r23
    6b98:	61 95       	neg	r22
    6b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    6b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    6ba0:	08 95       	ret

00006ba2 <__tablejump2__>:
    6ba2:	ee 0f       	add	r30, r30
    6ba4:	ff 1f       	adc	r31, r31

00006ba6 <__tablejump__>:
    6ba6:	05 90       	lpm	r0, Z+
    6ba8:	f4 91       	lpm	r31, Z
    6baa:	e0 2d       	mov	r30, r0
    6bac:	09 94       	ijmp

00006bae <__umulhisi3>:
    6bae:	a2 9f       	mul	r26, r18
    6bb0:	b0 01       	movw	r22, r0
    6bb2:	b3 9f       	mul	r27, r19
    6bb4:	c0 01       	movw	r24, r0
    6bb6:	a3 9f       	mul	r26, r19
    6bb8:	70 0d       	add	r23, r0
    6bba:	81 1d       	adc	r24, r1
    6bbc:	11 24       	eor	r1, r1
    6bbe:	91 1d       	adc	r25, r1
    6bc0:	b2 9f       	mul	r27, r18
    6bc2:	70 0d       	add	r23, r0
    6bc4:	81 1d       	adc	r24, r1
    6bc6:	11 24       	eor	r1, r1
    6bc8:	91 1d       	adc	r25, r1
    6bca:	08 95       	ret

00006bcc <do_rand>:
    6bcc:	8f 92       	push	r8
    6bce:	9f 92       	push	r9
    6bd0:	af 92       	push	r10
    6bd2:	bf 92       	push	r11
    6bd4:	cf 92       	push	r12
    6bd6:	df 92       	push	r13
    6bd8:	ef 92       	push	r14
    6bda:	ff 92       	push	r15
    6bdc:	cf 93       	push	r28
    6bde:	df 93       	push	r29
    6be0:	ec 01       	movw	r28, r24
    6be2:	68 81       	ld	r22, Y
    6be4:	79 81       	ldd	r23, Y+1	; 0x01
    6be6:	8a 81       	ldd	r24, Y+2	; 0x02
    6be8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bea:	61 15       	cp	r22, r1
    6bec:	71 05       	cpc	r23, r1
    6bee:	81 05       	cpc	r24, r1
    6bf0:	91 05       	cpc	r25, r1
    6bf2:	21 f4       	brne	.+8      	; 0x6bfc <do_rand+0x30>
    6bf4:	64 e2       	ldi	r22, 0x24	; 36
    6bf6:	79 ed       	ldi	r23, 0xD9	; 217
    6bf8:	8b e5       	ldi	r24, 0x5B	; 91
    6bfa:	97 e0       	ldi	r25, 0x07	; 7
    6bfc:	2d e1       	ldi	r18, 0x1D	; 29
    6bfe:	33 ef       	ldi	r19, 0xF3	; 243
    6c00:	41 e0       	ldi	r20, 0x01	; 1
    6c02:	50 e0       	ldi	r21, 0x00	; 0
    6c04:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <__divmodsi4>
    6c08:	49 01       	movw	r8, r18
    6c0a:	5a 01       	movw	r10, r20
    6c0c:	9b 01       	movw	r18, r22
    6c0e:	ac 01       	movw	r20, r24
    6c10:	a7 ea       	ldi	r26, 0xA7	; 167
    6c12:	b1 e4       	ldi	r27, 0x41	; 65
    6c14:	0e 94 e6 34 	call	0x69cc	; 0x69cc <__muluhisi3>
    6c18:	6b 01       	movw	r12, r22
    6c1a:	7c 01       	movw	r14, r24
    6c1c:	ac ee       	ldi	r26, 0xEC	; 236
    6c1e:	b4 ef       	ldi	r27, 0xF4	; 244
    6c20:	a5 01       	movw	r20, r10
    6c22:	94 01       	movw	r18, r8
    6c24:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__mulohisi3>
    6c28:	dc 01       	movw	r26, r24
    6c2a:	cb 01       	movw	r24, r22
    6c2c:	8c 0d       	add	r24, r12
    6c2e:	9d 1d       	adc	r25, r13
    6c30:	ae 1d       	adc	r26, r14
    6c32:	bf 1d       	adc	r27, r15
    6c34:	b7 ff       	sbrs	r27, 7
    6c36:	03 c0       	rjmp	.+6      	; 0x6c3e <do_rand+0x72>
    6c38:	01 97       	sbiw	r24, 0x01	; 1
    6c3a:	a1 09       	sbc	r26, r1
    6c3c:	b0 48       	sbci	r27, 0x80	; 128
    6c3e:	88 83       	st	Y, r24
    6c40:	99 83       	std	Y+1, r25	; 0x01
    6c42:	aa 83       	std	Y+2, r26	; 0x02
    6c44:	bb 83       	std	Y+3, r27	; 0x03
    6c46:	9f 77       	andi	r25, 0x7F	; 127
    6c48:	df 91       	pop	r29
    6c4a:	cf 91       	pop	r28
    6c4c:	ff 90       	pop	r15
    6c4e:	ef 90       	pop	r14
    6c50:	df 90       	pop	r13
    6c52:	cf 90       	pop	r12
    6c54:	bf 90       	pop	r11
    6c56:	af 90       	pop	r10
    6c58:	9f 90       	pop	r9
    6c5a:	8f 90       	pop	r8
    6c5c:	08 95       	ret

00006c5e <rand_r>:
    6c5e:	0c 94 e6 35 	jmp	0x6bcc	; 0x6bcc <do_rand>

00006c62 <rand>:
    6c62:	80 e0       	ldi	r24, 0x00	; 0
    6c64:	92 e0       	ldi	r25, 0x02	; 2
    6c66:	0c 94 e6 35 	jmp	0x6bcc	; 0x6bcc <do_rand>

00006c6a <srand>:
    6c6a:	a0 e0       	ldi	r26, 0x00	; 0
    6c6c:	b0 e0       	ldi	r27, 0x00	; 0
    6c6e:	80 93 00 02 	sts	0x0200, r24
    6c72:	90 93 01 02 	sts	0x0201, r25
    6c76:	a0 93 02 02 	sts	0x0202, r26
    6c7a:	b0 93 03 02 	sts	0x0203, r27
    6c7e:	08 95       	ret

00006c80 <atoi>:
    6c80:	fc 01       	movw	r30, r24
    6c82:	88 27       	eor	r24, r24
    6c84:	99 27       	eor	r25, r25
    6c86:	e8 94       	clt
    6c88:	21 91       	ld	r18, Z+
    6c8a:	20 32       	cpi	r18, 0x20	; 32
    6c8c:	e9 f3       	breq	.-6      	; 0x6c88 <atoi+0x8>
    6c8e:	29 30       	cpi	r18, 0x09	; 9
    6c90:	10 f0       	brcs	.+4      	; 0x6c96 <atoi+0x16>
    6c92:	2e 30       	cpi	r18, 0x0E	; 14
    6c94:	c8 f3       	brcs	.-14     	; 0x6c88 <atoi+0x8>
    6c96:	2b 32       	cpi	r18, 0x2B	; 43
    6c98:	41 f0       	breq	.+16     	; 0x6caa <atoi+0x2a>
    6c9a:	2d 32       	cpi	r18, 0x2D	; 45
    6c9c:	39 f4       	brne	.+14     	; 0x6cac <atoi+0x2c>
    6c9e:	68 94       	set
    6ca0:	04 c0       	rjmp	.+8      	; 0x6caa <atoi+0x2a>
    6ca2:	0e 94 81 36 	call	0x6d02	; 0x6d02 <__mulhi_const_10>
    6ca6:	82 0f       	add	r24, r18
    6ca8:	91 1d       	adc	r25, r1
    6caa:	21 91       	ld	r18, Z+
    6cac:	20 53       	subi	r18, 0x30	; 48
    6cae:	2a 30       	cpi	r18, 0x0A	; 10
    6cb0:	c0 f3       	brcs	.-16     	; 0x6ca2 <atoi+0x22>
    6cb2:	1e f4       	brtc	.+6      	; 0x6cba <atoi+0x3a>
    6cb4:	90 95       	com	r25
    6cb6:	81 95       	neg	r24
    6cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cba:	08 95       	ret

00006cbc <strchr_P>:
    6cbc:	fc 01       	movw	r30, r24
    6cbe:	05 90       	lpm	r0, Z+
    6cc0:	06 16       	cp	r0, r22
    6cc2:	21 f0       	breq	.+8      	; 0x6ccc <strchr_P+0x10>
    6cc4:	00 20       	and	r0, r0
    6cc6:	d9 f7       	brne	.-10     	; 0x6cbe <strchr_P+0x2>
    6cc8:	c0 01       	movw	r24, r0
    6cca:	08 95       	ret
    6ccc:	31 97       	sbiw	r30, 0x01	; 1
    6cce:	cf 01       	movw	r24, r30
    6cd0:	08 95       	ret

00006cd2 <memcpy>:
    6cd2:	fb 01       	movw	r30, r22
    6cd4:	dc 01       	movw	r26, r24
    6cd6:	02 c0       	rjmp	.+4      	; 0x6cdc <memcpy+0xa>
    6cd8:	01 90       	ld	r0, Z+
    6cda:	0d 92       	st	X+, r0
    6cdc:	41 50       	subi	r20, 0x01	; 1
    6cde:	50 40       	sbci	r21, 0x00	; 0
    6ce0:	d8 f7       	brcc	.-10     	; 0x6cd8 <memcpy+0x6>
    6ce2:	08 95       	ret

00006ce4 <strncpy>:
    6ce4:	fb 01       	movw	r30, r22
    6ce6:	dc 01       	movw	r26, r24
    6ce8:	41 50       	subi	r20, 0x01	; 1
    6cea:	50 40       	sbci	r21, 0x00	; 0
    6cec:	48 f0       	brcs	.+18     	; 0x6d00 <strncpy+0x1c>
    6cee:	01 90       	ld	r0, Z+
    6cf0:	0d 92       	st	X+, r0
    6cf2:	00 20       	and	r0, r0
    6cf4:	c9 f7       	brne	.-14     	; 0x6ce8 <strncpy+0x4>
    6cf6:	01 c0       	rjmp	.+2      	; 0x6cfa <strncpy+0x16>
    6cf8:	1d 92       	st	X+, r1
    6cfa:	41 50       	subi	r20, 0x01	; 1
    6cfc:	50 40       	sbci	r21, 0x00	; 0
    6cfe:	e0 f7       	brcc	.-8      	; 0x6cf8 <strncpy+0x14>
    6d00:	08 95       	ret

00006d02 <__mulhi_const_10>:
    6d02:	7a e0       	ldi	r23, 0x0A	; 10
    6d04:	97 9f       	mul	r25, r23
    6d06:	90 2d       	mov	r25, r0
    6d08:	87 9f       	mul	r24, r23
    6d0a:	80 2d       	mov	r24, r0
    6d0c:	91 0d       	add	r25, r1
    6d0e:	11 24       	eor	r1, r1
    6d10:	08 95       	ret

00006d12 <fdevopen>:
    6d12:	0f 93       	push	r16
    6d14:	1f 93       	push	r17
    6d16:	cf 93       	push	r28
    6d18:	df 93       	push	r29
    6d1a:	00 97       	sbiw	r24, 0x00	; 0
    6d1c:	31 f4       	brne	.+12     	; 0x6d2a <fdevopen+0x18>
    6d1e:	61 15       	cp	r22, r1
    6d20:	71 05       	cpc	r23, r1
    6d22:	19 f4       	brne	.+6      	; 0x6d2a <fdevopen+0x18>
    6d24:	80 e0       	ldi	r24, 0x00	; 0
    6d26:	90 e0       	ldi	r25, 0x00	; 0
    6d28:	3a c0       	rjmp	.+116    	; 0x6d9e <fdevopen+0x8c>
    6d2a:	8b 01       	movw	r16, r22
    6d2c:	ec 01       	movw	r28, r24
    6d2e:	6e e0       	ldi	r22, 0x0E	; 14
    6d30:	70 e0       	ldi	r23, 0x00	; 0
    6d32:	81 e0       	ldi	r24, 0x01	; 1
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	0e 94 fa 37 	call	0x6ff4	; 0x6ff4 <calloc>
    6d3a:	fc 01       	movw	r30, r24
    6d3c:	00 97       	sbiw	r24, 0x00	; 0
    6d3e:	91 f3       	breq	.-28     	; 0x6d24 <fdevopen+0x12>
    6d40:	80 e8       	ldi	r24, 0x80	; 128
    6d42:	83 83       	std	Z+3, r24	; 0x03
    6d44:	01 15       	cp	r16, r1
    6d46:	11 05       	cpc	r17, r1
    6d48:	71 f0       	breq	.+28     	; 0x6d66 <fdevopen+0x54>
    6d4a:	13 87       	std	Z+11, r17	; 0x0b
    6d4c:	02 87       	std	Z+10, r16	; 0x0a
    6d4e:	81 e8       	ldi	r24, 0x81	; 129
    6d50:	83 83       	std	Z+3, r24	; 0x03
    6d52:	80 91 26 0d 	lds	r24, 0x0D26
    6d56:	90 91 27 0d 	lds	r25, 0x0D27
    6d5a:	89 2b       	or	r24, r25
    6d5c:	21 f4       	brne	.+8      	; 0x6d66 <fdevopen+0x54>
    6d5e:	f0 93 27 0d 	sts	0x0D27, r31
    6d62:	e0 93 26 0d 	sts	0x0D26, r30
    6d66:	20 97       	sbiw	r28, 0x00	; 0
    6d68:	c9 f0       	breq	.+50     	; 0x6d9c <fdevopen+0x8a>
    6d6a:	d1 87       	std	Z+9, r29	; 0x09
    6d6c:	c0 87       	std	Z+8, r28	; 0x08
    6d6e:	83 81       	ldd	r24, Z+3	; 0x03
    6d70:	82 60       	ori	r24, 0x02	; 2
    6d72:	83 83       	std	Z+3, r24	; 0x03
    6d74:	80 91 28 0d 	lds	r24, 0x0D28
    6d78:	90 91 29 0d 	lds	r25, 0x0D29
    6d7c:	89 2b       	or	r24, r25
    6d7e:	71 f4       	brne	.+28     	; 0x6d9c <fdevopen+0x8a>
    6d80:	f0 93 29 0d 	sts	0x0D29, r31
    6d84:	e0 93 28 0d 	sts	0x0D28, r30
    6d88:	80 91 2a 0d 	lds	r24, 0x0D2A
    6d8c:	90 91 2b 0d 	lds	r25, 0x0D2B
    6d90:	89 2b       	or	r24, r25
    6d92:	21 f4       	brne	.+8      	; 0x6d9c <fdevopen+0x8a>
    6d94:	f0 93 2b 0d 	sts	0x0D2B, r31
    6d98:	e0 93 2a 0d 	sts	0x0D2A, r30
    6d9c:	cf 01       	movw	r24, r30
    6d9e:	df 91       	pop	r29
    6da0:	cf 91       	pop	r28
    6da2:	1f 91       	pop	r17
    6da4:	0f 91       	pop	r16
    6da6:	08 95       	ret

00006da8 <fputc>:
    6da8:	0f 93       	push	r16
    6daa:	1f 93       	push	r17
    6dac:	cf 93       	push	r28
    6dae:	df 93       	push	r29
    6db0:	fb 01       	movw	r30, r22
    6db2:	23 81       	ldd	r18, Z+3	; 0x03
    6db4:	21 fd       	sbrc	r18, 1
    6db6:	03 c0       	rjmp	.+6      	; 0x6dbe <fputc+0x16>
    6db8:	8f ef       	ldi	r24, 0xFF	; 255
    6dba:	9f ef       	ldi	r25, 0xFF	; 255
    6dbc:	28 c0       	rjmp	.+80     	; 0x6e0e <fputc+0x66>
    6dbe:	22 ff       	sbrs	r18, 2
    6dc0:	16 c0       	rjmp	.+44     	; 0x6dee <fputc+0x46>
    6dc2:	46 81       	ldd	r20, Z+6	; 0x06
    6dc4:	57 81       	ldd	r21, Z+7	; 0x07
    6dc6:	24 81       	ldd	r18, Z+4	; 0x04
    6dc8:	35 81       	ldd	r19, Z+5	; 0x05
    6dca:	42 17       	cp	r20, r18
    6dcc:	53 07       	cpc	r21, r19
    6dce:	44 f4       	brge	.+16     	; 0x6de0 <fputc+0x38>
    6dd0:	a0 81       	ld	r26, Z
    6dd2:	b1 81       	ldd	r27, Z+1	; 0x01
    6dd4:	9d 01       	movw	r18, r26
    6dd6:	2f 5f       	subi	r18, 0xFF	; 255
    6dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    6dda:	31 83       	std	Z+1, r19	; 0x01
    6ddc:	20 83       	st	Z, r18
    6dde:	8c 93       	st	X, r24
    6de0:	26 81       	ldd	r18, Z+6	; 0x06
    6de2:	37 81       	ldd	r19, Z+7	; 0x07
    6de4:	2f 5f       	subi	r18, 0xFF	; 255
    6de6:	3f 4f       	sbci	r19, 0xFF	; 255
    6de8:	37 83       	std	Z+7, r19	; 0x07
    6dea:	26 83       	std	Z+6, r18	; 0x06
    6dec:	10 c0       	rjmp	.+32     	; 0x6e0e <fputc+0x66>
    6dee:	eb 01       	movw	r28, r22
    6df0:	09 2f       	mov	r16, r25
    6df2:	18 2f       	mov	r17, r24
    6df4:	00 84       	ldd	r0, Z+8	; 0x08
    6df6:	f1 85       	ldd	r31, Z+9	; 0x09
    6df8:	e0 2d       	mov	r30, r0
    6dfa:	09 95       	icall
    6dfc:	89 2b       	or	r24, r25
    6dfe:	e1 f6       	brne	.-72     	; 0x6db8 <fputc+0x10>
    6e00:	8e 81       	ldd	r24, Y+6	; 0x06
    6e02:	9f 81       	ldd	r25, Y+7	; 0x07
    6e04:	01 96       	adiw	r24, 0x01	; 1
    6e06:	9f 83       	std	Y+7, r25	; 0x07
    6e08:	8e 83       	std	Y+6, r24	; 0x06
    6e0a:	81 2f       	mov	r24, r17
    6e0c:	90 2f       	mov	r25, r16
    6e0e:	df 91       	pop	r29
    6e10:	cf 91       	pop	r28
    6e12:	1f 91       	pop	r17
    6e14:	0f 91       	pop	r16
    6e16:	08 95       	ret

00006e18 <printf>:
    6e18:	cf 93       	push	r28
    6e1a:	df 93       	push	r29
    6e1c:	cd b7       	in	r28, 0x3d	; 61
    6e1e:	de b7       	in	r29, 0x3e	; 62
    6e20:	ae 01       	movw	r20, r28
    6e22:	4b 5f       	subi	r20, 0xFB	; 251
    6e24:	5f 4f       	sbci	r21, 0xFF	; 255
    6e26:	fa 01       	movw	r30, r20
    6e28:	61 91       	ld	r22, Z+
    6e2a:	71 91       	ld	r23, Z+
    6e2c:	af 01       	movw	r20, r30
    6e2e:	80 91 28 0d 	lds	r24, 0x0D28
    6e32:	90 91 29 0d 	lds	r25, 0x0D29
    6e36:	0e 94 9f 33 	call	0x673e	; 0x673e <vfprintf>
    6e3a:	df 91       	pop	r29
    6e3c:	cf 91       	pop	r28
    6e3e:	08 95       	ret

00006e40 <putchar>:
    6e40:	60 91 28 0d 	lds	r22, 0x0D28
    6e44:	70 91 29 0d 	lds	r23, 0x0D29
    6e48:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <fputc>

00006e4c <puts>:
    6e4c:	0f 93       	push	r16
    6e4e:	1f 93       	push	r17
    6e50:	cf 93       	push	r28
    6e52:	df 93       	push	r29
    6e54:	e0 91 28 0d 	lds	r30, 0x0D28
    6e58:	f0 91 29 0d 	lds	r31, 0x0D29
    6e5c:	23 81       	ldd	r18, Z+3	; 0x03
    6e5e:	21 ff       	sbrs	r18, 1
    6e60:	1b c0       	rjmp	.+54     	; 0x6e98 <puts+0x4c>
    6e62:	8c 01       	movw	r16, r24
    6e64:	d0 e0       	ldi	r29, 0x00	; 0
    6e66:	c0 e0       	ldi	r28, 0x00	; 0
    6e68:	f8 01       	movw	r30, r16
    6e6a:	81 91       	ld	r24, Z+
    6e6c:	8f 01       	movw	r16, r30
    6e6e:	60 91 28 0d 	lds	r22, 0x0D28
    6e72:	70 91 29 0d 	lds	r23, 0x0D29
    6e76:	db 01       	movw	r26, r22
    6e78:	18 96       	adiw	r26, 0x08	; 8
    6e7a:	ed 91       	ld	r30, X+
    6e7c:	fc 91       	ld	r31, X
    6e7e:	19 97       	sbiw	r26, 0x09	; 9
    6e80:	88 23       	and	r24, r24
    6e82:	31 f0       	breq	.+12     	; 0x6e90 <puts+0x44>
    6e84:	09 95       	icall
    6e86:	89 2b       	or	r24, r25
    6e88:	79 f3       	breq	.-34     	; 0x6e68 <puts+0x1c>
    6e8a:	df ef       	ldi	r29, 0xFF	; 255
    6e8c:	cf ef       	ldi	r28, 0xFF	; 255
    6e8e:	ec cf       	rjmp	.-40     	; 0x6e68 <puts+0x1c>
    6e90:	8a e0       	ldi	r24, 0x0A	; 10
    6e92:	09 95       	icall
    6e94:	89 2b       	or	r24, r25
    6e96:	19 f0       	breq	.+6      	; 0x6e9e <puts+0x52>
    6e98:	8f ef       	ldi	r24, 0xFF	; 255
    6e9a:	9f ef       	ldi	r25, 0xFF	; 255
    6e9c:	02 c0       	rjmp	.+4      	; 0x6ea2 <puts+0x56>
    6e9e:	8d 2f       	mov	r24, r29
    6ea0:	9c 2f       	mov	r25, r28
    6ea2:	df 91       	pop	r29
    6ea4:	cf 91       	pop	r28
    6ea6:	1f 91       	pop	r17
    6ea8:	0f 91       	pop	r16
    6eaa:	08 95       	ret

00006eac <sprintf>:
    6eac:	0f 93       	push	r16
    6eae:	1f 93       	push	r17
    6eb0:	cf 93       	push	r28
    6eb2:	df 93       	push	r29
    6eb4:	cd b7       	in	r28, 0x3d	; 61
    6eb6:	de b7       	in	r29, 0x3e	; 62
    6eb8:	2e 97       	sbiw	r28, 0x0e	; 14
    6eba:	0f b6       	in	r0, 0x3f	; 63
    6ebc:	f8 94       	cli
    6ebe:	de bf       	out	0x3e, r29	; 62
    6ec0:	0f be       	out	0x3f, r0	; 63
    6ec2:	cd bf       	out	0x3d, r28	; 61
    6ec4:	0d 89       	ldd	r16, Y+21	; 0x15
    6ec6:	1e 89       	ldd	r17, Y+22	; 0x16
    6ec8:	86 e0       	ldi	r24, 0x06	; 6
    6eca:	8c 83       	std	Y+4, r24	; 0x04
    6ecc:	1a 83       	std	Y+2, r17	; 0x02
    6ece:	09 83       	std	Y+1, r16	; 0x01
    6ed0:	8f ef       	ldi	r24, 0xFF	; 255
    6ed2:	9f e7       	ldi	r25, 0x7F	; 127
    6ed4:	9e 83       	std	Y+6, r25	; 0x06
    6ed6:	8d 83       	std	Y+5, r24	; 0x05
    6ed8:	ae 01       	movw	r20, r28
    6eda:	47 5e       	subi	r20, 0xE7	; 231
    6edc:	5f 4f       	sbci	r21, 0xFF	; 255
    6ede:	6f 89       	ldd	r22, Y+23	; 0x17
    6ee0:	78 8d       	ldd	r23, Y+24	; 0x18
    6ee2:	ce 01       	movw	r24, r28
    6ee4:	01 96       	adiw	r24, 0x01	; 1
    6ee6:	0e 94 9f 33 	call	0x673e	; 0x673e <vfprintf>
    6eea:	2f 81       	ldd	r18, Y+7	; 0x07
    6eec:	38 85       	ldd	r19, Y+8	; 0x08
    6eee:	f8 01       	movw	r30, r16
    6ef0:	e2 0f       	add	r30, r18
    6ef2:	f3 1f       	adc	r31, r19
    6ef4:	10 82       	st	Z, r1
    6ef6:	2e 96       	adiw	r28, 0x0e	; 14
    6ef8:	0f b6       	in	r0, 0x3f	; 63
    6efa:	f8 94       	cli
    6efc:	de bf       	out	0x3e, r29	; 62
    6efe:	0f be       	out	0x3f, r0	; 63
    6f00:	cd bf       	out	0x3d, r28	; 61
    6f02:	df 91       	pop	r29
    6f04:	cf 91       	pop	r28
    6f06:	1f 91       	pop	r17
    6f08:	0f 91       	pop	r16
    6f0a:	08 95       	ret

00006f0c <__ultoa_invert>:
    6f0c:	fa 01       	movw	r30, r20
    6f0e:	aa 27       	eor	r26, r26
    6f10:	28 30       	cpi	r18, 0x08	; 8
    6f12:	51 f1       	breq	.+84     	; 0x6f68 <__ultoa_invert+0x5c>
    6f14:	20 31       	cpi	r18, 0x10	; 16
    6f16:	81 f1       	breq	.+96     	; 0x6f78 <__ultoa_invert+0x6c>
    6f18:	e8 94       	clt
    6f1a:	6f 93       	push	r22
    6f1c:	6e 7f       	andi	r22, 0xFE	; 254
    6f1e:	6e 5f       	subi	r22, 0xFE	; 254
    6f20:	7f 4f       	sbci	r23, 0xFF	; 255
    6f22:	8f 4f       	sbci	r24, 0xFF	; 255
    6f24:	9f 4f       	sbci	r25, 0xFF	; 255
    6f26:	af 4f       	sbci	r26, 0xFF	; 255
    6f28:	b1 e0       	ldi	r27, 0x01	; 1
    6f2a:	3e d0       	rcall	.+124    	; 0x6fa8 <__ultoa_invert+0x9c>
    6f2c:	b4 e0       	ldi	r27, 0x04	; 4
    6f2e:	3c d0       	rcall	.+120    	; 0x6fa8 <__ultoa_invert+0x9c>
    6f30:	67 0f       	add	r22, r23
    6f32:	78 1f       	adc	r23, r24
    6f34:	89 1f       	adc	r24, r25
    6f36:	9a 1f       	adc	r25, r26
    6f38:	a1 1d       	adc	r26, r1
    6f3a:	68 0f       	add	r22, r24
    6f3c:	79 1f       	adc	r23, r25
    6f3e:	8a 1f       	adc	r24, r26
    6f40:	91 1d       	adc	r25, r1
    6f42:	a1 1d       	adc	r26, r1
    6f44:	6a 0f       	add	r22, r26
    6f46:	71 1d       	adc	r23, r1
    6f48:	81 1d       	adc	r24, r1
    6f4a:	91 1d       	adc	r25, r1
    6f4c:	a1 1d       	adc	r26, r1
    6f4e:	20 d0       	rcall	.+64     	; 0x6f90 <__ultoa_invert+0x84>
    6f50:	09 f4       	brne	.+2      	; 0x6f54 <__ultoa_invert+0x48>
    6f52:	68 94       	set
    6f54:	3f 91       	pop	r19
    6f56:	2a e0       	ldi	r18, 0x0A	; 10
    6f58:	26 9f       	mul	r18, r22
    6f5a:	11 24       	eor	r1, r1
    6f5c:	30 19       	sub	r19, r0
    6f5e:	30 5d       	subi	r19, 0xD0	; 208
    6f60:	31 93       	st	Z+, r19
    6f62:	de f6       	brtc	.-74     	; 0x6f1a <__ultoa_invert+0xe>
    6f64:	cf 01       	movw	r24, r30
    6f66:	08 95       	ret
    6f68:	46 2f       	mov	r20, r22
    6f6a:	47 70       	andi	r20, 0x07	; 7
    6f6c:	40 5d       	subi	r20, 0xD0	; 208
    6f6e:	41 93       	st	Z+, r20
    6f70:	b3 e0       	ldi	r27, 0x03	; 3
    6f72:	0f d0       	rcall	.+30     	; 0x6f92 <__ultoa_invert+0x86>
    6f74:	c9 f7       	brne	.-14     	; 0x6f68 <__ultoa_invert+0x5c>
    6f76:	f6 cf       	rjmp	.-20     	; 0x6f64 <__ultoa_invert+0x58>
    6f78:	46 2f       	mov	r20, r22
    6f7a:	4f 70       	andi	r20, 0x0F	; 15
    6f7c:	40 5d       	subi	r20, 0xD0	; 208
    6f7e:	4a 33       	cpi	r20, 0x3A	; 58
    6f80:	18 f0       	brcs	.+6      	; 0x6f88 <__ultoa_invert+0x7c>
    6f82:	49 5d       	subi	r20, 0xD9	; 217
    6f84:	31 fd       	sbrc	r19, 1
    6f86:	40 52       	subi	r20, 0x20	; 32
    6f88:	41 93       	st	Z+, r20
    6f8a:	02 d0       	rcall	.+4      	; 0x6f90 <__ultoa_invert+0x84>
    6f8c:	a9 f7       	brne	.-22     	; 0x6f78 <__ultoa_invert+0x6c>
    6f8e:	ea cf       	rjmp	.-44     	; 0x6f64 <__ultoa_invert+0x58>
    6f90:	b4 e0       	ldi	r27, 0x04	; 4
    6f92:	a6 95       	lsr	r26
    6f94:	97 95       	ror	r25
    6f96:	87 95       	ror	r24
    6f98:	77 95       	ror	r23
    6f9a:	67 95       	ror	r22
    6f9c:	ba 95       	dec	r27
    6f9e:	c9 f7       	brne	.-14     	; 0x6f92 <__ultoa_invert+0x86>
    6fa0:	00 97       	sbiw	r24, 0x00	; 0
    6fa2:	61 05       	cpc	r22, r1
    6fa4:	71 05       	cpc	r23, r1
    6fa6:	08 95       	ret
    6fa8:	9b 01       	movw	r18, r22
    6faa:	ac 01       	movw	r20, r24
    6fac:	0a 2e       	mov	r0, r26
    6fae:	06 94       	lsr	r0
    6fb0:	57 95       	ror	r21
    6fb2:	47 95       	ror	r20
    6fb4:	37 95       	ror	r19
    6fb6:	27 95       	ror	r18
    6fb8:	ba 95       	dec	r27
    6fba:	c9 f7       	brne	.-14     	; 0x6fae <__ultoa_invert+0xa2>
    6fbc:	62 0f       	add	r22, r18
    6fbe:	73 1f       	adc	r23, r19
    6fc0:	84 1f       	adc	r24, r20
    6fc2:	95 1f       	adc	r25, r21
    6fc4:	a0 1d       	adc	r26, r0
    6fc6:	08 95       	ret

00006fc8 <__eerd_byte_m128rfa1>:
    6fc8:	f9 99       	sbic	0x1f, 1	; 31
    6fca:	fe cf       	rjmp	.-4      	; 0x6fc8 <__eerd_byte_m128rfa1>
    6fcc:	92 bd       	out	0x22, r25	; 34
    6fce:	81 bd       	out	0x21, r24	; 33
    6fd0:	f8 9a       	sbi	0x1f, 0	; 31
    6fd2:	99 27       	eor	r25, r25
    6fd4:	80 b5       	in	r24, 0x20	; 32
    6fd6:	08 95       	ret

00006fd8 <__eewr_byte_m128rfa1>:
    6fd8:	26 2f       	mov	r18, r22

00006fda <__eewr_r18_m128rfa1>:
    6fda:	f9 99       	sbic	0x1f, 1	; 31
    6fdc:	fe cf       	rjmp	.-4      	; 0x6fda <__eewr_r18_m128rfa1>
    6fde:	1f ba       	out	0x1f, r1	; 31
    6fe0:	92 bd       	out	0x22, r25	; 34
    6fe2:	81 bd       	out	0x21, r24	; 33
    6fe4:	20 bd       	out	0x20, r18	; 32
    6fe6:	0f b6       	in	r0, 0x3f	; 63
    6fe8:	f8 94       	cli
    6fea:	fa 9a       	sbi	0x1f, 2	; 31
    6fec:	f9 9a       	sbi	0x1f, 1	; 31
    6fee:	0f be       	out	0x3f, r0	; 63
    6ff0:	01 96       	adiw	r24, 0x01	; 1
    6ff2:	08 95       	ret

00006ff4 <calloc>:
    6ff4:	0f 93       	push	r16
    6ff6:	1f 93       	push	r17
    6ff8:	cf 93       	push	r28
    6ffa:	df 93       	push	r29
    6ffc:	86 9f       	mul	r24, r22
    6ffe:	80 01       	movw	r16, r0
    7000:	87 9f       	mul	r24, r23
    7002:	10 0d       	add	r17, r0
    7004:	96 9f       	mul	r25, r22
    7006:	10 0d       	add	r17, r0
    7008:	11 24       	eor	r1, r1
    700a:	c8 01       	movw	r24, r16
    700c:	0e 94 16 38 	call	0x702c	; 0x702c <malloc>
    7010:	ec 01       	movw	r28, r24
    7012:	00 97       	sbiw	r24, 0x00	; 0
    7014:	29 f0       	breq	.+10     	; 0x7020 <calloc+0x2c>
    7016:	a8 01       	movw	r20, r16
    7018:	60 e0       	ldi	r22, 0x00	; 0
    701a:	70 e0       	ldi	r23, 0x00	; 0
    701c:	0e 94 43 39 	call	0x7286	; 0x7286 <memset>
    7020:	ce 01       	movw	r24, r28
    7022:	df 91       	pop	r29
    7024:	cf 91       	pop	r28
    7026:	1f 91       	pop	r17
    7028:	0f 91       	pop	r16
    702a:	08 95       	ret

0000702c <malloc>:
    702c:	cf 93       	push	r28
    702e:	df 93       	push	r29
    7030:	82 30       	cpi	r24, 0x02	; 2
    7032:	91 05       	cpc	r25, r1
    7034:	10 f4       	brcc	.+4      	; 0x703a <malloc+0xe>
    7036:	82 e0       	ldi	r24, 0x02	; 2
    7038:	90 e0       	ldi	r25, 0x00	; 0
    703a:	e0 91 2e 0d 	lds	r30, 0x0D2E
    703e:	f0 91 2f 0d 	lds	r31, 0x0D2F
    7042:	20 e0       	ldi	r18, 0x00	; 0
    7044:	30 e0       	ldi	r19, 0x00	; 0
    7046:	c0 e0       	ldi	r28, 0x00	; 0
    7048:	d0 e0       	ldi	r29, 0x00	; 0
    704a:	30 97       	sbiw	r30, 0x00	; 0
    704c:	11 f1       	breq	.+68     	; 0x7092 <malloc+0x66>
    704e:	40 81       	ld	r20, Z
    7050:	51 81       	ldd	r21, Z+1	; 0x01
    7052:	48 17       	cp	r20, r24
    7054:	59 07       	cpc	r21, r25
    7056:	c0 f0       	brcs	.+48     	; 0x7088 <malloc+0x5c>
    7058:	48 17       	cp	r20, r24
    705a:	59 07       	cpc	r21, r25
    705c:	61 f4       	brne	.+24     	; 0x7076 <malloc+0x4a>
    705e:	82 81       	ldd	r24, Z+2	; 0x02
    7060:	93 81       	ldd	r25, Z+3	; 0x03
    7062:	20 97       	sbiw	r28, 0x00	; 0
    7064:	19 f0       	breq	.+6      	; 0x706c <malloc+0x40>
    7066:	9b 83       	std	Y+3, r25	; 0x03
    7068:	8a 83       	std	Y+2, r24	; 0x02
    706a:	2b c0       	rjmp	.+86     	; 0x70c2 <malloc+0x96>
    706c:	90 93 2f 0d 	sts	0x0D2F, r25
    7070:	80 93 2e 0d 	sts	0x0D2E, r24
    7074:	26 c0       	rjmp	.+76     	; 0x70c2 <malloc+0x96>
    7076:	21 15       	cp	r18, r1
    7078:	31 05       	cpc	r19, r1
    707a:	19 f0       	breq	.+6      	; 0x7082 <malloc+0x56>
    707c:	42 17       	cp	r20, r18
    707e:	53 07       	cpc	r21, r19
    7080:	18 f4       	brcc	.+6      	; 0x7088 <malloc+0x5c>
    7082:	9a 01       	movw	r18, r20
    7084:	be 01       	movw	r22, r28
    7086:	df 01       	movw	r26, r30
    7088:	ef 01       	movw	r28, r30
    708a:	02 80       	ldd	r0, Z+2	; 0x02
    708c:	f3 81       	ldd	r31, Z+3	; 0x03
    708e:	e0 2d       	mov	r30, r0
    7090:	dc cf       	rjmp	.-72     	; 0x704a <malloc+0x1e>
    7092:	21 15       	cp	r18, r1
    7094:	31 05       	cpc	r19, r1
    7096:	09 f1       	breq	.+66     	; 0x70da <malloc+0xae>
    7098:	28 1b       	sub	r18, r24
    709a:	39 0b       	sbc	r19, r25
    709c:	24 30       	cpi	r18, 0x04	; 4
    709e:	31 05       	cpc	r19, r1
    70a0:	90 f4       	brcc	.+36     	; 0x70c6 <malloc+0x9a>
    70a2:	12 96       	adiw	r26, 0x02	; 2
    70a4:	8d 91       	ld	r24, X+
    70a6:	9c 91       	ld	r25, X
    70a8:	13 97       	sbiw	r26, 0x03	; 3
    70aa:	61 15       	cp	r22, r1
    70ac:	71 05       	cpc	r23, r1
    70ae:	21 f0       	breq	.+8      	; 0x70b8 <malloc+0x8c>
    70b0:	fb 01       	movw	r30, r22
    70b2:	93 83       	std	Z+3, r25	; 0x03
    70b4:	82 83       	std	Z+2, r24	; 0x02
    70b6:	04 c0       	rjmp	.+8      	; 0x70c0 <malloc+0x94>
    70b8:	90 93 2f 0d 	sts	0x0D2F, r25
    70bc:	80 93 2e 0d 	sts	0x0D2E, r24
    70c0:	fd 01       	movw	r30, r26
    70c2:	32 96       	adiw	r30, 0x02	; 2
    70c4:	44 c0       	rjmp	.+136    	; 0x714e <malloc+0x122>
    70c6:	fd 01       	movw	r30, r26
    70c8:	e2 0f       	add	r30, r18
    70ca:	f3 1f       	adc	r31, r19
    70cc:	81 93       	st	Z+, r24
    70ce:	91 93       	st	Z+, r25
    70d0:	22 50       	subi	r18, 0x02	; 2
    70d2:	31 09       	sbc	r19, r1
    70d4:	2d 93       	st	X+, r18
    70d6:	3c 93       	st	X, r19
    70d8:	3a c0       	rjmp	.+116    	; 0x714e <malloc+0x122>
    70da:	20 91 2c 0d 	lds	r18, 0x0D2C
    70de:	30 91 2d 0d 	lds	r19, 0x0D2D
    70e2:	23 2b       	or	r18, r19
    70e4:	41 f4       	brne	.+16     	; 0x70f6 <malloc+0xca>
    70e6:	20 91 06 02 	lds	r18, 0x0206
    70ea:	30 91 07 02 	lds	r19, 0x0207
    70ee:	30 93 2d 0d 	sts	0x0D2D, r19
    70f2:	20 93 2c 0d 	sts	0x0D2C, r18
    70f6:	20 91 04 02 	lds	r18, 0x0204
    70fa:	30 91 05 02 	lds	r19, 0x0205
    70fe:	21 15       	cp	r18, r1
    7100:	31 05       	cpc	r19, r1
    7102:	41 f4       	brne	.+16     	; 0x7114 <malloc+0xe8>
    7104:	2d b7       	in	r18, 0x3d	; 61
    7106:	3e b7       	in	r19, 0x3e	; 62
    7108:	40 91 08 02 	lds	r20, 0x0208
    710c:	50 91 09 02 	lds	r21, 0x0209
    7110:	24 1b       	sub	r18, r20
    7112:	35 0b       	sbc	r19, r21
    7114:	e0 91 2c 0d 	lds	r30, 0x0D2C
    7118:	f0 91 2d 0d 	lds	r31, 0x0D2D
    711c:	e2 17       	cp	r30, r18
    711e:	f3 07       	cpc	r31, r19
    7120:	a0 f4       	brcc	.+40     	; 0x714a <malloc+0x11e>
    7122:	2e 1b       	sub	r18, r30
    7124:	3f 0b       	sbc	r19, r31
    7126:	28 17       	cp	r18, r24
    7128:	39 07       	cpc	r19, r25
    712a:	78 f0       	brcs	.+30     	; 0x714a <malloc+0x11e>
    712c:	ac 01       	movw	r20, r24
    712e:	4e 5f       	subi	r20, 0xFE	; 254
    7130:	5f 4f       	sbci	r21, 0xFF	; 255
    7132:	24 17       	cp	r18, r20
    7134:	35 07       	cpc	r19, r21
    7136:	48 f0       	brcs	.+18     	; 0x714a <malloc+0x11e>
    7138:	4e 0f       	add	r20, r30
    713a:	5f 1f       	adc	r21, r31
    713c:	50 93 2d 0d 	sts	0x0D2D, r21
    7140:	40 93 2c 0d 	sts	0x0D2C, r20
    7144:	81 93       	st	Z+, r24
    7146:	91 93       	st	Z+, r25
    7148:	02 c0       	rjmp	.+4      	; 0x714e <malloc+0x122>
    714a:	e0 e0       	ldi	r30, 0x00	; 0
    714c:	f0 e0       	ldi	r31, 0x00	; 0
    714e:	cf 01       	movw	r24, r30
    7150:	df 91       	pop	r29
    7152:	cf 91       	pop	r28
    7154:	08 95       	ret

00007156 <free>:
    7156:	0f 93       	push	r16
    7158:	1f 93       	push	r17
    715a:	cf 93       	push	r28
    715c:	df 93       	push	r29
    715e:	00 97       	sbiw	r24, 0x00	; 0
    7160:	09 f4       	brne	.+2      	; 0x7164 <free+0xe>
    7162:	8c c0       	rjmp	.+280    	; 0x727c <free+0x126>
    7164:	fc 01       	movw	r30, r24
    7166:	32 97       	sbiw	r30, 0x02	; 2
    7168:	13 82       	std	Z+3, r1	; 0x03
    716a:	12 82       	std	Z+2, r1	; 0x02
    716c:	00 91 2e 0d 	lds	r16, 0x0D2E
    7170:	10 91 2f 0d 	lds	r17, 0x0D2F
    7174:	01 15       	cp	r16, r1
    7176:	11 05       	cpc	r17, r1
    7178:	81 f4       	brne	.+32     	; 0x719a <free+0x44>
    717a:	20 81       	ld	r18, Z
    717c:	31 81       	ldd	r19, Z+1	; 0x01
    717e:	82 0f       	add	r24, r18
    7180:	93 1f       	adc	r25, r19
    7182:	20 91 2c 0d 	lds	r18, 0x0D2C
    7186:	30 91 2d 0d 	lds	r19, 0x0D2D
    718a:	28 17       	cp	r18, r24
    718c:	39 07       	cpc	r19, r25
    718e:	79 f5       	brne	.+94     	; 0x71ee <free+0x98>
    7190:	f0 93 2d 0d 	sts	0x0D2D, r31
    7194:	e0 93 2c 0d 	sts	0x0D2C, r30
    7198:	71 c0       	rjmp	.+226    	; 0x727c <free+0x126>
    719a:	d8 01       	movw	r26, r16
    719c:	40 e0       	ldi	r20, 0x00	; 0
    719e:	50 e0       	ldi	r21, 0x00	; 0
    71a0:	ae 17       	cp	r26, r30
    71a2:	bf 07       	cpc	r27, r31
    71a4:	50 f4       	brcc	.+20     	; 0x71ba <free+0x64>
    71a6:	12 96       	adiw	r26, 0x02	; 2
    71a8:	2d 91       	ld	r18, X+
    71aa:	3c 91       	ld	r19, X
    71ac:	13 97       	sbiw	r26, 0x03	; 3
    71ae:	ad 01       	movw	r20, r26
    71b0:	21 15       	cp	r18, r1
    71b2:	31 05       	cpc	r19, r1
    71b4:	09 f1       	breq	.+66     	; 0x71f8 <free+0xa2>
    71b6:	d9 01       	movw	r26, r18
    71b8:	f3 cf       	rjmp	.-26     	; 0x71a0 <free+0x4a>
    71ba:	9d 01       	movw	r18, r26
    71bc:	da 01       	movw	r26, r20
    71be:	33 83       	std	Z+3, r19	; 0x03
    71c0:	22 83       	std	Z+2, r18	; 0x02
    71c2:	60 81       	ld	r22, Z
    71c4:	71 81       	ldd	r23, Z+1	; 0x01
    71c6:	86 0f       	add	r24, r22
    71c8:	97 1f       	adc	r25, r23
    71ca:	82 17       	cp	r24, r18
    71cc:	93 07       	cpc	r25, r19
    71ce:	69 f4       	brne	.+26     	; 0x71ea <free+0x94>
    71d0:	ec 01       	movw	r28, r24
    71d2:	28 81       	ld	r18, Y
    71d4:	39 81       	ldd	r19, Y+1	; 0x01
    71d6:	26 0f       	add	r18, r22
    71d8:	37 1f       	adc	r19, r23
    71da:	2e 5f       	subi	r18, 0xFE	; 254
    71dc:	3f 4f       	sbci	r19, 0xFF	; 255
    71de:	31 83       	std	Z+1, r19	; 0x01
    71e0:	20 83       	st	Z, r18
    71e2:	8a 81       	ldd	r24, Y+2	; 0x02
    71e4:	9b 81       	ldd	r25, Y+3	; 0x03
    71e6:	93 83       	std	Z+3, r25	; 0x03
    71e8:	82 83       	std	Z+2, r24	; 0x02
    71ea:	45 2b       	or	r20, r21
    71ec:	29 f4       	brne	.+10     	; 0x71f8 <free+0xa2>
    71ee:	f0 93 2f 0d 	sts	0x0D2F, r31
    71f2:	e0 93 2e 0d 	sts	0x0D2E, r30
    71f6:	42 c0       	rjmp	.+132    	; 0x727c <free+0x126>
    71f8:	13 96       	adiw	r26, 0x03	; 3
    71fa:	fc 93       	st	X, r31
    71fc:	ee 93       	st	-X, r30
    71fe:	12 97       	sbiw	r26, 0x02	; 2
    7200:	ed 01       	movw	r28, r26
    7202:	49 91       	ld	r20, Y+
    7204:	59 91       	ld	r21, Y+
    7206:	9e 01       	movw	r18, r28
    7208:	24 0f       	add	r18, r20
    720a:	35 1f       	adc	r19, r21
    720c:	e2 17       	cp	r30, r18
    720e:	f3 07       	cpc	r31, r19
    7210:	71 f4       	brne	.+28     	; 0x722e <free+0xd8>
    7212:	80 81       	ld	r24, Z
    7214:	91 81       	ldd	r25, Z+1	; 0x01
    7216:	84 0f       	add	r24, r20
    7218:	95 1f       	adc	r25, r21
    721a:	02 96       	adiw	r24, 0x02	; 2
    721c:	11 96       	adiw	r26, 0x01	; 1
    721e:	9c 93       	st	X, r25
    7220:	8e 93       	st	-X, r24
    7222:	82 81       	ldd	r24, Z+2	; 0x02
    7224:	93 81       	ldd	r25, Z+3	; 0x03
    7226:	13 96       	adiw	r26, 0x03	; 3
    7228:	9c 93       	st	X, r25
    722a:	8e 93       	st	-X, r24
    722c:	12 97       	sbiw	r26, 0x02	; 2
    722e:	e0 e0       	ldi	r30, 0x00	; 0
    7230:	f0 e0       	ldi	r31, 0x00	; 0
    7232:	d8 01       	movw	r26, r16
    7234:	12 96       	adiw	r26, 0x02	; 2
    7236:	8d 91       	ld	r24, X+
    7238:	9c 91       	ld	r25, X
    723a:	13 97       	sbiw	r26, 0x03	; 3
    723c:	00 97       	sbiw	r24, 0x00	; 0
    723e:	19 f0       	breq	.+6      	; 0x7246 <free+0xf0>
    7240:	f8 01       	movw	r30, r16
    7242:	8c 01       	movw	r16, r24
    7244:	f6 cf       	rjmp	.-20     	; 0x7232 <free+0xdc>
    7246:	8d 91       	ld	r24, X+
    7248:	9c 91       	ld	r25, X
    724a:	98 01       	movw	r18, r16
    724c:	2e 5f       	subi	r18, 0xFE	; 254
    724e:	3f 4f       	sbci	r19, 0xFF	; 255
    7250:	82 0f       	add	r24, r18
    7252:	93 1f       	adc	r25, r19
    7254:	20 91 2c 0d 	lds	r18, 0x0D2C
    7258:	30 91 2d 0d 	lds	r19, 0x0D2D
    725c:	28 17       	cp	r18, r24
    725e:	39 07       	cpc	r19, r25
    7260:	69 f4       	brne	.+26     	; 0x727c <free+0x126>
    7262:	30 97       	sbiw	r30, 0x00	; 0
    7264:	29 f4       	brne	.+10     	; 0x7270 <free+0x11a>
    7266:	10 92 2f 0d 	sts	0x0D2F, r1
    726a:	10 92 2e 0d 	sts	0x0D2E, r1
    726e:	02 c0       	rjmp	.+4      	; 0x7274 <free+0x11e>
    7270:	13 82       	std	Z+3, r1	; 0x03
    7272:	12 82       	std	Z+2, r1	; 0x02
    7274:	10 93 2d 0d 	sts	0x0D2D, r17
    7278:	00 93 2c 0d 	sts	0x0D2C, r16
    727c:	df 91       	pop	r29
    727e:	cf 91       	pop	r28
    7280:	1f 91       	pop	r17
    7282:	0f 91       	pop	r16
    7284:	08 95       	ret

00007286 <memset>:
    7286:	dc 01       	movw	r26, r24
    7288:	01 c0       	rjmp	.+2      	; 0x728c <memset+0x6>
    728a:	6d 93       	st	X+, r22
    728c:	41 50       	subi	r20, 0x01	; 1
    728e:	50 40       	sbci	r21, 0x00	; 0
    7290:	e0 f7       	brcc	.-8      	; 0x728a <memset+0x4>
    7292:	08 95       	ret

00007294 <_exit>:
    7294:	f8 94       	cli

00007296 <__stop_program>:
    7296:	ff cf       	rjmp	.-2      	; 0x7296 <__stop_program>
