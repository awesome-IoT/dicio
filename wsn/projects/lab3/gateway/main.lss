
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d6  00800200  0000699a  00006a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000699a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cb1  008004d6  008004d6  00006d04  2**0
                  ALLOC
  3 .stab         00014d18  00000000  00000000  00006d04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009ee0  00000000  00000000  0001ba1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000258fc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0002590d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00026a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00027adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00027afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__ctors_end>
       4:	0c 94 06 2d 	jmp	0x5a0c	; 0x5a0c <__vector_1>
       8:	0c 94 38 2d 	jmp	0x5a70	; 0x5a70 <__vector_2>
       c:	0c 94 6a 2d 	jmp	0x5ad4	; 0x5ad4 <__vector_3>
      10:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      14:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      18:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      1c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      20:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      24:	0c 94 d4 2c 	jmp	0x59a8	; 0x59a8 <__vector_9>
      28:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      2c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      30:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      34:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__vector_13>
      38:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      3c:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__vector_13>
      40:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      44:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      48:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      4c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      50:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      54:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      58:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      5c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      60:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      64:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_25>
      68:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      6c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      70:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      74:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      78:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      7c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      80:	0c 94 66 2b 	jmp	0x56cc	; 0x56cc <__vector_32>
      84:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      88:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      8c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      90:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      94:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      98:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      9c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      ac:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      bc:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      c0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      c4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      c8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      cc:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      d0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      d4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      d8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      dc:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      e0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      e4:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__vector_57>
      e8:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__vector_58>
      ec:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__vector_59>
      f0:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__vector_60>
      f4:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__vector_61>
      f8:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__vector_62>
      fc:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__vector_63>
     100:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__vector_64>
     104:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     108:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     10c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     110:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     114:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     118:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     11c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
     120:	c8 15       	cp	r28, r8
     122:	d5 15       	cp	r29, r5
     124:	e2 15       	cp	r30, r2
     126:	ef 15       	cp	r30, r15
     128:	fc 15       	cp	r31, r12
     12a:	09 16       	cp	r0, r25
     12c:	16 16       	cp	r1, r22
     12e:	39 16       	cp	r3, r25
     130:	47 16       	cp	r4, r23
     132:	55 16       	cp	r5, r21
     134:	63 16       	cp	r6, r19
     136:	71 16       	cp	r7, r17
     138:	7f 16       	cp	r7, r31
     13a:	7f 16       	cp	r7, r31
     13c:	a2 16       	cp	r10, r18
     13e:	a4 16       	cp	r10, r20
     140:	a6 16       	cp	r10, r22
     142:	a8 16       	cp	r10, r24
     144:	aa 16       	cp	r10, r26
     146:	ac 16       	cp	r10, r28
     148:	ae 16       	cp	r10, r30
     14a:	cd 16       	cp	r12, r29
     14c:	f0 16       	cp	r15, r16
     14e:	14 17       	cp	r17, r20
     150:	37 17       	cp	r19, r23
     152:	5a 17       	cp	r21, r26
     154:	7d 17       	cp	r23, r29
     156:	a0 17       	cp	r26, r16
     158:	da 17       	cp	r29, r26
     15a:	e7 17       	cp	r30, r23
     15c:	f4 17       	cp	r31, r20
     15e:	01 18       	sub	r0, r1
     160:	0e 18       	sub	r0, r14
     162:	1b 18       	sub	r1, r11
     164:	28 18       	sub	r2, r8
     166:	41 18       	sub	r4, r1
     168:	4e 18       	sub	r4, r14
     16a:	5b 18       	sub	r5, r11
     16c:	68 18       	sub	r6, r8
     16e:	75 18       	sub	r7, r5
     170:	82 18       	sub	r8, r2
     172:	8f 18       	sub	r8, r15
     174:	09 1c       	adc	r0, r9
     176:	0f 1c       	adc	r0, r15
     178:	12 1c       	adc	r1, r2
     17a:	15 1c       	adc	r1, r5
     17c:	18 1c       	adc	r1, r8
     17e:	1b 1c       	adc	r1, r11
     180:	21 1c       	adc	r2, r1
     182:	1e 1c       	adc	r1, r14
     184:	24 1c       	adc	r2, r4
     186:	27 1c       	adc	r2, r7
     188:	2a 1c       	adc	r2, r10
     18a:	33 1c       	adc	r3, r3
     18c:	36 1c       	adc	r3, r6
     18e:	39 1c       	adc	r3, r9
     190:	3c 1c       	adc	r3, r12
     192:	30 1c       	adc	r3, r0
     194:	06 1c       	adc	r0, r6
     196:	0c 1c       	adc	r0, r12
     198:	3f 1c       	adc	r3, r15
     19a:	42 1c       	adc	r4, r2
     19c:	2d 1c       	adc	r2, r13
     19e:	03 1c       	adc	r0, r3
     1a0:	d9 1c       	adc	r13, r9
     1a2:	dc 1c       	adc	r13, r12
     1a4:	e7 1c       	adc	r14, r7
     1a6:	ec 1c       	adc	r14, r12
     1a8:	f3 1c       	adc	r15, r3
     1aa:	fc 1c       	adc	r15, r12
     1ac:	ff 1c       	adc	r15, r15
     1ae:	04 1d       	adc	r16, r4
     1b0:	0b 1d       	adc	r16, r11
     1b2:	14 1d       	adc	r17, r4

000001b4 <__trampolines_end>:
     1b4:	43 72       	andi	r20, 0x23	; 35
     1b6:	65 61       	ori	r22, 0x15	; 21
     1b8:	74 65       	ori	r23, 0x54	; 84
     1ba:	20 64       	ori	r18, 0x40	; 64
     1bc:	6f 6e       	ori	r22, 0xEF	; 239
     1be:	65 2e       	mov	r6, r21
     1c0:	0d 0a       	sbc	r0, r29
	...

000001c3 <__c.3883>:
     1c3:	49 6e 76 61 6c 69 64 20 69 6e 70 75 74 2e 0d 0a     Invalid input...
     1d3:	23 20 00                                            # .

000001d6 <__c.3881>:
     1d6:	49 6e 76 61 6c 69 64 20 69 6e 70 75 74 2e 0d 0a     Invalid input...
     1e6:	23 20 00                                            # .

000001e9 <__c.3879>:
     1e9:	53 74 72 65 61 6d 69 6e 67 20 6f 6e 2e 0d 0a 00     Streaming on....

000001f9 <__c.3877>:
     1f9:	53 74 72 65 61 6d 69 6e 67 20 6f 66 66 2e 0d 0a     Streaming off...
     209:	23 20 00                                            # .

0000020c <__c.3875>:
     20c:	20 20 70 3a 20 73 74 72 65 61 6d 20 69 6e 63 6f       p: stream inco
     21c:	6d 69 6e 67 20 70 61 63 6b 65 74 73 2e 0d 0a 23     ming packets...#
     22c:	20 00                                                .

0000022e <__c.3873>:
     22e:	20 20 6c 3a 20 76 69 65 77 20 63 75 72 72 65 6e       l: view curren
     23e:	74 20 6c 69 67 68 74 20 76 61 6c 75 65 73 2e 0d     t light values..
     24e:	0a 00                                               ..

00000250 <__c.3871>:
     250:	20 20 6d 3a 20 76 69 65 77 20 63 75 72 72 65 6e       m: view curren
     260:	74 20 6e 65 69 67 68 62 6f 72 20 64 65 70 65 6e     t neighbor depen
     270:	64 65 6e 63 69 65 73 2e 0d 0a 00                    dencies....

0000027b <__c.3869>:
     27b:	20 20 73 3a 20 75 70 64 61 74 65 20 73 65 6e 73       s: update sens
     28b:	6f 72 20 72 65 66 72 65 73 68 20 72 61 74 65 2e     or refresh rate.
     29b:	0d 0a 00                                            ...

0000029e <__c.3867>:
     29e:	20 20 6e 3a 20 75 70 64 61 74 65 20 6e 65 69 67       n: update neig
     2ae:	68 62 6f 72 20 72 65 66 72 65 73 68 20 72 61 74     hbor refresh rat
     2be:	65 2e 0d 0a 00                                      e....

000002c3 <__c.3865>:
     2c3:	0d 0a 48 65 72 65 20 61 72 65 20 79 6f 75 72 20     ..Here are your 
     2d3:	6f 70 74 69 6f 6e 73 2e 2e 2e 0d 0a 00              options......

000002e0 <__c.3859>:
     2e0:	0d 0a 50 6c 65 61 73 65 20 73 65 74 20 74 68 65     ..Please set the
     2f0:	20 73 65 6e 73 6f 72 20 75 70 64 61 74 65 20 72      sensor update r
     300:	61 74 65 2e 20 28 31 2d 33 30 20 73 65 63 6f 6e     ate. (1-30 secon
     310:	64 73 29 0d 0a 23 20 00                             ds)..# .

00000318 <__c.3855>:
     318:	0d 0a 50 6c 65 61 73 65 20 73 65 74 20 74 68 65     ..Please set the
     328:	20 6e 65 69 67 68 62 6f 72 20 75 70 64 61 74 65      neighbor update
     338:	20 72 61 74 65 2e 20 28 31 2d 33 30 20 73 65 63      rate. (1-30 sec
     348:	6f 6e 64 73 29 0d 0a 23 20 00                       onds)..# .

00000352 <__c.3852>:
     352:	57 65 6c 63 6f 6d 65 21 0d 0a 00                    Welcome!...

0000035d <__c.3815>:
     35d:	54 58 20 64 6f 6e 65 20 73 69 67 6e 61 6c 20 65     TX done signal e
     36d:	72 72 6f 72 0d 0a 00                                rror...

00000374 <__c.3804>:
     374:	49 27 6d 20 76 65 72 79 20 73 6f 72 72 79 2c 20     I'm very sorry, 
     384:	62 75 74 20 74 68 61 74 20 69 73 20 61 6e 20 69     but that is an i
     394:	6e 76 61 6c 69 64 20 69 6e 70 75 74 2e 0d 0a 23     nvalid input...#
     3a4:	20 00                                                .

000003a6 <__c.3799>:
     3a6:	49 27 6d 20 76 65 72 79 20 73 6f 72 72 79 2c 20     I'm very sorry, 
     3b6:	62 75 74 20 74 68 61 74 20 69 73 20 61 6e 20 69     but that is an i
     3c6:	6e 76 61 6c 69 64 20 69 6e 70 75 74 2e 0d 0a 23     nvalid input...#
     3d6:	20 00                                                .

000003d8 <__c.3777>:
     3d8:	0a 00                                               ..

000003da <__c.3762>:
     3da:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     3ea:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

000003f6 <__c.3736>:
     3f6:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     406:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     416:	0d 0a 00                                            ...

00000419 <__c.3734>:
     419:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     429:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     439:	74 0d 0a 00                                         t...

0000043d <__c.3718>:
     43d:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     44d:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     45d:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000469 <__c.3716>:
     469:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     479:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     489:	61 69 6c 65 64 0d 0a 00                             ailed...

00000491 <__c.3714>:
     491:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     4a1:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     4b1:	61 69 6c 65 64 0d 0a 00                             ailed...

000004b9 <__c.3708>:
     4b9:	0d 0a 43 75 72 72 65 6e 74 20 4c 69 67 68 74 20     ..Current Light 
     4c9:	56 61 6c 75 65 73 3a 0d 0a 00                       Values:...

000004d3 <__c.3754>:
     4d3:	0d 0a 4e 65 69 67 68 62 6f 72 20 47 72 61 70 68     ..Neighbor Graph
     4e3:	3a 0d 0a 00                                         :...

000004e7 <__c.3125>:
     4e7:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     4f7:	65 64 0d 0a 00                                      ed...

000004fc <__c.3381>:
     4fc:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000503 <__c.3378>:
     503:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000512 <__c.3375>:
     512:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000523 <__c.3372>:
     523:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     533:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000053e <__c.3369>:
     53e:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     54e:	20 53 69 67 6e 61 6c 00                              Signal.

00000556 <__c.3366>:
     556:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     566:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000576 <__c.3363>:
     576:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     586:	72 6f 72 00                                         ror.

0000058a <__c.3360>:
     58a:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000059b <__c.3357>:
     59b:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     5ab:	61 72 74 00                                         art.

000005af <__c.3354>:
     5af:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000005be <__c.3351>:
     5be:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     5ce:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000005d9 <__c.3348>:
     5d9:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000005e5 <__c.3345>:
     5e5:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     5f5:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     605:	20 6f 6b 3f 00                                       ok?.

0000060a <__c.3342>:
     60a:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     61a:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000628 <__c.3339>:
     628:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     638:	72 74 00                                            rt.

0000063b <__c.3336>:
     63b:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     64b:	49 44 00                                            ID.

0000064e <__c.3333>:
     64e:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     65e:	20 57 61 6b 65 75 70 00                              Wakeup.

00000666 <__c.3330>:
     666:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     676:	6c 61 74 65 64 00                                   lated.

0000067c <__c.3327>:
     67c:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     68c:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000697 <__c.3324>:
     697:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     6a7:	69 6e 74 65 72 00                                   inter.

000006ad <__c.3321>:
     6ad:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     6bd:	6c 6f 77 00                                         low.

000006c1 <__c.3318>:
     6c1:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     6d1:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     6e1:	6e 6f 75 67 68 21 00                                nough!.

000006e8 <__c.3314>:
     6e8:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     6f8:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     708:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     718:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000724 <__c.3311>:
     724:	29 3a 20 00                                         ): .

00000728 <__c.3309>:
     728:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000734 <__c.3246>:
     734:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000743 <__c.2228>:
     743:	45 46 47 65 66 67 00                                EFGefg.

0000074a <__c.2222>:
     74a:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000075a <__ctors_end>:
     75a:	11 24       	eor	r1, r1
     75c:	1f be       	out	0x3f, r1	; 63
     75e:	cf ef       	ldi	r28, 0xFF	; 255
     760:	d1 e4       	ldi	r29, 0x41	; 65
     762:	de bf       	out	0x3e, r29	; 62
     764:	cd bf       	out	0x3d, r28	; 61

00000766 <__do_copy_data>:
     766:	14 e0       	ldi	r17, 0x04	; 4
     768:	a0 e0       	ldi	r26, 0x00	; 0
     76a:	b2 e0       	ldi	r27, 0x02	; 2
     76c:	ea e9       	ldi	r30, 0x9A	; 154
     76e:	f9 e6       	ldi	r31, 0x69	; 105
     770:	00 e0       	ldi	r16, 0x00	; 0
     772:	0b bf       	out	0x3b, r16	; 59
     774:	02 c0       	rjmp	.+4      	; 0x77a <__do_copy_data+0x14>
     776:	07 90       	elpm	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	a6 3d       	cpi	r26, 0xD6	; 214
     77c:	b1 07       	cpc	r27, r17
     77e:	d9 f7       	brne	.-10     	; 0x776 <__do_copy_data+0x10>

00000780 <__do_clear_bss>:
     780:	11 e1       	ldi	r17, 0x11	; 17
     782:	a6 ed       	ldi	r26, 0xD6	; 214
     784:	b4 e0       	ldi	r27, 0x04	; 4
     786:	01 c0       	rjmp	.+2      	; 0x78a <.do_clear_bss_start>

00000788 <.do_clear_bss_loop>:
     788:	1d 92       	st	X+, r1

0000078a <.do_clear_bss_start>:
     78a:	a7 38       	cpi	r26, 0x87	; 135
     78c:	b1 07       	cpc	r27, r17
     78e:	e1 f7       	brne	.-8      	; 0x788 <.do_clear_bss_loop>
     790:	0e 94 7f 2e 	call	0x5cfe	; 0x5cfe <main>
     794:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <_exit>

00000798 <__bad_interrupt>:
     798:	0c 94 29 2b 	jmp	0x5652	; 0x5652 <__vector_default>

0000079c <transmit_task>:
 * NOTE: This function requires use of a semaphore to ensure the correct access 
 *  of a global variable.
 */
void transmit_task() {
  /** TEMP LED STUFF **/
  nrk_led_clr (2);
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  nrk_led_clr (3);
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  uint16_t val;
  nrk_sig_t tx_done_signal;
  nrk_sig_mask_t ret;
  
  // Wait until bmac has started. This should be called by all tasks using bmac that do not call bmac_init()
  while (!bmac_started ())
     7ac:	0e 94 45 09 	call	0x128a	; 0x128a <bmac_started>
     7b0:	81 11       	cpse	r24, r1
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <transmit_task+0x1e>
    nrk_wait_until_next_period ();
     7b4:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <nrk_wait_until_next_period>
     7b8:	f9 cf       	rjmp	.-14     	; 0x7ac <transmit_task+0x10>

  // Get and register the tx_done_signal to perform non-blocking transmits
  tx_done_signal = bmac_get_tx_done_signal ();
     7ba:	0e 94 7e 08 	call	0x10fc	; 0x10fc <bmac_get_tx_done_signal>
     7be:	c8 2f       	mov	r28, r24
  nrk_signal_register (tx_done_signal);
     7c0:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
    tx_packet.seq_num = seq_num;
    assemble_packet(&tx_buf, &tx_packet);

    // send the packet
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen(tx_buf));
    ret = nrk_event_wait (SIG(tx_done_signal));
     7c4:	c1 2c       	mov	r12, r1
     7c6:	d1 2c       	mov	r13, r1
     7c8:	76 01       	movw	r14, r12
     7ca:	c3 94       	inc	r12
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <transmit_task+0x3a>
     7ce:	cc 0c       	add	r12, r12
     7d0:	dd 1c       	adc	r13, r13
     7d2:	ee 1c       	adc	r14, r14
     7d4:	ff 1c       	adc	r15, r15
     7d6:	ca 95       	dec	r28
     7d8:	d2 f7       	brpl	.-12     	; 0x7ce <transmit_task+0x32>
    
    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) {
     7da:	81 2c       	mov	r8, r1
     7dc:	91 2c       	mov	r9, r1
     7de:	54 01       	movw	r10, r8
     7e0:	83 94       	inc	r8
     7e2:	c1 14       	cp	r12, r1
     7e4:	d1 04       	cpc	r13, r1
     7e6:	e1 04       	cpc	r14, r1
     7e8:	f1 04       	cpc	r15, r1
     7ea:	19 f0       	breq	.+6      	; 0x7f2 <transmit_task+0x56>
     7ec:	81 2c       	mov	r8, r1
     7ee:	91 2c       	mov	r9, r1
     7f0:	54 01       	movw	r10, r8
 */
void transmit_task() {
  /** TEMP LED STUFF **/
  nrk_led_clr (2);
  nrk_led_clr (3);
  uint8_t i = 0;
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
  tx_done_signal = bmac_get_tx_done_signal ();
  nrk_signal_register (tx_done_signal);
  
  while(1) {
    /** TEMP LED STUFF **/
    i++;
     7f4:	cf 5f       	subi	r28, 0xFF	; 255
    i%=4;
     7f6:	c3 70       	andi	r28, 0x03	; 3
     7f8:	8c 2f       	mov	r24, r28
     7fa:	90 e0       	ldi	r25, 0x00	; 0
    if(i < 2) {
     7fc:	c2 30       	cpi	r28, 0x02	; 2
     7fe:	20 f4       	brcc	.+8      	; 0x808 <transmit_task+0x6c>
      nrk_led_set(i+2);
     800:	02 96       	adiw	r24, 0x02	; 2
     802:	0e 94 d7 18 	call	0x31ae	; 0x31ae <nrk_led_set>
     806:	02 c0       	rjmp	.+4      	; 0x80c <transmit_task+0x70>
    } else {
      nrk_led_clr(i);
     808:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
    }
    
    // ATOMIC ACCESS to global sensor_update_rate
    nrk_sem_pend(sensor_mux);
     80c:	80 91 59 08 	lds	r24, 0x0859
     810:	90 91 5a 08 	lds	r25, 0x085A
     814:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
    tx_packet.sensor_sample_rate = sensor_update_rate;
     818:	80 91 00 02 	lds	r24, 0x0200
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	90 93 34 0b 	sts	0x0B34, r25
     822:	80 93 33 0b 	sts	0x0B33, r24
    nrk_sem_post(sensor_mux);
     826:	80 91 59 08 	lds	r24, 0x0859
     82a:	90 91 5a 08 	lds	r25, 0x085A
     82e:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
    
    // ATOMIC ACCESS to global neighbor_update_rate
    nrk_sem_pend(neighbor_mux);
     832:	80 91 b7 0d 	lds	r24, 0x0DB7
     836:	90 91 b8 0d 	lds	r25, 0x0DB8
     83a:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
    tx_packet.neighbor_update_rate = neighbor_update_rate;
     83e:	80 91 01 02 	lds	r24, 0x0201
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	90 93 36 0b 	sts	0x0B36, r25
     848:	80 93 35 0b 	sts	0x0B35, r24
    nrk_sem_post(neighbor_mux);
     84c:	80 91 b7 0d 	lds	r24, 0x0DB7
     850:	90 91 b8 0d 	lds	r25, 0x0DB8
     854:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
    
    // assemble the rest of the packet
    seq_num++;
     858:	80 91 d6 04 	lds	r24, 0x04D6
     85c:	90 91 d7 04 	lds	r25, 0x04D7
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	90 93 d7 04 	sts	0x04D7, r25
     866:	80 93 d6 04 	sts	0x04D6, r24
    tx_packet.seq_num = seq_num;
     86a:	90 93 2a 0b 	sts	0x0B2A, r25
     86e:	80 93 29 0b 	sts	0x0B29, r24
    assemble_packet(&tx_buf, &tx_packet);
     872:	67 e2       	ldi	r22, 0x27	; 39
     874:	7b e0       	ldi	r23, 0x0B	; 11
     876:	89 e3       	ldi	r24, 0x39	; 57
     878:	9d e0       	ldi	r25, 0x0D	; 13
     87a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <assemble_packet>

    // send the packet
    val = bmac_tx_pkt_nonblocking(tx_buf, strlen(tx_buf));
     87e:	e9 e3       	ldi	r30, 0x39	; 57
     880:	fd e0       	ldi	r31, 0x0D	; 13
     882:	01 90       	ld	r0, Z+
     884:	00 20       	and	r0, r0
     886:	e9 f7       	brne	.-6      	; 0x882 <transmit_task+0xe6>
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	bf 01       	movw	r22, r30
     88c:	69 53       	subi	r22, 0x39	; 57
     88e:	7d 40       	sbci	r23, 0x0D	; 13
     890:	89 e3       	ldi	r24, 0x39	; 57
     892:	9d e0       	ldi	r25, 0x0D	; 13
     894:	0e 94 66 08 	call	0x10cc	; 0x10cc <bmac_tx_pkt_nonblocking>
    ret = nrk_event_wait (SIG(tx_done_signal));
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <nrk_event_wait>
    
    // Just check to be sure signal is okay
    if(ret & SIG(tx_done_signal) == 0 ) {
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	88 21       	and	r24, r8
     8a6:	99 21       	and	r25, r9
     8a8:	aa 21       	and	r26, r10
     8aa:	bb 21       	and	r27, r11
     8ac:	89 2b       	or	r24, r25
     8ae:	8a 2b       	or	r24, r26
     8b0:	8b 2b       	or	r24, r27
     8b2:	21 f0       	breq	.+8      	; 0x8bc <transmit_task+0x120>
      nrk_kprintf (PSTR ("TX done signal error\r\n"));
     8b4:	8d e5       	ldi	r24, 0x5D	; 93
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
    }
    nrk_wait_until_next_period();
     8bc:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <nrk_wait_until_next_period>
  }
     8c0:	99 cf       	rjmp	.-206    	; 0x7f4 <transmit_task+0x58>

000008c2 <receive_task>:

/**
 * receive_task - receives a message and adds the information to either 
 *  (1) the light data (2) the neighbor data or (3) both.
 */
void receive_task() {
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	62 97       	sbiw	r28, 0x12	; 18
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
  /** TEMP LED STUFF **/
  nrk_led_clr (0);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  nrk_led_clr (1);
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  uint16_t local_seq_num;
  uint8_t new_node = NONE;
  uint8_t print;


  bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     8e6:	64 e7       	ldi	r22, 0x74	; 116
     8e8:	8f ea       	ldi	r24, 0xAF	; 175
     8ea:	98 e0       	ldi	r25, 0x08	; 8
     8ec:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <bmac_rx_pkt_set_buffer>
  
  // Wait until bmac has started. This should be called by all tasks using bmac that do not call bmac_init()
  while (!bmac_started ())
     8f0:	0e 94 45 09 	call	0x128a	; 0x128a <bmac_started>
     8f4:	81 11       	cpse	r24, r1
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <receive_task+0x3c>
    nrk_wait_until_next_period ();
     8f8:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <nrk_wait_until_next_period>
     8fc:	f9 cf       	rjmp	.-14     	; 0x8f0 <receive_task+0x2e>
     8fe:	00 e0       	ldi	r16, 0x00	; 0
     900:	10 e0       	ldi	r17, 0x00	; 0
      
      nrk_sem_pend(print_mux);
        print = print_incoming;
      nrk_sem_post(print_mux);
      if(print == 1) {
        printf ("RX: ");
     902:	8d e5       	ldi	r24, 0x5D	; 93
     904:	c8 2e       	mov	r12, r24
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	d8 2e       	mov	r13, r24
  while (!bmac_started ())
    nrk_wait_until_next_period ();
  
  while(1) {
    /** LED indication for debug **/
    i++;
     90a:	1f 5f       	subi	r17, 0xFF	; 255
    i%=4;
     90c:	13 70       	andi	r17, 0x03	; 3
     90e:	81 2f       	mov	r24, r17
     910:	90 e0       	ldi	r25, 0x00	; 0
    if(i < 2) {
     912:	12 30       	cpi	r17, 0x02	; 2
     914:	18 f4       	brcc	.+6      	; 0x91c <receive_task+0x5a>
      nrk_led_set(i);
     916:	0e 94 d7 18 	call	0x31ae	; 0x31ae <nrk_led_set>
     91a:	03 c0       	rjmp	.+6      	; 0x922 <receive_task+0x60>
    } else {
      nrk_led_clr(i-2);
     91c:	02 97       	sbiw	r24, 0x02	; 2
     91e:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
    }
    
    // if there is a packet available
    if(bmac_rx_pkt_ready()) {
     922:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <bmac_rx_pkt_ready>
     926:	88 23       	and	r24, r24
     928:	09 f4       	brne	.+2      	; 0x92c <receive_task+0x6a>
     92a:	89 c0       	rjmp	.+274    	; 0xa3e <receive_task+0x17c>
      // get the packet, parse and release
      parse_msg(&rx_packet, &rx_buf, len);
     92c:	4a 89       	ldd	r20, Y+18	; 0x12
     92e:	6f ea       	ldi	r22, 0xAF	; 175
     930:	78 e0       	ldi	r23, 0x08	; 8
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <parse_msg>
      local_buf = bmac_rx_pkt_get(&len, &rssi);
     93a:	be 01       	movw	r22, r28
     93c:	6f 5e       	subi	r22, 0xEF	; 239
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	42 96       	adiw	r24, 0x12	; 18
     944:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <bmac_rx_pkt_get>
      
      nrk_sem_pend(print_mux);
     948:	80 91 37 0b 	lds	r24, 0x0B37
     94c:	90 91 38 0b 	lds	r25, 0x0B38
     950:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
        print = print_incoming;
     954:	f0 90 a1 08 	lds	r15, 0x08A1
      nrk_sem_post(print_mux);
     958:	80 91 37 0b 	lds	r24, 0x0B37
     95c:	90 91 38 0b 	lds	r25, 0x0B38
     960:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
      if(print == 1) {
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	f8 12       	cpse	r15, r24
     968:	18 c0       	rjmp	.+48     	; 0x99a <receive_task+0xd8>
        printf ("RX: ");
     96a:	df 92       	push	r13
     96c:	cf 92       	push	r12
     96e:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
        for (uint8_t j = 0; j < len; j++)
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	f1 2c       	mov	r15, r1
     978:	8a 89       	ldd	r24, Y+18	; 0x12
     97a:	f8 16       	cp	r15, r24
     97c:	50 f4       	brcc	.+20     	; 0x992 <receive_task+0xd0>
          printf ("%c", rx_buf[j]);
     97e:	ef 2d       	mov	r30, r15
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	e1 55       	subi	r30, 0x51	; 81
     984:	f7 4f       	sbci	r31, 0xF7	; 247
     986:	80 81       	ld	r24, Z
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <putchar>
      nrk_sem_pend(print_mux);
        print = print_incoming;
      nrk_sem_post(print_mux);
      if(print == 1) {
        printf ("RX: ");
        for (uint8_t j = 0; j < len; j++)
     98e:	f3 94       	inc	r15
     990:	f3 cf       	rjmp	.-26     	; 0x978 <receive_task+0xb6>
          printf ("%c", rx_buf[j]);
        printf("\r\n");        
     992:	82 e9       	ldi	r24, 0x92	; 146
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	0e 94 80 32 	call	0x6500	; 0x6500 <puts>
      }
      
      bmac_rx_pkt_release ();  
     99a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <bmac_rx_pkt_release>

      // check to see if this node is in the sequence pool, if not then add it
      in_seq_pool = in_sequence_pool(&seq_pool, rx_packet.source_id);
     99e:	6a 81       	ldd	r22, Y+2	; 0x02
     9a0:	8d ea       	ldi	r24, 0xAD	; 173
     9a2:	9d e0       	ldi	r25, 0x0D	; 13
     9a4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <in_sequence_pool>
      if((in_seq_pool == -1) && (rx_packet.source_id != MAC_ADDR)) {
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	51 f4       	brne	.+20     	; 0x9c0 <receive_task+0xfe>
     9ac:	6a 81       	ldd	r22, Y+2	; 0x02
     9ae:	61 30       	cpi	r22, 0x01	; 1
     9b0:	39 f0       	breq	.+14     	; 0x9c0 <receive_task+0xfe>
        add_to_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     9b2:	4b 81       	ldd	r20, Y+3	; 0x03
     9b4:	5c 81       	ldd	r21, Y+4	; 0x04
     9b6:	8d ea       	ldi	r24, 0xAD	; 173
     9b8:	9d e0       	ldi	r25, 0x0D	; 13
     9ba:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <add_to_sequence_pool>
        new_node = NODE_FOUND;
     9be:	01 e0       	ldi	r16, 0x01	; 1
      }
    
      // determine if we should parse this packet based on the sequence number
      local_seq_num = get_sequence_number(&seq_pool, rx_packet.source_id);
     9c0:	6a 81       	ldd	r22, Y+2	; 0x02
     9c2:	8d ea       	ldi	r24, 0xAD	; 173
     9c4:	9d e0       	ldi	r25, 0x0D	; 13
     9c6:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <get_sequence_number>
      if((rx_packet.source_id != MAC_ADDR) && 
     9ca:	6a 81       	ldd	r22, Y+2	; 0x02
     9cc:	61 30       	cpi	r22, 0x01	; 1
     9ce:	b9 f1       	breq	.+110    	; 0xa3e <receive_task+0x17c>
          ((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND))) {
     9d0:	4b 81       	ldd	r20, Y+3	; 0x03
     9d2:	5c 81       	ldd	r21, Y+4	; 0x04
        new_node = NODE_FOUND;
      }
    
      // determine if we should parse this packet based on the sequence number
      local_seq_num = get_sequence_number(&seq_pool, rx_packet.source_id);
      if((rx_packet.source_id != MAC_ADDR) && 
     9d4:	84 17       	cp	r24, r20
     9d6:	95 07       	cpc	r25, r21
     9d8:	10 f0       	brcs	.+4      	; 0x9de <receive_task+0x11c>
          ((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND))) {
     9da:	01 30       	cpi	r16, 0x01	; 1
     9dc:	81 f5       	brne	.+96     	; 0xa3e <receive_task+0x17c>
        
        // update the sequence pool and reset the new_node flag
        update_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     9de:	8d ea       	ldi	r24, 0xAD	; 173
     9e0:	9d e0       	ldi	r25, 0x0D	; 13
     9e2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <update_sequence_pool>
        new_node = NONE;
        
        // update neighbor_graph/light_pool based on the current message type 
        switch(rx_packet.type) {
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	a9 f0       	breq	.+42     	; 0xa16 <receive_task+0x154>
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	31 f5       	brne	.+76     	; 0xa3c <receive_task+0x17a>
          case MSG_NODE_NEIGHBORS:
            nrk_sem_pend(neighbor_graph_mux);
     9f0:	80 91 23 09 	lds	r24, 0x0923
     9f4:	90 91 24 09 	lds	r25, 0x0924
     9f8:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
            update_neighbor_graph(&neighbor_graph, &(rx_packet.neighbor_table));
     9fc:	be 01       	movw	r22, r28
     9fe:	68 5f       	subi	r22, 0xF8	; 248
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	84 ed       	ldi	r24, 0xD4	; 212
     a04:	95 e0       	ldi	r25, 0x05	; 5
     a06:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <update_neighbor_graph>
            nrk_sem_post(neighbor_graph_mux);
     a0a:	80 91 23 09 	lds	r24, 0x0923
     a0e:	90 91 24 09 	lds	r25, 0x0924
     a12:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
            // NOTE: Intentional fall through - also should update light value
          case MSG_NODE_SENSOR_VALUE:
            nrk_sem_pend(light_pool_mux);
     a16:	80 91 b9 0d 	lds	r24, 0x0DB9
     a1a:	90 91 ba 0d 	lds	r25, 0x0DBA
     a1e:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
            update_light_pool(&light_pool, rx_packet.source_id, rx_packet.light_value);
     a22:	4e 81       	ldd	r20, Y+6	; 0x06
     a24:	5f 81       	ldd	r21, Y+7	; 0x07
     a26:	6a 81       	ldd	r22, Y+2	; 0x02
     a28:	88 ec       	ldi	r24, 0xC8	; 200
     a2a:	9f e0       	ldi	r25, 0x0F	; 15
     a2c:	0e 94 a9 0b 	call	0x1752	; 0x1752 <update_light_pool>
            nrk_sem_post(light_pool_mux);
     a30:	80 91 b9 0d 	lds	r24, 0x0DB9
     a34:	90 91 ba 0d 	lds	r25, 0x0DBA
     a38:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
      if((rx_packet.source_id != MAC_ADDR) && 
          ((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND))) {
        
        // update the sequence pool and reset the new_node flag
        update_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
        new_node = NONE;
     a3c:	00 e0       	ldi	r16, 0x00	; 0
            // do nothing
            break;
        }
      }
    }
    nrk_wait_until_next_period();
     a3e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <nrk_wait_until_next_period>
  }
     a42:	63 cf       	rjmp	.-314    	; 0x90a <receive_task+0x48>

00000a44 <add_to_ui_buffer>:

/** 
 * add_to_ui_buffer - add char to the ui buffer 
 */
void add_to_ui_buffer(char c) {
  ui_buf[ui_index] = c;
     a44:	e0 91 d8 04 	lds	r30, 0x04D8
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	ec 51       	subi	r30, 0x1C	; 28
     a4c:	f8 4f       	sbci	r31, 0xF8	; 248
     a4e:	80 83       	st	Z, r24
  printf("%c", c);
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <putchar>
  ui_index++;
     a56:	80 91 d8 04 	lds	r24, 0x04D8
     a5a:	8f 5f       	subi	r24, 0xFF	; 255
     a5c:	80 93 d8 04 	sts	0x04D8, r24
     a60:	08 95       	ret

00000a62 <get_user_input>:


/**
 * get_user_input - get input from command line
 */
uint8_t get_user_input() {
     a62:	cf 93       	push	r28
  char option;
  while(nrk_uart_data_ready(NRK_DEFAULT_UART)) {
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <nrk_uart_data_ready>
     a6a:	88 23       	and	r24, r24
     a6c:	99 f0       	breq	.+38     	; 0xa94 <get_user_input+0x32>
    option = getchar();
     a6e:	80 91 7d 11 	lds	r24, 0x117D
     a72:	90 91 7e 11 	lds	r25, 0x117E
     a76:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <fgetc>
     a7a:	c8 2f       	mov	r28, r24
    add_to_ui_buffer(option);
     a7c:	0e 94 22 05 	call	0xa44	; 0xa44 <add_to_ui_buffer>
    if(option == '\r') {
     a80:	cd 30       	cpi	r28, 0x0D	; 13
     a82:	81 f7       	brne	.-32     	; 0xa64 <get_user_input+0x2>
      add_to_ui_buffer('\n');
     a84:	8a e0       	ldi	r24, 0x0A	; 10
     a86:	0e 94 22 05 	call	0xa44	; 0xa44 <add_to_ui_buffer>
      nrk_kprintf(PSTR("\n"));
     a8a:	88 ed       	ldi	r24, 0xD8	; 216
     a8c:	93 e0       	ldi	r25, 0x03	; 3
     a8e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
     a92:	81 e0       	ldi	r24, 0x01	; 1
      return 1;    
    }
  }
  return 0;
}
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <clear_ui_buf>:

/** 
 * clear_ui_buf - clear the UI buffe
 */
void clear_ui_buf() {
  for(uint8_t i = 0; i < ui_index; i++) {
     a98:	80 91 d8 04 	lds	r24, 0x04D8
     a9c:	24 ee       	ldi	r18, 0xE4	; 228
     a9e:	37 e0       	ldi	r19, 0x07	; 7
     aa0:	f9 01       	movw	r30, r18
     aa2:	9e 2f       	mov	r25, r30
     aa4:	92 1b       	sub	r25, r18
     aa6:	98 17       	cp	r25, r24
     aa8:	10 f4       	brcc	.+4      	; 0xaae <clear_ui_buf+0x16>
    ui_buf[i] = '\0';
     aaa:	11 92       	st	Z+, r1
     aac:	fa cf       	rjmp	.-12     	; 0xaa2 <clear_ui_buf+0xa>
  }
  ui_index = 0;
     aae:	10 92 d8 04 	sts	0x04D8, r1
     ab2:	08 95       	ret

00000ab4 <turnUItoUint>:
  // inital declarations
  uint16_t make = 0;
  int16_t temp = 0;
  
  // loop through entire useful ui_buf (-2 for '\r' and '\n')
  for(uint8_t i = 0; i < (ui_index - 2); i++) {
     ab4:	40 91 d8 04 	lds	r20, 0x04D8
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	42 50       	subi	r20, 0x02	; 2
     abc:	51 09       	sbc	r21, r1
     abe:	60 e0       	ldi	r22, 0x00	; 0
 * NOTE: The range of input values is bounded by MIN_RATE and MAX_RATE. 
 *  Thus, this function is not general, but only for use in this context.
 */
int8_t turnUItoUint() {
  // inital declarations
  uint16_t make = 0;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < (ui_index - 2); i++) {
    temp = ui_buf[i] - '0';
    if((temp < 0) || (temp > 9)) {
      return -1;
    } else {
      make *= 10;
     ac4:	7a e0       	ldi	r23, 0x0A	; 10
  // inital declarations
  uint16_t make = 0;
  int16_t temp = 0;
  
  // loop through entire useful ui_buf (-2 for '\r' and '\n')
  for(uint8_t i = 0; i < (ui_index - 2); i++) {
     ac6:	26 2f       	mov	r18, r22
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	24 17       	cp	r18, r20
     acc:	35 07       	cpc	r19, r21
     ace:	bc f4       	brge	.+46     	; 0xafe <turnUItoUint+0x4a>
    temp = ui_buf[i] - '0';
     ad0:	f9 01       	movw	r30, r18
     ad2:	ec 51       	subi	r30, 0x1C	; 28
     ad4:	f8 4f       	sbci	r31, 0xF8	; 248
     ad6:	20 81       	ld	r18, Z
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	20 53       	subi	r18, 0x30	; 48
     adc:	31 09       	sbc	r19, r1
    if((temp < 0) || (temp > 9)) {
     ade:	2a 30       	cpi	r18, 0x0A	; 10
     ae0:	31 05       	cpc	r19, r1
     ae2:	70 f4       	brcc	.+28     	; 0xb00 <turnUItoUint+0x4c>
      return -1;
    } else {
      make *= 10;
     ae4:	78 9f       	mul	r23, r24
     ae6:	f0 01       	movw	r30, r0
     ae8:	79 9f       	mul	r23, r25
     aea:	f0 0d       	add	r31, r0
     aec:	11 24       	eor	r1, r1
      make += temp;  
     aee:	c9 01       	movw	r24, r18
     af0:	8e 0f       	add	r24, r30
     af2:	9f 1f       	adc	r25, r31
      if(make > MAX_RATE) {
     af4:	8f 31       	cpi	r24, 0x1F	; 31
     af6:	91 05       	cpc	r25, r1
     af8:	18 f4       	brcc	.+6      	; 0xb00 <turnUItoUint+0x4c>
  // inital declarations
  uint16_t make = 0;
  int16_t temp = 0;
  
  // loop through entire useful ui_buf (-2 for '\r' and '\n')
  for(uint8_t i = 0; i < (ui_index - 2); i++) {
     afa:	6f 5f       	subi	r22, 0xFF	; 255
     afc:	e4 cf       	rjmp	.-56     	; 0xac6 <turnUItoUint+0x12>
      if(make > MAX_RATE) {
        return -1;
      }
    }
  }
  return (int8_t)make;
     afe:	08 95       	ret
  
  // loop through entire useful ui_buf (-2 for '\r' and '\n')
  for(uint8_t i = 0; i < (ui_index - 2); i++) {
    temp = ui_buf[i] - '0';
    if((temp < 0) || (temp > 9)) {
      return -1;
     b00:	8f ef       	ldi	r24, 0xFF	; 255
        return -1;
      }
    }
  }
  return (int8_t)make;
}
     b02:	08 95       	ret

00000b04 <set_neighbor_rate>:
 *  the terminal gui.
 * 
 * NOTE: This function requires use of a semaphore to ensure the correct access
 *  of a global variable.
 */
uint8_t set_neighbor_rate() {
     b04:	cf 93       	push	r28
  int8_t uiUint;
  
  // prompt
  if(get_user_input()) {
     b06:	0e 94 31 05 	call	0xa62	; 0xa62 <get_user_input>
     b0a:	88 23       	and	r24, r24
     b0c:	81 f1       	breq	.+96     	; 0xb6e <set_neighbor_rate+0x6a>
    // analyze input
    uiUint = turnUItoUint();
     b0e:	0e 94 5a 05 	call	0xab4	; 0xab4 <turnUItoUint>
     b12:	c8 2f       	mov	r28, r24
    if((uiUint < MIN_RATE) || (uiUint > MAX_RATE)) {
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	8c 0f       	add	r24, r28
     b18:	8e 31       	cpi	r24, 0x1E	; 30
     b1a:	40 f0       	brcs	.+16     	; 0xb2c <set_neighbor_rate+0x28>
      nrk_kprintf(PSTR("I'm very sorry, but that is an invalid input.\r\n# "));
     b1c:	86 ea       	ldi	r24, 0xA6	; 166
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
      clear_ui_buf();
     b24:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_ui_buf>
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	21 c0       	rjmp	.+66     	; 0xb6e <set_neighbor_rate+0x6a>
      return INVALID;
    } else {
      printf("Neighbor update rate set has been set to %d seconds!\r\n", uiUint);
     b2c:	8c 2f       	mov	r24, r28
     b2e:	99 27       	eor	r25, r25
     b30:	87 fd       	sbrc	r24, 7
     b32:	90 95       	com	r25
     b34:	9f 93       	push	r25
     b36:	cf 93       	push	r28
     b38:	82 e6       	ldi	r24, 0x62	; 98
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	9f 93       	push	r25
     b3e:	8f 93       	push	r24
     b40:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
      
      // ATOMIC ACCESS of global neighbor_update_rate
      nrk_sem_pend(neighbor_mux);
     b44:	80 91 b7 0d 	lds	r24, 0x0DB7
     b48:	90 91 b8 0d 	lds	r25, 0x0DB8
     b4c:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
      neighbor_update_rate = uiUint;
     b50:	c0 93 01 02 	sts	0x0201, r28
      nrk_sem_post(neighbor_mux);
     b54:	80 91 b7 0d 	lds	r24, 0x0DB7
     b58:	90 91 b8 0d 	lds	r25, 0x0DB8
     b5c:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
      clear_ui_buf();
     b60:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_ui_buf>
      return SET;
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
  return NOT_SET;
}
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <set_sensor_rate>:
 *  terminal gui.
 * 
 * NOTE: This function requires use of a semaphore to ensure the correct access 
 *  of a global variable.
 */
uint8_t set_sensor_rate() {
     b72:	cf 93       	push	r28
  int8_t uiUint;
  
  // prompt
  if(get_user_input()) {
     b74:	0e 94 31 05 	call	0xa62	; 0xa62 <get_user_input>
     b78:	88 23       	and	r24, r24
     b7a:	81 f1       	breq	.+96     	; 0xbdc <set_sensor_rate+0x6a>
    // analyze inputr
    uiUint = turnUItoUint();
     b7c:	0e 94 5a 05 	call	0xab4	; 0xab4 <turnUItoUint>
     b80:	c8 2f       	mov	r28, r24
    if((uiUint < MIN_RATE) || (uiUint > MAX_RATE)) {
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	8c 0f       	add	r24, r28
     b86:	8e 31       	cpi	r24, 0x1E	; 30
     b88:	40 f0       	brcs	.+16     	; 0xb9a <set_sensor_rate+0x28>
      nrk_kprintf(PSTR("I'm very sorry, but that is an invalid input.\r\n# "));
     b8a:	84 e7       	ldi	r24, 0x74	; 116
     b8c:	93 e0       	ldi	r25, 0x03	; 3
     b8e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
      clear_ui_buf();
     b92:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_ui_buf>
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	21 c0       	rjmp	.+66     	; 0xbdc <set_sensor_rate+0x6a>
      return INVALID;
    } else {
      printf("Sensor update rate set has been set to %d seconds!\r\n", uiUint);
     b9a:	8c 2f       	mov	r24, r28
     b9c:	99 27       	eor	r25, r25
     b9e:	87 fd       	sbrc	r24, 7
     ba0:	90 95       	com	r25
     ba2:	9f 93       	push	r25
     ba4:	cf 93       	push	r28
     ba6:	89 e9       	ldi	r24, 0x99	; 153
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
      
      // ATOMIC ACCESS to global sensor_update_rate
      nrk_sem_pend(sensor_mux);
     bb2:	80 91 59 08 	lds	r24, 0x0859
     bb6:	90 91 5a 08 	lds	r25, 0x085A
     bba:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
      sensor_update_rate = uiUint;
     bbe:	c0 93 00 02 	sts	0x0200, r28
      nrk_sem_post(sensor_mux);
     bc2:	80 91 59 08 	lds	r24, 0x0859
     bc6:	90 91 5a 08 	lds	r25, 0x085A
     bca:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
      
      clear_ui_buf();
     bce:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_ui_buf>
      return SET;
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
  return NOT_SET;
}
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <ui_task>:
 * ui_task - implements a user interface
 */
void ui_task ()
{
  // get the UART signal and register it
  nrk_sig_t uart_rx_signal = nrk_uart_rx_signal_get();
     be0:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <nrk_uart_rx_signal_get>
  nrk_signal_register(uart_rx_signal);
     be4:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
  // boolean flags to bound print statements
  uint8_t neighbor_set = NOT_SET;
  uint8_t sensor_set = NOT_SET;

  // initial welcome statement
  nrk_kprintf(PSTR("Welcome!\r\n"));
     be8:	82 e5       	ldi	r24, 0x52	; 82
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
  states cur_state = STATE_WAIT;
  states last_state = STATE_SET_NEIGHBOR_UPDATE;
  
  // boolean flags to bound print statements
  uint8_t neighbor_set = NOT_SET;
  uint8_t sensor_set = NOT_SET;
     bf0:	00 e0       	ldi	r16, 0x00	; 0
  // intitial state information
  states cur_state = STATE_WAIT;
  states last_state = STATE_SET_NEIGHBOR_UPDATE;
  
  // boolean flags to bound print statements
  uint8_t neighbor_set = NOT_SET;
     bf2:	10 e0       	ldi	r17, 0x00	; 0
  nrk_sig_t uart_rx_signal = nrk_uart_rx_signal_get();
  nrk_signal_register(uart_rx_signal);
  
  // intitial state information
  states cur_state = STATE_WAIT;
  states last_state = STATE_SET_NEIGHBOR_UPDATE;
     bf4:	93 e0       	ldi	r25, 0x03	; 3
  // get the UART signal and register it
  nrk_sig_t uart_rx_signal = nrk_uart_rx_signal_get();
  nrk_signal_register(uart_rx_signal);
  
  // intitial state information
  states cur_state = STATE_WAIT;
     bf6:	d6 e0       	ldi	r29, 0x06	; 6
              if(print_incoming == 1) {
                nrk_kprintf(PSTR("Streaming off.\r\n# "));
                print_incoming = 0;
              } else {
                nrk_kprintf(PSTR("Streaming on.\r\n"));
                print_incoming = 1;
     bf8:	ff 24       	eor	r15, r15
     bfa:	f3 94       	inc	r15

  // initial welcome statement
  nrk_kprintf(PSTR("Welcome!\r\n"));
  
  while (1) {
   switch(cur_state) {
     bfc:	d3 30       	cpi	r29, 0x03	; 3
     bfe:	c1 f0       	breq	.+48     	; 0xc30 <ui_task+0x50>
     c00:	18 f4       	brcc	.+6      	; 0xc08 <ui_task+0x28>
     c02:	d2 30       	cpi	r29, 0x02	; 2
     c04:	31 f1       	breq	.+76     	; 0xc52 <ui_task+0x72>
     c06:	47 c0       	rjmp	.+142    	; 0xc96 <ui_task+0xb6>
     c08:	d4 30       	cpi	r29, 0x04	; 4
     c0a:	a1 f1       	breq	.+104    	; 0xc74 <ui_task+0x94>
     c0c:	d5 30       	cpi	r29, 0x05	; 5
     c0e:	09 f0       	breq	.+2      	; 0xc12 <ui_task+0x32>
     c10:	42 c0       	rjmp	.+132    	; 0xc96 <ui_task+0xb6>
        break;
      
      // PRINT DATA - print light data and return to the WAIT state
      case STATE_PRINT_DATA:
        // state actions
        nrk_sem_pend(light_pool_mux);
     c12:	80 91 b9 0d 	lds	r24, 0x0DB9
     c16:	90 91 ba 0d 	lds	r25, 0x0DBA
     c1a:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
        print_light_pool(&light_pool);
     c1e:	88 ec       	ldi	r24, 0xC8	; 200
     c20:	9f e0       	ldi	r25, 0x0F	; 15
     c22:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <print_light_pool>
        nrk_sem_post(light_pool_mux);
     c26:	80 91 b9 0d 	lds	r24, 0x0DB9
     c2a:	90 91 ba 0d 	lds	r25, 0x0DBA
     c2e:	30 c0       	rjmp	.+96     	; 0xc90 <ui_task+0xb0>
  while (1) {
   switch(cur_state) {
      // SET_NEIGHTBOR_RATE - set the neighbor rate and return to the WAIT state
      case STATE_SET_NEIGHBOR_UPDATE:
        // state actions
        if(neighbor_set != SET) {
     c30:	11 30       	cpi	r17, 0x01	; 1
     c32:	11 f4       	brne	.+4      	; 0xc38 <ui_task+0x58>
        }
        
        // state transitions
        last_state = cur_state;
        if(neighbor_set == SET) {
          neighbor_set = NOT_SET; // reset flag
     c34:	10 e0       	ldi	r17, 0x00	; 0
     c36:	90 c0       	rjmp	.+288    	; 0xd58 <ui_task+0x178>
   switch(cur_state) {
      // SET_NEIGHTBOR_RATE - set the neighbor rate and return to the WAIT state
      case STATE_SET_NEIGHBOR_UPDATE:
        // state actions
        if(neighbor_set != SET) {
          if(last_state != cur_state) {
     c38:	93 30       	cpi	r25, 0x03	; 3
     c3a:	21 f0       	breq	.+8      	; 0xc44 <ui_task+0x64>
            nrk_kprintf(PSTR("\r\nPlease set the neighbor update rate. (1-30 seconds)\r\n# "));
     c3c:	88 e1       	ldi	r24, 0x18	; 24
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
          }
          neighbor_set = set_neighbor_rate();
     c44:	0e 94 82 05 	call	0xb04	; 0xb04 <set_neighbor_rate>
     c48:	18 2f       	mov	r17, r24
        }
        
        // state transitions
        last_state = cur_state;
        if(neighbor_set == SET) {
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	99 f3       	breq	.-26     	; 0xc34 <ui_task+0x54>
          neighbor_set = NOT_SET; // reset flag
          cur_state = STATE_WAIT;          
        } else {
          cur_state = STATE_SET_NEIGHBOR_UPDATE;
     c4e:	c3 e0       	ldi	r28, 0x03	; 3
     c50:	84 c0       	rjmp	.+264    	; 0xd5a <ui_task+0x17a>
        }
        break;
        
      // SET SENSOR POLL - set the sensor poll rate and return to the WAIT state
      case STATE_SET_SENSOR_POLL:
        if(sensor_set != SET) {
     c52:	01 30       	cpi	r16, 0x01	; 1
     c54:	11 f4       	brne	.+4      	; 0xc5a <ui_task+0x7a>
        }
        
        // state transitions
        last_state = cur_state;
        if(sensor_set == SET) {
          sensor_set = NOT_SET;
     c56:	00 e0       	ldi	r16, 0x00	; 0
     c58:	7f c0       	rjmp	.+254    	; 0xd58 <ui_task+0x178>
        break;
        
      // SET SENSOR POLL - set the sensor poll rate and return to the WAIT state
      case STATE_SET_SENSOR_POLL:
        if(sensor_set != SET) {
          if(last_state != cur_state) {
     c5a:	92 30       	cpi	r25, 0x02	; 2
     c5c:	21 f0       	breq	.+8      	; 0xc66 <ui_task+0x86>
            nrk_kprintf(PSTR("\r\nPlease set the sensor update rate. (1-30 seconds)\r\n# "));
     c5e:	80 ee       	ldi	r24, 0xE0	; 224
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
          }
          sensor_set = set_sensor_rate();
     c66:	0e 94 b9 05 	call	0xb72	; 0xb72 <set_sensor_rate>
     c6a:	08 2f       	mov	r16, r24
        }
        
        // state transitions
        last_state = cur_state;
        if(sensor_set == SET) {
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	99 f3       	breq	.-26     	; 0xc56 <ui_task+0x76>
          sensor_set = NOT_SET;
          cur_state = STATE_WAIT;
        } else {
          cur_state = STATE_SET_SENSOR_POLL;
     c70:	c2 e0       	ldi	r28, 0x02	; 2
     c72:	73 c0       	rjmp	.+230    	; 0xd5a <ui_task+0x17a>
        break;
        
      // PRINT MAP - print the neighbor map and return to the WAIT state
      case STATE_PRINT_MAP:
        // state actions
        nrk_sem_pend(neighbor_graph_mux);
     c74:	80 91 23 09 	lds	r24, 0x0923
     c78:	90 91 24 09 	lds	r25, 0x0924
     c7c:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
        print_neighbor_graph(&neighbor_graph);
     c80:	84 ed       	ldi	r24, 0xD4	; 212
     c82:	95 e0       	ldi	r25, 0x05	; 5
     c84:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <print_neighbor_graph>
        nrk_sem_post(neighbor_graph_mux);        
     c88:	80 91 23 09 	lds	r24, 0x0923
     c8c:	90 91 24 09 	lds	r25, 0x0924
      // PRINT DATA - print light data and return to the WAIT state
      case STATE_PRINT_DATA:
        // state actions
        nrk_sem_pend(light_pool_mux);
        print_light_pool(&light_pool);
        nrk_sem_post(light_pool_mux);
     c90:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
     c94:	61 c0       	rjmp	.+194    	; 0xd58 <ui_task+0x178>
      
      // WAIT - wait for user input and react
      case STATE_WAIT:
      default:
        // state output
        if(last_state != STATE_WAIT) {
     c96:	96 30       	cpi	r25, 0x06	; 6
     c98:	c1 f0       	breq	.+48     	; 0xcca <ui_task+0xea>
          nrk_kprintf(PSTR("\r\nHere are your options...\r\n"));
     c9a:	83 ec       	ldi	r24, 0xC3	; 195
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
          nrk_kprintf(PSTR("  n: update neighbor refresh rate.\r\n"));
     ca2:	8e e9       	ldi	r24, 0x9E	; 158
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
          nrk_kprintf(PSTR("  s: update sensor refresh rate.\r\n"));
     caa:	8b e7       	ldi	r24, 0x7B	; 123
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
          nrk_kprintf(PSTR("  m: view current neighbor dependencies.\r\n"));
     cb2:	80 e5       	ldi	r24, 0x50	; 80
     cb4:	92 e0       	ldi	r25, 0x02	; 2
     cb6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
          nrk_kprintf(PSTR("  l: view current light values.\r\n"));
     cba:	8e e2       	ldi	r24, 0x2E	; 46
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
          nrk_kprintf(PSTR("  p: stream incoming packets.\r\n# "));
     cc2:	8c e0       	ldi	r24, 0x0C	; 12
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
        }

        // state transitions
        last_state = cur_state;
        if(get_user_input()) {
     cca:	0e 94 31 05 	call	0xa62	; 0xa62 <get_user_input>
     cce:	88 23       	and	r24, r24
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <ui_task+0xf4>
     cd2:	42 c0       	rjmp	.+132    	; 0xd58 <ui_task+0x178>
          if(ui_index == 3) {
     cd4:	80 91 d8 04 	lds	r24, 0x04D8
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	71 f5       	brne	.+92     	; 0xd38 <ui_task+0x158>
            if(ui_buf[0] == 'n') {
     cdc:	90 91 e4 07 	lds	r25, 0x07E4
     ce0:	9e 36       	cpi	r25, 0x6E	; 110
     ce2:	81 f1       	breq	.+96     	; 0xd44 <ui_task+0x164>
              cur_state = STATE_SET_NEIGHBOR_UPDATE;
            } else if (ui_buf[0] == 's') {
     ce4:	93 37       	cpi	r25, 0x73	; 115
     ce6:	81 f1       	breq	.+96     	; 0xd48 <ui_task+0x168>
              cur_state = STATE_SET_SENSOR_POLL;
            } else if (ui_buf[0] == 'm') {
     ce8:	9d 36       	cpi	r25, 0x6D	; 109
     cea:	81 f1       	breq	.+96     	; 0xd4c <ui_task+0x16c>
              cur_state = STATE_PRINT_MAP;
            } else if (ui_buf[0] == 'l') {
     cec:	9c 36       	cpi	r25, 0x6C	; 108
     cee:	81 f1       	breq	.+96     	; 0xd50 <ui_task+0x170>
              cur_state = STATE_PRINT_DATA;
            } else if (ui_buf[0] == 'p') {
     cf0:	90 37       	cpi	r25, 0x70	; 112
     cf2:	f9 f4       	brne	.+62     	; 0xd32 <ui_task+0x152>
              nrk_sem_pend(print_mux);
     cf4:	80 91 37 0b 	lds	r24, 0x0B37
     cf8:	90 91 38 0b 	lds	r25, 0x0B38
     cfc:	0e 94 5d 20 	call	0x40ba	; 0x40ba <nrk_sem_pend>
              if(print_incoming == 1) {
     d00:	80 91 a1 08 	lds	r24, 0x08A1
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	39 f4       	brne	.+14     	; 0xd16 <ui_task+0x136>
                nrk_kprintf(PSTR("Streaming off.\r\n# "));
     d08:	89 ef       	ldi	r24, 0xF9	; 249
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
                print_incoming = 0;
     d10:	10 92 a1 08 	sts	0x08A1, r1
     d14:	06 c0       	rjmp	.+12     	; 0xd22 <ui_task+0x142>
              } else {
                nrk_kprintf(PSTR("Streaming on.\r\n"));
     d16:	89 ee       	ldi	r24, 0xE9	; 233
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
                print_incoming = 1;
     d1e:	f0 92 a1 08 	sts	0x08A1, r15
              }
              nrk_sem_post(print_mux);
     d22:	80 91 37 0b 	lds	r24, 0x0B37
     d26:	90 91 38 0b 	lds	r25, 0x0B38
     d2a:	0e 94 bc 20 	call	0x4178	; 0x4178 <nrk_sem_post>
     d2e:	cd 2f       	mov	r28, r29
     d30:	10 c0       	rjmp	.+32     	; 0xd52 <ui_task+0x172>
            } else {
              nrk_kprintf(PSTR("Invalid input.\r\n# "));
     d32:	86 ed       	ldi	r24, 0xD6	; 214
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <ui_task+0x15c>
              cur_state = STATE_WAIT;
            }
          } else {
            nrk_kprintf(PSTR("Invalid input.\r\n# "));
     d38:	83 ec       	ldi	r24, 0xC3	; 195
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
            cur_state = STATE_WAIT;
     d40:	c6 e0       	ldi	r28, 0x06	; 6
     d42:	07 c0       	rjmp	.+14     	; 0xd52 <ui_task+0x172>
        // state transitions
        last_state = cur_state;
        if(get_user_input()) {
          if(ui_index == 3) {
            if(ui_buf[0] == 'n') {
              cur_state = STATE_SET_NEIGHBOR_UPDATE;
     d44:	c3 e0       	ldi	r28, 0x03	; 3
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <ui_task+0x172>
            } else if (ui_buf[0] == 's') {
              cur_state = STATE_SET_SENSOR_POLL;
     d48:	c2 e0       	ldi	r28, 0x02	; 2
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <ui_task+0x172>
            } else if (ui_buf[0] == 'm') {
              cur_state = STATE_PRINT_MAP;
     d4c:	c4 e0       	ldi	r28, 0x04	; 4
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <ui_task+0x172>
            } else if (ui_buf[0] == 'l') {
              cur_state = STATE_PRINT_DATA;
     d50:	c5 e0       	ldi	r28, 0x05	; 5
            }
          } else {
            nrk_kprintf(PSTR("Invalid input.\r\n# "));
            cur_state = STATE_WAIT;
          }
          clear_ui_buf();
     d52:	0e 94 4c 05 	call	0xa98	; 0xa98 <clear_ui_buf>
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <ui_task+0x17a>
        } else {
          cur_state = STATE_WAIT;
     d58:	c6 e0       	ldi	r28, 0x06	; 6
        }
        break;
    }
    nrk_wait_until_next_period();
     d5a:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <nrk_wait_until_next_period>
  }
     d5e:	9d 2f       	mov	r25, r29
     d60:	dc 2f       	mov	r29, r28
     d62:	4c cf       	rjmp	.-360    	; 0xbfc <ui_task+0x1c>

00000d64 <nrk_create_taskset>:
 * nrk_create_taskset - create the tasks in this application
 * 
 * NOTE: task priority maps to importance. That is, priority(5) > priority(2).
 */
void nrk_create_taskset ()
{
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
  // PRIORITY 2
  TRANSMIT_TASK.task = transmit_task;
     d6a:	ce e7       	ldi	r28, 0x7E	; 126
     d6c:	d8 e0       	ldi	r29, 0x08	; 8
     d6e:	8e ec       	ldi	r24, 0xCE	; 206
     d70:	93 e0       	ldi	r25, 0x03	; 3
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
  nrk_task_set_stk( &TRANSMIT_TASK, transmit_task_stack, NRK_APP_STACKSIZE);
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	52 e0       	ldi	r21, 0x02	; 2
     d7a:	67 e2       	ldi	r22, 0x27	; 39
     d7c:	79 e0       	ldi	r23, 0x09	; 9
     d7e:	ce 01       	movw	r24, r28
     d80:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <nrk_task_set_stk>
  TRANSMIT_TASK.prio = 2;
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	88 87       	std	Y+8, r24	; 0x08
  TRANSMIT_TASK.FirstActivation = TRUE;
     d88:	11 e0       	ldi	r17, 0x01	; 1
     d8a:	1f 83       	std	Y+7, r17	; 0x07
  TRANSMIT_TASK.Type = BASIC_TASK;
     d8c:	19 87       	std	Y+9, r17	; 0x09
  TRANSMIT_TASK.SchType = PREEMPTIVE;
     d8e:	1a 87       	std	Y+10, r17	; 0x0a
  TRANSMIT_TASK.period.secs = 5;
     d90:	85 e0       	ldi	r24, 0x05	; 5
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	8b 87       	std	Y+11, r24	; 0x0b
     d9a:	9c 87       	std	Y+12, r25	; 0x0c
     d9c:	ad 87       	std	Y+13, r26	; 0x0d
     d9e:	be 87       	std	Y+14, r27	; 0x0e
  TRANSMIT_TASK.period.nano_secs = 0;
     da0:	1f 86       	std	Y+15, r1	; 0x0f
     da2:	18 8a       	std	Y+16, r1	; 0x10
     da4:	19 8a       	std	Y+17, r1	; 0x11
     da6:	1a 8a       	std	Y+18, r1	; 0x12
  TRANSMIT_TASK.cpu_reserve.secs = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	8b 8b       	std	Y+19, r24	; 0x13
     db2:	9c 8b       	std	Y+20, r25	; 0x14
     db4:	ad 8b       	std	Y+21, r26	; 0x15
     db6:	be 8b       	std	Y+22, r27	; 0x16
  TRANSMIT_TASK.cpu_reserve.nano_secs = 0;
     db8:	1f 8a       	std	Y+23, r1	; 0x17
     dba:	18 8e       	std	Y+24, r1	; 0x18
     dbc:	19 8e       	std	Y+25, r1	; 0x19
     dbe:	1a 8e       	std	Y+26, r1	; 0x1a
  TRANSMIT_TASK.offset.secs = 0;
     dc0:	1b 8e       	std	Y+27, r1	; 0x1b
     dc2:	1c 8e       	std	Y+28, r1	; 0x1c
     dc4:	1d 8e       	std	Y+29, r1	; 0x1d
     dc6:	1e 8e       	std	Y+30, r1	; 0x1e
  TRANSMIT_TASK.offset.nano_secs = 0;
     dc8:	1f 8e       	std	Y+31, r1	; 0x1f
     dca:	18 a2       	std	Y+32, r1	; 0x20
     dcc:	19 a2       	std	Y+33, r1	; 0x21
     dce:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TRANSMIT_TASK);
     dd0:	ce 01       	movw	r24, r28
     dd2:	0e 94 4e 22 	call	0x449c	; 0x449c <nrk_activate_task>
  
  // PRIORITY 3
  UI_TASK.task = ui_task;
     dd6:	c1 eb       	ldi	r28, 0xB1	; 177
     dd8:	d5 e0       	ldi	r29, 0x05	; 5
     dda:	80 ef       	ldi	r24, 0xF0	; 240
     ddc:	95 e0       	ldi	r25, 0x05	; 5
     dde:	9e 83       	std	Y+6, r25	; 0x06
     de0:	8d 83       	std	Y+5, r24	; 0x05
  nrk_task_set_stk( &UI_TASK, ui_task_stack, NRK_APP_STACKSIZE);
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	52 e0       	ldi	r21, 0x02	; 2
     de6:	64 ee       	ldi	r22, 0xE4	; 228
     de8:	75 e0       	ldi	r23, 0x05	; 5
     dea:	ce 01       	movw	r24, r28
     dec:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <nrk_task_set_stk>
  UI_TASK.prio = 3;
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	88 87       	std	Y+8, r24	; 0x08
  UI_TASK.FirstActivation = TRUE;
     df4:	1f 83       	std	Y+7, r17	; 0x07
  UI_TASK.Type = BASIC_TASK;
     df6:	19 87       	std	Y+9, r17	; 0x09
  UI_TASK.SchType = PREEMPTIVE;
     df8:	1a 87       	std	Y+10, r17	; 0x0a
  UI_TASK.period.secs = 0;
     dfa:	1b 86       	std	Y+11, r1	; 0x0b
     dfc:	1c 86       	std	Y+12, r1	; 0x0c
     dfe:	1d 86       	std	Y+13, r1	; 0x0d
     e00:	1e 86       	std	Y+14, r1	; 0x0e
  UI_TASK.period.nano_secs = 100*NANOS_PER_MS;
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	91 ee       	ldi	r25, 0xE1	; 225
     e06:	a5 ef       	ldi	r26, 0xF5	; 245
     e08:	b5 e0       	ldi	r27, 0x05	; 5
     e0a:	8f 87       	std	Y+15, r24	; 0x0f
     e0c:	98 8b       	std	Y+16, r25	; 0x10
     e0e:	a9 8b       	std	Y+17, r26	; 0x11
     e10:	ba 8b       	std	Y+18, r27	; 0x12
  UI_TASK.cpu_reserve.secs = 0;
     e12:	1b 8a       	std	Y+19, r1	; 0x13
     e14:	1c 8a       	std	Y+20, r1	; 0x14
     e16:	1d 8a       	std	Y+21, r1	; 0x15
     e18:	1e 8a       	std	Y+22, r1	; 0x16
  UI_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     e1a:	8f 8b       	std	Y+23, r24	; 0x17
     e1c:	98 8f       	std	Y+24, r25	; 0x18
     e1e:	a9 8f       	std	Y+25, r26	; 0x19
     e20:	ba 8f       	std	Y+26, r27	; 0x1a
  UI_TASK.offset.secs = 0;
     e22:	1b 8e       	std	Y+27, r1	; 0x1b
     e24:	1c 8e       	std	Y+28, r1	; 0x1c
     e26:	1d 8e       	std	Y+29, r1	; 0x1d
     e28:	1e 8e       	std	Y+30, r1	; 0x1e
  UI_TASK.offset.nano_secs = 0;
     e2a:	1f 8e       	std	Y+31, r1	; 0x1f
     e2c:	18 a2       	std	Y+32, r1	; 0x20
     e2e:	19 a2       	std	Y+33, r1	; 0x21
     e30:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&UI_TASK);
     e32:	ce 01       	movw	r24, r28
     e34:	0e 94 4e 22 	call	0x449c	; 0x449c <nrk_activate_task>
  
  // PRIORITY 4
  RECEIVE_TASK.task = receive_task;
     e38:	cb e5       	ldi	r28, 0x5B	; 91
     e3a:	d8 e0       	ldi	r29, 0x08	; 8
     e3c:	81 e6       	ldi	r24, 0x61	; 97
     e3e:	94 e0       	ldi	r25, 0x04	; 4
     e40:	9e 83       	std	Y+6, r25	; 0x06
     e42:	8d 83       	std	Y+5, r24	; 0x05
  nrk_task_set_stk( &RECEIVE_TASK, receive_task_stack, NRK_APP_STACKSIZE);
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	52 e0       	ldi	r21, 0x02	; 2
     e48:	69 e3       	ldi	r22, 0x39	; 57
     e4a:	7b e0       	ldi	r23, 0x0B	; 11
     e4c:	ce 01       	movw	r24, r28
     e4e:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <nrk_task_set_stk>
  RECEIVE_TASK.prio = 4;
     e52:	84 e0       	ldi	r24, 0x04	; 4
     e54:	88 87       	std	Y+8, r24	; 0x08
  RECEIVE_TASK.FirstActivation = TRUE;
     e56:	1f 83       	std	Y+7, r17	; 0x07
  RECEIVE_TASK.Type = BASIC_TASK;
     e58:	19 87       	std	Y+9, r17	; 0x09
  RECEIVE_TASK.SchType = PREEMPTIVE;
     e5a:	1a 87       	std	Y+10, r17	; 0x0a
  RECEIVE_TASK.period.secs = 0;
     e5c:	1b 86       	std	Y+11, r1	; 0x0b
     e5e:	1c 86       	std	Y+12, r1	; 0x0c
     e60:	1d 86       	std	Y+13, r1	; 0x0d
     e62:	1e 86       	std	Y+14, r1	; 0x0e
  RECEIVE_TASK.period.nano_secs = 10*NANOS_PER_MS;
     e64:	80 e8       	ldi	r24, 0x80	; 128
     e66:	96 e9       	ldi	r25, 0x96	; 150
     e68:	a8 e9       	ldi	r26, 0x98	; 152
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	8f 87       	std	Y+15, r24	; 0x0f
     e6e:	98 8b       	std	Y+16, r25	; 0x10
     e70:	a9 8b       	std	Y+17, r26	; 0x11
     e72:	ba 8b       	std	Y+18, r27	; 0x12
  RECEIVE_TASK.cpu_reserve.secs = 0;
     e74:	1b 8a       	std	Y+19, r1	; 0x13
     e76:	1c 8a       	std	Y+20, r1	; 0x14
     e78:	1d 8a       	std	Y+21, r1	; 0x15
     e7a:	1e 8a       	std	Y+22, r1	; 0x16
  RECEIVE_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
     e7c:	8f 8b       	std	Y+23, r24	; 0x17
     e7e:	98 8f       	std	Y+24, r25	; 0x18
     e80:	a9 8f       	std	Y+25, r26	; 0x19
     e82:	ba 8f       	std	Y+26, r27	; 0x1a
  RECEIVE_TASK.offset.secs = 0;
     e84:	1b 8e       	std	Y+27, r1	; 0x1b
     e86:	1c 8e       	std	Y+28, r1	; 0x1c
     e88:	1d 8e       	std	Y+29, r1	; 0x1d
     e8a:	1e 8e       	std	Y+30, r1	; 0x1e
  RECEIVE_TASK.offset.nano_secs = 0;
     e8c:	1f 8e       	std	Y+31, r1	; 0x1f
     e8e:	18 a2       	std	Y+32, r1	; 0x20
     e90:	19 a2       	std	Y+33, r1	; 0x21
     e92:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&RECEIVE_TASK);
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 4e 22 	call	0x449c	; 0x449c <nrk_activate_task>
  
  nrk_kprintf(PSTR("Create done.\r\n"));
     e9a:	84 eb       	ldi	r24, 0xB4	; 180
     e9c:	91 e0       	ldi	r25, 0x01	; 1
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
  RECEIVE_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
  RECEIVE_TASK.offset.secs = 0;
  RECEIVE_TASK.offset.nano_secs = 0;
  nrk_activate_task (&RECEIVE_TASK);
  
  nrk_kprintf(PSTR("Create done.\r\n"));
     ea4:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <nrk_kprintf>

00000ea8 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     ea8:	08 95       	ret

00000eaa <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     eaa:	64 30       	cpi	r22, 0x04	; 4
     eac:	21 f4       	brne	.+8      	; 0xeb6 <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     eae:	0e 94 16 13 	call	0x262c	; 0x262c <rf_security_set_ctr_counter>
  return NRK_OK;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     eb8:	08 95       	ret

00000eba <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	08 95       	ret

00000ebe <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	08 95       	ret

00000ec4 <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     ec4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <rf_auto_ack_disable>
  return NRK_OK;
}
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	08 95       	ret

00000ecc <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     ecc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <rf_auto_ack_enable>
  return NRK_OK;
}
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	08 95       	ret

00000ed4 <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     ed4:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <rf_addr_decode_disable>
  return NRK_OK;
}
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	08 95       	ret

00000edc <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     edc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <rf_addr_decode_enable>
  return NRK_OK;
}
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	08 95       	ret

00000ee4 <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     ee4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	08 95       	ret

00000eec <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     eec:	90 93 a4 08 	sts	0x08A4, r25
     ef0:	80 93 a3 08 	sts	0x08A3, r24
  return NRK_OK;
}
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	08 95       	ret

00000ef8 <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     ef8:	0e 94 14 13 	call	0x2628	; 0x2628 <rf_security_last_pkt_status>
}
     efc:	08 95       	ret

00000efe <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     efe:	60 31       	cpi	r22, 0x10	; 16
     f00:	21 f4       	brne	.+8      	; 0xf0a <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     f02:	0e 94 17 13 	call	0x262e	; 0x262e <rf_security_set_key>
  return NRK_OK;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     f0c:	08 95       	ret

00000f0e <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	08 95       	ret

00000f12 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	08 95       	ret

00000f16 <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	20 f4       	brcc	.+8      	; 0xf22 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     f1a:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <rf_tx_power>
  return NRK_OK;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     f22:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     f24:	08 95       	ret

00000f26 <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     f26:	80 93 e2 04 	sts	0x04E2, r24
     f2a:	08 95       	ret

00000f2c <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     f2c:	99 27       	eor	r25, r25
     f2e:	87 fd       	sbrc	r24, 7
     f30:	90 95       	com	r25
     f32:	0e 94 0a 13 	call	0x2614	; 0x2614 <rf_set_cca_thresh>
  return NRK_OK;
}
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	08 95       	ret

00000f3a <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	1f 92       	push	r1
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     f44:	8b 31       	cpi	r24, 0x1B	; 27
     f46:	80 f4       	brcc	.+32     	; 0xf68 <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     f48:	80 93 ec 04 	sts	0x04EC, r24
  rf_power_up ();
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	4f ef       	ldi	r20, 0xFF	; 255
     f58:	5f ef       	ldi	r21, 0xFF	; 255
     f5a:	69 81       	ldd	r22, Y+1	; 0x01
     f5c:	8b eb       	ldi	r24, 0xBB	; 187
     f5e:	9d e0       	ldi	r25, 0x0D	; 13
     f60:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <rf_init>
  return NRK_OK;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     f68:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     f6a:	0f 90       	pop	r0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     f72:	80 91 ef 04 	lds	r24, 0x04EF
     f76:	88 23       	and	r24, r24
     f78:	11 f1       	breq	.+68     	; 0xfbe <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     f7a:	80 91 ae 08 	lds	r24, 0x08AE
     f7e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	00 90 ae 08 	lds	r0, 0x08AE
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <bmac_wait_until_rx_pkt+0x2a>
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	d2 f7       	brpl	.-12     	; 0xf94 <bmac_wait_until_rx_pkt+0x22>
     fa0:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	00 90 ae 08 	lds	r0, 0x08AE
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <bmac_wait_until_rx_pkt+0x44>
     fae:	b6 95       	lsr	r27
     fb0:	a7 95       	ror	r26
     fb2:	97 95       	ror	r25
     fb4:	87 95       	ror	r24
     fb6:	0a 94       	dec	r0
     fb8:	d2 f7       	brpl	.-12     	; 0xfae <bmac_wait_until_rx_pkt+0x3c>
     fba:	80 ff       	sbrs	r24, 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
     fc4:	08 95       	ret

00000fc6 <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	51 f0       	breq	.+20     	; 0xfde <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     fca:	90 93 c1 0d 	sts	0x0DC1, r25
     fce:	80 93 c0 0d 	sts	0x0DC0, r24
  bmac_rfRxInfo.max_length = size;
     fd2:	60 93 bf 0d 	sts	0x0DBF, r22
  rx_buf_empty = 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	80 93 ef 04 	sts	0x04EF, r24
  return NRK_OK;
     fdc:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     fde:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     fe0:	08 95       	ret

00000fe2 <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	18 2f       	mov	r17, r24
  bmac_running = 0;
     fea:	10 92 ee 04 	sts	0x04EE, r1
  tx_reserve = -1;
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	80 93 e1 04 	sts	0x04E1, r24
  cca_active = true;
     ff4:	d1 e0       	ldi	r29, 0x01	; 1
     ff6:	d0 93 e2 04 	sts	0x04E2, r29
  rx_failure_cnt = 0;
     ffa:	10 92 f1 04 	sts	0x04F1, r1
     ffe:	10 92 f2 04 	sts	0x04F2, r1
    1002:	10 92 f3 04 	sts	0x04F3, r1
    1006:	10 92 f4 04 	sts	0x04F4, r1
#endif
#endif



  _bmac_check_period.secs = 0;
    100a:	10 92 e3 04 	sts	0x04E3, r1
    100e:	10 92 e4 04 	sts	0x04E4, r1
    1012:	10 92 e5 04 	sts	0x04E5, r1
    1016:	10 92 e6 04 	sts	0x04E6, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	91 ee       	ldi	r25, 0xE1	; 225
    101e:	a5 ef       	ldi	r26, 0xF5	; 245
    1020:	b5 e0       	ldi	r27, 0x05	; 5
    1022:	80 93 e7 04 	sts	0x04E7, r24
    1026:	90 93 e8 04 	sts	0x04E8, r25
    102a:	a0 93 e9 04 	sts	0x04E9, r26
    102e:	b0 93 ea 04 	sts	0x04EA, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
    1032:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <nrk_signal_create>
    1036:	c8 2f       	mov	r28, r24
    1038:	80 93 ae 08 	sts	0x08AE, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
    103c:	8f 3f       	cpi	r24, 0xFF	; 255
    103e:	19 f4       	brne	.+6      	; 0x1046 <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
    1040:	81 e9       	ldi	r24, 0x91	; 145
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
    1046:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <nrk_signal_create>
    104a:	c8 2f       	mov	r28, r24
    104c:	80 93 d2 0f 	sts	0x0FD2, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	69 f4       	brne	.+26     	; 0x106e <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
    1054:	89 e6       	ldi	r24, 0x69	; 105
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    105c:	e0 91 4e 11 	lds	r30, 0x114E
    1060:	f0 91 4f 11 	lds	r31, 0x114F
    1064:	60 85       	ldd	r22, Z+8	; 0x08
    1066:	8e e0       	ldi	r24, 0x0E	; 14
    1068:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
    return NRK_ERROR;
    106c:	2a c0       	rjmp	.+84     	; 0x10c2 <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
    106e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <nrk_signal_create>
    1072:	c8 2f       	mov	r28, r24
    1074:	80 93 a2 08 	sts	0x08A2, r24
  if (bmac_enable_signal == NRK_ERROR) {
    1078:	8f 3f       	cpi	r24, 0xFF	; 255
    107a:	19 f4       	brne	.+6      	; 0x1082 <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
    107c:	8d e3       	ldi	r24, 0x3D	; 61
    107e:	94 e0       	ldi	r25, 0x04	; 4
    1080:	eb cf       	rjmp	.-42     	; 0x1058 <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
    1082:	10 92 f0 04 	sts	0x04F0, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
    1086:	10 92 ef 04 	sts	0x04EF, r1
  bmac_rfRxInfo.pPayload = NULL;
    108a:	10 92 c1 0d 	sts	0x0DC1, r1
    108e:	10 92 c0 0d 	sts	0x0DC0, r1
  bmac_rfRxInfo.max_length = 0;
    1092:	10 92 bf 0d 	sts	0x0DBF, r1

  // Setup the cc2420 chip
  rf_power_up ();
    1096:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	4f ef       	ldi	r20, 0xFF	; 255
    10a0:	5f ef       	ldi	r21, 0xFF	; 255
    10a2:	61 2f       	mov	r22, r17
    10a4:	8b eb       	ldi	r24, 0xBB	; 187
    10a6:	9d e0       	ldi	r25, 0x0D	; 13
    10a8:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <rf_init>
  g_chan = chan;
    10ac:	10 93 ec 04 	sts	0x04EC, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 0a 13 	call	0x2614	; 0x2614 <rf_set_cca_thresh>
  bmac_running = 1;
    10b8:	d0 93 ee 04 	sts	0x04EE, r29
  is_enabled = 1;
    10bc:	d0 93 eb 04 	sts	0x04EB, r29
  return NRK_OK;
    10c0:	c1 e0       	ldi	r28, 0x01	; 1
}
    10c2:	8c 2f       	mov	r24, r28
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	08 95       	ret

000010cc <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    10cc:	20 91 f0 04 	lds	r18, 0x04F0
    10d0:	21 30       	cpi	r18, 0x01	; 1
    10d2:	59 f0       	breq	.+22     	; 0x10ea <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
    10d4:	21 e0       	ldi	r18, 0x01	; 1
    10d6:	20 93 f0 04 	sts	0x04F0, r18
  bmac_rfTxInfo.pPayload = buf;
    10da:	90 93 a7 08 	sts	0x08A7, r25
    10de:	80 93 a6 08 	sts	0x08A6, r24
  bmac_rfTxInfo.length = len;
    10e2:	60 93 a5 08 	sts	0x08A5, r22
  return NRK_OK;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
    10ec:	08 95       	ret

000010ee <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
    10ee:	80 91 ae 08 	lds	r24, 0x08AE
    10f2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
    10f6:	80 91 ae 08 	lds	r24, 0x08AE
    10fa:	08 95       	ret

000010fc <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
    10fc:	80 91 d2 0f 	lds	r24, 0x0FD2
    1100:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
    1104:	80 91 d2 0f 	lds	r24, 0x0FD2
    1108:	08 95       	ret

0000110a <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
    1112:	20 91 f0 04 	lds	r18, 0x04F0
    1116:	21 30       	cpi	r18, 0x01	; 1
    1118:	f1 f1       	breq	.+124    	; 0x1196 <bmac_tx_pkt+0x8c>
    111a:	f6 2e       	mov	r15, r22
    111c:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
    111e:	80 91 d2 0f 	lds	r24, 0x0FD2
    1122:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
  tx_data_ready = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	80 93 f0 04 	sts	0x04F0, r24
  bmac_rfTxInfo.pPayload = buf;
    112c:	d0 92 a7 08 	sts	0x08A7, r13
    1130:	c0 92 a6 08 	sts	0x08A6, r12
  bmac_rfTxInfo.length = len;
    1134:	f0 92 a5 08 	sts	0x08A5, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a0 e0       	ldi	r26, 0x00	; 0
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	00 90 d2 0f 	lds	r0, 0x0FD2
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <bmac_tx_pkt+0x48>
    114a:	66 0f       	add	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	d2 f7       	brpl	.-12     	; 0x114a <bmac_tx_pkt+0x40>
    1156:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <nrk_event_wait>
    115a:	6b 01       	movw	r12, r22
    115c:	7c 01       	movw	r14, r24
  if (mask == 0)
    115e:	61 15       	cp	r22, r1
    1160:	71 05       	cpc	r23, r1
    1162:	81 05       	cpc	r24, r1
    1164:	91 05       	cpc	r25, r1
    1166:	21 f4       	brne	.+8      	; 0x1170 <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
    1168:	89 e1       	ldi	r24, 0x19	; 25
    116a:	94 e0       	ldi	r25, 0x04	; 4
    116c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    1170:	00 90 d2 0f 	lds	r0, 0x0FD2
    1174:	04 c0       	rjmp	.+8      	; 0x117e <bmac_tx_pkt+0x74>
    1176:	f6 94       	lsr	r15
    1178:	e7 94       	ror	r14
    117a:	d7 94       	ror	r13
    117c:	c7 94       	ror	r12
    117e:	0a 94       	dec	r0
    1180:	d2 f7       	brpl	.-12     	; 0x1176 <bmac_tx_pkt+0x6c>
    1182:	c0 fc       	sbrc	r12, 0
    1184:	04 c0       	rjmp	.+8      	; 0x118e <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
    1186:	86 ef       	ldi	r24, 0xF6	; 246
    1188:	93 e0       	ldi	r25, 0x03	; 3
    118a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
  if (pkt_got_ack)
    118e:	80 91 ed 04 	lds	r24, 0x04ED
    1192:	81 11       	cpse	r24, r1
    1194:	02 c0       	rjmp	.+4      	; 0x119a <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	01 c0       	rjmp	.+2      	; 0x119c <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
    119a:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	08 95       	ret

000011a6 <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
    11a6:	20 91 ef 04 	lds	r18, 0x04EF
    11aa:	22 23       	and	r18, r18
    11ac:	39 f0       	breq	.+14     	; 0x11bc <bmac_rx_pkt_get+0x16>
    *len = 0;
    11ae:	fc 01       	movw	r30, r24
    11b0:	10 82       	st	Z, r1
    *rssi = 0;
    11b2:	fb 01       	movw	r30, r22
    11b4:	10 82       	st	Z, r1
    return NULL;
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
    11bc:	20 91 be 0d 	lds	r18, 0x0DBE
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
    11c4:	80 91 c3 0d 	lds	r24, 0x0DC3
    11c8:	fb 01       	movw	r30, r22
    11ca:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
    11cc:	80 91 c0 0d 	lds	r24, 0x0DC0
    11d0:	90 91 c1 0d 	lds	r25, 0x0DC1
}
    11d4:	08 95       	ret

000011d6 <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 91 ef 04 	lds	r25, 0x04EF
    11dc:	91 11       	cpse	r25, r1
    11de:	80 e0       	ldi	r24, 0x00	; 0
}
    11e0:	08 95       	ret

000011e2 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 93 ef 04 	sts	0x04EF, r24
  return NRK_OK;
}
    11e8:	08 95       	ret

000011ea <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
    11ea:	10 92 eb 04 	sts	0x04EB, r1
  rf_power_down ();
    11ee:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <rf_power_down>

000011f2 <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 eb 04 	sts	0x04EB, r24
  rf_power_up ();
    11f8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
    11fc:	80 91 a2 08 	lds	r24, 0x08A2
    1200:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <nrk_event_signal>

00001204 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	28 97       	sbiw	r28, 0x08	; 8
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	29 83       	std	Y+1, r18	; 0x01
    121a:	3a 83       	std	Y+2, r19	; 0x02
    121c:	4b 83       	std	Y+3, r20	; 0x03
    121e:	5c 83       	std	Y+4, r21	; 0x04
    1220:	6d 83       	std	Y+5, r22	; 0x05
    1222:	7e 83       	std	Y+6, r23	; 0x06
    1224:	8f 83       	std	Y+7, r24	; 0x07
    1226:	98 87       	std	Y+8, r25	; 0x08
    1228:	49 81       	ldd	r20, Y+1	; 0x01
    122a:	5a 81       	ldd	r21, Y+2	; 0x02
    122c:	6b 81       	ldd	r22, Y+3	; 0x03
    122e:	7c 81       	ldd	r23, Y+4	; 0x04
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	af 81       	ldd	r26, Y+7	; 0x07
    1236:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
    1238:	41 15       	cp	r20, r1
    123a:	51 05       	cpc	r21, r1
    123c:	61 05       	cpc	r22, r1
    123e:	71 05       	cpc	r23, r1
    1240:	41 f4       	brne	.+16     	; 0x1252 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    1242:	81 15       	cp	r24, r1
    1244:	2d e2       	ldi	r18, 0x2D	; 45
    1246:	92 07       	cpc	r25, r18
    1248:	21 e3       	ldi	r18, 0x31	; 49
    124a:	a2 07       	cpc	r26, r18
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	b2 07       	cpc	r27, r18
    1250:	90 f0       	brcs	.+36     	; 0x1276 <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
    1252:	40 93 e3 04 	sts	0x04E3, r20
    1256:	50 93 e4 04 	sts	0x04E4, r21
    125a:	60 93 e5 04 	sts	0x04E5, r22
    125e:	70 93 e6 04 	sts	0x04E6, r23
  _bmac_check_period.nano_secs = period.nano_secs;
    1262:	80 93 e7 04 	sts	0x04E7, r24
    1266:	90 93 e8 04 	sts	0x04E8, r25
    126a:	a0 93 e9 04 	sts	0x04E9, r26
    126e:	b0 93 ea 04 	sts	0x04EA, r27
  return NRK_OK;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
    1276:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
    1278:	28 96       	adiw	r28, 0x08	; 8
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
    128a:	80 91 ee 04 	lds	r24, 0x04EE
    128e:	08 95       	ret

00001290 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
    1290:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
    1292:	0e 94 44 10 	call	0x2088	; 0x2088 <rf_rx_on>
  val += rf_cca_check ();
    1296:	0e 94 a4 11 	call	0x2348	; 0x2348 <rf_cca_check>
    129a:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
    129c:	0e 94 a4 11 	call	0x2348	; 0x2348 <rf_cca_check>
    12a0:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
    12a2:	0e 94 a4 11 	call	0x2348	; 0x2348 <rf_cca_check>
    12a6:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
    12a8:	0e 94 4a 10 	call	0x2094	; 0x2094 <rf_rx_off>
    12ac:	8c 2f       	mov	r24, r28
    12ae:	1c 16       	cp	r1, r28
    12b0:	0c f4       	brge	.+2      	; 0x12b4 <_bmac_channel_check+0x24>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
    12b8:	0e 94 44 10 	call	0x2088	; 0x2088 <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
    12bc:	10 92 d9 04 	sts	0x04D9, r1
    12c0:	10 92 da 04 	sts	0x04DA, r1
    12c4:	10 92 db 04 	sts	0x04DB, r1
    12c8:	10 92 dc 04 	sts	0x04DC, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
    12cc:	80 e4       	ldi	r24, 0x40	; 64
    12ce:	68 2f       	mov	r22, r24
    12d0:	80 93 dd 04 	sts	0x04DD, r24
    12d4:	8b e4       	ldi	r24, 0x4B	; 75
    12d6:	80 93 de 04 	sts	0x04DE, r24
    12da:	8c e4       	ldi	r24, 0x4C	; 76
    12dc:	80 93 df 04 	sts	0x04DF, r24
    12e0:	10 92 e0 04 	sts	0x04E0, r1
  nrk_wait (dummy_t);
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 91 da 04 	lds	r19, 0x04DA
    12ea:	40 91 db 04 	lds	r20, 0x04DB
    12ee:	50 91 dc 04 	lds	r21, 0x04DC
    12f2:	7b e4       	ldi	r23, 0x4B	; 75
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nrk_wait>

  n = rf_rx_packet_nonblock ();
    12fa:	0e 94 d6 11 	call	0x23ac	; 0x23ac <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	e9 f0       	breq	.+58     	; 0x133c <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
    1302:	80 91 f1 04 	lds	r24, 0x04F1
    1306:	90 91 f2 04 	lds	r25, 0x04F2
    130a:	a0 91 f3 04 	lds	r26, 0x04F3
    130e:	b0 91 f4 04 	lds	r27, 0x04F4
    1312:	8f 3f       	cpi	r24, 0xFF	; 255
    1314:	2f ef       	ldi	r18, 0xFF	; 255
    1316:	92 07       	cpc	r25, r18
    1318:	a1 05       	cpc	r26, r1
    131a:	b1 05       	cpc	r27, r1
    131c:	58 f4       	brcc	.+22     	; 0x1334 <_bmac_rx+0x7c>
      rx_failure_cnt++;
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	a1 1d       	adc	r26, r1
    1322:	b1 1d       	adc	r27, r1
    1324:	80 93 f1 04 	sts	0x04F1, r24
    1328:	90 93 f2 04 	sts	0x04F2, r25
    132c:	a0 93 f3 04 	sts	0x04F3, r26
    1330:	b0 93 f4 04 	sts	0x04F4, r27
    rf_rx_off ();
    1334:	0e 94 4a 10 	call	0x2094	; 0x2094 <rf_rx_off>
    return 0;
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
    133c:	10 92 ef 04 	sts	0x04EF, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
    1340:	0e 94 4a 10 	call	0x2094	; 0x2094 <rf_rx_off>
  return 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
}
    1346:	08 95       	ret

00001348 <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
    1348:	80 91 f1 04 	lds	r24, 0x04F1
    134c:	90 91 f2 04 	lds	r25, 0x04F2
    1350:	08 95       	ret

00001352 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
    1352:	10 92 f1 04 	sts	0x04F1, r1
    1356:	10 92 f2 04 	sts	0x04F2, r1
    135a:	10 92 f3 04 	sts	0x04F3, r1
    135e:	10 92 f4 04 	sts	0x04F4, r1
  return NRK_OK;
}
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	08 95       	ret

00001366 <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	58 f0       	brcs	.+22     	; 0x1380 <_b_pow+0x1a>
    return 1;
  if (in > 7)
    136a:	88 30       	cpi	r24, 0x08	; 8
    136c:	08 f0       	brcs	.+2      	; 0x1370 <_b_pow+0xa>
    in = 6;                     // cap it at 128 
    136e:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
    1370:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
    1372:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
    1374:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	28 13       	cpse	r18, r24
    137a:	fc cf       	rjmp	.-8      	; 0x1374 <_b_pow+0xe>
    result = result * 2;
  return result;
    137c:	89 2f       	mov	r24, r25
    137e:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
    1382:	08 95       	ret

00001384 <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
    1390:	80 91 e2 04 	lds	r24, 0x04E2
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <_bmac_tx+0x16>
    1398:	43 c0       	rjmp	.+134    	; 0x1420 <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
    139a:	83 ee       	ldi	r24, 0xE3	; 227
    139c:	94 e0       	ldi	r25, 0x04	; 4
    139e:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <_nrk_time_to_ticks>
    13a2:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
    13a4:	0e 94 4d 31 	call	0x629a	; 0x629a <rand>
    13a8:	6a e0       	ldi	r22, 0x0A	; 10
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__divmodhi4>
    13b0:	bc 01       	movw	r22, r24
    13b2:	6f 5f       	subi	r22, 0xFF	; 255
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 44 30 	call	0x6088	; 0x6088 <__udivmodhi4>
    13bc:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
    13be:	0e 94 87 23 	call	0x470e	; 0x470e <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
    13c2:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
    13c4:	0a e0       	ldi	r16, 0x0A	; 10
    13c6:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
    13c8:	0e 94 48 09 	call	0x1290	; 0x1290 <_bmac_channel_check>
    13cc:	d8 2f       	mov	r29, r24
      if (v == 1)
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	39 f1       	breq	.+78     	; 0x1420 <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
    13d2:	0e 94 4d 31 	call	0x629a	; 0x629a <rand>
    13d6:	7c 01       	movw	r14, r24
    13d8:	8c 2f       	mov	r24, r28
    13da:	0e 94 b3 09 	call	0x1366	; 0x1366 <_b_pow>
    13de:	68 2f       	mov	r22, r24
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	c7 01       	movw	r24, r14
    13e4:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
    13e8:	99 27       	eor	r25, r25
    13ea:	0e 94 1b 23 	call	0x4636	; 0x4636 <nrk_wait_until_next_n_periods>
      backoff_count++;
    13ee:	cf 5f       	subi	r28, 0xFF	; 255
    13f0:	c7 30       	cpi	r28, 0x07	; 7
    13f2:	08 f0       	brcs	.+2      	; 0x13f6 <_bmac_tx+0x72>
    13f4:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
    13f6:	83 ee       	ldi	r24, 0xE3	; 227
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <_nrk_time_to_ticks>
    13fe:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
    1400:	0e 94 4d 31 	call	0x629a	; 0x629a <rand>
    1404:	b8 01       	movw	r22, r16
    1406:	0e 94 58 30 	call	0x60b0	; 0x60b0 <__divmodhi4>
    140a:	bc 01       	movw	r22, r24
    140c:	6f 5f       	subi	r22, 0xFF	; 255
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	c7 01       	movw	r24, r14
    1412:	0e 94 44 30 	call	0x6088	; 0x6088 <__udivmodhi4>
    1416:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
    1418:	0e 94 87 23 	call	0x470e	; 0x470e <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
    141c:	dd 23       	and	r29, r29
    141e:	a1 f2       	breq	.-88     	; 0x13c8 <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
    1420:	10 92 a8 08 	sts	0x08A8, r1
  bmac_rfTxInfo.ackRequest = 0;
    1424:	10 92 a9 08 	sts	0x08A9, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
    1428:	20 91 e3 04 	lds	r18, 0x04E3
    142c:	30 91 e4 04 	lds	r19, 0x04E4
    1430:	88 ee       	ldi	r24, 0xE8	; 232
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	28 9f       	mul	r18, r24
    1436:	e0 01       	movw	r28, r0
    1438:	29 9f       	mul	r18, r25
    143a:	d0 0d       	add	r29, r0
    143c:	38 9f       	mul	r19, r24
    143e:	d0 0d       	add	r29, r0
    1440:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    1442:	60 91 e7 04 	lds	r22, 0x04E7
    1446:	70 91 e8 04 	lds	r23, 0x04E8
    144a:	80 91 e9 04 	lds	r24, 0x04E9
    144e:	90 91 ea 04 	lds	r25, 0x04EA
    1452:	20 e4       	ldi	r18, 0x40	; 64
    1454:	32 e4       	ldi	r19, 0x42	; 66
    1456:	4f e0       	ldi	r20, 0x0F	; 15
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <__udivmodsi4>
    145e:	c2 0f       	add	r28, r18
    1460:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    1462:	0e 94 44 10 	call	0x2088	; 0x2088 <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    1466:	be 01       	movw	r22, r28
    1468:	83 ea       	ldi	r24, 0xA3	; 163
    146a:	98 e0       	ldi	r25, 0x08	; 8
    146c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <rf_tx_packet_repeat>
    1470:	80 93 ed 04 	sts	0x04ED, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    1474:	0e 94 4a 10 	call	0x2094	; 0x2094 <rf_rx_off>
  tx_data_ready = 0;
    1478:	10 92 f0 04 	sts	0x04F0, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    147c:	80 91 d2 0f 	lds	r24, 0x0FD2
    1480:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <nrk_event_signal>
  return NRK_OK;
}
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	08 95       	ret

00001494 <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    1494:	80 91 ee 04 	lds	r24, 0x04EE
    1498:	81 11       	cpse	r24, r1
    149a:	03 c0       	rjmp	.+6      	; 0x14a2 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    149c:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <nrk_wait_until_next_period>
    14a0:	f9 cf       	rjmp	.-14     	; 0x1494 <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    14a2:	80 91 a2 08 	lds	r24, 0x08A2
    14a6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
  if (v == NRK_ERROR)
    14aa:	8f 3f       	cpi	r24, 0xFF	; 255
    14ac:	21 f4       	brne	.+8      	; 0x14b6 <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    14ae:	8a ed       	ldi	r24, 0xDA	; 218
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    14b6:	c1 2c       	mov	r12, r1
    14b8:	d1 2c       	mov	r13, r1
    14ba:	76 01       	movw	r14, r12
    14bc:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    14be:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <rf_power_up>
    if (is_enabled) {
    14c2:	80 91 eb 04 	lds	r24, 0x04EB
    14c6:	88 23       	and	r24, r24
    14c8:	69 f1       	breq	.+90     	; 0x1524 <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    14ca:	80 91 ef 04 	lds	r24, 0x04EF
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	41 f4       	brne	.+16     	; 0x14e2 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
    14d2:	0e 94 48 09 	call	0x1290	; 0x1290 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    14d6:	81 11       	cpse	r24, r1
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    14da:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_bmac_rx>
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	21 f4       	brne	.+8      	; 0x14ea <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    14e2:	80 91 ae 08 	lds	r24, 0x08AE
    14e6:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    14ea:	80 91 f0 04 	lds	r24, 0x04F0
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <bmac_nw_task+0x62>
        _bmac_tx ();
    14f2:	0e 94 c2 09 	call	0x1384	; 0x1384 <_bmac_tx>
      }
      rf_rx_off ();
    14f6:	0e 94 4a 10 	call	0x2094	; 0x2094 <rf_rx_off>
      rf_power_down ();
    14fa:	0e 94 56 0f 	call	0x1eac	; 0x1eac <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    14fe:	20 91 e3 04 	lds	r18, 0x04E3
    1502:	30 91 e4 04 	lds	r19, 0x04E4
    1506:	40 91 e5 04 	lds	r20, 0x04E5
    150a:	50 91 e6 04 	lds	r21, 0x04E6
    150e:	60 91 e7 04 	lds	r22, 0x04E7
    1512:	70 91 e8 04 	lds	r23, 0x04E8
    1516:	80 91 e9 04 	lds	r24, 0x04E9
    151a:	90 91 ea 04 	lds	r25, 0x04EA
    151e:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nrk_wait>
    1522:	cd cf       	rjmp	.-102    	; 0x14be <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    1524:	80 91 a2 08 	lds	r24, 0x08A2
    1528:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    152c:	c7 01       	movw	r24, r14
    152e:	b6 01       	movw	r22, r12
    1530:	00 90 a2 08 	lds	r0, 0x08A2
    1534:	04 c0       	rjmp	.+8      	; 0x153e <bmac_nw_task+0xaa>
    1536:	66 0f       	add	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	d2 f7       	brpl	.-12     	; 0x1536 <bmac_nw_task+0xa2>
    1542:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	00 90 a2 08 	lds	r0, 0x08A2
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <bmac_nw_task+0xc4>
    1550:	b6 95       	lsr	r27
    1552:	a7 95       	ror	r26
    1554:	97 95       	ror	r25
    1556:	87 95       	ror	r24
    1558:	0a 94       	dec	r0
    155a:	d2 f7       	brpl	.-12     	; 0x1550 <bmac_nw_task+0xbc>
    155c:	80 ff       	sbrs	r24, 0
    155e:	e2 cf       	rjmp	.-60     	; 0x1524 <bmac_nw_task+0x90>
    1560:	ae cf       	rjmp	.-164    	; 0x14be <bmac_nw_task+0x2a>

00001562 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    1562:	6a e4       	ldi	r22, 0x4A	; 74
    1564:	7a e0       	ldi	r23, 0x0A	; 10
    1566:	85 e7       	ldi	r24, 0x75	; 117
    1568:	95 e0       	ldi	r25, 0x05	; 5
    156a:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    156e:	40 e8       	ldi	r20, 0x80	; 128
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	65 ef       	ldi	r22, 0xF5	; 245
    1574:	74 e0       	ldi	r23, 0x04	; 4
    1576:	85 e7       	ldi	r24, 0x75	; 117
    1578:	95 e0       	ldi	r25, 0x05	; 5
    157a:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    157e:	e5 e7       	ldi	r30, 0x75	; 117
    1580:	f5 e0       	ldi	r31, 0x05	; 5
    1582:	84 e1       	ldi	r24, 0x14	; 20
    1584:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    158a:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    158c:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    158e:	13 86       	std	Z+11, r1	; 0x0b
    1590:	14 86       	std	Z+12, r1	; 0x0c
    1592:	15 86       	std	Z+13, r1	; 0x0d
    1594:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	9d e2       	ldi	r25, 0x2D	; 45
    159a:	a1 e3       	ldi	r26, 0x31	; 49
    159c:	b1 e0       	ldi	r27, 0x01	; 1
    159e:	87 87       	std	Z+15, r24	; 0x0f
    15a0:	90 8b       	std	Z+16, r25	; 0x10
    15a2:	a1 8b       	std	Z+17, r26	; 0x11
    15a4:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    15a6:	13 8a       	std	Z+19, r1	; 0x13
    15a8:	14 8a       	std	Z+20, r1	; 0x14
    15aa:	15 8a       	std	Z+21, r1	; 0x15
    15ac:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    15ae:	17 8a       	std	Z+23, r1	; 0x17
    15b0:	10 8e       	std	Z+24, r1	; 0x18
    15b2:	11 8e       	std	Z+25, r1	; 0x19
    15b4:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    15b6:	13 8e       	std	Z+27, r1	; 0x1b
    15b8:	14 8e       	std	Z+28, r1	; 0x1c
    15ba:	15 8e       	std	Z+29, r1	; 0x1d
    15bc:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    15be:	17 8e       	std	Z+31, r1	; 0x1f
    15c0:	10 a2       	std	Z+32, r1	; 0x20
    15c2:	11 a2       	std	Z+33, r1	; 0x21
    15c4:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    15c6:	cf 01       	movw	r24, r30
    15c8:	0c 94 4e 22 	jmp	0x449c	; 0x449c <nrk_activate_task>

000015cc <assemble_packet>:
 */
 
#include <assembler.h>

void assemble_packet(uint8_t *tx_buf, packet *tx)
{
    15cc:	fb 01       	movw	r30, r22
    switch(tx->type)
    15ce:	20 81       	ld	r18, Z
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	39 f1       	breq	.+78     	; 0x1622 <assemble_packet+0x56>
    15d4:	23 30       	cpi	r18, 0x03	; 3
    15d6:	09 f4       	brne	.+2      	; 0x15da <assemble_packet+0xe>
    15d8:	4e c0       	rjmp	.+156    	; 0x1676 <assemble_packet+0xaa>
    15da:	21 30       	cpi	r18, 0x01	; 1
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <assemble_packet+0x14>
    15de:	6f c0       	rjmp	.+222    	; 0x16be <assemble_packet+0xf2>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            sprintf (tx_buf, "[%d][%d][%d][%d][%d]", tx->type, tx->source_id, tx->seq_num, 
    15e0:	36 81       	ldd	r19, Z+6	; 0x06
    15e2:	3f 93       	push	r19
    15e4:	35 81       	ldd	r19, Z+5	; 0x05
    15e6:	3f 93       	push	r19
    15e8:	34 81       	ldd	r19, Z+4	; 0x04
    15ea:	1f 92       	push	r1
    15ec:	3f 93       	push	r19
    15ee:	33 81       	ldd	r19, Z+3	; 0x03
    15f0:	3f 93       	push	r19
    15f2:	32 81       	ldd	r19, Z+2	; 0x02
    15f4:	3f 93       	push	r19
    15f6:	31 81       	ldd	r19, Z+1	; 0x01
    15f8:	1f 92       	push	r1
    15fa:	3f 93       	push	r19
    15fc:	1f 92       	push	r1
    15fe:	2f 93       	push	r18
    1600:	21 ef       	ldi	r18, 0xF1	; 241
    1602:	32 e0       	ldi	r19, 0x02	; 2
    1604:	3f 93       	push	r19
    1606:	2f 93       	push	r18
    1608:	9f 93       	push	r25
    160a:	8f 93       	push	r24
    160c:	0e 94 b0 32 	call	0x6560	; 0x6560 <sprintf>
            tx->num_hops, tx->light_value);
            break;
    1610:	8d b7       	in	r24, 0x3d	; 61
    1612:	9e b7       	in	r25, 0x3e	; 62
    1614:	0e 96       	adiw	r24, 0x0e	; 14
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	9e bf       	out	0x3e, r25	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	8d bf       	out	0x3d, r24	; 61
    1620:	08 95       	ret
        }
        
        case MSG_NODE_NEIGHBORS:
        {
          sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d,%d,%d]", tx->type, tx->source_id, tx->seq_num, 
    1622:	33 85       	ldd	r19, Z+11	; 0x0b
    1624:	1f 92       	push	r1
    1626:	3f 93       	push	r19
    1628:	32 85       	ldd	r19, Z+10	; 0x0a
    162a:	1f 92       	push	r1
    162c:	3f 93       	push	r19
    162e:	31 85       	ldd	r19, Z+9	; 0x09
    1630:	1f 92       	push	r1
    1632:	3f 93       	push	r19
    1634:	36 81       	ldd	r19, Z+6	; 0x06
    1636:	3f 93       	push	r19
    1638:	35 81       	ldd	r19, Z+5	; 0x05
    163a:	3f 93       	push	r19
    163c:	34 81       	ldd	r19, Z+4	; 0x04
    163e:	1f 92       	push	r1
    1640:	3f 93       	push	r19
    1642:	33 81       	ldd	r19, Z+3	; 0x03
    1644:	3f 93       	push	r19
    1646:	32 81       	ldd	r19, Z+2	; 0x02
    1648:	3f 93       	push	r19
    164a:	31 81       	ldd	r19, Z+1	; 0x01
    164c:	1f 92       	push	r1
    164e:	3f 93       	push	r19
    1650:	1f 92       	push	r1
    1652:	2f 93       	push	r18
    1654:	2e ec       	ldi	r18, 0xCE	; 206
    1656:	32 e0       	ldi	r19, 0x02	; 2
    1658:	3f 93       	push	r19
    165a:	2f 93       	push	r18
    165c:	9f 93       	push	r25
    165e:	8f 93       	push	r24
    1660:	0e 94 b0 32 	call	0x6560	; 0x6560 <sprintf>
          tx->num_hops, tx->light_value, tx->neighbor_table.neighbors[0].id,  tx->neighbor_table.neighbors[1].id, tx->neighbor_table.neighbors[2].id);
            break;
    1664:	8d b7       	in	r24, 0x3d	; 61
    1666:	9e b7       	in	r25, 0x3e	; 62
    1668:	44 96       	adiw	r24, 0x14	; 20
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	9e bf       	out	0x3e, r25	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	8d bf       	out	0x3d, r24	; 61
    1674:	08 95       	ret
        }
        
        case MSG_GATEWAY:
        {
          sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d]", tx->type, tx->source_id, tx->seq_num, 
    1676:	37 85       	ldd	r19, Z+15	; 0x0f
    1678:	3f 93       	push	r19
    167a:	36 85       	ldd	r19, Z+14	; 0x0e
    167c:	3f 93       	push	r19
    167e:	35 85       	ldd	r19, Z+13	; 0x0d
    1680:	3f 93       	push	r19
    1682:	34 85       	ldd	r19, Z+12	; 0x0c
    1684:	3f 93       	push	r19
    1686:	34 81       	ldd	r19, Z+4	; 0x04
    1688:	1f 92       	push	r1
    168a:	3f 93       	push	r19
    168c:	33 81       	ldd	r19, Z+3	; 0x03
    168e:	3f 93       	push	r19
    1690:	32 81       	ldd	r19, Z+2	; 0x02
    1692:	3f 93       	push	r19
    1694:	31 81       	ldd	r19, Z+1	; 0x01
    1696:	1f 92       	push	r1
    1698:	3f 93       	push	r19
    169a:	1f 92       	push	r1
    169c:	2f 93       	push	r18
    169e:	2d ee       	ldi	r18, 0xED	; 237
    16a0:	32 e0       	ldi	r19, 0x02	; 2
    16a2:	3f 93       	push	r19
    16a4:	2f 93       	push	r18
    16a6:	9f 93       	push	r25
    16a8:	8f 93       	push	r24
    16aa:	0e 94 b0 32 	call	0x6560	; 0x6560 <sprintf>
          tx->num_hops, tx->sensor_sample_rate, tx->neighbor_update_rate);
            break;
    16ae:	8d b7       	in	r24, 0x3d	; 61
    16b0:	9e b7       	in	r25, 0x3e	; 62
    16b2:	40 96       	adiw	r24, 0x10	; 16
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	9e bf       	out	0x3e, r25	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	8d bf       	out	0x3d, r24	; 61
    16be:	08 95       	ret

000016c0 <in_light_pool>:
 * @param lp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_light_pool(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    16c0:	fc 01       	movw	r30, r24
    16c2:	21 91       	ld	r18, Z+
    16c4:	cf 01       	movw	r24, r30
    16c6:	3e 2f       	mov	r19, r30
    16c8:	38 1b       	sub	r19, r24
    16ca:	32 17       	cp	r19, r18
    16cc:	28 f4       	brcc	.+10     	; 0x16d8 <in_light_pool+0x18>
        if(lp->node_id[i] == node_address) {
    16ce:	31 91       	ld	r19, Z+
    16d0:	36 13       	cpse	r19, r22
    16d2:	f9 cf       	rjmp	.-14     	; 0x16c6 <in_light_pool+0x6>
            return 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    16d6:	08 95       	ret
    for(uint8_t i = 0; i < lp->size; i++) {
        if(lp->node_id[i] == node_address) {
            return 1;
        }
    }
    return -1;
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	08 95       	ret

000016dc <get_light_pool_index>:
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    16dc:	fc 01       	movw	r30, r24
    16de:	81 91       	ld	r24, Z+
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	98 17       	cp	r25, r24
    16e4:	39 f0       	breq	.+14     	; 0x16f4 <get_light_pool_index+0x18>
        if(lp->node_id[i] == node_address) {
    16e6:	21 91       	ld	r18, Z+
    16e8:	26 13       	cpse	r18, r22
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <get_light_pool_index+0x14>
            return i;
    16ec:	89 2f       	mov	r24, r25
    16ee:	08 95       	ret
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    16f0:	9f 5f       	subi	r25, 0xFF	; 255
    16f2:	f7 cf       	rjmp	.-18     	; 0x16e2 <get_light_pool_index+0x6>
        if(lp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
}
    16f6:	08 95       	ret

000016f8 <add_to_light_pool>:
 * @param lp - light pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param light_value - light value of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    if((lp->size < MAX_POOL) && (in_light_pool(lp, node_address) == -1)) {
    1704:	fc 01       	movw	r30, r24
    1706:	c0 81       	ld	r28, Z
    1708:	c8 30       	cpi	r28, 0x08	; 8
    170a:	d8 f4       	brcc	.+54     	; 0x1742 <add_to_light_pool+0x4a>
    170c:	7a 01       	movw	r14, r20
    170e:	d6 2f       	mov	r29, r22
    1710:	8c 01       	movw	r16, r24
    1712:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <in_light_pool>
    1716:	8f 3f       	cpi	r24, 0xFF	; 255
    1718:	a1 f4       	brne	.+40     	; 0x1742 <add_to_light_pool+0x4a>
        uint8_t index = lp->size;
        lp->size++;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	8c 0f       	add	r24, r28
    171e:	f8 01       	movw	r30, r16
    1720:	80 83       	st	Z, r24
        lp->node_id[index] = node_address;
    1722:	2c 2f       	mov	r18, r28
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	e2 0f       	add	r30, r18
    1728:	f3 1f       	adc	r31, r19
    172a:	d1 83       	std	Z+1, r29	; 0x01
        lp->light_values[index] = light_value;
    172c:	2e 5f       	subi	r18, 0xFE	; 254
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	22 0f       	add	r18, r18
    1732:	33 1f       	adc	r19, r19
    1734:	f8 01       	movw	r30, r16
    1736:	e2 0f       	add	r30, r18
    1738:	f3 1f       	adc	r31, r19
    173a:	f1 82       	std	Z+1, r15	; 0x01
    173c:	e0 82       	st	Z, r14
        return 1;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <add_to_light_pool+0x4c>
    }
    return -1;
    1742:	8f ef       	ldi	r24, 0xFF	; 255
}
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	08 95       	ret

00001752 <update_light_pool>:
 * @param lp - light pool to be updated
 * @param node_address - node whose light value needs updating
 * @param light_value - new light value of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	1f 93       	push	r17
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	ec 01       	movw	r28, r24
    175e:	16 2f       	mov	r17, r22
    1760:	7a 01       	movw	r14, r20
    int8_t in_lp, index;
    
    in_lp = in_light_pool(lp, node_address);
    1762:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <in_light_pool>
    if(in_lp == -1) {
    1766:	8f 3f       	cpi	r24, 0xFF	; 255
    1768:	31 f4       	brne	.+12     	; 0x1776 <update_light_pool+0x24>
        add_to_light_pool(lp, node_address, light_value);
    176a:	a7 01       	movw	r20, r14
    176c:	61 2f       	mov	r22, r17
    176e:	ce 01       	movw	r24, r28
    1770:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <add_to_light_pool>
    1774:	0d c0       	rjmp	.+26     	; 0x1790 <update_light_pool+0x3e>
        return 1;
    } else {
        index = get_light_pool_index(lp, node_address);
    1776:	61 2f       	mov	r22, r17
    1778:	ce 01       	movw	r24, r28
    177a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <get_light_pool_index>
        if(index >= 0) {
    177e:	87 fd       	sbrc	r24, 7
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <update_light_pool+0x42>
            lp->light_values[index] = light_value;
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	89 02       	muls	r24, r25
    1786:	c0 0d       	add	r28, r0
    1788:	d1 1d       	adc	r29, r1
    178a:	11 24       	eor	r1, r1
    178c:	fd 82       	std	Y+5, r15	; 0x05
    178e:	ec 82       	std	Y+4, r14	; 0x04
            return 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <update_light_pool+0x44>
        }        
    }

    return -1;
    1794:	8f ef       	ldi	r24, 0xFF	; 255
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	08 95       	ret

000017a2 <print_light_pool>:

void print_light_pool(light_pool_t *lp) {
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	8c 01       	movw	r16, r24
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    17ae:	89 eb       	ldi	r24, 0xB9	; 185
    17b0:	94 e0       	ldi	r25, 0x04	; 4
    17b2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
    for(uint8_t k = 0; k < lp->size; k++) {
    17b6:	c0 e0       	ldi	r28, 0x00	; 0
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    17b8:	96 e0       	ldi	r25, 0x06	; 6
    17ba:	e9 2e       	mov	r14, r25
    17bc:	93 e0       	ldi	r25, 0x03	; 3
    17be:	f9 2e       	mov	r15, r25
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    17c0:	f8 01       	movw	r30, r16
    17c2:	80 81       	ld	r24, Z
    17c4:	c8 17       	cp	r28, r24
    17c6:	f0 f4       	brcc	.+60     	; 0x1804 <print_light_pool+0x62>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    17c8:	2c 2f       	mov	r18, r28
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	32 96       	adiw	r30, 0x02	; 2
    17d0:	ee 0f       	add	r30, r30
    17d2:	ff 1f       	adc	r31, r31
    17d4:	e0 0f       	add	r30, r16
    17d6:	f1 1f       	adc	r31, r17
    17d8:	81 81       	ldd	r24, Z+1	; 0x01
    17da:	8f 93       	push	r24
    17dc:	80 81       	ld	r24, Z
    17de:	8f 93       	push	r24
    17e0:	f8 01       	movw	r30, r16
    17e2:	e2 0f       	add	r30, r18
    17e4:	f3 1f       	adc	r31, r19
    17e6:	81 81       	ldd	r24, Z+1	; 0x01
    17e8:	1f 92       	push	r1
    17ea:	8f 93       	push	r24
    17ec:	ff 92       	push	r15
    17ee:	ef 92       	push	r14
    17f0:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    17f4:	cf 5f       	subi	r28, 0xFF	; 255
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	de cf       	rjmp	.-68     	; 0x17c0 <print_light_pool+0x1e>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    }
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	08 95       	ret

00001810 <init_neighbor_table>:

/*** NEIGHBOR TABLE OPERATIONS ***/
/**
 * init_neighbor_table
 */
void init_neighbor_table(neighbor_table_t *nt) {
    1810:	fc 01       	movw	r30, r24
    nt->size = 0;
    1812:	10 82       	st	Z, r1

    // need to actually force id values to 0 because when we send our the neighbor packet...
    // we send all 4 items. Therefore an old value can still be in [3] but the size could be 2.
    for(uint8_t i = 0; i < MAX_NEIGHBOR_TABLE; i++)
    {
        nt->neighbors[i].id = 0;
    1814:	12 82       	std	Z+2, r1	; 0x02
    1816:	13 82       	std	Z+3, r1	; 0x03
    1818:	14 82       	std	Z+4, r1	; 0x04
    181a:	08 95       	ret

0000181c <in_neighbor_table>:
 * @param nt - neighbor table to search
 * @param node_address - node to search for
 * @returns '1' if node is found, '-1' otherwise
 */
int8_t in_neighbor_table(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    181c:	fc 01       	movw	r30, r24
    181e:	20 81       	ld	r18, Z
    1820:	02 96       	adiw	r24, 0x02	; 2
    1822:	fc 01       	movw	r30, r24
    1824:	3e 2f       	mov	r19, r30
    1826:	38 1b       	sub	r19, r24
    1828:	32 17       	cp	r19, r18
    182a:	28 f4       	brcc	.+10     	; 0x1836 <in_neighbor_table+0x1a>
        if(nt->neighbors[i].id == node_address) {
    182c:	31 91       	ld	r19, Z+
    182e:	36 13       	cpse	r19, r22
    1830:	f9 cf       	rjmp	.-14     	; 0x1824 <in_neighbor_table+0x8>
            return 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    1834:	08 95       	ret
    for(uint8_t i = 0; i < nt->size; i++) {
        if(nt->neighbors[i].id == node_address) {
            return 1;
        }
    }
    return -1;
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	08 95       	ret

0000183a <add_neighbor>:
}

void add_neighbor(neighbor_table_t *nt, neighbor_t new_neighbor) {
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
    1842:	16 2f       	mov	r17, r22
    uint8_t in_nt = in_neighbor_table(nt, new_neighbor.id);
    printf("neighbor table size %d\r\n", nt->size);
    1844:	88 81       	ld	r24, Y
    1846:	1f 92       	push	r1
    1848:	8f 93       	push	r24
    184a:	8f e1       	ldi	r24, 0x1F	; 31
    184c:	93 e0       	ldi	r25, 0x03	; 3
    184e:	9f 93       	push	r25
    1850:	8f 93       	push	r24
    1852:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    if((nt->size < MAX_NEIGHBOR_TABLE) && (in_nt != -1))
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	88 81       	ld	r24, Y
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	a0 f4       	brcc	.+40     	; 0x188c <add_neighbor+0x52>
    {
        printf("new neighbor %d\r\n", new_neighbor.id);
    1864:	1f 92       	push	r1
    1866:	1f 93       	push	r17
    1868:	88 e3       	ldi	r24, 0x38	; 56
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	9f 93       	push	r25
    186e:	8f 93       	push	r24
    1870:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
        nt->neighbors[nt->size] = new_neighbor;
    1874:	88 81       	ld	r24, Y
    1876:	fe 01       	movw	r30, r28
    1878:	e8 0f       	add	r30, r24
    187a:	f1 1d       	adc	r31, r1
    187c:	12 83       	std	Z+2, r17	; 0x02
        nt->size++;
    187e:	88 81       	ld	r24, Y
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	88 83       	st	Y, r24
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    }
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	08 95       	ret

00001894 <get_neighbor_table_index>:
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    1894:	fc 01       	movw	r30, r24
    1896:	20 81       	ld	r18, Z
    1898:	32 96       	adiw	r30, 0x02	; 2
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	82 17       	cp	r24, r18
    189e:	29 f0       	breq	.+10     	; 0x18aa <get_neighbor_table_index+0x16>
        if(nt->neighbors[i].id == node_address) {
    18a0:	91 91       	ld	r25, Z+
    18a2:	96 17       	cp	r25, r22
    18a4:	19 f0       	breq	.+6      	; 0x18ac <get_neighbor_table_index+0x18>
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    18a6:	8f 5f       	subi	r24, 0xFF	; 255
    18a8:	f9 cf       	rjmp	.-14     	; 0x189c <get_neighbor_table_index+0x8>
        if(nt->neighbors[i].id == node_address) {
            return i;
        }
    }
    return -1;
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
}
    18ac:	08 95       	ret

000018ae <print_neighbor_table>:
}*

/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    18ae:	af 92       	push	r10
    18b0:	bf 92       	push	r11
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	ec 01       	movw	r28, r24
    printf("[");
    18c2:	8b e5       	ldi	r24, 0x5B	; 91
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <putchar>
    for (uint8_t i=0; i < nt->size; i++) {
    18ca:	d1 2c       	mov	r13, r1
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
    18cc:	0a e4       	ldi	r16, 0x4A	; 74
    18ce:	13 e0       	ldi	r17, 0x03	; 3
        if (i < (nt->size-1))
            printf(", ");
    18d0:	8d e4       	ldi	r24, 0x4D	; 77
    18d2:	e8 2e       	mov	r14, r24
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	f8 2e       	mov	r15, r24
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    18d8:	88 81       	ld	r24, Y
    18da:	d8 16       	cp	r13, r24
    18dc:	f8 f4       	brcc	.+62     	; 0x191c <print_neighbor_table+0x6e>
        uint8_t node_id = nt->neighbors[i].id;
    18de:	ad 2c       	mov	r10, r13
    18e0:	b1 2c       	mov	r11, r1
    18e2:	fe 01       	movw	r30, r28
    18e4:	ea 0d       	add	r30, r10
    18e6:	fb 1d       	adc	r31, r11
        printf("%d", node_id);
    18e8:	82 81       	ldd	r24, Z+2	; 0x02
    18ea:	1f 92       	push	r1
    18ec:	8f 93       	push	r24
    18ee:	1f 93       	push	r17
    18f0:	0f 93       	push	r16
    18f2:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
        if (i < (nt->size-1))
    18f6:	28 81       	ld	r18, Y
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	21 50       	subi	r18, 0x01	; 1
    18fc:	31 09       	sbc	r19, r1
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	a2 16       	cp	r10, r18
    1908:	b3 06       	cpc	r11, r19
    190a:	34 f4       	brge	.+12     	; 0x1918 <print_neighbor_table+0x6a>
            printf(", ");
    190c:	ff 92       	push	r15
    190e:	ef 92       	push	r14
    1910:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    1918:	d3 94       	inc	r13
    191a:	de cf       	rjmp	.-68     	; 0x18d8 <print_neighbor_table+0x2a>
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    191c:	8d e2       	ldi	r24, 0x2D	; 45
    191e:	94 e0       	ldi	r25, 0x04	; 4
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    1932:	0c 94 80 32 	jmp	0x6500	; 0x6500 <puts>

00001936 <in_neighbor_graph>:
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    1936:	fc 01       	movw	r30, r24
    1938:	30 81       	ld	r19, Z
    193a:	02 96       	adiw	r24, 0x02	; 2
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	23 17       	cp	r18, r19
    1940:	41 f0       	breq	.+16     	; 0x1952 <in_neighbor_graph+0x1c>
    1942:	05 96       	adiw	r24, 0x05	; 5
    1944:	fc 01       	movw	r30, r24
    1946:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    1948:	40 81       	ld	r20, Z
    194a:	46 17       	cp	r20, r22
    194c:	21 f0       	breq	.+8      	; 0x1956 <in_neighbor_graph+0x20>
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    194e:	2f 5f       	subi	r18, 0xFF	; 255
    1950:	f6 cf       	rjmp	.-20     	; 0x193e <in_neighbor_graph+0x8>
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
        }
    }
    return -1;
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	08 95       	ret
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    1958:	08 95       	ret

0000195a <get_neighbor_graph_index>:
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    195a:	fc 01       	movw	r30, r24
    195c:	40 81       	ld	r20, Z
    195e:	9c 01       	movw	r18, r24
    1960:	2e 5f       	subi	r18, 0xFE	; 254
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	84 17       	cp	r24, r20
    1968:	49 f0       	breq	.+18     	; 0x197c <get_neighbor_graph_index+0x22>
    196a:	2b 5f       	subi	r18, 0xFB	; 251
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	f9 01       	movw	r30, r18
    1970:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    1972:	90 81       	ld	r25, Z
    1974:	96 17       	cp	r25, r22
    1976:	19 f0       	breq	.+6      	; 0x197e <get_neighbor_graph_index+0x24>
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    1978:	8f 5f       	subi	r24, 0xFF	; 255
    197a:	f5 cf       	rjmp	.-22     	; 0x1966 <get_neighbor_graph_index+0xc>
        if(ng->neighbor_tables[i].origin == node_address) {
            return i;
        }
    }
    return -1;
    197c:	8f ef       	ldi	r24, 0xFF	; 255
}
    197e:	08 95       	ret

00001980 <add_to_neighbor_graph>:
 *
 * @param ng - neighbor graph to which to add
 * @param new_table - new neighbor table to add to the neighbor graph
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	dc 01       	movw	r26, r24
    1986:	fb 01       	movw	r30, r22
    //printf("     add %d to neighbor_graph\r\n", nt->origin);
    if((ng->size < MAX_GRAPH)) {
    1988:	8c 91       	ld	r24, X
    198a:	88 30       	cpi	r24, 0x08	; 8
    198c:	00 f5       	brcc	.+64     	; 0x19ce <add_to_neighbor_graph+0x4e>
        uint8_t index = ng->size;
        ng->size++;
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	98 0f       	add	r25, r24
    1992:	9c 93       	st	X, r25
        ng->neighbor_tables[index].size = nt->size;
    1994:	90 81       	ld	r25, Z
    1996:	45 e0       	ldi	r20, 0x05	; 5
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	ed 01       	movw	r28, r26
    199e:	48 9f       	mul	r20, r24
    19a0:	c0 0d       	add	r28, r0
    19a2:	d1 1d       	adc	r29, r1
    19a4:	11 24       	eor	r1, r1
    19a6:	99 83       	std	Y+1, r25	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    19a8:	81 81       	ldd	r24, Z+1	; 0x01
    19aa:	8a 83       	std	Y+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	8b 83       	std	Y+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    19b0:	83 81       	ldd	r24, Z+3	; 0x03
    19b2:	8c 83       	std	Y+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    19b4:	54 81       	ldd	r21, Z+4	; 0x04
    19b6:	2f 5f       	subi	r18, 0xFF	; 255
    19b8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ba:	42 9f       	mul	r20, r18
    19bc:	c0 01       	movw	r24, r0
    19be:	43 9f       	mul	r20, r19
    19c0:	90 0d       	add	r25, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	a8 0f       	add	r26, r24
    19c6:	b9 1f       	adc	r27, r25
    19c8:	5c 93       	st	X, r21
        return 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <add_to_neighbor_graph+0x50>
    }
    return -1;
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <update_neighbor_graph>:
 * 
 * @param ng - neighbor graph to update
 * @param nt - neighbor table to update
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	8c 01       	movw	r16, r24
    19e2:	eb 01       	movw	r28, r22
    int8_t in_ng, index;
    
    in_ng = in_neighbor_graph(ng, nt->origin);
    19e4:	f9 80       	ldd	r15, Y+1	; 0x01
    19e6:	6f 2d       	mov	r22, r15
    19e8:	0e 94 9b 0c 	call	0x1936	; 0x1936 <in_neighbor_graph>
    if(in_ng == -1) {
    19ec:	8f 3f       	cpi	r24, 0xFF	; 255
    19ee:	29 f4       	brne	.+10     	; 0x19fa <update_neighbor_graph+0x24>
        add_to_neighbor_graph(ng, nt);
    19f0:	be 01       	movw	r22, r28
    19f2:	c8 01       	movw	r24, r16
    19f4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <add_to_neighbor_graph>
        return 1;
    19f8:	24 c0       	rjmp	.+72     	; 0x1a42 <update_neighbor_graph+0x6c>
    } else {
        index = get_neighbor_graph_index(ng, nt->origin);
    19fa:	6f 2d       	mov	r22, r15
    19fc:	c8 01       	movw	r24, r16
    19fe:	0e 94 ad 0c 	call	0x195a	; 0x195a <get_neighbor_graph_index>
        ng->neighbor_tables[index].size = nt->size;
    1a02:	28 2f       	mov	r18, r24
    1a04:	33 27       	eor	r19, r19
    1a06:	27 fd       	sbrc	r18, 7
    1a08:	30 95       	com	r19
    1a0a:	88 81       	ld	r24, Y
    1a0c:	45 e0       	ldi	r20, 0x05	; 5
    1a0e:	42 9f       	mul	r20, r18
    1a10:	f0 01       	movw	r30, r0
    1a12:	43 9f       	mul	r20, r19
    1a14:	f0 0d       	add	r31, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	e0 0f       	add	r30, r16
    1a1a:	f1 1f       	adc	r31, r17
    1a1c:	81 83       	std	Z+1, r24	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	82 83       	std	Z+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	83 83       	std	Z+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	84 83       	std	Z+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    1a2a:	5c 81       	ldd	r21, Y+4	; 0x04
    1a2c:	2f 5f       	subi	r18, 0xFF	; 255
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	42 9f       	mul	r20, r18
    1a32:	c0 01       	movw	r24, r0
    1a34:	43 9f       	mul	r20, r19
    1a36:	90 0d       	add	r25, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	e8 0f       	add	r30, r24
    1a3e:	f9 1f       	adc	r31, r25
    1a40:	50 83       	st	Z, r21
        return 1;
    }
    return -1;
}
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	08 95       	ret

00001a50 <print_neighbor_graph>:
 * print_neighbor_graph:
 *  - print the current neighbor information
 * 
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	8c 01       	movw	r16, r24
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    1a5e:	83 ed       	ldi	r24, 0xD3	; 211
    1a60:	94 e0       	ldi	r25, 0x04	; 4
    1a62:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
    for(uint8_t i = 0; i < ng->size; i++) {
    1a66:	c0 e0       	ldi	r28, 0x00	; 0
        nt = ng->neighbor_tables[i];
    1a68:	d5 e0       	ldi	r29, 0x05	; 5
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    1a6a:	80 e5       	ldi	r24, 0x50	; 80
    1a6c:	e8 2e       	mov	r14, r24
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	f8 2e       	mov	r15, r24
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    1a72:	f8 01       	movw	r30, r16
    1a74:	80 81       	ld	r24, Z
    1a76:	c8 17       	cp	r28, r24
    1a78:	00 f5       	brcc	.+64     	; 0x1aba <print_neighbor_graph+0x6a>
        nt = ng->neighbor_tables[i];
    1a7a:	f8 01       	movw	r30, r16
    1a7c:	dc 9f       	mul	r29, r28
    1a7e:	e0 0d       	add	r30, r0
    1a80:	f1 1d       	adc	r31, r1
    1a82:	11 24       	eor	r1, r1
    1a84:	31 96       	adiw	r30, 0x01	; 1
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    1a86:	84 81       	ldd	r24, Z+4	; 0x04
    1a88:	1f 92       	push	r1
    1a8a:	8f 93       	push	r24
    1a8c:	83 81       	ldd	r24, Z+3	; 0x03
    1a8e:	1f 92       	push	r1
    1a90:	8f 93       	push	r24
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	1f 92       	push	r1
    1a96:	8f 93       	push	r24
    1a98:	81 81       	ldd	r24, Z+1	; 0x01
    1a9a:	1f 92       	push	r1
    1a9c:	8f 93       	push	r24
    1a9e:	ff 92       	push	r15
    1aa0:	ef 92       	push	r14
    1aa2:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    1aa6:	cf 5f       	subi	r28, 0xFF	; 255
    1aa8:	8d b7       	in	r24, 0x3d	; 61
    1aaa:	9e b7       	in	r25, 0x3e	; 62
    1aac:	0a 96       	adiw	r24, 0x0a	; 10
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	9e bf       	out	0x3e, r25	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	8d bf       	out	0x3d, r24	; 61
    1ab8:	dc cf       	rjmp	.-72     	; 0x1a72 <print_neighbor_graph+0x22>
        nt = ng->neighbor_tables[i];
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    }
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	08 95       	ret

00001ac8 <print_packet>:
 */
 
#include <parser.h>

void print_packet(packet *p)
{
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ec 01       	movw	r28, r24
    printf("msg_type: %d\r\n", p->type);
    1ace:	88 81       	ld	r24, Y
    1ad0:	1f 92       	push	r1
    1ad2:	8f 93       	push	r24
    1ad4:	87 e7       	ldi	r24, 0x77	; 119
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    printf("source_id: %d\r\n", p->source_id);
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	1f 92       	push	r1
    1ae4:	8f 93       	push	r24
    1ae6:	86 e8       	ldi	r24, 0x86	; 134
    1ae8:	93 e0       	ldi	r25, 0x03	; 3
    1aea:	9f 93       	push	r25
    1aec:	8f 93       	push	r24
    1aee:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    printf("seq_num: %d\r\n", p->seq_num);
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	8f 93       	push	r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	8f 93       	push	r24
    1afa:	86 e9       	ldi	r24, 0x96	; 150
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	9f 93       	push	r25
    1b00:	8f 93       	push	r24
    1b02:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    printf("num_hops: %d\r\n", p->num_hops);
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	1f 92       	push	r1
    1b0a:	8f 93       	push	r24
    1b0c:	84 ea       	ldi	r24, 0xA4	; 164
    1b0e:	93 e0       	ldi	r25, 0x03	; 3
    1b10:	9f 93       	push	r25
    1b12:	8f 93       	push	r24
    1b14:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    switch(p->type)
    1b18:	8d b7       	in	r24, 0x3d	; 61
    1b1a:	9e b7       	in	r25, 0x3e	; 62
    1b1c:	40 96       	adiw	r24, 0x10	; 16
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	9e bf       	out	0x3e, r25	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	8d bf       	out	0x3d, r24	; 61
    1b28:	88 81       	ld	r24, Y
    1b2a:	82 30       	cpi	r24, 0x02	; 2
    1b2c:	a1 f0       	breq	.+40     	; 0x1b56 <print_packet+0x8e>
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	a1 f1       	breq	.+104    	; 0x1b9a <print_packet+0xd2>
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <print_packet+0x70>
    1b36:	4d c0       	rjmp	.+154    	; 0x1bd2 <print_packet+0x10a>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            printf("light value: %d\r\n", p->light_value);
    1b38:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3a:	8f 93       	push	r24
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	8f 93       	push	r24
    1b40:	83 eb       	ldi	r24, 0xB3	; 179
    1b42:	93 e0       	ldi	r25, 0x03	; 3
    1b44:	9f 93       	push	r25
    1b46:	8f 93       	push	r24
    1b48:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
            break;
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	3e c0       	rjmp	.+124    	; 0x1bd2 <print_packet+0x10a>
        }
        case MSG_NODE_NEIGHBORS:
        {
            printf("light value: %d\r\n", p->light_value);
    1b56:	8e 81       	ldd	r24, Y+6	; 0x06
    1b58:	8f 93       	push	r24
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	8f 93       	push	r24
    1b5e:	83 eb       	ldi	r24, 0xB3	; 179
    1b60:	93 e0       	ldi	r25, 0x03	; 3
    1b62:	9f 93       	push	r25
    1b64:	8f 93       	push	r24
    1b66:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
            printf("neighbors: [%d,%d,%d]\r\n",
    1b6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b6c:	1f 92       	push	r1
    1b6e:	8f 93       	push	r24
    1b70:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b72:	1f 92       	push	r1
    1b74:	8f 93       	push	r24
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	1f 92       	push	r1
    1b7a:	8f 93       	push	r24
    1b7c:	85 ec       	ldi	r24, 0xC5	; 197
    1b7e:	93 e0       	ldi	r25, 0x03	; 3
    1b80:	9f 93       	push	r25
    1b82:	8f 93       	push	r24
    1b84:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
                p->neighbor_table.neighbors[0].id,
                p->neighbor_table.neighbors[1].id,
                p->neighbor_table.neighbors[2].id);
            break;
    1b88:	8d b7       	in	r24, 0x3d	; 61
    1b8a:	9e b7       	in	r25, 0x3e	; 62
    1b8c:	0c 96       	adiw	r24, 0x0c	; 12
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	9e bf       	out	0x3e, r25	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	8d bf       	out	0x3d, r24	; 61
    1b98:	1c c0       	rjmp	.+56     	; 0x1bd2 <print_packet+0x10a>
        }
        case MSG_GATEWAY:
        {
            printf("sample_rate: %d\r\n", p->sensor_sample_rate);
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	8f 93       	push	r24
    1b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ba0:	8f 93       	push	r24
    1ba2:	8d ed       	ldi	r24, 0xDD	; 221
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	9f 93       	push	r25
    1ba8:	8f 93       	push	r24
    1baa:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
            printf("neighbor_rate: %d\r\n", p->neighbor_update_rate);
    1bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb0:	8f 93       	push	r24
    1bb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bb4:	8f 93       	push	r24
    1bb6:	8f ee       	ldi	r24, 0xEF	; 239
    1bb8:	93 e0       	ldi	r25, 0x03	; 3
    1bba:	9f 93       	push	r25
    1bbc:	8f 93       	push	r24
    1bbe:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
            break;
    1bc2:	8d b7       	in	r24, 0x3d	; 61
    1bc4:	9e b7       	in	r25, 0x3e	; 62
    1bc6:	08 96       	adiw	r24, 0x08	; 8
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	9e bf       	out	0x3e, r25	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	8d bf       	out	0x3d, r24	; 61
        }
    }
}
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	08 95       	ret

00001bd8 <parse_comma>:

// start_index is index in input of location after opening bracket.
uint8_t parse_comma(char *output, char *input, uint8_t start_index)
{
    1bd8:	cf 93       	push	r28
    memset(output, 0, MAX_NEIGHBOR_BUF_SIZE);
    1bda:	fc 01       	movw	r30, r24
    1bdc:	10 82       	st	Z, r1
    1bde:	11 82       	std	Z+1, r1	; 0x01
    1be0:	12 82       	std	Z+2, r1	; 0x02
    1be2:	13 82       	std	Z+3, r1	; 0x03
    uint8_t pos = start_index;
    1be4:	c4 2f       	mov	r28, r20
    1be6:	2c 2f       	mov	r18, r28
    1be8:	24 1b       	sub	r18, r20
    uint8_t item_length = 0;
    while(pos < MAX_BUF_SIZE && input[pos] != ',' && input[pos] != '\0')
    1bea:	c8 31       	cpi	r28, 0x18	; 24
    1bec:	50 f4       	brcc	.+20     	; 0x1c02 <parse_comma+0x2a>
    1bee:	fb 01       	movw	r30, r22
    1bf0:	ec 0f       	add	r30, r28
    1bf2:	f1 1d       	adc	r31, r1
    1bf4:	30 81       	ld	r19, Z
    1bf6:	3c 32       	cpi	r19, 0x2C	; 44
    1bf8:	21 f0       	breq	.+8      	; 0x1c02 <parse_comma+0x2a>
    1bfa:	33 23       	and	r19, r19
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <parse_comma+0x2a>
    {
        item_length ++;
        pos ++;
    1bfe:	cf 5f       	subi	r28, 0xFF	; 255
    1c00:	f2 cf       	rjmp	.-28     	; 0x1be6 <parse_comma+0xe>
    }
    //memcpy(output, input + start_index, item_length);
    strncpy(output, input + start_index, item_length);
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	64 0f       	add	r22, r20
    1c06:	71 1d       	adc	r23, r1
    1c08:	a9 01       	movw	r20, r18
    1c0a:	0e 94 8e 31 	call	0x631c	; 0x631c <strncpy>
    return pos;
}
    1c0e:	8c 2f       	mov	r24, r28
    1c10:	cf 91       	pop	r28
    1c12:	08 95       	ret

00001c14 <parse_bracket>:

// start_index is index in input of location after opening bracket.
uint8_t parse_bracket(char *output, char *input, uint8_t start_index)
{
    1c14:	cf 93       	push	r28
    memset(output, 0, MAX_BUF_SIZE);
    1c16:	28 e1       	ldi	r18, 0x18	; 24
    1c18:	fc 01       	movw	r30, r24
    1c1a:	11 92       	st	Z+, r1
    1c1c:	2a 95       	dec	r18
    1c1e:	e9 f7       	brne	.-6      	; 0x1c1a <parse_bracket+0x6>
    uint8_t pos = start_index;
    1c20:	c4 2f       	mov	r28, r20
    1c22:	2c 2f       	mov	r18, r28
    1c24:	24 1b       	sub	r18, r20
    uint8_t item_length = 0;
    while(pos < MAX_BUF_SIZE && input[pos] != ']' && input[pos] != '\0')
    1c26:	c8 31       	cpi	r28, 0x18	; 24
    1c28:	50 f4       	brcc	.+20     	; 0x1c3e <parse_bracket+0x2a>
    1c2a:	fb 01       	movw	r30, r22
    1c2c:	ec 0f       	add	r30, r28
    1c2e:	f1 1d       	adc	r31, r1
    1c30:	30 81       	ld	r19, Z
    1c32:	3d 35       	cpi	r19, 0x5D	; 93
    1c34:	21 f0       	breq	.+8      	; 0x1c3e <parse_bracket+0x2a>
    1c36:	33 23       	and	r19, r19
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <parse_bracket+0x2a>
    {
        item_length ++;
        pos ++;
    1c3a:	cf 5f       	subi	r28, 0xFF	; 255
    1c3c:	f2 cf       	rjmp	.-28     	; 0x1c22 <parse_bracket+0xe>
    }
    //memcpy(output, input + start_index, item_length);
    strncpy(output, input + start_index, item_length);
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	64 0f       	add	r22, r20
    1c42:	71 1d       	adc	r23, r1
    1c44:	a9 01       	movw	r20, r18
    1c46:	0e 94 8e 31 	call	0x631c	; 0x631c <strncpy>
    return pos;
}
    1c4a:	8c 2f       	mov	r24, r28
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <parse_msg>:
src - the pointer to the received data buffer
len - the length of the received data buffer
msg_type - the type of message
*/
void parse_msg(packet *parsed_packet, char *src, uint8_t len)
{
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	69 97       	sbiw	r28, 0x19	; 25
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	8c 01       	movw	r16, r24
    1c70:	7b 01       	movw	r14, r22
    uint8_t pos = 0;
    uint8_t item_length = 0;
    char temp_buf[MAX_BUF_SIZE];
    msg_type type = src[1] - '0';
    1c72:	fb 01       	movw	r30, r22
    1c74:	21 81       	ldd	r18, Z+1	; 0x01
    1c76:	20 53       	subi	r18, 0x30	; 48
    parsed_packet->type = type;
    1c78:	fc 01       	movw	r30, r24
    1c7a:	20 83       	st	Z, r18
    
    // parse source id
    parsed_packet->source_id = (src[4] - '0');
    1c7c:	fb 01       	movw	r30, r22
    1c7e:	84 81       	ldd	r24, Z+4	; 0x04
    1c80:	80 53       	subi	r24, 0x30	; 48
    1c82:	f8 01       	movw	r30, r16
    1c84:	81 83       	std	Z+1, r24	; 0x01

    // parse sequence number
    pos = 6;
    item_length = 0;
    pos = parse_bracket(temp_buf, src, 7);
    1c86:	47 e0       	ldi	r20, 0x07	; 7
    1c88:	ce 01       	movw	r24, r28
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	29 8f       	std	Y+25, r18	; 0x19
    1c8e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <parse_bracket>
    1c92:	d8 2e       	mov	r13, r24
    parsed_packet->seq_num = atoi(temp_buf);
    1c94:	ce 01       	movw	r24, r28
    1c96:	01 96       	adiw	r24, 0x01	; 1
    1c98:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atoi>
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	93 83       	std	Z+3, r25	; 0x03
    1ca0:	82 83       	std	Z+2, r24	; 0x02

    // parse num_hops
    pos += 2; // skip ']['
    1ca2:	42 e0       	ldi	r20, 0x02	; 2
    1ca4:	4d 0d       	add	r20, r13
    pos = parse_bracket(temp_buf, src, pos);
    1ca6:	b7 01       	movw	r22, r14
    1ca8:	ce 01       	movw	r24, r28
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <parse_bracket>
    1cb0:	d8 2e       	mov	r13, r24
    parsed_packet->num_hops = atoi(temp_buf);
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	01 96       	adiw	r24, 0x01	; 1
    1cb6:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atoi>
    1cba:	f8 01       	movw	r30, r16
    1cbc:	84 83       	std	Z+4, r24	; 0x04
    
    switch(type)
    1cbe:	29 8d       	ldd	r18, Y+25	; 0x19
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	a1 f0       	breq	.+40     	; 0x1cec <parse_msg+0x9c>
    1cc4:	23 30       	cpi	r18, 0x03	; 3
    1cc6:	e9 f1       	breq	.+122    	; 0x1d42 <parse_msg+0xf2>
    1cc8:	21 30       	cpi	r18, 0x01	; 1
    1cca:	09 f0       	breq	.+2      	; 0x1cce <parse_msg+0x7e>
    1ccc:	58 c0       	rjmp	.+176    	; 0x1d7e <parse_msg+0x12e>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            // parse light value
            pos += 2; // skip
    1cce:	42 e0       	ldi	r20, 0x02	; 2
    1cd0:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    1cd2:	b7 01       	movw	r22, r14
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <parse_bracket>
            parsed_packet->light_value = atoi(temp_buf);
    1cdc:	ce 01       	movw	r24, r28
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atoi>
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	96 83       	std	Z+6, r25	; 0x06
    1ce8:	85 83       	std	Z+5, r24	; 0x05
            break;
    1cea:	4d c0       	rjmp	.+154    	; 0x1d86 <parse_msg+0x136>
        }

        case MSG_NODE_NEIGHBORS:
        {
            // parse light value
            pos += 2; // skip
    1cec:	42 e0       	ldi	r20, 0x02	; 2
    1cee:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    1cf0:	b7 01       	movw	r22, r14
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <parse_bracket>
    1cfa:	d8 2e       	mov	r13, r24
            parsed_packet->light_value = atoi(temp_buf);
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atoi>
    1d04:	f8 01       	movw	r30, r16
    1d06:	96 83       	std	Z+6, r25	; 0x06
    1d08:	85 83       	std	Z+5, r24	; 0x05

            // parse neighbor table
            pos += 2;
    1d0a:	d3 94       	inc	r13
    1d0c:	d3 94       	inc	r13
    1d0e:	d8 01       	movw	r26, r16
    1d10:	19 96       	adiw	r26, 0x09	; 9
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	8d 2d       	mov	r24, r13
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	f9 01       	movw	r30, r18
    1d1c:	e8 0f       	add	r30, r24
    1d1e:	f9 1f       	adc	r31, r25
    1d20:	ee 0d       	add	r30, r14
    1d22:	ff 1d       	adc	r31, r15
            for(uint8_t i = 0; i < 3; i++)
            {
                uint8_t neighbor_id = src[pos+i*2] - '0';
    1d24:	40 81       	ld	r20, Z
    1d26:	40 53       	subi	r20, 0x30	; 48
                parsed_packet->neighbor_table.neighbors[i].id = neighbor_id;
    1d28:	4d 93       	st	X+, r20
                parsed_packet->neighbor_table.size += 1;
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	47 81       	ldd	r20, Z+7	; 0x07
    1d2e:	4f 5f       	subi	r20, 0xFF	; 255
    1d30:	47 83       	std	Z+7, r20	; 0x07
    1d32:	2e 5f       	subi	r18, 0xFE	; 254
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
            pos = parse_bracket(temp_buf, src, pos);
            parsed_packet->light_value = atoi(temp_buf);

            // parse neighbor table
            pos += 2;
            for(uint8_t i = 0; i < 3; i++)
    1d36:	26 30       	cpi	r18, 0x06	; 6
    1d38:	31 05       	cpc	r19, r1
    1d3a:	79 f7       	brne	.-34     	; 0x1d1a <parse_msg+0xca>
            {
                uint8_t neighbor_id = src[pos+i*2] - '0';
                parsed_packet->neighbor_table.neighbors[i].id = neighbor_id;
                parsed_packet->neighbor_table.size += 1;
            }
            parsed_packet->neighbor_table.origin = parsed_packet->source_id;
    1d3c:	81 81       	ldd	r24, Z+1	; 0x01
    1d3e:	80 87       	std	Z+8, r24	; 0x08
            break;
    1d40:	22 c0       	rjmp	.+68     	; 0x1d86 <parse_msg+0x136>
        }

        case MSG_GATEWAY:
        {
            // parse sample_rate
            pos += 2;
    1d42:	42 e0       	ldi	r20, 0x02	; 2
    1d44:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    1d46:	b7 01       	movw	r22, r14
    1d48:	ce 01       	movw	r24, r28
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <parse_bracket>
    1d50:	d8 2e       	mov	r13, r24
           // printf("sample_rate string %s \r\n", temp_buf);
            parsed_packet->sensor_sample_rate = atoi(temp_buf);
    1d52:	ce 01       	movw	r24, r28
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atoi>
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	95 87       	std	Z+13, r25	; 0x0d
    1d5e:	84 87       	std	Z+12, r24	; 0x0c
            
            // parse neighbor_rate
            pos += 2; // skip ']['
    1d60:	42 e0       	ldi	r20, 0x02	; 2
    1d62:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    1d64:	b7 01       	movw	r22, r14
    1d66:	ce 01       	movw	r24, r28
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <parse_bracket>
            //printf("neighbor_rate string %s \r\n", temp_buf);
            parsed_packet->neighbor_update_rate = atoi(temp_buf);
    1d6e:	ce 01       	movw	r24, r28
    1d70:	01 96       	adiw	r24, 0x01	; 1
    1d72:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <atoi>
    1d76:	f8 01       	movw	r30, r16
    1d78:	97 87       	std	Z+15, r25	; 0x0f
    1d7a:	86 87       	std	Z+14, r24	; 0x0e
            
            break;
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <parse_msg+0x136>
        }

        default:{printf("invalid type\r\n");}
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	94 e0       	ldi	r25, 0x04	; 4
    1d82:	0e 94 80 32 	call	0x6500	; 0x6500 <puts>
    }
    1d86:	69 96       	adiw	r28, 0x19	; 25
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	08 95       	ret

00001da2 <in_sequence_pool>:
 * @param sp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_sequence_pool(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1da2:	fc 01       	movw	r30, r24
    1da4:	21 91       	ld	r18, Z+
    1da6:	cf 01       	movw	r24, r30
    1da8:	3e 2f       	mov	r19, r30
    1daa:	38 1b       	sub	r19, r24
    1dac:	32 17       	cp	r19, r18
    1dae:	28 f4       	brcc	.+10     	; 0x1dba <in_sequence_pool+0x18>
        if(sp->node_id[i] == node_address) {
    1db0:	31 91       	ld	r19, Z+
    1db2:	36 13       	cpse	r19, r22
    1db4:	f9 cf       	rjmp	.-14     	; 0x1da8 <in_sequence_pool+0x6>
            return (int8_t)1;
    1db6:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return (int8_t)-1;
}
    1db8:	08 95       	ret
    for(uint8_t i = 0; i < sp->size; i++) {
        if(sp->node_id[i] == node_address) {
            return (int8_t)1;
        }
    }
    return (int8_t)-1;
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	08 95       	ret

00001dbe <get_sequence_pool_index>:
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	81 91       	ld	r24, Z+
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	98 17       	cp	r25, r24
    1dc6:	39 f0       	breq	.+14     	; 0x1dd6 <get_sequence_pool_index+0x18>
        if(sp->node_id[i] == node_address) {
    1dc8:	21 91       	ld	r18, Z+
    1dca:	26 13       	cpse	r18, r22
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <get_sequence_pool_index+0x14>
            return i;
    1dce:	89 2f       	mov	r24, r25
    1dd0:	08 95       	ret
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1dd2:	9f 5f       	subi	r25, 0xFF	; 255
    1dd4:	f7 cf       	rjmp	.-18     	; 0x1dc4 <get_sequence_pool_index+0x6>
        if(sp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    1dd6:	8f ef       	ldi	r24, 0xFF	; 255
}
    1dd8:	08 95       	ret

00001dda <get_sequence_number>:

uint16_t get_sequence_number(sequence_pool_t *sp, uint8_t node_address) {
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	ec 01       	movw	r28, r24
    int8_t index = get_sequence_pool_index(sp, node_address);
    1de0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <get_sequence_pool_index>
    if(index != -1) {
    1de4:	8f 3f       	cpi	r24, 0xFF	; 255
    1de6:	41 f0       	breq	.+16     	; 0x1df8 <get_sequence_number+0x1e>
        return sp->seq_nums[index];
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	89 02       	muls	r24, r25
    1dec:	c0 0d       	add	r28, r0
    1dee:	d1 1d       	adc	r29, r1
    1df0:	11 24       	eor	r1, r1
    1df2:	8c 81       	ldd	r24, Y+4	; 0x04
    1df4:	9d 81       	ldd	r25, Y+5	; 0x05
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <get_sequence_number+0x22>
    }
    return 0;
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
}
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	08 95       	ret

00001e02 <add_to_sequence_pool>:
 * @param sp - sequence pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param seq_num - sequence number of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    1e02:	ef 92       	push	r14
    1e04:	ff 92       	push	r15
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    if((sp->size < MAX_POOL) && (in_sequence_pool(sp, node_address) == -1)) {
    1e0e:	fc 01       	movw	r30, r24
    1e10:	c0 81       	ld	r28, Z
    1e12:	c8 30       	cpi	r28, 0x08	; 8
    1e14:	d8 f4       	brcc	.+54     	; 0x1e4c <add_to_sequence_pool+0x4a>
    1e16:	7a 01       	movw	r14, r20
    1e18:	d6 2f       	mov	r29, r22
    1e1a:	8c 01       	movw	r16, r24
    1e1c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <in_sequence_pool>
    1e20:	8f 3f       	cpi	r24, 0xFF	; 255
    1e22:	a1 f4       	brne	.+40     	; 0x1e4c <add_to_sequence_pool+0x4a>
        uint8_t index = sp->size;
        sp->size++;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	8c 0f       	add	r24, r28
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 83       	st	Z, r24
        sp->node_id[index] = node_address;
    1e2c:	2c 2f       	mov	r18, r28
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	d1 83       	std	Z+1, r29	; 0x01
        sp->seq_nums[index] = seq_num;
    1e36:	2e 5f       	subi	r18, 0xFE	; 254
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	22 0f       	add	r18, r18
    1e3c:	33 1f       	adc	r19, r19
    1e3e:	f8 01       	movw	r30, r16
    1e40:	e2 0f       	add	r30, r18
    1e42:	f3 1f       	adc	r31, r19
    1e44:	f1 82       	std	Z+1, r15	; 0x01
    1e46:	e0 82       	st	Z, r14
        return 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	01 c0       	rjmp	.+2      	; 0x1e4e <add_to_sequence_pool+0x4c>
    }
    return -1;
    1e4c:	8f ef       	ldi	r24, 0xFF	; 255
}
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	ff 90       	pop	r15
    1e58:	ef 90       	pop	r14
    1e5a:	08 95       	ret

00001e5c <update_sequence_pool>:
 * @param sp - sequence pool to be updated
 * @param node_address - node whose sequence number needs updating
 * @param seq_num - new sequence number of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	ec 01       	movw	r28, r24
    1e66:	8a 01       	movw	r16, r20
    int8_t index = get_sequence_pool_index(sp, node_address);
    1e68:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <get_sequence_pool_index>
    if(index >= 0) {
    1e6c:	87 fd       	sbrc	r24, 7
    1e6e:	09 c0       	rjmp	.+18     	; 0x1e82 <update_sequence_pool+0x26>
        sp->seq_nums[index] = seq_num;
    1e70:	92 e0       	ldi	r25, 0x02	; 2
    1e72:	89 02       	muls	r24, r25
    1e74:	c0 0d       	add	r28, r0
    1e76:	d1 1d       	adc	r29, r1
    1e78:	11 24       	eor	r1, r1
    1e7a:	1d 83       	std	Y+5, r17	; 0x05
    1e7c:	0c 83       	std	Y+4, r16	; 0x04
        return 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <update_sequence_pool+0x28>
    }
    return -1;
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
}
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	1f 91       	pop	r17
    1e8a:	0f 91       	pop	r16
    1e8c:	08 95       	ret

00001e8e <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1e8e:	90 91 41 01 	lds	r25, 0x0141
    1e92:	9f 71       	andi	r25, 0x1F	; 31
    1e94:	9f 31       	cpi	r25, 0x1F	; 31
    1e96:	d9 f3       	breq	.-10     	; 0x1e8e <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1e98:	80 93 42 01 	sts	0x0142, r24
    1e9c:	08 95       	ret

00001e9e <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	80 93 de 0f 	sts	0x0FDE, r24
    1ea4:	08 95       	ret

00001ea6 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    1ea6:	10 92 de 0f 	sts	0x0FDE, r1
    1eaa:	08 95       	ret

00001eac <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1eac:	80 91 41 01 	lds	r24, 0x0141
    1eb0:	8f 71       	andi	r24, 0x1F	; 31
    1eb2:	8f 31       	cpi	r24, 0x1F	; 31
    1eb4:	d9 f3       	breq	.-10     	; 0x1eac <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1eb6:	80 91 41 01 	lds	r24, 0x0141
    1eba:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1ebc:	e1 f0       	breq	.+56     	; 0x1ef6 <rf_power_down+0x4a>
    1ebe:	8f 30       	cpi	r24, 0x0F	; 15
    1ec0:	d1 f0       	breq	.+52     	; 0x1ef6 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1ec2:	80 91 41 01 	lds	r24, 0x0141
    1ec6:	8f 71       	andi	r24, 0x1F	; 31
    1ec8:	88 30       	cpi	r24, 0x08	; 8
    1eca:	31 f4       	brne	.+12     	; 0x1ed8 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1ecc:	80 91 39 01 	lds	r24, 0x0139
    1ed0:	82 60       	ori	r24, 0x02	; 2
    1ed2:	80 93 39 01 	sts	0x0139, r24
    1ed6:	0b c0       	rjmp	.+22     	; 0x1eee <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    1ed8:	88 e0       	ldi	r24, 0x08	; 8
    1eda:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1ede:	80 91 41 01 	lds	r24, 0x0141
    1ee2:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    1ee4:	88 30       	cpi	r24, 0x08	; 8
    1ee6:	d9 f7       	brne	.-10     	; 0x1ede <rf_power_down+0x32>
    1ee8:	f1 cf       	rjmp	.-30     	; 0x1ecc <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1eea:	8f 30       	cpi	r24, 0x0F	; 15
    1eec:	21 f0       	breq	.+8      	; 0x1ef6 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1eee:	80 91 41 01 	lds	r24, 0x0141
    1ef2:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    1ef4:	d1 f7       	brne	.-12     	; 0x1eea <rf_power_down+0x3e>
    1ef6:	08 95       	ret

00001ef8 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1ef8:	80 91 41 01 	lds	r24, 0x0141
    1efc:	8f 71       	andi	r24, 0x1F	; 31
    1efe:	8f 31       	cpi	r24, 0x1F	; 31
    1f00:	d9 f3       	breq	.-10     	; 0x1ef8 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1f02:	80 91 41 01 	lds	r24, 0x0141
    1f06:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1f08:	11 f0       	breq	.+4      	; 0x1f0e <rf_power_up+0x16>
    1f0a:	8f 30       	cpi	r24, 0x0F	; 15
    1f0c:	51 f4       	brne	.+20     	; 0x1f22 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    1f0e:	80 91 39 01 	lds	r24, 0x0139
    1f12:	8d 7f       	andi	r24, 0xFD	; 253
    1f14:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1f18:	80 91 41 01 	lds	r24, 0x0141
    1f1c:	8f 71       	andi	r24, 0x1F	; 31
    1f1e:	88 30       	cpi	r24, 0x08	; 8
    1f20:	d9 f7       	brne	.-10     	; 0x1f18 <rf_power_up+0x20>
    1f22:	08 95       	ret

00001f24 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    1f24:	e5 e4       	ldi	r30, 0x45	; 69
    1f26:	f1 e0       	ldi	r31, 0x01	; 1
    1f28:	90 81       	ld	r25, Z
    1f2a:	90 7f       	andi	r25, 0xF0	; 240
    1f2c:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1f2e:	90 81       	ld	r25, Z
    1f30:	8f 70       	andi	r24, 0x0F	; 15
    1f32:	98 2b       	or	r25, r24
    1f34:	90 83       	st	Z, r25
    1f36:	08 95       	ret

00001f38 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1f38:	e7 e5       	ldi	r30, 0x57	; 87
    1f3a:	f1 e0       	ldi	r31, 0x01	; 1
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8d 7f       	andi	r24, 0xFD	; 253
    1f40:	80 83       	st	Z, r24
    1f42:	08 95       	ret

00001f44 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    1f44:	e7 e5       	ldi	r30, 0x57	; 87
    1f46:	f1 e0       	ldi	r31, 0x01	; 1
    1f48:	80 81       	ld	r24, Z
    1f4a:	82 60       	ori	r24, 0x02	; 2
    1f4c:	80 83       	st	Z, r24
    1f4e:	08 95       	ret

00001f50 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1f50:	ee e6       	ldi	r30, 0x6E	; 110
    1f52:	f1 e0       	ldi	r31, 0x01	; 1
    1f54:	80 81       	ld	r24, Z
    1f56:	8f 7e       	andi	r24, 0xEF	; 239
    1f58:	80 83       	st	Z, r24
    1f5a:	08 95       	ret

00001f5c <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1f5c:	ee e6       	ldi	r30, 0x6E	; 110
    1f5e:	f1 e0       	ldi	r31, 0x01	; 1
    1f60:	80 81       	ld	r24, Z
    1f62:	80 61       	ori	r24, 0x10	; 16
    1f64:	80 83       	st	Z, r24
    1f66:	08 95       	ret

00001f68 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1f68:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1f6c:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1f70:	90 93 e8 0f 	sts	0x0FE8, r25
    1f74:	80 93 e7 0f 	sts	0x0FE7, r24
    1f78:	08 95       	ret

00001f7a <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1f7a:	90 93 e2 0f 	sts	0x0FE2, r25
    1f7e:	80 93 e1 0f 	sts	0x0FE1, r24
	PHY_CC_CCA &= ~(0x1F);
    1f82:	e8 e4       	ldi	r30, 0x48	; 72
    1f84:	f1 e0       	ldi	r31, 0x01	; 1
    1f86:	80 81       	ld	r24, Z
    1f88:	80 7e       	andi	r24, 0xE0	; 224
    1f8a:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1f8c:	80 81       	ld	r24, Z
    1f8e:	68 2b       	or	r22, r24
    1f90:	60 83       	st	Z, r22
    1f92:	08 95       	ret

00001f94 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    1f94:	90 93 9b 05 	sts	0x059B, r25
    1f98:	80 93 9a 05 	sts	0x059A, r24
    1f9c:	08 95       	ret

00001f9e <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1f9e:	90 93 99 05 	sts	0x0599, r25
    1fa2:	80 93 98 05 	sts	0x0598, r24
    1fa6:	08 95       	ret

00001fa8 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1fb4:	80 e2       	ldi	r24, 0x20	; 32
    1fb6:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1fba:	80 ec       	ldi	r24, 0xC0	; 192
    1fbc:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1fc0:	60 62       	ori	r22, 0x20	; 32
    1fc2:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1fc6:	85 ec       	ldi	r24, 0xC5	; 197
    1fc8:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1fcc:	87 ea       	ldi	r24, 0xA7	; 167
    1fce:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1fd2:	80 e8       	ldi	r24, 0x80	; 128
    1fd4:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1fd8:	20 93 60 01 	sts	0x0160, r18
    1fdc:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1fe0:	40 93 62 01 	sts	0x0162, r20
    1fe4:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1fe8:	c6 e4       	ldi	r28, 0x46	; 70
    1fea:	d1 e0       	ldi	r29, 0x01	; 1
    1fec:	08 81       	ld	r16, Y
    1fee:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1ff0:	98 81       	ld	r25, Y
    1ff2:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1ff4:	30 2f       	mov	r19, r16
    1ff6:	32 95       	swap	r19
    1ff8:	36 95       	lsr	r19
    1ffa:	37 70       	andi	r19, 0x07	; 7
    1ffc:	60 e4       	ldi	r22, 0x40	; 64
    1ffe:	36 9f       	mul	r19, r22
    2000:	80 01       	movw	r16, r0
    2002:	11 24       	eor	r1, r1
    2004:	22 95       	swap	r18
    2006:	26 95       	lsr	r18
    2008:	23 70       	andi	r18, 0x03	; 3
    200a:	62 2f       	mov	r22, r18
    200c:	60 2b       	or	r22, r16
    200e:	82 95       	swap	r24
    2010:	86 95       	lsr	r24
    2012:	83 70       	andi	r24, 0x03	; 3
    2014:	70 e1       	ldi	r23, 0x10	; 16
    2016:	87 9f       	mul	r24, r23
    2018:	90 01       	movw	r18, r0
    201a:	11 24       	eor	r1, r1
    201c:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    201e:	92 95       	swap	r25
    2020:	96 95       	lsr	r25
    2022:	93 70       	andi	r25, 0x03	; 3
    2024:	84 e0       	ldi	r24, 0x04	; 4
    2026:	98 9f       	mul	r25, r24
    2028:	b0 01       	movw	r22, r0
    202a:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    202c:	62 2b       	or	r22, r18
    202e:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    2032:	88 81       	ld	r24, Y
    2034:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    2036:	92 95       	swap	r25
    2038:	96 95       	lsr	r25
    203a:	93 70       	andi	r25, 0x03	; 3
    203c:	39 2f       	mov	r19, r25
    203e:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    2040:	98 2f       	mov	r25, r24
    2042:	92 95       	swap	r25
    2044:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    2046:	93 2b       	or	r25, r19
    2048:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    204c:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    2056:	c1 ee       	ldi	r28, 0xE1	; 225
    2058:	df e0       	ldi	r29, 0x0F	; 15
    205a:	f9 83       	std	Y+1, r31	; 0x01
    205c:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    205e:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    2060:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    2062:	5d 83       	std	Y+5, r21	; 0x05
    2064:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    2066:	bf 83       	std	Y+7, r27	; 0x07
    2068:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    206a:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	80 93 03 10 	sts	0x1003, r24
	rx_ready = 0;
    2072:	10 92 22 10 	sts	0x1022, r1
	tx_done = 0;
    2076:	10 92 f2 0f 	sts	0x0FF2, r1

	use_glossy = 0;
    207a:	10 92 de 0f 	sts	0x0FDE, r1

} // rf_init() 
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    2088:	86 e1       	ldi	r24, 0x16	; 22
    208a:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <rf_cmd>

0000208e <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    208e:	86 e1       	ldi	r24, 0x16	; 22
    2090:	0c 94 47 0f 	jmp	0x1e8e	; 0x1e8e <rf_cmd>

00002094 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    2094:	88 e0       	ldi	r24, 0x08	; 8
    2096:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>
	rx_ready = 0;
    209a:	10 92 22 10 	sts	0x1022, r1
    209e:	08 95       	ret

000020a0 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    20a0:	3f 92       	push	r3
    20a2:	4f 92       	push	r4
    20a4:	5f 92       	push	r5
    20a6:	6f 92       	push	r6
    20a8:	7f 92       	push	r7
    20aa:	8f 92       	push	r8
    20ac:	9f 92       	push	r9
    20ae:	af 92       	push	r10
    20b0:	bf 92       	push	r11
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    20c4:	80 91 03 10 	lds	r24, 0x1003
    20c8:	81 11       	cpse	r24, r1
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	26 c1       	rjmp	.+588    	; 0x231c <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    20d0:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    20d2:	80 91 e3 0f 	lds	r24, 0x0FE3
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	80 93 e3 0f 	sts	0x0FE3, r24
	machead->fcf = fcf;
    20dc:	90 91 81 01 	lds	r25, 0x0181
    20e0:	90 7e       	andi	r25, 0xE0	; 224
    20e2:	91 60       	ori	r25, 0x01	; 1
    20e4:	20 fb       	bst	r18, 0
    20e6:	95 f9       	bld	r25, 5
    20e8:	9f 73       	andi	r25, 0x3F	; 63
    20ea:	90 64       	ori	r25, 0x40	; 64
    20ec:	90 93 81 01 	sts	0x0181, r25
    20f0:	88 e8       	ldi	r24, 0x88	; 136
    20f2:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    20f6:	80 91 de 0f 	lds	r24, 0x0FDE
    20fa:	88 23       	and	r24, r24
    20fc:	d1 f0       	breq	.+52     	; 0x2132 <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    2104:	8a ea       	ldi	r24, 0xAA	; 170
    2106:	9a ea       	ldi	r25, 0xAA	; 170
    2108:	90 93 89 01 	sts	0x0189, r25
    210c:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    2110:	8f ef       	ldi	r24, 0xFF	; 255
    2112:	9f ef       	ldi	r25, 0xFF	; 255
    2114:	90 93 87 01 	sts	0x0187, r25
    2118:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    211c:	20 91 63 01 	lds	r18, 0x0163
    2120:	80 91 62 01 	lds	r24, 0x0162
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	92 2b       	or	r25, r18
    2128:	90 93 85 01 	sts	0x0185, r25
    212c:	80 93 84 01 	sts	0x0184, r24
    2130:	1e c0       	rjmp	.+60     	; 0x216e <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    2132:	80 91 e3 0f 	lds	r24, 0x0FE3
    2136:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    213a:	80 91 61 01 	lds	r24, 0x0161
    213e:	20 91 60 01 	lds	r18, 0x0160
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	38 2b       	or	r19, r24
    2146:	30 93 89 01 	sts	0x0189, r19
    214a:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    214e:	88 81       	ld	r24, Y
    2150:	99 81       	ldd	r25, Y+1	; 0x01
    2152:	90 93 87 01 	sts	0x0187, r25
    2156:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    215a:	80 91 63 01 	lds	r24, 0x0163
    215e:	20 91 62 01 	lds	r18, 0x0162
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	38 2b       	or	r19, r24
    2166:	30 93 85 01 	sts	0x0185, r19
    216a:	20 93 84 01 	sts	0x0184, r18
    216e:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    2170:	4a 81       	ldd	r20, Y+2	; 0x02
    2172:	55 27       	eor	r21, r21
    2174:	47 fd       	sbrc	r20, 7
    2176:	50 95       	com	r21
    2178:	6b 81       	ldd	r22, Y+3	; 0x03
    217a:	7c 81       	ldd	r23, Y+4	; 0x04
    217c:	8a e8       	ldi	r24, 0x8A	; 138
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	0e 94 85 31 	call	0x630a	; 0x630a <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	85 5f       	subi	r24, 0xF5	; 245
    2188:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    218c:	80 91 41 01 	lds	r24, 0x0141
    2190:	98 2f       	mov	r25, r24
    2192:	9f 71       	andi	r25, 0x1F	; 31
    2194:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    2196:	9f ef       	ldi	r25, 0xFF	; 255
    2198:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    219a:	92 30       	cpi	r25, 0x02	; 2
    219c:	b8 f3       	brcs	.-18     	; 0x218c <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    219e:	91 e1       	ldi	r25, 0x11	; 17
    21a0:	39 16       	cp	r3, r25
    21a2:	a1 f3       	breq	.-24     	; 0x218c <rf_tx_packet_repeat+0xec>
    21a4:	92 e1       	ldi	r25, 0x12	; 18
    21a6:	39 16       	cp	r3, r25
    21a8:	89 f3       	breq	.-30     	; 0x218c <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    21aa:	9f e1       	ldi	r25, 0x1F	; 31
    21ac:	39 16       	cp	r3, r25
    21ae:	71 f3       	breq	.-36     	; 0x218c <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    21b0:	98 ef       	ldi	r25, 0xF8	; 248
    21b2:	93 0d       	add	r25, r3
    21b4:	92 30       	cpi	r25, 0x02	; 2
    21b6:	20 f0       	brcs	.+8      	; 0x21c0 <rf_tx_packet_repeat+0x120>
    21b8:	8f 70       	andi	r24, 0x0F	; 15
    21ba:	86 30       	cpi	r24, 0x06	; 6
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <rf_tx_packet_repeat+0x120>
    21be:	86 cf       	rjmp	.-244    	; 0x20cc <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    21c0:	86 e1       	ldi	r24, 0x16	; 22
    21c2:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	81 11       	cpse	r24, r1
    21ca:	0a c0       	rjmp	.+20     	; 0x21e0 <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    21cc:	89 e0       	ldi	r24, 0x09	; 9
    21ce:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>
	if(pRTI->ackRequest)
    21d2:	8e 81       	ldd	r24, Y+6	; 0x06
    21d4:	88 23       	and	r24, r24
    21d6:	91 f0       	breq	.+36     	; 0x21fc <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    21d8:	89 e1       	ldi	r24, 0x19	; 25
    21da:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    21e0:	80 91 48 01 	lds	r24, 0x0148
    21e4:	80 68       	ori	r24, 0x80	; 128
    21e6:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    21ea:	80 91 41 01 	lds	r24, 0x0141
    21ee:	87 ff       	sbrs	r24, 7
    21f0:	fc cf       	rjmp	.-8      	; 0x21ea <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    21f2:	80 91 41 01 	lds	r24, 0x0141
    21f6:	86 ff       	sbrs	r24, 6
    21f8:	69 cf       	rjmp	.-302    	; 0x20cc <rf_tx_packet_repeat+0x2c>
    21fa:	e8 cf       	rjmp	.-48     	; 0x21cc <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    21fc:	61 14       	cp	r6, r1
    21fe:	71 04       	cpc	r7, r1
    2200:	a9 f1       	breq	.+106    	; 0x226c <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    2202:	8a ee       	ldi	r24, 0xEA	; 234
    2204:	9f e0       	ldi	r25, 0x0F	; 15
    2206:	0e 94 8f 24 	call	0x491e	; 0x491e <nrk_time_get>
		target_t.secs = curr_t.secs;
    220a:	80 91 ea 0f 	lds	r24, 0x0FEA
    220e:	90 91 eb 0f 	lds	r25, 0x0FEB
    2212:	a0 91 ec 0f 	lds	r26, 0x0FEC
    2216:	b0 91 ed 0f 	lds	r27, 0x0FED
    221a:	80 93 04 10 	sts	0x1004, r24
    221e:	90 93 05 10 	sts	0x1005, r25
    2222:	a0 93 06 10 	sts	0x1006, r26
    2226:	b0 93 07 10 	sts	0x1007, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    222a:	d3 01       	movw	r26, r6
    222c:	20 e4       	ldi	r18, 0x40	; 64
    222e:	32 e4       	ldi	r19, 0x42	; 66
    2230:	4f e0       	ldi	r20, 0x0F	; 15
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	0e 94 29 30 	call	0x6052	; 0x6052 <__muluhisi3>
    2238:	00 91 ee 0f 	lds	r16, 0x0FEE
    223c:	10 91 ef 0f 	lds	r17, 0x0FEF
    2240:	20 91 f0 0f 	lds	r18, 0x0FF0
    2244:	30 91 f1 0f 	lds	r19, 0x0FF1
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	80 0f       	add	r24, r16
    224e:	91 1f       	adc	r25, r17
    2250:	a2 1f       	adc	r26, r18
    2252:	b3 1f       	adc	r27, r19
    2254:	80 93 08 10 	sts	0x1008, r24
    2258:	90 93 09 10 	sts	0x1009, r25
    225c:	a0 93 0a 10 	sts	0x100A, r26
    2260:	b0 93 0b 10 	sts	0x100B, r27
		nrk_time_compact_nanos(&target_t);
    2264:	84 e0       	ldi	r24, 0x04	; 4
    2266:	90 e1       	ldi	r25, 0x10	; 16
    2268:	0e 94 78 25 	call	0x4af0	; 0x4af0 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    226c:	10 92 f2 0f 	sts	0x0FF2, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    2270:	82 e0       	ldi	r24, 0x02	; 2
    2272:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    2276:	41 2c       	mov	r4, r1
    2278:	51 2c       	mov	r5, r1
    227a:	80 91 f2 0f 	lds	r24, 0x0FF2
    227e:	81 11       	cpse	r24, r1
    2280:	08 c0       	rjmp	.+16     	; 0x2292 <rf_tx_packet_repeat+0x1f2>
    2282:	8f ef       	ldi	r24, 0xFF	; 255
    2284:	48 1a       	sub	r4, r24
    2286:	58 0a       	sbc	r5, r24
    2288:	98 ee       	ldi	r25, 0xE8	; 232
    228a:	49 16       	cp	r4, r25
    228c:	9d ef       	ldi	r25, 0xFD	; 253
    228e:	59 06       	cpc	r5, r25
    2290:	a1 f7       	brne	.-24     	; 0x227a <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    2292:	61 14       	cp	r6, r1
    2294:	71 04       	cpc	r7, r1
    2296:	21 f4       	brne	.+8      	; 0x22a0 <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2298:	8e 81       	ldd	r24, Y+6	; 0x06
    229a:	81 11       	cpse	r24, r1
    229c:	2d c0       	rjmp	.+90     	; 0x22f8 <rf_tx_packet_repeat+0x258>
    229e:	32 c0       	rjmp	.+100    	; 0x2304 <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    22a0:	8a ee       	ldi	r24, 0xEA	; 234
    22a2:	9f e0       	ldi	r25, 0x0F	; 15
    22a4:	0e 94 8f 24 	call	0x491e	; 0x491e <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    22a8:	80 90 ea 0f 	lds	r8, 0x0FEA
    22ac:	90 90 eb 0f 	lds	r9, 0x0FEB
    22b0:	a0 90 ec 0f 	lds	r10, 0x0FEC
    22b4:	b0 90 ed 0f 	lds	r11, 0x0FED
    22b8:	c0 90 ee 0f 	lds	r12, 0x0FEE
    22bc:	d0 90 ef 0f 	lds	r13, 0x0FEF
    22c0:	e0 90 f0 0f 	lds	r14, 0x0FF0
    22c4:	f0 90 f1 0f 	lds	r15, 0x0FF1
    22c8:	00 91 04 10 	lds	r16, 0x1004
    22cc:	10 91 05 10 	lds	r17, 0x1005
    22d0:	20 91 06 10 	lds	r18, 0x1006
    22d4:	30 91 07 10 	lds	r19, 0x1007
    22d8:	40 91 08 10 	lds	r20, 0x1008
    22dc:	50 91 09 10 	lds	r21, 0x1009
    22e0:	60 91 0a 10 	lds	r22, 0x100A
    22e4:	70 91 0b 10 	lds	r23, 0x100B
    22e8:	83 e2       	ldi	r24, 0x23	; 35
    22ea:	90 e1       	ldi	r25, 0x10	; 16
    22ec:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <nrk_time_sub>
    22f0:	8f 3f       	cpi	r24, 0xFF	; 255
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <rf_tx_packet_repeat+0x256>
    22f4:	bb cf       	rjmp	.-138    	; 0x226c <rf_tx_packet_repeat+0x1cc>
    22f6:	d0 cf       	rjmp	.-96     	; 0x2298 <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    22f8:	80 91 42 01 	lds	r24, 0x0142
    22fc:	82 95       	swap	r24
    22fe:	86 95       	lsr	r24
    2300:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    2302:	39 f4       	brne	.+14     	; 0x2312 <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    2304:	88 ee       	ldi	r24, 0xE8	; 232
    2306:	48 16       	cp	r4, r24
    2308:	8d ef       	ldi	r24, 0xFD	; 253
    230a:	58 06       	cpc	r5, r24
    230c:	11 f0       	breq	.+4      	; 0x2312 <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    230e:	c1 e0       	ldi	r28, 0x01	; 1
    2310:	01 c0       	rjmp	.+2      	; 0x2314 <rf_tx_packet_repeat+0x274>
    2312:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    2314:	83 2d       	mov	r24, r3
    2316:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    231a:	8c 2f       	mov	r24, r28
}
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	1f 91       	pop	r17
    2322:	0f 91       	pop	r16
    2324:	ff 90       	pop	r15
    2326:	ef 90       	pop	r14
    2328:	df 90       	pop	r13
    232a:	cf 90       	pop	r12
    232c:	bf 90       	pop	r11
    232e:	af 90       	pop	r10
    2330:	9f 90       	pop	r9
    2332:	8f 90       	pop	r8
    2334:	7f 90       	pop	r7
    2336:	6f 90       	pop	r6
    2338:	5f 90       	pop	r5
    233a:	4f 90       	pop	r4
    233c:	3f 90       	pop	r3
    233e:	08 95       	ret

00002340 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <rf_tx_packet_repeat>

00002348 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    234c:	80 91 03 10 	lds	r24, 0x1003
    2350:	88 23       	and	r24, r24
    2352:	41 f1       	breq	.+80     	; 0x23a4 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    2354:	80 91 41 01 	lds	r24, 0x0141
    2358:	c8 2f       	mov	r28, r24
    235a:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    235c:	9f ef       	ldi	r25, 0xFF	; 255
    235e:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    2360:	92 30       	cpi	r25, 0x02	; 2
    2362:	c0 f3       	brcs	.-16     	; 0x2354 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    2364:	c1 31       	cpi	r28, 0x11	; 17
    2366:	b1 f3       	breq	.-20     	; 0x2354 <rf_cca_check+0xc>
    2368:	c2 31       	cpi	r28, 0x12	; 18
    236a:	a1 f3       	breq	.-24     	; 0x2354 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    236c:	cf 31       	cpi	r28, 0x1F	; 31
    236e:	91 f3       	breq	.-28     	; 0x2354 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    2370:	c8 30       	cpi	r28, 0x08	; 8
    2372:	19 f0       	breq	.+6      	; 0x237a <rf_cca_check+0x32>
    2374:	8f 70       	andi	r24, 0x0F	; 15
    2376:	86 30       	cpi	r24, 0x06	; 6
    2378:	a9 f4       	brne	.+42     	; 0x23a4 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    237a:	86 e1       	ldi	r24, 0x16	; 22
    237c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    2380:	80 91 48 01 	lds	r24, 0x0148
    2384:	80 68       	ori	r24, 0x80	; 128
    2386:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    238a:	80 91 41 01 	lds	r24, 0x0141
    238e:	87 ff       	sbrs	r24, 7
    2390:	fc cf       	rjmp	.-8      	; 0x238a <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    2392:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    2396:	8c 2f       	mov	r24, r28
    2398:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    239c:	d6 fb       	bst	r29, 6
    239e:	88 27       	eor	r24, r24
    23a0:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    23a4:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    23ac:	80 91 03 10 	lds	r24, 0x1003
    23b0:	88 23       	and	r24, r24
    23b2:	09 f4       	brne	.+2      	; 0x23b6 <rf_rx_packet_nonblock+0xa>
    23b4:	a0 c0       	rjmp	.+320    	; 0x24f6 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    23b6:	80 91 22 10 	lds	r24, 0x1022
    23ba:	88 23       	and	r24, r24
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <rf_rx_packet_nonblock+0x14>
    23be:	99 c0       	rjmp	.+306    	; 0x24f2 <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    23c0:	80 91 7b 01 	lds	r24, 0x017B
    23c4:	e0 91 e1 0f 	lds	r30, 0x0FE1
    23c8:	f0 91 e2 0f 	lds	r31, 0x0FE2
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	02 97       	sbiw	r24, 0x02	; 2
    23d0:	24 81       	ldd	r18, Z+4	; 0x04
    23d2:	33 27       	eor	r19, r19
    23d4:	27 fd       	sbrc	r18, 7
    23d6:	30 95       	com	r19
    23d8:	28 17       	cp	r18, r24
    23da:	39 07       	cpc	r19, r25
    23dc:	0c f4       	brge	.+2      	; 0x23e0 <rf_rx_packet_nonblock+0x34>
    23de:	8b c0       	rjmp	.+278    	; 0x24f6 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    23e0:	e0 91 e1 0f 	lds	r30, 0x0FE1
    23e4:	f0 91 e2 0f 	lds	r31, 0x0FE2
    23e8:	80 91 82 01 	lds	r24, 0x0182
    23ec:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    23ee:	e0 91 e1 0f 	lds	r30, 0x0FE1
    23f2:	f0 91 e2 0f 	lds	r31, 0x0FE2
    23f6:	80 91 87 01 	lds	r24, 0x0187
    23fa:	90 91 88 01 	lds	r25, 0x0188
    23fe:	92 83       	std	Z+2, r25	; 0x02
    2400:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    2402:	e0 91 e1 0f 	lds	r30, 0x0FE1
    2406:	f0 91 e2 0f 	lds	r31, 0x0FE2
    240a:	80 91 7b 01 	lds	r24, 0x017B
    240e:	8b 50       	subi	r24, 0x0B	; 11
    2410:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    2412:	a0 91 e1 0f 	lds	r26, 0x0FE1
    2416:	b0 91 e2 0f 	lds	r27, 0x0FE2
    241a:	e0 91 e1 0f 	lds	r30, 0x0FE1
    241e:	f0 91 e2 0f 	lds	r31, 0x0FE2
    2422:	13 96       	adiw	r26, 0x03	; 3
    2424:	9c 91       	ld	r25, X
    2426:	84 81       	ldd	r24, Z+4	; 0x04
    2428:	89 17       	cp	r24, r25
    242a:	3c f0       	brlt	.+14     	; 0x243a <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    242c:	e0 91 e1 0f 	lds	r30, 0x0FE1
    2430:	f0 91 e2 0f 	lds	r31, 0x0FE2
    2434:	83 81       	ldd	r24, Z+3	; 0x03
    2436:	87 ff       	sbrs	r24, 7
    2438:	0d c0       	rjmp	.+26     	; 0x2454 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    243a:	10 92 22 10 	sts	0x1022, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    243e:	80 91 4c 01 	lds	r24, 0x014C
    2442:	8f 77       	andi	r24, 0x7F	; 127
    2444:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    2448:	80 91 4c 01 	lds	r24, 0x014C
    244c:	80 68       	ori	r24, 0x80	; 128
    244e:	80 93 4c 01 	sts	0x014C, r24
    2452:	51 c0       	rjmp	.+162    	; 0x24f6 <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    2454:	a0 91 e1 0f 	lds	r26, 0x0FE1
    2458:	b0 91 e2 0f 	lds	r27, 0x0FE2
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    245c:	e0 91 e1 0f 	lds	r30, 0x0FE1
    2460:	f0 91 e2 0f 	lds	r31, 0x0FE2
    2464:	13 96       	adiw	r26, 0x03	; 3
    2466:	4c 91       	ld	r20, X
    2468:	55 27       	eor	r21, r21
    246a:	47 fd       	sbrc	r20, 7
    246c:	50 95       	com	r21
    246e:	69 e8       	ldi	r22, 0x89	; 137
    2470:	71 e0       	ldi	r23, 0x01	; 1
    2472:	85 81       	ldd	r24, Z+5	; 0x05
    2474:	96 81       	ldd	r25, Z+6	; 0x06
    2476:	0e 94 85 31 	call	0x630a	; 0x630a <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    247a:	e0 91 e1 0f 	lds	r30, 0x0FE1
    247e:	f0 91 e2 0f 	lds	r31, 0x0FE2
    2482:	80 91 80 01 	lds	r24, 0x0180
    2486:	85 fb       	bst	r24, 5
    2488:	88 27       	eor	r24, r24
    248a:	80 f9       	bld	r24, 0
    248c:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    248e:	e0 91 e1 0f 	lds	r30, 0x0FE1
    2492:	f0 91 e2 0f 	lds	r31, 0x0FE2
    2496:	80 91 47 01 	lds	r24, 0x0147
    249a:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    249c:	e0 91 e1 0f 	lds	r30, 0x0FE1
    24a0:	f0 91 e2 0f 	lds	r31, 0x0FE2
    24a4:	80 91 46 01 	lds	r24, 0x0146
    24a8:	86 95       	lsr	r24
    24aa:	86 95       	lsr	r24
    24ac:	86 95       	lsr	r24
    24ae:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    24b0:	e0 91 e1 0f 	lds	r30, 0x0FE1
    24b4:	f0 91 e2 0f 	lds	r31, 0x0FE2
    24b8:	80 91 47 01 	lds	r24, 0x0147
    24bc:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    24be:	a0 91 e1 0f 	lds	r26, 0x0FE1
    24c2:	b0 91 e2 0f 	lds	r27, 0x0FE2
    24c6:	e0 91 7b 01 	lds	r30, 0x017B
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	e0 58       	subi	r30, 0x80	; 128
    24ce:	fe 4f       	sbci	r31, 0xFE	; 254
    24d0:	80 81       	ld	r24, Z
    24d2:	1b 96       	adiw	r26, 0x0b	; 11
    24d4:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    24d6:	10 92 22 10 	sts	0x1022, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    24da:	80 91 4c 01 	lds	r24, 0x014C
    24de:	8f 77       	andi	r24, 0x7F	; 127
    24e0:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    24e4:	80 91 4c 01 	lds	r24, 0x014C
    24e8:	80 68       	ori	r24, 0x80	; 128
    24ea:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    24f6:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    24f8:	08 95       	ret

000024fa <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    24fa:	1f 92       	push	r1
    24fc:	0f 92       	push	r0
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	0f 92       	push	r0
    2502:	11 24       	eor	r1, r1
    2504:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    2506:	80 e8       	ldi	r24, 0x80	; 128
    2508:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    250c:	8f 91       	pop	r24
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    2518:	1f 92       	push	r1
    251a:	0f 92       	push	r0
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	0f 92       	push	r0
    2520:	11 24       	eor	r1, r1
    2522:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	80 93 f2 0f 	sts	0x0FF2, r24
	IRQ_STATUS = (1 << TX_END);
    252a:	80 e4       	ldi	r24, 0x40	; 64
    252c:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    2530:	8f 91       	pop	r24
    2532:	0f 90       	pop	r0
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	0f 90       	pop	r0
    2538:	1f 90       	pop	r1
    253a:	18 95       	reti

0000253c <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    253c:	1f 92       	push	r1
    253e:	0f 92       	push	r0
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	0f 92       	push	r0
    2544:	11 24       	eor	r1, r1
    2546:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    2548:	80 e2       	ldi	r24, 0x20	; 32
    254a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    254e:	8f 91       	pop	r24
    2550:	0f 90       	pop	r0
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	0f 90       	pop	r0
    2556:	1f 90       	pop	r1
    2558:	18 95       	reti

0000255a <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    255a:	1f 92       	push	r1
    255c:	0f 92       	push	r0
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	0f 92       	push	r0
    2562:	11 24       	eor	r1, r1
    2564:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    2566:	80 e1       	ldi	r24, 0x10	; 16
    2568:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    256c:	8f 91       	pop	r24
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    2578:	1f 92       	push	r1
    257a:	0f 92       	push	r0
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	0f 92       	push	r0
    2580:	11 24       	eor	r1, r1
    2582:	0b b6       	in	r0, 0x3b	; 59
    2584:	0f 92       	push	r0
    2586:	2f 93       	push	r18
    2588:	3f 93       	push	r19
    258a:	4f 93       	push	r20
    258c:	5f 93       	push	r21
    258e:	6f 93       	push	r22
    2590:	7f 93       	push	r23
    2592:	8f 93       	push	r24
    2594:	9f 93       	push	r25
    2596:	af 93       	push	r26
    2598:	bf 93       	push	r27
    259a:	ef 93       	push	r30
    259c:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    259e:	84 e0       	ldi	r24, 0x04	; 4
    25a0:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    25a4:	e0 91 9a 05 	lds	r30, 0x059A
    25a8:	f0 91 9b 05 	lds	r31, 0x059B
    25ac:	30 97       	sbiw	r30, 0x00	; 0
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <__vector_59+0x3a>
		rx_start_func();
    25b0:	09 95       	icall

	return;
}
    25b2:	ff 91       	pop	r31
    25b4:	ef 91       	pop	r30
    25b6:	bf 91       	pop	r27
    25b8:	af 91       	pop	r26
    25ba:	9f 91       	pop	r25
    25bc:	8f 91       	pop	r24
    25be:	7f 91       	pop	r23
    25c0:	6f 91       	pop	r22
    25c2:	5f 91       	pop	r21
    25c4:	4f 91       	pop	r20
    25c6:	3f 91       	pop	r19
    25c8:	2f 91       	pop	r18
    25ca:	0f 90       	pop	r0
    25cc:	0b be       	out	0x3b, r0	; 59
    25ce:	0f 90       	pop	r0
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	0f 90       	pop	r0
    25d4:	1f 90       	pop	r1
    25d6:	18 95       	reti

000025d8 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    25d8:	1f 92       	push	r1
    25da:	0f 92       	push	r0
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	0f 92       	push	r0
    25e0:	11 24       	eor	r1, r1
    25e2:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    25ea:	8f 91       	pop	r24
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    25f6:	1f 92       	push	r1
    25f8:	0f 92       	push	r0
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	0f 92       	push	r0
    25fe:	11 24       	eor	r1, r1
    2600:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2608:	8f 91       	pop	r24
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	0f 90       	pop	r0
    2610:	1f 90       	pop	r1
    2612:	18 95       	reti

00002614 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    2614:	e9 e4       	ldi	r30, 0x49	; 73
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	90 81       	ld	r25, Z
    261a:	90 7f       	andi	r25, 0xF0	; 240
    261c:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    261e:	90 81       	ld	r25, Z
    2620:	8f 70       	andi	r24, 0x0F	; 15
    2622:	98 2b       	or	r25, r24
    2624:	90 83       	st	Z, r25
    2626:	08 95       	ret

00002628 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    2628:	8f ef       	ldi	r24, 0xFF	; 255
    262a:	08 95       	ret

0000262c <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    262c:	08 95       	ret

0000262e <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    262e:	08 95       	ret

00002630 <rf_security_disable>:
}



void rf_security_disable()
{
    2630:	08 95       	ret

00002632 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    2632:	8f ef       	ldi	r24, 0xFF	; 255
    2634:	08 95       	ret

00002636 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    2636:	80 91 dc 0f 	lds	r24, 0x0FDC
    263a:	90 91 dd 0f 	lds	r25, 0x0FDD
    263e:	08 95       	ret

00002640 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	08 95       	ret

00002644 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    2644:	08 95       	ret

00002646 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	08 95       	ret

0000264a <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	08 95       	ret

0000264e <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	08 95       	ret

00002652 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    2652:	08 95       	ret

00002654 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    2654:	08 95       	ret

00002656 <rf_test_mode>:
}



void rf_test_mode()
{
    2656:	08 95       	ret

00002658 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    2658:	08 95       	ret

0000265a <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    265a:	08 95       	ret

0000265c <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    265c:	08 95       	ret

0000265e <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    265e:	08 95       	ret

00002660 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    2660:	08 95       	ret

00002662 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    2662:	e7 e3       	ldi	r30, 0x37	; 55
    2664:	f1 e0       	ldi	r31, 0x01	; 1
    2666:	80 81       	ld	r24, Z
    2668:	83 60       	ori	r24, 0x03	; 3
    266a:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    266c:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    266e:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    2670:	8d b1       	in	r24, 0x0d	; 13
    2672:	80 6e       	ori	r24, 0xE0	; 224
    2674:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    2676:	8e b1       	in	r24, 0x0e	; 14
    2678:	80 6e       	ori	r24, 0xE0	; 224
    267a:	8e b9       	out	0x0e, r24	; 14
    267c:	08 95       	ret

0000267e <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    267e:	e7 e3       	ldi	r30, 0x37	; 55
    2680:	f1 e0       	ldi	r31, 0x01	; 1
    2682:	80 81       	ld	r24, Z
    2684:	83 60       	ori	r24, 0x03	; 3
    2686:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    2688:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    268a:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    268c:	8d b1       	in	r24, 0x0d	; 13
    268e:	80 6e       	ori	r24, 0xE0	; 224
    2690:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    2692:	8e b1       	in	r24, 0x0e	; 14
    2694:	80 6e       	ori	r24, 0xE0	; 224
    2696:	8e b9       	out	0x0e, r24	; 14
    2698:	08 95       	ret

0000269a <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    269a:	cf 92       	push	r12
    269c:	df 92       	push	r13
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	27 97       	sbiw	r28, 0x07	; 7
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    26ba:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    26be:	e0 91 e1 0f 	lds	r30, 0x0FE1
    26c2:	f0 91 e2 0f 	lds	r31, 0x0FE2
    26c6:	c0 80       	ld	r12, Z
    26c8:	d3 80       	ldd	r13, Z+3	; 0x03
    26ca:	e5 80       	ldd	r14, Z+5	; 0x05
    26cc:	f6 80       	ldd	r15, Z+6	; 0x06
    26ce:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    26d0:	0e 94 d6 11 	call	0x23ac	; 0x23ac <rf_rx_packet_nonblock>
	if (err < 1) {
    26d4:	18 16       	cp	r1, r24
    26d6:	1c f0       	brlt	.+6      	; 0x26de <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    26d8:	81 e1       	ldi	r24, 0x11	; 17
    26da:	94 e0       	ldi	r25, 0x04	; 4
    26dc:	06 c0       	rjmp	.+12     	; 0x26ea <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    26de:	f7 01       	movw	r30, r14
    26e0:	10 81       	ld	r17, Z
	if (ttl == 0) {
    26e2:	11 11       	cpse	r17, r1
    26e4:	07 c0       	rjmp	.+14     	; 0x26f4 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    26e6:	80 e3       	ldi	r24, 0x30	; 48
    26e8:	94 e0       	ldi	r25, 0x04	; 4
    26ea:	0e 94 80 32 	call	0x6500	; 0x6500 <puts>
#endif
		nrk_int_enable();
    26ee:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
		return;
    26f2:	31 c0       	rjmp	.+98     	; 0x2756 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    26f4:	15 30       	cpi	r17, 0x05	; 5
    26f6:	21 f4       	brne	.+8      	; 0x2700 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    26f8:	8a e0       	ldi	r24, 0x0A	; 10
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    2700:	c7 01       	movw	r24, r14
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	9f 93       	push	r25
    2706:	8f 93       	push	r24
    2708:	80 2f       	mov	r24, r16
    270a:	99 27       	eor	r25, r25
    270c:	87 fd       	sbrc	r24, 7
    270e:	90 95       	com	r25
    2710:	9f 93       	push	r25
    2712:	0f 93       	push	r16
    2714:	1f 92       	push	r1
    2716:	1f 93       	push	r17
    2718:	1f 92       	push	r1
    271a:	cf 92       	push	r12
    271c:	82 e5       	ldi	r24, 0x52	; 82
    271e:	94 e0       	ldi	r25, 0x04	; 4
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    2728:	fd 82       	std	Y+5, r15	; 0x05
    272a:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    272c:	11 50       	subi	r17, 0x01	; 1
    272e:	f7 01       	movw	r30, r14
    2730:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    2732:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    2734:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    2736:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	9f ef       	ldi	r25, 0xFF	; 255
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    2740:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    2744:	ce 01       	movw	r24, r28
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	0e 94 a0 11 	call	0x2340	; 0x2340 <rf_tx_packet>
#endif
	return;
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	cd bf       	out	0x3d, r28	; 61
}
    2756:	27 96       	adiw	r28, 0x07	; 7
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	df 90       	pop	r13
    2770:	cf 90       	pop	r12
    2772:	08 95       	ret

00002774 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    2774:	1f 92       	push	r1
    2776:	0f 92       	push	r0
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	0f 92       	push	r0
    277c:	11 24       	eor	r1, r1
    277e:	0b b6       	in	r0, 0x3b	; 59
    2780:	0f 92       	push	r0
    2782:	2f 93       	push	r18
    2784:	3f 93       	push	r19
    2786:	4f 93       	push	r20
    2788:	5f 93       	push	r21
    278a:	6f 93       	push	r22
    278c:	7f 93       	push	r23
    278e:	8f 93       	push	r24
    2790:	9f 93       	push	r25
    2792:	af 93       	push	r26
    2794:	bf 93       	push	r27
    2796:	ef 93       	push	r30
    2798:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 91 7b 01 	lds	r25, 0x017B
    27a0:	89 17       	cp	r24, r25
    27a2:	10 f4       	brcc	.+4      	; 0x27a8 <__vector_60+0x34>
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	fa cf       	rjmp	.-12     	; 0x279c <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    27a8:	80 91 46 01 	lds	r24, 0x0146
    27ac:	87 ff       	sbrs	r24, 7
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <__vector_60+0x44>
		rx_ready = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	80 93 22 10 	sts	0x1022, r24
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    27b8:	8b e7       	ldi	r24, 0x7B	; 123
    27ba:	94 e0       	ldi	r25, 0x04	; 4
    27bc:	0e 94 80 32 	call	0x6500	; 0x6500 <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    27c0:	88 e0       	ldi	r24, 0x08	; 8
    27c2:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    27c6:	80 91 46 01 	lds	r24, 0x0146
    27ca:	87 ff       	sbrs	r24, 7
    27cc:	05 c0       	rjmp	.+10     	; 0x27d8 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    27ce:	80 91 de 0f 	lds	r24, 0x0FDE
    27d2:	81 11       	cpse	r24, r1
    27d4:	0e 94 4d 13 	call	0x269a	; 0x269a <rf_glossy_interrupt>
	}

	if(rx_end_func)
    27d8:	e0 91 98 05 	lds	r30, 0x0598
    27dc:	f0 91 99 05 	lds	r31, 0x0599
    27e0:	30 97       	sbiw	r30, 0x00	; 0
    27e2:	09 f0       	breq	.+2      	; 0x27e6 <__vector_60+0x72>
		rx_end_func();
    27e4:	09 95       	icall

	return;
}
    27e6:	ff 91       	pop	r31
    27e8:	ef 91       	pop	r30
    27ea:	bf 91       	pop	r27
    27ec:	af 91       	pop	r26
    27ee:	9f 91       	pop	r25
    27f0:	8f 91       	pop	r24
    27f2:	7f 91       	pop	r23
    27f4:	6f 91       	pop	r22
    27f6:	5f 91       	pop	r21
    27f8:	4f 91       	pop	r20
    27fa:	3f 91       	pop	r19
    27fc:	2f 91       	pop	r18
    27fe:	0f 90       	pop	r0
    2800:	0b be       	out	0x3b, r0	; 59
    2802:	0f 90       	pop	r0
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	0f 90       	pop	r0
    2808:	1f 90       	pop	r1
    280a:	18 95       	reti

0000280c <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    280c:	a3 ef       	ldi	r26, 0xF3	; 243
    280e:	bf e0       	ldi	r27, 0x0F	; 15
    2810:	fc 01       	movw	r30, r24
    2812:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    2814:	20 81       	ld	r18, Z
    2816:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    2818:	21 91       	ld	r18, Z+
    281a:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    281e:	e8 17       	cp	r30, r24
    2820:	f9 07       	cpc	r31, r25
    2822:	c1 f7       	brne	.-16     	; 0x2814 <aes_setkey+0x8>
    2824:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    2826:	10 92 3e 01 	sts	0x013E, r1
    282a:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    282c:	e1 f7       	brne	.-8      	; 0x2826 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    282e:	80 e8       	ldi	r24, 0x80	; 128
    2830:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    2834:	80 91 3d 01 	lds	r24, 0x013D
    2838:	80 ff       	sbrs	r24, 0
    283a:	fc cf       	rjmp	.-8      	; 0x2834 <aes_setkey+0x28>
    283c:	ec e0       	ldi	r30, 0x0C	; 12
    283e:	f0 e1       	ldi	r31, 0x10	; 16
    2840:	80 e1       	ldi	r24, 0x10	; 16
    2842:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    2844:	90 91 3f 01 	lds	r25, 0x013F
    2848:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    284a:	8e 13       	cpse	r24, r30
    284c:	fb cf       	rjmp	.-10     	; 0x2844 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    284e:	08 95       	ret

00002850 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    2856:	66 23       	and	r22, r22
    2858:	09 f4       	brne	.+2      	; 0x285c <aes_encrypt+0xc>
    285a:	45 c0       	rjmp	.+138    	; 0x28e6 <aes_encrypt+0x96>
    285c:	86 2f       	mov	r24, r22
    285e:	8f 70       	andi	r24, 0x0F	; 15
    2860:	09 f0       	breq	.+2      	; 0x2864 <aes_encrypt+0x14>
    2862:	41 c0       	rjmp	.+130    	; 0x28e6 <aes_encrypt+0x96>
    2864:	e3 ef       	ldi	r30, 0xF3	; 243
    2866:	ff e0       	ldi	r31, 0x0F	; 15
    2868:	90 e1       	ldi	r25, 0x10	; 16
    286a:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    286c:	21 91       	ld	r18, Z+
    286e:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    2872:	9e 13       	cpse	r25, r30
    2874:	fb cf       	rjmp	.-10     	; 0x286c <aes_encrypt+0x1c>
    2876:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2878:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    287a:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    287c:	40 e1       	ldi	r20, 0x10	; 16
    287e:	94 9f       	mul	r25, r20
    2880:	90 01       	movw	r18, r0
    2882:	11 24       	eor	r1, r1
    2884:	26 17       	cp	r18, r22
    2886:	37 07       	cpc	r19, r23
    2888:	7c f5       	brge	.+94     	; 0x28e8 <aes_encrypt+0x98>
      if(i==0)
    288a:	91 11       	cpse	r25, r1
    288c:	03 c0       	rjmp	.+6      	; 0x2894 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    288e:	10 92 3c 01 	sts	0x013C, r1
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    2894:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	2a 0f       	add	r18, r26
    289e:	3b 1f       	adc	r19, r27
    28a0:	e9 01       	movw	r28, r18
    28a2:	c4 0f       	add	r28, r20
    28a4:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    28a6:	f8 81       	ld	r31, Y
    28a8:	f0 93 3e 01 	sts	0x013E, r31
    28ac:	4f 5f       	subi	r20, 0xFF	; 255
    28ae:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    28b0:	40 31       	cpi	r20, 0x10	; 16
    28b2:	51 05       	cpc	r21, r1
    28b4:	a9 f7       	brne	.-22     	; 0x28a0 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    28b6:	40 91 3c 01 	lds	r20, 0x013C
    28ba:	40 68       	ori	r20, 0x80	; 128
    28bc:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    28c0:	40 91 3d 01 	lds	r20, 0x013D
    28c4:	40 ff       	sbrs	r20, 0
    28c6:	fc cf       	rjmp	.-8      	; 0x28c0 <aes_encrypt+0x70>
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    28cc:	f0 91 3e 01 	lds	r31, 0x013E
    28d0:	e9 01       	movw	r28, r18
    28d2:	c4 0f       	add	r28, r20
    28d4:	d5 1f       	adc	r29, r21
    28d6:	f8 83       	st	Y, r31
    28d8:	4f 5f       	subi	r20, 0xFF	; 255
    28da:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    28dc:	40 31       	cpi	r20, 0x10	; 16
    28de:	51 05       	cpc	r21, r1
    28e0:	a9 f7       	brne	.-22     	; 0x28cc <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    28e2:	9f 5f       	subi	r25, 0xFF	; 255
    28e4:	cb cf       	rjmp	.-106    	; 0x287c <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    28ee:	0f 93       	push	r16
    28f0:	1f 93       	push	r17
    28f2:	cf 93       	push	r28
    28f4:	df 93       	push	r29
    28f6:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    28f8:	61 30       	cpi	r22, 0x01	; 1
    28fa:	09 f4       	brne	.+2      	; 0x28fe <aes_decrypt+0x10>
    28fc:	58 c0       	rjmp	.+176    	; 0x29ae <aes_decrypt+0xc0>
    28fe:	86 2f       	mov	r24, r22
    2900:	8f 70       	andi	r24, 0x0F	; 15
    2902:	09 f0       	breq	.+2      	; 0x2906 <aes_decrypt+0x18>
    2904:	54 c0       	rjmp	.+168    	; 0x29ae <aes_decrypt+0xc0>
    2906:	ec e0       	ldi	r30, 0x0C	; 12
    2908:	f0 e1       	ldi	r31, 0x10	; 16
    290a:	90 e1       	ldi	r25, 0x10	; 16
    290c:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    290e:	21 91       	ld	r18, Z+
    2910:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    2914:	9e 13       	cpse	r25, r30
    2916:	fb cf       	rjmp	.-10     	; 0x290e <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2918:	62 95       	swap	r22
    291a:	6f 70       	andi	r22, 0x0F	; 15
    291c:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    291e:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2920:	6f 3f       	cpi	r22, 0xFF	; 255
    2922:	09 f4       	brne	.+2      	; 0x2926 <aes_decrypt+0x38>
    2924:	45 c0       	rjmp	.+138    	; 0x29b0 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2926:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    292a:	46 2f       	mov	r20, r22
    292c:	55 27       	eor	r21, r21
    292e:	47 fd       	sbrc	r20, 7
    2930:	50 95       	com	r21
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	ed 01       	movw	r28, r26
    2938:	90 e1       	ldi	r25, 0x10	; 16
    293a:	69 02       	muls	r22, r25
    293c:	c0 0d       	add	r28, r0
    293e:	d1 1d       	adc	r29, r1
    2940:	11 24       	eor	r1, r1
    2942:	fe 01       	movw	r30, r28
    2944:	e2 0f       	add	r30, r18
    2946:	f3 1f       	adc	r31, r19
    2948:	90 81       	ld	r25, Z
    294a:	90 93 3e 01 	sts	0x013E, r25
    294e:	2f 5f       	subi	r18, 0xFF	; 255
    2950:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    2952:	20 31       	cpi	r18, 0x10	; 16
    2954:	31 05       	cpc	r19, r1
    2956:	a9 f7       	brne	.-22     	; 0x2942 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    2958:	90 91 3c 01 	lds	r25, 0x013C
    295c:	90 68       	ori	r25, 0x80	; 128
    295e:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    2962:	90 91 3d 01 	lds	r25, 0x013D
    2966:	90 ff       	sbrs	r25, 0
    2968:	fc cf       	rjmp	.-8      	; 0x2962 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    296a:	41 50       	subi	r20, 0x01	; 1
    296c:	51 09       	sbc	r21, r1
    296e:	94 e0       	ldi	r25, 0x04	; 4
    2970:	44 0f       	add	r20, r20
    2972:	55 1f       	adc	r21, r21
    2974:	9a 95       	dec	r25
    2976:	e1 f7       	brne	.-8      	; 0x2970 <aes_decrypt+0x82>
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    297c:	90 91 3e 01 	lds	r25, 0x013E
    2980:	8e 01       	movw	r16, r28
    2982:	02 0f       	add	r16, r18
    2984:	13 1f       	adc	r17, r19
    2986:	f8 01       	movw	r30, r16
    2988:	90 83       	st	Z, r25
         if(i!=0)
    298a:	66 23       	and	r22, r22
    298c:	49 f0       	breq	.+18     	; 0x29a0 <aes_decrypt+0xb2>
    298e:	f9 01       	movw	r30, r18
    2990:	e4 0f       	add	r30, r20
    2992:	f5 1f       	adc	r31, r21
    2994:	ea 0f       	add	r30, r26
    2996:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    2998:	e0 81       	ld	r30, Z
    299a:	9e 27       	eor	r25, r30
    299c:	f8 01       	movw	r30, r16
    299e:	90 83       	st	Z, r25
    29a0:	2f 5f       	subi	r18, 0xFF	; 255
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    29a4:	20 31       	cpi	r18, 0x10	; 16
    29a6:	31 05       	cpc	r19, r1
    29a8:	49 f7       	brne	.-46     	; 0x297c <aes_decrypt+0x8e>
    29aa:	61 50       	subi	r22, 0x01	; 1
    29ac:	b9 cf       	rjmp	.-142    	; 0x2920 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    29b0:	df 91       	pop	r29
    29b2:	cf 91       	pop	r28
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
    29b8:	08 95       	ret

000029ba <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    29ba:	90 91 c0 00 	lds	r25, 0x00C0
    29be:	95 ff       	sbrs	r25, 5
    29c0:	fc cf       	rjmp	.-8      	; 0x29ba <putc0>
    29c2:	90 91 c0 00 	lds	r25, 0x00C0
    29c6:	9f 7d       	andi	r25, 0xDF	; 223
    29c8:	90 93 c0 00 	sts	0x00C0, r25
    29cc:	80 93 c6 00 	sts	0x00C6, r24
    29d0:	08 95       	ret

000029d2 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	11 24       	eor	r1, r1
    29dc:	0b b6       	in	r0, 0x3b	; 59
    29de:	0f 92       	push	r0
    29e0:	2f 93       	push	r18
    29e2:	3f 93       	push	r19
    29e4:	4f 93       	push	r20
    29e6:	5f 93       	push	r21
    29e8:	6f 93       	push	r22
    29ea:	7f 93       	push	r23
    29ec:	8f 93       	push	r24
    29ee:	9f 93       	push	r25
    29f0:	af 93       	push	r26
    29f2:	bf 93       	push	r27
    29f4:	ef 93       	push	r30
    29f6:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    29f8:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    29fc:	80 91 c0 00 	lds	r24, 0x00C0
    2a00:	87 ff       	sbrs	r24, 7
    2a02:	fc cf       	rjmp	.-8      	; 0x29fc <__vector_25+0x2a>
    2a04:	80 91 c0 00 	lds	r24, 0x00C0
    2a08:	8f 77       	andi	r24, 0x7F	; 127
    2a0a:	80 93 c0 00 	sts	0x00C0, r24
    2a0e:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    2a12:	80 91 ad 05 	lds	r24, 0x05AD
    2a16:	90 91 ae 05 	lds	r25, 0x05AE
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	e3 56       	subi	r30, 0x63	; 99
    2a1e:	fa 4f       	sbci	r31, 0xFA	; 250
    2a20:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2a22:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    2a24:	80 31       	cpi	r24, 0x10	; 16
    2a26:	91 05       	cpc	r25, r1
    2a28:	29 f0       	breq	.+10     	; 0x2a34 <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2a2a:	90 93 ae 05 	sts	0x05AE, r25
    2a2e:	80 93 ad 05 	sts	0x05AD, r24
    2a32:	04 c0       	rjmp	.+8      	; 0x2a3c <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    2a34:	10 92 ae 05 	sts	0x05AE, r1
    2a38:	10 92 ad 05 	sts	0x05AD, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    2a3c:	80 91 9c 05 	lds	r24, 0x059C
    2a40:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <nrk_event_signal>
CLEAR_UART0_RX_INT();
    2a44:	80 91 c0 00 	lds	r24, 0x00C0
    2a48:	8f 77       	andi	r24, 0x7F	; 127
    2a4a:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    2a4e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
}
    2a52:	ff 91       	pop	r31
    2a54:	ef 91       	pop	r30
    2a56:	bf 91       	pop	r27
    2a58:	af 91       	pop	r26
    2a5a:	9f 91       	pop	r25
    2a5c:	8f 91       	pop	r24
    2a5e:	7f 91       	pop	r23
    2a60:	6f 91       	pop	r22
    2a62:	5f 91       	pop	r21
    2a64:	4f 91       	pop	r20
    2a66:	3f 91       	pop	r19
    2a68:	2f 91       	pop	r18
    2a6a:	0f 90       	pop	r0
    2a6c:	0b be       	out	0x3b, r0	; 59
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

00002a78 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    2a78:	81 11       	cpse	r24, r1
    2a7a:	0d c0       	rjmp	.+26     	; 0x2a96 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	40 91 af 05 	lds	r20, 0x05AF
    2a82:	50 91 b0 05 	lds	r21, 0x05B0
    2a86:	20 91 ad 05 	lds	r18, 0x05AD
    2a8a:	30 91 ae 05 	lds	r19, 0x05AE
    2a8e:	42 17       	cp	r20, r18
    2a90:	53 07       	cpc	r21, r19
    2a92:	51 f4       	brne	.+20     	; 0x2aa8 <nrk_uart_data_ready+0x30>
    2a94:	08 c0       	rjmp	.+16     	; 0x2aa6 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	31 f4       	brne	.+12     	; 0x2aa6 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    2a9a:	80 91 c8 00 	lds	r24, 0x00C8
    2a9e:	88 1f       	adc	r24, r24
    2aa0:	88 27       	eor	r24, r24
    2aa2:	88 1f       	adc	r24, r24
    2aa4:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
}
    2aa8:	08 95       	ret

00002aaa <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2aaa:	80 91 9c 05 	lds	r24, 0x059C
    2aae:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab0:	19 f4       	brne	.+6      	; 0x2ab8 <nrk_uart_rx_signal_get+0xe>
    2ab2:	8e e0       	ldi	r24, 0x0E	; 14
    2ab4:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <nrk_error_add>
   return uart_rx_signal;
}
    2ab8:	80 91 9c 05 	lds	r24, 0x059C
    2abc:	08 95       	ret

00002abe <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	24 91       	lpm	r18, Z
    2ac6:	ec 01       	movw	r28, r24
    2ac8:	21 96       	adiw	r28, 0x01	; 1
    2aca:	22 23       	and	r18, r18
    2acc:	51 f0       	breq	.+20     	; 0x2ae2 <nrk_kprintf+0x24>
        putchar(c);
    2ace:	60 91 7f 11 	lds	r22, 0x117F
    2ad2:	70 91 80 11 	lds	r23, 0x1180
    2ad6:	82 2f       	mov	r24, r18
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    2ade:	ce 01       	movw	r24, r28
    2ae0:	f0 cf       	rjmp	.-32     	; 0x2ac2 <nrk_kprintf+0x4>
}
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	08 95       	ret

00002ae8 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    2ae8:	20 91 af 05 	lds	r18, 0x05AF
    2aec:	30 91 b0 05 	lds	r19, 0x05B0
    2af0:	80 91 ad 05 	lds	r24, 0x05AD
    2af4:	90 91 ae 05 	lds	r25, 0x05AE
    2af8:	28 17       	cp	r18, r24
    2afa:	39 07       	cpc	r19, r25
    2afc:	69 f4       	brne	.+26     	; 0x2b18 <getc0+0x30>
    2afe:	80 91 9c 05 	lds	r24, 0x059C
    2b02:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <nrk_signal_register>
    2b06:	60 91 9c 05 	lds	r22, 0x059C
    2b0a:	77 27       	eor	r23, r23
    2b0c:	67 fd       	sbrc	r22, 7
    2b0e:	70 95       	com	r23
    2b10:	87 2f       	mov	r24, r23
    2b12:	97 2f       	mov	r25, r23
    2b14:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    2b18:	6f 3f       	cpi	r22, 0xFF	; 255
    2b1a:	21 f4       	brne	.+8      	; 0x2b24 <getc0+0x3c>
    2b1c:	87 ee       	ldi	r24, 0xE7	; 231
    2b1e:	94 e0       	ldi	r25, 0x04	; 4
    2b20:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    2b24:	20 91 af 05 	lds	r18, 0x05AF
    2b28:	30 91 b0 05 	lds	r19, 0x05B0
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	e3 56       	subi	r30, 0x63	; 99
    2b30:	fa 4f       	sbci	r31, 0xFA	; 250
    2b32:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    2b34:	2f 5f       	subi	r18, 0xFF	; 255
    2b36:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2b38:	20 31       	cpi	r18, 0x10	; 16
    2b3a:	31 05       	cpc	r19, r1
    2b3c:	28 f4       	brcc	.+10     	; 0x2b48 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    2b3e:	30 93 b0 05 	sts	0x05B0, r19
    2b42:	20 93 af 05 	sts	0x05AF, r18
    2b46:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    2b48:	10 92 b0 05 	sts	0x05B0, r1
    2b4c:	10 92 af 05 	sts	0x05AF, r1

   return tmp;
}
    2b50:	08 95       	ret

00002b52 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    2b52:	86 e0       	ldi	r24, 0x06	; 6
    2b54:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    2b56:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    2b58:	88 ef       	ldi	r24, 0xF8	; 248
    2b5a:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2b5c:	80 ef       	ldi	r24, 0xF0	; 240
    2b5e:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2b60:	82 e0       	ldi	r24, 0x02	; 2
    2b62:	8d b9       	out	0x0d, r24	; 13
    2b64:	08 95       	ret

00002b66 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    2b66:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <PORT_INIT>

00002b6a <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <nrk_gpio_set+0x6>
    2b6e:	6c c0       	rjmp	.+216    	; 0x2c48 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2b70:	e8 2f       	mov	r30, r24
    2b72:	e7 70       	andi	r30, 0x07	; 7
    2b74:	4e 2f       	mov	r20, r30
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	47 30       	cpi	r20, 0x07	; 7
    2b7a:	51 05       	cpc	r21, r1
    2b7c:	08 f0       	brcs	.+2      	; 0x2b80 <nrk_gpio_set+0x16>
    2b7e:	64 c0       	rjmp	.+200    	; 0x2c48 <nrk_gpio_set+0xde>
    2b80:	fa 01       	movw	r30, r20
    2b82:	e0 57       	subi	r30, 0x70	; 112
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	86 95       	lsr	r24
    2b88:	86 95       	lsr	r24
    2b8a:	86 95       	lsr	r24
    2b8c:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2b90:	42 b1       	in	r20, 0x02	; 2
    2b92:	21 e0       	ldi	r18, 0x01	; 1
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	b9 01       	movw	r22, r18
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <nrk_gpio_set+0x34>
    2b9a:	66 0f       	add	r22, r22
    2b9c:	77 1f       	adc	r23, r23
    2b9e:	8a 95       	dec	r24
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <nrk_gpio_set+0x30>
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	84 2b       	or	r24, r20
    2ba6:	82 b9       	out	0x02, r24	; 2
    2ba8:	4d c0       	rjmp	.+154    	; 0x2c44 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2baa:	45 b1       	in	r20, 0x05	; 5
    2bac:	21 e0       	ldi	r18, 0x01	; 1
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	b9 01       	movw	r22, r18
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <nrk_gpio_set+0x4e>
    2bb4:	66 0f       	add	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	8a 95       	dec	r24
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <nrk_gpio_set+0x4a>
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	84 2b       	or	r24, r20
    2bc0:	85 b9       	out	0x05, r24	; 5
    2bc2:	40 c0       	rjmp	.+128    	; 0x2c44 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2bc4:	48 b1       	in	r20, 0x08	; 8
    2bc6:	21 e0       	ldi	r18, 0x01	; 1
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	b9 01       	movw	r22, r18
    2bcc:	02 c0       	rjmp	.+4      	; 0x2bd2 <nrk_gpio_set+0x68>
    2bce:	66 0f       	add	r22, r22
    2bd0:	77 1f       	adc	r23, r23
    2bd2:	8a 95       	dec	r24
    2bd4:	e2 f7       	brpl	.-8      	; 0x2bce <nrk_gpio_set+0x64>
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	84 2b       	or	r24, r20
    2bda:	88 b9       	out	0x08, r24	; 8
    2bdc:	33 c0       	rjmp	.+102    	; 0x2c44 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2bde:	4b b1       	in	r20, 0x0b	; 11
    2be0:	21 e0       	ldi	r18, 0x01	; 1
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	b9 01       	movw	r22, r18
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <nrk_gpio_set+0x82>
    2be8:	66 0f       	add	r22, r22
    2bea:	77 1f       	adc	r23, r23
    2bec:	8a 95       	dec	r24
    2bee:	e2 f7       	brpl	.-8      	; 0x2be8 <nrk_gpio_set+0x7e>
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	84 2b       	or	r24, r20
    2bf4:	8b b9       	out	0x0b, r24	; 11
    2bf6:	26 c0       	rjmp	.+76     	; 0x2c44 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2bf8:	4e b1       	in	r20, 0x0e	; 14
    2bfa:	21 e0       	ldi	r18, 0x01	; 1
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	b9 01       	movw	r22, r18
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <nrk_gpio_set+0x9c>
    2c02:	66 0f       	add	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	8a 95       	dec	r24
    2c08:	e2 f7       	brpl	.-8      	; 0x2c02 <nrk_gpio_set+0x98>
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	84 2b       	or	r24, r20
    2c0e:	8e b9       	out	0x0e, r24	; 14
    2c10:	19 c0       	rjmp	.+50     	; 0x2c44 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2c12:	41 b3       	in	r20, 0x11	; 17
    2c14:	21 e0       	ldi	r18, 0x01	; 1
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	b9 01       	movw	r22, r18
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <nrk_gpio_set+0xb6>
    2c1c:	66 0f       	add	r22, r22
    2c1e:	77 1f       	adc	r23, r23
    2c20:	8a 95       	dec	r24
    2c22:	e2 f7       	brpl	.-8      	; 0x2c1c <nrk_gpio_set+0xb2>
    2c24:	cb 01       	movw	r24, r22
    2c26:	84 2b       	or	r24, r20
    2c28:	81 bb       	out	0x11, r24	; 17
    2c2a:	0c c0       	rjmp	.+24     	; 0x2c44 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2c2c:	44 b3       	in	r20, 0x14	; 20
    2c2e:	21 e0       	ldi	r18, 0x01	; 1
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	b9 01       	movw	r22, r18
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <nrk_gpio_set+0xd0>
    2c36:	66 0f       	add	r22, r22
    2c38:	77 1f       	adc	r23, r23
    2c3a:	8a 95       	dec	r24
    2c3c:	e2 f7       	brpl	.-8      	; 0x2c36 <nrk_gpio_set+0xcc>
    2c3e:	cb 01       	movw	r24, r22
    2c40:	84 2b       	or	r24, r20
    2c42:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2c46:	08 95       	ret
                default: return -1;
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2c4a:	08 95       	ret

00002c4c <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2c4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <nrk_gpio_clr+0x6>
    2c50:	65 c0       	rjmp	.+202    	; 0x2d1c <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    2c52:	e8 2f       	mov	r30, r24
    2c54:	e7 70       	andi	r30, 0x07	; 7
    2c56:	4e 2f       	mov	r20, r30
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	47 30       	cpi	r20, 0x07	; 7
    2c5c:	51 05       	cpc	r21, r1
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <nrk_gpio_clr+0x16>
    2c60:	5d c0       	rjmp	.+186    	; 0x2d1c <nrk_gpio_clr+0xd0>
    2c62:	fa 01       	movw	r30, r20
    2c64:	e9 56       	subi	r30, 0x69	; 105
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	86 95       	lsr	r24
    2c6a:	86 95       	lsr	r24
    2c6c:	86 95       	lsr	r24
    2c6e:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2c72:	42 b1       	in	r20, 0x02	; 2
    2c74:	21 e0       	ldi	r18, 0x01	; 1
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	b9 01       	movw	r22, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <nrk_gpio_clr+0x34>
    2c7c:	66 0f       	add	r22, r22
    2c7e:	77 1f       	adc	r23, r23
    2c80:	8a 95       	dec	r24
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <nrk_gpio_clr+0x30>
    2c84:	cb 01       	movw	r24, r22
    2c86:	80 95       	com	r24
    2c88:	84 23       	and	r24, r20
    2c8a:	82 b9       	out	0x02, r24	; 2
    2c8c:	45 c0       	rjmp	.+138    	; 0x2d18 <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2c8e:	45 b1       	in	r20, 0x05	; 5
    2c90:	21 e0       	ldi	r18, 0x01	; 1
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	b9 01       	movw	r22, r18
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <nrk_gpio_clr+0x50>
    2c98:	66 0f       	add	r22, r22
    2c9a:	77 1f       	adc	r23, r23
    2c9c:	8a 95       	dec	r24
    2c9e:	e2 f7       	brpl	.-8      	; 0x2c98 <nrk_gpio_clr+0x4c>
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	80 95       	com	r24
    2ca4:	84 23       	and	r24, r20
    2ca6:	85 b9       	out	0x05, r24	; 5
    2ca8:	37 c0       	rjmp	.+110    	; 0x2d18 <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2caa:	48 b1       	in	r20, 0x08	; 8
    2cac:	21 e0       	ldi	r18, 0x01	; 1
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	b9 01       	movw	r22, r18
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <nrk_gpio_clr+0x6c>
    2cb4:	66 0f       	add	r22, r22
    2cb6:	77 1f       	adc	r23, r23
    2cb8:	8a 95       	dec	r24
    2cba:	e2 f7       	brpl	.-8      	; 0x2cb4 <nrk_gpio_clr+0x68>
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	80 95       	com	r24
    2cc0:	84 23       	and	r24, r20
    2cc2:	88 b9       	out	0x08, r24	; 8
    2cc4:	29 c0       	rjmp	.+82     	; 0x2d18 <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2cc6:	4b b1       	in	r20, 0x0b	; 11
    2cc8:	21 e0       	ldi	r18, 0x01	; 1
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	b9 01       	movw	r22, r18
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <nrk_gpio_clr+0x88>
    2cd0:	66 0f       	add	r22, r22
    2cd2:	77 1f       	adc	r23, r23
    2cd4:	8a 95       	dec	r24
    2cd6:	e2 f7       	brpl	.-8      	; 0x2cd0 <nrk_gpio_clr+0x84>
    2cd8:	cb 01       	movw	r24, r22
    2cda:	80 95       	com	r24
    2cdc:	84 23       	and	r24, r20
    2cde:	8b b9       	out	0x0b, r24	; 11
    2ce0:	1b c0       	rjmp	.+54     	; 0x2d18 <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2ce2:	4e b1       	in	r20, 0x0e	; 14
    2ce4:	21 e0       	ldi	r18, 0x01	; 1
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	b9 01       	movw	r22, r18
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <nrk_gpio_clr+0xa4>
    2cec:	66 0f       	add	r22, r22
    2cee:	77 1f       	adc	r23, r23
    2cf0:	8a 95       	dec	r24
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <nrk_gpio_clr+0xa0>
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	80 95       	com	r24
    2cf8:	84 23       	and	r24, r20
    2cfa:	8e b9       	out	0x0e, r24	; 14
    2cfc:	0d c0       	rjmp	.+26     	; 0x2d18 <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2cfe:	41 b3       	in	r20, 0x11	; 17
    2d00:	21 e0       	ldi	r18, 0x01	; 1
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	b9 01       	movw	r22, r18
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <nrk_gpio_clr+0xc0>
    2d08:	66 0f       	add	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	8a 95       	dec	r24
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <nrk_gpio_clr+0xbc>
    2d10:	cb 01       	movw	r24, r22
    2d12:	80 95       	com	r24
    2d14:	84 23       	and	r24, r20
    2d16:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2d1a:	08 95       	ret
                default: return -1;
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2d1e:	08 95       	ret

00002d20 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2d20:	8f 3f       	cpi	r24, 0xFF	; 255
    2d22:	31 f1       	breq	.+76     	; 0x2d70 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    2d24:	e8 2f       	mov	r30, r24
    2d26:	e7 70       	andi	r30, 0x07	; 7
    2d28:	4e 2f       	mov	r20, r30
    2d2a:	50 e0       	ldi	r21, 0x00	; 0
    2d2c:	47 30       	cpi	r20, 0x07	; 7
    2d2e:	51 05       	cpc	r21, r1
    2d30:	f8 f4       	brcc	.+62     	; 0x2d70 <nrk_gpio_get+0x50>
    2d32:	fa 01       	movw	r30, r20
    2d34:	e2 56       	subi	r30, 0x62	; 98
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	28 2f       	mov	r18, r24
    2d3a:	26 95       	lsr	r18
    2d3c:	26 95       	lsr	r18
    2d3e:	26 95       	lsr	r18
    2d40:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2d44:	90 b1       	in	r25, 0x00	; 0
    2d46:	0b c0       	rjmp	.+22     	; 0x2d5e <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2d48:	93 b1       	in	r25, 0x03	; 3
    2d4a:	09 c0       	rjmp	.+18     	; 0x2d5e <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2d4c:	96 b1       	in	r25, 0x06	; 6
    2d4e:	07 c0       	rjmp	.+14     	; 0x2d5e <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2d50:	99 b1       	in	r25, 0x09	; 9
    2d52:	05 c0       	rjmp	.+10     	; 0x2d5e <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2d54:	9c b1       	in	r25, 0x0c	; 12
    2d56:	03 c0       	rjmp	.+6      	; 0x2d5e <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2d58:	9f b1       	in	r25, 0x0f	; 15
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2d5c:	92 b3       	in	r25, 0x12	; 18
    2d5e:	89 2f       	mov	r24, r25
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <nrk_gpio_get+0x48>
    2d64:	95 95       	asr	r25
    2d66:	87 95       	ror	r24
    2d68:	2a 95       	dec	r18
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <nrk_gpio_get+0x44>
    2d6c:	81 70       	andi	r24, 0x01	; 1
    2d6e:	08 95       	ret
                default: return -1;
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2d72:	08 95       	ret

00002d74 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2d74:	8f 3f       	cpi	r24, 0xFF	; 255
    2d76:	09 f4       	brne	.+2      	; 0x2d7a <nrk_gpio_toggle+0x6>
    2d78:	06 c1       	rjmp	.+524    	; 0x2f86 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2d7a:	e8 2f       	mov	r30, r24
    2d7c:	e7 70       	andi	r30, 0x07	; 7
    2d7e:	4e 2f       	mov	r20, r30
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	47 30       	cpi	r20, 0x07	; 7
    2d84:	51 05       	cpc	r21, r1
    2d86:	08 f0       	brcs	.+2      	; 0x2d8a <nrk_gpio_toggle+0x16>
    2d88:	fe c0       	rjmp	.+508    	; 0x2f86 <nrk_gpio_toggle+0x212>
    2d8a:	fa 01       	movw	r30, r20
    2d8c:	eb 55       	subi	r30, 0x5B	; 91
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	86 95       	lsr	r24
    2d92:	86 95       	lsr	r24
    2d94:	86 95       	lsr	r24
    2d96:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2d9a:	20 b1       	in	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	08 2e       	mov	r0, r24
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <nrk_gpio_toggle+0x32>
    2da2:	35 95       	asr	r19
    2da4:	27 95       	ror	r18
    2da6:	0a 94       	dec	r0
    2da8:	e2 f7       	brpl	.-8      	; 0x2da2 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2daa:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2dac:	20 fd       	sbrc	r18, 0
    2dae:	0b c0       	rjmp	.+22     	; 0x2dc6 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2db0:	21 e0       	ldi	r18, 0x01	; 1
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	b9 01       	movw	r22, r18
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <nrk_gpio_toggle+0x48>
    2db8:	66 0f       	add	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	8a 95       	dec	r24
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <nrk_gpio_toggle+0x44>
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	84 2b       	or	r24, r20
    2dc4:	0b c0       	rjmp	.+22     	; 0x2ddc <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    2dc6:	21 e0       	ldi	r18, 0x01	; 1
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	b9 01       	movw	r22, r18
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <nrk_gpio_toggle+0x5e>
    2dce:	66 0f       	add	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	8a 95       	dec	r24
    2dd4:	e2 f7       	brpl	.-8      	; 0x2dce <nrk_gpio_toggle+0x5a>
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	80 95       	com	r24
    2dda:	84 23       	and	r24, r20
    2ddc:	82 b9       	out	0x02, r24	; 2
    2dde:	16 c0       	rjmp	.+44     	; 0x2e0c <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2de0:	23 b1       	in	r18, 0x03	; 3
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	08 2e       	mov	r0, r24
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <nrk_gpio_toggle+0x78>
    2de8:	35 95       	asr	r19
    2dea:	27 95       	ror	r18
    2dec:	0a 94       	dec	r0
    2dee:	e2 f7       	brpl	.-8      	; 0x2de8 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2df0:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2df2:	20 fd       	sbrc	r18, 0
    2df4:	0d c0       	rjmp	.+26     	; 0x2e10 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2df6:	21 e0       	ldi	r18, 0x01	; 1
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	b9 01       	movw	r22, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <nrk_gpio_toggle+0x8e>
    2dfe:	66 0f       	add	r22, r22
    2e00:	77 1f       	adc	r23, r23
    2e02:	8a 95       	dec	r24
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <nrk_gpio_toggle+0x8a>
    2e06:	cb 01       	movw	r24, r22
    2e08:	84 2b       	or	r24, r20
    2e0a:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2e10:	21 e0       	ldi	r18, 0x01	; 1
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	b9 01       	movw	r22, r18
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <nrk_gpio_toggle+0xa8>
    2e18:	66 0f       	add	r22, r22
    2e1a:	77 1f       	adc	r23, r23
    2e1c:	8a 95       	dec	r24
    2e1e:	e2 f7       	brpl	.-8      	; 0x2e18 <nrk_gpio_toggle+0xa4>
    2e20:	cb 01       	movw	r24, r22
    2e22:	80 95       	com	r24
    2e24:	84 23       	and	r24, r20
    2e26:	f1 cf       	rjmp	.-30     	; 0x2e0a <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2e28:	26 b1       	in	r18, 0x06	; 6
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	08 2e       	mov	r0, r24
    2e2e:	02 c0       	rjmp	.+4      	; 0x2e34 <nrk_gpio_toggle+0xc0>
    2e30:	35 95       	asr	r19
    2e32:	27 95       	ror	r18
    2e34:	0a 94       	dec	r0
    2e36:	e2 f7       	brpl	.-8      	; 0x2e30 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2e38:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2e3a:	20 fd       	sbrc	r18, 0
    2e3c:	0b c0       	rjmp	.+22     	; 0x2e54 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2e3e:	21 e0       	ldi	r18, 0x01	; 1
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	b9 01       	movw	r22, r18
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <nrk_gpio_toggle+0xd6>
    2e46:	66 0f       	add	r22, r22
    2e48:	77 1f       	adc	r23, r23
    2e4a:	8a 95       	dec	r24
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <nrk_gpio_toggle+0xd2>
    2e4e:	cb 01       	movw	r24, r22
    2e50:	84 2b       	or	r24, r20
    2e52:	0b c0       	rjmp	.+22     	; 0x2e6a <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2e54:	21 e0       	ldi	r18, 0x01	; 1
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	b9 01       	movw	r22, r18
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <nrk_gpio_toggle+0xec>
    2e5c:	66 0f       	add	r22, r22
    2e5e:	77 1f       	adc	r23, r23
    2e60:	8a 95       	dec	r24
    2e62:	e2 f7       	brpl	.-8      	; 0x2e5c <nrk_gpio_toggle+0xe8>
    2e64:	cb 01       	movw	r24, r22
    2e66:	80 95       	com	r24
    2e68:	84 23       	and	r24, r20
    2e6a:	88 b9       	out	0x08, r24	; 8
    2e6c:	cf cf       	rjmp	.-98     	; 0x2e0c <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2e6e:	29 b1       	in	r18, 0x09	; 9
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	08 2e       	mov	r0, r24
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <nrk_gpio_toggle+0x106>
    2e76:	35 95       	asr	r19
    2e78:	27 95       	ror	r18
    2e7a:	0a 94       	dec	r0
    2e7c:	e2 f7       	brpl	.-8      	; 0x2e76 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2e7e:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2e80:	20 fd       	sbrc	r18, 0
    2e82:	0b c0       	rjmp	.+22     	; 0x2e9a <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2e84:	21 e0       	ldi	r18, 0x01	; 1
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	b9 01       	movw	r22, r18
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <nrk_gpio_toggle+0x11c>
    2e8c:	66 0f       	add	r22, r22
    2e8e:	77 1f       	adc	r23, r23
    2e90:	8a 95       	dec	r24
    2e92:	e2 f7       	brpl	.-8      	; 0x2e8c <nrk_gpio_toggle+0x118>
    2e94:	cb 01       	movw	r24, r22
    2e96:	84 2b       	or	r24, r20
    2e98:	0b c0       	rjmp	.+22     	; 0x2eb0 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2e9a:	21 e0       	ldi	r18, 0x01	; 1
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	b9 01       	movw	r22, r18
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <nrk_gpio_toggle+0x132>
    2ea2:	66 0f       	add	r22, r22
    2ea4:	77 1f       	adc	r23, r23
    2ea6:	8a 95       	dec	r24
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <nrk_gpio_toggle+0x12e>
    2eaa:	cb 01       	movw	r24, r22
    2eac:	80 95       	com	r24
    2eae:	84 23       	and	r24, r20
    2eb0:	8b b9       	out	0x0b, r24	; 11
    2eb2:	ac cf       	rjmp	.-168    	; 0x2e0c <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2eb4:	2c b1       	in	r18, 0x0c	; 12
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	08 2e       	mov	r0, r24
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <nrk_gpio_toggle+0x14c>
    2ebc:	35 95       	asr	r19
    2ebe:	27 95       	ror	r18
    2ec0:	0a 94       	dec	r0
    2ec2:	e2 f7       	brpl	.-8      	; 0x2ebc <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2ec4:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2ec6:	20 fd       	sbrc	r18, 0
    2ec8:	0b c0       	rjmp	.+22     	; 0x2ee0 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2eca:	21 e0       	ldi	r18, 0x01	; 1
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	b9 01       	movw	r22, r18
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <nrk_gpio_toggle+0x162>
    2ed2:	66 0f       	add	r22, r22
    2ed4:	77 1f       	adc	r23, r23
    2ed6:	8a 95       	dec	r24
    2ed8:	e2 f7       	brpl	.-8      	; 0x2ed2 <nrk_gpio_toggle+0x15e>
    2eda:	cb 01       	movw	r24, r22
    2edc:	84 2b       	or	r24, r20
    2ede:	0b c0       	rjmp	.+22     	; 0x2ef6 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    2ee0:	21 e0       	ldi	r18, 0x01	; 1
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	b9 01       	movw	r22, r18
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <nrk_gpio_toggle+0x178>
    2ee8:	66 0f       	add	r22, r22
    2eea:	77 1f       	adc	r23, r23
    2eec:	8a 95       	dec	r24
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <nrk_gpio_toggle+0x174>
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	80 95       	com	r24
    2ef4:	84 23       	and	r24, r20
    2ef6:	8e b9       	out	0x0e, r24	; 14
    2ef8:	89 cf       	rjmp	.-238    	; 0x2e0c <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2efa:	2f b1       	in	r18, 0x0f	; 15
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	08 2e       	mov	r0, r24
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <nrk_gpio_toggle+0x192>
    2f02:	35 95       	asr	r19
    2f04:	27 95       	ror	r18
    2f06:	0a 94       	dec	r0
    2f08:	e2 f7       	brpl	.-8      	; 0x2f02 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2f0a:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2f0c:	20 fd       	sbrc	r18, 0
    2f0e:	0b c0       	rjmp	.+22     	; 0x2f26 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2f10:	21 e0       	ldi	r18, 0x01	; 1
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	b9 01       	movw	r22, r18
    2f16:	02 c0       	rjmp	.+4      	; 0x2f1c <nrk_gpio_toggle+0x1a8>
    2f18:	66 0f       	add	r22, r22
    2f1a:	77 1f       	adc	r23, r23
    2f1c:	8a 95       	dec	r24
    2f1e:	e2 f7       	brpl	.-8      	; 0x2f18 <nrk_gpio_toggle+0x1a4>
    2f20:	cb 01       	movw	r24, r22
    2f22:	84 2b       	or	r24, r20
    2f24:	0b c0       	rjmp	.+22     	; 0x2f3c <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2f26:	21 e0       	ldi	r18, 0x01	; 1
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	b9 01       	movw	r22, r18
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <nrk_gpio_toggle+0x1be>
    2f2e:	66 0f       	add	r22, r22
    2f30:	77 1f       	adc	r23, r23
    2f32:	8a 95       	dec	r24
    2f34:	e2 f7       	brpl	.-8      	; 0x2f2e <nrk_gpio_toggle+0x1ba>
    2f36:	cb 01       	movw	r24, r22
    2f38:	80 95       	com	r24
    2f3a:	84 23       	and	r24, r20
    2f3c:	81 bb       	out	0x11, r24	; 17
    2f3e:	66 cf       	rjmp	.-308    	; 0x2e0c <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2f40:	22 b3       	in	r18, 0x12	; 18
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	08 2e       	mov	r0, r24
    2f46:	02 c0       	rjmp	.+4      	; 0x2f4c <nrk_gpio_toggle+0x1d8>
    2f48:	35 95       	asr	r19
    2f4a:	27 95       	ror	r18
    2f4c:	0a 94       	dec	r0
    2f4e:	e2 f7       	brpl	.-8      	; 0x2f48 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2f50:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2f52:	20 fd       	sbrc	r18, 0
    2f54:	0b c0       	rjmp	.+22     	; 0x2f6c <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2f56:	21 e0       	ldi	r18, 0x01	; 1
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	b9 01       	movw	r22, r18
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <nrk_gpio_toggle+0x1ee>
    2f5e:	66 0f       	add	r22, r22
    2f60:	77 1f       	adc	r23, r23
    2f62:	8a 95       	dec	r24
    2f64:	e2 f7       	brpl	.-8      	; 0x2f5e <nrk_gpio_toggle+0x1ea>
    2f66:	cb 01       	movw	r24, r22
    2f68:	84 2b       	or	r24, r20
    2f6a:	0b c0       	rjmp	.+22     	; 0x2f82 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2f6c:	21 e0       	ldi	r18, 0x01	; 1
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	b9 01       	movw	r22, r18
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <nrk_gpio_toggle+0x204>
    2f74:	66 0f       	add	r22, r22
    2f76:	77 1f       	adc	r23, r23
    2f78:	8a 95       	dec	r24
    2f7a:	e2 f7       	brpl	.-8      	; 0x2f74 <nrk_gpio_toggle+0x200>
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	80 95       	com	r24
    2f80:	84 23       	and	r24, r20
    2f82:	84 bb       	out	0x14, r24	; 20
    2f84:	43 cf       	rjmp	.-378    	; 0x2e0c <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    2f86:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2f88:	08 95       	ret

00002f8a <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2f8a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f8c:	09 f4       	brne	.+2      	; 0x2f90 <nrk_gpio_direction+0x6>
    2f8e:	d5 c0       	rjmp	.+426    	; 0x313a <nrk_gpio_direction+0x1b0>
    2f90:	e8 2f       	mov	r30, r24
    2f92:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2f94:	4e 2f       	mov	r20, r30
    2f96:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2f98:	61 11       	cpse	r22, r1
    2f9a:	67 c0       	rjmp	.+206    	; 0x306a <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    2f9c:	47 30       	cpi	r20, 0x07	; 7
    2f9e:	51 05       	cpc	r21, r1
    2fa0:	08 f0       	brcs	.+2      	; 0x2fa4 <nrk_gpio_direction+0x1a>
    2fa2:	cb c0       	rjmp	.+406    	; 0x313a <nrk_gpio_direction+0x1b0>
    2fa4:	fa 01       	movw	r30, r20
    2fa6:	e4 55       	subi	r30, 0x54	; 84
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	86 95       	lsr	r24
    2fac:	86 95       	lsr	r24
    2fae:	86 95       	lsr	r24
    2fb0:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    2fb4:	41 b1       	in	r20, 0x01	; 1
    2fb6:	21 e0       	ldi	r18, 0x01	; 1
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	b9 01       	movw	r22, r18
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <nrk_gpio_direction+0x38>
    2fbe:	66 0f       	add	r22, r22
    2fc0:	77 1f       	adc	r23, r23
    2fc2:	8a 95       	dec	r24
    2fc4:	e2 f7       	brpl	.-8      	; 0x2fbe <nrk_gpio_direction+0x34>
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	80 95       	com	r24
    2fca:	84 23       	and	r24, r20
    2fcc:	65 c0       	rjmp	.+202    	; 0x3098 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    2fce:	44 b1       	in	r20, 0x04	; 4
    2fd0:	21 e0       	ldi	r18, 0x01	; 1
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	b9 01       	movw	r22, r18
    2fd6:	02 c0       	rjmp	.+4      	; 0x2fdc <nrk_gpio_direction+0x52>
    2fd8:	66 0f       	add	r22, r22
    2fda:	77 1f       	adc	r23, r23
    2fdc:	8a 95       	dec	r24
    2fde:	e2 f7       	brpl	.-8      	; 0x2fd8 <nrk_gpio_direction+0x4e>
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	80 95       	com	r24
    2fe4:	84 23       	and	r24, r20
    2fe6:	65 c0       	rjmp	.+202    	; 0x30b2 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    2fe8:	47 b1       	in	r20, 0x07	; 7
    2fea:	21 e0       	ldi	r18, 0x01	; 1
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	b9 01       	movw	r22, r18
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <nrk_gpio_direction+0x6c>
    2ff2:	66 0f       	add	r22, r22
    2ff4:	77 1f       	adc	r23, r23
    2ff6:	8a 95       	dec	r24
    2ff8:	e2 f7       	brpl	.-8      	; 0x2ff2 <nrk_gpio_direction+0x68>
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	80 95       	com	r24
    2ffe:	84 23       	and	r24, r20
    3000:	65 c0       	rjmp	.+202    	; 0x30cc <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    3002:	4a b1       	in	r20, 0x0a	; 10
    3004:	21 e0       	ldi	r18, 0x01	; 1
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	b9 01       	movw	r22, r18
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <nrk_gpio_direction+0x86>
    300c:	66 0f       	add	r22, r22
    300e:	77 1f       	adc	r23, r23
    3010:	8a 95       	dec	r24
    3012:	e2 f7       	brpl	.-8      	; 0x300c <nrk_gpio_direction+0x82>
    3014:	cb 01       	movw	r24, r22
    3016:	80 95       	com	r24
    3018:	84 23       	and	r24, r20
    301a:	65 c0       	rjmp	.+202    	; 0x30e6 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    301c:	4d b1       	in	r20, 0x0d	; 13
    301e:	21 e0       	ldi	r18, 0x01	; 1
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	b9 01       	movw	r22, r18
    3024:	02 c0       	rjmp	.+4      	; 0x302a <nrk_gpio_direction+0xa0>
    3026:	66 0f       	add	r22, r22
    3028:	77 1f       	adc	r23, r23
    302a:	8a 95       	dec	r24
    302c:	e2 f7       	brpl	.-8      	; 0x3026 <nrk_gpio_direction+0x9c>
    302e:	cb 01       	movw	r24, r22
    3030:	80 95       	com	r24
    3032:	84 23       	and	r24, r20
    3034:	65 c0       	rjmp	.+202    	; 0x3100 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    3036:	40 b3       	in	r20, 0x10	; 16
    3038:	21 e0       	ldi	r18, 0x01	; 1
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	b9 01       	movw	r22, r18
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <nrk_gpio_direction+0xba>
    3040:	66 0f       	add	r22, r22
    3042:	77 1f       	adc	r23, r23
    3044:	8a 95       	dec	r24
    3046:	e2 f7       	brpl	.-8      	; 0x3040 <nrk_gpio_direction+0xb6>
    3048:	cb 01       	movw	r24, r22
    304a:	80 95       	com	r24
    304c:	84 23       	and	r24, r20
    304e:	65 c0       	rjmp	.+202    	; 0x311a <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    3050:	43 b3       	in	r20, 0x13	; 19
    3052:	21 e0       	ldi	r18, 0x01	; 1
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	b9 01       	movw	r22, r18
    3058:	02 c0       	rjmp	.+4      	; 0x305e <nrk_gpio_direction+0xd4>
    305a:	66 0f       	add	r22, r22
    305c:	77 1f       	adc	r23, r23
    305e:	8a 95       	dec	r24
    3060:	e2 f7       	brpl	.-8      	; 0x305a <nrk_gpio_direction+0xd0>
    3062:	cb 01       	movw	r24, r22
    3064:	80 95       	com	r24
    3066:	84 23       	and	r24, r20
    3068:	65 c0       	rjmp	.+202    	; 0x3134 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    306a:	47 30       	cpi	r20, 0x07	; 7
    306c:	51 05       	cpc	r21, r1
    306e:	08 f0       	brcs	.+2      	; 0x3072 <nrk_gpio_direction+0xe8>
    3070:	64 c0       	rjmp	.+200    	; 0x313a <nrk_gpio_direction+0x1b0>
    3072:	fa 01       	movw	r30, r20
    3074:	ed 54       	subi	r30, 0x4D	; 77
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	86 95       	lsr	r24
    307a:	86 95       	lsr	r24
    307c:	86 95       	lsr	r24
    307e:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    3082:	41 b1       	in	r20, 0x01	; 1
    3084:	21 e0       	ldi	r18, 0x01	; 1
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	b9 01       	movw	r22, r18
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <nrk_gpio_direction+0x106>
    308c:	66 0f       	add	r22, r22
    308e:	77 1f       	adc	r23, r23
    3090:	8a 95       	dec	r24
    3092:	e2 f7       	brpl	.-8      	; 0x308c <nrk_gpio_direction+0x102>
    3094:	cb 01       	movw	r24, r22
    3096:	84 2b       	or	r24, r20
    3098:	81 b9       	out	0x01, r24	; 1
    309a:	4d c0       	rjmp	.+154    	; 0x3136 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    309c:	44 b1       	in	r20, 0x04	; 4
    309e:	21 e0       	ldi	r18, 0x01	; 1
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	b9 01       	movw	r22, r18
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <nrk_gpio_direction+0x120>
    30a6:	66 0f       	add	r22, r22
    30a8:	77 1f       	adc	r23, r23
    30aa:	8a 95       	dec	r24
    30ac:	e2 f7       	brpl	.-8      	; 0x30a6 <nrk_gpio_direction+0x11c>
    30ae:	cb 01       	movw	r24, r22
    30b0:	84 2b       	or	r24, r20
    30b2:	84 b9       	out	0x04, r24	; 4
    30b4:	40 c0       	rjmp	.+128    	; 0x3136 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    30b6:	47 b1       	in	r20, 0x07	; 7
    30b8:	21 e0       	ldi	r18, 0x01	; 1
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	b9 01       	movw	r22, r18
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <nrk_gpio_direction+0x13a>
    30c0:	66 0f       	add	r22, r22
    30c2:	77 1f       	adc	r23, r23
    30c4:	8a 95       	dec	r24
    30c6:	e2 f7       	brpl	.-8      	; 0x30c0 <nrk_gpio_direction+0x136>
    30c8:	cb 01       	movw	r24, r22
    30ca:	84 2b       	or	r24, r20
    30cc:	87 b9       	out	0x07, r24	; 7
    30ce:	33 c0       	rjmp	.+102    	; 0x3136 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    30d0:	4a b1       	in	r20, 0x0a	; 10
    30d2:	21 e0       	ldi	r18, 0x01	; 1
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	b9 01       	movw	r22, r18
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <nrk_gpio_direction+0x154>
    30da:	66 0f       	add	r22, r22
    30dc:	77 1f       	adc	r23, r23
    30de:	8a 95       	dec	r24
    30e0:	e2 f7       	brpl	.-8      	; 0x30da <nrk_gpio_direction+0x150>
    30e2:	cb 01       	movw	r24, r22
    30e4:	84 2b       	or	r24, r20
    30e6:	8a b9       	out	0x0a, r24	; 10
    30e8:	26 c0       	rjmp	.+76     	; 0x3136 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    30ea:	4d b1       	in	r20, 0x0d	; 13
    30ec:	21 e0       	ldi	r18, 0x01	; 1
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	b9 01       	movw	r22, r18
    30f2:	02 c0       	rjmp	.+4      	; 0x30f8 <nrk_gpio_direction+0x16e>
    30f4:	66 0f       	add	r22, r22
    30f6:	77 1f       	adc	r23, r23
    30f8:	8a 95       	dec	r24
    30fa:	e2 f7       	brpl	.-8      	; 0x30f4 <nrk_gpio_direction+0x16a>
    30fc:	cb 01       	movw	r24, r22
    30fe:	84 2b       	or	r24, r20
    3100:	8d b9       	out	0x0d, r24	; 13
    3102:	19 c0       	rjmp	.+50     	; 0x3136 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    3104:	40 b3       	in	r20, 0x10	; 16
    3106:	21 e0       	ldi	r18, 0x01	; 1
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	b9 01       	movw	r22, r18
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <nrk_gpio_direction+0x188>
    310e:	66 0f       	add	r22, r22
    3110:	77 1f       	adc	r23, r23
    3112:	8a 95       	dec	r24
    3114:	e2 f7       	brpl	.-8      	; 0x310e <nrk_gpio_direction+0x184>
    3116:	cb 01       	movw	r24, r22
    3118:	84 2b       	or	r24, r20
    311a:	80 bb       	out	0x10, r24	; 16
    311c:	0c c0       	rjmp	.+24     	; 0x3136 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    311e:	43 b3       	in	r20, 0x13	; 19
    3120:	21 e0       	ldi	r18, 0x01	; 1
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	b9 01       	movw	r22, r18
    3126:	02 c0       	rjmp	.+4      	; 0x312c <nrk_gpio_direction+0x1a2>
    3128:	66 0f       	add	r22, r22
    312a:	77 1f       	adc	r23, r23
    312c:	8a 95       	dec	r24
    312e:	e2 f7       	brpl	.-8      	; 0x3128 <nrk_gpio_direction+0x19e>
    3130:	cb 01       	movw	r24, r22
    3132:	84 2b       	or	r24, r20
    3134:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    3136:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    3138:	08 95       	ret
                        default: return -1;
    313a:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    313c:	08 95       	ret

0000313e <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    313e:	81 11       	cpse	r24, r1
    3140:	06 c0       	rjmp	.+12     	; 0x314e <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    3142:	80 b1       	in	r24, 0x00	; 0
    3144:	86 95       	lsr	r24
    3146:	81 70       	andi	r24, 0x01	; 1
    3148:	91 e0       	ldi	r25, 0x01	; 1
    314a:	89 27       	eor	r24, r25
    314c:	08 95       	ret
	} 
return -1;
    314e:	8f ef       	ldi	r24, 0xFF	; 255
}
    3150:	08 95       	ret

00003152 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    3152:	00 97       	sbiw	r24, 0x00	; 0
    3154:	11 f4       	brne	.+4      	; 0x315a <nrk_led_toggle+0x8>
    3156:	83 e2       	ldi	r24, 0x23	; 35
    3158:	0d c0       	rjmp	.+26     	; 0x3174 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    315a:	81 30       	cpi	r24, 0x01	; 1
    315c:	91 05       	cpc	r25, r1
    315e:	11 f4       	brne	.+4      	; 0x3164 <nrk_led_toggle+0x12>
    3160:	8b e2       	ldi	r24, 0x2B	; 43
    3162:	08 c0       	rjmp	.+16     	; 0x3174 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    3164:	82 30       	cpi	r24, 0x02	; 2
    3166:	91 05       	cpc	r25, r1
    3168:	11 f4       	brne	.+4      	; 0x316e <nrk_led_toggle+0x1c>
    316a:	83 e3       	ldi	r24, 0x33	; 51
    316c:	03 c0       	rjmp	.+6      	; 0x3174 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    316e:	03 97       	sbiw	r24, 0x03	; 3
    3170:	29 f4       	brne	.+10     	; 0x317c <nrk_led_toggle+0x2a>
    3172:	8b e3       	ldi	r24, 0x3B	; 59
    3174:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <nrk_gpio_toggle>
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	08 95       	ret
return -1;
    317c:	8f ef       	ldi	r24, 0xFF	; 255
}
    317e:	08 95       	ret

00003180 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	11 f4       	brne	.+4      	; 0x3188 <nrk_led_clr+0x8>
    3184:	83 e2       	ldi	r24, 0x23	; 35
    3186:	0d c0       	rjmp	.+26     	; 0x31a2 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    3188:	81 30       	cpi	r24, 0x01	; 1
    318a:	91 05       	cpc	r25, r1
    318c:	11 f4       	brne	.+4      	; 0x3192 <nrk_led_clr+0x12>
    318e:	8b e2       	ldi	r24, 0x2B	; 43
    3190:	08 c0       	rjmp	.+16     	; 0x31a2 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    3192:	82 30       	cpi	r24, 0x02	; 2
    3194:	91 05       	cpc	r25, r1
    3196:	11 f4       	brne	.+4      	; 0x319c <nrk_led_clr+0x1c>
    3198:	83 e3       	ldi	r24, 0x33	; 51
    319a:	03 c0       	rjmp	.+6      	; 0x31a2 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    319c:	03 97       	sbiw	r24, 0x03	; 3
    319e:	29 f4       	brne	.+10     	; 0x31aa <nrk_led_clr+0x2a>
    31a0:	8b e3       	ldi	r24, 0x3B	; 59
    31a2:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <nrk_gpio_set>
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	08 95       	ret
return -1;
    31aa:	8f ef       	ldi	r24, 0xFF	; 255
}
    31ac:	08 95       	ret

000031ae <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	11 f4       	brne	.+4      	; 0x31b6 <nrk_led_set+0x8>
    31b2:	83 e2       	ldi	r24, 0x23	; 35
    31b4:	0d c0       	rjmp	.+26     	; 0x31d0 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	91 05       	cpc	r25, r1
    31ba:	11 f4       	brne	.+4      	; 0x31c0 <nrk_led_set+0x12>
    31bc:	8b e2       	ldi	r24, 0x2B	; 43
    31be:	08 c0       	rjmp	.+16     	; 0x31d0 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    31c0:	82 30       	cpi	r24, 0x02	; 2
    31c2:	91 05       	cpc	r25, r1
    31c4:	11 f4       	brne	.+4      	; 0x31ca <nrk_led_set+0x1c>
    31c6:	83 e3       	ldi	r24, 0x33	; 51
    31c8:	03 c0       	rjmp	.+6      	; 0x31d0 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    31ca:	03 97       	sbiw	r24, 0x03	; 3
    31cc:	29 f4       	brne	.+10     	; 0x31d8 <nrk_led_set+0x2a>
    31ce:	8b e3       	ldi	r24, 0x3B	; 59
    31d0:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <nrk_gpio_clr>
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	08 95       	ret
return -1;
    31d8:	8f ef       	ldi	r24, 0xFF	; 255
}
    31da:	08 95       	ret

000031dc <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    31dc:	88 23       	and	r24, r24
    31de:	19 f0       	breq	.+6      	; 0x31e6 <nrk_gpio_pullups+0xa>
    31e0:	85 b7       	in	r24, 0x35	; 53
    31e2:	8f 7e       	andi	r24, 0xEF	; 239
    31e4:	02 c0       	rjmp	.+4      	; 0x31ea <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    31e6:	85 b7       	in	r24, 0x35	; 53
    31e8:	80 61       	ori	r24, 0x10	; 16
    31ea:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	08 95       	ret

000031f0 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    31f0:	90 91 c8 00 	lds	r25, 0x00C8
    31f4:	95 ff       	sbrs	r25, 5
    31f6:	fc cf       	rjmp	.-8      	; 0x31f0 <putc1>
    31f8:	80 93 ce 00 	sts	0x00CE, r24
    31fc:	08 95       	ret

000031fe <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    31fe:	90 93 c5 00 	sts	0x00C5, r25
    3202:	80 93 c4 00 	sts	0x00C4, r24
    3206:	86 e0       	ldi	r24, 0x06	; 6
    3208:	80 93 c2 00 	sts	0x00C2, r24
    320c:	e1 ec       	ldi	r30, 0xC1	; 193
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	8b 7f       	andi	r24, 0xFB	; 251
    3214:	80 83       	st	Z, r24
    3216:	a0 ec       	ldi	r26, 0xC0	; 192
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	8c 91       	ld	r24, X
    321c:	82 60       	ori	r24, 0x02	; 2
    321e:	8c 93       	st	X, r24
ENABLE_UART0();
    3220:	80 81       	ld	r24, Z
    3222:	88 61       	ori	r24, 0x18	; 24
    3224:	80 83       	st	Z, r24
    3226:	08 95       	ret

00003228 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    3228:	90 93 cd 00 	sts	0x00CD, r25
    322c:	80 93 cc 00 	sts	0x00CC, r24
    3230:	86 e0       	ldi	r24, 0x06	; 6
    3232:	80 93 ca 00 	sts	0x00CA, r24
    3236:	e9 ec       	ldi	r30, 0xC9	; 201
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	8b 7f       	andi	r24, 0xFB	; 251
    323e:	80 83       	st	Z, r24
    3240:	a8 ec       	ldi	r26, 0xC8	; 200
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	8c 91       	ld	r24, X
    3246:	82 60       	ori	r24, 0x02	; 2
    3248:	8c 93       	st	X, r24
ENABLE_UART1();
    324a:	80 81       	ld	r24, Z
    324c:	88 61       	ori	r24, 0x18	; 24
    324e:	80 83       	st	Z, r24
    3250:	08 95       	ret

00003252 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    3252:	0e 94 ff 18 	call	0x31fe	; 0x31fe <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    3256:	64 e7       	ldi	r22, 0x74	; 116
    3258:	75 e1       	ldi	r23, 0x15	; 21
    325a:	8d ed       	ldi	r24, 0xDD	; 221
    325c:	94 e1       	ldi	r25, 0x14	; 20
    325e:	0e 94 a5 31 	call	0x634a	; 0x634a <fdevopen>
    3262:	90 93 80 11 	sts	0x1180, r25
    3266:	80 93 7f 11 	sts	0x117F, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    326a:	64 e7       	ldi	r22, 0x74	; 116
    326c:	75 e1       	ldi	r23, 0x15	; 21
    326e:	8d ed       	ldi	r24, 0xDD	; 221
    3270:	94 e1       	ldi	r25, 0x14	; 20
    3272:	0e 94 a5 31 	call	0x634a	; 0x634a <fdevopen>
    3276:	90 93 7e 11 	sts	0x117E, r25
    327a:	80 93 7d 11 	sts	0x117D, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    327e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <nrk_signal_create>
    3282:	80 93 9c 05 	sts	0x059C, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    3286:	8f 3f       	cpi	r24, 0xFF	; 255
    3288:	19 f4       	brne	.+6      	; 0x3290 <nrk_setup_uart+0x3e>
    328a:	8e e0       	ldi	r24, 0x0E	; 14
    328c:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <nrk_error_add>
   uart_rx_buf_start=0;
    3290:	10 92 b0 05 	sts	0x05B0, r1
    3294:	10 92 af 05 	sts	0x05AF, r1
   uart_rx_buf_end=0;
    3298:	10 92 ae 05 	sts	0x05AE, r1
    329c:	10 92 ad 05 	sts	0x05AD, r1
   ENABLE_UART0_RX_INT();
    32a0:	80 91 c1 00 	lds	r24, 0x00C1
    32a4:	80 68       	ori	r24, 0x80	; 128
    32a6:	80 93 c1 00 	sts	0x00C1, r24
    32aa:	08 95       	ret

000032ac <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    32ac:	80 91 c8 00 	lds	r24, 0x00C8
    32b0:	87 ff       	sbrs	r24, 7
    32b2:	fc cf       	rjmp	.-8      	; 0x32ac <getc1>
    32b4:	80 91 c8 00 	lds	r24, 0x00C8
    32b8:	8f 77       	andi	r24, 0x7F	; 127
    32ba:	80 93 c8 00 	sts	0x00C8, r24
    32be:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    32c2:	08 95       	ret

000032c4 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    32cc:	01 97       	sbiw	r24, 0x01	; 1
    32ce:	d1 f7       	brne	.-12     	; 0x32c4 <halWait>

} // halWait
    32d0:	08 95       	ret

000032d2 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    32d2:	0c 94 3e 33 	jmp	0x667c	; 0x667c <__eerd_byte_m128rfa1>

000032d6 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    32d6:	0e 94 46 33 	call	0x668c	; 0x668c <__eewr_byte_m128rfa1>
}
    32da:	08 95       	ret

000032dc <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    32f2:	18 2f       	mov	r17, r24
    32f4:	f7 01       	movw	r30, r14
    32f6:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    3300:	08 2f       	mov	r16, r24
    3302:	f7 01       	movw	r30, r14
    3304:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    330e:	d8 2f       	mov	r29, r24
    3310:	f7 01       	movw	r30, r14
    3312:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    3314:	83 e0       	ldi	r24, 0x03	; 3
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    331c:	c8 2f       	mov	r28, r24
    331e:	f7 01       	movw	r30, r14
    3320:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    3322:	84 e0       	ldi	r24, 0x04	; 4
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    332a:	10 0f       	add	r17, r16
    332c:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    332e:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    3330:	8c 17       	cp	r24, r28
    3332:	11 f0       	breq	.+4      	; 0x3338 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    3334:	8f ef       	ldi	r24, 0xFF	; 255
    3336:	01 c0       	rjmp	.+2      	; 0x333a <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    3338:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    333a:	df 91       	pop	r29
    333c:	cf 91       	pop	r28
    333e:	1f 91       	pop	r17
    3340:	0f 91       	pop	r16
    3342:	ff 90       	pop	r15
    3344:	ef 90       	pop	r14
    3346:	08 95       	ret

00003348 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    334e:	85 e0       	ldi	r24, 0x05	; 5
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    3356:	88 83       	st	Y, r24
return NRK_OK;
}
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    3360:	fc 01       	movw	r30, r24
    3362:	60 81       	ld	r22, Z
    3364:	86 e0       	ldi	r24, 0x06	; 6
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 46 33 	call	0x668c	; 0x668c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	08 95       	ret

00003370 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    3376:	86 e0       	ldi	r24, 0x06	; 6
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    337e:	88 83       	st	Y, r24
  return NRK_OK;
}
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	08 95       	ret

00003388 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	8c 01       	movw	r16, r24
    3392:	c0 e0       	ldi	r28, 0x00	; 0
    3394:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    3396:	ce 01       	movw	r24, r28
    3398:	08 96       	adiw	r24, 0x08	; 8
    339a:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    339e:	f8 01       	movw	r30, r16
    33a0:	81 93       	st	Z+, r24
    33a2:	8f 01       	movw	r16, r30
    33a4:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    33a6:	c0 31       	cpi	r28, 0x10	; 16
    33a8:	d1 05       	cpc	r29, r1
    33aa:	a9 f7       	brne	.-22     	; 0x3396 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	df 91       	pop	r29
    33b0:	cf 91       	pop	r28
    33b2:	1f 91       	pop	r17
    33b4:	0f 91       	pop	r16
    33b6:	08 95       	ret

000033b8 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	8c 01       	movw	r16, r24
    33c2:	c0 e0       	ldi	r28, 0x00	; 0
    33c4:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    33c6:	f8 01       	movw	r30, r16
    33c8:	61 91       	ld	r22, Z+
    33ca:	8f 01       	movw	r16, r30
    33cc:	ce 01       	movw	r24, r28
    33ce:	08 96       	adiw	r24, 0x08	; 8
    33d0:	0e 94 46 33 	call	0x668c	; 0x668c <__eewr_byte_m128rfa1>
    33d4:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    33d6:	c0 31       	cpi	r28, 0x10	; 16
    33d8:	d1 05       	cpc	r29, r1
    33da:	a9 f7       	brne	.-22     	; 0x33c6 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	08 95       	ret

000033e8 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
    33ec:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    33ee:	87 e0       	ldi	r24, 0x07	; 7
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	0e 94 3e 33 	call	0x667c	; 0x667c <__eerd_byte_m128rfa1>
    33f6:	88 83       	st	Y, r24
  return NRK_OK;
}
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	df 91       	pop	r29
    33fc:	cf 91       	pop	r28
    33fe:	08 95       	ret

00003400 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    3400:	fc 01       	movw	r30, r24
    3402:	60 81       	ld	r22, Z
    3404:	87 e0       	ldi	r24, 0x07	; 7
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 46 33 	call	0x668c	; 0x668c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	08 95       	ret

00003410 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    3410:	f8 94       	cli
    3412:	08 95       	ret

00003414 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    3414:	78 94       	sei
    3416:	08 95       	ret

00003418 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    3418:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
while(1);
    341c:	ff cf       	rjmp	.-2      	; 0x341c <nrk_halt+0x4>

0000341e <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	a3 97       	sbiw	r28, 0x23	; 35
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    3434:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <nrk_signal_create>
    3438:	80 93 3e 11 	sts	0x113E, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    343c:	8f 3f       	cpi	r24, 0xFF	; 255
    343e:	21 f4       	brne	.+8      	; 0x3448 <nrk_init+0x2a>
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	8e e0       	ldi	r24, 0x0E	; 14
    3444:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    3448:	0e 94 a2 2b 	call	0x5744	; 0x5744 <_nrk_startup_error>
    344c:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    344e:	80 ff       	sbrs	r24, 0
    3450:	04 c0       	rjmp	.+8      	; 0x345a <nrk_init+0x3c>
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	86 e0       	ldi	r24, 0x06	; 6
    3456:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    345a:	11 ff       	sbrs	r17, 1
    345c:	04 c0       	rjmp	.+8      	; 0x3466 <nrk_init+0x48>
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	84 e1       	ldi	r24, 0x14	; 20
    3462:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    3466:	12 ff       	sbrs	r17, 2
    3468:	04 c0       	rjmp	.+8      	; 0x3472 <nrk_init+0x54>
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	83 e1       	ldi	r24, 0x13	; 19
    346e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    3472:	10 92 41 11 	sts	0x1141, r1
    nrk_cur_task_TCB = NULL;
    3476:	10 92 4f 11 	sts	0x114F, r1
    347a:	10 92 4e 11 	sts	0x114E, r1
    
    nrk_high_ready_TCB = NULL;
    347e:	10 92 40 11 	sts	0x1140, r1
    3482:	10 92 3f 11 	sts	0x113F, r1
    nrk_high_ready_prio = 0; 
    3486:	10 92 50 11 	sts	0x1150, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    348a:	10 92 4d 11 	sts	0x114D, r1
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	90 e0       	ldi	r25, 0x00	; 0

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3492:	2f ef       	ldi	r18, 0xFF	; 255
    3494:	fc 01       	movw	r30, r24
    3496:	ef 5c       	subi	r30, 0xCF	; 207
    3498:	fe 4e       	sbci	r31, 0xEE	; 238
    349a:	20 83       	st	Z, r18
    nrk_sem_list[i].value=-1;
    349c:	22 83       	std	Z+2, r18	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    349e:	21 83       	std	Z+1, r18	; 0x01
    34a0:	03 96       	adiw	r24, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    34a2:	8c 30       	cpi	r24, 0x0C	; 12
    34a4:	91 05       	cpc	r25, r1
    34a6:	b1 f7       	brne	.-20     	; 0x3494 <nrk_init+0x76>
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    34ac:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    34ae:	2f ef       	ldi	r18, 0xFF	; 255
    34b0:	fc 01       	movw	r30, r24
    34b2:	e3 5d       	subi	r30, 0xD3	; 211
    34b4:	ff 4e       	sbci	r31, 0xEF	; 239
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    34b6:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    34b8:	20 87       	std	Z+8, r18	; 0x08
    34ba:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    34bc:	82 30       	cpi	r24, 0x02	; 2
    34be:	41 e0       	ldi	r20, 0x01	; 1
    34c0:	94 07       	cpc	r25, r20
    34c2:	b1 f7       	brne	.-20     	; 0x34b0 <nrk_init+0x92>
    34c4:	e1 e5       	ldi	r30, 0x51	; 81
    34c6:	f1 e1       	ldi	r31, 0x11	; 17
    34c8:	cf 01       	movw	r24, r30
    34ca:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    34cc:	94 83       	std	Z+4, r25	; 0x04
    34ce:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    34d0:	f7 83       	std	Z+7, r31	; 0x07
    34d2:	e6 83       	std	Z+6, r30	; 0x06
    34d4:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    34d6:	81 e1       	ldi	r24, 0x11	; 17
    34d8:	ef 36       	cpi	r30, 0x6F	; 111
    34da:	f8 07       	cpc	r31, r24
    34dc:	a9 f7       	brne	.-22     	; 0x34c8 <nrk_init+0xaa>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    34de:	10 92 53 11 	sts	0x1153, r1
    34e2:	10 92 52 11 	sts	0x1152, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    34e6:	10 92 73 11 	sts	0x1173, r1
    34ea:	10 92 72 11 	sts	0x1172, r1
	_head_node = NULL;
    34ee:	10 92 44 11 	sts	0x1144, r1
    34f2:	10 92 43 11 	sts	0x1143, r1
	_free_node = &_nrk_readyQ[0];
    34f6:	81 e5       	ldi	r24, 0x51	; 81
    34f8:	91 e1       	ldi	r25, 0x11	; 17
    34fa:	90 93 2c 10 	sts	0x102C, r25
    34fe:	80 93 2b 10 	sts	0x102B, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    3502:	69 e1       	ldi	r22, 0x19	; 25
    3504:	77 e2       	ldi	r23, 0x27	; 39
    3506:	ce 01       	movw	r24, r28
    3508:	01 96       	adiw	r24, 0x01	; 1
    350a:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	52 e0       	ldi	r21, 0x02	; 2
    3512:	68 ec       	ldi	r22, 0xC8	; 200
    3514:	7d e0       	ldi	r23, 0x0D	; 13
    3516:	ce 01       	movw	r24, r28
    3518:	01 96       	adiw	r24, 0x01	; 1
    351a:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    351e:	85 e5       	ldi	r24, 0x55	; 85
    3520:	80 93 c8 0d 	sts	0x0DC8, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    3524:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    3526:	1c 86       	std	Y+12, r1	; 0x0c
    3528:	1d 86       	std	Y+13, r1	; 0x0d
    352a:	1e 86       	std	Y+14, r1	; 0x0e
    352c:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    352e:	18 8a       	std	Y+16, r1	; 0x10
    3530:	19 8a       	std	Y+17, r1	; 0x11
    3532:	1a 8a       	std	Y+18, r1	; 0x12
    3534:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    3536:	1c 8a       	std	Y+20, r1	; 0x14
    3538:	1d 8a       	std	Y+21, r1	; 0x15
    353a:	1e 8a       	std	Y+22, r1	; 0x16
    353c:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    353e:	18 8e       	std	Y+24, r1	; 0x18
    3540:	19 8e       	std	Y+25, r1	; 0x19
    3542:	1a 8e       	std	Y+26, r1	; 0x1a
    3544:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    3546:	1c 8e       	std	Y+28, r1	; 0x1c
    3548:	1d 8e       	std	Y+29, r1	; 0x1d
    354a:	1e 8e       	std	Y+30, r1	; 0x1e
    354c:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    354e:	18 a2       	std	Y+32, r1	; 0x20
    3550:	19 a2       	std	Y+33, r1	; 0x21
    3552:	1a a2       	std	Y+34, r1	; 0x22
    3554:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    355a:	92 e0       	ldi	r25, 0x02	; 2
    355c:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    355e:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    3560:	ce 01       	movw	r24, r28
    3562:	01 96       	adiw	r24, 0x01	; 1
    3564:	0e 94 4e 22 	call	0x449c	; 0x449c <nrk_activate_task>
	
}
    3568:	a3 96       	adiw	r28, 0x23	; 35
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	08 95       	ret

0000357c <nrk_start>:




void nrk_start (void)
{
    357c:	05 e3       	ldi	r16, 0x35	; 53
    357e:	10 e1       	ldi	r17, 0x10	; 16
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3580:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    3582:	f8 01       	movw	r30, r16
    3584:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    3586:	ff ef       	ldi	r31, 0xFF	; 255
    3588:	df 12       	cpse	r13, r31
    358a:	22 c0       	rjmp	.+68     	; 0x35d0 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    358c:	cf 5f       	subi	r28, 0xFF	; 255
    358e:	05 5d       	subi	r16, 0xD5	; 213
    3590:	1f 4f       	sbci	r17, 0xFF	; 255
    3592:	c6 30       	cpi	r28, 0x06	; 6
    3594:	b1 f7       	brne	.-20     	; 0x3582 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    3596:	0e 94 3d 21 	call	0x427a	; 0x427a <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    359a:	2b e2       	ldi	r18, 0x2B	; 43
    359c:	82 02       	muls	r24, r18
    359e:	c0 01       	movw	r24, r0
    35a0:	11 24       	eor	r1, r1
    35a2:	fc 01       	movw	r30, r24
    35a4:	e3 5d       	subi	r30, 0xD3	; 211
    35a6:	ff 4e       	sbci	r31, 0xEF	; 239
    35a8:	82 85       	ldd	r24, Z+10	; 0x0a
    35aa:	80 93 50 11 	sts	0x1150, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    35ae:	f0 93 4f 11 	sts	0x114F, r31
    35b2:	e0 93 4e 11 	sts	0x114E, r30
    35b6:	f0 93 40 11 	sts	0x1140, r31
    35ba:	e0 93 3f 11 	sts	0x113F, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    35be:	80 93 41 11 	sts	0x1141, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    35c2:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <nrk_target_start>
    nrk_stack_pointer_init(); 
    35c6:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    35ca:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <nrk_start_high_ready_task>
    35ce:	16 c0       	rjmp	.+44     	; 0x35fc <nrk_start+0x80>
    35d0:	85 e3       	ldi	r24, 0x35	; 53
    35d2:	e8 2e       	mov	r14, r24
    35d4:	80 e1       	ldi	r24, 0x10	; 16
    35d6:	f8 2e       	mov	r15, r24
    35d8:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    35da:	cd 17       	cp	r28, r29
    35dc:	41 f0       	breq	.+16     	; 0x35ee <nrk_start+0x72>
    35de:	f7 01       	movw	r30, r14
    35e0:	80 81       	ld	r24, Z
    35e2:	d8 12       	cpse	r13, r24
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    35e6:	6d 2d       	mov	r22, r13
    35e8:	85 e0       	ldi	r24, 0x05	; 5
    35ea:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    35ee:	df 5f       	subi	r29, 0xFF	; 255
    35f0:	fb e2       	ldi	r31, 0x2B	; 43
    35f2:	ef 0e       	add	r14, r31
    35f4:	f1 1c       	adc	r15, r1
    35f6:	d6 30       	cpi	r29, 0x06	; 6
    35f8:	81 f7       	brne	.-32     	; 0x35da <nrk_start+0x5e>
    35fa:	c8 cf       	rjmp	.-112    	; 0x358c <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    35fc:	ff cf       	rjmp	.-2      	; 0x35fc <nrk_start+0x80>

000035fe <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    35fe:	cf 92       	push	r12
    3600:	df 92       	push	r13
    3602:	ef 92       	push	r14
    3604:	ff 92       	push	r15
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	ec 01       	movw	r28, r24
    3610:	8b 01       	movw	r16, r22
    3612:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	82 30       	cpi	r24, 0x02	; 2
    3618:	21 f0       	breq	.+8      	; 0x3622 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    361a:	80 91 3d 11 	lds	r24, 0x113D
    361e:	88 83       	st	Y, r24
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    3622:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    3624:	80 91 3d 11 	lds	r24, 0x113D
    3628:	86 30       	cpi	r24, 0x06	; 6
    362a:	20 f0       	brcs	.+8      	; 0x3634 <nrk_TCB_init+0x36>
    362c:	60 e0       	ldi	r22, 0x00	; 0
    362e:	87 e0       	ldi	r24, 0x07	; 7
    3630:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    3634:	89 85       	ldd	r24, Y+9	; 0x09
    3636:	82 30       	cpi	r24, 0x02	; 2
    3638:	29 f0       	breq	.+10     	; 0x3644 <nrk_TCB_init+0x46>
    363a:	80 91 3d 11 	lds	r24, 0x113D
    363e:	8f 5f       	subi	r24, 0xFF	; 255
    3640:	80 93 3d 11 	sts	0x113D, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    3644:	80 91 3d 11 	lds	r24, 0x113D
    3648:	81 11       	cpse	r24, r1
    364a:	03 c0       	rjmp	.+6      	; 0x3652 <nrk_TCB_init+0x54>
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	80 93 3d 11 	sts	0x113D, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    3652:	38 81       	ld	r19, Y
    3654:	2b e2       	ldi	r18, 0x2B	; 43
    3656:	32 03       	mulsu	r19, r18
    3658:	f0 01       	movw	r30, r0
    365a:	11 24       	eor	r1, r1
    365c:	e3 5d       	subi	r30, 0xD3	; 211
    365e:	ff 4e       	sbci	r31, 0xEF	; 239
    3660:	11 83       	std	Z+1, r17	; 0x01
    3662:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    3664:	88 85       	ldd	r24, Y+8	; 0x08
    3666:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    3668:	38 81       	ld	r19, Y
    366a:	32 03       	mulsu	r19, r18
    366c:	f0 01       	movw	r30, r0
    366e:	11 24       	eor	r1, r1
    3670:	e3 5d       	subi	r30, 0xD3	; 211
    3672:	ff 4e       	sbci	r31, 0xEF	; 239
    3674:	83 e0       	ldi	r24, 0x03	; 3
    3676:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    3678:	38 81       	ld	r19, Y
    367a:	32 03       	mulsu	r19, r18
    367c:	f0 01       	movw	r30, r0
    367e:	11 24       	eor	r1, r1
    3680:	e3 5d       	subi	r30, 0xD3	; 211
    3682:	ff 4e       	sbci	r31, 0xEF	; 239
    3684:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    3686:	08 81       	ld	r16, Y
    3688:	02 03       	mulsu	r16, r18
    368a:	80 01       	movw	r16, r0
    368c:	11 24       	eor	r1, r1
    368e:	03 5d       	subi	r16, 0xD3	; 211
    3690:	1f 4e       	sbci	r17, 0xEF	; 239
    3692:	f8 01       	movw	r30, r16
    3694:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    3696:	ce 01       	movw	r24, r28
    3698:	0b 96       	adiw	r24, 0x0b	; 11
    369a:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_nrk_time_to_ticks_long>
    369e:	f8 01       	movw	r30, r16
    36a0:	61 a3       	std	Z+33, r22	; 0x21
    36a2:	72 a3       	std	Z+34, r23	; 0x22
    36a4:	83 a3       	std	Z+35, r24	; 0x23
    36a6:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    36a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    36aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    36ac:	ad 85       	ldd	r26, Y+13	; 0x0d
    36ae:	be 85       	ldd	r27, Y+14	; 0x0e
    36b0:	88 33       	cpi	r24, 0x38	; 56
    36b2:	99 48       	sbci	r25, 0x89	; 137
    36b4:	a1 44       	sbci	r26, 0x41	; 65
    36b6:	b1 05       	cpc	r27, r1
    36b8:	20 f0       	brcs	.+8      	; 0x36c2 <nrk_TCB_init+0xc4>
    36ba:	68 81       	ld	r22, Y
    36bc:	86 e1       	ldi	r24, 0x16	; 22
    36be:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    36c2:	c8 80       	ld	r12, Y
    36c4:	dd 24       	eor	r13, r13
    36c6:	c7 fc       	sbrc	r12, 7
    36c8:	d0 94       	com	r13
    36ca:	ce 01       	movw	r24, r28
    36cc:	4b 96       	adiw	r24, 0x1b	; 27
    36ce:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_nrk_time_to_ticks_long>
    36d2:	1b e2       	ldi	r17, 0x2B	; 43
    36d4:	1c 9d       	mul	r17, r12
    36d6:	f0 01       	movw	r30, r0
    36d8:	1d 9d       	mul	r17, r13
    36da:	f0 0d       	add	r31, r0
    36dc:	11 24       	eor	r1, r1
    36de:	e3 5d       	subi	r30, 0xD3	; 211
    36e0:	ff 4e       	sbci	r31, 0xEF	; 239
    36e2:	65 8b       	std	Z+21, r22	; 0x15
    36e4:	76 8b       	std	Z+22, r23	; 0x16
    36e6:	87 8b       	std	Z+23, r24	; 0x17
    36e8:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    36ea:	28 81       	ld	r18, Y
    36ec:	21 03       	mulsu	r18, r17
    36ee:	c0 01       	movw	r24, r0
    36f0:	11 24       	eor	r1, r1
    36f2:	9c 01       	movw	r18, r24
    36f4:	23 5d       	subi	r18, 0xD3	; 211
    36f6:	3f 4e       	sbci	r19, 0xEF	; 239
    36f8:	69 01       	movw	r12, r18
    36fa:	f9 01       	movw	r30, r18
    36fc:	45 89       	ldd	r20, Z+21	; 0x15
    36fe:	56 89       	ldd	r21, Z+22	; 0x16
    3700:	67 89       	ldd	r22, Z+23	; 0x17
    3702:	70 8d       	ldd	r23, Z+24	; 0x18
    3704:	81 a1       	ldd	r24, Z+33	; 0x21
    3706:	92 a1       	ldd	r25, Z+34	; 0x22
    3708:	a3 a1       	ldd	r26, Z+35	; 0x23
    370a:	b4 a1       	ldd	r27, Z+36	; 0x24
    370c:	84 0f       	add	r24, r20
    370e:	95 1f       	adc	r25, r21
    3710:	a6 1f       	adc	r26, r22
    3712:	b7 1f       	adc	r27, r23
    3714:	81 8f       	std	Z+25, r24	; 0x19
    3716:	92 8f       	std	Z+26, r25	; 0x1a
    3718:	a3 8f       	std	Z+27, r26	; 0x1b
    371a:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    371c:	ce 01       	movw	r24, r28
    371e:	43 96       	adiw	r24, 0x13	; 19
    3720:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_nrk_time_to_ticks_long>
    3724:	f6 01       	movw	r30, r12
    3726:	65 a3       	std	Z+37, r22	; 0x25
    3728:	76 a3       	std	Z+38, r23	; 0x26
    372a:	87 a3       	std	Z+39, r24	; 0x27
    372c:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    372e:	28 81       	ld	r18, Y
    3730:	21 03       	mulsu	r18, r17
    3732:	f0 01       	movw	r30, r0
    3734:	11 24       	eor	r1, r1
    3736:	e3 5d       	subi	r30, 0xD3	; 211
    3738:	ff 4e       	sbci	r31, 0xEF	; 239
    373a:	85 a1       	ldd	r24, Z+37	; 0x25
    373c:	96 a1       	ldd	r25, Z+38	; 0x26
    373e:	a7 a1       	ldd	r26, Z+39	; 0x27
    3740:	b0 a5       	ldd	r27, Z+40	; 0x28
    3742:	85 8f       	std	Z+29, r24	; 0x1d
    3744:	96 8f       	std	Z+30, r25	; 0x1e
    3746:	a7 8f       	std	Z+31, r26	; 0x1f
    3748:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	92 a7       	std	Z+42, r25	; 0x2a
    3750:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3752:	f3 82       	std	Z+3, r15	; 0x03
    3754:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3756:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    3758:	df 91       	pop	r29
    375a:	cf 91       	pop	r28
    375c:	1f 91       	pop	r17
    375e:	0f 91       	pop	r16
    3760:	ff 90       	pop	r15
    3762:	ef 90       	pop	r14
    3764:	df 90       	pop	r13
    3766:	cf 90       	pop	r12
    3768:	08 95       	ret

0000376a <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    376a:	0c 94 33 27 	jmp	0x4e66	; 0x4e66 <_nrk_scheduler>

0000376e <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    376e:	85 e6       	ldi	r24, 0x65	; 101
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	08 95       	ret

00003774 <_nrk_errno_set>:
    3774:	e0 91 4e 11 	lds	r30, 0x114E
    3778:	f0 91 4f 11 	lds	r31, 0x114F
    377c:	84 87       	std	Z+12, r24	; 0x0c
    377e:	08 95       	ret

00003780 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    3780:	e0 91 4e 11 	lds	r30, 0x114E
    3784:	f0 91 4f 11 	lds	r31, 0x114F
}
    3788:	84 85       	ldd	r24, Z+12	; 0x0c
    378a:	08 95       	ret

0000378c <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    378c:	fc 01       	movw	r30, r24
    if (error_num == 0)
    378e:	80 91 c7 0d 	lds	r24, 0x0DC7
    3792:	88 23       	and	r24, r24
    3794:	31 f0       	breq	.+12     	; 0x37a2 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    3796:	db 01       	movw	r26, r22
    3798:	8c 93       	st	X, r24
    *task_id = error_task;
    379a:	80 91 58 08 	lds	r24, 0x0858
    379e:	80 83       	st	Z, r24
    return 1;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
}
    37a2:	08 95       	ret

000037a4 <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    37a4:	80 91 c7 0d 	lds	r24, 0x0DC7
    37a8:	88 23       	and	r24, r24
    37aa:	09 f4       	brne	.+2      	; 0x37ae <nrk_error_print+0xa>
    37ac:	84 c0       	rjmp	.+264    	; 0x38b6 <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    37ae:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    37b2:	88 e2       	ldi	r24, 0x28	; 40
    37b4:	97 e0       	ldi	r25, 0x07	; 7
    37b6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
        printf ("%d", error_task);
    37ba:	80 91 58 08 	lds	r24, 0x0858
    37be:	1f 92       	push	r1
    37c0:	8f 93       	push	r24
    37c2:	8a e4       	ldi	r24, 0x4A	; 74
    37c4:	93 e0       	ldi	r25, 0x03	; 3
    37c6:	9f 93       	push	r25
    37c8:	8f 93       	push	r24
    37ca:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
        nrk_kprintf (PSTR ("): "));
    37ce:	84 e2       	ldi	r24, 0x24	; 36
    37d0:	97 e0       	ldi	r25, 0x07	; 7
    37d2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	80 91 c7 0d 	lds	r24, 0x0DC7
    37e2:	88 31       	cpi	r24, 0x18	; 24
    37e4:	10 f0       	brcs	.+4      	; 0x37ea <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    37e6:	10 92 c7 0d 	sts	0x0DC7, r1
        switch (error_num)
    37ea:	e0 91 c7 0d 	lds	r30, 0x0DC7
    37ee:	8e 2f       	mov	r24, r30
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	fc 01       	movw	r30, r24
    37f4:	31 97       	sbiw	r30, 0x01	; 1
    37f6:	e6 31       	cpi	r30, 0x16	; 22
    37f8:	f1 05       	cpc	r31, r1
    37fa:	08 f0       	brcs	.+2      	; 0x37fe <nrk_error_print+0x5a>
    37fc:	46 c0       	rjmp	.+140    	; 0x388a <nrk_error_print+0xe6>
    37fe:	e6 54       	subi	r30, 0x46	; 70
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    3806:	88 ee       	ldi	r24, 0xE8	; 232
    3808:	96 e0       	ldi	r25, 0x06	; 6
    380a:	41 c0       	rjmp	.+130    	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    380c:	81 ec       	ldi	r24, 0xC1	; 193
    380e:	96 e0       	ldi	r25, 0x06	; 6
    3810:	3e c0       	rjmp	.+124    	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    3812:	8d ea       	ldi	r24, 0xAD	; 173
    3814:	96 e0       	ldi	r25, 0x06	; 6
    3816:	3b c0       	rjmp	.+118    	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    3818:	87 e9       	ldi	r24, 0x97	; 151
    381a:	96 e0       	ldi	r25, 0x06	; 6
    381c:	38 c0       	rjmp	.+112    	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    381e:	8c e7       	ldi	r24, 0x7C	; 124
    3820:	96 e0       	ldi	r25, 0x06	; 6
    3822:	35 c0       	rjmp	.+106    	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    3824:	86 e6       	ldi	r24, 0x66	; 102
    3826:	96 e0       	ldi	r25, 0x06	; 6
    3828:	32 c0       	rjmp	.+100    	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    382a:	8e e4       	ldi	r24, 0x4E	; 78
    382c:	96 e0       	ldi	r25, 0x06	; 6
    382e:	2f c0       	rjmp	.+94     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    3830:	8b e3       	ldi	r24, 0x3B	; 59
    3832:	96 e0       	ldi	r25, 0x06	; 6
    3834:	2c c0       	rjmp	.+88     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    3836:	88 e2       	ldi	r24, 0x28	; 40
    3838:	96 e0       	ldi	r25, 0x06	; 6
    383a:	29 c0       	rjmp	.+82     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    383c:	8a e0       	ldi	r24, 0x0A	; 10
    383e:	96 e0       	ldi	r25, 0x06	; 6
    3840:	26 c0       	rjmp	.+76     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    3842:	85 ee       	ldi	r24, 0xE5	; 229
    3844:	95 e0       	ldi	r25, 0x05	; 5
    3846:	23 c0       	rjmp	.+70     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    3848:	89 ed       	ldi	r24, 0xD9	; 217
    384a:	95 e0       	ldi	r25, 0x05	; 5
    384c:	20 c0       	rjmp	.+64     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    384e:	8e eb       	ldi	r24, 0xBE	; 190
    3850:	95 e0       	ldi	r25, 0x05	; 5
    3852:	1d c0       	rjmp	.+58     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    3854:	8f ea       	ldi	r24, 0xAF	; 175
    3856:	95 e0       	ldi	r25, 0x05	; 5
    3858:	1a c0       	rjmp	.+52     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    385a:	8b e9       	ldi	r24, 0x9B	; 155
    385c:	95 e0       	ldi	r25, 0x05	; 5
    385e:	17 c0       	rjmp	.+46     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    3860:	8a e8       	ldi	r24, 0x8A	; 138
    3862:	95 e0       	ldi	r25, 0x05	; 5
    3864:	14 c0       	rjmp	.+40     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    3866:	86 e7       	ldi	r24, 0x76	; 118
    3868:	95 e0       	ldi	r25, 0x05	; 5
    386a:	11 c0       	rjmp	.+34     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    386c:	86 e5       	ldi	r24, 0x56	; 86
    386e:	95 e0       	ldi	r25, 0x05	; 5
    3870:	0e c0       	rjmp	.+28     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    3872:	8e e3       	ldi	r24, 0x3E	; 62
    3874:	95 e0       	ldi	r25, 0x05	; 5
    3876:	0b c0       	rjmp	.+22     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    3878:	83 e2       	ldi	r24, 0x23	; 35
    387a:	95 e0       	ldi	r25, 0x05	; 5
    387c:	08 c0       	rjmp	.+16     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    387e:	82 e1       	ldi	r24, 0x12	; 18
    3880:	95 e0       	ldi	r25, 0x05	; 5
    3882:	05 c0       	rjmp	.+10     	; 0x388e <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    3884:	83 e0       	ldi	r24, 0x03	; 3
    3886:	95 e0       	ldi	r25, 0x05	; 5
    3888:	02 c0       	rjmp	.+4      	; 0x388e <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    388a:	8c ef       	ldi	r24, 0xFC	; 252
    388c:	94 e0       	ldi	r25, 0x04	; 4
    388e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>
        }
        putchar ('\r');
    3892:	60 91 7f 11 	lds	r22, 0x117F
    3896:	70 91 80 11 	lds	r23, 0x1180
    389a:	8d e0       	ldi	r24, 0x0D	; 13
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
        putchar ('\n');
    38a2:	60 91 7f 11 	lds	r22, 0x117F
    38a6:	70 91 80 11 	lds	r23, 0x1180
    38aa:	8a e0       	ldi	r24, 0x0A	; 10
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    38b2:	10 92 c7 0d 	sts	0x0DC7, r1
    return t;
}
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	08 95       	ret

000038ba <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    38ba:	80 93 c7 0d 	sts	0x0DC7, r24
    error_task = nrk_cur_task_TCB->task_ID;
    38be:	e0 91 4e 11 	lds	r30, 0x114E
    38c2:	f0 91 4f 11 	lds	r31, 0x114F
    38c6:	80 85       	ldd	r24, Z+8	; 0x08
    38c8:	80 93 58 08 	sts	0x0858, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    38cc:	0c 94 d2 1b 	jmp	0x37a4	; 0x37a4 <nrk_error_print>

000038d0 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    38d0:	80 93 c7 0d 	sts	0x0DC7, r24
    error_task = task;
    38d4:	60 93 58 08 	sts	0x0858, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    38d8:	0c 94 d2 1b 	jmp	0x37a4	; 0x37a4 <nrk_error_print>

000038dc <pause>:
    }

}

void pause()
{
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	1f 92       	push	r1
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    38e6:	19 82       	std	Y+1, r1	; 0x01
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	84 36       	cpi	r24, 0x64	; 100
    38ec:	40 f4       	brcc	.+16     	; 0x38fe <pause+0x22>
        nrk_spin_wait_us (2000);
    38ee:	80 ed       	ldi	r24, 0xD0	; 208
    38f0:	97 e0       	ldi	r25, 0x07	; 7
    38f2:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	8f 5f       	subi	r24, 0xFF	; 255
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	f5 cf       	rjmp	.-22     	; 0x38e8 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    38fe:	0f 90       	pop	r0
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	08 95       	ret

00003906 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <nrk_led_set>
    pause();
    390e:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <pause>
    pause();
    3912:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <pause>
    pause();
    3916:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <pause>
    nrk_led_clr(GREEN_LED);
    391a:	81 e0       	ldi	r24, 0x01	; 1
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
    pause();
    3922:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <pause>

00003926 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <nrk_led_set>
    pause();
    392e:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <pause>
    nrk_led_clr(GREEN_LED);
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
    pause();
    393a:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <pause>

0000393e <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    393e:	ff 92       	push	r15
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	00 d0       	rcall	.+0      	; 0x394a <blink_morse_code_error+0xc>
    394a:	1f 92       	push	r1
    394c:	cd b7       	in	r28, 0x3d	; 61
    394e:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    3950:	1f 92       	push	r1
    3952:	8f 93       	push	r24
    3954:	8a e4       	ldi	r24, 0x4A	; 74
    3956:	93 e0       	ldi	r25, 0x03	; 3
    3958:	9f 93       	push	r25
    395a:	8f 93       	push	r24
    395c:	8e 01       	movw	r16, r28
    395e:	0f 5f       	subi	r16, 0xFF	; 255
    3960:	1f 4f       	sbci	r17, 0xFF	; 255
    3962:	1f 93       	push	r17
    3964:	0f 93       	push	r16
    3966:	0e 94 b0 32 	call	0x6560	; 0x6560 <sprintf>

    for(i=0; i<strlen(str); i++ )
    396a:	0f 90       	pop	r0
    396c:	0f 90       	pop	r0
    396e:	0f 90       	pop	r0
    3970:	0f 90       	pop	r0
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	f1 2c       	mov	r15, r1
    3978:	f8 01       	movw	r30, r16
    397a:	01 90       	ld	r0, Z+
    397c:	00 20       	and	r0, r0
    397e:	e9 f7       	brne	.-6      	; 0x397a <blink_morse_code_error+0x3c>
    3980:	31 97       	sbiw	r30, 0x01	; 1
    3982:	e0 1b       	sub	r30, r16
    3984:	f1 0b       	sbc	r31, r17
    3986:	8f 2d       	mov	r24, r15
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	8e 17       	cp	r24, r30
    398c:	9f 07       	cpc	r25, r31
    398e:	08 f0       	brcs	.+2      	; 0x3992 <blink_morse_code_error+0x54>
    3990:	5d c0       	rjmp	.+186    	; 0x3a4c <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    3992:	f8 01       	movw	r30, r16
    3994:	e8 0f       	add	r30, r24
    3996:	f9 1f       	adc	r31, r25
    3998:	e0 81       	ld	r30, Z
    399a:	8e 2f       	mov	r24, r30
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	fc 01       	movw	r30, r24
    39a0:	f0 97       	sbiw	r30, 0x30	; 48
    39a2:	ea 30       	cpi	r30, 0x0A	; 10
    39a4:	f1 05       	cpc	r31, r1
    39a6:	08 f0       	brcs	.+2      	; 0x39aa <blink_morse_code_error+0x6c>
    39a8:	49 c0       	rjmp	.+146    	; 0x3a3c <blink_morse_code_error+0xfe>
    39aa:	e0 53       	subi	r30, 0x30	; 48
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	0c 94 ed 30 	jmp	0x61da	; 0x61da <__tablejump2__>
        {
        case '0':
            blink_dash();
    39b2:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    39b8:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            blink_dash();
    39bc:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    39c0:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    39c4:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    39c8:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            break;
    39cc:	37 c0       	rjmp	.+110    	; 0x3a3c <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    39ce:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            blink_dot();
    39d2:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    39d6:	f4 cf       	rjmp	.-24     	; 0x39c0 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    39d8:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            blink_dot();
    39dc:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            blink_dot();
    39e0:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    39e4:	ef cf       	rjmp	.-34     	; 0x39c4 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    39e6:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            blink_dot();
    39ea:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            blink_dot();
    39ee:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            blink_dot();
    39f2:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    39f6:	e8 cf       	rjmp	.-48     	; 0x39c8 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    39f8:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    39fc:	02 c0       	rjmp	.+4      	; 0x3a02 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    39fe:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dot();
    3a02:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a06:	04 c0       	rjmp	.+8      	; 0x3a10 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    3a08:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    3a0c:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dot();
    3a10:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a14:	06 c0       	rjmp	.+12     	; 0x3a22 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    3a16:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    3a1a:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    3a1e:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dot();
    3a22:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
    3a26:	08 c0       	rjmp	.+16     	; 0x3a38 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    3a28:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    3a2c:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    3a30:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dash();
    3a34:	0e 94 83 1c 	call	0x3906	; 0x3906 <blink_dash>
            blink_dot();
    3a38:	0e 94 93 1c 	call	0x3926	; 0x3926 <blink_dot>
            break;
        }
        pause();
    3a3c:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <pause>
        pause();
    3a40:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <pause>
        pause();
    3a44:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    3a48:	f3 94       	inc	r15
    3a4a:	96 cf       	rjmp	.-212    	; 0x3978 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	ff 90       	pop	r15
    3a5c:	08 95       	ret

00003a5e <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3a5e:	6f 92       	push	r6
    3a60:	7f 92       	push	r7
    3a62:	8f 92       	push	r8
    3a64:	9f 92       	push	r9
    3a66:	af 92       	push	r10
    3a68:	bf 92       	push	r11
    3a6a:	cf 92       	push	r12
    3a6c:	df 92       	push	r13
    3a6e:	ef 92       	push	r14
    3a70:	ff 92       	push	r15
    3a72:	0f 93       	push	r16
    3a74:	1f 93       	push	r17
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    3a7a:	84 e3       	ldi	r24, 0x34	; 52
    3a7c:	97 e0       	ldi	r25, 0x07	; 7
    3a7e:	0e 94 5f 15 	call	0x2abe	; 0x2abe <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3a82:	e0 91 4e 11 	lds	r30, 0x114E
    3a86:	f0 91 4f 11 	lds	r31, 0x114F
    3a8a:	80 85       	ldd	r24, Z+8	; 0x08
    3a8c:	28 2f       	mov	r18, r24
    3a8e:	33 27       	eor	r19, r19
    3a90:	27 fd       	sbrc	r18, 7
    3a92:	30 95       	com	r19
    3a94:	3f 93       	push	r19
    3a96:	8f 93       	push	r24
    3a98:	84 e9       	ldi	r24, 0x94	; 148
    3a9a:	94 e0       	ldi	r25, 0x04	; 4
    3a9c:	9f 93       	push	r25
    3a9e:	8f 93       	push	r24
    3aa0:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    3aa4:	e0 91 4e 11 	lds	r30, 0x114E
    3aa8:	f0 91 4f 11 	lds	r31, 0x114F
    3aac:	c2 81       	ldd	r28, Z+2	; 0x02
    3aae:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    3ab0:	df 93       	push	r29
    3ab2:	cf 93       	push	r28
    3ab4:	88 ec       	ldi	r24, 0xC8	; 200
    3ab6:	94 e0       	ldi	r25, 0x04	; 4
    3ab8:	9f 93       	push	r25
    3aba:	8f 93       	push	r24
    3abc:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    printf( "canary = %x ",*stkc );
    3ac0:	88 81       	ld	r24, Y
    3ac2:	1f 92       	push	r1
    3ac4:	8f 93       	push	r24
    3ac6:	8d e9       	ldi	r24, 0x9D	; 157
    3ac8:	94 e0       	ldi	r25, 0x04	; 4
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    3ad2:	e0 91 4e 11 	lds	r30, 0x114E
    3ad6:	f0 91 4f 11 	lds	r31, 0x114F
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3ada:	81 81       	ldd	r24, Z+1	; 0x01
    3adc:	8f 93       	push	r24
    3ade:	80 81       	ld	r24, Z
    3ae0:	8f 93       	push	r24
    3ae2:	8a ea       	ldi	r24, 0xAA	; 170
    3ae4:	94 e0       	ldi	r25, 0x04	; 4
    3ae6:	9f 93       	push	r25
    3ae8:	8f 93       	push	r24
    3aea:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3aee:	80 91 4f 11 	lds	r24, 0x114F
    3af2:	8f 93       	push	r24
    3af4:	80 91 4e 11 	lds	r24, 0x114E
    3af8:	8f 93       	push	r24
    3afa:	84 eb       	ldi	r24, 0xB4	; 180
    3afc:	94 e0       	ldi	r25, 0x04	; 4
    3afe:	9f 93       	push	r25
    3b00:	8f 93       	push	r24
    3b02:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    3b06:	cd e2       	ldi	r28, 0x2D	; 45
    3b08:	d0 e1       	ldi	r29, 0x10	; 16
    3b0a:	ed b7       	in	r30, 0x3d	; 61
    3b0c:	fe b7       	in	r31, 0x3e	; 62
    3b0e:	74 96       	adiw	r30, 0x14	; 20
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	f8 94       	cli
    3b14:	fe bf       	out	0x3e, r31	; 62
    3b16:	0f be       	out	0x3f, r0	; 63
    3b18:	ed bf       	out	0x3d, r30	; 61
    3b1a:	00 e0       	ldi	r16, 0x00	; 0
    3b1c:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3b1e:	84 ec       	ldi	r24, 0xC4	; 196
    3b20:	68 2e       	mov	r6, r24
    3b22:	84 e0       	ldi	r24, 0x04	; 4
    3b24:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    3b26:	9d e9       	ldi	r25, 0x9D	; 157
    3b28:	89 2e       	mov	r8, r25
    3b2a:	94 e0       	ldi	r25, 0x04	; 4
    3b2c:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3b2e:	2a ea       	ldi	r18, 0xAA	; 170
    3b30:	a2 2e       	mov	r10, r18
    3b32:	24 e0       	ldi	r18, 0x04	; 4
    3b34:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3b36:	34 eb       	ldi	r19, 0xB4	; 180
    3b38:	c3 2e       	mov	r12, r19
    3b3a:	34 e0       	ldi	r19, 0x04	; 4
    3b3c:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3b3e:	ea 80       	ldd	r14, Y+2	; 0x02
    3b40:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3b42:	ff 92       	push	r15
    3b44:	ef 92       	push	r14
    3b46:	1f 93       	push	r17
    3b48:	0f 93       	push	r16
    3b4a:	7f 92       	push	r7
    3b4c:	6f 92       	push	r6
    3b4e:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
        printf( "canary = %x ",*stkc );
    3b52:	f7 01       	movw	r30, r14
    3b54:	80 81       	ld	r24, Z
    3b56:	1f 92       	push	r1
    3b58:	8f 93       	push	r24
    3b5a:	9f 92       	push	r9
    3b5c:	8f 92       	push	r8
    3b5e:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	8f 93       	push	r24
    3b66:	88 81       	ld	r24, Y
    3b68:	8f 93       	push	r24
    3b6a:	bf 92       	push	r11
    3b6c:	af 92       	push	r10
    3b6e:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3b72:	df 93       	push	r29
    3b74:	cf 93       	push	r28
    3b76:	df 92       	push	r13
    3b78:	cf 92       	push	r12
    3b7a:	0e 94 66 32 	call	0x64cc	; 0x64cc <printf>
    3b7e:	0f 5f       	subi	r16, 0xFF	; 255
    3b80:	1f 4f       	sbci	r17, 0xFF	; 255
    3b82:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    3b84:	ed b7       	in	r30, 0x3d	; 61
    3b86:	fe b7       	in	r31, 0x3e	; 62
    3b88:	72 96       	adiw	r30, 0x12	; 18
    3b8a:	0f b6       	in	r0, 0x3f	; 63
    3b8c:	f8 94       	cli
    3b8e:	fe bf       	out	0x3e, r31	; 62
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	ed bf       	out	0x3d, r30	; 61
    3b94:	06 30       	cpi	r16, 0x06	; 6
    3b96:	11 05       	cpc	r17, r1
    3b98:	91 f6       	brne	.-92     	; 0x3b3e <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	bf 90       	pop	r11
    3bac:	af 90       	pop	r10
    3bae:	9f 90       	pop	r9
    3bb0:	8f 90       	pop	r8
    3bb2:	7f 90       	pop	r7
    3bb4:	6f 90       	pop	r6
    3bb6:	08 95       	ret

00003bb8 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    3bbc:	e0 91 4e 11 	lds	r30, 0x114E
    3bc0:	f0 91 4f 11 	lds	r31, 0x114F
    3bc4:	c2 81       	ldd	r28, Z+2	; 0x02
    3bc6:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3bc8:	88 81       	ld	r24, Y
    3bca:	85 35       	cpi	r24, 0x55	; 85
    3bcc:	39 f0       	breq	.+14     	; 0x3bdc <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3bce:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3bd8:	85 e5       	ldi	r24, 0x55	; 85
    3bda:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3bdc:	e0 91 4e 11 	lds	r30, 0x114E
    3be0:	f0 91 4f 11 	lds	r31, 0x114F
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	81 15       	cp	r24, r1
    3bea:	92 44       	sbci	r25, 0x42	; 66
    3bec:	38 f0       	brcs	.+14     	; 0x3bfc <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    3bee:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3bf2:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    3bf4:	df 91       	pop	r29
    3bf6:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3bf8:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <nrk_error_add>




#endif
}
    3bfc:	df 91       	pop	r29
    3bfe:	cf 91       	pop	r28
    3c00:	08 95       	ret

00003c02 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    3c02:	2b e2       	ldi	r18, 0x2B	; 43
    3c04:	82 02       	muls	r24, r18
    3c06:	c0 01       	movw	r24, r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	e3 5d       	subi	r30, 0xD3	; 211
    3c0e:	ff 4e       	sbci	r31, 0xEF	; 239
    3c10:	a2 81       	ldd	r26, Z+2	; 0x02
    3c12:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3c14:	8c 91       	ld	r24, X
    3c16:	85 35       	cpi	r24, 0x55	; 85
    3c18:	19 f0       	breq	.+6      	; 0x3c20 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3c1a:	85 e5       	ldi	r24, 0x55	; 85
    3c1c:	8c 93       	st	X, r24
    3c1e:	08 c0       	rjmp	.+16     	; 0x3c30 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	81 15       	cp	r24, r1
    3c26:	92 44       	sbci	r25, 0x42	; 66
    3c28:	28 f0       	brcs	.+10     	; 0x3c34 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3c2a:	82 e1       	ldi	r24, 0x12	; 18
    3c2c:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <nrk_error_add>
        return NRK_ERROR;
    3c30:	8f ef       	ldi	r24, 0xFF	; 255
    3c32:	08 95       	ret
    }
#endif
    return NRK_OK;
    3c34:	81 e0       	ldi	r24, 0x01	; 1
}
    3c36:	08 95       	ret

00003c38 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3c3c:	40 91 aa 08 	lds	r20, 0x08AA
    3c40:	50 91 ab 08 	lds	r21, 0x08AB
    3c44:	60 91 ac 08 	lds	r22, 0x08AC
    3c48:	70 91 ad 08 	lds	r23, 0x08AD
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	8a 01       	movw	r16, r20
    3c52:	9b 01       	movw	r18, r22
    3c54:	08 2e       	mov	r0, r24
    3c56:	04 c0       	rjmp	.+8      	; 0x3c60 <nrk_signal_create+0x28>
    3c58:	36 95       	lsr	r19
    3c5a:	27 95       	ror	r18
    3c5c:	17 95       	ror	r17
    3c5e:	07 95       	ror	r16
    3c60:	0a 94       	dec	r0
    3c62:	d2 f7       	brpl	.-12     	; 0x3c58 <nrk_signal_create+0x20>
    3c64:	00 fd       	sbrc	r16, 0
    3c66:	19 c0       	rjmp	.+50     	; 0x3c9a <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3c68:	01 e0       	ldi	r16, 0x01	; 1
    3c6a:	10 e0       	ldi	r17, 0x00	; 0
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	08 2e       	mov	r0, r24
    3c72:	04 c0       	rjmp	.+8      	; 0x3c7c <nrk_signal_create+0x44>
    3c74:	00 0f       	add	r16, r16
    3c76:	11 1f       	adc	r17, r17
    3c78:	22 1f       	adc	r18, r18
    3c7a:	33 1f       	adc	r19, r19
    3c7c:	0a 94       	dec	r0
    3c7e:	d2 f7       	brpl	.-12     	; 0x3c74 <nrk_signal_create+0x3c>
    3c80:	40 2b       	or	r20, r16
    3c82:	51 2b       	or	r21, r17
    3c84:	62 2b       	or	r22, r18
    3c86:	73 2b       	or	r23, r19
    3c88:	40 93 aa 08 	sts	0x08AA, r20
    3c8c:	50 93 ab 08 	sts	0x08AB, r21
    3c90:	60 93 ac 08 	sts	0x08AC, r22
    3c94:	70 93 ad 08 	sts	0x08AD, r23
			return i;
    3c98:	05 c0       	rjmp	.+10     	; 0x3ca4 <nrk_signal_create+0x6c>
    3c9a:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    3c9c:	80 32       	cpi	r24, 0x20	; 32
    3c9e:	91 05       	cpc	r25, r1
    3ca0:	b9 f6       	brne	.-82     	; 0x3c50 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    3ca2:	8f ef       	ldi	r24, 0xFF	; 255


}
    3ca4:	1f 91       	pop	r17
    3ca6:	0f 91       	pop	r16
    3ca8:	08 95       	ret

00003caa <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3caa:	e0 91 4e 11 	lds	r30, 0x114E
    3cae:	f0 91 4f 11 	lds	r31, 0x114F
    3cb2:	65 85       	ldd	r22, Z+13	; 0x0d
    3cb4:	76 85       	ldd	r23, Z+14	; 0x0e
    3cb6:	87 85       	ldd	r24, Z+15	; 0x0f
    3cb8:	90 89       	ldd	r25, Z+16	; 0x10
}
    3cba:	08 95       	ret

00003cbc <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3cbc:	cf 92       	push	r12
    3cbe:	df 92       	push	r13
    3cc0:	ef 92       	push	r14
    3cc2:	ff 92       	push	r15
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3ccc:	c1 2c       	mov	r12, r1
    3cce:	d1 2c       	mov	r13, r1
    3cd0:	76 01       	movw	r14, r12
    3cd2:	c3 94       	inc	r12
    3cd4:	08 2e       	mov	r0, r24
    3cd6:	04 c0       	rjmp	.+8      	; 0x3ce0 <nrk_signal_delete+0x24>
    3cd8:	cc 0c       	add	r12, r12
    3cda:	dd 1c       	adc	r13, r13
    3cdc:	ee 1c       	adc	r14, r14
    3cde:	ff 1c       	adc	r15, r15
    3ce0:	0a 94       	dec	r0
    3ce2:	d2 f7       	brpl	.-12     	; 0x3cd8 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3ce4:	40 91 aa 08 	lds	r20, 0x08AA
    3ce8:	50 91 ab 08 	lds	r21, 0x08AB
    3cec:	60 91 ac 08 	lds	r22, 0x08AC
    3cf0:	70 91 ad 08 	lds	r23, 0x08AD
    3cf4:	4c 21       	and	r20, r12
    3cf6:	5d 21       	and	r21, r13
    3cf8:	6e 21       	and	r22, r14
    3cfa:	7f 21       	and	r23, r15
    3cfc:	45 2b       	or	r20, r21
    3cfe:	46 2b       	or	r20, r22
    3d00:	47 2b       	or	r20, r23
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <nrk_signal_delete+0x4a>
    3d04:	60 c0       	rjmp	.+192    	; 0x3dc6 <nrk_signal_delete+0x10a>
    3d06:	08 2f       	mov	r16, r24

	nrk_int_disable();
    3d08:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    3d0c:	e6 e3       	ldi	r30, 0x36	; 54
    3d0e:	f0 e1       	ldi	r31, 0x10	; 16
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3d10:	b7 01       	movw	r22, r14
    3d12:	a6 01       	movw	r20, r12
    3d14:	40 95       	com	r20
    3d16:	50 95       	com	r21
    3d18:	60 95       	com	r22
    3d1a:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3d1c:	13 e0       	ldi	r17, 0x03	; 3
    3d1e:	df 01       	movw	r26, r30
    3d20:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3d22:	8c 91       	ld	r24, X
    3d24:	8f 3f       	cpi	r24, 0xFF	; 255
    3d26:	39 f1       	breq	.+78     	; 0x3d76 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3d28:	84 81       	ldd	r24, Z+4	; 0x04
    3d2a:	95 81       	ldd	r25, Z+5	; 0x05
    3d2c:	a6 81       	ldd	r26, Z+6	; 0x06
    3d2e:	b7 81       	ldd	r27, Z+7	; 0x07
    3d30:	8c 15       	cp	r24, r12
    3d32:	9d 05       	cpc	r25, r13
    3d34:	ae 05       	cpc	r26, r14
    3d36:	bf 05       	cpc	r27, r15
    3d38:	51 f4       	brne	.+20     	; 0x3d4e <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3d3a:	10 86       	std	Z+8, r1	; 0x08
    3d3c:	11 86       	std	Z+9, r1	; 0x09
    3d3e:	12 86       	std	Z+10, r1	; 0x0a
    3d40:	13 86       	std	Z+11, r1	; 0x0b
    3d42:	9f 01       	movw	r18, r30
    3d44:	22 50       	subi	r18, 0x02	; 2
    3d46:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3d48:	e9 01       	movw	r28, r18
    3d4a:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3d4c:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3d4e:	84 23       	and	r24, r20
    3d50:	95 23       	and	r25, r21
    3d52:	a6 23       	and	r26, r22
    3d54:	b7 23       	and	r27, r23
    3d56:	84 83       	std	Z+4, r24	; 0x04
    3d58:	95 83       	std	Z+5, r25	; 0x05
    3d5a:	a6 83       	std	Z+6, r26	; 0x06
    3d5c:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3d5e:	80 85       	ldd	r24, Z+8	; 0x08
    3d60:	91 85       	ldd	r25, Z+9	; 0x09
    3d62:	a2 85       	ldd	r26, Z+10	; 0x0a
    3d64:	b3 85       	ldd	r27, Z+11	; 0x0b
    3d66:	84 23       	and	r24, r20
    3d68:	95 23       	and	r25, r21
    3d6a:	a6 23       	and	r26, r22
    3d6c:	b7 23       	and	r27, r23
    3d6e:	80 87       	std	Z+8, r24	; 0x08
    3d70:	91 87       	std	Z+9, r25	; 0x09
    3d72:	a2 87       	std	Z+10, r26	; 0x0a
    3d74:	b3 87       	std	Z+11, r27	; 0x0b
    3d76:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3d78:	d1 e1       	ldi	r29, 0x11	; 17
    3d7a:	e8 33       	cpi	r30, 0x38	; 56
    3d7c:	fd 07       	cpc	r31, r29
    3d7e:	79 f6       	brne	.-98     	; 0x3d1e <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    3d80:	8e ef       	ldi	r24, 0xFE	; 254
    3d82:	9f ef       	ldi	r25, 0xFF	; 255
    3d84:	af ef       	ldi	r26, 0xFF	; 255
    3d86:	bf ef       	ldi	r27, 0xFF	; 255
    3d88:	04 c0       	rjmp	.+8      	; 0x3d92 <nrk_signal_delete+0xd6>
    3d8a:	88 0f       	add	r24, r24
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	aa 1f       	adc	r26, r26
    3d90:	bb 1f       	adc	r27, r27
    3d92:	0a 95       	dec	r16
    3d94:	d2 f7       	brpl	.-12     	; 0x3d8a <nrk_signal_delete+0xce>
    3d96:	40 91 aa 08 	lds	r20, 0x08AA
    3d9a:	50 91 ab 08 	lds	r21, 0x08AB
    3d9e:	60 91 ac 08 	lds	r22, 0x08AC
    3da2:	70 91 ad 08 	lds	r23, 0x08AD
    3da6:	84 23       	and	r24, r20
    3da8:	95 23       	and	r25, r21
    3daa:	a6 23       	and	r26, r22
    3dac:	b7 23       	and	r27, r23
    3dae:	80 93 aa 08 	sts	0x08AA, r24
    3db2:	90 93 ab 08 	sts	0x08AB, r25
    3db6:	a0 93 ac 08 	sts	0x08AC, r26
    3dba:	b0 93 ad 08 	sts	0x08AD, r27
	nrk_int_enable();
    3dbe:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>

	return NRK_OK;
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	01 c0       	rjmp	.+2      	; 0x3dc8 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3dc6:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	ff 90       	pop	r15
    3dd2:	ef 90       	pop	r14
    3dd4:	df 90       	pop	r13
    3dd6:	cf 90       	pop	r12
    3dd8:	08 95       	ret

00003dda <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3dda:	0f 93       	push	r16
    3ddc:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    3dde:	41 e0       	ldi	r20, 0x01	; 1
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	60 e0       	ldi	r22, 0x00	; 0
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	8a 01       	movw	r16, r20
    3de8:	9b 01       	movw	r18, r22
    3dea:	04 c0       	rjmp	.+8      	; 0x3df4 <nrk_signal_unregister+0x1a>
    3dec:	00 0f       	add	r16, r16
    3dee:	11 1f       	adc	r17, r17
    3df0:	22 1f       	adc	r18, r18
    3df2:	33 1f       	adc	r19, r19
    3df4:	8a 95       	dec	r24
    3df6:	d2 f7       	brpl	.-12     	; 0x3dec <nrk_signal_unregister+0x12>
    3df8:	d9 01       	movw	r26, r18
    3dfa:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3dfc:	e0 91 4e 11 	lds	r30, 0x114E
    3e00:	f0 91 4f 11 	lds	r31, 0x114F
    3e04:	45 85       	ldd	r20, Z+13	; 0x0d
    3e06:	56 85       	ldd	r21, Z+14	; 0x0e
    3e08:	67 85       	ldd	r22, Z+15	; 0x0f
    3e0a:	70 89       	ldd	r23, Z+16	; 0x10
    3e0c:	04 23       	and	r16, r20
    3e0e:	15 23       	and	r17, r21
    3e10:	26 23       	and	r18, r22
    3e12:	37 23       	and	r19, r23
    3e14:	01 2b       	or	r16, r17
    3e16:	02 2b       	or	r16, r18
    3e18:	03 2b       	or	r16, r19
    3e1a:	d1 f0       	breq	.+52     	; 0x3e50 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3e1c:	80 95       	com	r24
    3e1e:	90 95       	com	r25
    3e20:	a0 95       	com	r26
    3e22:	b0 95       	com	r27
    3e24:	48 23       	and	r20, r24
    3e26:	59 23       	and	r21, r25
    3e28:	6a 23       	and	r22, r26
    3e2a:	7b 23       	and	r23, r27
    3e2c:	45 87       	std	Z+13, r20	; 0x0d
    3e2e:	56 87       	std	Z+14, r21	; 0x0e
    3e30:	67 87       	std	Z+15, r22	; 0x0f
    3e32:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3e34:	41 89       	ldd	r20, Z+17	; 0x11
    3e36:	52 89       	ldd	r21, Z+18	; 0x12
    3e38:	63 89       	ldd	r22, Z+19	; 0x13
    3e3a:	74 89       	ldd	r23, Z+20	; 0x14
    3e3c:	84 23       	and	r24, r20
    3e3e:	95 23       	and	r25, r21
    3e40:	a6 23       	and	r26, r22
    3e42:	b7 23       	and	r27, r23
    3e44:	81 8b       	std	Z+17, r24	; 0x11
    3e46:	92 8b       	std	Z+18, r25	; 0x12
    3e48:	a3 8b       	std	Z+19, r26	; 0x13
    3e4a:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	01 c0       	rjmp	.+2      	; 0x3e52 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3e50:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	08 95       	ret

00003e58 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3e58:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3e5a:	40 91 aa 08 	lds	r20, 0x08AA
    3e5e:	50 91 ab 08 	lds	r21, 0x08AB
    3e62:	60 91 ac 08 	lds	r22, 0x08AC
    3e66:	70 91 ad 08 	lds	r23, 0x08AD
    3e6a:	08 2e       	mov	r0, r24
    3e6c:	04 c0       	rjmp	.+8      	; 0x3e76 <nrk_signal_register+0x1e>
    3e6e:	76 95       	lsr	r23
    3e70:	67 95       	ror	r22
    3e72:	57 95       	ror	r21
    3e74:	47 95       	ror	r20
    3e76:	0a 94       	dec	r0
    3e78:	d2 f7       	brpl	.-12     	; 0x3e6e <nrk_signal_register+0x16>
    3e7a:	40 ff       	sbrs	r20, 0
    3e7c:	1d c0       	rjmp	.+58     	; 0x3eb8 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3e7e:	e0 91 4e 11 	lds	r30, 0x114E
    3e82:	f0 91 4f 11 	lds	r31, 0x114F
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	a0 e0       	ldi	r26, 0x00	; 0
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	04 c0       	rjmp	.+8      	; 0x3e98 <nrk_signal_register+0x40>
    3e90:	88 0f       	add	r24, r24
    3e92:	99 1f       	adc	r25, r25
    3e94:	aa 1f       	adc	r26, r26
    3e96:	bb 1f       	adc	r27, r27
    3e98:	2a 95       	dec	r18
    3e9a:	d2 f7       	brpl	.-12     	; 0x3e90 <nrk_signal_register+0x38>
    3e9c:	45 85       	ldd	r20, Z+13	; 0x0d
    3e9e:	56 85       	ldd	r21, Z+14	; 0x0e
    3ea0:	67 85       	ldd	r22, Z+15	; 0x0f
    3ea2:	70 89       	ldd	r23, Z+16	; 0x10
    3ea4:	84 2b       	or	r24, r20
    3ea6:	95 2b       	or	r25, r21
    3ea8:	a6 2b       	or	r26, r22
    3eaa:	b7 2b       	or	r27, r23
    3eac:	85 87       	std	Z+13, r24	; 0x0d
    3eae:	96 87       	std	Z+14, r25	; 0x0e
    3eb0:	a7 87       	std	Z+15, r26	; 0x0f
    3eb2:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	08 95       	ret
	}
            
	return NRK_ERROR;
    3eb8:	8f ef       	ldi	r24, 0xFF	; 255
}
    3eba:	08 95       	ret

00003ebc <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3ebc:	cf 92       	push	r12
    3ebe:	df 92       	push	r13
    3ec0:	ef 92       	push	r14
    3ec2:	ff 92       	push	r15
    3ec4:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3ec6:	c1 2c       	mov	r12, r1
    3ec8:	d1 2c       	mov	r13, r1
    3eca:	76 01       	movw	r14, r12
    3ecc:	c3 94       	inc	r12
    3ece:	04 c0       	rjmp	.+8      	; 0x3ed8 <nrk_event_signal+0x1c>
    3ed0:	cc 0c       	add	r12, r12
    3ed2:	dd 1c       	adc	r13, r13
    3ed4:	ee 1c       	adc	r14, r14
    3ed6:	ff 1c       	adc	r15, r15
    3ed8:	8a 95       	dec	r24
    3eda:	d2 f7       	brpl	.-12     	; 0x3ed0 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3edc:	80 91 aa 08 	lds	r24, 0x08AA
    3ee0:	90 91 ab 08 	lds	r25, 0x08AB
    3ee4:	a0 91 ac 08 	lds	r26, 0x08AC
    3ee8:	b0 91 ad 08 	lds	r27, 0x08AD
    3eec:	8c 21       	and	r24, r12
    3eee:	9d 21       	and	r25, r13
    3ef0:	ae 21       	and	r26, r14
    3ef2:	bf 21       	and	r27, r15
    3ef4:	89 2b       	or	r24, r25
    3ef6:	8a 2b       	or	r24, r26
    3ef8:	8b 2b       	or	r24, r27
    3efa:	11 f4       	brne	.+4      	; 0x3f00 <nrk_event_signal+0x44>
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	44 c0       	rjmp	.+136    	; 0x3f88 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3f00:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    3f04:	e4 e3       	ldi	r30, 0x34	; 52
    3f06:	f0 e1       	ldi	r31, 0x10	; 16
    3f08:	a6 e3       	ldi	r26, 0x36	; 54
    3f0a:	b0 e1       	ldi	r27, 0x10	; 16

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3f0c:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3f0e:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3f10:	90 81       	ld	r25, Z
    3f12:	91 30       	cpi	r25, 0x01	; 1
    3f14:	b9 f4       	brne	.+46     	; 0x3f44 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3f16:	42 85       	ldd	r20, Z+10	; 0x0a
    3f18:	53 85       	ldd	r21, Z+11	; 0x0b
    3f1a:	64 85       	ldd	r22, Z+12	; 0x0c
    3f1c:	75 85       	ldd	r23, Z+13	; 0x0d
    3f1e:	4c 21       	and	r20, r12
    3f20:	5d 21       	and	r21, r13
    3f22:	6e 21       	and	r22, r14
    3f24:	7f 21       	and	r23, r15
    3f26:	45 2b       	or	r20, r21
    3f28:	46 2b       	or	r20, r22
    3f2a:	47 2b       	or	r20, r23
    3f2c:	59 f0       	breq	.+22     	; 0x3f44 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3f2e:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3f30:	16 86       	std	Z+14, r1	; 0x0e
    3f32:	17 86       	std	Z+15, r1	; 0x0f
    3f34:	10 8a       	std	Z+16, r1	; 0x10
    3f36:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3f38:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3f3a:	c2 86       	std	Z+10, r12	; 0x0a
    3f3c:	d3 86       	std	Z+11, r13	; 0x0b
    3f3e:	e4 86       	std	Z+12, r14	; 0x0c
    3f40:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    3f42:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3f44:	90 81       	ld	r25, Z
    3f46:	92 30       	cpi	r25, 0x02	; 2
    3f48:	a1 f4       	brne	.+40     	; 0x3f72 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3f4a:	42 85       	ldd	r20, Z+10	; 0x0a
    3f4c:	53 85       	ldd	r21, Z+11	; 0x0b
    3f4e:	64 85       	ldd	r22, Z+12	; 0x0c
    3f50:	75 85       	ldd	r23, Z+13	; 0x0d
    3f52:	4c 15       	cp	r20, r12
    3f54:	5d 05       	cpc	r21, r13
    3f56:	6e 05       	cpc	r22, r14
    3f58:	7f 05       	cpc	r23, r15
    3f5a:	59 f4       	brne	.+22     	; 0x3f72 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3f5c:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3f5e:	16 86       	std	Z+14, r1	; 0x0e
    3f60:	17 86       	std	Z+15, r1	; 0x0f
    3f62:	10 8a       	std	Z+16, r1	; 0x10
    3f64:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3f66:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3f68:	12 86       	std	Z+10, r1	; 0x0a
    3f6a:	13 86       	std	Z+11, r1	; 0x0b
    3f6c:	14 86       	std	Z+12, r1	; 0x0c
    3f6e:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    3f70:	c1 e0       	ldi	r28, 0x01	; 1
    3f72:	bb 96       	adiw	r30, 0x2b	; 43
    3f74:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3f76:	91 e1       	ldi	r25, 0x11	; 17
    3f78:	e6 33       	cpi	r30, 0x36	; 54
    3f7a:	f9 07       	cpc	r31, r25
    3f7c:	49 f6       	brne	.-110    	; 0x3f10 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3f7e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
	if(event_occured)
    3f82:	c1 11       	cpse	r28, r1
    3f84:	05 c0       	rjmp	.+10     	; 0x3f90 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3f86:	82 e0       	ldi	r24, 0x02	; 2
    3f88:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_nrk_errno_set>
	return NRK_ERROR;
    3f8c:	8f ef       	ldi	r24, 0xFF	; 255
    3f8e:	01 c0       	rjmp	.+2      	; 0x3f92 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    3f90:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    3f92:	cf 91       	pop	r28
    3f94:	ff 90       	pop	r15
    3f96:	ef 90       	pop	r14
    3f98:	df 90       	pop	r13
    3f9a:	cf 90       	pop	r12
    3f9c:	08 95       	ret

00003f9e <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    3f9e:	0f 93       	push	r16
    3fa0:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3fa2:	e0 91 4e 11 	lds	r30, 0x114E
    3fa6:	f0 91 4f 11 	lds	r31, 0x114F
    3faa:	05 85       	ldd	r16, Z+13	; 0x0d
    3fac:	16 85       	ldd	r17, Z+14	; 0x0e
    3fae:	27 85       	ldd	r18, Z+15	; 0x0f
    3fb0:	30 89       	ldd	r19, Z+16	; 0x10
    3fb2:	06 23       	and	r16, r22
    3fb4:	17 23       	and	r17, r23
    3fb6:	28 23       	and	r18, r24
    3fb8:	39 23       	and	r19, r25
    3fba:	01 15       	cp	r16, r1
    3fbc:	11 05       	cpc	r17, r1
    3fbe:	21 05       	cpc	r18, r1
    3fc0:	31 05       	cpc	r19, r1
    3fc2:	11 f1       	breq	.+68     	; 0x4008 <nrk_event_wait+0x6a>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3fc8:	81 8b       	std	Z+17, r24	; 0x11
    3fca:	92 8b       	std	Z+18, r25	; 0x12
    3fcc:	a3 8b       	std	Z+19, r26	; 0x13
    3fce:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3fd0:	21 e0       	ldi	r18, 0x01	; 1
    3fd2:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3fd4:	00 90 3e 11 	lds	r0, 0x113E
    3fd8:	04 c0       	rjmp	.+8      	; 0x3fe2 <nrk_event_wait+0x44>
    3fda:	b6 95       	lsr	r27
    3fdc:	a7 95       	ror	r26
    3fde:	97 95       	ror	r25
    3fe0:	87 95       	ror	r24
    3fe2:	0a 94       	dec	r0
    3fe4:	d2 f7       	brpl	.-12     	; 0x3fda <nrk_event_wait+0x3c>
    3fe6:	80 ff       	sbrs	r24, 0
    3fe8:	03 c0       	rjmp	.+6      	; 0x3ff0 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3fea:	0e 94 b6 23 	call	0x476c	; 0x476c <nrk_wait_until_nw>
    3fee:	04 c0       	rjmp	.+8      	; 0x3ff8 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	0e 94 87 23 	call	0x470e	; 0x470e <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3ff8:	e0 91 4e 11 	lds	r30, 0x114E
    3ffc:	f0 91 4f 11 	lds	r31, 0x114F
    4000:	01 89       	ldd	r16, Z+17	; 0x11
    4002:	12 89       	ldd	r17, Z+18	; 0x12
    4004:	23 89       	ldd	r18, Z+19	; 0x13
    4006:	34 89       	ldd	r19, Z+20	; 0x14
}
    4008:	c9 01       	movw	r24, r18
    400a:	b8 01       	movw	r22, r16
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	08 95       	ret

00004012 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    4012:	90 91 4d 11 	lds	r25, 0x114D
    4016:	93 30       	cpi	r25, 0x03	; 3
    4018:	d0 f4       	brcc	.+52     	; 0x404e <nrk_sem_create+0x3c>
    401a:	a1 e3       	ldi	r26, 0x31	; 49
    401c:	b1 e1       	ldi	r27, 0x11	; 17
    401e:	e0 e0       	ldi	r30, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    4020:	2c 91       	ld	r18, X
    4022:	2f 3f       	cpi	r18, 0xFF	; 255
    4024:	21 f0       	breq	.+8      	; 0x402e <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    4026:	ef 5f       	subi	r30, 0xFF	; 255
    4028:	13 96       	adiw	r26, 0x03	; 3
    402a:	e4 30       	cpi	r30, 0x04	; 4
    402c:	c9 f7       	brne	.-14     	; 0x4020 <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    402e:	f0 e0       	ldi	r31, 0x00	; 0
    4030:	9f 01       	movw	r18, r30
    4032:	22 0f       	add	r18, r18
    4034:	33 1f       	adc	r19, r19
    4036:	e2 0f       	add	r30, r18
    4038:	f3 1f       	adc	r31, r19
    403a:	ef 5c       	subi	r30, 0xCF	; 207
    403c:	fe 4e       	sbci	r31, 0xEE	; 238
    403e:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    4040:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    4042:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    4044:	9f 5f       	subi	r25, 0xFF	; 255
    4046:	90 93 4d 11 	sts	0x114D, r25
	return	&nrk_sem_list[i];
    404a:	cf 01       	movw	r24, r30
    404c:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    4052:	08 95       	ret

00004054 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    4054:	21 e1       	ldi	r18, 0x11	; 17
    4056:	81 33       	cpi	r24, 0x31	; 49
    4058:	92 07       	cpc	r25, r18
    405a:	69 f0       	breq	.+26     	; 0x4076 <nrk_get_resource_index+0x22>
    405c:	21 e1       	ldi	r18, 0x11	; 17
    405e:	84 33       	cpi	r24, 0x34	; 52
    4060:	92 07       	cpc	r25, r18
    4062:	59 f0       	breq	.+22     	; 0x407a <nrk_get_resource_index+0x26>
    4064:	21 e1       	ldi	r18, 0x11	; 17
    4066:	87 33       	cpi	r24, 0x37	; 55
    4068:	92 07       	cpc	r25, r18
    406a:	49 f0       	breq	.+18     	; 0x407e <nrk_get_resource_index+0x2a>
    406c:	8a 53       	subi	r24, 0x3A	; 58
    406e:	91 41       	sbci	r25, 0x11	; 17
    4070:	41 f4       	brne	.+16     	; 0x4082 <nrk_get_resource_index+0x2e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    4072:	83 e0       	ldi	r24, 0x03	; 3
    4074:	08 95       	ret
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	08 95       	ret
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	08 95       	ret
    407e:	82 e0       	ldi	r24, 0x02	; 2
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    4080:	08 95       	ret
	return NRK_ERROR;
    4082:	8f ef       	ldi	r24, 0xFF	; 255
}
    4084:	08 95       	ret

00004086 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    4086:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    408a:	8f 3f       	cpi	r24, 0xFF	; 255
    408c:	11 f4       	brne	.+4      	; 0x4092 <nrk_sem_query+0xc>
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	03 c0       	rjmp	.+6      	; 0x4098 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4092:	84 30       	cpi	r24, 0x04	; 4
    4094:	29 f4       	brne	.+10     	; 0x40a0 <nrk_sem_query+0x1a>
    4096:	82 e0       	ldi	r24, 0x02	; 2
    4098:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_nrk_errno_set>
    409c:	8f ef       	ldi	r24, 0xFF	; 255
    409e:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    40a0:	99 27       	eor	r25, r25
    40a2:	87 fd       	sbrc	r24, 7
    40a4:	90 95       	com	r25
    40a6:	fc 01       	movw	r30, r24
    40a8:	ee 0f       	add	r30, r30
    40aa:	ff 1f       	adc	r31, r31
    40ac:	8e 0f       	add	r24, r30
    40ae:	9f 1f       	adc	r25, r31
    40b0:	fc 01       	movw	r30, r24
    40b2:	ef 5c       	subi	r30, 0xCF	; 207
    40b4:	fe 4e       	sbci	r31, 0xEE	; 238
    40b6:	82 81       	ldd	r24, Z+2	; 0x02
}
    40b8:	08 95       	ret

000040ba <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    40ba:	ef 92       	push	r14
    40bc:	ff 92       	push	r15
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	1f 92       	push	r1
    40c8:	cd b7       	in	r28, 0x3d	; 61
    40ca:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    40cc:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    40d0:	8f 3f       	cpi	r24, 0xFF	; 255
    40d2:	11 f4       	brne	.+4      	; 0x40d8 <nrk_sem_pend+0x1e>
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	03 c0       	rjmp	.+6      	; 0x40de <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    40d8:	84 30       	cpi	r24, 0x04	; 4
    40da:	29 f4       	brne	.+10     	; 0x40e6 <nrk_sem_pend+0x2c>
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_nrk_errno_set>
    40e2:	8f ef       	ldi	r24, 0xFF	; 255
    40e4:	41 c0       	rjmp	.+130    	; 0x4168 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    40e6:	89 83       	std	Y+1, r24	; 0x01
    40e8:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    40ec:	89 81       	ldd	r24, Y+1	; 0x01
    40ee:	e8 2e       	mov	r14, r24
    40f0:	ff 24       	eor	r15, r15
    40f2:	e7 fc       	sbrc	r14, 7
    40f4:	f0 94       	com	r15
    40f6:	87 01       	movw	r16, r14
    40f8:	00 0f       	add	r16, r16
    40fa:	11 1f       	adc	r17, r17
    40fc:	f8 01       	movw	r30, r16
    40fe:	ee 0d       	add	r30, r14
    4100:	ff 1d       	adc	r31, r15
    4102:	ef 5c       	subi	r30, 0xCF	; 207
    4104:	fe 4e       	sbci	r31, 0xEE	; 238
    4106:	92 81       	ldd	r25, Z+2	; 0x02
    4108:	91 11       	cpse	r25, r1
    410a:	16 c0       	rjmp	.+44     	; 0x4138 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    410c:	e0 91 4e 11 	lds	r30, 0x114E
    4110:	f0 91 4f 11 	lds	r31, 0x114F
    4114:	97 81       	ldd	r25, Z+7	; 0x07
    4116:	92 60       	ori	r25, 0x02	; 2
    4118:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    411a:	99 27       	eor	r25, r25
    411c:	87 fd       	sbrc	r24, 7
    411e:	90 95       	com	r25
    4120:	a9 2f       	mov	r26, r25
    4122:	b9 2f       	mov	r27, r25
    4124:	81 8b       	std	Z+17, r24	; 0x11
    4126:	92 8b       	std	Z+18, r25	; 0x12
    4128:	a3 8b       	std	Z+19, r26	; 0x13
    412a:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    412c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0e 94 87 23 	call	0x470e	; 0x470e <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    4138:	0e 0d       	add	r16, r14
    413a:	1f 1d       	adc	r17, r15
    413c:	d8 01       	movw	r26, r16
    413e:	af 5c       	subi	r26, 0xCF	; 207
    4140:	be 4e       	sbci	r27, 0xEE	; 238
    4142:	12 96       	adiw	r26, 0x02	; 2
    4144:	8c 91       	ld	r24, X
    4146:	12 97       	sbiw	r26, 0x02	; 2
    4148:	81 50       	subi	r24, 0x01	; 1
    414a:	12 96       	adiw	r26, 0x02	; 2
    414c:	8c 93       	st	X, r24
    414e:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    4150:	e0 91 4e 11 	lds	r30, 0x114E
    4154:	f0 91 4f 11 	lds	r31, 0x114F
    4158:	11 96       	adiw	r26, 0x01	; 1
    415a:	8c 91       	ld	r24, X
    415c:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    4162:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>

	return NRK_OK;
    4166:	81 e0       	ldi	r24, 0x01	; 1
}
    4168:	0f 90       	pop	r0
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	ef 90       	pop	r14
    4176:	08 95       	ret

00004178 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    4178:	0f 93       	push	r16
    417a:	1f 93       	push	r17
    417c:	cf 93       	push	r28
    417e:	df 93       	push	r29
    4180:	1f 92       	push	r1
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    4186:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    418a:	8f 3f       	cpi	r24, 0xFF	; 255
    418c:	11 f4       	brne	.+4      	; 0x4192 <nrk_sem_post+0x1a>
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	03 c0       	rjmp	.+6      	; 0x4198 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4192:	84 30       	cpi	r24, 0x04	; 4
    4194:	29 f4       	brne	.+10     	; 0x41a0 <nrk_sem_post+0x28>
    4196:	82 e0       	ldi	r24, 0x02	; 2
    4198:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_nrk_errno_set>
    419c:	8f ef       	ldi	r24, 0xFF	; 255
    419e:	44 c0       	rjmp	.+136    	; 0x4228 <__stack+0x29>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    41a0:	48 2f       	mov	r20, r24
    41a2:	55 27       	eor	r21, r21
    41a4:	47 fd       	sbrc	r20, 7
    41a6:	50 95       	com	r21
    41a8:	9a 01       	movw	r18, r20
    41aa:	22 0f       	add	r18, r18
    41ac:	33 1f       	adc	r19, r19
    41ae:	24 0f       	add	r18, r20
    41b0:	35 1f       	adc	r19, r21
    41b2:	89 01       	movw	r16, r18
    41b4:	0f 5c       	subi	r16, 0xCF	; 207
    41b6:	1e 4e       	sbci	r17, 0xEE	; 238
    41b8:	f8 01       	movw	r30, r16
    41ba:	22 81       	ldd	r18, Z+2	; 0x02
    41bc:	90 81       	ld	r25, Z
    41be:	29 17       	cp	r18, r25
    41c0:	94 f5       	brge	.+100    	; 0x4226 <__stack+0x27>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    41c2:	89 83       	std	Y+1, r24	; 0x01
    41c4:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>

		nrk_sem_list[id].value++;
    41c8:	f8 01       	movw	r30, r16
    41ca:	92 81       	ldd	r25, Z+2	; 0x02
    41cc:	9f 5f       	subi	r25, 0xFF	; 255
    41ce:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    41d0:	e0 91 4e 11 	lds	r30, 0x114E
    41d4:	f0 91 4f 11 	lds	r31, 0x114F
    41d8:	14 82       	std	Z+4, r1	; 0x04
    41da:	e4 e3       	ldi	r30, 0x34	; 52
    41dc:	f0 e1       	ldi	r31, 0x10	; 16

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	99 27       	eor	r25, r25
    41e2:	87 fd       	sbrc	r24, 7
    41e4:	90 95       	com	r25
    41e6:	a9 2f       	mov	r26, r25
    41e8:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    41ea:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    41ec:	30 81       	ld	r19, Z
    41ee:	32 30       	cpi	r19, 0x02	; 2
    41f0:	99 f4       	brne	.+38     	; 0x4218 <__stack+0x19>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    41f2:	42 85       	ldd	r20, Z+10	; 0x0a
    41f4:	53 85       	ldd	r21, Z+11	; 0x0b
    41f6:	64 85       	ldd	r22, Z+12	; 0x0c
    41f8:	75 85       	ldd	r23, Z+13	; 0x0d
    41fa:	48 17       	cp	r20, r24
    41fc:	59 07       	cpc	r21, r25
    41fe:	6a 07       	cpc	r22, r26
    4200:	7b 07       	cpc	r23, r27
    4202:	51 f4       	brne	.+20     	; 0x4218 <__stack+0x19>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    4204:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    4206:	16 86       	std	Z+14, r1	; 0x0e
    4208:	17 86       	std	Z+15, r1	; 0x0f
    420a:	10 8a       	std	Z+16, r1	; 0x10
    420c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    420e:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    4210:	12 86       	std	Z+10, r1	; 0x0a
    4212:	13 86       	std	Z+11, r1	; 0x0b
    4214:	14 86       	std	Z+12, r1	; 0x0c
    4216:	15 86       	std	Z+13, r1	; 0x0d
    4218:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    421a:	31 e1       	ldi	r19, 0x11	; 17
    421c:	e6 33       	cpi	r30, 0x36	; 54
    421e:	f3 07       	cpc	r31, r19
    4220:	29 f7       	brne	.-54     	; 0x41ec <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    4222:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
	}
		
return NRK_OK;
    4226:	81 e0       	ldi	r24, 0x01	; 1
}
    4228:	0f 90       	pop	r0
    422a:	df 91       	pop	r29
    422c:	cf 91       	pop	r28
    422e:	1f 91       	pop	r17
    4230:	0f 91       	pop	r16
    4232:	08 95       	ret

00004234 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    4234:	0e 94 2a 20 	call	0x4054	; 0x4054 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    4238:	8f 3f       	cpi	r24, 0xFF	; 255
    423a:	11 f4       	brne	.+4      	; 0x4240 <nrk_sem_delete+0xc>
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	03 c0       	rjmp	.+6      	; 0x4246 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    4240:	84 30       	cpi	r24, 0x04	; 4
    4242:	29 f4       	brne	.+10     	; 0x424e <nrk_sem_delete+0x1a>
    4244:	82 e0       	ldi	r24, 0x02	; 2
    4246:	0e 94 ba 1b 	call	0x3774	; 0x3774 <_nrk_errno_set>
    424a:	8f ef       	ldi	r24, 0xFF	; 255
    424c:	08 95       	ret

	nrk_sem_list[id].count=-1;
    424e:	99 27       	eor	r25, r25
    4250:	87 fd       	sbrc	r24, 7
    4252:	90 95       	com	r25
    4254:	fc 01       	movw	r30, r24
    4256:	ee 0f       	add	r30, r30
    4258:	ff 1f       	adc	r31, r31
    425a:	8e 0f       	add	r24, r30
    425c:	9f 1f       	adc	r25, r31
    425e:	fc 01       	movw	r30, r24
    4260:	ef 5c       	subi	r30, 0xCF	; 207
    4262:	fe 4e       	sbci	r31, 0xEE	; 238
    4264:	8f ef       	ldi	r24, 0xFF	; 255
    4266:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    4268:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    426a:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    426c:	80 91 4d 11 	lds	r24, 0x114D
    4270:	81 50       	subi	r24, 0x01	; 1
    4272:	80 93 4d 11 	sts	0x114D, r24
return NRK_OK;
    4276:	81 e0       	ldi	r24, 0x01	; 1
}
    4278:	08 95       	ret

0000427a <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    427a:	e0 91 43 11 	lds	r30, 0x1143
    427e:	f0 91 44 11 	lds	r31, 0x1144
}
    4282:	80 81       	ld	r24, Z
    4284:	08 95       	ret

00004286 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    4286:	e0 91 43 11 	lds	r30, 0x1143
    428a:	f0 91 44 11 	lds	r31, 0x1144
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    428e:	30 97       	sbiw	r30, 0x00	; 0
    4290:	21 f0       	breq	.+8      	; 0x429a <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    4292:	03 80       	ldd	r0, Z+3	; 0x03
    4294:	f4 81       	ldd	r31, Z+4	; 0x04
    4296:	e0 2d       	mov	r30, r0
    4298:	fa cf       	rjmp	.-12     	; 0x428e <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    429a:	08 95       	ret

0000429c <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    429c:	af 92       	push	r10
    429e:	bf 92       	push	r11
    42a0:	cf 92       	push	r12
    42a2:	df 92       	push	r13
    42a4:	ef 92       	push	r14
    42a6:	ff 92       	push	r15
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    42b0:	e0 91 2b 10 	lds	r30, 0x102B
    42b4:	f0 91 2c 10 	lds	r31, 0x102C
    42b8:	30 97       	sbiw	r30, 0x00	; 0
    42ba:	09 f4       	brne	.+2      	; 0x42be <nrk_add_to_readyQ+0x22>
    42bc:	94 c0       	rjmp	.+296    	; 0x43e6 <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    42be:	00 91 43 11 	lds	r16, 0x1143
    42c2:	10 91 44 11 	lds	r17, 0x1144
    CurNode = _free_node;

    if (_head_node != NULL)
    42c6:	01 15       	cp	r16, r1
    42c8:	11 05       	cpc	r17, r1
    42ca:	09 f4       	brne	.+2      	; 0x42ce <nrk_add_to_readyQ+0x32>
    42cc:	4c c0       	rjmp	.+152    	; 0x4366 <nrk_add_to_readyQ+0xca>
    42ce:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    42d0:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    42d2:	58 2f       	mov	r21, r24
    42d4:	54 03       	mulsu	r21, r20
    42d6:	90 01       	movw	r18, r0
    42d8:	11 24       	eor	r1, r1
    42da:	23 5d       	subi	r18, 0xD3	; 211
    42dc:	3f 4e       	sbci	r19, 0xEF	; 239
    42de:	79 01       	movw	r14, r18
    42e0:	9a e0       	ldi	r25, 0x0A	; 10
    42e2:	e9 0e       	add	r14, r25
    42e4:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    42e6:	69 01       	movw	r12, r18
    42e8:	c4 e0       	ldi	r28, 0x04	; 4
    42ea:	cc 0e       	add	r12, r28
    42ec:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    42ee:	59 01       	movw	r10, r18
    42f0:	db e0       	ldi	r29, 0x0B	; 11
    42f2:	ad 0e       	add	r10, r29
    42f4:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    42f6:	2c 91       	ld	r18, X
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	42 9f       	mul	r20, r18
    42fc:	b0 01       	movw	r22, r0
    42fe:	43 9f       	mul	r20, r19
    4300:	70 0d       	add	r23, r0
    4302:	11 24       	eor	r1, r1
    4304:	63 5d       	subi	r22, 0xD3	; 211
    4306:	7f 4e       	sbci	r23, 0xEF	; 239
    4308:	eb 01       	movw	r28, r22
    430a:	9c 81       	ldd	r25, Y+4	; 0x04
    430c:	99 23       	and	r25, r25
    430e:	29 f0       	breq	.+10     	; 0x431a <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    4310:	5b 85       	ldd	r21, Y+11	; 0x0b
    4312:	e7 01       	movw	r28, r14
    4314:	98 81       	ld	r25, Y
    4316:	59 17       	cp	r21, r25
    4318:	40 f1       	brcs	.+80     	; 0x436a <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    431a:	e6 01       	movw	r28, r12
    431c:	98 81       	ld	r25, Y
    431e:	99 23       	and	r25, r25
    4320:	69 f0       	breq	.+26     	; 0x433c <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    4322:	42 9f       	mul	r20, r18
    4324:	b0 01       	movw	r22, r0
    4326:	43 9f       	mul	r20, r19
    4328:	70 0d       	add	r23, r0
    432a:	11 24       	eor	r1, r1
    432c:	63 5d       	subi	r22, 0xD3	; 211
    432e:	7f 4e       	sbci	r23, 0xEF	; 239
    4330:	eb 01       	movw	r28, r22
    4332:	5a 85       	ldd	r21, Y+10	; 0x0a
    4334:	e5 01       	movw	r28, r10
    4336:	98 81       	ld	r25, Y
    4338:	59 17       	cp	r21, r25
    433a:	b8 f0       	brcs	.+46     	; 0x436a <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    433c:	42 9f       	mul	r20, r18
    433e:	b0 01       	movw	r22, r0
    4340:	43 9f       	mul	r20, r19
    4342:	70 0d       	add	r23, r0
    4344:	11 24       	eor	r1, r1
    4346:	9b 01       	movw	r18, r22
    4348:	23 5d       	subi	r18, 0xD3	; 211
    434a:	3f 4e       	sbci	r19, 0xEF	; 239
    434c:	e9 01       	movw	r28, r18
    434e:	2a 85       	ldd	r18, Y+10	; 0x0a
    4350:	e7 01       	movw	r28, r14
    4352:	98 81       	ld	r25, Y
    4354:	29 17       	cp	r18, r25
    4356:	48 f0       	brcs	.+18     	; 0x436a <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    4358:	13 96       	adiw	r26, 0x03	; 3
    435a:	0d 90       	ld	r0, X+
    435c:	bc 91       	ld	r27, X
    435e:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    4360:	10 97       	sbiw	r26, 0x00	; 0
    4362:	49 f6       	brne	.-110    	; 0x42f6 <nrk_add_to_readyQ+0x5a>
    4364:	02 c0       	rjmp	.+4      	; 0x436a <nrk_add_to_readyQ+0xce>
    4366:	a0 e0       	ldi	r26, 0x00	; 0
    4368:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    436a:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    436c:	c3 81       	ldd	r28, Z+3	; 0x03
    436e:	d4 81       	ldd	r29, Z+4	; 0x04
    4370:	d0 93 2c 10 	sts	0x102C, r29
    4374:	c0 93 2b 10 	sts	0x102B, r28

    if (NextNode == _head_node)
    4378:	a0 17       	cp	r26, r16
    437a:	b1 07       	cpc	r27, r17
    437c:	b1 f4       	brne	.+44     	; 0x43aa <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    437e:	10 97       	sbiw	r26, 0x00	; 0
    4380:	49 f0       	breq	.+18     	; 0x4394 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    4382:	b4 83       	std	Z+4, r27	; 0x04
    4384:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    4386:	12 82       	std	Z+2, r1	; 0x02
    4388:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    438a:	12 96       	adiw	r26, 0x02	; 2
    438c:	fc 93       	st	X, r31
    438e:	ee 93       	st	-X, r30
    4390:	11 97       	sbiw	r26, 0x01	; 1
    4392:	06 c0       	rjmp	.+12     	; 0x43a0 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    4394:	14 82       	std	Z+4, r1	; 0x04
    4396:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    4398:	12 82       	std	Z+2, r1	; 0x02
    439a:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    439c:	fa 83       	std	Y+2, r31	; 0x02
    439e:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    43a0:	f0 93 44 11 	sts	0x1144, r31
    43a4:	e0 93 43 11 	sts	0x1143, r30
    43a8:	1e c0       	rjmp	.+60     	; 0x43e6 <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    43aa:	ac 17       	cp	r26, r28
    43ac:	bd 07       	cpc	r27, r29
    43ae:	79 f0       	breq	.+30     	; 0x43ce <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    43b0:	11 96       	adiw	r26, 0x01	; 1
    43b2:	8d 91       	ld	r24, X+
    43b4:	9c 91       	ld	r25, X
    43b6:	12 97       	sbiw	r26, 0x02	; 2
    43b8:	92 83       	std	Z+2, r25	; 0x02
    43ba:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    43bc:	b4 83       	std	Z+4, r27	; 0x04
    43be:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    43c0:	11 96       	adiw	r26, 0x01	; 1
    43c2:	cd 91       	ld	r28, X+
    43c4:	dc 91       	ld	r29, X
    43c6:	12 97       	sbiw	r26, 0x02	; 2
    43c8:	fc 83       	std	Y+4, r31	; 0x04
    43ca:	eb 83       	std	Y+3, r30	; 0x03
    43cc:	08 c0       	rjmp	.+16     	; 0x43de <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    43ce:	14 82       	std	Z+4, r1	; 0x04
    43d0:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    43d2:	11 96       	adiw	r26, 0x01	; 1
    43d4:	8d 91       	ld	r24, X+
    43d6:	9c 91       	ld	r25, X
    43d8:	12 97       	sbiw	r26, 0x02	; 2
    43da:	92 83       	std	Z+2, r25	; 0x02
    43dc:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    43de:	12 96       	adiw	r26, 0x02	; 2
    43e0:	fc 93       	st	X, r31
    43e2:	ee 93       	st	-X, r30
    43e4:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	ff 90       	pop	r15
    43f0:	ef 90       	pop	r14
    43f2:	df 90       	pop	r13
    43f4:	cf 90       	pop	r12
    43f6:	bf 90       	pop	r11
    43f8:	af 90       	pop	r10
    43fa:	08 95       	ret

000043fc <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    43fc:	cf 93       	push	r28
    43fe:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    4400:	e0 91 43 11 	lds	r30, 0x1143
    4404:	f0 91 44 11 	lds	r31, 0x1144
    4408:	30 97       	sbiw	r30, 0x00	; 0
    440a:	09 f4       	brne	.+2      	; 0x440e <nrk_rem_from_readyQ+0x12>
    440c:	44 c0       	rjmp	.+136    	; 0x4496 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    440e:	99 27       	eor	r25, r25
    4410:	87 fd       	sbrc	r24, 7
    4412:	90 95       	com	r25
    4414:	20 81       	ld	r18, Z
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	28 17       	cp	r18, r24
    441a:	39 07       	cpc	r19, r25
    441c:	81 f4       	brne	.+32     	; 0x443e <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    441e:	a3 81       	ldd	r26, Z+3	; 0x03
    4420:	b4 81       	ldd	r27, Z+4	; 0x04
    4422:	b0 93 44 11 	sts	0x1144, r27
    4426:	a0 93 43 11 	sts	0x1143, r26
        _head_node->Prev = NULL;
    442a:	12 96       	adiw	r26, 0x02	; 2
    442c:	1c 92       	st	X, r1
    442e:	1e 92       	st	-X, r1
    4430:	11 97       	sbiw	r26, 0x01	; 1
    4432:	18 c0       	rjmp	.+48     	; 0x4464 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    4434:	03 80       	ldd	r0, Z+3	; 0x03
    4436:	f4 81       	ldd	r31, Z+4	; 0x04
    4438:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    443a:	30 97       	sbiw	r30, 0x00	; 0
    443c:	61 f1       	breq	.+88     	; 0x4496 <nrk_rem_from_readyQ+0x9a>
    443e:	20 81       	ld	r18, Z
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	28 17       	cp	r18, r24
    4444:	39 07       	cpc	r19, r25
    4446:	b1 f7       	brne	.-20     	; 0x4434 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    4448:	c1 81       	ldd	r28, Z+1	; 0x01
    444a:	d2 81       	ldd	r29, Z+2	; 0x02
    444c:	83 81       	ldd	r24, Z+3	; 0x03
    444e:	94 81       	ldd	r25, Z+4	; 0x04
    4450:	9c 83       	std	Y+4, r25	; 0x04
    4452:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    4454:	a3 81       	ldd	r26, Z+3	; 0x03
    4456:	b4 81       	ldd	r27, Z+4	; 0x04
    4458:	10 97       	sbiw	r26, 0x00	; 0
    445a:	21 f0       	breq	.+8      	; 0x4464 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    445c:	12 96       	adiw	r26, 0x02	; 2
    445e:	dc 93       	st	X, r29
    4460:	ce 93       	st	-X, r28
    4462:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    4464:	a0 91 2b 10 	lds	r26, 0x102B
    4468:	b0 91 2c 10 	lds	r27, 0x102C
    446c:	10 97       	sbiw	r26, 0x00	; 0
    446e:	39 f4       	brne	.+14     	; 0x447e <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    4470:	f0 93 2c 10 	sts	0x102C, r31
    4474:	e0 93 2b 10 	sts	0x102B, r30
        _free_node->Next = NULL;
    4478:	14 82       	std	Z+4, r1	; 0x04
    447a:	13 82       	std	Z+3, r1	; 0x03
    447c:	0a c0       	rjmp	.+20     	; 0x4492 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    447e:	b4 83       	std	Z+4, r27	; 0x04
    4480:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    4482:	12 96       	adiw	r26, 0x02	; 2
    4484:	fc 93       	st	X, r31
    4486:	ee 93       	st	-X, r30
    4488:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    448a:	f0 93 2c 10 	sts	0x102C, r31
    448e:	e0 93 2b 10 	sts	0x102B, r30
    }
    _free_node->Prev = NULL;
    4492:	12 82       	std	Z+2, r1	; 0x02
    4494:	11 82       	std	Z+1, r1	; 0x01
}
    4496:	df 91       	pop	r29
    4498:	cf 91       	pop	r28
    449a:	08 95       	ret

0000449c <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    449c:	ef 92       	push	r14
    449e:	ff 92       	push	r15
    44a0:	0f 93       	push	r16
    44a2:	1f 93       	push	r17
    44a4:	cf 93       	push	r28
    44a6:	df 93       	push	r29
    44a8:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    44aa:	4b 81       	ldd	r20, Y+3	; 0x03
    44ac:	5c 81       	ldd	r21, Y+4	; 0x04
    44ae:	69 81       	ldd	r22, Y+1	; 0x01
    44b0:	7a 81       	ldd	r23, Y+2	; 0x02
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	9e 81       	ldd	r25, Y+6	; 0x06
    44b6:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    44ba:	2f 81       	ldd	r18, Y+7	; 0x07
    44bc:	22 23       	and	r18, r18
    44be:	71 f0       	breq	.+28     	; 0x44dc <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    44c0:	4b 81       	ldd	r20, Y+3	; 0x03
    44c2:	5c 81       	ldd	r21, Y+4	; 0x04
    44c4:	e1 2c       	mov	r14, r1
    44c6:	f1 2c       	mov	r15, r1
    44c8:	00 e0       	ldi	r16, 0x00	; 0
    44ca:	10 e0       	ldi	r17, 0x00	; 0
    44cc:	20 e0       	ldi	r18, 0x00	; 0
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	bc 01       	movw	r22, r24
    44d2:	ce 01       	movw	r24, r28
    44d4:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    44d8:	1f 82       	std	Y+7, r1	; 0x07
    44da:	0c c0       	rjmp	.+24     	; 0x44f4 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    44dc:	e8 81       	ld	r30, Y
    44de:	2b e2       	ldi	r18, 0x2B	; 43
    44e0:	e2 02       	muls	r30, r18
    44e2:	f0 01       	movw	r30, r0
    44e4:	11 24       	eor	r1, r1
    44e6:	e3 5d       	subi	r30, 0xD3	; 211
    44e8:	ff 4e       	sbci	r31, 0xEF	; 239
    44ea:	21 85       	ldd	r18, Z+9	; 0x09
    44ec:	23 30       	cpi	r18, 0x03	; 3
    44ee:	b9 f4       	brne	.+46     	; 0x451e <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    44f0:	91 83       	std	Z+1, r25	; 0x01
    44f2:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    44f4:	e8 81       	ld	r30, Y
    44f6:	8b e2       	ldi	r24, 0x2B	; 43
    44f8:	e8 02       	muls	r30, r24
    44fa:	f0 01       	movw	r30, r0
    44fc:	11 24       	eor	r1, r1
    44fe:	e3 5d       	subi	r30, 0xD3	; 211
    4500:	ff 4e       	sbci	r31, 0xEF	; 239
    4502:	85 89       	ldd	r24, Z+21	; 0x15
    4504:	96 89       	ldd	r25, Z+22	; 0x16
    4506:	a7 89       	ldd	r26, Z+23	; 0x17
    4508:	b0 8d       	ldd	r27, Z+24	; 0x18
    450a:	89 2b       	or	r24, r25
    450c:	8a 2b       	or	r24, r26
    450e:	8b 2b       	or	r24, r27
    4510:	41 f4       	brne	.+16     	; 0x4522 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    4512:	82 e0       	ldi	r24, 0x02	; 2
    4514:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    4516:	88 81       	ld	r24, Y
    4518:	0e 94 4e 21 	call	0x429c	; 0x429c <nrk_add_to_readyQ>
    451c:	02 c0       	rjmp	.+4      	; 0x4522 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    451e:	8f ef       	ldi	r24, 0xFF	; 255
    4520:	01 c0       	rjmp	.+2      	; 0x4524 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    4522:	81 e0       	ldi	r24, 0x01	; 1
}
    4524:	df 91       	pop	r29
    4526:	cf 91       	pop	r28
    4528:	1f 91       	pop	r17
    452a:	0f 91       	pop	r16
    452c:	ff 90       	pop	r15
    452e:	ef 90       	pop	r14
    4530:	08 95       	ret

00004532 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    4532:	1f 93       	push	r17
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    453c:	28 97       	sbiw	r28, 0x08	; 8
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	29 83       	std	Y+1, r18	; 0x01
    454a:	3a 83       	std	Y+2, r19	; 0x02
    454c:	4b 83       	std	Y+3, r20	; 0x03
    454e:	5c 83       	std	Y+4, r21	; 0x04
    4550:	6d 83       	std	Y+5, r22	; 0x05
    4552:	7e 83       	std	Y+6, r23	; 0x06
    4554:	8f 83       	std	Y+7, r24	; 0x07
    4556:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    4558:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    455c:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    4560:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    4562:	ce 01       	movw	r24, r28
    4564:	01 96       	adiw	r24, 0x01	; 1
    4566:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    456a:	63 30       	cpi	r22, 0x03	; 3
    456c:	71 05       	cpc	r23, r1
    456e:	98 f0       	brcs	.+38     	; 0x4596 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4570:	e0 91 4e 11 	lds	r30, 0x114E
    4574:	f0 91 4f 11 	lds	r31, 0x114F
    4578:	21 2f       	mov	r18, r17
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	62 0f       	add	r22, r18
    457e:	73 1f       	adc	r23, r19
    4580:	cb 01       	movw	r24, r22
    4582:	a0 e0       	ldi	r26, 0x00	; 0
    4584:	b0 e0       	ldi	r27, 0x00	; 0
    4586:	85 8b       	std	Z+21, r24	; 0x15
    4588:	96 8b       	std	Z+22, r25	; 0x16
    458a:	a7 8b       	std	Z+23, r26	; 0x17
    458c:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    458e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>

    return NRK_OK;
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	01 c0       	rjmp	.+2      	; 0x4598 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    4596:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    4598:	28 96       	adiw	r28, 0x08	; 8
    459a:	0f b6       	in	r0, 0x3f	; 63
    459c:	f8 94       	cli
    459e:	de bf       	out	0x3e, r29	; 62
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	cd bf       	out	0x3d, r28	; 61
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	1f 91       	pop	r17
    45aa:	08 95       	ret

000045ac <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    45ac:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    45b0:	e0 91 4e 11 	lds	r30, 0x114E
    45b4:	f0 91 4f 11 	lds	r31, 0x114F
    45b8:	85 81       	ldd	r24, Z+5	; 0x05
    45ba:	81 11       	cpse	r24, r1
    45bc:	f7 cf       	rjmp	.-18     	; 0x45ac <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    45be:	08 95       	ret

000045c0 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    45c0:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    45c2:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    45c6:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    45ca:	e0 91 4e 11 	lds	r30, 0x114E
    45ce:	f0 91 4f 11 	lds	r31, 0x114F
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	92 a7       	std	Z+42, r25	; 0x2a
    45d8:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    45da:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    45dc:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    45e0:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    45e2:	88 3f       	cpi	r24, 0xF8	; 248
    45e4:	80 f4       	brcc	.+32     	; 0x4606 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    45e6:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_nrk_get_next_wakeup>
    45ea:	2c 2f       	mov	r18, r28
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	2f 5f       	subi	r18, 0xFF	; 255
    45f0:	3f 4f       	sbci	r19, 0xFF	; 255
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	28 17       	cp	r18, r24
    45f6:	39 07       	cpc	r19, r25
    45f8:	34 f4       	brge	.+12     	; 0x4606 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    45fa:	82 e0       	ldi	r24, 0x02	; 2
    45fc:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    45fe:	80 93 d7 0f 	sts	0x0FD7, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4602:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4606:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    460a:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	cf 91       	pop	r28
    4612:	08 95       	ret

00004614 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    4614:	e0 91 4e 11 	lds	r30, 0x114E
    4618:	f0 91 4f 11 	lds	r31, 0x114F
    461c:	80 85       	ldd	r24, Z+8	; 0x08
    461e:	0e 94 fe 21 	call	0x43fc	; 0x43fc <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    4622:	e0 91 4e 11 	lds	r30, 0x114E
    4626:	f0 91 4f 11 	lds	r31, 0x114F
    462a:	84 e0       	ldi	r24, 0x04	; 4
    462c:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    462e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <nrk_wait_until_next_period>
    return NRK_OK;
}
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	08 95       	ret

00004636 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    463c:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <nrk_stack_check>

    if (p == 0)
    4640:	20 97       	sbiw	r28, 0x00	; 0
    4642:	11 f4       	brne	.+4      	; 0x4648 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    4644:	c1 e0       	ldi	r28, 0x01	; 1
    4646:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    4648:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    464c:	e0 91 4e 11 	lds	r30, 0x114E
    4650:	f0 91 4f 11 	lds	r31, 0x114F
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    4658:	d2 a7       	std	Z+42, r29	; 0x2a
    465a:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    465c:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    4660:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    4662:	88 3f       	cpi	r24, 0xF8	; 248
    4664:	80 f4       	brcc	.+32     	; 0x4686 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4666:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_nrk_get_next_wakeup>
    466a:	2c 2f       	mov	r18, r28
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	2f 5f       	subi	r18, 0xFF	; 255
    4670:	3f 4f       	sbci	r19, 0xFF	; 255
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	28 17       	cp	r18, r24
    4676:	39 07       	cpc	r19, r25
    4678:	34 f4       	brge	.+12     	; 0x4686 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    467a:	82 e0       	ldi	r24, 0x02	; 2
    467c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    467e:	80 93 d7 0f 	sts	0x0FD7, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4682:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    4686:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    468a:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    468e:	81 e0       	ldi	r24, 0x01	; 1
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	08 95       	ret

00004696 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    4696:	ef 92       	push	r14
    4698:	ff 92       	push	r15
    469a:	0f 93       	push	r16
    469c:	1f 93       	push	r17
    469e:	cf 93       	push	r28
    46a0:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    46a2:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    46a6:	e0 91 4e 11 	lds	r30, 0x114E
    46aa:	f0 91 4f 11 	lds	r31, 0x114F
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    46b2:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    46b6:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    46b8:	e0 91 4e 11 	lds	r30, 0x114E
    46bc:	f0 91 4f 11 	lds	r31, 0x114F
    46c0:	e8 2e       	mov	r14, r24
    46c2:	f1 2c       	mov	r15, r1
    46c4:	c7 01       	movw	r24, r14
    46c6:	80 0f       	add	r24, r16
    46c8:	91 1f       	adc	r25, r17
    46ca:	a0 e0       	ldi	r26, 0x00	; 0
    46cc:	b0 e0       	ldi	r27, 0x00	; 0
    46ce:	85 8b       	std	Z+21, r24	; 0x15
    46d0:	96 8b       	std	Z+22, r25	; 0x16
    46d2:	a7 8b       	std	Z+23, r26	; 0x17
    46d4:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    46d6:	c8 3f       	cpi	r28, 0xF8	; 248
    46d8:	78 f4       	brcc	.+30     	; 0x46f8 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    46da:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_nrk_get_next_wakeup>
    46de:	9f ef       	ldi	r25, 0xFF	; 255
    46e0:	e9 1a       	sub	r14, r25
    46e2:	f9 0a       	sbc	r15, r25
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	e8 16       	cp	r14, r24
    46e8:	f9 06       	cpc	r15, r25
    46ea:	34 f4       	brge	.+12     	; 0x46f8 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    46ec:	82 e0       	ldi	r24, 0x02	; 2
    46ee:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    46f0:	80 93 d7 0f 	sts	0x0FD7, r24
            _nrk_set_next_wakeup (timer);
    46f4:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    46f8:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    46fc:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4700:	81 e0       	ldi	r24, 0x01	; 1
    4702:	cf 91       	pop	r28
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	ff 90       	pop	r15
    470a:	ef 90       	pop	r14
    470c:	08 95       	ret

0000470e <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    470e:	cf 93       	push	r28
    4710:	df 93       	push	r29
    4712:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    4714:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4718:	e0 91 4e 11 	lds	r30, 0x114E
    471c:	f0 91 4f 11 	lds	r31, 0x114F
    4720:	21 e0       	ldi	r18, 0x01	; 1
    4722:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    4724:	ce 01       	movw	r24, r28
    4726:	a0 e0       	ldi	r26, 0x00	; 0
    4728:	b0 e0       	ldi	r27, 0x00	; 0
    472a:	85 8b       	std	Z+21, r24	; 0x15
    472c:	96 8b       	std	Z+22, r25	; 0x16
    472e:	a7 8b       	std	Z+23, r26	; 0x17
    4730:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    4732:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    4736:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4738:	88 3f       	cpi	r24, 0xF8	; 248
    473a:	80 f4       	brcc	.+32     	; 0x475c <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    473c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_nrk_get_next_wakeup>
    4740:	2c 2f       	mov	r18, r28
    4742:	30 e0       	ldi	r19, 0x00	; 0
    4744:	2f 5f       	subi	r18, 0xFF	; 255
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	90 e0       	ldi	r25, 0x00	; 0
    474a:	28 17       	cp	r18, r24
    474c:	39 07       	cpc	r19, r25
    474e:	34 f4       	brge	.+12     	; 0x475c <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    4750:	82 e0       	ldi	r24, 0x02	; 2
    4752:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4754:	80 93 d7 0f 	sts	0x0FD7, r24
            _nrk_set_next_wakeup (timer);
    4758:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    475c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4760:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	df 91       	pop	r29
    4768:	cf 91       	pop	r28
    476a:	08 95       	ret

0000476c <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    476c:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    476e:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4772:	e0 91 4e 11 	lds	r30, 0x114E
    4776:	f0 91 4f 11 	lds	r31, 0x114F
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    477e:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    4780:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    4784:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    4786:	88 3f       	cpi	r24, 0xF8	; 248
    4788:	80 f4       	brcc	.+32     	; 0x47aa <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    478a:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_nrk_get_next_wakeup>
    478e:	2c 2f       	mov	r18, r28
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	2f 5f       	subi	r18, 0xFF	; 255
    4794:	3f 4f       	sbci	r19, 0xFF	; 255
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	28 17       	cp	r18, r24
    479a:	39 07       	cpc	r19, r25
    479c:	34 f4       	brge	.+12     	; 0x47aa <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    479e:	82 e0       	ldi	r24, 0x02	; 2
    47a0:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    47a2:	80 93 d7 0f 	sts	0x0FD7, r24
            _nrk_set_next_wakeup (timer);
    47a6:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    47aa:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    47ae:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	cf 91       	pop	r28
    47b6:	08 95       	ret

000047b8 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    47b8:	1f 93       	push	r17
    47ba:	cf 93       	push	r28
    47bc:	df 93       	push	r29
    47be:	cd b7       	in	r28, 0x3d	; 61
    47c0:	de b7       	in	r29, 0x3e	; 62
    47c2:	28 97       	sbiw	r28, 0x08	; 8
    47c4:	0f b6       	in	r0, 0x3f	; 63
    47c6:	f8 94       	cli
    47c8:	de bf       	out	0x3e, r29	; 62
    47ca:	0f be       	out	0x3f, r0	; 63
    47cc:	cd bf       	out	0x3d, r28	; 61
    47ce:	29 83       	std	Y+1, r18	; 0x01
    47d0:	3a 83       	std	Y+2, r19	; 0x02
    47d2:	4b 83       	std	Y+3, r20	; 0x03
    47d4:	5c 83       	std	Y+4, r21	; 0x04
    47d6:	6d 83       	std	Y+5, r22	; 0x05
    47d8:	7e 83       	std	Y+6, r23	; 0x06
    47da:	8f 83       	std	Y+7, r24	; 0x07
    47dc:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    47de:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <nrk_stack_check>

    nrk_int_disable ();
    47e2:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    47e6:	e0 91 4e 11 	lds	r30, 0x114E
    47ea:	f0 91 4f 11 	lds	r31, 0x114F
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	92 a7       	std	Z+42, r25	; 0x2a
    47f8:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    47fa:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    47fe:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    4800:	ce 01       	movw	r24, r28
    4802:	01 96       	adiw	r24, 0x01	; 1
    4804:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4808:	e0 91 4e 11 	lds	r30, 0x114E
    480c:	f0 91 4f 11 	lds	r31, 0x114F
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	81 0f       	add	r24, r17
    4816:	91 1d       	adc	r25, r1
    4818:	a1 1d       	adc	r26, r1
    481a:	b1 1d       	adc	r27, r1
    481c:	85 8b       	std	Z+21, r24	; 0x15
    481e:	96 8b       	std	Z+22, r25	; 0x16
    4820:	a7 8b       	std	Z+23, r26	; 0x17
    4822:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4824:	18 3f       	cpi	r17, 0xF8	; 248
    4826:	80 f4       	brcc	.+32     	; 0x4848 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4828:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_nrk_get_next_wakeup>
    482c:	21 2f       	mov	r18, r17
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	2f 5f       	subi	r18, 0xFF	; 255
    4832:	3f 4f       	sbci	r19, 0xFF	; 255
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	28 17       	cp	r18, r24
    4838:	39 07       	cpc	r19, r25
    483a:	34 f4       	brge	.+12     	; 0x4848 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    483c:	82 e0       	ldi	r24, 0x02	; 2
    483e:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    4840:	80 93 d7 0f 	sts	0x0FD7, r24
            _nrk_set_next_wakeup (timer);
    4844:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    4848:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    484c:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4850:	81 e0       	ldi	r24, 0x01	; 1
    4852:	28 96       	adiw	r28, 0x08	; 8
    4854:	0f b6       	in	r0, 0x3f	; 63
    4856:	f8 94       	cli
    4858:	de bf       	out	0x3e, r29	; 62
    485a:	0f be       	out	0x3f, r0	; 63
    485c:	cd bf       	out	0x3d, r28	; 61
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	1f 91       	pop	r17
    4864:	08 95       	ret

00004866 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    4866:	8f 92       	push	r8
    4868:	9f 92       	push	r9
    486a:	af 92       	push	r10
    486c:	bf 92       	push	r11
    486e:	cf 92       	push	r12
    4870:	df 92       	push	r13
    4872:	ef 92       	push	r14
    4874:	ff 92       	push	r15
    4876:	0f 93       	push	r16
    4878:	1f 93       	push	r17
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
    4882:	60 97       	sbiw	r28, 0x10	; 16
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	29 87       	std	Y+9, r18	; 0x09
    4890:	3a 87       	std	Y+10, r19	; 0x0a
    4892:	4b 87       	std	Y+11, r20	; 0x0b
    4894:	5c 87       	std	Y+12, r21	; 0x0c
    4896:	6d 87       	std	Y+13, r22	; 0x0d
    4898:	7e 87       	std	Y+14, r23	; 0x0e
    489a:	8f 87       	std	Y+15, r24	; 0x0f
    489c:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    489e:	ce 01       	movw	r24, r28
    48a0:	01 96       	adiw	r24, 0x01	; 1
    48a2:	0e 94 8f 24 	call	0x491e	; 0x491e <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    48a6:	89 80       	ldd	r8, Y+1	; 0x01
    48a8:	9a 80       	ldd	r9, Y+2	; 0x02
    48aa:	ab 80       	ldd	r10, Y+3	; 0x03
    48ac:	bc 80       	ldd	r11, Y+4	; 0x04
    48ae:	cd 80       	ldd	r12, Y+5	; 0x05
    48b0:	de 80       	ldd	r13, Y+6	; 0x06
    48b2:	ef 80       	ldd	r14, Y+7	; 0x07
    48b4:	f8 84       	ldd	r15, Y+8	; 0x08
    48b6:	09 85       	ldd	r16, Y+9	; 0x09
    48b8:	1a 85       	ldd	r17, Y+10	; 0x0a
    48ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    48bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    48be:	4d 85       	ldd	r20, Y+13	; 0x0d
    48c0:	5e 85       	ldd	r21, Y+14	; 0x0e
    48c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    48c4:	78 89       	ldd	r23, Y+16	; 0x10
    48c6:	ce 01       	movw	r24, r28
    48c8:	09 96       	adiw	r24, 0x09	; 9
    48ca:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    48ce:	8f 3f       	cpi	r24, 0xFF	; 255
    48d0:	61 f0       	breq	.+24     	; 0x48ea <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    48d2:	29 85       	ldd	r18, Y+9	; 0x09
    48d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    48d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    48d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    48da:	6d 85       	ldd	r22, Y+13	; 0x0d
    48dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    48de:	8f 85       	ldd	r24, Y+15	; 0x0f
    48e0:	98 89       	ldd	r25, Y+16	; 0x10
    48e2:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <nrk_wait>

    return NRK_OK;
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	01 c0       	rjmp	.+2      	; 0x48ec <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    48ea:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    48ec:	60 96       	adiw	r28, 0x10	; 16
    48ee:	0f b6       	in	r0, 0x3f	; 63
    48f0:	f8 94       	cli
    48f2:	de bf       	out	0x3e, r29	; 62
    48f4:	0f be       	out	0x3f, r0	; 63
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	df 91       	pop	r29
    48fa:	cf 91       	pop	r28
    48fc:	1f 91       	pop	r17
    48fe:	0f 91       	pop	r16
    4900:	ff 90       	pop	r15
    4902:	ef 90       	pop	r14
    4904:	df 90       	pop	r13
    4906:	cf 90       	pop	r12
    4908:	bf 90       	pop	r11
    490a:	af 90       	pop	r10
    490c:	9f 90       	pop	r9
    490e:	8f 90       	pop	r8
    4910:	08 95       	ret

00004912 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    4912:	e0 91 4e 11 	lds	r30, 0x114E
    4916:	f0 91 4f 11 	lds	r31, 0x114F
}
    491a:	80 85       	ldd	r24, Z+8	; 0x08
    491c:	08 95       	ret

0000491e <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
    4926:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    4928:	1c 82       	std	Y+4, r1	; 0x04
    492a:	1d 82       	std	Y+5, r1	; 0x05
    492c:	1e 82       	std	Y+6, r1	; 0x06
    492e:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    4930:	80 91 45 11 	lds	r24, 0x1145
    4934:	90 91 46 11 	lds	r25, 0x1146
    4938:	a0 91 47 11 	lds	r26, 0x1147
    493c:	b0 91 48 11 	lds	r27, 0x1148
    4940:	88 83       	st	Y, r24
    4942:	99 83       	std	Y+1, r25	; 0x01
    4944:	aa 83       	std	Y+2, r26	; 0x02
    4946:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    4948:	80 91 49 11 	lds	r24, 0x1149
    494c:	90 91 4a 11 	lds	r25, 0x114A
    4950:	a0 91 4b 11 	lds	r26, 0x114B
    4954:	b0 91 4c 11 	lds	r27, 0x114C
    4958:	8c 83       	std	Y+4, r24	; 0x04
    495a:	9d 83       	std	Y+5, r25	; 0x05
    495c:	ae 83       	std	Y+6, r26	; 0x06
    495e:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    4960:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    4964:	a8 2f       	mov	r26, r24
    4966:	b0 e0       	ldi	r27, 0x00	; 0
    4968:	23 eb       	ldi	r18, 0xB3	; 179
    496a:	36 ee       	ldi	r19, 0xE6	; 230
    496c:	4e e0       	ldi	r20, 0x0E	; 14
    496e:	50 e0       	ldi	r21, 0x00	; 0
    4970:	0e 94 29 30 	call	0x6052	; 0x6052 <__muluhisi3>
    4974:	0c 81       	ldd	r16, Y+4	; 0x04
    4976:	1d 81       	ldd	r17, Y+5	; 0x05
    4978:	2e 81       	ldd	r18, Y+6	; 0x06
    497a:	3f 81       	ldd	r19, Y+7	; 0x07
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	80 0f       	add	r24, r16
    4982:	91 1f       	adc	r25, r17
    4984:	a2 1f       	adc	r26, r18
    4986:	b3 1f       	adc	r27, r19
    4988:	8c 83       	std	Y+4, r24	; 0x04
    498a:	9d 83       	std	Y+5, r25	; 0x05
    498c:	ae 83       	std	Y+6, r26	; 0x06
    498e:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4990:	8c 81       	ldd	r24, Y+4	; 0x04
    4992:	9d 81       	ldd	r25, Y+5	; 0x05
    4994:	ae 81       	ldd	r26, Y+6	; 0x06
    4996:	bf 81       	ldd	r27, Y+7	; 0x07
    4998:	81 15       	cp	r24, r1
    499a:	2a ec       	ldi	r18, 0xCA	; 202
    499c:	92 07       	cpc	r25, r18
    499e:	2a e9       	ldi	r18, 0x9A	; 154
    49a0:	a2 07       	cpc	r26, r18
    49a2:	2b e3       	ldi	r18, 0x3B	; 59
    49a4:	b2 07       	cpc	r27, r18
    49a6:	98 f0       	brcs	.+38     	; 0x49ce <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    49a8:	9a 5c       	subi	r25, 0xCA	; 202
    49aa:	aa 49       	sbci	r26, 0x9A	; 154
    49ac:	bb 43       	sbci	r27, 0x3B	; 59
    49ae:	8c 83       	std	Y+4, r24	; 0x04
    49b0:	9d 83       	std	Y+5, r25	; 0x05
    49b2:	ae 83       	std	Y+6, r26	; 0x06
    49b4:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    49b6:	88 81       	ld	r24, Y
    49b8:	99 81       	ldd	r25, Y+1	; 0x01
    49ba:	aa 81       	ldd	r26, Y+2	; 0x02
    49bc:	bb 81       	ldd	r27, Y+3	; 0x03
    49be:	01 96       	adiw	r24, 0x01	; 1
    49c0:	a1 1d       	adc	r26, r1
    49c2:	b1 1d       	adc	r27, r1
    49c4:	88 83       	st	Y, r24
    49c6:	99 83       	std	Y+1, r25	; 0x01
    49c8:	aa 83       	std	Y+2, r26	; 0x02
    49ca:	bb 83       	std	Y+3, r27	; 0x03
    49cc:	e1 cf       	rjmp	.-62     	; 0x4990 <nrk_time_get+0x72>
    }

}
    49ce:	df 91       	pop	r29
    49d0:	cf 91       	pop	r28
    49d2:	1f 91       	pop	r17
    49d4:	0f 91       	pop	r16
    49d6:	08 95       	ret

000049d8 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    49d8:	8f 92       	push	r8
    49da:	9f 92       	push	r9
    49dc:	af 92       	push	r10
    49de:	bf 92       	push	r11
    49e0:	cf 92       	push	r12
    49e2:	df 92       	push	r13
    49e4:	ef 92       	push	r14
    49e6:	ff 92       	push	r15
    49e8:	0f 93       	push	r16
    49ea:	1f 93       	push	r17
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	60 97       	sbiw	r28, 0x10	; 16
    49f6:	0f b6       	in	r0, 0x3f	; 63
    49f8:	f8 94       	cli
    49fa:	de bf       	out	0x3e, r29	; 62
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	cd bf       	out	0x3d, r28	; 61
    4a00:	fc 01       	movw	r30, r24
    4a02:	09 83       	std	Y+1, r16	; 0x01
    4a04:	1a 83       	std	Y+2, r17	; 0x02
    4a06:	2b 83       	std	Y+3, r18	; 0x03
    4a08:	3c 83       	std	Y+4, r19	; 0x04
    4a0a:	4d 83       	std	Y+5, r20	; 0x05
    4a0c:	5e 83       	std	Y+6, r21	; 0x06
    4a0e:	6f 83       	std	Y+7, r22	; 0x07
    4a10:	78 87       	std	Y+8, r23	; 0x08
    4a12:	89 86       	std	Y+9, r8	; 0x09
    4a14:	9a 86       	std	Y+10, r9	; 0x0a
    4a16:	ab 86       	std	Y+11, r10	; 0x0b
    4a18:	bc 86       	std	Y+12, r11	; 0x0c
    4a1a:	cd 86       	std	Y+13, r12	; 0x0d
    4a1c:	de 86       	std	Y+14, r13	; 0x0e
    4a1e:	ef 86       	std	Y+15, r14	; 0x0f
    4a20:	f8 8a       	std	Y+16, r15	; 0x10
    4a22:	09 81       	ldd	r16, Y+1	; 0x01
    4a24:	1a 81       	ldd	r17, Y+2	; 0x02
    4a26:	2b 81       	ldd	r18, Y+3	; 0x03
    4a28:	3c 81       	ldd	r19, Y+4	; 0x04
    4a2a:	4d 81       	ldd	r20, Y+5	; 0x05
    4a2c:	5e 81       	ldd	r21, Y+6	; 0x06
    4a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a30:	78 85       	ldd	r23, Y+8	; 0x08
    4a32:	c9 84       	ldd	r12, Y+9	; 0x09
    4a34:	da 84       	ldd	r13, Y+10	; 0x0a
    4a36:	eb 84       	ldd	r14, Y+11	; 0x0b
    4a38:	fc 84       	ldd	r15, Y+12	; 0x0c
    4a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a3e:	af 85       	ldd	r26, Y+15	; 0x0f
    4a40:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    4a42:	0c 15       	cp	r16, r12
    4a44:	1d 05       	cpc	r17, r13
    4a46:	2e 05       	cpc	r18, r14
    4a48:	3f 05       	cpc	r19, r15
    4a4a:	f0 f1       	brcs	.+124    	; 0x4ac8 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    4a4c:	c0 16       	cp	r12, r16
    4a4e:	d1 06       	cpc	r13, r17
    4a50:	e2 06       	cpc	r14, r18
    4a52:	f3 06       	cpc	r15, r19
    4a54:	91 f4       	brne	.+36     	; 0x4a7a <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    4a56:	48 17       	cp	r20, r24
    4a58:	59 07       	cpc	r21, r25
    4a5a:	6a 07       	cpc	r22, r26
    4a5c:	7b 07       	cpc	r23, r27
    4a5e:	a0 f1       	brcs	.+104    	; 0x4ac8 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    4a60:	48 1b       	sub	r20, r24
    4a62:	59 0b       	sbc	r21, r25
    4a64:	6a 0b       	sbc	r22, r26
    4a66:	7b 0b       	sbc	r23, r27
    4a68:	44 83       	std	Z+4, r20	; 0x04
    4a6a:	55 83       	std	Z+5, r21	; 0x05
    4a6c:	66 83       	std	Z+6, r22	; 0x06
    4a6e:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    4a70:	10 82       	st	Z, r1
    4a72:	11 82       	std	Z+1, r1	; 0x01
    4a74:	12 82       	std	Z+2, r1	; 0x02
    4a76:	13 82       	std	Z+3, r1	; 0x03
    4a78:	25 c0       	rjmp	.+74     	; 0x4ac4 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    4a7a:	48 17       	cp	r20, r24
    4a7c:	59 07       	cpc	r21, r25
    4a7e:	6a 07       	cpc	r22, r26
    4a80:	7b 07       	cpc	r23, r27
    4a82:	80 f4       	brcc	.+32     	; 0x4aa4 <nrk_time_sub+0xcc>
{
	high.secs--;
    4a84:	01 50       	subi	r16, 0x01	; 1
    4a86:	11 09       	sbc	r17, r1
    4a88:	21 09       	sbc	r18, r1
    4a8a:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    4a8c:	0c 19       	sub	r16, r12
    4a8e:	1d 09       	sbc	r17, r13
    4a90:	2e 09       	sbc	r18, r14
    4a92:	3f 09       	sbc	r19, r15
    4a94:	00 83       	st	Z, r16
    4a96:	11 83       	std	Z+1, r17	; 0x01
    4a98:	22 83       	std	Z+2, r18	; 0x02
    4a9a:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    4a9c:	56 53       	subi	r21, 0x36	; 54
    4a9e:	65 46       	sbci	r22, 0x65	; 101
    4aa0:	74 4c       	sbci	r23, 0xC4	; 196
    4aa2:	08 c0       	rjmp	.+16     	; 0x4ab4 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    4aa4:	0c 19       	sub	r16, r12
    4aa6:	1d 09       	sbc	r17, r13
    4aa8:	2e 09       	sbc	r18, r14
    4aaa:	3f 09       	sbc	r19, r15
    4aac:	00 83       	st	Z, r16
    4aae:	11 83       	std	Z+1, r17	; 0x01
    4ab0:	22 83       	std	Z+2, r18	; 0x02
    4ab2:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4ab4:	48 1b       	sub	r20, r24
    4ab6:	59 0b       	sbc	r21, r25
    4ab8:	6a 0b       	sbc	r22, r26
    4aba:	7b 0b       	sbc	r23, r27
    4abc:	44 83       	std	Z+4, r20	; 0x04
    4abe:	55 83       	std	Z+5, r21	; 0x05
    4ac0:	66 83       	std	Z+6, r22	; 0x06
    4ac2:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	01 c0       	rjmp	.+2      	; 0x4aca <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    4ac8:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    4aca:	60 96       	adiw	r28, 0x10	; 16
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	df 91       	pop	r29
    4ad8:	cf 91       	pop	r28
    4ada:	1f 91       	pop	r17
    4adc:	0f 91       	pop	r16
    4ade:	ff 90       	pop	r15
    4ae0:	ef 90       	pop	r14
    4ae2:	df 90       	pop	r13
    4ae4:	cf 90       	pop	r12
    4ae6:	bf 90       	pop	r11
    4ae8:	af 90       	pop	r10
    4aea:	9f 90       	pop	r9
    4aec:	8f 90       	pop	r8
    4aee:	08 95       	ret

00004af0 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4af0:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4af2:	44 81       	ldd	r20, Z+4	; 0x04
    4af4:	55 81       	ldd	r21, Z+5	; 0x05
    4af6:	66 81       	ldd	r22, Z+6	; 0x06
    4af8:	77 81       	ldd	r23, Z+7	; 0x07
    4afa:	41 15       	cp	r20, r1
    4afc:	8a ec       	ldi	r24, 0xCA	; 202
    4afe:	58 07       	cpc	r21, r24
    4b00:	8a e9       	ldi	r24, 0x9A	; 154
    4b02:	68 07       	cpc	r22, r24
    4b04:	8b e3       	ldi	r24, 0x3B	; 59
    4b06:	78 07       	cpc	r23, r24
    4b08:	98 f0       	brcs	.+38     	; 0x4b30 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    4b0a:	5a 5c       	subi	r21, 0xCA	; 202
    4b0c:	6a 49       	sbci	r22, 0x9A	; 154
    4b0e:	7b 43       	sbci	r23, 0x3B	; 59
    4b10:	44 83       	std	Z+4, r20	; 0x04
    4b12:	55 83       	std	Z+5, r21	; 0x05
    4b14:	66 83       	std	Z+6, r22	; 0x06
    4b16:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    4b18:	80 81       	ld	r24, Z
    4b1a:	91 81       	ldd	r25, Z+1	; 0x01
    4b1c:	a2 81       	ldd	r26, Z+2	; 0x02
    4b1e:	b3 81       	ldd	r27, Z+3	; 0x03
    4b20:	01 96       	adiw	r24, 0x01	; 1
    4b22:	a1 1d       	adc	r26, r1
    4b24:	b1 1d       	adc	r27, r1
    4b26:	80 83       	st	Z, r24
    4b28:	91 83       	std	Z+1, r25	; 0x01
    4b2a:	a2 83       	std	Z+2, r26	; 0x02
    4b2c:	b3 83       	std	Z+3, r27	; 0x03
    4b2e:	e1 cf       	rjmp	.-62     	; 0x4af2 <nrk_time_compact_nanos+0x2>
    }
}
    4b30:	08 95       	ret

00004b32 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4b32:	8f 92       	push	r8
    4b34:	9f 92       	push	r9
    4b36:	af 92       	push	r10
    4b38:	bf 92       	push	r11
    4b3a:	cf 92       	push	r12
    4b3c:	df 92       	push	r13
    4b3e:	ef 92       	push	r14
    4b40:	ff 92       	push	r15
    4b42:	0f 93       	push	r16
    4b44:	1f 93       	push	r17
    4b46:	cf 93       	push	r28
    4b48:	df 93       	push	r29
    4b4a:	cd b7       	in	r28, 0x3d	; 61
    4b4c:	de b7       	in	r29, 0x3e	; 62
    4b4e:	60 97       	sbiw	r28, 0x10	; 16
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	cd bf       	out	0x3d, r28	; 61
    4b5a:	09 83       	std	Y+1, r16	; 0x01
    4b5c:	1a 83       	std	Y+2, r17	; 0x02
    4b5e:	2b 83       	std	Y+3, r18	; 0x03
    4b60:	3c 83       	std	Y+4, r19	; 0x04
    4b62:	4d 83       	std	Y+5, r20	; 0x05
    4b64:	5e 83       	std	Y+6, r21	; 0x06
    4b66:	6f 83       	std	Y+7, r22	; 0x07
    4b68:	78 87       	std	Y+8, r23	; 0x08
    4b6a:	89 86       	std	Y+9, r8	; 0x09
    4b6c:	9a 86       	std	Y+10, r9	; 0x0a
    4b6e:	ab 86       	std	Y+11, r10	; 0x0b
    4b70:	bc 86       	std	Y+12, r11	; 0x0c
    4b72:	cd 86       	std	Y+13, r12	; 0x0d
    4b74:	de 86       	std	Y+14, r13	; 0x0e
    4b76:	ef 86       	std	Y+15, r14	; 0x0f
    4b78:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    4b7a:	09 85       	ldd	r16, Y+9	; 0x09
    4b7c:	1a 85       	ldd	r17, Y+10	; 0x0a
    4b7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b80:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b82:	49 81       	ldd	r20, Y+1	; 0x01
    4b84:	5a 81       	ldd	r21, Y+2	; 0x02
    4b86:	6b 81       	ldd	r22, Y+3	; 0x03
    4b88:	7c 81       	ldd	r23, Y+4	; 0x04
    4b8a:	40 0f       	add	r20, r16
    4b8c:	51 1f       	adc	r21, r17
    4b8e:	62 1f       	adc	r22, r18
    4b90:	73 1f       	adc	r23, r19
    4b92:	fc 01       	movw	r30, r24
    4b94:	40 83       	st	Z, r20
    4b96:	51 83       	std	Z+1, r21	; 0x01
    4b98:	62 83       	std	Z+2, r22	; 0x02
    4b9a:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4b9c:	0d 85       	ldd	r16, Y+13	; 0x0d
    4b9e:	1e 85       	ldd	r17, Y+14	; 0x0e
    4ba0:	2f 85       	ldd	r18, Y+15	; 0x0f
    4ba2:	38 89       	ldd	r19, Y+16	; 0x10
    4ba4:	4d 81       	ldd	r20, Y+5	; 0x05
    4ba6:	5e 81       	ldd	r21, Y+6	; 0x06
    4ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    4baa:	78 85       	ldd	r23, Y+8	; 0x08
    4bac:	40 0f       	add	r20, r16
    4bae:	51 1f       	adc	r21, r17
    4bb0:	62 1f       	adc	r22, r18
    4bb2:	73 1f       	adc	r23, r19
    4bb4:	44 83       	std	Z+4, r20	; 0x04
    4bb6:	55 83       	std	Z+5, r21	; 0x05
    4bb8:	66 83       	std	Z+6, r22	; 0x06
    4bba:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    4bbc:	0e 94 78 25 	call	0x4af0	; 0x4af0 <nrk_time_compact_nanos>
return NRK_OK;
}
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	60 96       	adiw	r28, 0x10	; 16
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	f8 94       	cli
    4bc8:	de bf       	out	0x3e, r29	; 62
    4bca:	0f be       	out	0x3f, r0	; 63
    4bcc:	cd bf       	out	0x3d, r28	; 61
    4bce:	df 91       	pop	r29
    4bd0:	cf 91       	pop	r28
    4bd2:	1f 91       	pop	r17
    4bd4:	0f 91       	pop	r16
    4bd6:	ff 90       	pop	r15
    4bd8:	ef 90       	pop	r14
    4bda:	df 90       	pop	r13
    4bdc:	cf 90       	pop	r12
    4bde:	bf 90       	pop	r11
    4be0:	af 90       	pop	r10
    4be2:	9f 90       	pop	r9
    4be4:	8f 90       	pop	r8
    4be6:	08 95       	ret

00004be8 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    4be8:	e5 e4       	ldi	r30, 0x45	; 69
    4bea:	f1 e1       	ldi	r31, 0x11	; 17
    4bec:	60 83       	st	Z, r22
    4bee:	71 83       	std	Z+1, r23	; 0x01
    4bf0:	82 83       	std	Z+2, r24	; 0x02
    4bf2:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    4bf4:	24 83       	std	Z+4, r18	; 0x04
    4bf6:	35 83       	std	Z+5, r19	; 0x05
    4bf8:	46 83       	std	Z+6, r20	; 0x06
    4bfa:	57 83       	std	Z+7, r21	; 0x07
    4bfc:	08 95       	ret

00004bfe <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    4bfe:	2f 92       	push	r2
    4c00:	3f 92       	push	r3
    4c02:	4f 92       	push	r4
    4c04:	5f 92       	push	r5
    4c06:	6f 92       	push	r6
    4c08:	7f 92       	push	r7
    4c0a:	8f 92       	push	r8
    4c0c:	9f 92       	push	r9
    4c0e:	af 92       	push	r10
    4c10:	bf 92       	push	r11
    4c12:	cf 92       	push	r12
    4c14:	df 92       	push	r13
    4c16:	ef 92       	push	r14
    4c18:	ff 92       	push	r15
    4c1a:	0f 93       	push	r16
    4c1c:	1f 93       	push	r17
    4c1e:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4c20:	c0 80       	ld	r12, Z
    4c22:	d1 80       	ldd	r13, Z+1	; 0x01
    4c24:	e2 80       	ldd	r14, Z+2	; 0x02
    4c26:	f3 80       	ldd	r15, Z+3	; 0x03
    4c28:	c1 14       	cp	r12, r1
    4c2a:	d1 04       	cpc	r13, r1
    4c2c:	e1 04       	cpc	r14, r1
    4c2e:	f1 04       	cpc	r15, r1
    4c30:	e1 f1       	breq	.+120    	; 0x4caa <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    4c32:	84 81       	ldd	r24, Z+4	; 0x04
    4c34:	95 81       	ldd	r25, Z+5	; 0x05
    4c36:	a6 81       	ldd	r26, Z+6	; 0x06
    4c38:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    4c3a:	22 e4       	ldi	r18, 0x42	; 66
    4c3c:	c2 16       	cp	r12, r18
    4c3e:	d1 04       	cpc	r13, r1
    4c40:	e1 04       	cpc	r14, r1
    4c42:	f1 04       	cpc	r15, r1
    4c44:	f0 f5       	brcc	.+124    	; 0x4cc2 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    4c46:	1c 01       	movw	r2, r24
    4c48:	2d 01       	movw	r4, r26
    4c4a:	61 2c       	mov	r6, r1
    4c4c:	71 2c       	mov	r7, r1
    4c4e:	43 01       	movw	r8, r6
    4c50:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4c52:	8e 2f       	mov	r24, r30
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	a0 e0       	ldi	r26, 0x00	; 0
    4c58:	b0 e0       	ldi	r27, 0x00	; 0
    4c5a:	8c 15       	cp	r24, r12
    4c5c:	9d 05       	cpc	r25, r13
    4c5e:	ae 05       	cpc	r26, r14
    4c60:	bf 05       	cpc	r27, r15
    4c62:	88 f4       	brcc	.+34     	; 0x4c86 <_nrk_time_to_ticks+0x88>
    4c64:	91 01       	movw	r18, r2
    4c66:	a2 01       	movw	r20, r4
    4c68:	b3 01       	movw	r22, r6
    4c6a:	c4 01       	movw	r24, r8
    4c6c:	36 53       	subi	r19, 0x36	; 54
    4c6e:	45 46       	sbci	r20, 0x65	; 101
    4c70:	54 4c       	sbci	r21, 0xC4	; 196
    4c72:	6f 4f       	sbci	r22, 0xFF	; 255
    4c74:	7f 4f       	sbci	r23, 0xFF	; 255
    4c76:	8f 4f       	sbci	r24, 0xFF	; 255
    4c78:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7a:	19 01       	movw	r2, r18
    4c7c:	2a 01       	movw	r4, r20
    4c7e:	3b 01       	movw	r6, r22
    4c80:	4c 01       	movw	r8, r24
    4c82:	ef 5f       	subi	r30, 0xFF	; 255
    4c84:	e6 cf       	rjmp	.-52     	; 0x4c52 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4c86:	83 eb       	ldi	r24, 0xB3	; 179
    4c88:	a8 2e       	mov	r10, r24
    4c8a:	96 ee       	ldi	r25, 0xE6	; 230
    4c8c:	b9 2e       	mov	r11, r25
    4c8e:	2e e0       	ldi	r18, 0x0E	; 14
    4c90:	c2 2e       	mov	r12, r18
    4c92:	d1 2c       	mov	r13, r1
    4c94:	e1 2c       	mov	r14, r1
    4c96:	f1 2c       	mov	r15, r1
    4c98:	00 e0       	ldi	r16, 0x00	; 0
    4c9a:	10 e0       	ldi	r17, 0x00	; 0
    4c9c:	91 01       	movw	r18, r2
    4c9e:	a2 01       	movw	r20, r4
    4ca0:	b3 01       	movw	r22, r6
    4ca2:	c4 01       	movw	r24, r8
    4ca4:	0e 94 90 30 	call	0x6120	; 0x6120 <__udivdi3>
    4ca8:	0a c0       	rjmp	.+20     	; 0x4cbe <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4caa:	64 81       	ldd	r22, Z+4	; 0x04
    4cac:	75 81       	ldd	r23, Z+5	; 0x05
    4cae:	86 81       	ldd	r24, Z+6	; 0x06
    4cb0:	97 81       	ldd	r25, Z+7	; 0x07
    4cb2:	23 eb       	ldi	r18, 0xB3	; 179
    4cb4:	36 ee       	ldi	r19, 0xE6	; 230
    4cb6:	4e e0       	ldi	r20, 0x0E	; 14
    4cb8:	50 e0       	ldi	r21, 0x00	; 0
    4cba:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <__udivmodsi4>
    4cbe:	c9 01       	movw	r24, r18
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	bf 90       	pop	r11
    4cd4:	af 90       	pop	r10
    4cd6:	9f 90       	pop	r9
    4cd8:	8f 90       	pop	r8
    4cda:	7f 90       	pop	r7
    4cdc:	6f 90       	pop	r6
    4cde:	5f 90       	pop	r5
    4ce0:	4f 90       	pop	r4
    4ce2:	3f 90       	pop	r3
    4ce4:	2f 90       	pop	r2
    4ce6:	08 95       	ret

00004ce8 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4ce8:	cf 92       	push	r12
    4cea:	df 92       	push	r13
    4cec:	ef 92       	push	r14
    4cee:	ff 92       	push	r15
    4cf0:	cf 93       	push	r28
    4cf2:	df 93       	push	r29
    4cf4:	cd b7       	in	r28, 0x3d	; 61
    4cf6:	de b7       	in	r29, 0x3e	; 62
    4cf8:	28 97       	sbiw	r28, 0x08	; 8
    4cfa:	0f b6       	in	r0, 0x3f	; 63
    4cfc:	f8 94       	cli
    4cfe:	de bf       	out	0x3e, r29	; 62
    4d00:	0f be       	out	0x3f, r0	; 63
    4d02:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4d04:	6b 01       	movw	r12, r22
    4d06:	7c 01       	movw	r14, r24
    4d08:	2a e0       	ldi	r18, 0x0A	; 10
    4d0a:	f6 94       	lsr	r15
    4d0c:	e7 94       	ror	r14
    4d0e:	d7 94       	ror	r13
    4d10:	c7 94       	ror	r12
    4d12:	2a 95       	dec	r18
    4d14:	d1 f7       	brne	.-12     	; 0x4d0a <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    4d16:	c9 82       	std	Y+1, r12	; 0x01
    4d18:	da 82       	std	Y+2, r13	; 0x02
    4d1a:	eb 82       	std	Y+3, r14	; 0x03
    4d1c:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    4d1e:	9b 01       	movw	r18, r22
    4d20:	ac 01       	movw	r20, r24
    4d22:	33 70       	andi	r19, 0x03	; 3
    4d24:	44 27       	eor	r20, r20
    4d26:	55 27       	eor	r21, r21
    4d28:	63 eb       	ldi	r22, 0xB3	; 179
    4d2a:	76 ee       	ldi	r23, 0xE6	; 230
    4d2c:	8e e0       	ldi	r24, 0x0E	; 14
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	0e 94 34 30 	call	0x6068	; 0x6068 <__mulsi3>

return t;
    4d34:	2c 2d       	mov	r18, r12
    4d36:	3a 81       	ldd	r19, Y+2	; 0x02
    4d38:	4b 81       	ldd	r20, Y+3	; 0x03
    4d3a:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4d3c:	28 96       	adiw	r28, 0x08	; 8
    4d3e:	0f b6       	in	r0, 0x3f	; 63
    4d40:	f8 94       	cli
    4d42:	de bf       	out	0x3e, r29	; 62
    4d44:	0f be       	out	0x3f, r0	; 63
    4d46:	cd bf       	out	0x3d, r28	; 61
    4d48:	df 91       	pop	r29
    4d4a:	cf 91       	pop	r28
    4d4c:	ff 90       	pop	r15
    4d4e:	ef 90       	pop	r14
    4d50:	df 90       	pop	r13
    4d52:	cf 90       	pop	r12
    4d54:	08 95       	ret

00004d56 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    4d56:	2f 92       	push	r2
    4d58:	3f 92       	push	r3
    4d5a:	4f 92       	push	r4
    4d5c:	5f 92       	push	r5
    4d5e:	6f 92       	push	r6
    4d60:	7f 92       	push	r7
    4d62:	8f 92       	push	r8
    4d64:	9f 92       	push	r9
    4d66:	af 92       	push	r10
    4d68:	bf 92       	push	r11
    4d6a:	cf 92       	push	r12
    4d6c:	df 92       	push	r13
    4d6e:	ef 92       	push	r14
    4d70:	ff 92       	push	r15
    4d72:	0f 93       	push	r16
    4d74:	1f 93       	push	r17
    4d76:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    4d78:	c0 80       	ld	r12, Z
    4d7a:	d1 80       	ldd	r13, Z+1	; 0x01
    4d7c:	e2 80       	ldd	r14, Z+2	; 0x02
    4d7e:	f3 80       	ldd	r15, Z+3	; 0x03
    4d80:	c1 14       	cp	r12, r1
    4d82:	d1 04       	cpc	r13, r1
    4d84:	e1 04       	cpc	r14, r1
    4d86:	f1 04       	cpc	r15, r1
    4d88:	b9 f1       	breq	.+110    	; 0x4df8 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4d8a:	84 81       	ldd	r24, Z+4	; 0x04
    4d8c:	95 81       	ldd	r25, Z+5	; 0x05
    4d8e:	a6 81       	ldd	r26, Z+6	; 0x06
    4d90:	b7 81       	ldd	r27, Z+7	; 0x07
    4d92:	1c 01       	movw	r2, r24
    4d94:	2d 01       	movw	r4, r26
    4d96:	61 2c       	mov	r6, r1
    4d98:	71 2c       	mov	r7, r1
    4d9a:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4d9c:	e0 e0       	ldi	r30, 0x00	; 0
    4d9e:	8e 2f       	mov	r24, r30
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	a0 e0       	ldi	r26, 0x00	; 0
    4da4:	b0 e0       	ldi	r27, 0x00	; 0
    4da6:	8c 15       	cp	r24, r12
    4da8:	9d 05       	cpc	r25, r13
    4daa:	ae 05       	cpc	r26, r14
    4dac:	bf 05       	cpc	r27, r15
    4dae:	88 f4       	brcc	.+34     	; 0x4dd2 <_nrk_time_to_ticks_long+0x7c>
    4db0:	91 01       	movw	r18, r2
    4db2:	a2 01       	movw	r20, r4
    4db4:	b3 01       	movw	r22, r6
    4db6:	c4 01       	movw	r24, r8
    4db8:	36 53       	subi	r19, 0x36	; 54
    4dba:	45 46       	sbci	r20, 0x65	; 101
    4dbc:	54 4c       	sbci	r21, 0xC4	; 196
    4dbe:	6f 4f       	sbci	r22, 0xFF	; 255
    4dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc6:	19 01       	movw	r2, r18
    4dc8:	2a 01       	movw	r4, r20
    4dca:	3b 01       	movw	r6, r22
    4dcc:	4c 01       	movw	r8, r24
    4dce:	ef 5f       	subi	r30, 0xFF	; 255
    4dd0:	e6 cf       	rjmp	.-52     	; 0x4d9e <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    4dd2:	83 eb       	ldi	r24, 0xB3	; 179
    4dd4:	a8 2e       	mov	r10, r24
    4dd6:	96 ee       	ldi	r25, 0xE6	; 230
    4dd8:	b9 2e       	mov	r11, r25
    4dda:	2e e0       	ldi	r18, 0x0E	; 14
    4ddc:	c2 2e       	mov	r12, r18
    4dde:	d1 2c       	mov	r13, r1
    4de0:	e1 2c       	mov	r14, r1
    4de2:	f1 2c       	mov	r15, r1
    4de4:	00 e0       	ldi	r16, 0x00	; 0
    4de6:	10 e0       	ldi	r17, 0x00	; 0
    4de8:	91 01       	movw	r18, r2
    4dea:	a2 01       	movw	r20, r4
    4dec:	b3 01       	movw	r22, r6
    4dee:	c4 01       	movw	r24, r8
    4df0:	0e 94 90 30 	call	0x6120	; 0x6120 <__udivdi3>
    4df4:	ca 01       	movw	r24, r20
    4df6:	0b c0       	rjmp	.+22     	; 0x4e0e <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4df8:	64 81       	ldd	r22, Z+4	; 0x04
    4dfa:	75 81       	ldd	r23, Z+5	; 0x05
    4dfc:	86 81       	ldd	r24, Z+6	; 0x06
    4dfe:	97 81       	ldd	r25, Z+7	; 0x07
    4e00:	23 eb       	ldi	r18, 0xB3	; 179
    4e02:	36 ee       	ldi	r19, 0xE6	; 230
    4e04:	4e e0       	ldi	r20, 0x0E	; 14
    4e06:	50 e0       	ldi	r21, 0x00	; 0
    4e08:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <__udivmodsi4>
    4e0c:	ca 01       	movw	r24, r20
}
return ticks;
}
    4e0e:	b9 01       	movw	r22, r18
    4e10:	1f 91       	pop	r17
    4e12:	0f 91       	pop	r16
    4e14:	ff 90       	pop	r15
    4e16:	ef 90       	pop	r14
    4e18:	df 90       	pop	r13
    4e1a:	cf 90       	pop	r12
    4e1c:	bf 90       	pop	r11
    4e1e:	af 90       	pop	r10
    4e20:	9f 90       	pop	r9
    4e22:	8f 90       	pop	r8
    4e24:	7f 90       	pop	r7
    4e26:	6f 90       	pop	r6
    4e28:	5f 90       	pop	r5
    4e2a:	4f 90       	pop	r4
    4e2c:	3f 90       	pop	r3
    4e2e:	2f 90       	pop	r2
    4e30:	08 95       	ret

00004e32 <nrk_idle_task>:

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4e32:	c1 e0       	ldi	r28, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4e34:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4e38:	0e 94 c0 2a 	call	0x5580	; 0x5580 <_nrk_get_next_wakeup>
    4e3c:	84 30       	cpi	r24, 0x04	; 4
    4e3e:	10 f4       	brcc	.+4      	; 0x4e44 <nrk_idle_task+0x12>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4e40:	c0 93 42 11 	sts	0x1142, r28
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    4e44:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4e48:	80 91 c8 0d 	lds	r24, 0x0DC8
    4e4c:	85 35       	cpi	r24, 0x55	; 85
    4e4e:	19 f0       	breq	.+6      	; 0x4e56 <nrk_idle_task+0x24>
    4e50:	88 e0       	ldi	r24, 0x08	; 8
    4e52:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4e56:	80 91 fe 3f 	lds	r24, 0x3FFE
    4e5a:	85 35       	cpi	r24, 0x55	; 85
    4e5c:	59 f3       	breq	.-42     	; 0x4e34 <nrk_idle_task+0x2>
    4e5e:	88 e0       	ldi	r24, 0x08	; 8
    4e60:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <nrk_error_add>
    4e64:	e7 cf       	rjmp	.-50     	; 0x4e34 <nrk_idle_task+0x2>

00004e66 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4e66:	2f 92       	push	r2
    4e68:	3f 92       	push	r3
    4e6a:	4f 92       	push	r4
    4e6c:	5f 92       	push	r5
    4e6e:	6f 92       	push	r6
    4e70:	7f 92       	push	r7
    4e72:	8f 92       	push	r8
    4e74:	9f 92       	push	r9
    4e76:	af 92       	push	r10
    4e78:	bf 92       	push	r11
    4e7a:	cf 92       	push	r12
    4e7c:	df 92       	push	r13
    4e7e:	ef 92       	push	r14
    4e80:	ff 92       	push	r15
    4e82:	0f 93       	push	r16
    4e84:	1f 93       	push	r17
    4e86:	cf 93       	push	r28
    4e88:	df 93       	push	r29
    4e8a:	00 d0       	rcall	.+0      	; 0x4e8c <_nrk_scheduler+0x26>
    4e8c:	1f 92       	push	r1
    4e8e:	cd b7       	in	r28, 0x3d	; 61
    4e90:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4e92:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4e96:	0e 94 0a 1a 	call	0x3414	; 0x3414 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    4e9a:	0e 94 12 2a 	call	0x5424	; 0x5424 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4e9e:	0e 94 1a 2a 	call	0x5434	; 0x5434 <_nrk_high_speed_timer_get>
    4ea2:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4ea4:	8a ef       	ldi	r24, 0xFA	; 250
    4ea6:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4eaa:	a0 91 d7 0f 	lds	r26, 0x0FD7
    4eae:	b0 e0       	ldi	r27, 0x00	; 0
    4eb0:	23 eb       	ldi	r18, 0xB3	; 179
    4eb2:	36 ee       	ldi	r19, 0xE6	; 230
    4eb4:	4e e0       	ldi	r20, 0x0E	; 14
    4eb6:	50 e0       	ldi	r21, 0x00	; 0
    4eb8:	0e 94 29 30 	call	0x6052	; 0x6052 <__muluhisi3>
    4ebc:	00 91 49 11 	lds	r16, 0x1149
    4ec0:	10 91 4a 11 	lds	r17, 0x114A
    4ec4:	20 91 4b 11 	lds	r18, 0x114B
    4ec8:	30 91 4c 11 	lds	r19, 0x114C
    4ecc:	6b 01       	movw	r12, r22
    4ece:	7c 01       	movw	r14, r24
    4ed0:	c0 0e       	add	r12, r16
    4ed2:	d1 1e       	adc	r13, r17
    4ed4:	e2 1e       	adc	r14, r18
    4ed6:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4ed8:	c7 01       	movw	r24, r14
    4eda:	b6 01       	movw	r22, r12
    4edc:	23 eb       	ldi	r18, 0xB3	; 179
    4ede:	36 ee       	ldi	r19, 0xE6	; 230
    4ee0:	4e e0       	ldi	r20, 0x0E	; 14
    4ee2:	50 e0       	ldi	r21, 0x00	; 0
    4ee4:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <__udivmodsi4>
    4ee8:	26 01       	movw	r4, r12
    4eea:	37 01       	movw	r6, r14
    4eec:	46 1a       	sub	r4, r22
    4eee:	57 0a       	sbc	r5, r23
    4ef0:	68 0a       	sbc	r6, r24
    4ef2:	79 0a       	sbc	r7, r25
    4ef4:	d3 01       	movw	r26, r6
    4ef6:	c2 01       	movw	r24, r4
    4ef8:	00 91 45 11 	lds	r16, 0x1145
    4efc:	10 91 46 11 	lds	r17, 0x1146
    4f00:	20 91 47 11 	lds	r18, 0x1147
    4f04:	30 91 48 11 	lds	r19, 0x1148

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4f08:	43 eb       	ldi	r20, 0xB3	; 179
    4f0a:	84 2e       	mov	r8, r20
    4f0c:	46 ee       	ldi	r20, 0xE6	; 230
    4f0e:	94 2e       	mov	r9, r20
    4f10:	4e e0       	ldi	r20, 0x0E	; 14
    4f12:	a4 2e       	mov	r10, r20
    4f14:	b1 2c       	mov	r11, r1
    4f16:	68 01       	movw	r12, r16
    4f18:	79 01       	movw	r14, r18
    4f1a:	4f ef       	ldi	r20, 0xFF	; 255
    4f1c:	c4 1a       	sub	r12, r20
    4f1e:	d4 0a       	sbc	r13, r20
    4f20:	e4 0a       	sbc	r14, r20
    4f22:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4f24:	81 15       	cp	r24, r1
    4f26:	5a ec       	ldi	r21, 0xCA	; 202
    4f28:	95 07       	cpc	r25, r21
    4f2a:	5a e9       	ldi	r21, 0x9A	; 154
    4f2c:	a5 07       	cpc	r26, r21
    4f2e:	5b e3       	ldi	r21, 0x3B	; 59
    4f30:	b5 07       	cpc	r27, r21
    4f32:	c8 f0       	brcs	.+50     	; 0x4f66 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4f34:	2c 01       	movw	r4, r24
    4f36:	3d 01       	movw	r6, r26
    4f38:	2a ec       	ldi	r18, 0xCA	; 202
    4f3a:	52 1a       	sub	r5, r18
    4f3c:	2a e9       	ldi	r18, 0x9A	; 154
    4f3e:	62 0a       	sbc	r6, r18
    4f40:	2b e3       	ldi	r18, 0x3B	; 59
    4f42:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4f44:	c3 01       	movw	r24, r6
    4f46:	b2 01       	movw	r22, r4
    4f48:	a5 01       	movw	r20, r10
    4f4a:	94 01       	movw	r18, r8
    4f4c:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <__udivmodsi4>
    4f50:	a3 01       	movw	r20, r6
    4f52:	92 01       	movw	r18, r4
    4f54:	26 1b       	sub	r18, r22
    4f56:	37 0b       	sbc	r19, r23
    4f58:	48 0b       	sbc	r20, r24
    4f5a:	59 0b       	sbc	r21, r25
    4f5c:	da 01       	movw	r26, r20
    4f5e:	c9 01       	movw	r24, r18
    4f60:	97 01       	movw	r18, r14
    4f62:	86 01       	movw	r16, r12
    4f64:	d8 cf       	rjmp	.-80     	; 0x4f16 <_nrk_scheduler+0xb0>
    4f66:	80 93 49 11 	sts	0x1149, r24
    4f6a:	90 93 4a 11 	sts	0x114A, r25
    4f6e:	a0 93 4b 11 	sts	0x114B, r26
    4f72:	b0 93 4c 11 	sts	0x114C, r27
    4f76:	00 93 45 11 	sts	0x1145, r16
    4f7a:	10 93 46 11 	sts	0x1146, r17
    4f7e:	20 93 47 11 	sts	0x1147, r18
    4f82:	30 93 48 11 	sts	0x1148, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4f86:	e0 91 4e 11 	lds	r30, 0x114E
    4f8a:	f0 91 4f 11 	lds	r31, 0x114F
    4f8e:	85 81       	ldd	r24, Z+5	; 0x05
    4f90:	88 23       	and	r24, r24
    4f92:	39 f1       	breq	.+78     	; 0x4fe2 <_nrk_scheduler+0x17c>
    4f94:	81 85       	ldd	r24, Z+9	; 0x09
    4f96:	84 30       	cpi	r24, 0x04	; 4
    4f98:	21 f1       	breq	.+72     	; 0x4fe2 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4f9a:	87 81       	ldd	r24, Z+7	; 0x07
    4f9c:	82 30       	cpi	r24, 0x02	; 2
    4f9e:	29 f0       	breq	.+10     	; 0x4faa <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4fa0:	88 23       	and	r24, r24
    4fa2:	41 f0       	breq	.+16     	; 0x4fb4 <_nrk_scheduler+0x14e>
    4fa4:	86 81       	ldd	r24, Z+6	; 0x06
    4fa6:	81 11       	cpse	r24, r1
    4fa8:	02 c0       	rjmp	.+4      	; 0x4fae <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4faa:	85 e0       	ldi	r24, 0x05	; 5
    4fac:	01 c0       	rjmp	.+2      	; 0x4fb0 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4fae:	83 e0       	ldi	r24, 0x03	; 3
    4fb0:	81 87       	std	Z+9, r24	; 0x09
    4fb2:	14 c0       	rjmp	.+40     	; 0x4fdc <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4fb4:	83 e0       	ldi	r24, 0x03	; 3
    4fb6:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4fb8:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4fba:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    4fbc:	85 89       	ldd	r24, Z+21	; 0x15
    4fbe:	96 89       	ldd	r25, Z+22	; 0x16
    4fc0:	a7 89       	ldd	r26, Z+23	; 0x17
    4fc2:	b0 8d       	ldd	r27, Z+24	; 0x18
    4fc4:	89 2b       	or	r24, r25
    4fc6:	8a 2b       	or	r24, r26
    4fc8:	8b 2b       	or	r24, r27
    4fca:	41 f4       	brne	.+16     	; 0x4fdc <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    4fcc:	81 8d       	ldd	r24, Z+25	; 0x19
    4fce:	92 8d       	ldd	r25, Z+26	; 0x1a
    4fd0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4fd2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4fd4:	85 8b       	std	Z+21, r24	; 0x15
    4fd6:	96 8b       	std	Z+22, r25	; 0x16
    4fd8:	a7 8b       	std	Z+23, r26	; 0x17
    4fda:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4fdc:	80 85       	ldd	r24, Z+8	; 0x08
    4fde:	0e 94 fe 21 	call	0x43fc	; 0x43fc <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4fe2:	e0 91 4e 11 	lds	r30, 0x114E
    4fe6:	f0 91 4f 11 	lds	r31, 0x114F
    4fea:	85 a1       	ldd	r24, Z+37	; 0x25
    4fec:	96 a1       	ldd	r25, Z+38	; 0x26
    4fee:	a7 a1       	ldd	r26, Z+39	; 0x27
    4ff0:	b0 a5       	ldd	r27, Z+40	; 0x28
    4ff2:	89 2b       	or	r24, r25
    4ff4:	8a 2b       	or	r24, r26
    4ff6:	8b 2b       	or	r24, r27
    4ff8:	09 f4       	brne	.+2      	; 0x4ffc <_nrk_scheduler+0x196>
    4ffa:	44 c0       	rjmp	.+136    	; 0x5084 <_nrk_scheduler+0x21e>
    4ffc:	20 85       	ldd	r18, Z+8	; 0x08
    4ffe:	22 23       	and	r18, r18
    5000:	09 f4       	brne	.+2      	; 0x5004 <_nrk_scheduler+0x19e>
    5002:	40 c0       	rjmp	.+128    	; 0x5084 <_nrk_scheduler+0x21e>
    5004:	81 85       	ldd	r24, Z+9	; 0x09
    5006:	84 30       	cpi	r24, 0x04	; 4
    5008:	e9 f1       	breq	.+122    	; 0x5084 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    500a:	85 8d       	ldd	r24, Z+29	; 0x1d
    500c:	96 8d       	ldd	r25, Z+30	; 0x1e
    500e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5010:	b0 a1       	ldd	r27, Z+32	; 0x20
    5012:	40 91 d7 0f 	lds	r20, 0x0FD7
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	60 e0       	ldi	r22, 0x00	; 0
    501a:	70 e0       	ldi	r23, 0x00	; 0
    501c:	84 17       	cp	r24, r20
    501e:	95 07       	cpc	r25, r21
    5020:	a6 07       	cpc	r26, r22
    5022:	b7 07       	cpc	r27, r23
    5024:	68 f4       	brcc	.+26     	; 0x5040 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    5026:	62 2f       	mov	r22, r18
    5028:	82 e0       	ldi	r24, 0x02	; 2
    502a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    502e:	e0 91 4e 11 	lds	r30, 0x114E
    5032:	f0 91 4f 11 	lds	r31, 0x114F
    5036:	15 8e       	std	Z+29, r1	; 0x1d
    5038:	16 8e       	std	Z+30, r1	; 0x1e
    503a:	17 8e       	std	Z+31, r1	; 0x1f
    503c:	10 a2       	std	Z+32, r1	; 0x20
    503e:	08 c0       	rjmp	.+16     	; 0x5050 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    5040:	84 1b       	sub	r24, r20
    5042:	95 0b       	sbc	r25, r21
    5044:	a6 0b       	sbc	r26, r22
    5046:	b7 0b       	sbc	r27, r23
    5048:	85 8f       	std	Z+29, r24	; 0x1d
    504a:	96 8f       	std	Z+30, r25	; 0x1e
    504c:	a7 8f       	std	Z+31, r26	; 0x1f
    504e:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    5050:	e0 91 4e 11 	lds	r30, 0x114E
    5054:	f0 91 4f 11 	lds	r31, 0x114F
    5058:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    505a:	85 8d       	ldd	r24, Z+29	; 0x1d
    505c:	96 8d       	ldd	r25, Z+30	; 0x1e
    505e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5060:	b0 a1       	ldd	r27, Z+32	; 0x20
    5062:	89 2b       	or	r24, r25
    5064:	8a 2b       	or	r24, r26
    5066:	8b 2b       	or	r24, r27
    5068:	69 f4       	brne	.+26     	; 0x5084 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    506a:	61 2f       	mov	r22, r17
    506c:	83 e0       	ldi	r24, 0x03	; 3
    506e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    5072:	e0 91 4e 11 	lds	r30, 0x114E
    5076:	f0 91 4f 11 	lds	r31, 0x114F
    507a:	83 e0       	ldi	r24, 0x03	; 3
    507c:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    507e:	81 2f       	mov	r24, r17
    5080:	0e 94 fe 21 	call	0x43fc	; 0x43fc <nrk_rem_from_readyQ>
    5084:	86 e3       	ldi	r24, 0x36	; 54
    5086:	90 e1       	ldi	r25, 0x10	; 16
    5088:	9b 83       	std	Y+3, r25	; 0x03
    508a:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    508c:	00 e6       	ldi	r16, 0x60	; 96
    508e:	1a ee       	ldi	r17, 0xEA	; 234
    5090:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5092:	2a ef       	ldi	r18, 0xFA	; 250
    5094:	c2 2e       	mov	r12, r18
    5096:	d1 2c       	mov	r13, r1
    5098:	e1 2c       	mov	r14, r1
    509a:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    509c:	81 2c       	mov	r8, r1
    509e:	91 2c       	mov	r9, r1
    50a0:	54 01       	movw	r10, r8
    50a2:	83 94       	inc	r8
    50a4:	ea 81       	ldd	r30, Y+2	; 0x02
    50a6:	fb 81       	ldd	r31, Y+3	; 0x03
    50a8:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    50aa:	80 81       	ld	r24, Z
    50ac:	8f 3f       	cpi	r24, 0xFF	; 255
    50ae:	09 f4       	brne	.+2      	; 0x50b2 <_nrk_scheduler+0x24c>
    50b0:	04 c1       	rjmp	.+520    	; 0x52ba <_nrk_scheduler+0x454>
    50b2:	ea 81       	ldd	r30, Y+2	; 0x02
    50b4:	fb 81       	ldd	r31, Y+3	; 0x03
    50b6:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    50b8:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    50ba:	88 23       	and	r24, r24
    50bc:	09 f4       	brne	.+2      	; 0x50c0 <_nrk_scheduler+0x25a>
    50be:	67 c0       	rjmp	.+206    	; 0x518e <_nrk_scheduler+0x328>
    50c0:	ea 81       	ldd	r30, Y+2	; 0x02
    50c2:	fb 81       	ldd	r31, Y+3	; 0x03
    50c4:	80 81       	ld	r24, Z
    50c6:	84 30       	cpi	r24, 0x04	; 4
    50c8:	09 f4       	brne	.+2      	; 0x50cc <_nrk_scheduler+0x266>
    50ca:	61 c0       	rjmp	.+194    	; 0x518e <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    50cc:	44 84       	ldd	r4, Z+12	; 0x0c
    50ce:	55 84       	ldd	r5, Z+13	; 0x0d
    50d0:	66 84       	ldd	r6, Z+14	; 0x0e
    50d2:	77 84       	ldd	r7, Z+15	; 0x0f
    50d4:	60 91 d7 0f 	lds	r22, 0x0FD7
    50d8:	70 e0       	ldi	r23, 0x00	; 0
    50da:	80 e0       	ldi	r24, 0x00	; 0
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	46 16       	cp	r4, r22
    50e0:	57 06       	cpc	r5, r23
    50e2:	68 06       	cpc	r6, r24
    50e4:	79 06       	cpc	r7, r25
    50e6:	48 f0       	brcs	.+18     	; 0x50fa <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    50e8:	46 1a       	sub	r4, r22
    50ea:	57 0a       	sbc	r5, r23
    50ec:	68 0a       	sbc	r6, r24
    50ee:	79 0a       	sbc	r7, r25
    50f0:	44 86       	std	Z+12, r4	; 0x0c
    50f2:	55 86       	std	Z+13, r5	; 0x0d
    50f4:	66 86       	std	Z+14, r6	; 0x0e
    50f6:	77 86       	std	Z+15, r7	; 0x0f
    50f8:	06 c0       	rjmp	.+12     	; 0x5106 <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    50fa:	ea 81       	ldd	r30, Y+2	; 0x02
    50fc:	fb 81       	ldd	r31, Y+3	; 0x03
    50fe:	14 86       	std	Z+12, r1	; 0x0c
    5100:	15 86       	std	Z+13, r1	; 0x0d
    5102:	16 86       	std	Z+14, r1	; 0x0e
    5104:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    5106:	ea 81       	ldd	r30, Y+2	; 0x02
    5108:	fb 81       	ldd	r31, Y+3	; 0x03
    510a:	40 88       	ldd	r4, Z+16	; 0x10
    510c:	51 88       	ldd	r5, Z+17	; 0x11
    510e:	62 88       	ldd	r6, Z+18	; 0x12
    5110:	73 88       	ldd	r7, Z+19	; 0x13
    5112:	46 16       	cp	r4, r22
    5114:	57 06       	cpc	r5, r23
    5116:	68 06       	cpc	r6, r24
    5118:	79 06       	cpc	r7, r25
    511a:	48 f0       	brcs	.+18     	; 0x512e <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    511c:	46 1a       	sub	r4, r22
    511e:	57 0a       	sbc	r5, r23
    5120:	68 0a       	sbc	r6, r24
    5122:	79 0a       	sbc	r7, r25
    5124:	40 8a       	std	Z+16, r4	; 0x10
    5126:	51 8a       	std	Z+17, r5	; 0x11
    5128:	62 8a       	std	Z+18, r6	; 0x12
    512a:	73 8a       	std	Z+19, r7	; 0x13
    512c:	1e c0       	rjmp	.+60     	; 0x516a <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    512e:	ea 81       	ldd	r30, Y+2	; 0x02
    5130:	fb 81       	ldd	r31, Y+3	; 0x03
    5132:	20 8d       	ldd	r18, Z+24	; 0x18
    5134:	31 8d       	ldd	r19, Z+25	; 0x19
    5136:	42 8d       	ldd	r20, Z+26	; 0x1a
    5138:	53 8d       	ldd	r21, Z+27	; 0x1b
    513a:	62 17       	cp	r22, r18
    513c:	73 07       	cpc	r23, r19
    513e:	84 07       	cpc	r24, r20
    5140:	95 07       	cpc	r25, r21
    5142:	58 f4       	brcc	.+22     	; 0x515a <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    5144:	29 01       	movw	r4, r18
    5146:	3a 01       	movw	r6, r20
    5148:	46 1a       	sub	r4, r22
    514a:	57 0a       	sbc	r5, r23
    514c:	68 0a       	sbc	r6, r24
    514e:	79 0a       	sbc	r7, r25
    5150:	40 8a       	std	Z+16, r4	; 0x10
    5152:	51 8a       	std	Z+17, r5	; 0x11
    5154:	62 8a       	std	Z+18, r6	; 0x12
    5156:	73 8a       	std	Z+19, r7	; 0x13
    5158:	08 c0       	rjmp	.+16     	; 0x516a <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    515a:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <__udivmodsi4>
    515e:	ea 81       	ldd	r30, Y+2	; 0x02
    5160:	fb 81       	ldd	r31, Y+3	; 0x03
    5162:	60 8b       	std	Z+16, r22	; 0x10
    5164:	71 8b       	std	Z+17, r23	; 0x11
    5166:	82 8b       	std	Z+18, r24	; 0x12
    5168:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    516a:	ea 81       	ldd	r30, Y+2	; 0x02
    516c:	fb 81       	ldd	r31, Y+3	; 0x03
    516e:	80 89       	ldd	r24, Z+16	; 0x10
    5170:	91 89       	ldd	r25, Z+17	; 0x11
    5172:	a2 89       	ldd	r26, Z+18	; 0x12
    5174:	b3 89       	ldd	r27, Z+19	; 0x13
    5176:	89 2b       	or	r24, r25
    5178:	8a 2b       	or	r24, r26
    517a:	8b 2b       	or	r24, r27
    517c:	41 f4       	brne	.+16     	; 0x518e <_nrk_scheduler+0x328>
    517e:	80 8d       	ldd	r24, Z+24	; 0x18
    5180:	91 8d       	ldd	r25, Z+25	; 0x19
    5182:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5184:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5186:	80 8b       	std	Z+16, r24	; 0x10
    5188:	91 8b       	std	Z+17, r25	; 0x11
    518a:	a2 8b       	std	Z+18, r26	; 0x12
    518c:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    518e:	ea 81       	ldd	r30, Y+2	; 0x02
    5190:	fb 81       	ldd	r31, Y+3	; 0x03
    5192:	80 81       	ld	r24, Z
    5194:	83 30       	cpi	r24, 0x03	; 3
    5196:	09 f0       	breq	.+2      	; 0x519a <_nrk_scheduler+0x334>
    5198:	90 c0       	rjmp	.+288    	; 0x52ba <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    519a:	84 85       	ldd	r24, Z+12	; 0x0c
    519c:	95 85       	ldd	r25, Z+13	; 0x0d
    519e:	a6 85       	ldd	r26, Z+14	; 0x0e
    51a0:	b7 85       	ldd	r27, Z+15	; 0x0f
    51a2:	89 2b       	or	r24, r25
    51a4:	8a 2b       	or	r24, r26
    51a6:	8b 2b       	or	r24, r27
    51a8:	09 f0       	breq	.+2      	; 0x51ac <_nrk_scheduler+0x346>
    51aa:	74 c0       	rjmp	.+232    	; 0x5294 <_nrk_scheduler+0x42e>
    51ac:	df 01       	movw	r26, r30
    51ae:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    51b0:	8c 91       	ld	r24, X
    51b2:	9f 01       	movw	r18, r30
    51b4:	23 50       	subi	r18, 0x03	; 3
    51b6:	31 09       	sbc	r19, r1
    51b8:	88 23       	and	r24, r24
    51ba:	a9 f0       	breq	.+42     	; 0x51e6 <_nrk_scheduler+0x380>
    51bc:	f9 01       	movw	r30, r18
    51be:	80 81       	ld	r24, Z
    51c0:	88 23       	and	r24, r24
    51c2:	89 f0       	breq	.+34     	; 0x51e6 <_nrk_scheduler+0x380>
    51c4:	b5 01       	movw	r22, r10
    51c6:	a4 01       	movw	r20, r8
    51c8:	00 90 3e 11 	lds	r0, 0x113E
    51cc:	04 c0       	rjmp	.+8      	; 0x51d6 <_nrk_scheduler+0x370>
    51ce:	44 0f       	add	r20, r20
    51d0:	55 1f       	adc	r21, r21
    51d2:	66 1f       	adc	r22, r22
    51d4:	77 1f       	adc	r23, r23
    51d6:	0a 94       	dec	r0
    51d8:	d2 f7       	brpl	.-12     	; 0x51ce <_nrk_scheduler+0x368>
    51da:	ea 81       	ldd	r30, Y+2	; 0x02
    51dc:	fb 81       	ldd	r31, Y+3	; 0x03
    51de:	40 87       	std	Z+8, r20	; 0x08
    51e0:	51 87       	std	Z+9, r21	; 0x09
    51e2:	62 87       	std	Z+10, r22	; 0x0a
    51e4:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    51e6:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    51e8:	f9 01       	movw	r30, r18
    51ea:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    51ec:	ea 81       	ldd	r30, Y+2	; 0x02
    51ee:	fb 81       	ldd	r31, Y+3	; 0x03
    51f0:	a0 a1       	ldd	r26, Z+32	; 0x20
    51f2:	b1 a1       	ldd	r27, Z+33	; 0x21
    51f4:	a1 30       	cpi	r26, 0x01	; 1
    51f6:	b1 05       	cpc	r27, r1
    51f8:	19 f5       	brne	.+70     	; 0x5240 <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    51fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    51fc:	95 8d       	ldd	r25, Z+29	; 0x1d
    51fe:	a6 8d       	ldd	r26, Z+30	; 0x1e
    5200:	b7 8d       	ldd	r27, Z+31	; 0x1f
    5202:	84 8b       	std	Z+20, r24	; 0x14
    5204:	95 8b       	std	Z+21, r25	; 0x15
    5206:	a6 8b       	std	Z+22, r26	; 0x16
    5208:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    520a:	92 e0       	ldi	r25, 0x02	; 2
    520c:	49 2e       	mov	r4, r25
    520e:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    5210:	80 89       	ldd	r24, Z+16	; 0x10
    5212:	91 89       	ldd	r25, Z+17	; 0x11
    5214:	a2 89       	ldd	r26, Z+18	; 0x12
    5216:	b3 89       	ldd	r27, Z+19	; 0x13
    5218:	84 87       	std	Z+12, r24	; 0x0c
    521a:	95 87       	std	Z+13, r25	; 0x0d
    521c:	a6 87       	std	Z+14, r26	; 0x0e
    521e:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5220:	80 8d       	ldd	r24, Z+24	; 0x18
    5222:	91 8d       	ldd	r25, Z+25	; 0x19
    5224:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5226:	b3 8d       	ldd	r27, Z+27	; 0x1b
    5228:	89 2b       	or	r24, r25
    522a:	8a 2b       	or	r24, r26
    522c:	8b 2b       	or	r24, r27
    522e:	21 f4       	brne	.+8      	; 0x5238 <_nrk_scheduler+0x3d2>
    5230:	c4 86       	std	Z+12, r12	; 0x0c
    5232:	d5 86       	std	Z+13, r13	; 0x0d
    5234:	e6 86       	std	Z+14, r14	; 0x0e
    5236:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	0e 94 4e 21 	call	0x429c	; 0x429c <nrk_add_to_readyQ>
    523e:	2a c0       	rjmp	.+84     	; 0x5294 <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    5240:	ea 81       	ldd	r30, Y+2	; 0x02
    5242:	fb 81       	ldd	r31, Y+3	; 0x03
    5244:	44 8d       	ldd	r20, Z+28	; 0x1c
    5246:	55 8d       	ldd	r21, Z+29	; 0x1d
    5248:	66 8d       	ldd	r22, Z+30	; 0x1e
    524a:	77 8d       	ldd	r23, Z+31	; 0x1f
    524c:	44 8b       	std	Z+20, r20	; 0x14
    524e:	55 8b       	std	Z+21, r21	; 0x15
    5250:	66 8b       	std	Z+22, r22	; 0x16
    5252:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    5254:	40 8c       	ldd	r4, Z+24	; 0x18
    5256:	51 8c       	ldd	r5, Z+25	; 0x19
    5258:	62 8c       	ldd	r6, Z+26	; 0x1a
    525a:	73 8c       	ldd	r7, Z+27	; 0x1b
    525c:	11 97       	sbiw	r26, 0x01	; 1
    525e:	a3 01       	movw	r20, r6
    5260:	92 01       	movw	r18, r4
    5262:	0e 94 29 30 	call	0x6052	; 0x6052 <__muluhisi3>
    5266:	64 87       	std	Z+12, r22	; 0x0c
    5268:	75 87       	std	Z+13, r23	; 0x0d
    526a:	86 87       	std	Z+14, r24	; 0x0e
    526c:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    526e:	60 8b       	std	Z+16, r22	; 0x10
    5270:	71 8b       	std	Z+17, r23	; 0x11
    5272:	82 8b       	std	Z+18, r24	; 0x12
    5274:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    5276:	45 28       	or	r4, r5
    5278:	46 28       	or	r4, r6
    527a:	47 28       	or	r4, r7
    527c:	21 f4       	brne	.+8      	; 0x5286 <_nrk_scheduler+0x420>
    527e:	c4 86       	std	Z+12, r12	; 0x0c
    5280:	d5 86       	std	Z+13, r13	; 0x0d
    5282:	e6 86       	std	Z+14, r14	; 0x0e
    5284:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    5286:	44 24       	eor	r4, r4
    5288:	43 94       	inc	r4
    528a:	51 2c       	mov	r5, r1
    528c:	ea 81       	ldd	r30, Y+2	; 0x02
    528e:	fb 81       	ldd	r31, Y+3	; 0x03
    5290:	51 a2       	std	Z+33, r5	; 0x21
    5292:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    5294:	ea 81       	ldd	r30, Y+2	; 0x02
    5296:	fb 81       	ldd	r31, Y+3	; 0x03
    5298:	84 85       	ldd	r24, Z+12	; 0x0c
    529a:	95 85       	ldd	r25, Z+13	; 0x0d
    529c:	a6 85       	ldd	r26, Z+14	; 0x0e
    529e:	b7 85       	ldd	r27, Z+15	; 0x0f
    52a0:	00 97       	sbiw	r24, 0x00	; 0
    52a2:	a1 05       	cpc	r26, r1
    52a4:	b1 05       	cpc	r27, r1
    52a6:	49 f0       	breq	.+18     	; 0x52ba <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    52a8:	a8 01       	movw	r20, r16
    52aa:	60 e0       	ldi	r22, 0x00	; 0
    52ac:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    52ae:	84 17       	cp	r24, r20
    52b0:	95 07       	cpc	r25, r21
    52b2:	a6 07       	cpc	r26, r22
    52b4:	b7 07       	cpc	r27, r23
    52b6:	08 f4       	brcc	.+2      	; 0x52ba <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    52b8:	8c 01       	movw	r16, r24
    52ba:	f9 81       	ldd	r31, Y+1	; 0x01
    52bc:	ff 5f       	subi	r31, 0xFF	; 255
    52be:	f9 83       	std	Y+1, r31	; 0x01
    52c0:	2a 81       	ldd	r18, Y+2	; 0x02
    52c2:	3b 81       	ldd	r19, Y+3	; 0x03
    52c4:	25 5d       	subi	r18, 0xD5	; 213
    52c6:	3f 4f       	sbci	r19, 0xFF	; 255
    52c8:	3b 83       	std	Y+3, r19	; 0x03
    52ca:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    52cc:	f6 30       	cpi	r31, 0x06	; 6
    52ce:	09 f0       	breq	.+2      	; 0x52d2 <_nrk_scheduler+0x46c>
    52d0:	e9 ce       	rjmp	.-558    	; 0x50a4 <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    52d2:	0e 94 3d 21 	call	0x427a	; 0x427a <nrk_get_high_ready_task_ID>
    52d6:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    52d8:	3b e2       	ldi	r19, 0x2B	; 43
    52da:	83 02       	muls	r24, r19
    52dc:	f0 01       	movw	r30, r0
    52de:	11 24       	eor	r1, r1
    52e0:	e3 5d       	subi	r30, 0xD3	; 211
    52e2:	ff 4e       	sbci	r31, 0xEF	; 239
    52e4:	22 85       	ldd	r18, Z+10	; 0x0a
    52e6:	20 93 50 11 	sts	0x1150, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    52ea:	f0 93 40 11 	sts	0x1140, r31
    52ee:	e0 93 3f 11 	sts	0x113F, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    52f2:	88 23       	and	r24, r24
    52f4:	d9 f0       	breq	.+54     	; 0x532c <_nrk_scheduler+0x4c6>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    52f6:	85 a1       	ldd	r24, Z+37	; 0x25
    52f8:	96 a1       	ldd	r25, Z+38	; 0x26
    52fa:	a7 a1       	ldd	r26, Z+39	; 0x27
    52fc:	b0 a5       	ldd	r27, Z+40	; 0x28
    52fe:	89 2b       	or	r24, r25
    5300:	8a 2b       	or	r24, r26
    5302:	8b 2b       	or	r24, r27
    5304:	99 f0       	breq	.+38     	; 0x532c <_nrk_scheduler+0x4c6>
    5306:	85 8d       	ldd	r24, Z+29	; 0x1d
    5308:	96 8d       	ldd	r25, Z+30	; 0x1e
    530a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    530c:	b0 a1       	ldd	r27, Z+32	; 0x20
    530e:	8a 3f       	cpi	r24, 0xFA	; 250
    5310:	91 05       	cpc	r25, r1
    5312:	a1 05       	cpc	r26, r1
    5314:	b1 05       	cpc	r27, r1
    5316:	50 f4       	brcc	.+20     	; 0x532c <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    5318:	a8 01       	movw	r20, r16
    531a:	60 e0       	ldi	r22, 0x00	; 0
    531c:	70 e0       	ldi	r23, 0x00	; 0
    531e:	84 17       	cp	r24, r20
    5320:	95 07       	cpc	r25, r21
    5322:	a6 07       	cpc	r26, r22
    5324:	b7 07       	cpc	r27, r23
    5326:	10 f4       	brcc	.+4      	; 0x532c <_nrk_scheduler+0x4c6>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    5328:	8c 01       	movw	r16, r24
    532a:	05 c0       	rjmp	.+10     	; 0x5336 <_nrk_scheduler+0x4d0>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    532c:	0b 3f       	cpi	r16, 0xFB	; 251
    532e:	11 05       	cpc	r17, r1
    5330:	10 f0       	brcs	.+4      	; 0x5336 <_nrk_scheduler+0x4d0>
    5332:	0a ef       	ldi	r16, 0xFA	; 250
    5334:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    5336:	20 93 41 11 	sts	0x1141, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    533a:	f0 93 4f 11 	sts	0x114F, r31
    533e:	e0 93 4e 11 	sts	0x114E, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    5342:	00 93 d7 0f 	sts	0x0FD7, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    5346:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    534a:	28 2f       	mov	r18, r24
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	2f 5f       	subi	r18, 0xFF	; 255
    5350:	3f 4f       	sbci	r19, 0xFF	; 255
    5352:	20 17       	cp	r18, r16
    5354:	31 07       	cpc	r19, r17
    5356:	40 f0       	brcs	.+16     	; 0x5368 <_nrk_scheduler+0x502>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    5358:	0e 94 26 2b 	call	0x564c	; 0x564c <_nrk_os_timer_get>
    535c:	08 2f       	mov	r16, r24
    535e:	10 e0       	ldi	r17, 0x00	; 0
    5360:	0e 5f       	subi	r16, 0xFE	; 254
    5362:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    5364:	00 93 d7 0f 	sts	0x0FD7, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    5368:	f1 10       	cpse	r15, r1
    536a:	10 92 42 11 	sts	0x1142, r1

    _nrk_set_next_wakeup(next_wake);
    536e:	80 2f       	mov	r24, r16
    5370:	0e 94 c4 2a 	call	0x5588	; 0x5588 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    5374:	6c ed       	ldi	r22, 0xDC	; 220
    5376:	75 e0       	ldi	r23, 0x05	; 5
    5378:	c1 01       	movw	r24, r2
    537a:	0e 94 2c 2a 	call	0x5458	; 0x5458 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    537e:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	df 91       	pop	r29
    538a:	cf 91       	pop	r28
    538c:	1f 91       	pop	r17
    538e:	0f 91       	pop	r16
    5390:	ff 90       	pop	r15
    5392:	ef 90       	pop	r14
    5394:	df 90       	pop	r13
    5396:	cf 90       	pop	r12
    5398:	bf 90       	pop	r11
    539a:	af 90       	pop	r10
    539c:	9f 90       	pop	r9
    539e:	8f 90       	pop	r8
    53a0:	7f 90       	pop	r7
    53a2:	6f 90       	pop	r6
    53a4:	5f 90       	pop	r5
    53a6:	4f 90       	pop	r4
    53a8:	3f 90       	pop	r3
    53aa:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    53ac:	0c 94 54 2e 	jmp	0x5ca8	; 0x5ca8 <nrk_start_high_ready_task>

000053b0 <nrk_spin_wait_us>:
	...
    53c8:	01 97       	sbiw	r24, 0x01	; 1
    53ca:	91 f7       	brne	.-28     	; 0x53b0 <nrk_spin_wait_us>
    53cc:	08 95       	ret

000053ce <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    53ce:	10 92 21 01 	sts	0x0121, r1
    53d2:	08 95       	ret

000053d4 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    53d4:	89 e0       	ldi	r24, 0x09	; 9
    53d6:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    53da:	8d e8       	ldi	r24, 0x8D	; 141
    53dc:	9c e3       	ldi	r25, 0x3C	; 60
    53de:	90 93 29 01 	sts	0x0129, r25
    53e2:	80 93 28 01 	sts	0x0128, r24
    53e6:	08 95       	ret

000053e8 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    53e8:	10 92 25 01 	sts	0x0125, r1
    53ec:	10 92 24 01 	sts	0x0124, r1
    53f0:	08 95       	ret

000053f2 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	00 d0       	rcall	.+0      	; 0x53f8 <_nrk_precision_os_timer_get+0x6>
    53f8:	cd b7       	in	r28, 0x3d	; 61
    53fa:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    53fc:	80 91 24 01 	lds	r24, 0x0124
    5400:	90 91 25 01 	lds	r25, 0x0125
    5404:	9a 83       	std	Y+2, r25	; 0x02
    5406:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    5408:	89 81       	ldd	r24, Y+1	; 0x01
    540a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    540c:	0f 90       	pop	r0
    540e:	0f 90       	pop	r0
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	08 95       	ret

00005416 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    5416:	10 92 81 00 	sts	0x0081, r1
    541a:	08 95       	ret

0000541c <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	80 93 81 00 	sts	0x0081, r24
    5422:	08 95       	ret

00005424 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5424:	83 b5       	in	r24, 0x23	; 35
    5426:	81 60       	ori	r24, 0x01	; 1
    5428:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    542a:	10 92 85 00 	sts	0x0085, r1
    542e:	10 92 84 00 	sts	0x0084, r1
    5432:	08 95       	ret

00005434 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    5434:	cf 93       	push	r28
    5436:	df 93       	push	r29
    5438:	00 d0       	rcall	.+0      	; 0x543a <_nrk_high_speed_timer_get+0x6>
    543a:	cd b7       	in	r28, 0x3d	; 61
    543c:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    543e:	80 91 84 00 	lds	r24, 0x0084
    5442:	90 91 85 00 	lds	r25, 0x0085
    5446:	9a 83       	std	Y+2, r25	; 0x02
    5448:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    544a:	89 81       	ldd	r24, Y+1	; 0x01
    544c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    544e:	0f 90       	pop	r0
    5450:	0f 90       	pop	r0
    5452:	df 91       	pop	r29
    5454:	cf 91       	pop	r28
    5456:	08 95       	ret

00005458 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    5458:	cf 92       	push	r12
    545a:	df 92       	push	r13
    545c:	ef 92       	push	r14
    545e:	ff 92       	push	r15
    5460:	cf 93       	push	r28
    5462:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    5464:	ec 01       	movw	r28, r24
    5466:	cc 0f       	add	r28, r28
    5468:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    546a:	c9 37       	cpi	r28, 0x79	; 121
    546c:	8f ef       	ldi	r24, 0xFF	; 255
    546e:	d8 07       	cpc	r29, r24
    5470:	10 f0       	brcs	.+4      	; 0x5476 <nrk_high_speed_timer_wait+0x1e>
    5472:	c0 e0       	ldi	r28, 0x00	; 0
    5474:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    5476:	6b 01       	movw	r12, r22
    5478:	e1 2c       	mov	r14, r1
    547a:	f1 2c       	mov	r15, r1
    547c:	cc 0e       	add	r12, r28
    547e:	dd 1e       	adc	r13, r29
    5480:	e1 1c       	adc	r14, r1
    5482:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	c8 16       	cp	r12, r24
    5488:	d1 04       	cpc	r13, r1
    548a:	e8 06       	cpc	r14, r24
    548c:	f1 04       	cpc	r15, r1
    548e:	40 f0       	brcs	.+16     	; 0x54a0 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    5490:	81 e0       	ldi	r24, 0x01	; 1
    5492:	e8 1a       	sub	r14, r24
    5494:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    5496:	0e 94 1a 2a 	call	0x5434	; 0x5434 <_nrk_high_speed_timer_get>
    549a:	c8 17       	cp	r28, r24
    549c:	d9 07       	cpc	r29, r25
    549e:	d8 f3       	brcs	.-10     	; 0x5496 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    54a0:	0e 94 1a 2a 	call	0x5434	; 0x5434 <_nrk_high_speed_timer_get>
    54a4:	8c 15       	cp	r24, r12
    54a6:	9d 05       	cpc	r25, r13
    54a8:	d8 f3       	brcs	.-10     	; 0x54a0 <nrk_high_speed_timer_wait+0x48>
}
    54aa:	df 91       	pop	r29
    54ac:	cf 91       	pop	r28
    54ae:	ff 90       	pop	r15
    54b0:	ef 90       	pop	r14
    54b2:	df 90       	pop	r13
    54b4:	cf 90       	pop	r12
    54b6:	08 95       	ret

000054b8 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    54b8:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    54bc:	e0 e7       	ldi	r30, 0x70	; 112
    54be:	f0 e0       	ldi	r31, 0x00	; 0
    54c0:	80 81       	ld	r24, Z
    54c2:	8d 7f       	andi	r24, 0xFD	; 253
    54c4:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    54c6:	80 81       	ld	r24, Z
    54c8:	8e 7f       	andi	r24, 0xFE	; 254
    54ca:	80 83       	st	Z, r24
    54cc:	08 95       	ret

000054ce <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    54ce:	80 93 b2 00 	sts	0x00B2, r24
    54d2:	08 95       	ret

000054d4 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    54d4:	e0 e7       	ldi	r30, 0x70	; 112
    54d6:	f0 e0       	ldi	r31, 0x00	; 0
    54d8:	80 81       	ld	r24, Z
    54da:	83 60       	ori	r24, 0x03	; 3
    54dc:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    54de:	83 e0       	ldi	r24, 0x03	; 3
    54e0:	80 93 b1 00 	sts	0x00B1, r24
    54e4:	08 95       	ret

000054e6 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    54e6:	83 b5       	in	r24, 0x23	; 35
    54e8:	82 60       	ori	r24, 0x02	; 2
    54ea:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    54ec:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    54f0:	10 92 d5 0f 	sts	0x0FD5, r1
    _nrk_prev_timer_val=0;
    54f4:	10 92 d7 0f 	sts	0x0FD7, r1
    54f8:	08 95       	ret

000054fa <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    54fe:	8e ef       	ldi	r24, 0xFE	; 254
    5500:	80 93 d7 0f 	sts	0x0FD7, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    5504:	80 e2       	ldi	r24, 0x20	; 32
    5506:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    550a:	80 91 d7 0f 	lds	r24, 0x0FD7
    550e:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    5512:	83 e0       	ldi	r24, 0x03	; 3
    5514:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    5516:	92 e0       	ldi	r25, 0x02	; 2
    5518:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    551c:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    5520:	93 b5       	in	r25, 0x23	; 35
    5522:	92 60       	ori	r25, 0x02	; 2
    5524:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    5526:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    5528:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    552a:	83 b5       	in	r24, 0x23	; 35
    552c:	82 60       	ori	r24, 0x02	; 2
    552e:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    5530:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    553a:	10 92 85 00 	sts	0x0085, r1
    553e:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5542:	83 b5       	in	r24, 0x23	; 35
    5544:	82 60       	ori	r24, 0x02	; 2
    5546:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5548:	83 b5       	in	r24, 0x23	; 35
    554a:	81 60       	ori	r24, 0x01	; 1
    554c:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    554e:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    5552:	c4 e2       	ldi	r28, 0x24	; 36
    5554:	d1 e0       	ldi	r29, 0x01	; 1
    5556:	19 82       	std	Y+1, r1	; 0x01
    5558:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    555a:	83 b5       	in	r24, 0x23	; 35
    555c:	82 60       	ori	r24, 0x02	; 2
    555e:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5560:	83 b5       	in	r24, 0x23	; 35
    5562:	81 60       	ori	r24, 0x01	; 1
    5564:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    5566:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    556a:	19 82       	std	Y+1, r1	; 0x01
    556c:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    556e:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    5572:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    5576:	10 92 d5 0f 	sts	0x0FD5, r1
}
    557a:	df 91       	pop	r29
    557c:	cf 91       	pop	r28
    557e:	08 95       	ret

00005580 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    5580:	80 91 b3 00 	lds	r24, 0x00B3
}
    5584:	8f 5f       	subi	r24, 0xFF	; 255
    5586:	08 95       	ret

00005588 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    5588:	81 50       	subi	r24, 0x01	; 1
    558a:	80 93 b3 00 	sts	0x00B3, r24
    558e:	08 95       	ret

00005590 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5590:	81 11       	cpse	r24, r1
    5592:	02 c0       	rjmp	.+4      	; 0x5598 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    5594:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    5598:	8f ef       	ldi	r24, 0xFF	; 255
    559a:	08 95       	ret

0000559c <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    559c:	81 11       	cpse	r24, r1
    559e:	06 c0       	rjmp	.+12     	; 0x55ac <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    55a0:	10 92 95 00 	sts	0x0095, r1
    55a4:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	08 95       	ret
	}
return NRK_ERROR;
    55ac:	8f ef       	ldi	r24, 0xFF	; 255
}
    55ae:	08 95       	ret

000055b0 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    55b0:	81 11       	cpse	r24, r1
    55b2:	05 c0       	rjmp	.+10     	; 0x55be <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    55b4:	80 91 94 00 	lds	r24, 0x0094
    55b8:	90 91 95 00 	lds	r25, 0x0095
    55bc:	08 95       	ret
	}
return 0;
    55be:	80 e0       	ldi	r24, 0x00	; 0
    55c0:	90 e0       	ldi	r25, 0x00	; 0

}
    55c2:	08 95       	ret

000055c4 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    55c4:	81 11       	cpse	r24, r1
    55c6:	05 c0       	rjmp	.+10     	; 0x55d2 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    55c8:	82 e0       	ldi	r24, 0x02	; 2
    55ca:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    55ce:	81 e0       	ldi	r24, 0x01	; 1
    55d0:	08 95       	ret
	}
return NRK_ERROR;
    55d2:	8f ef       	ldi	r24, 0xFF	; 255
}
    55d4:	08 95       	ret

000055d6 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    55d6:	81 11       	cpse	r24, r1
    55d8:	35 c0       	rjmp	.+106    	; 0x5644 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    55da:	cb 01       	movw	r24, r22
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	05 97       	sbiw	r24, 0x05	; 5
    55e0:	10 f4       	brcc	.+4      	; 0x55e6 <nrk_timer_int_configure+0x10>
    55e2:	60 93 d6 0f 	sts	0x0FD6, r22
	TCCR3A = 0;  
    55e6:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    55ea:	88 e0       	ldi	r24, 0x08	; 8
    55ec:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    55f0:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    55f4:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    55f8:	30 93 d4 0f 	sts	0x0FD4, r19
    55fc:	20 93 d3 0f 	sts	0x0FD3, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    5600:	80 91 d6 0f 	lds	r24, 0x0FD6
    5604:	81 30       	cpi	r24, 0x01	; 1
    5606:	21 f4       	brne	.+8      	; 0x5610 <nrk_timer_int_configure+0x3a>
    5608:	80 91 91 00 	lds	r24, 0x0091
    560c:	81 60       	ori	r24, 0x01	; 1
    560e:	11 c0       	rjmp	.+34     	; 0x5632 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    5610:	82 30       	cpi	r24, 0x02	; 2
    5612:	21 f4       	brne	.+8      	; 0x561c <nrk_timer_int_configure+0x46>
    5614:	80 91 91 00 	lds	r24, 0x0091
    5618:	82 60       	ori	r24, 0x02	; 2
    561a:	0b c0       	rjmp	.+22     	; 0x5632 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    561c:	83 30       	cpi	r24, 0x03	; 3
    561e:	21 f4       	brne	.+8      	; 0x5628 <nrk_timer_int_configure+0x52>
    5620:	80 91 91 00 	lds	r24, 0x0091
    5624:	83 60       	ori	r24, 0x03	; 3
    5626:	05 c0       	rjmp	.+10     	; 0x5632 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    5628:	84 30       	cpi	r24, 0x04	; 4
    562a:	31 f4       	brne	.+12     	; 0x5638 <nrk_timer_int_configure+0x62>
    562c:	80 91 91 00 	lds	r24, 0x0091
    5630:	84 60       	ori	r24, 0x04	; 4
    5632:	80 93 91 00 	sts	0x0091, r24
    5636:	08 c0       	rjmp	.+16     	; 0x5648 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    5638:	85 30       	cpi	r24, 0x05	; 5
    563a:	31 f4       	brne	.+12     	; 0x5648 <nrk_timer_int_configure+0x72>
    563c:	80 91 91 00 	lds	r24, 0x0091
    5640:	85 60       	ori	r24, 0x05	; 5
    5642:	f7 cf       	rjmp	.-18     	; 0x5632 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    5644:	8f ef       	ldi	r24, 0xFF	; 255
    5646:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    5648:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    564a:	08 95       	ret

0000564c <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    564c:	80 91 b2 00 	lds	r24, 0x00B2
}
    5650:	08 95       	ret

00005652 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    5652:	1f 92       	push	r1
    5654:	0f 92       	push	r0
    5656:	0f b6       	in	r0, 0x3f	; 63
    5658:	0f 92       	push	r0
    565a:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    565c:	60 e0       	ldi	r22, 0x00	; 0
    565e:	8a e0       	ldi	r24, 0x0A	; 10
    5660:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
	while(1);
    5664:	ff cf       	rjmp	.-2      	; 0x5664 <__vector_default+0x12>

00005666 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    5666:	0f 92       	push	r0
    5668:	0f b6       	in	r0, 0x3f	; 63
    566a:	0f 92       	push	r0
    566c:	1f 92       	push	r1
    566e:	2f 92       	push	r2
    5670:	3f 92       	push	r3
    5672:	4f 92       	push	r4
    5674:	5f 92       	push	r5
    5676:	6f 92       	push	r6
    5678:	7f 92       	push	r7
    567a:	8f 92       	push	r8
    567c:	9f 92       	push	r9
    567e:	af 92       	push	r10
    5680:	bf 92       	push	r11
    5682:	cf 92       	push	r12
    5684:	df 92       	push	r13
    5686:	ef 92       	push	r14
    5688:	ff 92       	push	r15
    568a:	0f 93       	push	r16
    568c:	1f 93       	push	r17
    568e:	2f 93       	push	r18
    5690:	3f 93       	push	r19
    5692:	4f 93       	push	r20
    5694:	5f 93       	push	r21
    5696:	6f 93       	push	r22
    5698:	7f 93       	push	r23
    569a:	8f 93       	push	r24
    569c:	9f 93       	push	r25
    569e:	af 93       	push	r26
    56a0:	bf 93       	push	r27
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	ef 93       	push	r30
    56a8:	ff 93       	push	r31
    56aa:	a0 91 4e 11 	lds	r26, 0x114E
    56ae:	b0 91 4f 11 	lds	r27, 0x114F
    56b2:	0d b6       	in	r0, 0x3d	; 61
    56b4:	0d 92       	st	X+, r0
    56b6:	0e b6       	in	r0, 0x3e	; 62
    56b8:	0d 92       	st	X+, r0
    56ba:	1f 92       	push	r1
    56bc:	a0 91 25 09 	lds	r26, 0x0925
    56c0:	b0 91 26 09 	lds	r27, 0x0926
    56c4:	1e 90       	ld	r1, -X
    56c6:	be bf       	out	0x3e, r27	; 62
    56c8:	ad bf       	out	0x3d, r26	; 61
    56ca:	08 95       	ret

000056cc <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    56cc:	1f 92       	push	r1
    56ce:	0f 92       	push	r0
    56d0:	0f b6       	in	r0, 0x3f	; 63
    56d2:	0f 92       	push	r0
    56d4:	11 24       	eor	r1, r1
    56d6:	0b b6       	in	r0, 0x3b	; 59
    56d8:	0f 92       	push	r0
    56da:	2f 93       	push	r18
    56dc:	3f 93       	push	r19
    56de:	4f 93       	push	r20
    56e0:	5f 93       	push	r21
    56e2:	6f 93       	push	r22
    56e4:	7f 93       	push	r23
    56e6:	8f 93       	push	r24
    56e8:	9f 93       	push	r25
    56ea:	af 93       	push	r26
    56ec:	bf 93       	push	r27
    56ee:	ef 93       	push	r30
    56f0:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    56f2:	e0 91 d3 0f 	lds	r30, 0x0FD3
    56f6:	f0 91 d4 0f 	lds	r31, 0x0FD4
    56fa:	30 97       	sbiw	r30, 0x00	; 0
    56fc:	11 f0       	breq	.+4      	; 0x5702 <__vector_32+0x36>
    56fe:	09 95       	icall
    5700:	04 c0       	rjmp	.+8      	; 0x570a <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5702:	60 e0       	ldi	r22, 0x00	; 0
    5704:	8a e0       	ldi	r24, 0x0A	; 10
    5706:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
	return;  	
}
    570a:	ff 91       	pop	r31
    570c:	ef 91       	pop	r30
    570e:	bf 91       	pop	r27
    5710:	af 91       	pop	r26
    5712:	9f 91       	pop	r25
    5714:	8f 91       	pop	r24
    5716:	7f 91       	pop	r23
    5718:	6f 91       	pop	r22
    571a:	5f 91       	pop	r21
    571c:	4f 91       	pop	r20
    571e:	3f 91       	pop	r19
    5720:	2f 91       	pop	r18
    5722:	0f 90       	pop	r0
    5724:	0b be       	out	0x3b, r0	; 59
    5726:	0f 90       	pop	r0
    5728:	0f be       	out	0x3f, r0	; 63
    572a:	0f 90       	pop	r0
    572c:	1f 90       	pop	r1
    572e:	18 95       	reti

00005730 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    5730:	1f 92       	push	r1
    5732:	0f 92       	push	r0
    5734:	0f b6       	in	r0, 0x3f	; 63
    5736:	0f 92       	push	r0
    5738:	11 24       	eor	r1, r1

	return;  	
} 
    573a:	0f 90       	pop	r0
    573c:	0f be       	out	0x3f, r0	; 63
    573e:	0f 90       	pop	r0
    5740:	1f 90       	pop	r1
    5742:	18 95       	reti

00005744 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    5744:	04 b6       	in	r0, 0x34	; 52
    5746:	03 fe       	sbrs	r0, 3
    5748:	02 c0       	rjmp	.+4      	; 0x574e <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    574a:	80 e1       	ldi	r24, 0x10	; 16
    574c:	01 c0       	rjmp	.+2      	; 0x5750 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    574e:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    5750:	04 b6       	in	r0, 0x34	; 52
    5752:	02 fe       	sbrs	r0, 2
    5754:	06 c0       	rjmp	.+12     	; 0x5762 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    5756:	94 b7       	in	r25, 0x34	; 52
    5758:	9b 7f       	andi	r25, 0xFB	; 251
    575a:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    575c:	04 b6       	in	r0, 0x34	; 52
    575e:	00 fe       	sbrs	r0, 0
		error|=0x04;
    5760:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    5762:	04 b6       	in	r0, 0x34	; 52
    5764:	01 fe       	sbrs	r0, 1
    5766:	05 c0       	rjmp	.+10     	; 0x5772 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    5768:	94 b7       	in	r25, 0x34	; 52
    576a:	9d 7f       	andi	r25, 0xFD	; 253
    576c:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    576e:	82 60       	ori	r24, 0x02	; 2
    5770:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    5772:	81 11       	cpse	r24, r1
    5774:	0c c0       	rjmp	.+24     	; 0x578e <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    5776:	04 b6       	in	r0, 0x34	; 52
    5778:	00 fe       	sbrs	r0, 0
    577a:	04 c0       	rjmp	.+8      	; 0x5784 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    577c:	94 b7       	in	r25, 0x34	; 52
    577e:	9e 7f       	andi	r25, 0xFE	; 254
    5780:	94 bf       	out	0x34, r25	; 52
    5782:	01 c0       	rjmp	.+2      	; 0x5786 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    5784:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    5786:	90 91 b0 00 	lds	r25, 0x00B0
    578a:	91 11       	cpse	r25, r1
    578c:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    578e:	08 95       	ret

00005790 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    5790:	81 11       	cpse	r24, r1
    5792:	02 c0       	rjmp	.+4      	; 0x5798 <nrk_ext_int_enable+0x8>
    5794:	e8 9a       	sbi	0x1d, 0	; 29
    5796:	39 c0       	rjmp	.+114    	; 0x580a <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    5798:	81 30       	cpi	r24, 0x01	; 1
    579a:	11 f4       	brne	.+4      	; 0x57a0 <nrk_ext_int_enable+0x10>
    579c:	e9 9a       	sbi	0x1d, 1	; 29
    579e:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    57a0:	82 30       	cpi	r24, 0x02	; 2
    57a2:	11 f4       	brne	.+4      	; 0x57a8 <nrk_ext_int_enable+0x18>
    57a4:	ea 9a       	sbi	0x1d, 2	; 29
    57a6:	31 c0       	rjmp	.+98     	; 0x580a <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    57a8:	83 30       	cpi	r24, 0x03	; 3
    57aa:	21 f4       	brne	.+8      	; 0x57b4 <nrk_ext_int_enable+0x24>
    57ac:	80 91 6b 00 	lds	r24, 0x006B
    57b0:	81 60       	ori	r24, 0x01	; 1
    57b2:	29 c0       	rjmp	.+82     	; 0x5806 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    57b4:	84 30       	cpi	r24, 0x04	; 4
    57b6:	21 f4       	brne	.+8      	; 0x57c0 <nrk_ext_int_enable+0x30>
    57b8:	80 91 6b 00 	lds	r24, 0x006B
    57bc:	82 60       	ori	r24, 0x02	; 2
    57be:	23 c0       	rjmp	.+70     	; 0x5806 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    57c0:	85 30       	cpi	r24, 0x05	; 5
    57c2:	21 f4       	brne	.+8      	; 0x57cc <nrk_ext_int_enable+0x3c>
    57c4:	80 91 6b 00 	lds	r24, 0x006B
    57c8:	84 60       	ori	r24, 0x04	; 4
    57ca:	1d c0       	rjmp	.+58     	; 0x5806 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    57cc:	86 30       	cpi	r24, 0x06	; 6
    57ce:	21 f4       	brne	.+8      	; 0x57d8 <nrk_ext_int_enable+0x48>
    57d0:	80 91 6b 00 	lds	r24, 0x006B
    57d4:	88 60       	ori	r24, 0x08	; 8
    57d6:	17 c0       	rjmp	.+46     	; 0x5806 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    57d8:	87 30       	cpi	r24, 0x07	; 7
    57da:	21 f4       	brne	.+8      	; 0x57e4 <nrk_ext_int_enable+0x54>
    57dc:	80 91 6b 00 	lds	r24, 0x006B
    57e0:	80 61       	ori	r24, 0x10	; 16
    57e2:	11 c0       	rjmp	.+34     	; 0x5806 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    57e4:	88 30       	cpi	r24, 0x08	; 8
    57e6:	21 f4       	brne	.+8      	; 0x57f0 <nrk_ext_int_enable+0x60>
    57e8:	80 91 6b 00 	lds	r24, 0x006B
    57ec:	80 62       	ori	r24, 0x20	; 32
    57ee:	0b c0       	rjmp	.+22     	; 0x5806 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    57f0:	89 30       	cpi	r24, 0x09	; 9
    57f2:	21 f4       	brne	.+8      	; 0x57fc <nrk_ext_int_enable+0x6c>
    57f4:	80 91 6b 00 	lds	r24, 0x006B
    57f8:	80 64       	ori	r24, 0x40	; 64
    57fa:	05 c0       	rjmp	.+10     	; 0x5806 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    57fc:	8a 30       	cpi	r24, 0x0A	; 10
    57fe:	39 f4       	brne	.+14     	; 0x580e <nrk_ext_int_enable+0x7e>
    5800:	80 91 6b 00 	lds	r24, 0x006B
    5804:	80 68       	ori	r24, 0x80	; 128
    5806:	80 93 6b 00 	sts	0x006B, r24
    580a:	81 e0       	ldi	r24, 0x01	; 1
    580c:	08 95       	ret
return NRK_ERROR;
    580e:	8f ef       	ldi	r24, 0xFF	; 255
}
    5810:	08 95       	ret

00005812 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    5812:	81 11       	cpse	r24, r1
    5814:	02 c0       	rjmp	.+4      	; 0x581a <nrk_ext_int_disable+0x8>
    5816:	e8 98       	cbi	0x1d, 0	; 29
    5818:	39 c0       	rjmp	.+114    	; 0x588c <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    581a:	81 30       	cpi	r24, 0x01	; 1
    581c:	11 f4       	brne	.+4      	; 0x5822 <nrk_ext_int_disable+0x10>
    581e:	e9 98       	cbi	0x1d, 1	; 29
    5820:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5822:	82 30       	cpi	r24, 0x02	; 2
    5824:	11 f4       	brne	.+4      	; 0x582a <nrk_ext_int_disable+0x18>
    5826:	e9 98       	cbi	0x1d, 1	; 29
    5828:	31 c0       	rjmp	.+98     	; 0x588c <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    582a:	83 30       	cpi	r24, 0x03	; 3
    582c:	21 f4       	brne	.+8      	; 0x5836 <nrk_ext_int_disable+0x24>
    582e:	80 91 6b 00 	lds	r24, 0x006B
    5832:	8e 7f       	andi	r24, 0xFE	; 254
    5834:	29 c0       	rjmp	.+82     	; 0x5888 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    5836:	84 30       	cpi	r24, 0x04	; 4
    5838:	21 f4       	brne	.+8      	; 0x5842 <nrk_ext_int_disable+0x30>
    583a:	80 91 6b 00 	lds	r24, 0x006B
    583e:	8d 7f       	andi	r24, 0xFD	; 253
    5840:	23 c0       	rjmp	.+70     	; 0x5888 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    5842:	85 30       	cpi	r24, 0x05	; 5
    5844:	21 f4       	brne	.+8      	; 0x584e <nrk_ext_int_disable+0x3c>
    5846:	80 91 6b 00 	lds	r24, 0x006B
    584a:	8b 7f       	andi	r24, 0xFB	; 251
    584c:	1d c0       	rjmp	.+58     	; 0x5888 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    584e:	86 30       	cpi	r24, 0x06	; 6
    5850:	21 f4       	brne	.+8      	; 0x585a <nrk_ext_int_disable+0x48>
    5852:	80 91 6b 00 	lds	r24, 0x006B
    5856:	87 7f       	andi	r24, 0xF7	; 247
    5858:	17 c0       	rjmp	.+46     	; 0x5888 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    585a:	87 30       	cpi	r24, 0x07	; 7
    585c:	21 f4       	brne	.+8      	; 0x5866 <nrk_ext_int_disable+0x54>
    585e:	80 91 6b 00 	lds	r24, 0x006B
    5862:	8f 7e       	andi	r24, 0xEF	; 239
    5864:	11 c0       	rjmp	.+34     	; 0x5888 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    5866:	88 30       	cpi	r24, 0x08	; 8
    5868:	21 f4       	brne	.+8      	; 0x5872 <nrk_ext_int_disable+0x60>
    586a:	80 91 6b 00 	lds	r24, 0x006B
    586e:	8f 7d       	andi	r24, 0xDF	; 223
    5870:	0b c0       	rjmp	.+22     	; 0x5888 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    5872:	89 30       	cpi	r24, 0x09	; 9
    5874:	21 f4       	brne	.+8      	; 0x587e <nrk_ext_int_disable+0x6c>
    5876:	80 91 6b 00 	lds	r24, 0x006B
    587a:	8f 7b       	andi	r24, 0xBF	; 191
    587c:	05 c0       	rjmp	.+10     	; 0x5888 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    587e:	8a 30       	cpi	r24, 0x0A	; 10
    5880:	39 f4       	brne	.+14     	; 0x5890 <nrk_ext_int_disable+0x7e>
    5882:	80 91 6b 00 	lds	r24, 0x006B
    5886:	8f 77       	andi	r24, 0x7F	; 127
    5888:	80 93 6b 00 	sts	0x006B, r24
    588c:	81 e0       	ldi	r24, 0x01	; 1
    588e:	08 95       	ret
return NRK_ERROR;
    5890:	8f ef       	ldi	r24, 0xFF	; 255
}
    5892:	08 95       	ret

00005894 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    5894:	81 11       	cpse	r24, r1
    5896:	26 c0       	rjmp	.+76     	; 0x58e4 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    5898:	50 93 78 11 	sts	0x1178, r21
    589c:	40 93 77 11 	sts	0x1177, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    58a0:	61 11       	cpse	r22, r1
    58a2:	04 c0       	rjmp	.+8      	; 0x58ac <nrk_ext_int_configure+0x18>
    58a4:	80 91 69 00 	lds	r24, 0x0069
    58a8:	8c 7f       	andi	r24, 0xFC	; 252
    58aa:	3d c0       	rjmp	.+122    	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    58ac:	61 30       	cpi	r22, 0x01	; 1
    58ae:	49 f4       	brne	.+18     	; 0x58c2 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    58b0:	80 91 69 00 	lds	r24, 0x0069
    58b4:	8d 7f       	andi	r24, 0xFD	; 253
    58b6:	80 93 69 00 	sts	0x0069, r24
    58ba:	80 91 69 00 	lds	r24, 0x0069
    58be:	81 60       	ori	r24, 0x01	; 1
    58c0:	32 c0       	rjmp	.+100    	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    58c2:	62 30       	cpi	r22, 0x02	; 2
    58c4:	49 f4       	brne	.+18     	; 0x58d8 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    58c6:	80 91 69 00 	lds	r24, 0x0069
    58ca:	82 60       	ori	r24, 0x02	; 2
    58cc:	80 93 69 00 	sts	0x0069, r24
    58d0:	80 91 69 00 	lds	r24, 0x0069
    58d4:	8e 7f       	andi	r24, 0xFE	; 254
    58d6:	27 c0       	rjmp	.+78     	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    58d8:	63 30       	cpi	r22, 0x03	; 3
    58da:	39 f5       	brne	.+78     	; 0x592a <nrk_ext_int_configure+0x96>
    58dc:	80 91 69 00 	lds	r24, 0x0069
    58e0:	83 60       	ori	r24, 0x03	; 3
    58e2:	21 c0       	rjmp	.+66     	; 0x5926 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    58e4:	81 30       	cpi	r24, 0x01	; 1
    58e6:	49 f5       	brne	.+82     	; 0x593a <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    58e8:	50 93 76 11 	sts	0x1176, r21
    58ec:	40 93 75 11 	sts	0x1175, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    58f0:	61 11       	cpse	r22, r1
    58f2:	04 c0       	rjmp	.+8      	; 0x58fc <nrk_ext_int_configure+0x68>
    58f4:	80 91 69 00 	lds	r24, 0x0069
    58f8:	83 7f       	andi	r24, 0xF3	; 243
    58fa:	15 c0       	rjmp	.+42     	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    58fc:	61 30       	cpi	r22, 0x01	; 1
    58fe:	49 f4       	brne	.+18     	; 0x5912 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    5900:	80 91 69 00 	lds	r24, 0x0069
    5904:	87 7f       	andi	r24, 0xF7	; 247
    5906:	80 93 69 00 	sts	0x0069, r24
    590a:	80 91 69 00 	lds	r24, 0x0069
    590e:	84 60       	ori	r24, 0x04	; 4
    5910:	0a c0       	rjmp	.+20     	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5912:	62 30       	cpi	r22, 0x02	; 2
    5914:	61 f4       	brne	.+24     	; 0x592e <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    5916:	80 91 69 00 	lds	r24, 0x0069
    591a:	88 60       	ori	r24, 0x08	; 8
    591c:	80 93 69 00 	sts	0x0069, r24
    5920:	80 91 69 00 	lds	r24, 0x0069
    5924:	8b 7f       	andi	r24, 0xFB	; 251
    5926:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    592e:	63 30       	cpi	r22, 0x03	; 3
    5930:	e1 f7       	brne	.-8      	; 0x592a <nrk_ext_int_configure+0x96>
    5932:	80 91 69 00 	lds	r24, 0x0069
    5936:	8c 60       	ori	r24, 0x0C	; 12
    5938:	f6 cf       	rjmp	.-20     	; 0x5926 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    593a:	82 30       	cpi	r24, 0x02	; 2
    593c:	31 f5       	brne	.+76     	; 0x598a <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    593e:	50 93 7a 11 	sts	0x117A, r21
    5942:	40 93 79 11 	sts	0x1179, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5946:	61 11       	cpse	r22, r1
    5948:	04 c0       	rjmp	.+8      	; 0x5952 <nrk_ext_int_configure+0xbe>
    594a:	80 91 69 00 	lds	r24, 0x0069
    594e:	8f 7c       	andi	r24, 0xCF	; 207
    5950:	ea cf       	rjmp	.-44     	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5952:	61 30       	cpi	r22, 0x01	; 1
    5954:	49 f4       	brne	.+18     	; 0x5968 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    5956:	80 91 69 00 	lds	r24, 0x0069
    595a:	8f 7d       	andi	r24, 0xDF	; 223
    595c:	80 93 69 00 	sts	0x0069, r24
    5960:	80 91 69 00 	lds	r24, 0x0069
    5964:	80 61       	ori	r24, 0x10	; 16
    5966:	df cf       	rjmp	.-66     	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5968:	62 30       	cpi	r22, 0x02	; 2
    596a:	49 f4       	brne	.+18     	; 0x597e <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    596c:	80 91 69 00 	lds	r24, 0x0069
    5970:	80 62       	ori	r24, 0x20	; 32
    5972:	80 93 69 00 	sts	0x0069, r24
    5976:	80 91 69 00 	lds	r24, 0x0069
    597a:	8f 7e       	andi	r24, 0xEF	; 239
    597c:	d4 cf       	rjmp	.-88     	; 0x5926 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    597e:	63 30       	cpi	r22, 0x03	; 3
    5980:	a1 f6       	brne	.-88     	; 0x592a <nrk_ext_int_configure+0x96>
    5982:	80 91 69 00 	lds	r24, 0x0069
    5986:	80 63       	ori	r24, 0x30	; 48
    5988:	ce cf       	rjmp	.-100    	; 0x5926 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    598a:	83 50       	subi	r24, 0x03	; 3
    598c:	88 30       	cpi	r24, 0x08	; 8
    598e:	50 f4       	brcc	.+20     	; 0x59a4 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5990:	80 91 68 00 	lds	r24, 0x0068
    5994:	81 60       	ori	r24, 0x01	; 1
    5996:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    599a:	50 93 7c 11 	sts	0x117C, r21
    599e:	40 93 7b 11 	sts	0x117B, r20
    59a2:	c3 cf       	rjmp	.-122    	; 0x592a <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    59a4:	8f ef       	ldi	r24, 0xFF	; 255
}
    59a6:	08 95       	ret

000059a8 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    59a8:	1f 92       	push	r1
    59aa:	0f 92       	push	r0
    59ac:	0f b6       	in	r0, 0x3f	; 63
    59ae:	0f 92       	push	r0
    59b0:	11 24       	eor	r1, r1
    59b2:	0b b6       	in	r0, 0x3b	; 59
    59b4:	0f 92       	push	r0
    59b6:	2f 93       	push	r18
    59b8:	3f 93       	push	r19
    59ba:	4f 93       	push	r20
    59bc:	5f 93       	push	r21
    59be:	6f 93       	push	r22
    59c0:	7f 93       	push	r23
    59c2:	8f 93       	push	r24
    59c4:	9f 93       	push	r25
    59c6:	af 93       	push	r26
    59c8:	bf 93       	push	r27
    59ca:	ef 93       	push	r30
    59cc:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    59ce:	e0 91 7b 11 	lds	r30, 0x117B
    59d2:	f0 91 7c 11 	lds	r31, 0x117C
    59d6:	30 97       	sbiw	r30, 0x00	; 0
    59d8:	11 f0       	breq	.+4      	; 0x59de <__vector_9+0x36>
    59da:	09 95       	icall
    59dc:	04 c0       	rjmp	.+8      	; 0x59e6 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    59de:	60 e0       	ldi	r22, 0x00	; 0
    59e0:	8a e0       	ldi	r24, 0x0A	; 10
    59e2:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
	return;  	
}
    59e6:	ff 91       	pop	r31
    59e8:	ef 91       	pop	r30
    59ea:	bf 91       	pop	r27
    59ec:	af 91       	pop	r26
    59ee:	9f 91       	pop	r25
    59f0:	8f 91       	pop	r24
    59f2:	7f 91       	pop	r23
    59f4:	6f 91       	pop	r22
    59f6:	5f 91       	pop	r21
    59f8:	4f 91       	pop	r20
    59fa:	3f 91       	pop	r19
    59fc:	2f 91       	pop	r18
    59fe:	0f 90       	pop	r0
    5a00:	0b be       	out	0x3b, r0	; 59
    5a02:	0f 90       	pop	r0
    5a04:	0f be       	out	0x3f, r0	; 63
    5a06:	0f 90       	pop	r0
    5a08:	1f 90       	pop	r1
    5a0a:	18 95       	reti

00005a0c <__vector_1>:


SIGNAL(INT0_vect) {
    5a0c:	1f 92       	push	r1
    5a0e:	0f 92       	push	r0
    5a10:	0f b6       	in	r0, 0x3f	; 63
    5a12:	0f 92       	push	r0
    5a14:	11 24       	eor	r1, r1
    5a16:	0b b6       	in	r0, 0x3b	; 59
    5a18:	0f 92       	push	r0
    5a1a:	2f 93       	push	r18
    5a1c:	3f 93       	push	r19
    5a1e:	4f 93       	push	r20
    5a20:	5f 93       	push	r21
    5a22:	6f 93       	push	r22
    5a24:	7f 93       	push	r23
    5a26:	8f 93       	push	r24
    5a28:	9f 93       	push	r25
    5a2a:	af 93       	push	r26
    5a2c:	bf 93       	push	r27
    5a2e:	ef 93       	push	r30
    5a30:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5a32:	e0 91 77 11 	lds	r30, 0x1177
    5a36:	f0 91 78 11 	lds	r31, 0x1178
    5a3a:	30 97       	sbiw	r30, 0x00	; 0
    5a3c:	11 f0       	breq	.+4      	; 0x5a42 <__vector_1+0x36>
    5a3e:	09 95       	icall
    5a40:	04 c0       	rjmp	.+8      	; 0x5a4a <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5a42:	60 e0       	ldi	r22, 0x00	; 0
    5a44:	8a e0       	ldi	r24, 0x0A	; 10
    5a46:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
	return;  	
}
    5a4a:	ff 91       	pop	r31
    5a4c:	ef 91       	pop	r30
    5a4e:	bf 91       	pop	r27
    5a50:	af 91       	pop	r26
    5a52:	9f 91       	pop	r25
    5a54:	8f 91       	pop	r24
    5a56:	7f 91       	pop	r23
    5a58:	6f 91       	pop	r22
    5a5a:	5f 91       	pop	r21
    5a5c:	4f 91       	pop	r20
    5a5e:	3f 91       	pop	r19
    5a60:	2f 91       	pop	r18
    5a62:	0f 90       	pop	r0
    5a64:	0b be       	out	0x3b, r0	; 59
    5a66:	0f 90       	pop	r0
    5a68:	0f be       	out	0x3f, r0	; 63
    5a6a:	0f 90       	pop	r0
    5a6c:	1f 90       	pop	r1
    5a6e:	18 95       	reti

00005a70 <__vector_2>:

SIGNAL(INT1_vect) {
    5a70:	1f 92       	push	r1
    5a72:	0f 92       	push	r0
    5a74:	0f b6       	in	r0, 0x3f	; 63
    5a76:	0f 92       	push	r0
    5a78:	11 24       	eor	r1, r1
    5a7a:	0b b6       	in	r0, 0x3b	; 59
    5a7c:	0f 92       	push	r0
    5a7e:	2f 93       	push	r18
    5a80:	3f 93       	push	r19
    5a82:	4f 93       	push	r20
    5a84:	5f 93       	push	r21
    5a86:	6f 93       	push	r22
    5a88:	7f 93       	push	r23
    5a8a:	8f 93       	push	r24
    5a8c:	9f 93       	push	r25
    5a8e:	af 93       	push	r26
    5a90:	bf 93       	push	r27
    5a92:	ef 93       	push	r30
    5a94:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    5a96:	e0 91 75 11 	lds	r30, 0x1175
    5a9a:	f0 91 76 11 	lds	r31, 0x1176
    5a9e:	30 97       	sbiw	r30, 0x00	; 0
    5aa0:	11 f0       	breq	.+4      	; 0x5aa6 <__vector_2+0x36>
    5aa2:	09 95       	icall
    5aa4:	04 c0       	rjmp	.+8      	; 0x5aae <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5aa6:	60 e0       	ldi	r22, 0x00	; 0
    5aa8:	8a e0       	ldi	r24, 0x0A	; 10
    5aaa:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
	return;  	
}
    5aae:	ff 91       	pop	r31
    5ab0:	ef 91       	pop	r30
    5ab2:	bf 91       	pop	r27
    5ab4:	af 91       	pop	r26
    5ab6:	9f 91       	pop	r25
    5ab8:	8f 91       	pop	r24
    5aba:	7f 91       	pop	r23
    5abc:	6f 91       	pop	r22
    5abe:	5f 91       	pop	r21
    5ac0:	4f 91       	pop	r20
    5ac2:	3f 91       	pop	r19
    5ac4:	2f 91       	pop	r18
    5ac6:	0f 90       	pop	r0
    5ac8:	0b be       	out	0x3b, r0	; 59
    5aca:	0f 90       	pop	r0
    5acc:	0f be       	out	0x3f, r0	; 63
    5ace:	0f 90       	pop	r0
    5ad0:	1f 90       	pop	r1
    5ad2:	18 95       	reti

00005ad4 <__vector_3>:

SIGNAL(INT2_vect) {
    5ad4:	1f 92       	push	r1
    5ad6:	0f 92       	push	r0
    5ad8:	0f b6       	in	r0, 0x3f	; 63
    5ada:	0f 92       	push	r0
    5adc:	11 24       	eor	r1, r1
    5ade:	0b b6       	in	r0, 0x3b	; 59
    5ae0:	0f 92       	push	r0
    5ae2:	2f 93       	push	r18
    5ae4:	3f 93       	push	r19
    5ae6:	4f 93       	push	r20
    5ae8:	5f 93       	push	r21
    5aea:	6f 93       	push	r22
    5aec:	7f 93       	push	r23
    5aee:	8f 93       	push	r24
    5af0:	9f 93       	push	r25
    5af2:	af 93       	push	r26
    5af4:	bf 93       	push	r27
    5af6:	ef 93       	push	r30
    5af8:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    5afa:	e0 91 79 11 	lds	r30, 0x1179
    5afe:	f0 91 7a 11 	lds	r31, 0x117A
    5b02:	30 97       	sbiw	r30, 0x00	; 0
    5b04:	11 f0       	breq	.+4      	; 0x5b0a <__vector_3+0x36>
    5b06:	09 95       	icall
    5b08:	04 c0       	rjmp	.+8      	; 0x5b12 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5b0a:	60 e0       	ldi	r22, 0x00	; 0
    5b0c:	8a e0       	ldi	r24, 0x0A	; 10
    5b0e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <nrk_kernel_error_add>
	return;  	
}
    5b12:	ff 91       	pop	r31
    5b14:	ef 91       	pop	r30
    5b16:	bf 91       	pop	r27
    5b18:	af 91       	pop	r26
    5b1a:	9f 91       	pop	r25
    5b1c:	8f 91       	pop	r24
    5b1e:	7f 91       	pop	r23
    5b20:	6f 91       	pop	r22
    5b22:	5f 91       	pop	r21
    5b24:	4f 91       	pop	r20
    5b26:	3f 91       	pop	r19
    5b28:	2f 91       	pop	r18
    5b2a:	0f 90       	pop	r0
    5b2c:	0b be       	out	0x3b, r0	; 59
    5b2e:	0f 90       	pop	r0
    5b30:	0f be       	out	0x3f, r0	; 63
    5b32:	0f 90       	pop	r0
    5b34:	1f 90       	pop	r1
    5b36:	18 95       	reti

00005b38 <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    5b38:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5b3c:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5b3e:	84 b7       	in	r24, 0x34	; 52
    5b40:	87 7f       	andi	r24, 0xF7	; 247
    5b42:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5b44:	e0 e6       	ldi	r30, 0x60	; 96
    5b46:	f0 e0       	ldi	r31, 0x00	; 0
    5b48:	80 81       	ld	r24, Z
    5b4a:	88 61       	ori	r24, 0x18	; 24
    5b4c:	80 83       	st	Z, r24
WDTCSR = 0;
    5b4e:	10 82       	st	Z, r1
nrk_int_enable();
    5b50:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <nrk_int_enable>

00005b54 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    5b54:	0e 94 08 1a 	call	0x3410	; 0x3410 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5b58:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5b5a:	84 b7       	in	r24, 0x34	; 52
    5b5c:	87 7f       	andi	r24, 0xF7	; 247
    5b5e:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5b60:	e0 e6       	ldi	r30, 0x60	; 96
    5b62:	f0 e0       	ldi	r31, 0x00	; 0
    5b64:	80 81       	ld	r24, Z
    5b66:	88 61       	ori	r24, 0x18	; 24
    5b68:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5b6a:	8d e0       	ldi	r24, 0x0D	; 13
    5b6c:	80 83       	st	Z, r24
nrk_int_enable();
    5b6e:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <nrk_int_enable>

00005b72 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5b72:	04 b6       	in	r0, 0x34	; 52
    5b74:	03 fe       	sbrs	r0, 3
    5b76:	02 c0       	rjmp	.+4      	; 0x5b7c <nrk_watchdog_check+0xa>
return NRK_ERROR;
    5b78:	8f ef       	ldi	r24, 0xFF	; 255
    5b7a:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5b7c:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5b7e:	08 95       	ret

00005b80 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5b80:	a8 95       	wdr
    5b82:	08 95       	ret

00005b84 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5b84:	08 95       	ret

00005b86 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    5b86:	83 b7       	in	r24, 0x33	; 51
    5b88:	81 7f       	andi	r24, 0xF1	; 241
    5b8a:	86 60       	ori	r24, 0x06	; 6
    5b8c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5b8e:	83 b7       	in	r24, 0x33	; 51
    5b90:	81 60       	ori	r24, 0x01	; 1
    5b92:	83 bf       	out	0x33, r24	; 51
    5b94:	88 95       	sleep
    5b96:	83 b7       	in	r24, 0x33	; 51
    5b98:	8e 7f       	andi	r24, 0xFE	; 254
    5b9a:	83 bf       	out	0x33, r24	; 51
    5b9c:	08 95       	ret

00005b9e <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5b9e:	83 b7       	in	r24, 0x33	; 51
    5ba0:	81 7f       	andi	r24, 0xF1	; 241
    5ba2:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5ba4:	83 b7       	in	r24, 0x33	; 51
    5ba6:	81 60       	ori	r24, 0x01	; 1
    5ba8:	83 bf       	out	0x33, r24	; 51
    5baa:	88 95       	sleep
    5bac:	83 b7       	in	r24, 0x33	; 51
    5bae:	8e 7f       	andi	r24, 0xFE	; 254
    5bb0:	83 bf       	out	0x33, r24	; 51
    5bb2:	08 95       	ret

00005bb4 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5bb4:	fc 01       	movw	r30, r24
    5bb6:	76 83       	std	Z+6, r23	; 0x06
    5bb8:	65 83       	std	Z+5, r22	; 0x05
    5bba:	08 95       	ret

00005bbc <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    5bbc:	ef 92       	push	r14
    5bbe:	ff 92       	push	r15
    5bc0:	0f 93       	push	r16
    5bc2:	1f 93       	push	r17
    5bc4:	cf 93       	push	r28
    5bc6:	df 93       	push	r29
    5bc8:	8c 01       	movw	r16, r24
    5bca:	7b 01       	movw	r14, r22
    5bcc:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    5bce:	40 32       	cpi	r20, 0x20	; 32
    5bd0:	51 05       	cpc	r21, r1
    5bd2:	18 f4       	brcc	.+6      	; 0x5bda <nrk_task_set_stk+0x1e>
    5bd4:	81 e1       	ldi	r24, 0x11	; 17
    5bd6:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    5bda:	21 97       	sbiw	r28, 0x01	; 1
    5bdc:	ce 0d       	add	r28, r14
    5bde:	df 1d       	adc	r29, r15
    5be0:	f8 01       	movw	r30, r16
    5be2:	d2 83       	std	Z+2, r29	; 0x02
    5be4:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    5be6:	f4 82       	std	Z+4, r15	; 0x04
    5be8:	e3 82       	std	Z+3, r14	; 0x03

}
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	1f 91       	pop	r17
    5bf0:	0f 91       	pop	r16
    5bf2:	ff 90       	pop	r15
    5bf4:	ef 90       	pop	r14
    5bf6:	08 95       	ret

00005bf8 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    5bf8:	25 e5       	ldi	r18, 0x55	; 85
    5bfa:	fa 01       	movw	r30, r20
    5bfc:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    5bfe:	fb 01       	movw	r30, r22
    5c00:	32 97       	sbiw	r30, 0x02	; 2
    5c02:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5c04:	31 96       	adiw	r30, 0x01	; 1
    5c06:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    5c08:	33 97       	sbiw	r30, 0x03	; 3
    5c0a:	11 82       	std	Z+1, r1	; 0x01
    5c0c:	10 82       	st	Z, r1
    *(--stk) = 0;       
    5c0e:	32 97       	sbiw	r30, 0x02	; 2
    5c10:	11 82       	std	Z+1, r1	; 0x01
    5c12:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5c14:	32 97       	sbiw	r30, 0x02	; 2
    5c16:	11 82       	std	Z+1, r1	; 0x01
    5c18:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5c1a:	32 97       	sbiw	r30, 0x02	; 2
    5c1c:	11 82       	std	Z+1, r1	; 0x01
    5c1e:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5c20:	32 97       	sbiw	r30, 0x02	; 2
    5c22:	11 82       	std	Z+1, r1	; 0x01
    5c24:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5c26:	32 97       	sbiw	r30, 0x02	; 2
    5c28:	11 82       	std	Z+1, r1	; 0x01
    5c2a:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5c2c:	32 97       	sbiw	r30, 0x02	; 2
    5c2e:	11 82       	std	Z+1, r1	; 0x01
    5c30:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c32:	32 97       	sbiw	r30, 0x02	; 2
    5c34:	11 82       	std	Z+1, r1	; 0x01
    5c36:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5c38:	32 97       	sbiw	r30, 0x02	; 2
    5c3a:	11 82       	std	Z+1, r1	; 0x01
    5c3c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c3e:	32 97       	sbiw	r30, 0x02	; 2
    5c40:	11 82       	std	Z+1, r1	; 0x01
    5c42:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c44:	32 97       	sbiw	r30, 0x02	; 2
    5c46:	11 82       	std	Z+1, r1	; 0x01
    5c48:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c4a:	32 97       	sbiw	r30, 0x02	; 2
    5c4c:	11 82       	std	Z+1, r1	; 0x01
    5c4e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c50:	32 97       	sbiw	r30, 0x02	; 2
    5c52:	11 82       	std	Z+1, r1	; 0x01
    5c54:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c56:	32 97       	sbiw	r30, 0x02	; 2
    5c58:	11 82       	std	Z+1, r1	; 0x01
    5c5a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c5c:	32 97       	sbiw	r30, 0x02	; 2
    5c5e:	11 82       	std	Z+1, r1	; 0x01
    5c60:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5c62:	32 97       	sbiw	r30, 0x02	; 2
    5c64:	11 82       	std	Z+1, r1	; 0x01
    5c66:	10 82       	st	Z, r1
    *(--stk) = 0;
    5c68:	cb 01       	movw	r24, r22
    5c6a:	84 97       	sbiw	r24, 0x24	; 36
    5c6c:	fc 01       	movw	r30, r24
    5c6e:	11 82       	std	Z+1, r1	; 0x01
    5c70:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5c72:	08 95       	ret

00005c74 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    5c74:	85 e5       	ldi	r24, 0x55	; 85
    5c76:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5c7a:	ee ef       	ldi	r30, 0xFE	; 254
    5c7c:	f1 e4       	ldi	r31, 0x41	; 65
    5c7e:	f0 93 26 09 	sts	0x0926, r31
    5c82:	e0 93 25 09 	sts	0x0925, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5c86:	85 eb       	ldi	r24, 0xB5	; 181
    5c88:	9b e1       	ldi	r25, 0x1B	; 27
    5c8a:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5c8c:	80 93 ff 41 	sts	0x41FF, r24
    5c90:	08 95       	ret

00005c92 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5c92:	85 eb       	ldi	r24, 0xB5	; 181
    5c94:	9b e1       	ldi	r25, 0x1B	; 27
    5c96:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5c9a:	80 93 ff 41 	sts	0x41FF, r24
    5c9e:	08 95       	ret

00005ca0 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5ca0:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <_nrk_setup_timer>
  nrk_int_enable();  
    5ca4:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <nrk_int_enable>

00005ca8 <nrk_start_high_ready_task>:
    5ca8:	a0 91 3f 11 	lds	r26, 0x113F
    5cac:	b0 91 40 11 	lds	r27, 0x1140
    5cb0:	cd 91       	ld	r28, X+
    5cb2:	cd bf       	out	0x3d, r28	; 61
    5cb4:	dd 91       	ld	r29, X+
    5cb6:	de bf       	out	0x3e, r29	; 62
    5cb8:	ff 91       	pop	r31
    5cba:	ef 91       	pop	r30
    5cbc:	df 91       	pop	r29
    5cbe:	cf 91       	pop	r28
    5cc0:	bf 91       	pop	r27
    5cc2:	af 91       	pop	r26
    5cc4:	9f 91       	pop	r25
    5cc6:	8f 91       	pop	r24
    5cc8:	7f 91       	pop	r23
    5cca:	6f 91       	pop	r22
    5ccc:	5f 91       	pop	r21
    5cce:	4f 91       	pop	r20
    5cd0:	3f 91       	pop	r19
    5cd2:	2f 91       	pop	r18
    5cd4:	1f 91       	pop	r17
    5cd6:	0f 91       	pop	r16
    5cd8:	ff 90       	pop	r15
    5cda:	ef 90       	pop	r14
    5cdc:	df 90       	pop	r13
    5cde:	cf 90       	pop	r12
    5ce0:	bf 90       	pop	r11
    5ce2:	af 90       	pop	r10
    5ce4:	9f 90       	pop	r9
    5ce6:	8f 90       	pop	r8
    5ce8:	7f 90       	pop	r7
    5cea:	6f 90       	pop	r6
    5cec:	5f 90       	pop	r5
    5cee:	4f 90       	pop	r4
    5cf0:	3f 90       	pop	r3
    5cf2:	2f 90       	pop	r2
    5cf4:	1f 90       	pop	r1
    5cf6:	0f 90       	pop	r0
    5cf8:	0f be       	out	0x3f, r0	; 63
    5cfa:	0f 90       	pop	r0
    5cfc:	18 95       	reti

00005cfe <main>:
packet tx_packet;
uint16_t seq_num = 0;

int main ()
{
  nrk_setup_ports ();
    5cfe:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <nrk_setup_ports>
  nrk_setup_uart (UART_BAUDRATE_115K2);
    5d02:	80 e1       	ldi	r24, 0x10	; 16
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	0e 94 29 19 	call	0x3252	; 0x3252 <nrk_setup_uart>

  nrk_init ();
    5d0a:	0e 94 0f 1a 	call	0x341e	; 0x341e <nrk_init>

  nrk_led_clr (0);
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  nrk_led_clr (1);
    5d16:	81 e0       	ldi	r24, 0x01	; 1
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  nrk_led_clr (2);
    5d1e:	82 e0       	ldi	r24, 0x02	; 2
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  nrk_led_clr (3);
    5d26:	83 e0       	ldi	r24, 0x03	; 3
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	0e 94 c0 18 	call	0x3180	; 0x3180 <nrk_led_clr>
  
  sensor_mux = nrk_sem_create(1, 5);
    5d2e:	65 e0       	ldi	r22, 0x05	; 5
    5d30:	81 e0       	ldi	r24, 0x01	; 1
    5d32:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_sem_create>
    5d36:	90 93 5a 08 	sts	0x085A, r25
    5d3a:	80 93 59 08 	sts	0x0859, r24
  neighbor_mux = nrk_sem_create(1,5);
    5d3e:	65 e0       	ldi	r22, 0x05	; 5
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_sem_create>
    5d46:	90 93 b8 0d 	sts	0x0DB8, r25
    5d4a:	80 93 b7 0d 	sts	0x0DB7, r24
  light_pool_mux = nrk_sem_create(1, 5);
    5d4e:	65 e0       	ldi	r22, 0x05	; 5
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_sem_create>
    5d56:	90 93 ba 0d 	sts	0x0DBA, r25
    5d5a:	80 93 b9 0d 	sts	0x0DB9, r24
  neighbor_graph_mux = nrk_sem_create(1, 5);
    5d5e:	65 e0       	ldi	r22, 0x05	; 5
    5d60:	81 e0       	ldi	r24, 0x01	; 1
    5d62:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_sem_create>
    5d66:	90 93 24 09 	sts	0x0924, r25
    5d6a:	80 93 23 09 	sts	0x0923, r24
  print_mux = nrk_sem_create(1, 5);
    5d6e:	65 e0       	ldi	r22, 0x05	; 5
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_sem_create>
    5d76:	90 93 38 0b 	sts	0x0B38, r25
    5d7a:	80 93 37 0b 	sts	0x0B37, r24
  
  print_incoming = 0;
    5d7e:	10 92 a1 08 	sts	0x08A1, r1
  
  tx_packet.type = MSG_GATEWAY;
    5d82:	e7 e2       	ldi	r30, 0x27	; 39
    5d84:	fb e0       	ldi	r31, 0x0B	; 11
    5d86:	83 e0       	ldi	r24, 0x03	; 3
    5d88:	80 83       	st	Z, r24
  tx_packet.source_id = MAC_ADDR;
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	81 83       	std	Z+1, r24	; 0x01
  tx_packet.seq_num = seq_num;
    5d8e:	80 91 d6 04 	lds	r24, 0x04D6
    5d92:	90 91 d7 04 	lds	r25, 0x04D7
    5d96:	93 83       	std	Z+3, r25	; 0x03
    5d98:	82 83       	std	Z+2, r24	; 0x02
  tx_packet.num_hops = 0;
    5d9a:	14 82       	std	Z+4, r1	; 0x04

  nrk_time_set (0, 0);
    5d9c:	20 e0       	ldi	r18, 0x00	; 0
    5d9e:	30 e0       	ldi	r19, 0x00	; 0
    5da0:	a9 01       	movw	r20, r18
    5da2:	60 e0       	ldi	r22, 0x00	; 0
    5da4:	70 e0       	ldi	r23, 0x00	; 0
    5da6:	cb 01       	movw	r24, r22
    5da8:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <nrk_time_set>

  bmac_task_config ();
    5dac:	0e 94 b1 0a 	call	0x1562	; 0x1562 <bmac_task_config>

  nrk_create_taskset ();
    5db0:	0e 94 b2 06 	call	0xd64	; 0xd64 <nrk_create_taskset>
  bmac_init (13);
    5db4:	8d e0       	ldi	r24, 0x0D	; 13
    5db6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <bmac_init>
  nrk_start ();
    5dba:	0e 94 be 1a 	call	0x357c	; 0x357c <nrk_start>

  return 0;
}
    5dbe:	80 e0       	ldi	r24, 0x00	; 0
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	08 95       	ret

00005dc4 <vfprintf>:
    5dc4:	6f 92       	push	r6
    5dc6:	7f 92       	push	r7
    5dc8:	8f 92       	push	r8
    5dca:	9f 92       	push	r9
    5dcc:	af 92       	push	r10
    5dce:	bf 92       	push	r11
    5dd0:	cf 92       	push	r12
    5dd2:	df 92       	push	r13
    5dd4:	ef 92       	push	r14
    5dd6:	ff 92       	push	r15
    5dd8:	0f 93       	push	r16
    5dda:	1f 93       	push	r17
    5ddc:	cf 93       	push	r28
    5dde:	df 93       	push	r29
    5de0:	cd b7       	in	r28, 0x3d	; 61
    5de2:	de b7       	in	r29, 0x3e	; 62
    5de4:	2c 97       	sbiw	r28, 0x0c	; 12
    5de6:	0f b6       	in	r0, 0x3f	; 63
    5de8:	f8 94       	cli
    5dea:	de bf       	out	0x3e, r29	; 62
    5dec:	0f be       	out	0x3f, r0	; 63
    5dee:	cd bf       	out	0x3d, r28	; 61
    5df0:	6c 01       	movw	r12, r24
    5df2:	5b 01       	movw	r10, r22
    5df4:	7a 01       	movw	r14, r20
    5df6:	fc 01       	movw	r30, r24
    5df8:	17 82       	std	Z+7, r1	; 0x07
    5dfa:	16 82       	std	Z+6, r1	; 0x06
    5dfc:	83 81       	ldd	r24, Z+3	; 0x03
    5dfe:	81 ff       	sbrs	r24, 1
    5e00:	0e c1       	rjmp	.+540    	; 0x601e <vfprintf+0x25a>
    5e02:	ce 01       	movw	r24, r28
    5e04:	01 96       	adiw	r24, 0x01	; 1
    5e06:	4c 01       	movw	r8, r24
    5e08:	f6 01       	movw	r30, r12
    5e0a:	03 81       	ldd	r16, Z+3	; 0x03
    5e0c:	f5 01       	movw	r30, r10
    5e0e:	03 fd       	sbrc	r16, 3
    5e10:	15 91       	lpm	r17, Z+
    5e12:	03 ff       	sbrs	r16, 3
    5e14:	11 91       	ld	r17, Z+
    5e16:	5f 01       	movw	r10, r30
    5e18:	11 23       	and	r17, r17
    5e1a:	09 f4       	brne	.+2      	; 0x5e1e <vfprintf+0x5a>
    5e1c:	fc c0       	rjmp	.+504    	; 0x6016 <vfprintf+0x252>
    5e1e:	15 32       	cpi	r17, 0x25	; 37
    5e20:	49 f4       	brne	.+18     	; 0x5e34 <vfprintf+0x70>
    5e22:	03 fd       	sbrc	r16, 3
    5e24:	15 91       	lpm	r17, Z+
    5e26:	03 ff       	sbrs	r16, 3
    5e28:	11 91       	ld	r17, Z+
    5e2a:	5f 01       	movw	r10, r30
    5e2c:	15 32       	cpi	r17, 0x25	; 37
    5e2e:	11 f0       	breq	.+4      	; 0x5e34 <vfprintf+0x70>
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	1b c0       	rjmp	.+54     	; 0x5e6a <vfprintf+0xa6>
    5e34:	b6 01       	movw	r22, r12
    5e36:	81 2f       	mov	r24, r17
    5e38:	90 e0       	ldi	r25, 0x00	; 0
    5e3a:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    5e3e:	37 01       	movw	r6, r14
    5e40:	73 01       	movw	r14, r6
    5e42:	e2 cf       	rjmp	.-60     	; 0x5e08 <vfprintf+0x44>
    5e44:	11 23       	and	r17, r17
    5e46:	09 f4       	brne	.+2      	; 0x5e4a <vfprintf+0x86>
    5e48:	e6 c0       	rjmp	.+460    	; 0x6016 <vfprintf+0x252>
    5e4a:	61 2f       	mov	r22, r17
    5e4c:	70 e0       	ldi	r23, 0x00	; 0
    5e4e:	8a e4       	ldi	r24, 0x4A	; 74
    5e50:	97 e0       	ldi	r25, 0x07	; 7
    5e52:	2c 87       	std	Y+12, r18	; 0x0c
    5e54:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <strchr_P>
    5e58:	2c 85       	ldd	r18, Y+12	; 0x0c
    5e5a:	89 2b       	or	r24, r25
    5e5c:	49 f0       	breq	.+18     	; 0x5e70 <vfprintf+0xac>
    5e5e:	f5 01       	movw	r30, r10
    5e60:	03 fd       	sbrc	r16, 3
    5e62:	15 91       	lpm	r17, Z+
    5e64:	03 ff       	sbrs	r16, 3
    5e66:	11 91       	ld	r17, Z+
    5e68:	5f 01       	movw	r10, r30
    5e6a:	27 ff       	sbrs	r18, 7
    5e6c:	eb cf       	rjmp	.-42     	; 0x5e44 <vfprintf+0x80>
    5e6e:	09 c0       	rjmp	.+18     	; 0x5e82 <vfprintf+0xbe>
    5e70:	13 32       	cpi	r17, 0x23	; 35
    5e72:	29 f0       	breq	.+10     	; 0x5e7e <vfprintf+0xba>
    5e74:	1c 36       	cpi	r17, 0x6C	; 108
    5e76:	09 f0       	breq	.+2      	; 0x5e7a <vfprintf+0xb6>
    5e78:	d5 c0       	rjmp	.+426    	; 0x6024 <vfprintf+0x260>
    5e7a:	20 68       	ori	r18, 0x80	; 128
    5e7c:	f0 cf       	rjmp	.-32     	; 0x5e5e <vfprintf+0x9a>
    5e7e:	20 e1       	ldi	r18, 0x10	; 16
    5e80:	ee cf       	rjmp	.-36     	; 0x5e5e <vfprintf+0x9a>
    5e82:	02 2f       	mov	r16, r18
    5e84:	11 23       	and	r17, r17
    5e86:	09 f4       	brne	.+2      	; 0x5e8a <vfprintf+0xc6>
    5e88:	c6 c0       	rjmp	.+396    	; 0x6016 <vfprintf+0x252>
    5e8a:	61 2f       	mov	r22, r17
    5e8c:	70 e0       	ldi	r23, 0x00	; 0
    5e8e:	83 e4       	ldi	r24, 0x43	; 67
    5e90:	97 e0       	ldi	r25, 0x07	; 7
    5e92:	2c 87       	std	Y+12, r18	; 0x0c
    5e94:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <strchr_P>
    5e98:	2c 85       	ldd	r18, Y+12	; 0x0c
    5e9a:	89 2b       	or	r24, r25
    5e9c:	41 f0       	breq	.+16     	; 0x5eae <vfprintf+0xea>
    5e9e:	37 01       	movw	r6, r14
    5ea0:	f4 e0       	ldi	r31, 0x04	; 4
    5ea2:	6f 0e       	add	r6, r31
    5ea4:	71 1c       	adc	r7, r1
    5ea6:	b6 01       	movw	r22, r12
    5ea8:	8f e3       	ldi	r24, 0x3F	; 63
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	11 c0       	rjmp	.+34     	; 0x5ed0 <vfprintf+0x10c>
    5eae:	13 36       	cpi	r17, 0x63	; 99
    5eb0:	39 f0       	breq	.+14     	; 0x5ec0 <vfprintf+0xfc>
    5eb2:	13 37       	cpi	r17, 0x73	; 115
    5eb4:	81 f0       	breq	.+32     	; 0x5ed6 <vfprintf+0x112>
    5eb6:	13 35       	cpi	r17, 0x53	; 83
    5eb8:	19 f5       	brne	.+70     	; 0x5f00 <vfprintf+0x13c>
    5eba:	02 2f       	mov	r16, r18
    5ebc:	01 60       	ori	r16, 0x01	; 1
    5ebe:	0b c0       	rjmp	.+22     	; 0x5ed6 <vfprintf+0x112>
    5ec0:	37 01       	movw	r6, r14
    5ec2:	82 e0       	ldi	r24, 0x02	; 2
    5ec4:	68 0e       	add	r6, r24
    5ec6:	71 1c       	adc	r7, r1
    5ec8:	b6 01       	movw	r22, r12
    5eca:	f7 01       	movw	r30, r14
    5ecc:	80 81       	ld	r24, Z
    5ece:	91 81       	ldd	r25, Z+1	; 0x01
    5ed0:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    5ed4:	b5 cf       	rjmp	.-150    	; 0x5e40 <vfprintf+0x7c>
    5ed6:	37 01       	movw	r6, r14
    5ed8:	f2 e0       	ldi	r31, 0x02	; 2
    5eda:	6f 0e       	add	r6, r31
    5edc:	71 1c       	adc	r7, r1
    5ede:	f7 01       	movw	r30, r14
    5ee0:	e0 80       	ld	r14, Z
    5ee2:	f1 80       	ldd	r15, Z+1	; 0x01
    5ee4:	f7 01       	movw	r30, r14
    5ee6:	00 fd       	sbrc	r16, 0
    5ee8:	85 91       	lpm	r24, Z+
    5eea:	00 ff       	sbrs	r16, 0
    5eec:	81 91       	ld	r24, Z+
    5eee:	7f 01       	movw	r14, r30
    5ef0:	88 23       	and	r24, r24
    5ef2:	09 f4       	brne	.+2      	; 0x5ef6 <vfprintf+0x132>
    5ef4:	a5 cf       	rjmp	.-182    	; 0x5e40 <vfprintf+0x7c>
    5ef6:	b6 01       	movw	r22, r12
    5ef8:	90 e0       	ldi	r25, 0x00	; 0
    5efa:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    5efe:	f2 cf       	rjmp	.-28     	; 0x5ee4 <vfprintf+0x120>
    5f00:	14 36       	cpi	r17, 0x64	; 100
    5f02:	11 f0       	breq	.+4      	; 0x5f08 <vfprintf+0x144>
    5f04:	19 36       	cpi	r17, 0x69	; 105
    5f06:	29 f5       	brne	.+74     	; 0x5f52 <vfprintf+0x18e>
    5f08:	37 01       	movw	r6, r14
    5f0a:	27 ff       	sbrs	r18, 7
    5f0c:	09 c0       	rjmp	.+18     	; 0x5f20 <vfprintf+0x15c>
    5f0e:	f4 e0       	ldi	r31, 0x04	; 4
    5f10:	6f 0e       	add	r6, r31
    5f12:	71 1c       	adc	r7, r1
    5f14:	f7 01       	movw	r30, r14
    5f16:	60 81       	ld	r22, Z
    5f18:	71 81       	ldd	r23, Z+1	; 0x01
    5f1a:	82 81       	ldd	r24, Z+2	; 0x02
    5f1c:	93 81       	ldd	r25, Z+3	; 0x03
    5f1e:	0a c0       	rjmp	.+20     	; 0x5f34 <vfprintf+0x170>
    5f20:	f2 e0       	ldi	r31, 0x02	; 2
    5f22:	6f 0e       	add	r6, r31
    5f24:	71 1c       	adc	r7, r1
    5f26:	f7 01       	movw	r30, r14
    5f28:	60 81       	ld	r22, Z
    5f2a:	71 81       	ldd	r23, Z+1	; 0x01
    5f2c:	88 27       	eor	r24, r24
    5f2e:	77 fd       	sbrc	r23, 7
    5f30:	80 95       	com	r24
    5f32:	98 2f       	mov	r25, r24
    5f34:	02 2f       	mov	r16, r18
    5f36:	0f 7e       	andi	r16, 0xEF	; 239
    5f38:	97 ff       	sbrs	r25, 7
    5f3a:	08 c0       	rjmp	.+16     	; 0x5f4c <vfprintf+0x188>
    5f3c:	90 95       	com	r25
    5f3e:	80 95       	com	r24
    5f40:	70 95       	com	r23
    5f42:	61 95       	neg	r22
    5f44:	7f 4f       	sbci	r23, 0xFF	; 255
    5f46:	8f 4f       	sbci	r24, 0xFF	; 255
    5f48:	9f 4f       	sbci	r25, 0xFF	; 255
    5f4a:	00 64       	ori	r16, 0x40	; 64
    5f4c:	2a e0       	ldi	r18, 0x0A	; 10
    5f4e:	30 e0       	ldi	r19, 0x00	; 0
    5f50:	33 c0       	rjmp	.+102    	; 0x5fb8 <vfprintf+0x1f4>
    5f52:	10 37       	cpi	r17, 0x70	; 112
    5f54:	99 f0       	breq	.+38     	; 0x5f7c <vfprintf+0x1b8>
    5f56:	40 f4       	brcc	.+16     	; 0x5f68 <vfprintf+0x1a4>
    5f58:	18 35       	cpi	r17, 0x58	; 88
    5f5a:	b1 f0       	breq	.+44     	; 0x5f88 <vfprintf+0x1c4>
    5f5c:	1f 36       	cpi	r17, 0x6F	; 111
    5f5e:	09 f0       	breq	.+2      	; 0x5f62 <vfprintf+0x19e>
    5f60:	5a c0       	rjmp	.+180    	; 0x6016 <vfprintf+0x252>
    5f62:	28 e0       	ldi	r18, 0x08	; 8
    5f64:	30 e0       	ldi	r19, 0x00	; 0
    5f66:	14 c0       	rjmp	.+40     	; 0x5f90 <vfprintf+0x1cc>
    5f68:	15 37       	cpi	r17, 0x75	; 117
    5f6a:	19 f0       	breq	.+6      	; 0x5f72 <vfprintf+0x1ae>
    5f6c:	18 37       	cpi	r17, 0x78	; 120
    5f6e:	41 f0       	breq	.+16     	; 0x5f80 <vfprintf+0x1bc>
    5f70:	52 c0       	rjmp	.+164    	; 0x6016 <vfprintf+0x252>
    5f72:	02 2f       	mov	r16, r18
    5f74:	0f 7e       	andi	r16, 0xEF	; 239
    5f76:	2a e0       	ldi	r18, 0x0A	; 10
    5f78:	30 e0       	ldi	r19, 0x00	; 0
    5f7a:	0a c0       	rjmp	.+20     	; 0x5f90 <vfprintf+0x1cc>
    5f7c:	02 2f       	mov	r16, r18
    5f7e:	00 61       	ori	r16, 0x10	; 16
    5f80:	04 62       	ori	r16, 0x24	; 36
    5f82:	20 e1       	ldi	r18, 0x10	; 16
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	04 c0       	rjmp	.+8      	; 0x5f90 <vfprintf+0x1cc>
    5f88:	02 2f       	mov	r16, r18
    5f8a:	04 60       	ori	r16, 0x04	; 4
    5f8c:	20 e1       	ldi	r18, 0x10	; 16
    5f8e:	32 e0       	ldi	r19, 0x02	; 2
    5f90:	37 01       	movw	r6, r14
    5f92:	07 ff       	sbrs	r16, 7
    5f94:	09 c0       	rjmp	.+18     	; 0x5fa8 <vfprintf+0x1e4>
    5f96:	f4 e0       	ldi	r31, 0x04	; 4
    5f98:	6f 0e       	add	r6, r31
    5f9a:	71 1c       	adc	r7, r1
    5f9c:	f7 01       	movw	r30, r14
    5f9e:	60 81       	ld	r22, Z
    5fa0:	71 81       	ldd	r23, Z+1	; 0x01
    5fa2:	82 81       	ldd	r24, Z+2	; 0x02
    5fa4:	93 81       	ldd	r25, Z+3	; 0x03
    5fa6:	08 c0       	rjmp	.+16     	; 0x5fb8 <vfprintf+0x1f4>
    5fa8:	f2 e0       	ldi	r31, 0x02	; 2
    5faa:	6f 0e       	add	r6, r31
    5fac:	71 1c       	adc	r7, r1
    5fae:	f7 01       	movw	r30, r14
    5fb0:	60 81       	ld	r22, Z
    5fb2:	71 81       	ldd	r23, Z+1	; 0x01
    5fb4:	80 e0       	ldi	r24, 0x00	; 0
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	a4 01       	movw	r20, r8
    5fba:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__ultoa_invert>
    5fbe:	18 2f       	mov	r17, r24
    5fc0:	18 19       	sub	r17, r8
    5fc2:	06 ff       	sbrs	r16, 6
    5fc4:	05 c0       	rjmp	.+10     	; 0x5fd0 <vfprintf+0x20c>
    5fc6:	b6 01       	movw	r22, r12
    5fc8:	8d e2       	ldi	r24, 0x2D	; 45
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    5fd0:	04 ff       	sbrs	r16, 4
    5fd2:	15 c0       	rjmp	.+42     	; 0x5ffe <vfprintf+0x23a>
    5fd4:	fe 01       	movw	r30, r28
    5fd6:	e1 0f       	add	r30, r17
    5fd8:	f1 1d       	adc	r31, r1
    5fda:	80 81       	ld	r24, Z
    5fdc:	80 33       	cpi	r24, 0x30	; 48
    5fde:	79 f0       	breq	.+30     	; 0x5ffe <vfprintf+0x23a>
    5fe0:	b6 01       	movw	r22, r12
    5fe2:	80 e3       	ldi	r24, 0x30	; 48
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    5fea:	02 ff       	sbrs	r16, 2
    5fec:	08 c0       	rjmp	.+16     	; 0x5ffe <vfprintf+0x23a>
    5fee:	00 72       	andi	r16, 0x20	; 32
    5ff0:	80 2f       	mov	r24, r16
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	b6 01       	movw	r22, r12
    5ff6:	88 5a       	subi	r24, 0xA8	; 168
    5ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    5ffa:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    5ffe:	11 50       	subi	r17, 0x01	; 1
    6000:	f4 01       	movw	r30, r8
    6002:	e1 0f       	add	r30, r17
    6004:	f1 1d       	adc	r31, r1
    6006:	80 81       	ld	r24, Z
    6008:	b6 01       	movw	r22, r12
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	0e 94 2e 32 	call	0x645c	; 0x645c <fputc>
    6010:	11 11       	cpse	r17, r1
    6012:	f5 cf       	rjmp	.-22     	; 0x5ffe <vfprintf+0x23a>
    6014:	15 cf       	rjmp	.-470    	; 0x5e40 <vfprintf+0x7c>
    6016:	f6 01       	movw	r30, r12
    6018:	86 81       	ldd	r24, Z+6	; 0x06
    601a:	97 81       	ldd	r25, Z+7	; 0x07
    601c:	05 c0       	rjmp	.+10     	; 0x6028 <vfprintf+0x264>
    601e:	8f ef       	ldi	r24, 0xFF	; 255
    6020:	9f ef       	ldi	r25, 0xFF	; 255
    6022:	02 c0       	rjmp	.+4      	; 0x6028 <vfprintf+0x264>
    6024:	02 2f       	mov	r16, r18
    6026:	31 cf       	rjmp	.-414    	; 0x5e8a <vfprintf+0xc6>
    6028:	2c 96       	adiw	r28, 0x0c	; 12
    602a:	0f b6       	in	r0, 0x3f	; 63
    602c:	f8 94       	cli
    602e:	de bf       	out	0x3e, r29	; 62
    6030:	0f be       	out	0x3f, r0	; 63
    6032:	cd bf       	out	0x3d, r28	; 61
    6034:	df 91       	pop	r29
    6036:	cf 91       	pop	r28
    6038:	1f 91       	pop	r17
    603a:	0f 91       	pop	r16
    603c:	ff 90       	pop	r15
    603e:	ef 90       	pop	r14
    6040:	df 90       	pop	r13
    6042:	cf 90       	pop	r12
    6044:	bf 90       	pop	r11
    6046:	af 90       	pop	r10
    6048:	9f 90       	pop	r9
    604a:	8f 90       	pop	r8
    604c:	7f 90       	pop	r7
    604e:	6f 90       	pop	r6
    6050:	08 95       	ret

00006052 <__muluhisi3>:
    6052:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <__umulhisi3>
    6056:	a5 9f       	mul	r26, r21
    6058:	90 0d       	add	r25, r0
    605a:	b4 9f       	mul	r27, r20
    605c:	90 0d       	add	r25, r0
    605e:	a4 9f       	mul	r26, r20
    6060:	80 0d       	add	r24, r0
    6062:	91 1d       	adc	r25, r1
    6064:	11 24       	eor	r1, r1
    6066:	08 95       	ret

00006068 <__mulsi3>:
    6068:	db 01       	movw	r26, r22
    606a:	8f 93       	push	r24
    606c:	9f 93       	push	r25
    606e:	0e 94 29 30 	call	0x6052	; 0x6052 <__muluhisi3>
    6072:	bf 91       	pop	r27
    6074:	af 91       	pop	r26
    6076:	a2 9f       	mul	r26, r18
    6078:	80 0d       	add	r24, r0
    607a:	91 1d       	adc	r25, r1
    607c:	a3 9f       	mul	r26, r19
    607e:	90 0d       	add	r25, r0
    6080:	b2 9f       	mul	r27, r18
    6082:	90 0d       	add	r25, r0
    6084:	11 24       	eor	r1, r1
    6086:	08 95       	ret

00006088 <__udivmodhi4>:
    6088:	aa 1b       	sub	r26, r26
    608a:	bb 1b       	sub	r27, r27
    608c:	51 e1       	ldi	r21, 0x11	; 17
    608e:	07 c0       	rjmp	.+14     	; 0x609e <__udivmodhi4_ep>

00006090 <__udivmodhi4_loop>:
    6090:	aa 1f       	adc	r26, r26
    6092:	bb 1f       	adc	r27, r27
    6094:	a6 17       	cp	r26, r22
    6096:	b7 07       	cpc	r27, r23
    6098:	10 f0       	brcs	.+4      	; 0x609e <__udivmodhi4_ep>
    609a:	a6 1b       	sub	r26, r22
    609c:	b7 0b       	sbc	r27, r23

0000609e <__udivmodhi4_ep>:
    609e:	88 1f       	adc	r24, r24
    60a0:	99 1f       	adc	r25, r25
    60a2:	5a 95       	dec	r21
    60a4:	a9 f7       	brne	.-22     	; 0x6090 <__udivmodhi4_loop>
    60a6:	80 95       	com	r24
    60a8:	90 95       	com	r25
    60aa:	bc 01       	movw	r22, r24
    60ac:	cd 01       	movw	r24, r26
    60ae:	08 95       	ret

000060b0 <__divmodhi4>:
    60b0:	97 fb       	bst	r25, 7
    60b2:	07 2e       	mov	r0, r23
    60b4:	16 f4       	brtc	.+4      	; 0x60ba <__divmodhi4+0xa>
    60b6:	00 94       	com	r0
    60b8:	07 d0       	rcall	.+14     	; 0x60c8 <__divmodhi4_neg1>
    60ba:	77 fd       	sbrc	r23, 7
    60bc:	09 d0       	rcall	.+18     	; 0x60d0 <__divmodhi4_neg2>
    60be:	0e 94 44 30 	call	0x6088	; 0x6088 <__udivmodhi4>
    60c2:	07 fc       	sbrc	r0, 7
    60c4:	05 d0       	rcall	.+10     	; 0x60d0 <__divmodhi4_neg2>
    60c6:	3e f4       	brtc	.+14     	; 0x60d6 <__divmodhi4_exit>

000060c8 <__divmodhi4_neg1>:
    60c8:	90 95       	com	r25
    60ca:	81 95       	neg	r24
    60cc:	9f 4f       	sbci	r25, 0xFF	; 255
    60ce:	08 95       	ret

000060d0 <__divmodhi4_neg2>:
    60d0:	70 95       	com	r23
    60d2:	61 95       	neg	r22
    60d4:	7f 4f       	sbci	r23, 0xFF	; 255

000060d6 <__divmodhi4_exit>:
    60d6:	08 95       	ret

000060d8 <__udivmodsi4>:
    60d8:	a1 e2       	ldi	r26, 0x21	; 33
    60da:	1a 2e       	mov	r1, r26
    60dc:	aa 1b       	sub	r26, r26
    60de:	bb 1b       	sub	r27, r27
    60e0:	fd 01       	movw	r30, r26
    60e2:	0d c0       	rjmp	.+26     	; 0x60fe <__udivmodsi4_ep>

000060e4 <__udivmodsi4_loop>:
    60e4:	aa 1f       	adc	r26, r26
    60e6:	bb 1f       	adc	r27, r27
    60e8:	ee 1f       	adc	r30, r30
    60ea:	ff 1f       	adc	r31, r31
    60ec:	a2 17       	cp	r26, r18
    60ee:	b3 07       	cpc	r27, r19
    60f0:	e4 07       	cpc	r30, r20
    60f2:	f5 07       	cpc	r31, r21
    60f4:	20 f0       	brcs	.+8      	; 0x60fe <__udivmodsi4_ep>
    60f6:	a2 1b       	sub	r26, r18
    60f8:	b3 0b       	sbc	r27, r19
    60fa:	e4 0b       	sbc	r30, r20
    60fc:	f5 0b       	sbc	r31, r21

000060fe <__udivmodsi4_ep>:
    60fe:	66 1f       	adc	r22, r22
    6100:	77 1f       	adc	r23, r23
    6102:	88 1f       	adc	r24, r24
    6104:	99 1f       	adc	r25, r25
    6106:	1a 94       	dec	r1
    6108:	69 f7       	brne	.-38     	; 0x60e4 <__udivmodsi4_loop>
    610a:	60 95       	com	r22
    610c:	70 95       	com	r23
    610e:	80 95       	com	r24
    6110:	90 95       	com	r25
    6112:	9b 01       	movw	r18, r22
    6114:	ac 01       	movw	r20, r24
    6116:	bd 01       	movw	r22, r26
    6118:	cf 01       	movw	r24, r30
    611a:	08 95       	ret

0000611c <__umoddi3>:
    611c:	68 94       	set
    611e:	01 c0       	rjmp	.+2      	; 0x6122 <__udivdi3_umoddi3>

00006120 <__udivdi3>:
    6120:	e8 94       	clt

00006122 <__udivdi3_umoddi3>:
    6122:	8f 92       	push	r8
    6124:	9f 92       	push	r9
    6126:	cf 93       	push	r28
    6128:	df 93       	push	r29
    612a:	0e 94 9c 30 	call	0x6138	; 0x6138 <__udivmod64>
    612e:	df 91       	pop	r29
    6130:	cf 91       	pop	r28
    6132:	9f 90       	pop	r9
    6134:	8f 90       	pop	r8
    6136:	08 95       	ret

00006138 <__udivmod64>:
    6138:	88 24       	eor	r8, r8
    613a:	99 24       	eor	r9, r9
    613c:	f4 01       	movw	r30, r8
    613e:	e4 01       	movw	r28, r8
    6140:	b0 e4       	ldi	r27, 0x40	; 64
    6142:	9f 93       	push	r25
    6144:	aa 27       	eor	r26, r26
    6146:	9a 15       	cp	r25, r10
    6148:	8b 04       	cpc	r8, r11
    614a:	9c 04       	cpc	r9, r12
    614c:	ed 05       	cpc	r30, r13
    614e:	fe 05       	cpc	r31, r14
    6150:	cf 05       	cpc	r28, r15
    6152:	d0 07       	cpc	r29, r16
    6154:	a1 07       	cpc	r26, r17
    6156:	98 f4       	brcc	.+38     	; 0x617e <__udivmod64+0x46>
    6158:	ad 2f       	mov	r26, r29
    615a:	dc 2f       	mov	r29, r28
    615c:	cf 2f       	mov	r28, r31
    615e:	fe 2f       	mov	r31, r30
    6160:	e9 2d       	mov	r30, r9
    6162:	98 2c       	mov	r9, r8
    6164:	89 2e       	mov	r8, r25
    6166:	98 2f       	mov	r25, r24
    6168:	87 2f       	mov	r24, r23
    616a:	76 2f       	mov	r23, r22
    616c:	65 2f       	mov	r22, r21
    616e:	54 2f       	mov	r21, r20
    6170:	43 2f       	mov	r20, r19
    6172:	32 2f       	mov	r19, r18
    6174:	22 27       	eor	r18, r18
    6176:	b8 50       	subi	r27, 0x08	; 8
    6178:	31 f7       	brne	.-52     	; 0x6146 <__udivmod64+0xe>
    617a:	bf 91       	pop	r27
    617c:	27 c0       	rjmp	.+78     	; 0x61cc <__udivmod64+0x94>
    617e:	1b 2e       	mov	r1, r27
    6180:	bf 91       	pop	r27
    6182:	bb 27       	eor	r27, r27
    6184:	22 0f       	add	r18, r18
    6186:	33 1f       	adc	r19, r19
    6188:	44 1f       	adc	r20, r20
    618a:	55 1f       	adc	r21, r21
    618c:	66 1f       	adc	r22, r22
    618e:	77 1f       	adc	r23, r23
    6190:	88 1f       	adc	r24, r24
    6192:	99 1f       	adc	r25, r25
    6194:	88 1c       	adc	r8, r8
    6196:	99 1c       	adc	r9, r9
    6198:	ee 1f       	adc	r30, r30
    619a:	ff 1f       	adc	r31, r31
    619c:	cc 1f       	adc	r28, r28
    619e:	dd 1f       	adc	r29, r29
    61a0:	aa 1f       	adc	r26, r26
    61a2:	bb 1f       	adc	r27, r27
    61a4:	8a 14       	cp	r8, r10
    61a6:	9b 04       	cpc	r9, r11
    61a8:	ec 05       	cpc	r30, r12
    61aa:	fd 05       	cpc	r31, r13
    61ac:	ce 05       	cpc	r28, r14
    61ae:	df 05       	cpc	r29, r15
    61b0:	a0 07       	cpc	r26, r16
    61b2:	b1 07       	cpc	r27, r17
    61b4:	48 f0       	brcs	.+18     	; 0x61c8 <__udivmod64+0x90>
    61b6:	8a 18       	sub	r8, r10
    61b8:	9b 08       	sbc	r9, r11
    61ba:	ec 09       	sbc	r30, r12
    61bc:	fd 09       	sbc	r31, r13
    61be:	ce 09       	sbc	r28, r14
    61c0:	df 09       	sbc	r29, r15
    61c2:	a0 0b       	sbc	r26, r16
    61c4:	b1 0b       	sbc	r27, r17
    61c6:	21 60       	ori	r18, 0x01	; 1
    61c8:	1a 94       	dec	r1
    61ca:	e1 f6       	brne	.-72     	; 0x6184 <__udivmod64+0x4c>
    61cc:	2e f4       	brtc	.+10     	; 0x61d8 <__udivmod64+0xa0>
    61ce:	94 01       	movw	r18, r8
    61d0:	af 01       	movw	r20, r30
    61d2:	be 01       	movw	r22, r28
    61d4:	cd 01       	movw	r24, r26
    61d6:	00 0c       	add	r0, r0
    61d8:	08 95       	ret

000061da <__tablejump2__>:
    61da:	ee 0f       	add	r30, r30
    61dc:	ff 1f       	adc	r31, r31

000061de <__tablejump__>:
    61de:	05 90       	lpm	r0, Z+
    61e0:	f4 91       	lpm	r31, Z
    61e2:	e0 2d       	mov	r30, r0
    61e4:	09 94       	ijmp

000061e6 <__umulhisi3>:
    61e6:	a2 9f       	mul	r26, r18
    61e8:	b0 01       	movw	r22, r0
    61ea:	b3 9f       	mul	r27, r19
    61ec:	c0 01       	movw	r24, r0
    61ee:	a3 9f       	mul	r26, r19
    61f0:	70 0d       	add	r23, r0
    61f2:	81 1d       	adc	r24, r1
    61f4:	11 24       	eor	r1, r1
    61f6:	91 1d       	adc	r25, r1
    61f8:	b2 9f       	mul	r27, r18
    61fa:	70 0d       	add	r23, r0
    61fc:	81 1d       	adc	r24, r1
    61fe:	11 24       	eor	r1, r1
    6200:	91 1d       	adc	r25, r1
    6202:	08 95       	ret

00006204 <do_rand>:
    6204:	8f 92       	push	r8
    6206:	9f 92       	push	r9
    6208:	af 92       	push	r10
    620a:	bf 92       	push	r11
    620c:	cf 92       	push	r12
    620e:	df 92       	push	r13
    6210:	ef 92       	push	r14
    6212:	ff 92       	push	r15
    6214:	cf 93       	push	r28
    6216:	df 93       	push	r29
    6218:	ec 01       	movw	r28, r24
    621a:	68 81       	ld	r22, Y
    621c:	79 81       	ldd	r23, Y+1	; 0x01
    621e:	8a 81       	ldd	r24, Y+2	; 0x02
    6220:	9b 81       	ldd	r25, Y+3	; 0x03
    6222:	61 15       	cp	r22, r1
    6224:	71 05       	cpc	r23, r1
    6226:	81 05       	cpc	r24, r1
    6228:	91 05       	cpc	r25, r1
    622a:	21 f4       	brne	.+8      	; 0x6234 <do_rand+0x30>
    622c:	64 e2       	ldi	r22, 0x24	; 36
    622e:	79 ed       	ldi	r23, 0xD9	; 217
    6230:	8b e5       	ldi	r24, 0x5B	; 91
    6232:	97 e0       	ldi	r25, 0x07	; 7
    6234:	2d e1       	ldi	r18, 0x1D	; 29
    6236:	33 ef       	ldi	r19, 0xF3	; 243
    6238:	41 e0       	ldi	r20, 0x01	; 1
    623a:	50 e0       	ldi	r21, 0x00	; 0
    623c:	0e 94 ac 34 	call	0x6958	; 0x6958 <__divmodsi4>
    6240:	49 01       	movw	r8, r18
    6242:	5a 01       	movw	r10, r20
    6244:	9b 01       	movw	r18, r22
    6246:	ac 01       	movw	r20, r24
    6248:	a7 ea       	ldi	r26, 0xA7	; 167
    624a:	b1 e4       	ldi	r27, 0x41	; 65
    624c:	0e 94 29 30 	call	0x6052	; 0x6052 <__muluhisi3>
    6250:	6b 01       	movw	r12, r22
    6252:	7c 01       	movw	r14, r24
    6254:	ac ee       	ldi	r26, 0xEC	; 236
    6256:	b4 ef       	ldi	r27, 0xF4	; 244
    6258:	a5 01       	movw	r20, r10
    625a:	94 01       	movw	r18, r8
    625c:	0e 94 a7 34 	call	0x694e	; 0x694e <__mulohisi3>
    6260:	dc 01       	movw	r26, r24
    6262:	cb 01       	movw	r24, r22
    6264:	8c 0d       	add	r24, r12
    6266:	9d 1d       	adc	r25, r13
    6268:	ae 1d       	adc	r26, r14
    626a:	bf 1d       	adc	r27, r15
    626c:	b7 ff       	sbrs	r27, 7
    626e:	03 c0       	rjmp	.+6      	; 0x6276 <do_rand+0x72>
    6270:	01 97       	sbiw	r24, 0x01	; 1
    6272:	a1 09       	sbc	r26, r1
    6274:	b0 48       	sbci	r27, 0x80	; 128
    6276:	88 83       	st	Y, r24
    6278:	99 83       	std	Y+1, r25	; 0x01
    627a:	aa 83       	std	Y+2, r26	; 0x02
    627c:	bb 83       	std	Y+3, r27	; 0x03
    627e:	9f 77       	andi	r25, 0x7F	; 127
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	ff 90       	pop	r15
    6286:	ef 90       	pop	r14
    6288:	df 90       	pop	r13
    628a:	cf 90       	pop	r12
    628c:	bf 90       	pop	r11
    628e:	af 90       	pop	r10
    6290:	9f 90       	pop	r9
    6292:	8f 90       	pop	r8
    6294:	08 95       	ret

00006296 <rand_r>:
    6296:	0c 94 02 31 	jmp	0x6204	; 0x6204 <do_rand>

0000629a <rand>:
    629a:	82 e0       	ldi	r24, 0x02	; 2
    629c:	92 e0       	ldi	r25, 0x02	; 2
    629e:	0c 94 02 31 	jmp	0x6204	; 0x6204 <do_rand>

000062a2 <srand>:
    62a2:	a0 e0       	ldi	r26, 0x00	; 0
    62a4:	b0 e0       	ldi	r27, 0x00	; 0
    62a6:	80 93 02 02 	sts	0x0202, r24
    62aa:	90 93 03 02 	sts	0x0203, r25
    62ae:	a0 93 04 02 	sts	0x0204, r26
    62b2:	b0 93 05 02 	sts	0x0205, r27
    62b6:	08 95       	ret

000062b8 <atoi>:
    62b8:	fc 01       	movw	r30, r24
    62ba:	88 27       	eor	r24, r24
    62bc:	99 27       	eor	r25, r25
    62be:	e8 94       	clt
    62c0:	21 91       	ld	r18, Z+
    62c2:	20 32       	cpi	r18, 0x20	; 32
    62c4:	e9 f3       	breq	.-6      	; 0x62c0 <atoi+0x8>
    62c6:	29 30       	cpi	r18, 0x09	; 9
    62c8:	10 f0       	brcs	.+4      	; 0x62ce <atoi+0x16>
    62ca:	2e 30       	cpi	r18, 0x0E	; 14
    62cc:	c8 f3       	brcs	.-14     	; 0x62c0 <atoi+0x8>
    62ce:	2b 32       	cpi	r18, 0x2B	; 43
    62d0:	41 f0       	breq	.+16     	; 0x62e2 <atoi+0x2a>
    62d2:	2d 32       	cpi	r18, 0x2D	; 45
    62d4:	39 f4       	brne	.+14     	; 0x62e4 <atoi+0x2c>
    62d6:	68 94       	set
    62d8:	04 c0       	rjmp	.+8      	; 0x62e2 <atoi+0x2a>
    62da:	0e 94 9d 31 	call	0x633a	; 0x633a <__mulhi_const_10>
    62de:	82 0f       	add	r24, r18
    62e0:	91 1d       	adc	r25, r1
    62e2:	21 91       	ld	r18, Z+
    62e4:	20 53       	subi	r18, 0x30	; 48
    62e6:	2a 30       	cpi	r18, 0x0A	; 10
    62e8:	c0 f3       	brcs	.-16     	; 0x62da <atoi+0x22>
    62ea:	1e f4       	brtc	.+6      	; 0x62f2 <atoi+0x3a>
    62ec:	90 95       	com	r25
    62ee:	81 95       	neg	r24
    62f0:	9f 4f       	sbci	r25, 0xFF	; 255
    62f2:	08 95       	ret

000062f4 <strchr_P>:
    62f4:	fc 01       	movw	r30, r24
    62f6:	05 90       	lpm	r0, Z+
    62f8:	06 16       	cp	r0, r22
    62fa:	21 f0       	breq	.+8      	; 0x6304 <strchr_P+0x10>
    62fc:	00 20       	and	r0, r0
    62fe:	d9 f7       	brne	.-10     	; 0x62f6 <strchr_P+0x2>
    6300:	c0 01       	movw	r24, r0
    6302:	08 95       	ret
    6304:	31 97       	sbiw	r30, 0x01	; 1
    6306:	cf 01       	movw	r24, r30
    6308:	08 95       	ret

0000630a <memcpy>:
    630a:	fb 01       	movw	r30, r22
    630c:	dc 01       	movw	r26, r24
    630e:	02 c0       	rjmp	.+4      	; 0x6314 <memcpy+0xa>
    6310:	01 90       	ld	r0, Z+
    6312:	0d 92       	st	X+, r0
    6314:	41 50       	subi	r20, 0x01	; 1
    6316:	50 40       	sbci	r21, 0x00	; 0
    6318:	d8 f7       	brcc	.-10     	; 0x6310 <memcpy+0x6>
    631a:	08 95       	ret

0000631c <strncpy>:
    631c:	fb 01       	movw	r30, r22
    631e:	dc 01       	movw	r26, r24
    6320:	41 50       	subi	r20, 0x01	; 1
    6322:	50 40       	sbci	r21, 0x00	; 0
    6324:	48 f0       	brcs	.+18     	; 0x6338 <strncpy+0x1c>
    6326:	01 90       	ld	r0, Z+
    6328:	0d 92       	st	X+, r0
    632a:	00 20       	and	r0, r0
    632c:	c9 f7       	brne	.-14     	; 0x6320 <strncpy+0x4>
    632e:	01 c0       	rjmp	.+2      	; 0x6332 <strncpy+0x16>
    6330:	1d 92       	st	X+, r1
    6332:	41 50       	subi	r20, 0x01	; 1
    6334:	50 40       	sbci	r21, 0x00	; 0
    6336:	e0 f7       	brcc	.-8      	; 0x6330 <strncpy+0x14>
    6338:	08 95       	ret

0000633a <__mulhi_const_10>:
    633a:	7a e0       	ldi	r23, 0x0A	; 10
    633c:	97 9f       	mul	r25, r23
    633e:	90 2d       	mov	r25, r0
    6340:	87 9f       	mul	r24, r23
    6342:	80 2d       	mov	r24, r0
    6344:	91 0d       	add	r25, r1
    6346:	11 24       	eor	r1, r1
    6348:	08 95       	ret

0000634a <fdevopen>:
    634a:	0f 93       	push	r16
    634c:	1f 93       	push	r17
    634e:	cf 93       	push	r28
    6350:	df 93       	push	r29
    6352:	00 97       	sbiw	r24, 0x00	; 0
    6354:	31 f4       	brne	.+12     	; 0x6362 <fdevopen+0x18>
    6356:	61 15       	cp	r22, r1
    6358:	71 05       	cpc	r23, r1
    635a:	19 f4       	brne	.+6      	; 0x6362 <fdevopen+0x18>
    635c:	80 e0       	ldi	r24, 0x00	; 0
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	3a c0       	rjmp	.+116    	; 0x63d6 <fdevopen+0x8c>
    6362:	8b 01       	movw	r16, r22
    6364:	ec 01       	movw	r28, r24
    6366:	6e e0       	ldi	r22, 0x0E	; 14
    6368:	70 e0       	ldi	r23, 0x00	; 0
    636a:	81 e0       	ldi	r24, 0x01	; 1
    636c:	90 e0       	ldi	r25, 0x00	; 0
    636e:	0e 94 54 33 	call	0x66a8	; 0x66a8 <calloc>
    6372:	fc 01       	movw	r30, r24
    6374:	00 97       	sbiw	r24, 0x00	; 0
    6376:	91 f3       	breq	.-28     	; 0x635c <fdevopen+0x12>
    6378:	80 e8       	ldi	r24, 0x80	; 128
    637a:	83 83       	std	Z+3, r24	; 0x03
    637c:	01 15       	cp	r16, r1
    637e:	11 05       	cpc	r17, r1
    6380:	71 f0       	breq	.+28     	; 0x639e <fdevopen+0x54>
    6382:	13 87       	std	Z+11, r17	; 0x0b
    6384:	02 87       	std	Z+10, r16	; 0x0a
    6386:	81 e8       	ldi	r24, 0x81	; 129
    6388:	83 83       	std	Z+3, r24	; 0x03
    638a:	80 91 7d 11 	lds	r24, 0x117D
    638e:	90 91 7e 11 	lds	r25, 0x117E
    6392:	89 2b       	or	r24, r25
    6394:	21 f4       	brne	.+8      	; 0x639e <fdevopen+0x54>
    6396:	f0 93 7e 11 	sts	0x117E, r31
    639a:	e0 93 7d 11 	sts	0x117D, r30
    639e:	20 97       	sbiw	r28, 0x00	; 0
    63a0:	c9 f0       	breq	.+50     	; 0x63d4 <fdevopen+0x8a>
    63a2:	d1 87       	std	Z+9, r29	; 0x09
    63a4:	c0 87       	std	Z+8, r28	; 0x08
    63a6:	83 81       	ldd	r24, Z+3	; 0x03
    63a8:	82 60       	ori	r24, 0x02	; 2
    63aa:	83 83       	std	Z+3, r24	; 0x03
    63ac:	80 91 7f 11 	lds	r24, 0x117F
    63b0:	90 91 80 11 	lds	r25, 0x1180
    63b4:	89 2b       	or	r24, r25
    63b6:	71 f4       	brne	.+28     	; 0x63d4 <fdevopen+0x8a>
    63b8:	f0 93 80 11 	sts	0x1180, r31
    63bc:	e0 93 7f 11 	sts	0x117F, r30
    63c0:	80 91 81 11 	lds	r24, 0x1181
    63c4:	90 91 82 11 	lds	r25, 0x1182
    63c8:	89 2b       	or	r24, r25
    63ca:	21 f4       	brne	.+8      	; 0x63d4 <fdevopen+0x8a>
    63cc:	f0 93 82 11 	sts	0x1182, r31
    63d0:	e0 93 81 11 	sts	0x1181, r30
    63d4:	cf 01       	movw	r24, r30
    63d6:	df 91       	pop	r29
    63d8:	cf 91       	pop	r28
    63da:	1f 91       	pop	r17
    63dc:	0f 91       	pop	r16
    63de:	08 95       	ret

000063e0 <fgetc>:
    63e0:	cf 93       	push	r28
    63e2:	df 93       	push	r29
    63e4:	ec 01       	movw	r28, r24
    63e6:	2b 81       	ldd	r18, Y+3	; 0x03
    63e8:	20 ff       	sbrs	r18, 0
    63ea:	33 c0       	rjmp	.+102    	; 0x6452 <fgetc+0x72>
    63ec:	26 ff       	sbrs	r18, 6
    63ee:	0a c0       	rjmp	.+20     	; 0x6404 <fgetc+0x24>
    63f0:	2f 7b       	andi	r18, 0xBF	; 191
    63f2:	2b 83       	std	Y+3, r18	; 0x03
    63f4:	8e 81       	ldd	r24, Y+6	; 0x06
    63f6:	9f 81       	ldd	r25, Y+7	; 0x07
    63f8:	01 96       	adiw	r24, 0x01	; 1
    63fa:	9f 83       	std	Y+7, r25	; 0x07
    63fc:	8e 83       	std	Y+6, r24	; 0x06
    63fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	29 c0       	rjmp	.+82     	; 0x6456 <fgetc+0x76>
    6404:	22 ff       	sbrs	r18, 2
    6406:	0f c0       	rjmp	.+30     	; 0x6426 <fgetc+0x46>
    6408:	e8 81       	ld	r30, Y
    640a:	f9 81       	ldd	r31, Y+1	; 0x01
    640c:	80 81       	ld	r24, Z
    640e:	99 27       	eor	r25, r25
    6410:	87 fd       	sbrc	r24, 7
    6412:	90 95       	com	r25
    6414:	00 97       	sbiw	r24, 0x00	; 0
    6416:	19 f4       	brne	.+6      	; 0x641e <fgetc+0x3e>
    6418:	20 62       	ori	r18, 0x20	; 32
    641a:	2b 83       	std	Y+3, r18	; 0x03
    641c:	1a c0       	rjmp	.+52     	; 0x6452 <fgetc+0x72>
    641e:	31 96       	adiw	r30, 0x01	; 1
    6420:	f9 83       	std	Y+1, r31	; 0x01
    6422:	e8 83       	st	Y, r30
    6424:	0e c0       	rjmp	.+28     	; 0x6442 <fgetc+0x62>
    6426:	ea 85       	ldd	r30, Y+10	; 0x0a
    6428:	fb 85       	ldd	r31, Y+11	; 0x0b
    642a:	09 95       	icall
    642c:	97 ff       	sbrs	r25, 7
    642e:	09 c0       	rjmp	.+18     	; 0x6442 <fgetc+0x62>
    6430:	2b 81       	ldd	r18, Y+3	; 0x03
    6432:	01 96       	adiw	r24, 0x01	; 1
    6434:	11 f0       	breq	.+4      	; 0x643a <fgetc+0x5a>
    6436:	80 e2       	ldi	r24, 0x20	; 32
    6438:	01 c0       	rjmp	.+2      	; 0x643c <fgetc+0x5c>
    643a:	80 e1       	ldi	r24, 0x10	; 16
    643c:	82 2b       	or	r24, r18
    643e:	8b 83       	std	Y+3, r24	; 0x03
    6440:	08 c0       	rjmp	.+16     	; 0x6452 <fgetc+0x72>
    6442:	2e 81       	ldd	r18, Y+6	; 0x06
    6444:	3f 81       	ldd	r19, Y+7	; 0x07
    6446:	2f 5f       	subi	r18, 0xFF	; 255
    6448:	3f 4f       	sbci	r19, 0xFF	; 255
    644a:	3f 83       	std	Y+7, r19	; 0x07
    644c:	2e 83       	std	Y+6, r18	; 0x06
    644e:	99 27       	eor	r25, r25
    6450:	02 c0       	rjmp	.+4      	; 0x6456 <fgetc+0x76>
    6452:	8f ef       	ldi	r24, 0xFF	; 255
    6454:	9f ef       	ldi	r25, 0xFF	; 255
    6456:	df 91       	pop	r29
    6458:	cf 91       	pop	r28
    645a:	08 95       	ret

0000645c <fputc>:
    645c:	0f 93       	push	r16
    645e:	1f 93       	push	r17
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	fb 01       	movw	r30, r22
    6466:	23 81       	ldd	r18, Z+3	; 0x03
    6468:	21 fd       	sbrc	r18, 1
    646a:	03 c0       	rjmp	.+6      	; 0x6472 <fputc+0x16>
    646c:	8f ef       	ldi	r24, 0xFF	; 255
    646e:	9f ef       	ldi	r25, 0xFF	; 255
    6470:	28 c0       	rjmp	.+80     	; 0x64c2 <fputc+0x66>
    6472:	22 ff       	sbrs	r18, 2
    6474:	16 c0       	rjmp	.+44     	; 0x64a2 <fputc+0x46>
    6476:	46 81       	ldd	r20, Z+6	; 0x06
    6478:	57 81       	ldd	r21, Z+7	; 0x07
    647a:	24 81       	ldd	r18, Z+4	; 0x04
    647c:	35 81       	ldd	r19, Z+5	; 0x05
    647e:	42 17       	cp	r20, r18
    6480:	53 07       	cpc	r21, r19
    6482:	44 f4       	brge	.+16     	; 0x6494 <fputc+0x38>
    6484:	a0 81       	ld	r26, Z
    6486:	b1 81       	ldd	r27, Z+1	; 0x01
    6488:	9d 01       	movw	r18, r26
    648a:	2f 5f       	subi	r18, 0xFF	; 255
    648c:	3f 4f       	sbci	r19, 0xFF	; 255
    648e:	31 83       	std	Z+1, r19	; 0x01
    6490:	20 83       	st	Z, r18
    6492:	8c 93       	st	X, r24
    6494:	26 81       	ldd	r18, Z+6	; 0x06
    6496:	37 81       	ldd	r19, Z+7	; 0x07
    6498:	2f 5f       	subi	r18, 0xFF	; 255
    649a:	3f 4f       	sbci	r19, 0xFF	; 255
    649c:	37 83       	std	Z+7, r19	; 0x07
    649e:	26 83       	std	Z+6, r18	; 0x06
    64a0:	10 c0       	rjmp	.+32     	; 0x64c2 <fputc+0x66>
    64a2:	eb 01       	movw	r28, r22
    64a4:	09 2f       	mov	r16, r25
    64a6:	18 2f       	mov	r17, r24
    64a8:	00 84       	ldd	r0, Z+8	; 0x08
    64aa:	f1 85       	ldd	r31, Z+9	; 0x09
    64ac:	e0 2d       	mov	r30, r0
    64ae:	09 95       	icall
    64b0:	89 2b       	or	r24, r25
    64b2:	e1 f6       	brne	.-72     	; 0x646c <fputc+0x10>
    64b4:	8e 81       	ldd	r24, Y+6	; 0x06
    64b6:	9f 81       	ldd	r25, Y+7	; 0x07
    64b8:	01 96       	adiw	r24, 0x01	; 1
    64ba:	9f 83       	std	Y+7, r25	; 0x07
    64bc:	8e 83       	std	Y+6, r24	; 0x06
    64be:	81 2f       	mov	r24, r17
    64c0:	90 2f       	mov	r25, r16
    64c2:	df 91       	pop	r29
    64c4:	cf 91       	pop	r28
    64c6:	1f 91       	pop	r17
    64c8:	0f 91       	pop	r16
    64ca:	08 95       	ret

000064cc <printf>:
    64cc:	cf 93       	push	r28
    64ce:	df 93       	push	r29
    64d0:	cd b7       	in	r28, 0x3d	; 61
    64d2:	de b7       	in	r29, 0x3e	; 62
    64d4:	ae 01       	movw	r20, r28
    64d6:	4b 5f       	subi	r20, 0xFB	; 251
    64d8:	5f 4f       	sbci	r21, 0xFF	; 255
    64da:	fa 01       	movw	r30, r20
    64dc:	61 91       	ld	r22, Z+
    64de:	71 91       	ld	r23, Z+
    64e0:	af 01       	movw	r20, r30
    64e2:	80 91 7f 11 	lds	r24, 0x117F
    64e6:	90 91 80 11 	lds	r25, 0x1180
    64ea:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <vfprintf>
    64ee:	df 91       	pop	r29
    64f0:	cf 91       	pop	r28
    64f2:	08 95       	ret

000064f4 <putchar>:
    64f4:	60 91 7f 11 	lds	r22, 0x117F
    64f8:	70 91 80 11 	lds	r23, 0x1180
    64fc:	0c 94 2e 32 	jmp	0x645c	; 0x645c <fputc>

00006500 <puts>:
    6500:	0f 93       	push	r16
    6502:	1f 93       	push	r17
    6504:	cf 93       	push	r28
    6506:	df 93       	push	r29
    6508:	e0 91 7f 11 	lds	r30, 0x117F
    650c:	f0 91 80 11 	lds	r31, 0x1180
    6510:	23 81       	ldd	r18, Z+3	; 0x03
    6512:	21 ff       	sbrs	r18, 1
    6514:	1b c0       	rjmp	.+54     	; 0x654c <puts+0x4c>
    6516:	8c 01       	movw	r16, r24
    6518:	d0 e0       	ldi	r29, 0x00	; 0
    651a:	c0 e0       	ldi	r28, 0x00	; 0
    651c:	f8 01       	movw	r30, r16
    651e:	81 91       	ld	r24, Z+
    6520:	8f 01       	movw	r16, r30
    6522:	60 91 7f 11 	lds	r22, 0x117F
    6526:	70 91 80 11 	lds	r23, 0x1180
    652a:	db 01       	movw	r26, r22
    652c:	18 96       	adiw	r26, 0x08	; 8
    652e:	ed 91       	ld	r30, X+
    6530:	fc 91       	ld	r31, X
    6532:	19 97       	sbiw	r26, 0x09	; 9
    6534:	88 23       	and	r24, r24
    6536:	31 f0       	breq	.+12     	; 0x6544 <puts+0x44>
    6538:	09 95       	icall
    653a:	89 2b       	or	r24, r25
    653c:	79 f3       	breq	.-34     	; 0x651c <puts+0x1c>
    653e:	df ef       	ldi	r29, 0xFF	; 255
    6540:	cf ef       	ldi	r28, 0xFF	; 255
    6542:	ec cf       	rjmp	.-40     	; 0x651c <puts+0x1c>
    6544:	8a e0       	ldi	r24, 0x0A	; 10
    6546:	09 95       	icall
    6548:	89 2b       	or	r24, r25
    654a:	19 f0       	breq	.+6      	; 0x6552 <puts+0x52>
    654c:	8f ef       	ldi	r24, 0xFF	; 255
    654e:	9f ef       	ldi	r25, 0xFF	; 255
    6550:	02 c0       	rjmp	.+4      	; 0x6556 <puts+0x56>
    6552:	8d 2f       	mov	r24, r29
    6554:	9c 2f       	mov	r25, r28
    6556:	df 91       	pop	r29
    6558:	cf 91       	pop	r28
    655a:	1f 91       	pop	r17
    655c:	0f 91       	pop	r16
    655e:	08 95       	ret

00006560 <sprintf>:
    6560:	0f 93       	push	r16
    6562:	1f 93       	push	r17
    6564:	cf 93       	push	r28
    6566:	df 93       	push	r29
    6568:	cd b7       	in	r28, 0x3d	; 61
    656a:	de b7       	in	r29, 0x3e	; 62
    656c:	2e 97       	sbiw	r28, 0x0e	; 14
    656e:	0f b6       	in	r0, 0x3f	; 63
    6570:	f8 94       	cli
    6572:	de bf       	out	0x3e, r29	; 62
    6574:	0f be       	out	0x3f, r0	; 63
    6576:	cd bf       	out	0x3d, r28	; 61
    6578:	0d 89       	ldd	r16, Y+21	; 0x15
    657a:	1e 89       	ldd	r17, Y+22	; 0x16
    657c:	86 e0       	ldi	r24, 0x06	; 6
    657e:	8c 83       	std	Y+4, r24	; 0x04
    6580:	1a 83       	std	Y+2, r17	; 0x02
    6582:	09 83       	std	Y+1, r16	; 0x01
    6584:	8f ef       	ldi	r24, 0xFF	; 255
    6586:	9f e7       	ldi	r25, 0x7F	; 127
    6588:	9e 83       	std	Y+6, r25	; 0x06
    658a:	8d 83       	std	Y+5, r24	; 0x05
    658c:	ae 01       	movw	r20, r28
    658e:	47 5e       	subi	r20, 0xE7	; 231
    6590:	5f 4f       	sbci	r21, 0xFF	; 255
    6592:	6f 89       	ldd	r22, Y+23	; 0x17
    6594:	78 8d       	ldd	r23, Y+24	; 0x18
    6596:	ce 01       	movw	r24, r28
    6598:	01 96       	adiw	r24, 0x01	; 1
    659a:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <vfprintf>
    659e:	2f 81       	ldd	r18, Y+7	; 0x07
    65a0:	38 85       	ldd	r19, Y+8	; 0x08
    65a2:	f8 01       	movw	r30, r16
    65a4:	e2 0f       	add	r30, r18
    65a6:	f3 1f       	adc	r31, r19
    65a8:	10 82       	st	Z, r1
    65aa:	2e 96       	adiw	r28, 0x0e	; 14
    65ac:	0f b6       	in	r0, 0x3f	; 63
    65ae:	f8 94       	cli
    65b0:	de bf       	out	0x3e, r29	; 62
    65b2:	0f be       	out	0x3f, r0	; 63
    65b4:	cd bf       	out	0x3d, r28	; 61
    65b6:	df 91       	pop	r29
    65b8:	cf 91       	pop	r28
    65ba:	1f 91       	pop	r17
    65bc:	0f 91       	pop	r16
    65be:	08 95       	ret

000065c0 <__ultoa_invert>:
    65c0:	fa 01       	movw	r30, r20
    65c2:	aa 27       	eor	r26, r26
    65c4:	28 30       	cpi	r18, 0x08	; 8
    65c6:	51 f1       	breq	.+84     	; 0x661c <__ultoa_invert+0x5c>
    65c8:	20 31       	cpi	r18, 0x10	; 16
    65ca:	81 f1       	breq	.+96     	; 0x662c <__ultoa_invert+0x6c>
    65cc:	e8 94       	clt
    65ce:	6f 93       	push	r22
    65d0:	6e 7f       	andi	r22, 0xFE	; 254
    65d2:	6e 5f       	subi	r22, 0xFE	; 254
    65d4:	7f 4f       	sbci	r23, 0xFF	; 255
    65d6:	8f 4f       	sbci	r24, 0xFF	; 255
    65d8:	9f 4f       	sbci	r25, 0xFF	; 255
    65da:	af 4f       	sbci	r26, 0xFF	; 255
    65dc:	b1 e0       	ldi	r27, 0x01	; 1
    65de:	3e d0       	rcall	.+124    	; 0x665c <__ultoa_invert+0x9c>
    65e0:	b4 e0       	ldi	r27, 0x04	; 4
    65e2:	3c d0       	rcall	.+120    	; 0x665c <__ultoa_invert+0x9c>
    65e4:	67 0f       	add	r22, r23
    65e6:	78 1f       	adc	r23, r24
    65e8:	89 1f       	adc	r24, r25
    65ea:	9a 1f       	adc	r25, r26
    65ec:	a1 1d       	adc	r26, r1
    65ee:	68 0f       	add	r22, r24
    65f0:	79 1f       	adc	r23, r25
    65f2:	8a 1f       	adc	r24, r26
    65f4:	91 1d       	adc	r25, r1
    65f6:	a1 1d       	adc	r26, r1
    65f8:	6a 0f       	add	r22, r26
    65fa:	71 1d       	adc	r23, r1
    65fc:	81 1d       	adc	r24, r1
    65fe:	91 1d       	adc	r25, r1
    6600:	a1 1d       	adc	r26, r1
    6602:	20 d0       	rcall	.+64     	; 0x6644 <__ultoa_invert+0x84>
    6604:	09 f4       	brne	.+2      	; 0x6608 <__ultoa_invert+0x48>
    6606:	68 94       	set
    6608:	3f 91       	pop	r19
    660a:	2a e0       	ldi	r18, 0x0A	; 10
    660c:	26 9f       	mul	r18, r22
    660e:	11 24       	eor	r1, r1
    6610:	30 19       	sub	r19, r0
    6612:	30 5d       	subi	r19, 0xD0	; 208
    6614:	31 93       	st	Z+, r19
    6616:	de f6       	brtc	.-74     	; 0x65ce <__ultoa_invert+0xe>
    6618:	cf 01       	movw	r24, r30
    661a:	08 95       	ret
    661c:	46 2f       	mov	r20, r22
    661e:	47 70       	andi	r20, 0x07	; 7
    6620:	40 5d       	subi	r20, 0xD0	; 208
    6622:	41 93       	st	Z+, r20
    6624:	b3 e0       	ldi	r27, 0x03	; 3
    6626:	0f d0       	rcall	.+30     	; 0x6646 <__ultoa_invert+0x86>
    6628:	c9 f7       	brne	.-14     	; 0x661c <__ultoa_invert+0x5c>
    662a:	f6 cf       	rjmp	.-20     	; 0x6618 <__ultoa_invert+0x58>
    662c:	46 2f       	mov	r20, r22
    662e:	4f 70       	andi	r20, 0x0F	; 15
    6630:	40 5d       	subi	r20, 0xD0	; 208
    6632:	4a 33       	cpi	r20, 0x3A	; 58
    6634:	18 f0       	brcs	.+6      	; 0x663c <__ultoa_invert+0x7c>
    6636:	49 5d       	subi	r20, 0xD9	; 217
    6638:	31 fd       	sbrc	r19, 1
    663a:	40 52       	subi	r20, 0x20	; 32
    663c:	41 93       	st	Z+, r20
    663e:	02 d0       	rcall	.+4      	; 0x6644 <__ultoa_invert+0x84>
    6640:	a9 f7       	brne	.-22     	; 0x662c <__ultoa_invert+0x6c>
    6642:	ea cf       	rjmp	.-44     	; 0x6618 <__ultoa_invert+0x58>
    6644:	b4 e0       	ldi	r27, 0x04	; 4
    6646:	a6 95       	lsr	r26
    6648:	97 95       	ror	r25
    664a:	87 95       	ror	r24
    664c:	77 95       	ror	r23
    664e:	67 95       	ror	r22
    6650:	ba 95       	dec	r27
    6652:	c9 f7       	brne	.-14     	; 0x6646 <__ultoa_invert+0x86>
    6654:	00 97       	sbiw	r24, 0x00	; 0
    6656:	61 05       	cpc	r22, r1
    6658:	71 05       	cpc	r23, r1
    665a:	08 95       	ret
    665c:	9b 01       	movw	r18, r22
    665e:	ac 01       	movw	r20, r24
    6660:	0a 2e       	mov	r0, r26
    6662:	06 94       	lsr	r0
    6664:	57 95       	ror	r21
    6666:	47 95       	ror	r20
    6668:	37 95       	ror	r19
    666a:	27 95       	ror	r18
    666c:	ba 95       	dec	r27
    666e:	c9 f7       	brne	.-14     	; 0x6662 <__ultoa_invert+0xa2>
    6670:	62 0f       	add	r22, r18
    6672:	73 1f       	adc	r23, r19
    6674:	84 1f       	adc	r24, r20
    6676:	95 1f       	adc	r25, r21
    6678:	a0 1d       	adc	r26, r0
    667a:	08 95       	ret

0000667c <__eerd_byte_m128rfa1>:
    667c:	f9 99       	sbic	0x1f, 1	; 31
    667e:	fe cf       	rjmp	.-4      	; 0x667c <__eerd_byte_m128rfa1>
    6680:	92 bd       	out	0x22, r25	; 34
    6682:	81 bd       	out	0x21, r24	; 33
    6684:	f8 9a       	sbi	0x1f, 0	; 31
    6686:	99 27       	eor	r25, r25
    6688:	80 b5       	in	r24, 0x20	; 32
    668a:	08 95       	ret

0000668c <__eewr_byte_m128rfa1>:
    668c:	26 2f       	mov	r18, r22

0000668e <__eewr_r18_m128rfa1>:
    668e:	f9 99       	sbic	0x1f, 1	; 31
    6690:	fe cf       	rjmp	.-4      	; 0x668e <__eewr_r18_m128rfa1>
    6692:	1f ba       	out	0x1f, r1	; 31
    6694:	92 bd       	out	0x22, r25	; 34
    6696:	81 bd       	out	0x21, r24	; 33
    6698:	20 bd       	out	0x20, r18	; 32
    669a:	0f b6       	in	r0, 0x3f	; 63
    669c:	f8 94       	cli
    669e:	fa 9a       	sbi	0x1f, 2	; 31
    66a0:	f9 9a       	sbi	0x1f, 1	; 31
    66a2:	0f be       	out	0x3f, r0	; 63
    66a4:	01 96       	adiw	r24, 0x01	; 1
    66a6:	08 95       	ret

000066a8 <calloc>:
    66a8:	0f 93       	push	r16
    66aa:	1f 93       	push	r17
    66ac:	cf 93       	push	r28
    66ae:	df 93       	push	r29
    66b0:	86 9f       	mul	r24, r22
    66b2:	80 01       	movw	r16, r0
    66b4:	87 9f       	mul	r24, r23
    66b6:	10 0d       	add	r17, r0
    66b8:	96 9f       	mul	r25, r22
    66ba:	10 0d       	add	r17, r0
    66bc:	11 24       	eor	r1, r1
    66be:	c8 01       	movw	r24, r16
    66c0:	0e 94 70 33 	call	0x66e0	; 0x66e0 <malloc>
    66c4:	ec 01       	movw	r28, r24
    66c6:	00 97       	sbiw	r24, 0x00	; 0
    66c8:	29 f0       	breq	.+10     	; 0x66d4 <calloc+0x2c>
    66ca:	a8 01       	movw	r20, r16
    66cc:	60 e0       	ldi	r22, 0x00	; 0
    66ce:	70 e0       	ldi	r23, 0x00	; 0
    66d0:	0e 94 9d 34 	call	0x693a	; 0x693a <memset>
    66d4:	ce 01       	movw	r24, r28
    66d6:	df 91       	pop	r29
    66d8:	cf 91       	pop	r28
    66da:	1f 91       	pop	r17
    66dc:	0f 91       	pop	r16
    66de:	08 95       	ret

000066e0 <malloc>:
    66e0:	cf 93       	push	r28
    66e2:	df 93       	push	r29
    66e4:	82 30       	cpi	r24, 0x02	; 2
    66e6:	91 05       	cpc	r25, r1
    66e8:	10 f4       	brcc	.+4      	; 0x66ee <malloc+0xe>
    66ea:	82 e0       	ldi	r24, 0x02	; 2
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	e0 91 85 11 	lds	r30, 0x1185
    66f2:	f0 91 86 11 	lds	r31, 0x1186
    66f6:	20 e0       	ldi	r18, 0x00	; 0
    66f8:	30 e0       	ldi	r19, 0x00	; 0
    66fa:	c0 e0       	ldi	r28, 0x00	; 0
    66fc:	d0 e0       	ldi	r29, 0x00	; 0
    66fe:	30 97       	sbiw	r30, 0x00	; 0
    6700:	11 f1       	breq	.+68     	; 0x6746 <malloc+0x66>
    6702:	40 81       	ld	r20, Z
    6704:	51 81       	ldd	r21, Z+1	; 0x01
    6706:	48 17       	cp	r20, r24
    6708:	59 07       	cpc	r21, r25
    670a:	c0 f0       	brcs	.+48     	; 0x673c <malloc+0x5c>
    670c:	48 17       	cp	r20, r24
    670e:	59 07       	cpc	r21, r25
    6710:	61 f4       	brne	.+24     	; 0x672a <malloc+0x4a>
    6712:	82 81       	ldd	r24, Z+2	; 0x02
    6714:	93 81       	ldd	r25, Z+3	; 0x03
    6716:	20 97       	sbiw	r28, 0x00	; 0
    6718:	19 f0       	breq	.+6      	; 0x6720 <malloc+0x40>
    671a:	9b 83       	std	Y+3, r25	; 0x03
    671c:	8a 83       	std	Y+2, r24	; 0x02
    671e:	2b c0       	rjmp	.+86     	; 0x6776 <malloc+0x96>
    6720:	90 93 86 11 	sts	0x1186, r25
    6724:	80 93 85 11 	sts	0x1185, r24
    6728:	26 c0       	rjmp	.+76     	; 0x6776 <malloc+0x96>
    672a:	21 15       	cp	r18, r1
    672c:	31 05       	cpc	r19, r1
    672e:	19 f0       	breq	.+6      	; 0x6736 <malloc+0x56>
    6730:	42 17       	cp	r20, r18
    6732:	53 07       	cpc	r21, r19
    6734:	18 f4       	brcc	.+6      	; 0x673c <malloc+0x5c>
    6736:	9a 01       	movw	r18, r20
    6738:	be 01       	movw	r22, r28
    673a:	df 01       	movw	r26, r30
    673c:	ef 01       	movw	r28, r30
    673e:	02 80       	ldd	r0, Z+2	; 0x02
    6740:	f3 81       	ldd	r31, Z+3	; 0x03
    6742:	e0 2d       	mov	r30, r0
    6744:	dc cf       	rjmp	.-72     	; 0x66fe <malloc+0x1e>
    6746:	21 15       	cp	r18, r1
    6748:	31 05       	cpc	r19, r1
    674a:	09 f1       	breq	.+66     	; 0x678e <malloc+0xae>
    674c:	28 1b       	sub	r18, r24
    674e:	39 0b       	sbc	r19, r25
    6750:	24 30       	cpi	r18, 0x04	; 4
    6752:	31 05       	cpc	r19, r1
    6754:	90 f4       	brcc	.+36     	; 0x677a <malloc+0x9a>
    6756:	12 96       	adiw	r26, 0x02	; 2
    6758:	8d 91       	ld	r24, X+
    675a:	9c 91       	ld	r25, X
    675c:	13 97       	sbiw	r26, 0x03	; 3
    675e:	61 15       	cp	r22, r1
    6760:	71 05       	cpc	r23, r1
    6762:	21 f0       	breq	.+8      	; 0x676c <malloc+0x8c>
    6764:	fb 01       	movw	r30, r22
    6766:	93 83       	std	Z+3, r25	; 0x03
    6768:	82 83       	std	Z+2, r24	; 0x02
    676a:	04 c0       	rjmp	.+8      	; 0x6774 <malloc+0x94>
    676c:	90 93 86 11 	sts	0x1186, r25
    6770:	80 93 85 11 	sts	0x1185, r24
    6774:	fd 01       	movw	r30, r26
    6776:	32 96       	adiw	r30, 0x02	; 2
    6778:	44 c0       	rjmp	.+136    	; 0x6802 <malloc+0x122>
    677a:	fd 01       	movw	r30, r26
    677c:	e2 0f       	add	r30, r18
    677e:	f3 1f       	adc	r31, r19
    6780:	81 93       	st	Z+, r24
    6782:	91 93       	st	Z+, r25
    6784:	22 50       	subi	r18, 0x02	; 2
    6786:	31 09       	sbc	r19, r1
    6788:	2d 93       	st	X+, r18
    678a:	3c 93       	st	X, r19
    678c:	3a c0       	rjmp	.+116    	; 0x6802 <malloc+0x122>
    678e:	20 91 83 11 	lds	r18, 0x1183
    6792:	30 91 84 11 	lds	r19, 0x1184
    6796:	23 2b       	or	r18, r19
    6798:	41 f4       	brne	.+16     	; 0x67aa <malloc+0xca>
    679a:	20 91 08 02 	lds	r18, 0x0208
    679e:	30 91 09 02 	lds	r19, 0x0209
    67a2:	30 93 84 11 	sts	0x1184, r19
    67a6:	20 93 83 11 	sts	0x1183, r18
    67aa:	20 91 06 02 	lds	r18, 0x0206
    67ae:	30 91 07 02 	lds	r19, 0x0207
    67b2:	21 15       	cp	r18, r1
    67b4:	31 05       	cpc	r19, r1
    67b6:	41 f4       	brne	.+16     	; 0x67c8 <malloc+0xe8>
    67b8:	2d b7       	in	r18, 0x3d	; 61
    67ba:	3e b7       	in	r19, 0x3e	; 62
    67bc:	40 91 0a 02 	lds	r20, 0x020A
    67c0:	50 91 0b 02 	lds	r21, 0x020B
    67c4:	24 1b       	sub	r18, r20
    67c6:	35 0b       	sbc	r19, r21
    67c8:	e0 91 83 11 	lds	r30, 0x1183
    67cc:	f0 91 84 11 	lds	r31, 0x1184
    67d0:	e2 17       	cp	r30, r18
    67d2:	f3 07       	cpc	r31, r19
    67d4:	a0 f4       	brcc	.+40     	; 0x67fe <malloc+0x11e>
    67d6:	2e 1b       	sub	r18, r30
    67d8:	3f 0b       	sbc	r19, r31
    67da:	28 17       	cp	r18, r24
    67dc:	39 07       	cpc	r19, r25
    67de:	78 f0       	brcs	.+30     	; 0x67fe <malloc+0x11e>
    67e0:	ac 01       	movw	r20, r24
    67e2:	4e 5f       	subi	r20, 0xFE	; 254
    67e4:	5f 4f       	sbci	r21, 0xFF	; 255
    67e6:	24 17       	cp	r18, r20
    67e8:	35 07       	cpc	r19, r21
    67ea:	48 f0       	brcs	.+18     	; 0x67fe <malloc+0x11e>
    67ec:	4e 0f       	add	r20, r30
    67ee:	5f 1f       	adc	r21, r31
    67f0:	50 93 84 11 	sts	0x1184, r21
    67f4:	40 93 83 11 	sts	0x1183, r20
    67f8:	81 93       	st	Z+, r24
    67fa:	91 93       	st	Z+, r25
    67fc:	02 c0       	rjmp	.+4      	; 0x6802 <malloc+0x122>
    67fe:	e0 e0       	ldi	r30, 0x00	; 0
    6800:	f0 e0       	ldi	r31, 0x00	; 0
    6802:	cf 01       	movw	r24, r30
    6804:	df 91       	pop	r29
    6806:	cf 91       	pop	r28
    6808:	08 95       	ret

0000680a <free>:
    680a:	0f 93       	push	r16
    680c:	1f 93       	push	r17
    680e:	cf 93       	push	r28
    6810:	df 93       	push	r29
    6812:	00 97       	sbiw	r24, 0x00	; 0
    6814:	09 f4       	brne	.+2      	; 0x6818 <free+0xe>
    6816:	8c c0       	rjmp	.+280    	; 0x6930 <free+0x126>
    6818:	fc 01       	movw	r30, r24
    681a:	32 97       	sbiw	r30, 0x02	; 2
    681c:	13 82       	std	Z+3, r1	; 0x03
    681e:	12 82       	std	Z+2, r1	; 0x02
    6820:	00 91 85 11 	lds	r16, 0x1185
    6824:	10 91 86 11 	lds	r17, 0x1186
    6828:	01 15       	cp	r16, r1
    682a:	11 05       	cpc	r17, r1
    682c:	81 f4       	brne	.+32     	; 0x684e <free+0x44>
    682e:	20 81       	ld	r18, Z
    6830:	31 81       	ldd	r19, Z+1	; 0x01
    6832:	82 0f       	add	r24, r18
    6834:	93 1f       	adc	r25, r19
    6836:	20 91 83 11 	lds	r18, 0x1183
    683a:	30 91 84 11 	lds	r19, 0x1184
    683e:	28 17       	cp	r18, r24
    6840:	39 07       	cpc	r19, r25
    6842:	79 f5       	brne	.+94     	; 0x68a2 <free+0x98>
    6844:	f0 93 84 11 	sts	0x1184, r31
    6848:	e0 93 83 11 	sts	0x1183, r30
    684c:	71 c0       	rjmp	.+226    	; 0x6930 <free+0x126>
    684e:	d8 01       	movw	r26, r16
    6850:	40 e0       	ldi	r20, 0x00	; 0
    6852:	50 e0       	ldi	r21, 0x00	; 0
    6854:	ae 17       	cp	r26, r30
    6856:	bf 07       	cpc	r27, r31
    6858:	50 f4       	brcc	.+20     	; 0x686e <free+0x64>
    685a:	12 96       	adiw	r26, 0x02	; 2
    685c:	2d 91       	ld	r18, X+
    685e:	3c 91       	ld	r19, X
    6860:	13 97       	sbiw	r26, 0x03	; 3
    6862:	ad 01       	movw	r20, r26
    6864:	21 15       	cp	r18, r1
    6866:	31 05       	cpc	r19, r1
    6868:	09 f1       	breq	.+66     	; 0x68ac <free+0xa2>
    686a:	d9 01       	movw	r26, r18
    686c:	f3 cf       	rjmp	.-26     	; 0x6854 <free+0x4a>
    686e:	9d 01       	movw	r18, r26
    6870:	da 01       	movw	r26, r20
    6872:	33 83       	std	Z+3, r19	; 0x03
    6874:	22 83       	std	Z+2, r18	; 0x02
    6876:	60 81       	ld	r22, Z
    6878:	71 81       	ldd	r23, Z+1	; 0x01
    687a:	86 0f       	add	r24, r22
    687c:	97 1f       	adc	r25, r23
    687e:	82 17       	cp	r24, r18
    6880:	93 07       	cpc	r25, r19
    6882:	69 f4       	brne	.+26     	; 0x689e <free+0x94>
    6884:	ec 01       	movw	r28, r24
    6886:	28 81       	ld	r18, Y
    6888:	39 81       	ldd	r19, Y+1	; 0x01
    688a:	26 0f       	add	r18, r22
    688c:	37 1f       	adc	r19, r23
    688e:	2e 5f       	subi	r18, 0xFE	; 254
    6890:	3f 4f       	sbci	r19, 0xFF	; 255
    6892:	31 83       	std	Z+1, r19	; 0x01
    6894:	20 83       	st	Z, r18
    6896:	8a 81       	ldd	r24, Y+2	; 0x02
    6898:	9b 81       	ldd	r25, Y+3	; 0x03
    689a:	93 83       	std	Z+3, r25	; 0x03
    689c:	82 83       	std	Z+2, r24	; 0x02
    689e:	45 2b       	or	r20, r21
    68a0:	29 f4       	brne	.+10     	; 0x68ac <free+0xa2>
    68a2:	f0 93 86 11 	sts	0x1186, r31
    68a6:	e0 93 85 11 	sts	0x1185, r30
    68aa:	42 c0       	rjmp	.+132    	; 0x6930 <free+0x126>
    68ac:	13 96       	adiw	r26, 0x03	; 3
    68ae:	fc 93       	st	X, r31
    68b0:	ee 93       	st	-X, r30
    68b2:	12 97       	sbiw	r26, 0x02	; 2
    68b4:	ed 01       	movw	r28, r26
    68b6:	49 91       	ld	r20, Y+
    68b8:	59 91       	ld	r21, Y+
    68ba:	9e 01       	movw	r18, r28
    68bc:	24 0f       	add	r18, r20
    68be:	35 1f       	adc	r19, r21
    68c0:	e2 17       	cp	r30, r18
    68c2:	f3 07       	cpc	r31, r19
    68c4:	71 f4       	brne	.+28     	; 0x68e2 <free+0xd8>
    68c6:	80 81       	ld	r24, Z
    68c8:	91 81       	ldd	r25, Z+1	; 0x01
    68ca:	84 0f       	add	r24, r20
    68cc:	95 1f       	adc	r25, r21
    68ce:	02 96       	adiw	r24, 0x02	; 2
    68d0:	11 96       	adiw	r26, 0x01	; 1
    68d2:	9c 93       	st	X, r25
    68d4:	8e 93       	st	-X, r24
    68d6:	82 81       	ldd	r24, Z+2	; 0x02
    68d8:	93 81       	ldd	r25, Z+3	; 0x03
    68da:	13 96       	adiw	r26, 0x03	; 3
    68dc:	9c 93       	st	X, r25
    68de:	8e 93       	st	-X, r24
    68e0:	12 97       	sbiw	r26, 0x02	; 2
    68e2:	e0 e0       	ldi	r30, 0x00	; 0
    68e4:	f0 e0       	ldi	r31, 0x00	; 0
    68e6:	d8 01       	movw	r26, r16
    68e8:	12 96       	adiw	r26, 0x02	; 2
    68ea:	8d 91       	ld	r24, X+
    68ec:	9c 91       	ld	r25, X
    68ee:	13 97       	sbiw	r26, 0x03	; 3
    68f0:	00 97       	sbiw	r24, 0x00	; 0
    68f2:	19 f0       	breq	.+6      	; 0x68fa <free+0xf0>
    68f4:	f8 01       	movw	r30, r16
    68f6:	8c 01       	movw	r16, r24
    68f8:	f6 cf       	rjmp	.-20     	; 0x68e6 <free+0xdc>
    68fa:	8d 91       	ld	r24, X+
    68fc:	9c 91       	ld	r25, X
    68fe:	98 01       	movw	r18, r16
    6900:	2e 5f       	subi	r18, 0xFE	; 254
    6902:	3f 4f       	sbci	r19, 0xFF	; 255
    6904:	82 0f       	add	r24, r18
    6906:	93 1f       	adc	r25, r19
    6908:	20 91 83 11 	lds	r18, 0x1183
    690c:	30 91 84 11 	lds	r19, 0x1184
    6910:	28 17       	cp	r18, r24
    6912:	39 07       	cpc	r19, r25
    6914:	69 f4       	brne	.+26     	; 0x6930 <free+0x126>
    6916:	30 97       	sbiw	r30, 0x00	; 0
    6918:	29 f4       	brne	.+10     	; 0x6924 <free+0x11a>
    691a:	10 92 86 11 	sts	0x1186, r1
    691e:	10 92 85 11 	sts	0x1185, r1
    6922:	02 c0       	rjmp	.+4      	; 0x6928 <free+0x11e>
    6924:	13 82       	std	Z+3, r1	; 0x03
    6926:	12 82       	std	Z+2, r1	; 0x02
    6928:	10 93 84 11 	sts	0x1184, r17
    692c:	00 93 83 11 	sts	0x1183, r16
    6930:	df 91       	pop	r29
    6932:	cf 91       	pop	r28
    6934:	1f 91       	pop	r17
    6936:	0f 91       	pop	r16
    6938:	08 95       	ret

0000693a <memset>:
    693a:	dc 01       	movw	r26, r24
    693c:	01 c0       	rjmp	.+2      	; 0x6940 <memset+0x6>
    693e:	6d 93       	st	X+, r22
    6940:	41 50       	subi	r20, 0x01	; 1
    6942:	50 40       	sbci	r21, 0x00	; 0
    6944:	e0 f7       	brcc	.-8      	; 0x693e <memset+0x4>
    6946:	08 95       	ret

00006948 <__mulshisi3>:
    6948:	b7 ff       	sbrs	r27, 7
    694a:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__muluhisi3>

0000694e <__mulohisi3>:
    694e:	0e 94 29 30 	call	0x6052	; 0x6052 <__muluhisi3>
    6952:	82 1b       	sub	r24, r18
    6954:	93 0b       	sbc	r25, r19
    6956:	08 95       	ret

00006958 <__divmodsi4>:
    6958:	05 2e       	mov	r0, r21
    695a:	97 fb       	bst	r25, 7
    695c:	1e f4       	brtc	.+6      	; 0x6964 <__divmodsi4+0xc>
    695e:	00 94       	com	r0
    6960:	0e 94 c3 34 	call	0x6986	; 0x6986 <__negsi2>
    6964:	57 fd       	sbrc	r21, 7
    6966:	07 d0       	rcall	.+14     	; 0x6976 <__divmodsi4_neg2>
    6968:	0e 94 6c 30 	call	0x60d8	; 0x60d8 <__udivmodsi4>
    696c:	07 fc       	sbrc	r0, 7
    696e:	03 d0       	rcall	.+6      	; 0x6976 <__divmodsi4_neg2>
    6970:	4e f4       	brtc	.+18     	; 0x6984 <__divmodsi4_exit>
    6972:	0c 94 c3 34 	jmp	0x6986	; 0x6986 <__negsi2>

00006976 <__divmodsi4_neg2>:
    6976:	50 95       	com	r21
    6978:	40 95       	com	r20
    697a:	30 95       	com	r19
    697c:	21 95       	neg	r18
    697e:	3f 4f       	sbci	r19, 0xFF	; 255
    6980:	4f 4f       	sbci	r20, 0xFF	; 255
    6982:	5f 4f       	sbci	r21, 0xFF	; 255

00006984 <__divmodsi4_exit>:
    6984:	08 95       	ret

00006986 <__negsi2>:
    6986:	90 95       	com	r25
    6988:	80 95       	com	r24
    698a:	70 95       	com	r23
    698c:	61 95       	neg	r22
    698e:	7f 4f       	sbci	r23, 0xFF	; 255
    6990:	8f 4f       	sbci	r24, 0xFF	; 255
    6992:	9f 4f       	sbci	r25, 0xFF	; 255
    6994:	08 95       	ret

00006996 <_exit>:
    6996:	f8 94       	cli

00006998 <__stop_program>:
    6998:	ff cf       	rjmp	.-2      	; 0x6998 <__stop_program>
