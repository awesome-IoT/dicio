   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 350               	.global	tx_cmd_task
 352               	tx_cmd_task:
 353               		.stabd	46,0,0
   1:main.c        **** /**
   2:main.c        ****  * 18-748 Wireless Sensor Networks
   3:main.c        ****  * Spring 2016
   4:main.c        ****  * Lab 3: Multi-Hop Communication
   5:main.c        ****  * main.c (gateway)
   6:main.c        ****  * Kedar Amladi // kamladi. Daniel Santoro // ddsantor. Adam Selevan // aselevan.
   7:main.c        ****  */
   8:main.c        **** 
   9:main.c        **** // INCLUDES
  10:main.c        **** // standard nrk 
  11:main.c        **** #include <nrk.h>
  12:main.c        **** #include <nrk_events.h>
  13:main.c        **** #include <include.h>
  14:main.c        **** #include <ulib.h>
  15:main.c        **** #include <stdio.h>
  16:main.c        **** #include <stdlib.h>
  17:main.c        **** #include <avr/sleep.h>
  18:main.c        **** #include <hal.h>
  19:main.c        **** #include <bmac.h>
  20:main.c        **** #include <nrk_error.h>
  21:main.c        **** // this package
  22:main.c        **** #include <assembler.h>
  23:main.c        **** #include <light_pool.h>
  24:main.c        **** #include <neighbors.h>
  25:main.c        **** #include <parser.h>
  26:main.c        **** #include <sequence_pool.h>
  27:main.c        **** 
  28:main.c        **** // DEFINES
  29:main.c        **** #define MAC_ADDR 1
  30:main.c        **** #define SERVER_MSG_INCOMPLETE 0
  31:main.c        **** #define SERVER_MSG_RECEIVED 1
  32:main.c        **** #define PRINT_ENABLED 1
  33:main.c        **** #define PRINT_DISABLED 0
  34:main.c        **** #define PRESENT 1
  35:main.c        **** #define ABSENT -1
  36:main.c        **** 
  37:main.c        **** // TASK TYPES
  38:main.c        **** nrk_task_type RX_NODE_TASK;
  39:main.c        **** nrk_task_type RX_SERV_TASK; 
  40:main.c        **** nrk_task_type TX_CMD_TASK; 
  41:main.c        **** nrk_task_type TX_NODE_TASK;
  42:main.c        **** nrk_task_type TX_SERV_TASK;
  43:main.c        **** 
  44:main.c        **** // TASK STACKS
  45:main.c        **** NRK_STK rx_node_task_stack[NRK_APP_STACKSIZE];
  46:main.c        **** NRK_STK rx_serv_task_stack[NRK_APP_STACKSIZE];
  47:main.c        **** NRK_STK tx_cmd_task_stack[NRK_APP_STACKSIZE];
  48:main.c        **** NRK_STK tx_node_task_stack[NRK_APP_STACKSIZE];
  49:main.c        **** NRK_STK tx_serv_task_stack[NRK_APP_STACKSIZE];
  50:main.c        **** 
  51:main.c        **** // TASK DECLARATIONS
  52:main.c        **** void rx_node_task(void);
  53:main.c        **** void rx_serv_task(void);
  54:main.c        **** void tx_cmd_task(void);
  55:main.c        **** void tx_node_task(void);
  56:main.c        **** void tx_serv_task(void);
  57:main.c        **** void nrk_register_drivers(void);
  58:main.c        **** void nrk_create_taskset(void);
  59:main.c        **** 
  60:main.c        **** 
  61:main.c        **** // RECEIVE/TRANSMIT BUFFERS
  62:main.c        **** uint8_t net_rx_buf[RF_MAX_PAYLOAD_SIZE];
  63:main.c        **** uint8_t serv_rx_buf[RF_MAX_PAYLOAD_SIZE];
  64:main.c        **** uint16_t serv_rx_index = 0;
  65:main.c        **** uint8_t net_tx_buf[RF_MAX_PAYLOAD_SIZE];
  66:main.c        **** nrk_sem_t* net_tx_buf_mux;
  67:main.c        **** uint8_t serv_tx_buf[RF_MAX_PAYLOAD_SIZE];
  68:main.c        **** nrk_sem_t* serv_tx_buf_mux;
  69:main.c        **** 
  70:main.c        **** packet rx_packet;
  71:main.c        **** 
  72:main.c        **** // DRIVERS 
  73:main.c        **** 
  74:main.c        **** // NODE SEQUENCE POOL / SERVER SEQUENCE POOL
  75:main.c        **** // 
  76:main.c        **** sequence_pool_t seq_pool;
  77:main.c        **** uint16_t serv_seq_num;
  78:main.c        **** 
  79:main.c        **** // LIGHT VALUES/SEMAPHORE
  80:main.c        **** light_pool_t light_pool;
  81:main.c        **** nrk_sem_t *light_pool_mux;
  82:main.c        **** 
  83:main.c        **** // NEIGHBOR GRAPH/SEMAPHORE
  84:main.c        **** neighbor_graph_t neighbor_graph;
  85:main.c        **** nrk_sem_t *neighbor_graph_mux;
  86:main.c        **** 
  87:main.c        **** // GLOBAL FLAG/SEMAPHORE
  88:main.c        **** uint8_t print_enable;
  89:main.c        **** 
  90:main.c        **** // PACKET
  91:main.c        **** packet tx_packet;
  92:main.c        **** uint16_t seq_num = 0;
  93:main.c        **** 
  94:main.c        **** int main ()
  95:main.c        **** {
  96:main.c        ****   nrk_setup_ports ();
  97:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  98:main.c        **** 
  99:main.c        ****   nrk_init ();
 100:main.c        **** 
 101:main.c        ****   nrk_led_clr(0);
 102:main.c        ****   nrk_led_clr(1);
 103:main.c        ****   nrk_led_clr(2);
 104:main.c        ****   nrk_led_clr(3);
 105:main.c        ****   
 106:main.c        ****   nrk_time_set(0, 0);
 107:main.c        ****   
 108:main.c        ****   print_enable = 1;
 109:main.c        **** 
 110:main.c        ****   bmac_init(13);
 111:main.c        ****   bmac_task_config();
 112:main.c        ****   nrk_create_taskset();
 113:main.c        ****   nrk_start();
 114:main.c        ****   
 115:main.c        ****   return 0;
 116:main.c        **** }
 117:main.c        **** 
 118:main.c        **** void rx_node_task() {
 119:main.c        ****   packet rx_packet;
 120:main.c        ****   uint8_t len, rssi;
 121:main.c        ****   uint8_t* local_buf;
 122:main.c        ****   int8_t in_seq_pool;
 123:main.c        ****   uint16_t local_seq_num;
 124:main.c        ****   uint8_t new_node = NONE;
 125:main.c        ****   uint8_t LED_FLAG = 0;
 126:main.c        **** 
 127:main.c        ****   bmac_rx_pkt_set_buffer (net_rx_buf, RF_MAX_PAYLOAD_SIZE);
 128:main.c        ****   
 129:main.c        ****   while (!bmac_started ())
 130:main.c        ****     nrk_wait_until_next_period ();
 131:main.c        **** 
 132:main.c        ****   while(1) {
 133:main.c        ****     // DEBUG LED FLASHING
 134:main.c        ****     if(LED_FLAG == 0) {
 135:main.c        ****       LED_FLAG = 1;
 136:main.c        ****       nrk_led_set(0);
 137:main.c        ****     } else {
 138:main.c        ****       nrk_led_clr(0);
 139:main.c        ****       LED_FLAG = 0;
 140:main.c        ****     }
 141:main.c        ****     
 142:main.c        ****     // is there a packet available?
 143:main.c        ****     if(bmac_rx_pkt_ready()) {
 144:main.c        ****       // get the packet, parse and release
 145:main.c        ****       parse_msg(&rx_packet, &net_rx_buf, len);
 146:main.c        ****       local_buf = bmac_rx_pkt_get(&len, &rssi);
 147:main.c        ****       bmac_rx_pkt_release ();  
 148:main.c        ****       
 149:main.c        ****       // print if appropriate
 150:main.c        ****       if(print_enable == PRINT_ENABLED) {
 151:main.c        ****         printf ("RX: ");
 152:main.c        ****         for (uint8_t i = 0; i < len; i++)
 153:main.c        ****           printf ("%c", local_buf[i]);
 154:main.c        ****         printf("\r\n");        
 155:main.c        ****       }
 156:main.c        ****       
 157:main.c        ****       if(rx_packet.source_id != MAC_ADDR) {
 158:main.c        ****         // check to see if this node is in the sequence pool, if not then add it
 159:main.c        ****         in_seq_pool = in_sequence_pool(&seq_pool, rx_packet.source_id);
 160:main.c        ****         if(in_seq_pool == ABSENT) {
 161:main.c        ****           add_to_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
 162:main.c        ****           new_node = NODE_FOUND;
 163:main.c        ****         }
 164:main.c        ****       
 165:main.c        ****         // determine if we should parse this packet based on the sequence number
 166:main.c        ****         local_seq_num = get_sequence_number(&seq_pool, rx_packet.source_id);
 167:main.c        ****         if((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND)) {
 168:main.c        ****           // update the sequence pool and reset the new_node flag
 169:main.c        ****           update_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
 170:main.c        ****           new_node = NONE;
 171:main.c        ****           
 172:main.c        ****           // switch on packet type
 173:main.c        ****           switch(rx_packet.type) {
 174:main.c        ****             case MSG_NODE_SENSOR_VALUE:
 175:main.c        ****               nrk_kprintf(PSTR("Deal with message data.\r\n"));
 176:main.c        ****               break;
 177:main.c        ****             case MSG_GATEWAY:
 178:main.c        ****               nrk_kprintf(PSTR("Deal with command.\r\n"));
 179:main.c        ****               break;
 180:main.c        ****             default:
 181:main.c        ****               nrk_kprintf(PSTR("Other type of command.\r\n"));
 182:main.c        ****               break;            
 183:main.c        ****           }          
 184:main.c        ****         }
 185:main.c        ****       }
 186:main.c        ****     }
 187:main.c        ****     nrk_wait_until_next_period();
 188:main.c        ****   }
 189:main.c        **** }
 190:main.c        **** 
 191:main.c        **** 
 192:main.c        **** void clear_serv_rx_buf() {
 193:main.c        ****   for(uint8_t i = 0; i < serv_rx_index; i++) {
 194:main.c        ****     serv_rx_buf[i] = '\0';
 195:main.c        ****   }
 196:main.c        ****   serv_rx_index = 0;
 197:main.c        **** }
 198:main.c        **** 
 199:main.c        **** uint8_t get_uart_input() {
 200:main.c        ****   char option;
 201:main.c        ****   while(nrk_uart_data_ready(NRK_DEFAULT_UART)) {
 202:main.c        ****     option = getchar();
 203:main.c        ****     serv_rx_buf[serv_rx_index] = option;
 204:main.c        ****     printf("%c", option);
 205:main.c        ****     serv_rx_index++;
 206:main.c        ****     if(option == '\r') {
 207:main.c        ****       serv_rx_buf[serv_rx_index] = '\n';
 208:main.c        ****       serv_rx_index++;
 209:main.c        ****       nrk_kprintf(PSTR("\n"));
 210:main.c        ****       return SERVER_MSG_RECEIVED;    
 211:main.c        ****     }
 212:main.c        ****   }
 213:main.c        ****   return SERVER_MSG_INCOMPLETE;
 214:main.c        **** }
 215:main.c        **** 
 216:main.c        **** void rx_serv_task() {
 217:main.c        ****   uint16_t rx_seq_num;
 218:main.c        ****   nrk_sig_t uart_rx_signal = nrk_uart_rx_signal_get();
 219:main.c        ****   nrk_signal_register(uart_rx_signal);
 220:main.c        ****   
 221:main.c        ****   serv_seq_num = 0;
 222:main.c        ****   
 223:main.c        ****   while(1) {
 224:main.c        ****     // message received
 225:main.c        ****     if(get_uart_input() == SERVER_MSG_RECEIVED) {
 226:main.c        ****       // get sequence number out of message
 227:main.c        ****       rx_seq_num = serv_seq_num + 1; // replace this with parsing in the future
 228:main.c        ****       
 229:main.c        ****       // only receive this message if the sequence number is higher than the last
 230:main.c        ****       //  seen sequence number
 231:main.c        ****       if(rx_seq_num > serv_seq_num) {
 232:main.c        ****         nrk_kprintf(PSTR("command message received!!\r\n"));
 233:main.c        ****         // TODO: add to cmd_tx_buf
 234:main.c        ****       }
 235:main.c        ****       clear_serv_rx_buf();
 236:main.c        ****     }
 237:main.c        ****     nrk_wait_until_next_period();    
 238:main.c        ****   }
 239:main.c        **** }
 240:main.c        **** 
 241:main.c        **** void tx_cmd_task() {
 355               	.LM0:
 356               	.LFBB1:
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 0 */
 360               	.L__stack_usage = 0
 242:main.c        ****   uint8_t i = 0;
 362               	.LM1:
 363 0000 C0E0      		ldi r28,0
 364               	.L4:
 243:main.c        ****   while(1) {
 244:main.c        ****     if(i == 0) {
 245:main.c        ****       i = 1;
 246:main.c        ****       nrk_led_set(1);
 366               	.LM2:
 367 0002 81E0      		ldi r24,lo8(1)
 368 0004 90E0      		ldi r25,0
 244:main.c        ****       i = 1;
 370               	.LM3:
 371 0006 C111      		cpse r28,__zero_reg__
 372 0008 00C0      		rjmp .L2
 374               	.LM4:
 375 000a 0E94 0000 		call nrk_led_set
 245:main.c        ****       nrk_led_set(1);
 377               	.LM5:
 378 000e C1E0      		ldi r28,lo8(1)
 379 0010 00C0      		rjmp .L3
 380               	.L2:
 247:main.c        ****     } else {
 248:main.c        ****       nrk_led_clr(1);
 382               	.LM6:
 383 0012 0E94 0000 		call nrk_led_clr
 249:main.c        ****       i = 0;
 385               	.LM7:
 386 0016 C0E0      		ldi r28,0
 387               	.L3:
 250:main.c        ****     }
 251:main.c        ****     nrk_wait_until_next_period();    
 389               	.LM8:
 390 0018 0E94 0000 		call nrk_wait_until_next_period
 252:main.c        ****   }
 392               	.LM9:
 393 001c 00C0      		rjmp .L4
 398               	.Lscope1:
 400               		.stabd	78,0,0
 402               	.global	tx_node_task
 404               	tx_node_task:
 405               		.stabd	46,0,0
 253:main.c        **** }
 254:main.c        **** 
 255:main.c        **** void tx_node_task() {
 407               	.LM10:
 408               	.LFBB2:
 409               	/* prologue: function */
 410               	/* frame size = 0 */
 411               	/* stack size = 0 */
 412               	.L__stack_usage = 0
 256:main.c        ****   /*
 257:main.c        ****   uint8_t i = 0;
 258:main.c        ****   
 259:main.c        ****   // local variable initialization
 260:main.c        ****   uint16_t val;
 261:main.c        ****   nrk_sig_t tx_done_signal;
 262:main.c        ****   nrk_sig_mask_t ret;
 263:main.c        ****   
 264:main.c        ****   // Wait until bmac has started. This should be called by all tasks using bmac that do not call bm
 265:main.c        ****   while (!bmac_started ())
 266:main.c        ****     nrk_wait_until_next_period ();
 267:main.c        **** 
 268:main.c        ****   // Get and register the tx_done_signal to perform non-blocking transmits
 269:main.c        ****   tx_done_signal = bmac_get_tx_done_signal ();
 270:main.c        ****   nrk_signal_register (tx_done_signal);
 271:main.c        ****   
 272:main.c        ****   while(1) {
 273:main.c        ****     // send the packet
 274:main.c        ****     val = bmac_tx_pkt_nonblocking(tx_buf, strlen(tx_buf));
 275:main.c        ****     ret = nrk_event_wait (SIG(tx_done_signal));
 276:main.c        ****     
 277:main.c        ****     // Just check to be sure signal is okay
 278:main.c        ****     if(ret & SIG(tx_done_signal) == 0 ) {
 279:main.c        ****       nrk_kprintf (PSTR ("TX done signal error\r\n"));
 280:main.c        ****     }
 281:main.c        ****     nrk_wait_until_next_period();
 282:main.c        ****   }
 283:main.c        ****   */
 284:main.c        ****   uint8_t i = 0;
 414               	.LM11:
 415 001e C0E0      		ldi r28,0
 416               	.L9:
 285:main.c        ****   while(1) {
 286:main.c        ****     if(i == 0) {
 287:main.c        ****       i = 1;
 288:main.c        ****       nrk_led_set(2);
 418               	.LM12:
 419 0020 82E0      		ldi r24,lo8(2)
 420 0022 90E0      		ldi r25,0
 286:main.c        ****       i = 1;
 422               	.LM13:
 423 0024 C111      		cpse r28,__zero_reg__
 424 0026 00C0      		rjmp .L7
 426               	.LM14:
 427 0028 0E94 0000 		call nrk_led_set
 287:main.c        ****       nrk_led_set(2);
 429               	.LM15:
 430 002c C1E0      		ldi r28,lo8(1)
 431 002e 00C0      		rjmp .L8
 432               	.L7:
 289:main.c        ****     } else {
 290:main.c        ****       nrk_led_clr(2);
 434               	.LM16:
 435 0030 0E94 0000 		call nrk_led_clr
 291:main.c        ****       i = 0;
 437               	.LM17:
 438 0034 C0E0      		ldi r28,0
 439               	.L8:
 292:main.c        ****     }
 293:main.c        ****     nrk_wait_until_next_period();
 441               	.LM18:
 442 0036 0E94 0000 		call nrk_wait_until_next_period
 294:main.c        ****   }
 444               	.LM19:
 445 003a 00C0      		rjmp .L9
 450               	.Lscope2:
 452               		.stabd	78,0,0
 454               	.global	tx_serv_task
 456               	tx_serv_task:
 457               		.stabd	46,0,0
 295:main.c        **** }
 296:main.c        **** 
 297:main.c        **** void tx_serv_task() {
 459               	.LM20:
 460               	.LFBB3:
 461               	/* prologue: function */
 462               	/* frame size = 0 */
 463               	/* stack size = 0 */
 464               	.L__stack_usage = 0
 298:main.c        ****   uint8_t i = 0;
 466               	.LM21:
 467 003c C0E0      		ldi r28,0
 468               	.L13:
 299:main.c        ****   while(1) {
 300:main.c        ****     if(i == 0) {
 301:main.c        ****       i = 1;
 302:main.c        ****       nrk_led_set(4);
 470               	.LM22:
 471 003e 84E0      		ldi r24,lo8(4)
 472 0040 90E0      		ldi r25,0
 300:main.c        ****       i = 1;
 474               	.LM23:
 475 0042 C111      		cpse r28,__zero_reg__
 476 0044 00C0      		rjmp .L11
 478               	.LM24:
 479 0046 0E94 0000 		call nrk_led_set
 301:main.c        ****       nrk_led_set(4);
 481               	.LM25:
 482 004a C1E0      		ldi r28,lo8(1)
 483 004c 00C0      		rjmp .L12
 484               	.L11:
 303:main.c        ****     } else {
 304:main.c        ****       nrk_led_clr(4);
 486               	.LM26:
 487 004e 0E94 0000 		call nrk_led_clr
 305:main.c        ****       i = 0;
 489               	.LM27:
 490 0052 C0E0      		ldi r28,0
 491               	.L12:
 306:main.c        ****     }
 307:main.c        ****     nrk_wait_until_next_period();    
 493               	.LM28:
 494 0054 0E94 0000 		call nrk_wait_until_next_period
 308:main.c        ****   }
 496               	.LM29:
 497 0058 00C0      		rjmp .L13
 502               	.Lscope3:
 504               		.stabd	78,0,0
 505               		.section	.rodata.str1.1,"aMS",@progbits,1
 506               	.LC0:
 507 0000 5258 3A20 		.string	"RX: "
 507      00
 508               	.LC1:
 509 0005 0D00      		.string	"\r"
 510               		.text
 512               	.global	rx_node_task
 514               	rx_node_task:
 515               		.stabd	46,0,0
 118:main.c        ****   packet rx_packet;
 517               	.LM30:
 518               	.LFBB4:
 519 005a CF93      		push r28
 520 005c DF93      		push r29
 521 005e CDB7      		in r28,__SP_L__
 522 0060 DEB7      		in r29,__SP_H__
 523 0062 6297      		sbiw r28,18
 524 0064 0FB6      		in __tmp_reg__,__SREG__
 525 0066 F894      		cli
 526 0068 DEBF      		out __SP_H__,r29
 527 006a 0FBE      		out __SREG__,__tmp_reg__
 528 006c CDBF      		out __SP_L__,r28
 529               	/* prologue: function */
 530               	/* frame size = 18 */
 531               	/* stack size = 20 */
 532               	.L__stack_usage = 20
 127:main.c        ****   
 534               	.LM31:
 535 006e 64E7      		ldi r22,lo8(116)
 536 0070 80E0      		ldi r24,lo8(net_rx_buf)
 537 0072 90E0      		ldi r25,hi8(net_rx_buf)
 538 0074 0E94 0000 		call bmac_rx_pkt_set_buffer
 539               	.L15:
 129:main.c        ****     nrk_wait_until_next_period ();
 541               	.LM32:
 542 0078 0E94 0000 		call bmac_started
 543 007c 8111      		cpse r24,__zero_reg__
 544 007e 00C0      		rjmp .L37
 130:main.c        **** 
 546               	.LM33:
 547 0080 0E94 0000 		call nrk_wait_until_next_period
 548 0084 00C0      		rjmp .L15
 549               	.L37:
 550 0086 00E0      		ldi r16,0
 151:main.c        ****         for (uint8_t i = 0; i < len; i++)
 552               	.LM34:
 553 0088 80E0      		ldi r24,lo8(.LC0)
 554 008a E82E      		mov r14,r24
 555 008c 80E0      		ldi r24,hi8(.LC0)
 556 008e F82E      		mov r15,r24
 557               	.L30:
 136:main.c        ****     } else {
 559               	.LM35:
 560 0090 80E0      		ldi r24,0
 561 0092 90E0      		ldi r25,0
 134:main.c        ****       LED_FLAG = 1;
 563               	.LM36:
 564 0094 0111      		cpse r16,__zero_reg__
 565 0096 00C0      		rjmp .L17
 136:main.c        ****     } else {
 567               	.LM37:
 568 0098 0E94 0000 		call nrk_led_set
 135:main.c        ****       nrk_led_set(0);
 570               	.LM38:
 571 009c 01E0      		ldi r16,lo8(1)
 572 009e 00C0      		rjmp .L18
 573               	.L17:
 138:main.c        ****       LED_FLAG = 0;
 575               	.LM39:
 576 00a0 0E94 0000 		call nrk_led_clr
 139:main.c        ****     }
 578               	.LM40:
 579 00a4 00E0      		ldi r16,0
 580               	.L18:
 143:main.c        ****       // get the packet, parse and release
 582               	.LM41:
 583 00a6 0E94 0000 		call bmac_rx_pkt_ready
 584 00aa 8823      		tst r24
 585 00ac 01F4      		brne .+2
 586 00ae 00C0      		rjmp .L20
 145:main.c        ****       local_buf = bmac_rx_pkt_get(&len, &rssi);
 588               	.LM42:
 589 00b0 4A89      		ldd r20,Y+18
 590 00b2 60E0      		ldi r22,lo8(net_rx_buf)
 591 00b4 70E0      		ldi r23,hi8(net_rx_buf)
 592 00b6 CE01      		movw r24,r28
 593 00b8 0196      		adiw r24,1
 594 00ba 0E94 0000 		call parse_msg
 146:main.c        ****       bmac_rx_pkt_release ();  
 596               	.LM43:
 597 00be BE01      		movw r22,r28
 598 00c0 6F5E      		subi r22,-17
 599 00c2 7F4F      		sbci r23,-1
 600 00c4 CE01      		movw r24,r28
 601 00c6 4296      		adiw r24,18
 602 00c8 0E94 0000 		call bmac_rx_pkt_get
 603 00cc 6C01      		movw r12,r24
 147:main.c        ****       
 605               	.LM44:
 606 00ce 0E94 0000 		call bmac_rx_pkt_release
 150:main.c        ****         printf ("RX: ");
 608               	.LM45:
 609 00d2 8091 0000 		lds r24,print_enable
 610 00d6 8130      		cpi r24,lo8(1)
 611 00d8 01F4      		brne .L21
 151:main.c        ****         for (uint8_t i = 0; i < len; i++)
 613               	.LM46:
 614 00da FF92      		push r15
 615 00dc EF92      		push r14
 616 00de 0E94 0000 		call printf
 617               	.LBB2:
 152:main.c        ****           printf ("%c", local_buf[i]);
 619               	.LM47:
 620 00e2 0F90      		pop __tmp_reg__
 621 00e4 0F90      		pop __tmp_reg__
 622 00e6 10E0      		ldi r17,0
 623               	.L22:
 152:main.c        ****           printf ("%c", local_buf[i]);
 625               	.LM48:
 626 00e8 9A89      		ldd r25,Y+18
 627 00ea 1917      		cp r17,r25
 628 00ec 00F4      		brsh .L38
 153:main.c        ****         printf("\r\n");        
 630               	.LM49:
 631 00ee F601      		movw r30,r12
 632 00f0 E10F      		add r30,r17
 633 00f2 F11D      		adc r31,__zero_reg__
 634 00f4 8081      		ld r24,Z
 635 00f6 90E0      		ldi r25,0
 636 00f8 0E94 0000 		call putchar
 152:main.c        ****           printf ("%c", local_buf[i]);
 638               	.LM50:
 639 00fc 1F5F      		subi r17,lo8(-(1))
 640 00fe 00C0      		rjmp .L22
 641               	.L38:
 642               	.LBE2:
 154:main.c        ****       }
 644               	.LM51:
 645 0100 80E0      		ldi r24,lo8(.LC1)
 646 0102 90E0      		ldi r25,hi8(.LC1)
 647 0104 0E94 0000 		call puts
 648               	.L21:
 157:main.c        ****         // check to see if this node is in the sequence pool, if not then add it
 650               	.LM52:
 651 0108 6A81      		ldd r22,Y+2
 652 010a 6130      		cpi r22,lo8(1)
 653 010c 01F0      		breq .L20
 159:main.c        ****         if(in_seq_pool == ABSENT) {
 655               	.LM53:
 656 010e 80E0      		ldi r24,lo8(seq_pool)
 657 0110 90E0      		ldi r25,hi8(seq_pool)
 658 0112 0E94 0000 		call in_sequence_pool
 160:main.c        ****           add_to_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
 660               	.LM54:
 661 0116 8F3F      		cpi r24,lo8(-1)
 662 0118 01F4      		brne .L31
 161:main.c        ****           new_node = NODE_FOUND;
 664               	.LM55:
 665 011a 4B81      		ldd r20,Y+3
 666 011c 5C81      		ldd r21,Y+4
 667 011e 6A81      		ldd r22,Y+2
 668 0120 80E0      		ldi r24,lo8(seq_pool)
 669 0122 90E0      		ldi r25,hi8(seq_pool)
 670 0124 0E94 0000 		call add_to_sequence_pool
 162:main.c        ****         }
 672               	.LM56:
 673 0128 11E0      		ldi r17,lo8(1)
 674 012a 00C0      		rjmp .L25
 675               	.L31:
 676 012c 10E0      		ldi r17,0
 677               	.L25:
 166:main.c        ****         if((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND)) {
 679               	.LM57:
 680 012e 6A81      		ldd r22,Y+2
 681 0130 80E0      		ldi r24,lo8(seq_pool)
 682 0132 90E0      		ldi r25,hi8(seq_pool)
 683 0134 0E94 0000 		call get_sequence_number
 167:main.c        ****           // update the sequence pool and reset the new_node flag
 685               	.LM58:
 686 0138 4B81      		ldd r20,Y+3
 687 013a 5C81      		ldd r21,Y+4
 688 013c 8417      		cp r24,r20
 689 013e 9507      		cpc r25,r21
 690 0140 00F0      		brlo .L26
 167:main.c        ****           // update the sequence pool and reset the new_node flag
 692               	.LM59:
 693 0142 1130      		cpi r17,lo8(1)
 694 0144 01F4      		brne .L20
 695               	.L26:
 169:main.c        ****           new_node = NONE;
 697               	.LM60:
 698 0146 6A81      		ldd r22,Y+2
 699 0148 80E0      		ldi r24,lo8(seq_pool)
 700 014a 90E0      		ldi r25,hi8(seq_pool)
 701 014c 0E94 0000 		call update_sequence_pool
 173:main.c        ****             case MSG_NODE_SENSOR_VALUE:
 703               	.LM61:
 704 0150 8981      		ldd r24,Y+1
 705 0152 8130      		cpi r24,lo8(1)
 706 0154 01F0      		breq .L28
 707 0156 8330      		cpi r24,lo8(3)
 708 0158 01F4      		brne .L39
 178:main.c        ****               break;
 710               	.LM62:
 711 015a 80E0      		ldi r24,lo8(__c.3794)
 712 015c 90E0      		ldi r25,hi8(__c.3794)
 713 015e 00C0      		rjmp .L36
 714               	.L28:
 175:main.c        ****               break;
 716               	.LM63:
 717 0160 80E0      		ldi r24,lo8(__c.3790)
 718 0162 90E0      		ldi r25,hi8(__c.3790)
 719 0164 00C0      		rjmp .L36
 720               	.L39:
 181:main.c        ****               break;            
 722               	.LM64:
 723 0166 80E0      		ldi r24,lo8(__c.3797)
 724 0168 90E0      		ldi r25,hi8(__c.3797)
 725               	.L36:
 726 016a 0E94 0000 		call nrk_kprintf
 727               	.L20:
 187:main.c        ****   }
 729               	.LM65:
 730 016e 0E94 0000 		call nrk_wait_until_next_period
 188:main.c        **** }
 732               	.LM66:
 733 0172 00C0      		rjmp .L30
 746               	.Lscope4:
 748               		.stabd	78,0,0
 750               	.global	clear_serv_rx_buf
 752               	clear_serv_rx_buf:
 753               		.stabd	46,0,0
 192:main.c        ****   for(uint8_t i = 0; i < serv_rx_index; i++) {
 755               	.LM67:
 756               	.LFBB5:
 757               	/* prologue: function */
 758               	/* frame size = 0 */
 759               	/* stack size = 0 */
 760               	.L__stack_usage = 0
 761               	.LBB3:
 193:main.c        ****     serv_rx_buf[i] = '\0';
 763               	.LM68:
 764 0174 4091 0000 		lds r20,serv_rx_index
 765 0178 5091 0000 		lds r21,serv_rx_index+1
 766 017c 20E0      		ldi r18,0
 767               	.L41:
 193:main.c        ****     serv_rx_buf[i] = '\0';
 769               	.LM69:
 770 017e 822F      		mov r24,r18
 771 0180 90E0      		ldi r25,0
 772 0182 8417      		cp r24,r20
 773 0184 9507      		cpc r25,r21
 774 0186 00F4      		brsh .L43
 194:main.c        ****   }
 776               	.LM70:
 777 0188 FC01      		movw r30,r24
 778 018a E050      		subi r30,lo8(-(serv_rx_buf))
 779 018c F040      		sbci r31,hi8(-(serv_rx_buf))
 780 018e 1082      		st Z,__zero_reg__
 193:main.c        ****     serv_rx_buf[i] = '\0';
 782               	.LM71:
 783 0190 2F5F      		subi r18,lo8(-(1))
 784 0192 00C0      		rjmp .L41
 785               	.L43:
 786               	.LBE3:
 196:main.c        **** }
 788               	.LM72:
 789 0194 1092 0000 		sts serv_rx_index+1,__zero_reg__
 790 0198 1092 0000 		sts serv_rx_index,__zero_reg__
 791 019c 0895      		ret
 796               	.Lscope5:
 798               		.stabd	78,0,0
 800               	.global	get_uart_input
 802               	get_uart_input:
 803               		.stabd	46,0,0
 199:main.c        ****   char option;
 805               	.LM73:
 806               	.LFBB6:
 807 019e CF93      		push r28
 808               	/* prologue: function */
 809               	/* frame size = 0 */
 810               	/* stack size = 1 */
 811               	.L__stack_usage = 1
 812               	.L45:
 201:main.c        ****     option = getchar();
 814               	.LM74:
 815 01a0 80E0      		ldi r24,0
 816 01a2 0E94 0000 		call nrk_uart_data_ready
 817 01a6 8823      		tst r24
 818 01a8 01F0      		breq .L46
 202:main.c        ****     serv_rx_buf[serv_rx_index] = option;
 820               	.LM75:
 821 01aa 8091 0000 		lds r24,__iob
 822 01ae 9091 0000 		lds r25,__iob+1
 823 01b2 0E94 0000 		call fgetc
 824 01b6 C82F      		mov r28,r24
 203:main.c        ****     printf("%c", option);
 826               	.LM76:
 827 01b8 E091 0000 		lds r30,serv_rx_index
 828 01bc F091 0000 		lds r31,serv_rx_index+1
 829 01c0 E050      		subi r30,lo8(-(serv_rx_buf))
 830 01c2 F040      		sbci r31,hi8(-(serv_rx_buf))
 831 01c4 8083      		st Z,r24
 204:main.c        ****     serv_rx_index++;
 833               	.LM77:
 834 01c6 9927      		clr r25
 835 01c8 0E94 0000 		call putchar
 205:main.c        ****     if(option == '\r') {
 837               	.LM78:
 838 01cc 8091 0000 		lds r24,serv_rx_index
 839 01d0 9091 0000 		lds r25,serv_rx_index+1
 840 01d4 0196      		adiw r24,1
 841 01d6 9093 0000 		sts serv_rx_index+1,r25
 842 01da 8093 0000 		sts serv_rx_index,r24
 206:main.c        ****       serv_rx_buf[serv_rx_index] = '\n';
 844               	.LM79:
 845 01de CD30      		cpi r28,lo8(13)
 846 01e0 01F4      		brne .L45
 207:main.c        ****       serv_rx_index++;
 848               	.LM80:
 849 01e2 FC01      		movw r30,r24
 850 01e4 E050      		subi r30,lo8(-(serv_rx_buf))
 851 01e6 F040      		sbci r31,hi8(-(serv_rx_buf))
 852 01e8 2AE0      		ldi r18,lo8(10)
 853 01ea 2083      		st Z,r18
 208:main.c        ****       nrk_kprintf(PSTR("\n"));
 855               	.LM81:
 856 01ec 0196      		adiw r24,1
 857 01ee 9093 0000 		sts serv_rx_index+1,r25
 858 01f2 8093 0000 		sts serv_rx_index,r24
 209:main.c        ****       return SERVER_MSG_RECEIVED;    
 860               	.LM82:
 861 01f6 80E0      		ldi r24,lo8(__c.3809)
 862 01f8 90E0      		ldi r25,hi8(__c.3809)
 863 01fa 0E94 0000 		call nrk_kprintf
 210:main.c        ****     }
 865               	.LM83:
 866 01fe 81E0      		ldi r24,lo8(1)
 867               	.L46:
 868               	/* epilogue start */
 214:main.c        **** 
 870               	.LM84:
 871 0200 CF91      		pop r28
 872 0202 0895      		ret
 877               	.Lscope6:
 879               		.stabd	78,0,0
 881               	.global	rx_serv_task
 883               	rx_serv_task:
 884               		.stabd	46,0,0
 216:main.c        ****   uint16_t rx_seq_num;
 886               	.LM85:
 887               	.LFBB7:
 888               	/* prologue: function */
 889               	/* frame size = 0 */
 890               	/* stack size = 0 */
 891               	.L__stack_usage = 0
 218:main.c        ****   nrk_signal_register(uart_rx_signal);
 893               	.LM86:
 894 0204 0E94 0000 		call nrk_uart_rx_signal_get
 219:main.c        ****   
 896               	.LM87:
 897 0208 0E94 0000 		call nrk_signal_register
 221:main.c        ****   
 899               	.LM88:
 900 020c 1092 0000 		sts serv_seq_num+1,__zero_reg__
 901 0210 1092 0000 		sts serv_seq_num,__zero_reg__
 902               	.L52:
 225:main.c        ****       // get sequence number out of message
 904               	.LM89:
 905 0214 0E94 0000 		call get_uart_input
 906 0218 8130      		cpi r24,lo8(1)
 907 021a 01F4      		brne .L50
 227:main.c        ****       
 909               	.LM90:
 910 021c 8091 0000 		lds r24,serv_seq_num
 911 0220 9091 0000 		lds r25,serv_seq_num+1
 912 0224 9C01      		movw r18,r24
 913 0226 2F5F      		subi r18,-1
 914 0228 3F4F      		sbci r19,-1
 231:main.c        ****         nrk_kprintf(PSTR("command message received!!\r\n"));
 916               	.LM91:
 917 022a 8217      		cp r24,r18
 918 022c 9307      		cpc r25,r19
 919 022e 00F4      		brsh .L51
 232:main.c        ****         // TODO: add to cmd_tx_buf
 921               	.LM92:
 922 0230 80E0      		ldi r24,lo8(__c.3818)
 923 0232 90E0      		ldi r25,hi8(__c.3818)
 924 0234 0E94 0000 		call nrk_kprintf
 925               	.L51:
 235:main.c        ****     }
 927               	.LM93:
 928 0238 0E94 0000 		call clear_serv_rx_buf
 929               	.L50:
 237:main.c        ****   }
 931               	.LM94:
 932 023c 0E94 0000 		call nrk_wait_until_next_period
 238:main.c        **** }
 934               	.LM95:
 935 0240 00C0      		rjmp .L52
 937               	.Lscope7:
 939               		.stabd	78,0,0
 941               	.global	nrk_create_taskset
 943               	nrk_create_taskset:
 944               		.stabd	46,0,0
 309:main.c        **** }
 310:main.c        **** 
 311:main.c        **** /**
 312:main.c        ****  * nrk_create_taskset - create the tasks in this application
 313:main.c        ****  * 
 314:main.c        ****  * NOTE: task priority maps to importance. That is, priority(5) > priority(2).
 315:main.c        ****  */
 316:main.c        **** void nrk_create_taskset ()
 317:main.c        **** {
 946               	.LM96:
 947               	.LFBB8:
 948 0242 8F92      		push r8
 949 0244 9F92      		push r9
 950 0246 AF92      		push r10
 951 0248 BF92      		push r11
 952 024a CF92      		push r12
 953 024c DF92      		push r13
 954 024e EF92      		push r14
 955 0250 FF92      		push r15
 956 0252 0F93      		push r16
 957 0254 1F93      		push r17
 958 0256 CF93      		push r28
 959               	/* prologue: function */
 960               	/* frame size = 0 */
 961               	/* stack size = 11 */
 962               	.L__stack_usage = 11
 318:main.c        ****   // PRIORITY ??
 319:main.c        ****   RX_NODE_TASK.task = rx_node_task;
 964               	.LM97:
 965 0258 00E0      		ldi r16,lo8(RX_NODE_TASK)
 966 025a 10E0      		ldi r17,hi8(RX_NODE_TASK)
 967 025c 80E0      		ldi r24,lo8(gs(rx_node_task))
 968 025e 90E0      		ldi r25,hi8(gs(rx_node_task))
 969 0260 F801      		movw r30,r16
 970 0262 9683      		std Z+6,r25
 971 0264 8583      		std Z+5,r24
 320:main.c        ****   nrk_task_set_stk(&RX_NODE_TASK, rx_node_task_stack, NRK_APP_STACKSIZE);
 973               	.LM98:
 974 0266 40E8      		ldi r20,lo8(-128)
 975 0268 50E0      		ldi r21,0
 976 026a 60E0      		ldi r22,lo8(rx_node_task_stack)
 977 026c 70E0      		ldi r23,hi8(rx_node_task_stack)
 978 026e C801      		movw r24,r16
 979 0270 0E94 0000 		call nrk_task_set_stk
 321:main.c        ****   RX_NODE_TASK.prio = 3;
 981               	.LM99:
 982 0274 83E0      		ldi r24,lo8(3)
 983 0276 F801      		movw r30,r16
 984 0278 8087      		std Z+8,r24
 322:main.c        ****   RX_NODE_TASK.FirstActivation = TRUE;
 986               	.LM100:
 987 027a C1E0      		ldi r28,lo8(1)
 988 027c C783      		std Z+7,r28
 323:main.c        ****   RX_NODE_TASK.Type = BASIC_TASK;
 990               	.LM101:
 991 027e C187      		std Z+9,r28
 324:main.c        ****   RX_NODE_TASK.SchType = PREEMPTIVE;
 993               	.LM102:
 994 0280 C287      		std Z+10,r28
 325:main.c        ****   RX_NODE_TASK.period.secs = 0;
 996               	.LM103:
 997 0282 1386      		std Z+11,__zero_reg__
 998 0284 1486      		std Z+12,__zero_reg__
 999 0286 1586      		std Z+13,__zero_reg__
 1000 0288 1686      		std Z+14,__zero_reg__
 326:main.c        ****   RX_NODE_TASK.period.nano_secs = 50*NANOS_PER_MS;
 1002               	.LM104:
 1003 028a 80E8      		ldi r24,lo8(-128)
 1004 028c 882E      		mov r8,r24
 1005 028e 80EF      		ldi r24,lo8(-16)
 1006 0290 982E      		mov r9,r24
 1007 0292 8AEF      		ldi r24,lo8(-6)
 1008 0294 A82E      		mov r10,r24
 1009 0296 82E0      		ldi r24,lo8(2)
 1010 0298 B82E      		mov r11,r24
 1011 029a 8786      		std Z+15,r8
 1012 029c 908A      		std Z+16,r9
 1013 029e A18A      		std Z+17,r10
 1014 02a0 B28A      		std Z+18,r11
 327:main.c        ****   RX_NODE_TASK.cpu_reserve.secs = 1;
 1016               	.LM105:
 1017 02a2 81E0      		ldi r24,lo8(1)
 1018 02a4 90E0      		ldi r25,0
 1019 02a6 A0E0      		ldi r26,0
 1020 02a8 B0E0      		ldi r27,0
 1021 02aa 838B      		std Z+19,r24
 1022 02ac 948B      		std Z+20,r25
 1023 02ae A58B      		std Z+21,r26
 1024 02b0 B68B      		std Z+22,r27
 328:main.c        ****   RX_NODE_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
 1026               	.LM106:
 1027 02b2 90E8      		ldi r25,lo8(-128)
 1028 02b4 C92E      		mov r12,r25
 1029 02b6 96E9      		ldi r25,lo8(-106)
 1030 02b8 D92E      		mov r13,r25
 1031 02ba 98E9      		ldi r25,lo8(-104)
 1032 02bc E92E      		mov r14,r25
 1033 02be F12C      		mov r15,__zero_reg__
 1034 02c0 C78A      		std Z+23,r12
 1035 02c2 D08E      		std Z+24,r13
 1036 02c4 E18E      		std Z+25,r14
 1037 02c6 F28E      		std Z+26,r15
 329:main.c        ****   RX_NODE_TASK.offset.secs = 0;
 1039               	.LM107:
 1040 02c8 138E      		std Z+27,__zero_reg__
 1041 02ca 148E      		std Z+28,__zero_reg__
 1042 02cc 158E      		std Z+29,__zero_reg__
 1043 02ce 168E      		std Z+30,__zero_reg__
 330:main.c        ****   RX_NODE_TASK.offset.nano_secs = 0;
 1045               	.LM108:
 1046 02d0 178E      		std Z+31,__zero_reg__
 1047 02d2 10A2      		std Z+32,__zero_reg__
 1048 02d4 11A2      		std Z+33,__zero_reg__
 1049 02d6 12A2      		std Z+34,__zero_reg__
 331:main.c        ****   nrk_activate_task (&RX_NODE_TASK);
 1051               	.LM109:
 1052 02d8 C801      		movw r24,r16
 1053 02da 0E94 0000 		call nrk_activate_task
 332:main.c        ****   
 333:main.c        ****   // PRIORITY ??
 334:main.c        ****   RX_SERV_TASK.task = rx_serv_task;
 1055               	.LM110:
 1056 02de 00E0      		ldi r16,lo8(RX_SERV_TASK)
 1057 02e0 10E0      		ldi r17,hi8(RX_SERV_TASK)
 1058 02e2 80E0      		ldi r24,lo8(gs(rx_serv_task))
 1059 02e4 90E0      		ldi r25,hi8(gs(rx_serv_task))
 1060 02e6 F801      		movw r30,r16
 1061 02e8 9683      		std Z+6,r25
 1062 02ea 8583      		std Z+5,r24
 335:main.c        ****   nrk_task_set_stk(&RX_SERV_TASK, rx_serv_task_stack, NRK_APP_STACKSIZE);
 1064               	.LM111:
 1065 02ec 40E8      		ldi r20,lo8(-128)
 1066 02ee 50E0      		ldi r21,0
 1067 02f0 60E0      		ldi r22,lo8(rx_serv_task_stack)
 1068 02f2 70E0      		ldi r23,hi8(rx_serv_task_stack)
 1069 02f4 C801      		movw r24,r16
 1070 02f6 0E94 0000 		call nrk_task_set_stk
 336:main.c        ****   RX_SERV_TASK.prio = 4;
 1072               	.LM112:
 1073 02fa 84E0      		ldi r24,lo8(4)
 1074 02fc F801      		movw r30,r16
 1075 02fe 8087      		std Z+8,r24
 337:main.c        ****   RX_SERV_TASK.FirstActivation = TRUE;
 1077               	.LM113:
 1078 0300 C783      		std Z+7,r28
 338:main.c        ****   RX_SERV_TASK.Type = BASIC_TASK;
 1080               	.LM114:
 1081 0302 C187      		std Z+9,r28
 339:main.c        ****   RX_SERV_TASK.SchType = PREEMPTIVE;
 1083               	.LM115:
 1084 0304 C287      		std Z+10,r28
 340:main.c        ****   RX_SERV_TASK.period.secs = 0;
 1086               	.LM116:
 1087 0306 1386      		std Z+11,__zero_reg__
 1088 0308 1486      		std Z+12,__zero_reg__
 1089 030a 1586      		std Z+13,__zero_reg__
 1090 030c 1686      		std Z+14,__zero_reg__
 341:main.c        ****   RX_SERV_TASK.period.nano_secs = 50*NANOS_PER_MS;
 1092               	.LM117:
 1093 030e 8786      		std Z+15,r8
 1094 0310 908A      		std Z+16,r9
 1095 0312 A18A      		std Z+17,r10
 1096 0314 B28A      		std Z+18,r11
 342:main.c        ****   RX_SERV_TASK.cpu_reserve.secs = 0;
 1098               	.LM118:
 1099 0316 138A      		std Z+19,__zero_reg__
 1100 0318 148A      		std Z+20,__zero_reg__
 1101 031a 158A      		std Z+21,__zero_reg__
 1102 031c 168A      		std Z+22,__zero_reg__
 343:main.c        ****   RX_SERV_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
 1104               	.LM119:
 1105 031e C78A      		std Z+23,r12
 1106 0320 D08E      		std Z+24,r13
 1107 0322 E18E      		std Z+25,r14
 1108 0324 F28E      		std Z+26,r15
 344:main.c        ****   RX_SERV_TASK.offset.secs = 0;
 1110               	.LM120:
 1111 0326 138E      		std Z+27,__zero_reg__
 1112 0328 148E      		std Z+28,__zero_reg__
 1113 032a 158E      		std Z+29,__zero_reg__
 1114 032c 168E      		std Z+30,__zero_reg__
 345:main.c        ****   RX_SERV_TASK.offset.nano_secs = 0;
 1116               	.LM121:
 1117 032e 178E      		std Z+31,__zero_reg__
 1118 0330 10A2      		std Z+32,__zero_reg__
 1119 0332 11A2      		std Z+33,__zero_reg__
 1120 0334 12A2      		std Z+34,__zero_reg__
 346:main.c        ****   nrk_activate_task(&RX_SERV_TASK);
 1122               	.LM122:
 1123 0336 C801      		movw r24,r16
 1124 0338 0E94 0000 		call nrk_activate_task
 347:main.c        ****   
 348:main.c        ****   // PRIORITY ??
 349:main.c        ****   TX_CMD_TASK.task = tx_cmd_task;
 1126               	.LM123:
 1127 033c 00E0      		ldi r16,lo8(TX_CMD_TASK)
 1128 033e 10E0      		ldi r17,hi8(TX_CMD_TASK)
 1129 0340 80E0      		ldi r24,lo8(gs(tx_cmd_task))
 1130 0342 90E0      		ldi r25,hi8(gs(tx_cmd_task))
 1131 0344 F801      		movw r30,r16
 1132 0346 9683      		std Z+6,r25
 1133 0348 8583      		std Z+5,r24
 350:main.c        ****   nrk_task_set_stk(&TX_CMD_TASK, tx_cmd_task_stack, NRK_APP_STACKSIZE);
 1135               	.LM124:
 1136 034a 40E8      		ldi r20,lo8(-128)
 1137 034c 50E0      		ldi r21,0
 1138 034e 60E0      		ldi r22,lo8(tx_cmd_task_stack)
 1139 0350 70E0      		ldi r23,hi8(tx_cmd_task_stack)
 1140 0352 C801      		movw r24,r16
 1141 0354 0E94 0000 		call nrk_task_set_stk
 351:main.c        ****   TX_CMD_TASK.prio = 5;
 1143               	.LM125:
 1144 0358 85E0      		ldi r24,lo8(5)
 1145 035a F801      		movw r30,r16
 1146 035c 8087      		std Z+8,r24
 352:main.c        ****   TX_CMD_TASK.FirstActivation = TRUE;
 1148               	.LM126:
 1149 035e C783      		std Z+7,r28
 353:main.c        ****   TX_CMD_TASK.Type = BASIC_TASK;
 1151               	.LM127:
 1152 0360 C187      		std Z+9,r28
 354:main.c        ****   TX_CMD_TASK.SchType = PREEMPTIVE;
 1154               	.LM128:
 1155 0362 C287      		std Z+10,r28
 355:main.c        ****   TX_CMD_TASK.period.secs = 0;
 1157               	.LM129:
 1158 0364 1386      		std Z+11,__zero_reg__
 1159 0366 1486      		std Z+12,__zero_reg__
 1160 0368 1586      		std Z+13,__zero_reg__
 1161 036a 1686      		std Z+14,__zero_reg__
 356:main.c        ****   TX_CMD_TASK.period.nano_secs = 100*NANOS_PER_MS;
 1163               	.LM130:
 1164 036c C12C      		mov r12,__zero_reg__
 1165 036e 21EE      		ldi r18,lo8(-31)
 1166 0370 D22E      		mov r13,r18
 1167 0372 25EF      		ldi r18,lo8(-11)
 1168 0374 E22E      		mov r14,r18
 1169 0376 25E0      		ldi r18,lo8(5)
 1170 0378 F22E      		mov r15,r18
 1171 037a C786      		std Z+15,r12
 1172 037c D08A      		std Z+16,r13
 1173 037e E18A      		std Z+17,r14
 1174 0380 F28A      		std Z+18,r15
 357:main.c        ****   TX_CMD_TASK.cpu_reserve.secs = 0;
 1176               	.LM131:
 1177 0382 138A      		std Z+19,__zero_reg__
 1178 0384 148A      		std Z+20,__zero_reg__
 1179 0386 158A      		std Z+21,__zero_reg__
 1180 0388 168A      		std Z+22,__zero_reg__
 358:main.c        ****   TX_CMD_TASK.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
 1182               	.LM132:
 1183 038a 80E0      		ldi r24,0
 1184 038c 9DE2      		ldi r25,lo8(45)
 1185 038e A1E3      		ldi r26,lo8(49)
 1186 0390 B1E0      		ldi r27,lo8(1)
 1187 0392 878B      		std Z+23,r24
 1188 0394 908F      		std Z+24,r25
 1189 0396 A18F      		std Z+25,r26
 1190 0398 B28F      		std Z+26,r27
 359:main.c        ****   TX_CMD_TASK.offset.secs = 0;
 1192               	.LM133:
 1193 039a 138E      		std Z+27,__zero_reg__
 1194 039c 148E      		std Z+28,__zero_reg__
 1195 039e 158E      		std Z+29,__zero_reg__
 1196 03a0 168E      		std Z+30,__zero_reg__
 360:main.c        ****   TX_CMD_TASK.offset.nano_secs = 0;
 1198               	.LM134:
 1199 03a2 178E      		std Z+31,__zero_reg__
 1200 03a4 10A2      		std Z+32,__zero_reg__
 1201 03a6 11A2      		std Z+33,__zero_reg__
 1202 03a8 12A2      		std Z+34,__zero_reg__
 361:main.c        ****   nrk_activate_task(&TX_CMD_TASK);
 1204               	.LM135:
 1205 03aa C801      		movw r24,r16
 1206 03ac 0E94 0000 		call nrk_activate_task
 362:main.c        ****   
 363:main.c        ****   
 364:main.c        ****   // PRIORITY ??
 365:main.c        ****   TX_NODE_TASK.task = tx_node_task;
 1208               	.LM136:
 1209 03b0 00E0      		ldi r16,lo8(TX_NODE_TASK)
 1210 03b2 10E0      		ldi r17,hi8(TX_NODE_TASK)
 1211 03b4 80E0      		ldi r24,lo8(gs(tx_node_task))
 1212 03b6 90E0      		ldi r25,hi8(gs(tx_node_task))
 1213 03b8 F801      		movw r30,r16
 1214 03ba 9683      		std Z+6,r25
 1215 03bc 8583      		std Z+5,r24
 366:main.c        ****   nrk_task_set_stk(&TX_NODE_TASK, tx_node_task_stack, NRK_APP_STACKSIZE);
 1217               	.LM137:
 1218 03be 40E8      		ldi r20,lo8(-128)
 1219 03c0 50E0      		ldi r21,0
 1220 03c2 60E0      		ldi r22,lo8(tx_node_task_stack)
 1221 03c4 70E0      		ldi r23,hi8(tx_node_task_stack)
 1222 03c6 C801      		movw r24,r16
 1223 03c8 0E94 0000 		call nrk_task_set_stk
 367:main.c        ****   TX_NODE_TASK.prio = 1;
 1225               	.LM138:
 1226 03cc F801      		movw r30,r16
 1227 03ce C087      		std Z+8,r28
 368:main.c        ****   TX_NODE_TASK.FirstActivation = TRUE;
 1229               	.LM139:
 1230 03d0 C783      		std Z+7,r28
 369:main.c        ****   TX_NODE_TASK.Type = BASIC_TASK;
 1232               	.LM140:
 1233 03d2 C187      		std Z+9,r28
 370:main.c        ****   TX_NODE_TASK.SchType = PREEMPTIVE;
 1235               	.LM141:
 1236 03d4 C287      		std Z+10,r28
 371:main.c        ****   TX_NODE_TASK.period.secs = 5;
 1238               	.LM142:
 1239 03d6 35E0      		ldi r19,lo8(5)
 1240 03d8 832E      		mov r8,r19
 1241 03da 912C      		mov r9,__zero_reg__
 1242 03dc A12C      		mov r10,__zero_reg__
 1243 03de B12C      		mov r11,__zero_reg__
 1244 03e0 8386      		std Z+11,r8
 1245 03e2 9486      		std Z+12,r9
 1246 03e4 A586      		std Z+13,r10
 1247 03e6 B686      		std Z+14,r11
 372:main.c        ****   TX_NODE_TASK.period.nano_secs = 0;
 1249               	.LM143:
 1250 03e8 1786      		std Z+15,__zero_reg__
 1251 03ea 108A      		std Z+16,__zero_reg__
 1252 03ec 118A      		std Z+17,__zero_reg__
 1253 03ee 128A      		std Z+18,__zero_reg__
 373:main.c        ****   TX_NODE_TASK.cpu_reserve.secs = 0;
 1255               	.LM144:
 1256 03f0 138A      		std Z+19,__zero_reg__
 1257 03f2 148A      		std Z+20,__zero_reg__
 1258 03f4 158A      		std Z+21,__zero_reg__
 1259 03f6 168A      		std Z+22,__zero_reg__
 374:main.c        ****   TX_NODE_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 1261               	.LM145:
 1262 03f8 C78A      		std Z+23,r12
 1263 03fa D08E      		std Z+24,r13
 1264 03fc E18E      		std Z+25,r14
 1265 03fe F28E      		std Z+26,r15
 375:main.c        ****   TX_NODE_TASK.offset.secs = 0;
 1267               	.LM146:
 1268 0400 138E      		std Z+27,__zero_reg__
 1269 0402 148E      		std Z+28,__zero_reg__
 1270 0404 158E      		std Z+29,__zero_reg__
 1271 0406 168E      		std Z+30,__zero_reg__
 376:main.c        ****   TX_NODE_TASK.offset.nano_secs = 0;
 1273               	.LM147:
 1274 0408 178E      		std Z+31,__zero_reg__
 1275 040a 10A2      		std Z+32,__zero_reg__
 1276 040c 11A2      		std Z+33,__zero_reg__
 1277 040e 12A2      		std Z+34,__zero_reg__
 377:main.c        ****   nrk_activate_task(&TX_NODE_TASK);
 1279               	.LM148:
 1280 0410 C801      		movw r24,r16
 1281 0412 0E94 0000 		call nrk_activate_task
 378:main.c        ****   
 379:main.c        ****   // PRIORITY ??
 380:main.c        ****   TX_SERV_TASK.task = tx_serv_task;
 1283               	.LM149:
 1284 0416 00E0      		ldi r16,lo8(TX_SERV_TASK)
 1285 0418 10E0      		ldi r17,hi8(TX_SERV_TASK)
 1286 041a 80E0      		ldi r24,lo8(gs(tx_serv_task))
 1287 041c 90E0      		ldi r25,hi8(gs(tx_serv_task))
 1288 041e F801      		movw r30,r16
 1289 0420 9683      		std Z+6,r25
 1290 0422 8583      		std Z+5,r24
 381:main.c        ****   nrk_task_set_stk(&TX_SERV_TASK, tx_serv_task_stack, NRK_APP_STACKSIZE);
 1292               	.LM150:
 1293 0424 40E8      		ldi r20,lo8(-128)
 1294 0426 50E0      		ldi r21,0
 1295 0428 60E0      		ldi r22,lo8(tx_serv_task_stack)
 1296 042a 70E0      		ldi r23,hi8(tx_serv_task_stack)
 1297 042c C801      		movw r24,r16
 1298 042e 0E94 0000 		call nrk_task_set_stk
 382:main.c        ****   TX_SERV_TASK.prio = 2;
 1300               	.LM151:
 1301 0432 82E0      		ldi r24,lo8(2)
 1302 0434 F801      		movw r30,r16
 1303 0436 8087      		std Z+8,r24
 383:main.c        ****   TX_SERV_TASK.FirstActivation = TRUE;
 1305               	.LM152:
 1306 0438 C783      		std Z+7,r28
 384:main.c        ****   TX_SERV_TASK.Type = BASIC_TASK;
 1308               	.LM153:
 1309 043a C187      		std Z+9,r28
 385:main.c        ****   TX_SERV_TASK.SchType = PREEMPTIVE;
 1311               	.LM154:
 1312 043c C287      		std Z+10,r28
 386:main.c        ****   TX_SERV_TASK.period.secs = 5;
 1314               	.LM155:
 1315 043e 8386      		std Z+11,r8
 1316 0440 9486      		std Z+12,r9
 1317 0442 A586      		std Z+13,r10
 1318 0444 B686      		std Z+14,r11
 387:main.c        ****   TX_SERV_TASK.period.nano_secs = 0;
 1320               	.LM156:
 1321 0446 1786      		std Z+15,__zero_reg__
 1322 0448 108A      		std Z+16,__zero_reg__
 1323 044a 118A      		std Z+17,__zero_reg__
 1324 044c 128A      		std Z+18,__zero_reg__
 388:main.c        ****   TX_SERV_TASK.cpu_reserve.secs = 0;
 1326               	.LM157:
 1327 044e 138A      		std Z+19,__zero_reg__
 1328 0450 148A      		std Z+20,__zero_reg__
 1329 0452 158A      		std Z+21,__zero_reg__
 1330 0454 168A      		std Z+22,__zero_reg__
 389:main.c        ****   TX_SERV_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 1332               	.LM158:
 1333 0456 C78A      		std Z+23,r12
 1334 0458 D08E      		std Z+24,r13
 1335 045a E18E      		std Z+25,r14
 1336 045c F28E      		std Z+26,r15
 390:main.c        ****   TX_SERV_TASK.offset.secs = 0;
 1338               	.LM159:
 1339 045e 138E      		std Z+27,__zero_reg__
 1340 0460 148E      		std Z+28,__zero_reg__
 1341 0462 158E      		std Z+29,__zero_reg__
 1342 0464 168E      		std Z+30,__zero_reg__
 391:main.c        ****   TX_SERV_TASK.offset.nano_secs = 0;
 1344               	.LM160:
 1345 0466 178E      		std Z+31,__zero_reg__
 1346 0468 10A2      		std Z+32,__zero_reg__
 1347 046a 11A2      		std Z+33,__zero_reg__
 1348 046c 12A2      		std Z+34,__zero_reg__
 392:main.c        ****   nrk_activate_task(&TX_SERV_TASK);
 1350               	.LM161:
 1351 046e C801      		movw r24,r16
 1352 0470 0E94 0000 		call nrk_activate_task
 393:main.c        ****   
 394:main.c        ****   nrk_kprintf(PSTR("Create done.\r\n"));
 1354               	.LM162:
 1355 0474 80E0      		ldi r24,lo8(__c.3835)
 1356 0476 90E0      		ldi r25,hi8(__c.3835)
 1357               	/* epilogue start */
 395:main.c        **** }
 1359               	.LM163:
 1360 0478 CF91      		pop r28
 1361 047a 1F91      		pop r17
 1362 047c 0F91      		pop r16
 1363 047e FF90      		pop r15
 1364 0480 EF90      		pop r14
 1365 0482 DF90      		pop r13
 1366 0484 CF90      		pop r12
 1367 0486 BF90      		pop r11
 1368 0488 AF90      		pop r10
 1369 048a 9F90      		pop r9
 1370 048c 8F90      		pop r8
 394:main.c        **** }
 1372               	.LM164:
 1373 048e 0C94 0000 		jmp nrk_kprintf
 1375               	.Lscope8:
 1377               		.stabd	78,0,0
 1378               		.section	.text.startup,"ax",@progbits
 1380               	.global	main
 1382               	main:
 1383               		.stabd	46,0,0
  95:main.c        ****   nrk_setup_ports ();
 1385               	.LM165:
 1386               	.LFBB9:
 1387               	/* prologue: function */
 1388               	/* frame size = 0 */
 1389               	/* stack size = 0 */
 1390               	.L__stack_usage = 0
  96:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 1392               	.LM166:
 1393 0000 0E94 0000 		call nrk_setup_ports
  97:main.c        **** 
 1395               	.LM167:
 1396 0004 80E1      		ldi r24,lo8(16)
 1397 0006 90E0      		ldi r25,0
 1398 0008 0E94 0000 		call nrk_setup_uart
  99:main.c        **** 
 1400               	.LM168:
 1401 000c 0E94 0000 		call nrk_init
 101:main.c        ****   nrk_led_clr(1);
 1403               	.LM169:
 1404 0010 80E0      		ldi r24,0
 1405 0012 90E0      		ldi r25,0
 1406 0014 0E94 0000 		call nrk_led_clr
 102:main.c        ****   nrk_led_clr(2);
 1408               	.LM170:
 1409 0018 81E0      		ldi r24,lo8(1)
 1410 001a 90E0      		ldi r25,0
 1411 001c 0E94 0000 		call nrk_led_clr
 103:main.c        ****   nrk_led_clr(3);
 1413               	.LM171:
 1414 0020 82E0      		ldi r24,lo8(2)
 1415 0022 90E0      		ldi r25,0
 1416 0024 0E94 0000 		call nrk_led_clr
 104:main.c        ****   
 1418               	.LM172:
 1419 0028 83E0      		ldi r24,lo8(3)
 1420 002a 90E0      		ldi r25,0
 1421 002c 0E94 0000 		call nrk_led_clr
 106:main.c        ****   
 1423               	.LM173:
 1424 0030 20E0      		ldi r18,0
 1425 0032 30E0      		ldi r19,0
 1426 0034 A901      		movw r20,r18
 1427 0036 60E0      		ldi r22,0
 1428 0038 70E0      		ldi r23,0
 1429 003a CB01      		movw r24,r22
 1430 003c 0E94 0000 		call nrk_time_set
 108:main.c        **** 
 1432               	.LM174:
 1433 0040 81E0      		ldi r24,lo8(1)
 1434 0042 8093 0000 		sts print_enable,r24
 110:main.c        ****   bmac_task_config();
 1436               	.LM175:
 1437 0046 8DE0      		ldi r24,lo8(13)
 1438 0048 0E94 0000 		call bmac_init
 111:main.c        ****   nrk_create_taskset();
 1440               	.LM176:
 1441 004c 0E94 0000 		call bmac_task_config
 112:main.c        ****   nrk_start();
 1443               	.LM177:
 1444 0050 0E94 0000 		call nrk_create_taskset
 113:main.c        ****   
 1446               	.LM178:
 1447 0054 0E94 0000 		call nrk_start
 116:main.c        **** 
 1449               	.LM179:
 1450 0058 80E0      		ldi r24,0
 1451 005a 90E0      		ldi r25,0
 1452 005c 0895      		ret
 1454               	.Lscope9:
 1456               		.stabd	78,0,0
 1457               		.section	.progmem.data,"a",@progbits
 1460               	__c.3835:
 1461 0000 4372 6561 		.string	"Create done.\r\n"
 1461      7465 2064 
 1461      6F6E 652E 
 1461      0D0A 00
 1464               	__c.3818:
 1465 000f 636F 6D6D 		.string	"command message received!!\r\n"
 1465      616E 6420 
 1465      6D65 7373 
 1465      6167 6520 
 1465      7265 6365 
 1468               	__c.3809:
 1469 002c 0A00      		.string	"\n"
 1472               	__c.3797:
 1473 002e 4F74 6865 		.string	"Other type of command.\r\n"
 1473      7220 7479 
 1473      7065 206F 
 1473      6620 636F 
 1473      6D6D 616E 
 1476               	__c.3794:
 1477 0047 4465 616C 		.string	"Deal with command.\r\n"
 1477      2077 6974 
 1477      6820 636F 
 1477      6D6D 616E 
 1477      642E 0D0A 
 1480               	__c.3790:
 1481 005c 4465 616C 		.string	"Deal with message data.\r\n"
 1481      2077 6974 
 1481      6820 6D65 
 1481      7373 6167 
 1481      6520 6461 
 1482               	.global	seq_num
 1483               		.section .bss
 1486               	seq_num:
 1487 0000 0000      		.zero	2
 1488               		.comm	tx_packet,16,1
 1489               		.comm	print_enable,1,1
 1490               		.comm	neighbor_graph_mux,2,1
 1491               		.comm	neighbor_graph,16,1
 1492               		.comm	light_pool_mux,2,1
 1493               		.comm	light_pool,10,1
 1494               		.comm	serv_seq_num,2,1
 1495               		.comm	seq_pool,10,1
 1496               		.comm	rx_packet,16,1
 1497               		.comm	serv_tx_buf_mux,2,1
 1498               		.comm	serv_tx_buf,116,1
 1499               		.comm	net_tx_buf_mux,2,1
 1500               		.comm	net_tx_buf,116,1
 1501               	.global	serv_rx_index
 1504               	serv_rx_index:
 1505 0002 0000      		.zero	2
 1506               		.comm	serv_rx_buf,116,1
 1507               		.comm	net_rx_buf,116,1
 1508               		.comm	tx_serv_task_stack,128,1
 1509               		.comm	tx_node_task_stack,128,1
 1510               		.comm	tx_cmd_task_stack,128,1
 1511               		.comm	rx_serv_task_stack,128,1
 1512               		.comm	rx_node_task_stack,128,1
 1513               		.comm	TX_SERV_TASK,35,1
 1514               		.comm	TX_NODE_TASK,35,1
 1515               		.comm	TX_CMD_TASK,35,1
 1516               		.comm	RX_SERV_TASK,35,1
 1517               		.comm	RX_NODE_TASK,35,1
 1518               		.comm	error_num,1,1
 1519               		.comm	error_task,1,1
 1520               		.comm	bmac_rfTxInfo,7,1
 1521               		.comm	bmac_rfRxInfo,12,1
 1522               		.comm	bmac_enable_signal,1,1
 1523               		.comm	bmac_tx_pkt_done_signal,1,1
 1524               		.comm	bmac_rx_pkt_signal,1,1
 1525               		.comm	nrk_kernel_stk_ptr,2,1
 1526               		.comm	nrk_idle_task_stk,128,1
 1527               		.comm	_nrk_signal_list,4,1
 1565               		.text
 1567               	.Letext0:
 1568               		.ident	"GCC: (GNU) 4.9.1"
 1569               	.global __do_copy_data
 1570               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:4      *ABS*:000000000000003f __SREG__
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:352    .text:0000000000000000 tx_cmd_task
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:404    .text:000000000000001e tx_node_task
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:456    .text:000000000000003c tx_serv_task
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:514    .text:000000000000005a rx_node_task
                            *COM*:0000000000000074 net_rx_buf
                            *COM*:0000000000000001 print_enable
                            *COM*:000000000000000a seq_pool
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1476   .progmem.data:0000000000000047 __c.3794
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1480   .progmem.data:000000000000005c __c.3790
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1472   .progmem.data:000000000000002e __c.3797
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:752    .text:0000000000000174 clear_serv_rx_buf
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1504   .bss:0000000000000002 serv_rx_index
                            *COM*:0000000000000074 serv_rx_buf
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:802    .text:000000000000019e get_uart_input
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1468   .progmem.data:000000000000002c __c.3809
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:883    .text:0000000000000204 rx_serv_task
                            *COM*:0000000000000002 serv_seq_num
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1464   .progmem.data:000000000000000f __c.3818
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:943    .text:0000000000000242 nrk_create_taskset
                            *COM*:0000000000000023 RX_NODE_TASK
                            *COM*:0000000000000080 rx_node_task_stack
                            *COM*:0000000000000023 RX_SERV_TASK
                            *COM*:0000000000000080 rx_serv_task_stack
                            *COM*:0000000000000023 TX_CMD_TASK
                            *COM*:0000000000000080 tx_cmd_task_stack
                            *COM*:0000000000000023 TX_NODE_TASK
                            *COM*:0000000000000080 tx_node_task_stack
                            *COM*:0000000000000023 TX_SERV_TASK
                            *COM*:0000000000000080 tx_serv_task_stack
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1460   .progmem.data:0000000000000000 __c.3835
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1382   .text.startup:0000000000000000 main
/var/folders/dp/d7kv32_x22l5x1fb945v1f8m0000gp/T//ccf03aza.s:1486   .bss:0000000000000000 seq_num
                            *COM*:0000000000000010 tx_packet
                            *COM*:0000000000000002 neighbor_graph_mux
                            *COM*:0000000000000010 neighbor_graph
                            *COM*:0000000000000002 light_pool_mux
                            *COM*:000000000000000a light_pool
                            *COM*:0000000000000010 rx_packet
                            *COM*:0000000000000002 serv_tx_buf_mux
                            *COM*:0000000000000074 serv_tx_buf
                            *COM*:0000000000000002 net_tx_buf_mux
                            *COM*:0000000000000074 net_tx_buf
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000007 bmac_rfTxInfo
                            *COM*:000000000000000c bmac_rfRxInfo
                            *COM*:0000000000000001 bmac_enable_signal
                            *COM*:0000000000000001 bmac_tx_pkt_done_signal
                            *COM*:0000000000000001 bmac_rx_pkt_signal
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_led_set
nrk_led_clr
nrk_wait_until_next_period
bmac_rx_pkt_set_buffer
bmac_started
bmac_rx_pkt_ready
parse_msg
bmac_rx_pkt_get
bmac_rx_pkt_release
printf
putchar
puts
in_sequence_pool
add_to_sequence_pool
get_sequence_number
update_sequence_pool
nrk_kprintf
nrk_uart_data_ready
__iob
fgetc
nrk_uart_rx_signal_get
nrk_signal_register
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
bmac_init
bmac_task_config
nrk_start
__do_copy_data
__do_clear_bss
