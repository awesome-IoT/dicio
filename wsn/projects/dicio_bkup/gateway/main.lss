
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000268  00800200  00006508  0000659c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006508  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008ac  00800468  00800468  00006804  2**0
                  ALLOC
  3 .stab         00014874  00000000  00000000  00006804  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009e0a  00000000  00000000  0001b078  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00024e82  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00024e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00025ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00027065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00027082  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__ctors_end>
       4:	0c 94 f1 2a 	jmp	0x55e2	; 0x55e2 <__vector_1>
       8:	0c 94 23 2b 	jmp	0x5646	; 0x5646 <__vector_2>
       c:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__vector_3>
      10:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      14:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      18:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      1c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      20:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      24:	0c 94 bf 2a 	jmp	0x557e	; 0x557e <__vector_9>
      28:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      2c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      30:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      34:	0c 94 1e 29 	jmp	0x523c	; 0x523c <__vector_13>
      38:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      3c:	0c 94 1e 29 	jmp	0x523c	; 0x523c <__vector_13>
      40:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      44:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      48:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      4c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      50:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      54:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      58:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      5c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      60:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      64:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__vector_25>
      68:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      6c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      70:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      74:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      78:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      7c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      80:	0c 94 51 29 	jmp	0x52a2	; 0x52a2 <__vector_32>
      84:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      88:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      8c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      90:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      94:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      98:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      9c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      a0:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      a4:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      a8:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      ac:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      b0:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      b4:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      b8:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      bc:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      c0:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      c4:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      c8:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      cc:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      d0:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      d4:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      d8:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      dc:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      e0:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
      e4:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__vector_57>
      e8:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__vector_58>
      ec:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__vector_59>
      f0:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__vector_60>
      f4:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__vector_61>
      f8:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__vector_62>
      fc:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__vector_63>
     100:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__vector_64>
     104:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
     108:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
     10c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
     110:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
     114:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
     118:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
     11c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__bad_interrupt>
     120:	b3 13       	cpse	r27, r19
     122:	c0 13       	cpse	r28, r16
     124:	cd 13       	cpse	r28, r29
     126:	da 13       	cpse	r29, r26
     128:	e7 13       	cpse	r30, r23
     12a:	f4 13       	cpse	r31, r20
     12c:	01 14       	cp	r0, r1
     12e:	24 14       	cp	r2, r4
     130:	32 14       	cp	r3, r2
     132:	40 14       	cp	r4, r0
     134:	4e 14       	cp	r4, r14
     136:	5c 14       	cp	r5, r12
     138:	6a 14       	cp	r6, r10
     13a:	6a 14       	cp	r6, r10
     13c:	8d 14       	cp	r8, r13
     13e:	8f 14       	cp	r8, r15
     140:	91 14       	cp	r9, r1
     142:	93 14       	cp	r9, r3
     144:	95 14       	cp	r9, r5
     146:	97 14       	cp	r9, r7
     148:	99 14       	cp	r9, r9
     14a:	b8 14       	cp	r11, r8
     14c:	db 14       	cp	r13, r11
     14e:	ff 14       	cp	r15, r15
     150:	22 15       	cp	r18, r2
     152:	45 15       	cp	r20, r5
     154:	68 15       	cp	r22, r8
     156:	8b 15       	cp	r24, r11
     158:	c5 15       	cp	r28, r5
     15a:	d2 15       	cp	r29, r2
     15c:	df 15       	cp	r29, r15
     15e:	ec 15       	cp	r30, r12
     160:	f9 15       	cp	r31, r9
     162:	06 16       	cp	r0, r22
     164:	13 16       	cp	r1, r19
     166:	2c 16       	cp	r2, r28
     168:	39 16       	cp	r3, r25
     16a:	46 16       	cp	r4, r22
     16c:	53 16       	cp	r5, r19
     16e:	60 16       	cp	r6, r16
     170:	6d 16       	cp	r6, r29
     172:	7a 16       	cp	r7, r26
     174:	f4 19       	sub	r31, r4
     176:	fa 19       	sub	r31, r10
     178:	fd 19       	sub	r31, r13
     17a:	00 1a       	sub	r0, r16
     17c:	03 1a       	sub	r0, r19
     17e:	06 1a       	sub	r0, r22
     180:	0c 1a       	sub	r0, r28
     182:	09 1a       	sub	r0, r25
     184:	0f 1a       	sub	r0, r31
     186:	12 1a       	sub	r1, r18
     188:	15 1a       	sub	r1, r21
     18a:	1e 1a       	sub	r1, r30
     18c:	21 1a       	sub	r2, r17
     18e:	24 1a       	sub	r2, r20
     190:	27 1a       	sub	r2, r23
     192:	1b 1a       	sub	r1, r27
     194:	f1 19       	sub	r31, r1
     196:	f7 19       	sub	r31, r7
     198:	2a 1a       	sub	r2, r26
     19a:	2d 1a       	sub	r2, r29
     19c:	18 1a       	sub	r1, r24
     19e:	ee 19       	sub	r30, r14
     1a0:	c4 1a       	sub	r12, r20
     1a2:	c7 1a       	sub	r12, r23
     1a4:	d2 1a       	sub	r13, r18
     1a6:	d7 1a       	sub	r13, r23
     1a8:	de 1a       	sub	r13, r30
     1aa:	e7 1a       	sub	r14, r23
     1ac:	ea 1a       	sub	r14, r26
     1ae:	ef 1a       	sub	r14, r31
     1b0:	f6 1a       	sub	r15, r22
     1b2:	ff 1a       	sub	r15, r31

000001b4 <__trampolines_end>:
     1b4:	43 72       	andi	r20, 0x23	; 35
     1b6:	65 61       	ori	r22, 0x15	; 21
     1b8:	74 65       	ori	r23, 0x54	; 84
     1ba:	20 64       	ori	r18, 0x40	; 64
     1bc:	6f 6e       	ori	r22, 0xEF	; 239
     1be:	65 2e       	mov	r6, r21
     1c0:	0d 0a       	sbc	r0, r29
	...

000001c3 <__c.3818>:
     1c3:	63 6f 6d 6d 61 6e 64 20 6d 65 73 73 61 67 65 20     command message 
     1d3:	72 65 63 65 69 76 65 64 21 21 0d 0a 00              received!!...

000001e0 <__c.3809>:
     1e0:	0a 00                                               ..

000001e2 <__c.3797>:
     1e2:	4f 74 68 65 72 20 74 79 70 65 20 6f 66 20 63 6f     Other type of co
     1f2:	6d 6d 61 6e 64 2e 0d 0a 00                          mmand....

000001fb <__c.3794>:
     1fb:	44 65 61 6c 20 77 69 74 68 20 63 6f 6d 6d 61 6e     Deal with comman
     20b:	64 2e 0d 0a 00                                      d....

00000210 <__c.3790>:
     210:	44 65 61 6c 20 77 69 74 68 20 6d 65 73 73 61 67     Deal with messag
     220:	65 20 64 61 74 61 2e 0d 0a 00                       e data....

0000022a <__c.3762>:
     22a:	46 61 69 6c 65 64 20 74 6f 20 72 65 67 69 73 74     Failed to regist
     23a:	65 72 20 73 69 67 6e 61 6c 0d 0a 00                 er signal...

00000246 <__c.3736>:
     246:	42 4d 41 43 20 54 58 3a 20 57 6f 6b 65 20 75 70     BMAC TX: Woke up
     256:	20 6f 6e 20 77 72 6f 6e 67 20 73 69 67 6e 61 6c      on wrong signal
     266:	0d 0a 00                                            ...

00000269 <__c.3734>:
     269:	42 4d 41 43 20 54 58 3a 20 45 72 72 6f 72 20 63     BMAC TX: Error c
     279:	61 6c 6c 69 6e 67 20 65 76 65 6e 74 20 77 61 69     alling event wai
     289:	74 0d 0a 00                                         t...

0000028d <__c.3718>:
     28d:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     29d:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     2ad:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

000002b9 <__c.3716>:
     2b9:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2c9:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     2d9:	61 69 6c 65 64 0d 0a 00                             ailed...

000002e1 <__c.3714>:
     2e1:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     2f1:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     301:	61 69 6c 65 64 0d 0a 00                             ailed...

00000309 <__c.3708>:
     309:	0d 0a 43 75 72 72 65 6e 74 20 4c 69 67 68 74 20     ..Current Light 
     319:	56 61 6c 75 65 73 3a 0d 0a 00                       Values:...

00000323 <__c.3754>:
     323:	0d 0a 4e 65 69 67 68 62 6f 72 20 47 72 61 70 68     ..Neighbor Graph
     333:	3a 0d 0a 00                                         :...

00000337 <__c.3125>:
     337:	75 61 72 74 20 72 78 20 73 69 67 20 66 61 69 6c     uart rx sig fail
     347:	65 64 0d 0a 00                                      ed...

0000034c <__c.3381>:
     34c:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000353 <__c.3378>:
     353:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000362 <__c.3375>:
     362:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000373 <__c.3372>:
     373:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     383:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000038e <__c.3369>:
     38e:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     39e:	20 53 69 67 6e 61 6c 00                              Signal.

000003a6 <__c.3366>:
     3a6:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     3b6:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

000003c6 <__c.3363>:
     3c6:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     3d6:	72 6f 72 00                                         ror.

000003da <__c.3360>:
     3da:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000003eb <__c.3357>:
     3eb:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     3fb:	61 72 74 00                                         art.

000003ff <__c.3354>:
     3ff:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000040e <__c.3351>:
     40e:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     41e:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000429 <__c.3348>:
     429:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000435 <__c.3345>:
     435:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     445:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     455:	20 6f 6b 3f 00                                       ok?.

0000045a <__c.3342>:
     45a:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     46a:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000478 <__c.3339>:
     478:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     488:	72 74 00                                            rt.

0000048b <__c.3336>:
     48b:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     49b:	49 44 00                                            ID.

0000049e <__c.3333>:
     49e:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     4ae:	20 57 61 6b 65 75 70 00                              Wakeup.

000004b6 <__c.3330>:
     4b6:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     4c6:	6c 61 74 65 64 00                                   lated.

000004cc <__c.3327>:
     4cc:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     4dc:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000004e7 <__c.3324>:
     4e7:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     4f7:	69 6e 74 65 72 00                                   inter.

000004fd <__c.3321>:
     4fd:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     50d:	6c 6f 77 00                                         low.

00000511 <__c.3318>:
     511:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     521:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     531:	6e 6f 75 67 68 21 00                                nough!.

00000538 <__c.3314>:
     538:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     548:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     558:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     568:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000574 <__c.3311>:
     574:	29 3a 20 00                                         ): .

00000578 <__c.3309>:
     578:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000584 <__c.3246>:
     584:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000593 <__c.2228>:
     593:	45 46 47 65 66 67 00                                EFGefg.

0000059a <__c.2222>:
     59a:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000005aa <__ctors_end>:
     5aa:	11 24       	eor	r1, r1
     5ac:	1f be       	out	0x3f, r1	; 63
     5ae:	cf ef       	ldi	r28, 0xFF	; 255
     5b0:	d1 e4       	ldi	r29, 0x41	; 65
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	cd bf       	out	0x3d, r28	; 61

000005b6 <__do_copy_data>:
     5b6:	14 e0       	ldi	r17, 0x04	; 4
     5b8:	a0 e0       	ldi	r26, 0x00	; 0
     5ba:	b2 e0       	ldi	r27, 0x02	; 2
     5bc:	e8 e0       	ldi	r30, 0x08	; 8
     5be:	f5 e6       	ldi	r31, 0x65	; 101
     5c0:	00 e0       	ldi	r16, 0x00	; 0
     5c2:	0b bf       	out	0x3b, r16	; 59
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <__do_copy_data+0x14>
     5c6:	07 90       	elpm	r0, Z+
     5c8:	0d 92       	st	X+, r0
     5ca:	a8 36       	cpi	r26, 0x68	; 104
     5cc:	b1 07       	cpc	r27, r17
     5ce:	d9 f7       	brne	.-10     	; 0x5c6 <__do_copy_data+0x10>

000005d0 <__do_clear_bss>:
     5d0:	1d e0       	ldi	r17, 0x0D	; 13
     5d2:	a8 e6       	ldi	r26, 0x68	; 104
     5d4:	b4 e0       	ldi	r27, 0x04	; 4
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <.do_clear_bss_start>

000005d8 <.do_clear_bss_loop>:
     5d8:	1d 92       	st	X+, r1

000005da <.do_clear_bss_start>:
     5da:	a4 31       	cpi	r26, 0x14	; 20
     5dc:	b1 07       	cpc	r27, r17
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <.do_clear_bss_loop>
     5e0:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <main>
     5e4:	0c 94 82 32 	jmp	0x6504	; 0x6504 <_exit>

000005e8 <__bad_interrupt>:
     5e8:	0c 94 14 29 	jmp	0x5228	; 0x5228 <__vector_default>

000005ec <tx_cmd_task>:
    nrk_wait_until_next_period();    
  }
}

void tx_cmd_task() {
  uint8_t i = 0;
     5ec:	c0 e0       	ldi	r28, 0x00	; 0
  while(1) {
    if(i == 0) {
      i = 1;
      nrk_led_set(1);
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
}

void tx_cmd_task() {
  uint8_t i = 0;
  while(1) {
    if(i == 0) {
     5f2:	c1 11       	cpse	r28, r1
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <tx_cmd_task+0x12>
      i = 1;
      nrk_led_set(1);
     5f6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <nrk_led_set>

void tx_cmd_task() {
  uint8_t i = 0;
  while(1) {
    if(i == 0) {
      i = 1;
     5fa:	c1 e0       	ldi	r28, 0x01	; 1
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <tx_cmd_task+0x18>
      nrk_led_set(1);
    } else {
      nrk_led_clr(1);
     5fe:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
      i = 0;
     602:	c0 e0       	ldi	r28, 0x00	; 0
    }
    nrk_wait_until_next_period();    
     604:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
  }
     608:	f2 cf       	rjmp	.-28     	; 0x5ee <tx_cmd_task+0x2>

0000060a <tx_node_task>:
      nrk_kprintf (PSTR ("TX done signal error\r\n"));
    }
    nrk_wait_until_next_period();
  }
  */
  uint8_t i = 0;
     60a:	c0 e0       	ldi	r28, 0x00	; 0
  while(1) {
    if(i == 0) {
      i = 1;
      nrk_led_set(2);
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	90 e0       	ldi	r25, 0x00	; 0
    nrk_wait_until_next_period();
  }
  */
  uint8_t i = 0;
  while(1) {
    if(i == 0) {
     610:	c1 11       	cpse	r28, r1
     612:	04 c0       	rjmp	.+8      	; 0x61c <tx_node_task+0x12>
      i = 1;
      nrk_led_set(2);
     614:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <nrk_led_set>
  }
  */
  uint8_t i = 0;
  while(1) {
    if(i == 0) {
      i = 1;
     618:	c1 e0       	ldi	r28, 0x01	; 1
     61a:	03 c0       	rjmp	.+6      	; 0x622 <tx_node_task+0x18>
      nrk_led_set(2);
    } else {
      nrk_led_clr(2);
     61c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
      i = 0;
     620:	c0 e0       	ldi	r28, 0x00	; 0
    }
    nrk_wait_until_next_period();
     622:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
  }
     626:	f2 cf       	rjmp	.-28     	; 0x60c <tx_node_task+0x2>

00000628 <tx_serv_task>:
}

void tx_serv_task() {
  uint8_t i = 0;
     628:	c0 e0       	ldi	r28, 0x00	; 0
  while(1) {
    if(i == 0) {
      i = 1;
      nrk_led_set(4);
     62a:	84 e0       	ldi	r24, 0x04	; 4
     62c:	90 e0       	ldi	r25, 0x00	; 0
}

void tx_serv_task() {
  uint8_t i = 0;
  while(1) {
    if(i == 0) {
     62e:	c1 11       	cpse	r28, r1
     630:	04 c0       	rjmp	.+8      	; 0x63a <tx_serv_task+0x12>
      i = 1;
      nrk_led_set(4);
     632:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <nrk_led_set>

void tx_serv_task() {
  uint8_t i = 0;
  while(1) {
    if(i == 0) {
      i = 1;
     636:	c1 e0       	ldi	r28, 0x01	; 1
     638:	03 c0       	rjmp	.+6      	; 0x640 <tx_serv_task+0x18>
      nrk_led_set(4);
    } else {
      nrk_led_clr(4);
     63a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
      i = 0;
     63e:	c0 e0       	ldi	r28, 0x00	; 0
    }
    nrk_wait_until_next_period();    
     640:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
  }
     644:	f2 cf       	rjmp	.-28     	; 0x62a <tx_serv_task+0x2>

00000646 <rx_node_task>:
  nrk_start();
  
  return 0;
}

void rx_node_task() {
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	62 97       	sbiw	r28, 0x12	; 18
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
  int8_t in_seq_pool;
  uint16_t local_seq_num;
  uint8_t new_node = NONE;
  uint8_t LED_FLAG = 0;

  bmac_rx_pkt_set_buffer (net_rx_buf, RF_MAX_PAYLOAD_SIZE);
     65a:	64 e7       	ldi	r22, 0x74	; 116
     65c:	82 e1       	ldi	r24, 0x12	; 18
     65e:	9a e0       	ldi	r25, 0x0A	; 10
     660:	0e 94 ce 05 	call	0xb9c	; 0xb9c <bmac_rx_pkt_set_buffer>
  
  while (!bmac_started ())
     664:	0e 94 30 07 	call	0xe60	; 0xe60 <bmac_started>
     668:	81 11       	cpse	r24, r1
     66a:	03 c0       	rjmp	.+6      	; 0x672 <rx_node_task+0x2c>
    nrk_wait_until_next_period ();
     66c:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
     670:	f9 cf       	rjmp	.-14     	; 0x664 <rx_node_task+0x1e>
     672:	00 e0       	ldi	r16, 0x00	; 0
      local_buf = bmac_rx_pkt_get(&len, &rssi);
      bmac_rx_pkt_release ();  
      
      // print if appropriate
      if(print_enable == PRINT_ENABLED) {
        printf ("RX: ");
     674:	8b e5       	ldi	r24, 0x5B	; 91
     676:	e8 2e       	mov	r14, r24
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	f8 2e       	mov	r15, r24

  while(1) {
    // DEBUG LED FLASHING
    if(LED_FLAG == 0) {
      LED_FLAG = 1;
      nrk_led_set(0);
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
  while (!bmac_started ())
    nrk_wait_until_next_period ();

  while(1) {
    // DEBUG LED FLASHING
    if(LED_FLAG == 0) {
     680:	01 11       	cpse	r16, r1
     682:	04 c0       	rjmp	.+8      	; 0x68c <rx_node_task+0x46>
      LED_FLAG = 1;
      nrk_led_set(0);
     684:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <nrk_led_set>
    nrk_wait_until_next_period ();

  while(1) {
    // DEBUG LED FLASHING
    if(LED_FLAG == 0) {
      LED_FLAG = 1;
     688:	01 e0       	ldi	r16, 0x01	; 1
     68a:	03 c0       	rjmp	.+6      	; 0x692 <rx_node_task+0x4c>
      nrk_led_set(0);
    } else {
      nrk_led_clr(0);
     68c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
      LED_FLAG = 0;
     690:	00 e0       	ldi	r16, 0x00	; 0
    }
    
    // is there a packet available?
    if(bmac_rx_pkt_ready()) {
     692:	0e 94 d6 06 	call	0xdac	; 0xdac <bmac_rx_pkt_ready>
     696:	88 23       	and	r24, r24
     698:	09 f4       	brne	.+2      	; 0x69c <rx_node_task+0x56>
     69a:	5f c0       	rjmp	.+190    	; 0x75a <rx_node_task+0x114>
      // get the packet, parse and release
      parse_msg(&rx_packet, &net_rx_buf, len);
     69c:	4a 89       	ldd	r20, Y+18	; 0x12
     69e:	62 e1       	ldi	r22, 0x12	; 18
     6a0:	7a e0       	ldi	r23, 0x0A	; 10
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 13 0c 	call	0x1826	; 0x1826 <parse_msg>
      local_buf = bmac_rx_pkt_get(&len, &rssi);
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5e       	subi	r22, 0xEF	; 239
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	ce 01       	movw	r24, r28
     6b2:	42 96       	adiw	r24, 0x12	; 18
     6b4:	0e 94 be 06 	call	0xd7c	; 0xd7c <bmac_rx_pkt_get>
     6b8:	6c 01       	movw	r12, r24
      bmac_rx_pkt_release ();  
     6ba:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <bmac_rx_pkt_release>
      
      // print if appropriate
      if(print_enable == PRINT_ENABLED) {
     6be:	80 91 7a 06 	lds	r24, 0x067A
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	b9 f4       	brne	.+46     	; 0x6f4 <rx_node_task+0xae>
        printf ("RX: ");
     6c6:	ff 92       	push	r15
     6c8:	ef 92       	push	r14
     6ca:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
        for (uint8_t i = 0; i < len; i++)
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	10 e0       	ldi	r17, 0x00	; 0
     6d4:	9a 89       	ldd	r25, Y+18	; 0x12
     6d6:	19 17       	cp	r17, r25
     6d8:	48 f4       	brcc	.+18     	; 0x6ec <rx_node_task+0xa6>
          printf ("%c", local_buf[i]);
     6da:	f6 01       	movw	r30, r12
     6dc:	e1 0f       	add	r30, r17
     6de:	f1 1d       	adc	r31, r1
     6e0:	80 81       	ld	r24, Z
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 31 30 	call	0x6062	; 0x6062 <putchar>
      bmac_rx_pkt_release ();  
      
      // print if appropriate
      if(print_enable == PRINT_ENABLED) {
        printf ("RX: ");
        for (uint8_t i = 0; i < len; i++)
     6e8:	1f 5f       	subi	r17, 0xFF	; 255
     6ea:	f4 cf       	rjmp	.-24     	; 0x6d4 <rx_node_task+0x8e>
          printf ("%c", local_buf[i]);
        printf("\r\n");        
     6ec:	84 e2       	ldi	r24, 0x24	; 36
     6ee:	94 e0       	ldi	r25, 0x04	; 4
     6f0:	0e 94 37 30 	call	0x606e	; 0x606e <puts>
      }
      
      if(rx_packet.source_id != MAC_ADDR) {
     6f4:	6a 81       	ldd	r22, Y+2	; 0x02
     6f6:	61 30       	cpi	r22, 0x01	; 1
     6f8:	81 f1       	breq	.+96     	; 0x75a <rx_node_task+0x114>
        // check to see if this node is in the sequence pool, if not then add it
        in_seq_pool = in_sequence_pool(&seq_pool, rx_packet.source_id);
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	9a e0       	ldi	r25, 0x0A	; 10
     6fe:	0e 94 bc 0c 	call	0x1978	; 0x1978 <in_sequence_pool>
        if(in_seq_pool == ABSENT) {
     702:	8f 3f       	cpi	r24, 0xFF	; 255
     704:	49 f4       	brne	.+18     	; 0x718 <rx_node_task+0xd2>
          add_to_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     706:	4b 81       	ldd	r20, Y+3	; 0x03
     708:	5c 81       	ldd	r21, Y+4	; 0x04
     70a:	6a 81       	ldd	r22, Y+2	; 0x02
     70c:	84 e0       	ldi	r24, 0x04	; 4
     70e:	9a e0       	ldi	r25, 0x0A	; 10
     710:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <add_to_sequence_pool>
          new_node = NODE_FOUND;
     714:	11 e0       	ldi	r17, 0x01	; 1
     716:	01 c0       	rjmp	.+2      	; 0x71a <rx_node_task+0xd4>
     718:	10 e0       	ldi	r17, 0x00	; 0
        }
      
        // determine if we should parse this packet based on the sequence number
        local_seq_num = get_sequence_number(&seq_pool, rx_packet.source_id);
     71a:	6a 81       	ldd	r22, Y+2	; 0x02
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	9a e0       	ldi	r25, 0x0A	; 10
     720:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <get_sequence_number>
        if((rx_packet.seq_num > local_seq_num) || (new_node == NODE_FOUND)) {
     724:	4b 81       	ldd	r20, Y+3	; 0x03
     726:	5c 81       	ldd	r21, Y+4	; 0x04
     728:	84 17       	cp	r24, r20
     72a:	95 07       	cpc	r25, r21
     72c:	10 f0       	brcs	.+4      	; 0x732 <rx_node_task+0xec>
     72e:	11 30       	cpi	r17, 0x01	; 1
     730:	a1 f4       	brne	.+40     	; 0x75a <rx_node_task+0x114>
          // update the sequence pool and reset the new_node flag
          update_sequence_pool(&seq_pool, rx_packet.source_id, rx_packet.seq_num);
     732:	6a 81       	ldd	r22, Y+2	; 0x02
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	9a e0       	ldi	r25, 0x0A	; 10
     738:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <update_sequence_pool>
          new_node = NONE;
          
          // switch on packet type
          switch(rx_packet.type) {
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	29 f0       	breq	.+10     	; 0x74c <rx_node_task+0x106>
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	31 f4       	brne	.+12     	; 0x752 <rx_node_task+0x10c>
            case MSG_NODE_SENSOR_VALUE:
              nrk_kprintf(PSTR("Deal with message data.\r\n"));
              break;
            case MSG_GATEWAY:
              nrk_kprintf(PSTR("Deal with command.\r\n"));
     746:	8b ef       	ldi	r24, 0xFB	; 251
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	05 c0       	rjmp	.+10     	; 0x756 <rx_node_task+0x110>
          new_node = NONE;
          
          // switch on packet type
          switch(rx_packet.type) {
            case MSG_NODE_SENSOR_VALUE:
              nrk_kprintf(PSTR("Deal with message data.\r\n"));
     74c:	80 e1       	ldi	r24, 0x10	; 16
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	02 c0       	rjmp	.+4      	; 0x756 <rx_node_task+0x110>
              break;
            case MSG_GATEWAY:
              nrk_kprintf(PSTR("Deal with command.\r\n"));
              break;
            default:
              nrk_kprintf(PSTR("Other type of command.\r\n"));
     752:	82 ee       	ldi	r24, 0xE2	; 226
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
              break;            
          }          
        }
      }
    }
    nrk_wait_until_next_period();
     75a:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
  }
     75e:	8e cf       	rjmp	.-228    	; 0x67c <rx_node_task+0x36>

00000760 <clear_serv_rx_buf>:
}


void clear_serv_rx_buf() {
  for(uint8_t i = 0; i < serv_rx_index; i++) {
     760:	40 91 6a 04 	lds	r20, 0x046A
     764:	50 91 6b 04 	lds	r21, 0x046B
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	82 2f       	mov	r24, r18
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	84 17       	cp	r24, r20
     770:	95 07       	cpc	r25, r21
     772:	30 f4       	brcc	.+12     	; 0x780 <clear_serv_rx_buf+0x20>
    serv_rx_buf[i] = '\0';
     774:	fc 01       	movw	r30, r24
     776:	e2 5e       	subi	r30, 0xE2	; 226
     778:	f7 4f       	sbci	r31, 0xF7	; 247
     77a:	10 82       	st	Z, r1
  }
}


void clear_serv_rx_buf() {
  for(uint8_t i = 0; i < serv_rx_index; i++) {
     77c:	2f 5f       	subi	r18, 0xFF	; 255
     77e:	f5 cf       	rjmp	.-22     	; 0x76a <clear_serv_rx_buf+0xa>
    serv_rx_buf[i] = '\0';
  }
  serv_rx_index = 0;
     780:	10 92 6b 04 	sts	0x046B, r1
     784:	10 92 6a 04 	sts	0x046A, r1
     788:	08 95       	ret

0000078a <get_uart_input>:
}

uint8_t get_uart_input() {
     78a:	cf 93       	push	r28
  char option;
  while(nrk_uart_data_ready(NRK_DEFAULT_UART)) {
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 27 13 	call	0x264e	; 0x264e <nrk_uart_data_ready>
     792:	88 23       	and	r24, r24
     794:	59 f1       	breq	.+86     	; 0x7ec <get_uart_input+0x62>
    option = getchar();
     796:	80 91 0a 0d 	lds	r24, 0x0D0A
     79a:	90 91 0b 0d 	lds	r25, 0x0D0B
     79e:	0e 94 a7 2f 	call	0x5f4e	; 0x5f4e <fgetc>
     7a2:	c8 2f       	mov	r28, r24
    serv_rx_buf[serv_rx_index] = option;
     7a4:	e0 91 6a 04 	lds	r30, 0x046A
     7a8:	f0 91 6b 04 	lds	r31, 0x046B
     7ac:	e2 5e       	subi	r30, 0xE2	; 226
     7ae:	f7 4f       	sbci	r31, 0xF7	; 247
     7b0:	80 83       	st	Z, r24
    printf("%c", option);
     7b2:	99 27       	eor	r25, r25
     7b4:	0e 94 31 30 	call	0x6062	; 0x6062 <putchar>
    serv_rx_index++;
     7b8:	80 91 6a 04 	lds	r24, 0x046A
     7bc:	90 91 6b 04 	lds	r25, 0x046B
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	90 93 6b 04 	sts	0x046B, r25
     7c6:	80 93 6a 04 	sts	0x046A, r24
    if(option == '\r') {
     7ca:	cd 30       	cpi	r28, 0x0D	; 13
     7cc:	f9 f6       	brne	.-66     	; 0x78c <get_uart_input+0x2>
      serv_rx_buf[serv_rx_index] = '\n';
     7ce:	fc 01       	movw	r30, r24
     7d0:	e2 5e       	subi	r30, 0xE2	; 226
     7d2:	f7 4f       	sbci	r31, 0xF7	; 247
     7d4:	2a e0       	ldi	r18, 0x0A	; 10
     7d6:	20 83       	st	Z, r18
      serv_rx_index++;
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	90 93 6b 04 	sts	0x046B, r25
     7de:	80 93 6a 04 	sts	0x046A, r24
      nrk_kprintf(PSTR("\n"));
     7e2:	80 ee       	ldi	r24, 0xE0	; 224
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
      return SERVER_MSG_RECEIVED;    
     7ea:	81 e0       	ldi	r24, 0x01	; 1
    }
  }
  return SERVER_MSG_INCOMPLETE;
}
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <rx_serv_task>:

void rx_serv_task() {
  uint16_t rx_seq_num;
  nrk_sig_t uart_rx_signal = nrk_uart_rx_signal_get();
     7f0:	0e 94 40 13 	call	0x2680	; 0x2680 <nrk_uart_rx_signal_get>
  nrk_signal_register(uart_rx_signal);
     7f4:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
  
  serv_seq_num = 0;
     7f8:	10 92 11 0a 	sts	0x0A11, r1
     7fc:	10 92 10 0a 	sts	0x0A10, r1
  
  while(1) {
    // message received
    if(get_uart_input() == SERVER_MSG_RECEIVED) {
     800:	0e 94 c5 03 	call	0x78a	; 0x78a <get_uart_input>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	81 f4       	brne	.+32     	; 0x828 <rx_serv_task+0x38>
      // get sequence number out of message
      rx_seq_num = serv_seq_num + 1; // replace this with parsing in the future
     808:	80 91 10 0a 	lds	r24, 0x0A10
     80c:	90 91 11 0a 	lds	r25, 0x0A11
     810:	9c 01       	movw	r18, r24
     812:	2f 5f       	subi	r18, 0xFF	; 255
     814:	3f 4f       	sbci	r19, 0xFF	; 255
      
      // only receive this message if the sequence number is higher than the last
      //  seen sequence number
      if(rx_seq_num > serv_seq_num) {
     816:	82 17       	cp	r24, r18
     818:	93 07       	cpc	r25, r19
     81a:	20 f4       	brcc	.+8      	; 0x824 <rx_serv_task+0x34>
        nrk_kprintf(PSTR("command message received!!\r\n"));
     81c:	83 ec       	ldi	r24, 0xC3	; 195
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
        // TODO: add to cmd_tx_buf
      }
      clear_serv_rx_buf();
     824:	0e 94 b0 03 	call	0x760	; 0x760 <clear_serv_rx_buf>
    }
    nrk_wait_until_next_period();    
     828:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
  }
     82c:	e9 cf       	rjmp	.-46     	; 0x800 <rx_serv_task+0x10>

0000082e <nrk_create_taskset>:
 * nrk_create_taskset - create the tasks in this application
 * 
 * NOTE: task priority maps to importance. That is, priority(5) > priority(2).
 */
void nrk_create_taskset ()
{
     82e:	8f 92       	push	r8
     830:	9f 92       	push	r9
     832:	af 92       	push	r10
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
  // PRIORITY ??
  RX_NODE_TASK.task = rx_node_task;
     844:	0b ef       	ldi	r16, 0xFB	; 251
     846:	16 e0       	ldi	r17, 0x06	; 6
     848:	83 e2       	ldi	r24, 0x23	; 35
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	f8 01       	movw	r30, r16
     84e:	96 83       	std	Z+6, r25	; 0x06
     850:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&RX_NODE_TASK, rx_node_task_stack, NRK_APP_STACKSIZE);
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	68 ef       	ldi	r22, 0xF8	; 248
     858:	75 e0       	ldi	r23, 0x05	; 5
     85a:	c8 01       	movw	r24, r16
     85c:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_task_set_stk>
  RX_NODE_TASK.prio = 3;
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	f8 01       	movw	r30, r16
     864:	80 87       	std	Z+8, r24	; 0x08
  RX_NODE_TASK.FirstActivation = TRUE;
     866:	c1 e0       	ldi	r28, 0x01	; 1
     868:	c7 83       	std	Z+7, r28	; 0x07
  RX_NODE_TASK.Type = BASIC_TASK;
     86a:	c1 87       	std	Z+9, r28	; 0x09
  RX_NODE_TASK.SchType = PREEMPTIVE;
     86c:	c2 87       	std	Z+10, r28	; 0x0a
  RX_NODE_TASK.period.secs = 0;
     86e:	13 86       	std	Z+11, r1	; 0x0b
     870:	14 86       	std	Z+12, r1	; 0x0c
     872:	15 86       	std	Z+13, r1	; 0x0d
     874:	16 86       	std	Z+14, r1	; 0x0e
  RX_NODE_TASK.period.nano_secs = 50*NANOS_PER_MS;
     876:	80 e8       	ldi	r24, 0x80	; 128
     878:	88 2e       	mov	r8, r24
     87a:	80 ef       	ldi	r24, 0xF0	; 240
     87c:	98 2e       	mov	r9, r24
     87e:	8a ef       	ldi	r24, 0xFA	; 250
     880:	a8 2e       	mov	r10, r24
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	b8 2e       	mov	r11, r24
     886:	87 86       	std	Z+15, r8	; 0x0f
     888:	90 8a       	std	Z+16, r9	; 0x10
     88a:	a1 8a       	std	Z+17, r10	; 0x11
     88c:	b2 8a       	std	Z+18, r11	; 0x12
  RX_NODE_TASK.cpu_reserve.secs = 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	a0 e0       	ldi	r26, 0x00	; 0
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	83 8b       	std	Z+19, r24	; 0x13
     898:	94 8b       	std	Z+20, r25	; 0x14
     89a:	a5 8b       	std	Z+21, r26	; 0x15
     89c:	b6 8b       	std	Z+22, r27	; 0x16
  RX_NODE_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
     89e:	90 e8       	ldi	r25, 0x80	; 128
     8a0:	c9 2e       	mov	r12, r25
     8a2:	96 e9       	ldi	r25, 0x96	; 150
     8a4:	d9 2e       	mov	r13, r25
     8a6:	98 e9       	ldi	r25, 0x98	; 152
     8a8:	e9 2e       	mov	r14, r25
     8aa:	f1 2c       	mov	r15, r1
     8ac:	c7 8a       	std	Z+23, r12	; 0x17
     8ae:	d0 8e       	std	Z+24, r13	; 0x18
     8b0:	e1 8e       	std	Z+25, r14	; 0x19
     8b2:	f2 8e       	std	Z+26, r15	; 0x1a
  RX_NODE_TASK.offset.secs = 0;
     8b4:	13 8e       	std	Z+27, r1	; 0x1b
     8b6:	14 8e       	std	Z+28, r1	; 0x1c
     8b8:	15 8e       	std	Z+29, r1	; 0x1d
     8ba:	16 8e       	std	Z+30, r1	; 0x1e
  RX_NODE_TASK.offset.nano_secs = 0;
     8bc:	17 8e       	std	Z+31, r1	; 0x1f
     8be:	10 a2       	std	Z+32, r1	; 0x20
     8c0:	11 a2       	std	Z+33, r1	; 0x21
     8c2:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task (&RX_NODE_TASK);
     8c4:	c8 01       	movw	r24, r16
     8c6:	0e 94 39 20 	call	0x4072	; 0x4072 <nrk_activate_task>
  
  // PRIORITY ??
  RX_SERV_TASK.task = rx_serv_task;
     8ca:	0d ec       	ldi	r16, 0xCD	; 205
     8cc:	19 e0       	ldi	r17, 0x09	; 9
     8ce:	88 ef       	ldi	r24, 0xF8	; 248
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	f8 01       	movw	r30, r16
     8d4:	96 83       	std	Z+6, r25	; 0x06
     8d6:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&RX_SERV_TASK, rx_serv_task_stack, NRK_APP_STACKSIZE);
     8d8:	40 e8       	ldi	r20, 0x80	; 128
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	63 e9       	ldi	r22, 0x93	; 147
     8de:	77 e0       	ldi	r23, 0x07	; 7
     8e0:	c8 01       	movw	r24, r16
     8e2:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_task_set_stk>
  RX_SERV_TASK.prio = 4;
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	f8 01       	movw	r30, r16
     8ea:	80 87       	std	Z+8, r24	; 0x08
  RX_SERV_TASK.FirstActivation = TRUE;
     8ec:	c7 83       	std	Z+7, r28	; 0x07
  RX_SERV_TASK.Type = BASIC_TASK;
     8ee:	c1 87       	std	Z+9, r28	; 0x09
  RX_SERV_TASK.SchType = PREEMPTIVE;
     8f0:	c2 87       	std	Z+10, r28	; 0x0a
  RX_SERV_TASK.period.secs = 0;
     8f2:	13 86       	std	Z+11, r1	; 0x0b
     8f4:	14 86       	std	Z+12, r1	; 0x0c
     8f6:	15 86       	std	Z+13, r1	; 0x0d
     8f8:	16 86       	std	Z+14, r1	; 0x0e
  RX_SERV_TASK.period.nano_secs = 50*NANOS_PER_MS;
     8fa:	87 86       	std	Z+15, r8	; 0x0f
     8fc:	90 8a       	std	Z+16, r9	; 0x10
     8fe:	a1 8a       	std	Z+17, r10	; 0x11
     900:	b2 8a       	std	Z+18, r11	; 0x12
  RX_SERV_TASK.cpu_reserve.secs = 0;
     902:	13 8a       	std	Z+19, r1	; 0x13
     904:	14 8a       	std	Z+20, r1	; 0x14
     906:	15 8a       	std	Z+21, r1	; 0x15
     908:	16 8a       	std	Z+22, r1	; 0x16
  RX_SERV_TASK.cpu_reserve.nano_secs = 10*NANOS_PER_MS;
     90a:	c7 8a       	std	Z+23, r12	; 0x17
     90c:	d0 8e       	std	Z+24, r13	; 0x18
     90e:	e1 8e       	std	Z+25, r14	; 0x19
     910:	f2 8e       	std	Z+26, r15	; 0x1a
  RX_SERV_TASK.offset.secs = 0;
     912:	13 8e       	std	Z+27, r1	; 0x1b
     914:	14 8e       	std	Z+28, r1	; 0x1c
     916:	15 8e       	std	Z+29, r1	; 0x1d
     918:	16 8e       	std	Z+30, r1	; 0x1e
  RX_SERV_TASK.offset.nano_secs = 0;
     91a:	17 8e       	std	Z+31, r1	; 0x1f
     91c:	10 a2       	std	Z+32, r1	; 0x20
     91e:	11 a2       	std	Z+33, r1	; 0x21
     920:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&RX_SERV_TASK);
     922:	c8 01       	movw	r24, r16
     924:	0e 94 39 20 	call	0x4072	; 0x4072 <nrk_activate_task>
  
  // PRIORITY ??
  TX_CMD_TASK.task = tx_cmd_task;
     928:	0a ea       	ldi	r16, 0xAA	; 170
     92a:	19 e0       	ldi	r17, 0x09	; 9
     92c:	86 ef       	ldi	r24, 0xF6	; 246
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	f8 01       	movw	r30, r16
     932:	96 83       	std	Z+6, r25	; 0x06
     934:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_CMD_TASK, tx_cmd_task_stack, NRK_APP_STACKSIZE);
     936:	40 e8       	ldi	r20, 0x80	; 128
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	69 e2       	ldi	r22, 0x29	; 41
     93c:	79 e0       	ldi	r23, 0x09	; 9
     93e:	c8 01       	movw	r24, r16
     940:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_task_set_stk>
  TX_CMD_TASK.prio = 5;
     944:	85 e0       	ldi	r24, 0x05	; 5
     946:	f8 01       	movw	r30, r16
     948:	80 87       	std	Z+8, r24	; 0x08
  TX_CMD_TASK.FirstActivation = TRUE;
     94a:	c7 83       	std	Z+7, r28	; 0x07
  TX_CMD_TASK.Type = BASIC_TASK;
     94c:	c1 87       	std	Z+9, r28	; 0x09
  TX_CMD_TASK.SchType = PREEMPTIVE;
     94e:	c2 87       	std	Z+10, r28	; 0x0a
  TX_CMD_TASK.period.secs = 0;
     950:	13 86       	std	Z+11, r1	; 0x0b
     952:	14 86       	std	Z+12, r1	; 0x0c
     954:	15 86       	std	Z+13, r1	; 0x0d
     956:	16 86       	std	Z+14, r1	; 0x0e
  TX_CMD_TASK.period.nano_secs = 100*NANOS_PER_MS;
     958:	c1 2c       	mov	r12, r1
     95a:	21 ee       	ldi	r18, 0xE1	; 225
     95c:	d2 2e       	mov	r13, r18
     95e:	25 ef       	ldi	r18, 0xF5	; 245
     960:	e2 2e       	mov	r14, r18
     962:	25 e0       	ldi	r18, 0x05	; 5
     964:	f2 2e       	mov	r15, r18
     966:	c7 86       	std	Z+15, r12	; 0x0f
     968:	d0 8a       	std	Z+16, r13	; 0x10
     96a:	e1 8a       	std	Z+17, r14	; 0x11
     96c:	f2 8a       	std	Z+18, r15	; 0x12
  TX_CMD_TASK.cpu_reserve.secs = 0;
     96e:	13 8a       	std	Z+19, r1	; 0x13
     970:	14 8a       	std	Z+20, r1	; 0x14
     972:	15 8a       	std	Z+21, r1	; 0x15
     974:	16 8a       	std	Z+22, r1	; 0x16
  TX_CMD_TASK.cpu_reserve.nano_secs = 20*NANOS_PER_MS;
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	9d e2       	ldi	r25, 0x2D	; 45
     97a:	a1 e3       	ldi	r26, 0x31	; 49
     97c:	b1 e0       	ldi	r27, 0x01	; 1
     97e:	87 8b       	std	Z+23, r24	; 0x17
     980:	90 8f       	std	Z+24, r25	; 0x18
     982:	a1 8f       	std	Z+25, r26	; 0x19
     984:	b2 8f       	std	Z+26, r27	; 0x1a
  TX_CMD_TASK.offset.secs = 0;
     986:	13 8e       	std	Z+27, r1	; 0x1b
     988:	14 8e       	std	Z+28, r1	; 0x1c
     98a:	15 8e       	std	Z+29, r1	; 0x1d
     98c:	16 8e       	std	Z+30, r1	; 0x1e
  TX_CMD_TASK.offset.nano_secs = 0;
     98e:	17 8e       	std	Z+31, r1	; 0x1f
     990:	10 a2       	std	Z+32, r1	; 0x20
     992:	11 a2       	std	Z+33, r1	; 0x21
     994:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&TX_CMD_TASK);
     996:	c8 01       	movw	r24, r16
     998:	0e 94 39 20 	call	0x4072	; 0x4072 <nrk_activate_task>
  
  
  // PRIORITY ??
  TX_NODE_TASK.task = tx_node_task;
     99c:	02 e9       	ldi	r16, 0x92	; 146
     99e:	18 e0       	ldi	r17, 0x08	; 8
     9a0:	85 e0       	ldi	r24, 0x05	; 5
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	f8 01       	movw	r30, r16
     9a6:	96 83       	std	Z+6, r25	; 0x06
     9a8:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_NODE_TASK, tx_node_task_stack, NRK_APP_STACKSIZE);
     9aa:	40 e8       	ldi	r20, 0x80	; 128
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	68 e7       	ldi	r22, 0x78	; 120
     9b0:	75 e0       	ldi	r23, 0x05	; 5
     9b2:	c8 01       	movw	r24, r16
     9b4:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_task_set_stk>
  TX_NODE_TASK.prio = 1;
     9b8:	f8 01       	movw	r30, r16
     9ba:	c0 87       	std	Z+8, r28	; 0x08
  TX_NODE_TASK.FirstActivation = TRUE;
     9bc:	c7 83       	std	Z+7, r28	; 0x07
  TX_NODE_TASK.Type = BASIC_TASK;
     9be:	c1 87       	std	Z+9, r28	; 0x09
  TX_NODE_TASK.SchType = PREEMPTIVE;
     9c0:	c2 87       	std	Z+10, r28	; 0x0a
  TX_NODE_TASK.period.secs = 5;
     9c2:	35 e0       	ldi	r19, 0x05	; 5
     9c4:	83 2e       	mov	r8, r19
     9c6:	91 2c       	mov	r9, r1
     9c8:	a1 2c       	mov	r10, r1
     9ca:	b1 2c       	mov	r11, r1
     9cc:	83 86       	std	Z+11, r8	; 0x0b
     9ce:	94 86       	std	Z+12, r9	; 0x0c
     9d0:	a5 86       	std	Z+13, r10	; 0x0d
     9d2:	b6 86       	std	Z+14, r11	; 0x0e
  TX_NODE_TASK.period.nano_secs = 0;
     9d4:	17 86       	std	Z+15, r1	; 0x0f
     9d6:	10 8a       	std	Z+16, r1	; 0x10
     9d8:	11 8a       	std	Z+17, r1	; 0x11
     9da:	12 8a       	std	Z+18, r1	; 0x12
  TX_NODE_TASK.cpu_reserve.secs = 0;
     9dc:	13 8a       	std	Z+19, r1	; 0x13
     9de:	14 8a       	std	Z+20, r1	; 0x14
     9e0:	15 8a       	std	Z+21, r1	; 0x15
     9e2:	16 8a       	std	Z+22, r1	; 0x16
  TX_NODE_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     9e4:	c7 8a       	std	Z+23, r12	; 0x17
     9e6:	d0 8e       	std	Z+24, r13	; 0x18
     9e8:	e1 8e       	std	Z+25, r14	; 0x19
     9ea:	f2 8e       	std	Z+26, r15	; 0x1a
  TX_NODE_TASK.offset.secs = 0;
     9ec:	13 8e       	std	Z+27, r1	; 0x1b
     9ee:	14 8e       	std	Z+28, r1	; 0x1c
     9f0:	15 8e       	std	Z+29, r1	; 0x1d
     9f2:	16 8e       	std	Z+30, r1	; 0x1e
  TX_NODE_TASK.offset.nano_secs = 0;
     9f4:	17 8e       	std	Z+31, r1	; 0x1f
     9f6:	10 a2       	std	Z+32, r1	; 0x20
     9f8:	11 a2       	std	Z+33, r1	; 0x21
     9fa:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&TX_NODE_TASK);
     9fc:	c8 01       	movw	r24, r16
     9fe:	0e 94 39 20 	call	0x4072	; 0x4072 <nrk_activate_task>
  
  // PRIORITY ??
  TX_SERV_TASK.task = tx_serv_task;
     a02:	04 e4       	ldi	r16, 0x44	; 68
     a04:	15 e0       	ldi	r17, 0x05	; 5
     a06:	84 e1       	ldi	r24, 0x14	; 20
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	f8 01       	movw	r30, r16
     a0c:	96 83       	std	Z+6, r25	; 0x06
     a0e:	85 83       	std	Z+5, r24	; 0x05
  nrk_task_set_stk(&TX_SERV_TASK, tx_serv_task_stack, NRK_APP_STACKSIZE);
     a10:	40 e8       	ldi	r20, 0x80	; 128
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	6b e7       	ldi	r22, 0x7B	; 123
     a16:	76 e0       	ldi	r23, 0x06	; 6
     a18:	c8 01       	movw	r24, r16
     a1a:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_task_set_stk>
  TX_SERV_TASK.prio = 2;
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	f8 01       	movw	r30, r16
     a22:	80 87       	std	Z+8, r24	; 0x08
  TX_SERV_TASK.FirstActivation = TRUE;
     a24:	c7 83       	std	Z+7, r28	; 0x07
  TX_SERV_TASK.Type = BASIC_TASK;
     a26:	c1 87       	std	Z+9, r28	; 0x09
  TX_SERV_TASK.SchType = PREEMPTIVE;
     a28:	c2 87       	std	Z+10, r28	; 0x0a
  TX_SERV_TASK.period.secs = 5;
     a2a:	83 86       	std	Z+11, r8	; 0x0b
     a2c:	94 86       	std	Z+12, r9	; 0x0c
     a2e:	a5 86       	std	Z+13, r10	; 0x0d
     a30:	b6 86       	std	Z+14, r11	; 0x0e
  TX_SERV_TASK.period.nano_secs = 0;
     a32:	17 86       	std	Z+15, r1	; 0x0f
     a34:	10 8a       	std	Z+16, r1	; 0x10
     a36:	11 8a       	std	Z+17, r1	; 0x11
     a38:	12 8a       	std	Z+18, r1	; 0x12
  TX_SERV_TASK.cpu_reserve.secs = 0;
     a3a:	13 8a       	std	Z+19, r1	; 0x13
     a3c:	14 8a       	std	Z+20, r1	; 0x14
     a3e:	15 8a       	std	Z+21, r1	; 0x15
     a40:	16 8a       	std	Z+22, r1	; 0x16
  TX_SERV_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
     a42:	c7 8a       	std	Z+23, r12	; 0x17
     a44:	d0 8e       	std	Z+24, r13	; 0x18
     a46:	e1 8e       	std	Z+25, r14	; 0x19
     a48:	f2 8e       	std	Z+26, r15	; 0x1a
  TX_SERV_TASK.offset.secs = 0;
     a4a:	13 8e       	std	Z+27, r1	; 0x1b
     a4c:	14 8e       	std	Z+28, r1	; 0x1c
     a4e:	15 8e       	std	Z+29, r1	; 0x1d
     a50:	16 8e       	std	Z+30, r1	; 0x1e
  TX_SERV_TASK.offset.nano_secs = 0;
     a52:	17 8e       	std	Z+31, r1	; 0x1f
     a54:	10 a2       	std	Z+32, r1	; 0x20
     a56:	11 a2       	std	Z+33, r1	; 0x21
     a58:	12 a2       	std	Z+34, r1	; 0x22
  nrk_activate_task(&TX_SERV_TASK);
     a5a:	c8 01       	movw	r24, r16
     a5c:	0e 94 39 20 	call	0x4072	; 0x4072 <nrk_activate_task>
  
  nrk_kprintf(PSTR("Create done.\r\n"));
     a60:	84 eb       	ldi	r24, 0xB4	; 180
     a62:	91 e0       	ldi	r25, 0x01	; 1
}
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	df 90       	pop	r13
     a70:	cf 90       	pop	r12
     a72:	bf 90       	pop	r11
     a74:	af 90       	pop	r10
     a76:	9f 90       	pop	r9
     a78:	8f 90       	pop	r8
  TX_SERV_TASK.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
  TX_SERV_TASK.offset.secs = 0;
  TX_SERV_TASK.offset.nano_secs = 0;
  nrk_activate_task(&TX_SERV_TASK);
  
  nrk_kprintf(PSTR("Create done.\r\n"));
     a7a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <nrk_kprintf>

00000a7e <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
  // Any code here gets called the instant a packet is received from the interrupt   
  return pRRI;
}
     a7e:	08 95       	ret

00000a80 <bmac_encryption_set_ctr_counter>:

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
     a80:	64 30       	cpi	r22, 0x04	; 4
     a82:	21 f4       	brne	.+8      	; 0xa8c <bmac_encryption_set_ctr_counter+0xc>
    return NRK_ERROR;
  rf_security_set_ctr_counter (counter);
     a84:	0e 94 01 11 	call	0x2202	; 0x2202 <rf_security_set_ctr_counter>
  return NRK_OK;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	08 95       	ret
}

int8_t bmac_encryption_set_ctr_counter (uint8_t * counter, uint8_t len)
{
  if (len != 4)
    return NRK_ERROR;
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_ctr_counter (counter);
  return NRK_OK;
}
     a8e:	08 95       	ret

00000a90 <bmac_tx_reserve_set>:
  else
    return NRK_ERROR;
#else
  return NRK_ERROR;
#endif
}
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	08 95       	ret

00000a94 <bmac_tx_reserve_get>:
  else
    return 0;
#else
  return 0;
#endif
}
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	08 95       	ret

00000a9a <bmac_auto_ack_disable>:


int8_t bmac_auto_ack_disable ()
{
  rf_auto_ack_disable ();
     a9a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <rf_auto_ack_disable>
  return NRK_OK;
}
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	08 95       	ret

00000aa2 <bmac_auto_ack_enable>:

int8_t bmac_auto_ack_enable ()
{
  rf_auto_ack_enable ();
     aa2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <rf_auto_ack_enable>
  return NRK_OK;
}
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	08 95       	ret

00000aaa <bmac_addr_decode_disable>:

int8_t bmac_addr_decode_disable ()
{
  rf_addr_decode_disable ();
     aaa:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <rf_addr_decode_disable>
  return NRK_OK;
}
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	08 95       	ret

00000ab2 <bmac_addr_decode_enable>:

int8_t bmac_addr_decode_enable ()
{
  rf_addr_decode_enable ();
     ab2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <rf_addr_decode_enable>
  return NRK_OK;
}
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	08 95       	ret

00000aba <bmac_addr_decode_set_my_mac>:

int8_t bmac_addr_decode_set_my_mac (uint16_t my_mac)
{
  rf_addr_decode_set_my_mac (my_mac);
     aba:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <rf_addr_decode_set_my_mac>
  return NRK_OK;
}
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	08 95       	ret

00000ac2 <bmac_addr_decode_dest_mac>:

int8_t bmac_addr_decode_dest_mac (uint16_t dest)
{
  bmac_rfTxInfo.destAddr = dest;
     ac2:	90 93 14 08 	sts	0x0814, r25
     ac6:	80 93 13 08 	sts	0x0813, r24
  return NRK_OK;
}
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	08 95       	ret

00000ace <bmac_rx_pkt_is_encrypted>:

int8_t bmac_rx_pkt_is_encrypted ()
{
  return rf_security_last_pkt_status ();
     ace:	0e 94 ff 10 	call	0x21fe	; 0x21fe <rf_security_last_pkt_status>
}
     ad2:	08 95       	ret

00000ad4 <bmac_encryption_set_key>:

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
     ad4:	60 31       	cpi	r22, 0x10	; 16
     ad6:	21 f4       	brne	.+8      	; 0xae0 <bmac_encryption_set_key+0xc>
    return NRK_ERROR;
  rf_security_set_key (key);
     ad8:	0e 94 02 11 	call	0x2204	; 0x2204 <rf_security_set_key>
  return NRK_OK;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	08 95       	ret
}

int8_t bmac_encryption_set_key (uint8_t * key, uint8_t len)
{
  if (len != 16)
    return NRK_ERROR;
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
  rf_security_set_key (key);
  return NRK_OK;
}
     ae2:	08 95       	ret

00000ae4 <bmac_encryption_enable>:

int8_t bmac_encryption_enable ()
{
  //rf_security_enable();
  return NRK_OK;
}
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	08 95       	ret

00000ae8 <bmac_encryption_disable>:

int8_t bmac_encryption_disable ()
{
  //rf_security_disable();
  return NRK_OK;
}
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret

00000aec <bmac_set_rf_power>:


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
     aec:	80 32       	cpi	r24, 0x20	; 32
     aee:	20 f4       	brcc	.+8      	; 0xaf8 <bmac_set_rf_power+0xc>
    return NRK_ERROR;
  rf_tx_power (power);
     af0:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <rf_tx_power>
  return NRK_OK;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 95       	ret


int8_t bmac_set_rf_power (uint8_t power)
{
  if (power > 31)
    return NRK_ERROR;
     af8:	8f ef       	ldi	r24, 0xFF	; 255
  rf_tx_power (power);
  return NRK_OK;
}
     afa:	08 95       	ret

00000afc <bmac_set_cca_active>:

void bmac_set_cca_active (uint8_t active)
{
  cca_active = active;
     afc:	80 93 75 04 	sts	0x0475, r24
     b00:	08 95       	ret

00000b02 <bmac_set_cca_thresh>:
}

int8_t bmac_set_cca_thresh (int8_t thresh)
{
  rf_set_cca_thresh (thresh);
     b02:	99 27       	eor	r25, r25
     b04:	87 fd       	sbrc	r24, 7
     b06:	90 95       	com	r25
     b08:	0e 94 f5 10 	call	0x21ea	; 0x21ea <rf_set_cca_thresh>
  return NRK_OK;
}
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	08 95       	ret

00000b10 <bmac_set_channel>:

int8_t bmac_set_channel (uint8_t chan)
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	1f 92       	push	r1
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
  if (chan > 26)
     b1a:	8b 31       	cpi	r24, 0x1B	; 27
     b1c:	80 f4       	brcc	.+32     	; 0xb3e <bmac_set_channel+0x2e>
    return NRK_ERROR;
  g_chan = chan;
     b1e:	80 93 7f 04 	sts	0x047F, r24
  rf_power_up ();
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	0e 94 67 0d 	call	0x1ace	; 0x1ace <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	4f ef       	ldi	r20, 0xFF	; 255
     b2e:	5f ef       	ldi	r21, 0xFF	; 255
     b30:	69 81       	ldd	r22, Y+1	; 0x01
     b32:	86 e8       	ldi	r24, 0x86	; 134
     b34:	9a e0       	ldi	r25, 0x0A	; 10
     b36:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <rf_init>
  return NRK_OK;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	01 c0       	rjmp	.+2      	; 0xb40 <bmac_set_channel+0x30>
}

int8_t bmac_set_channel (uint8_t chan)
{
  if (chan > 26)
    return NRK_ERROR;
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
  g_chan = chan;
  rf_power_up ();
  rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
  return NRK_OK;
}
     b40:	0f 90       	pop	r0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
     b48:	80 91 82 04 	lds	r24, 0x0482
     b4c:	88 23       	and	r24, r24
     b4e:	11 f1       	breq	.+68     	; 0xb94 <bmac_wait_until_rx_pkt+0x4c>
    return NRK_OK;

  nrk_signal_register (bmac_rx_pkt_signal);
     b50:	80 91 a9 09 	lds	r24, 0x09A9
     b54:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	bc 01       	movw	r22, r24
     b62:	cd 01       	movw	r24, r26
     b64:	00 90 a9 09 	lds	r0, 0x09A9
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <bmac_wait_until_rx_pkt+0x2a>
     b6a:	66 0f       	add	r22, r22
     b6c:	77 1f       	adc	r23, r23
     b6e:	88 1f       	adc	r24, r24
     b70:	99 1f       	adc	r25, r25
     b72:	0a 94       	dec	r0
     b74:	d2 f7       	brpl	.-12     	; 0xb6a <bmac_wait_until_rx_pkt+0x22>
     b76:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	00 90 a9 09 	lds	r0, 0x09A9
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <bmac_wait_until_rx_pkt+0x44>
     b84:	b6 95       	lsr	r27
     b86:	a7 95       	ror	r26
     b88:	97 95       	ror	r25
     b8a:	87 95       	ror	r24
     b8c:	0a 94       	dec	r0
     b8e:	d2 f7       	brpl	.-12     	; 0xb84 <bmac_wait_until_rx_pkt+0x3c>
     b90:	80 ff       	sbrs	r24, 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <bmac_wait_until_rx_pkt+0x50>
int8_t bmac_wait_until_rx_pkt ()
{
  nrk_sig_mask_t event;

  if (bmac_rx_pkt_ready () == 1)
    return NRK_OK;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	08 95       	ret
  nrk_signal_register (bmac_rx_pkt_signal);
  event = nrk_event_wait (SIG (bmac_rx_pkt_signal));

// Check if it was a time out instead of packet RX signal
  if ((event & SIG (bmac_rx_pkt_signal)) == 0)
    return NRK_ERROR;
     b98:	8f ef       	ldi	r24, 0xFF	; 255
  else
    return NRK_OK;
}
     b9a:	08 95       	ret

00000b9c <bmac_rx_pkt_set_buffer>:

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	51 f0       	breq	.+20     	; 0xbb4 <bmac_rx_pkt_set_buffer+0x18>
    return NRK_ERROR;
  bmac_rfRxInfo.pPayload = buf;
     ba0:	90 93 8c 0a 	sts	0x0A8C, r25
     ba4:	80 93 8b 0a 	sts	0x0A8B, r24
  bmac_rfRxInfo.max_length = size;
     ba8:	60 93 8a 0a 	sts	0x0A8A, r22
  rx_buf_empty = 1;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 82 04 	sts	0x0482, r24
  return NRK_OK;
     bb2:	08 95       	ret
}

int8_t bmac_rx_pkt_set_buffer (uint8_t * buf, uint8_t size)
{
  if (buf == NULL)
    return NRK_ERROR;
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
  bmac_rfRxInfo.pPayload = buf;
  bmac_rfRxInfo.max_length = size;
  rx_buf_empty = 1;
  return NRK_OK;
}
     bb6:	08 95       	ret

00000bb8 <bmac_init>:

int8_t bmac_init (uint8_t chan)
{
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	18 2f       	mov	r17, r24
  bmac_running = 0;
     bc0:	10 92 81 04 	sts	0x0481, r1
  tx_reserve = -1;
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	80 93 74 04 	sts	0x0474, r24
  cca_active = true;
     bca:	d1 e0       	ldi	r29, 0x01	; 1
     bcc:	d0 93 75 04 	sts	0x0475, r29
  rx_failure_cnt = 0;
     bd0:	10 92 84 04 	sts	0x0484, r1
     bd4:	10 92 85 04 	sts	0x0485, r1
     bd8:	10 92 86 04 	sts	0x0486, r1
     bdc:	10 92 87 04 	sts	0x0487, r1
#endif
#endif



  _bmac_check_period.secs = 0;
     be0:	10 92 76 04 	sts	0x0476, r1
     be4:	10 92 77 04 	sts	0x0477, r1
     be8:	10 92 78 04 	sts	0x0478, r1
     bec:	10 92 79 04 	sts	0x0479, r1
  _bmac_check_period.nano_secs = BMAC_DEFAULT_CHECK_RATE_MS * NANOS_PER_MS;
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	91 ee       	ldi	r25, 0xE1	; 225
     bf4:	a5 ef       	ldi	r26, 0xF5	; 245
     bf6:	b5 e0       	ldi	r27, 0x05	; 5
     bf8:	80 93 7a 04 	sts	0x047A, r24
     bfc:	90 93 7b 04 	sts	0x047B, r25
     c00:	a0 93 7c 04 	sts	0x047C, r26
     c04:	b0 93 7d 04 	sts	0x047D, r27
  bmac_rx_pkt_signal = nrk_signal_create ();
     c08:	0e 94 07 1c 	call	0x380e	; 0x380e <nrk_signal_create>
     c0c:	c8 2f       	mov	r28, r24
     c0e:	80 93 a9 09 	sts	0x09A9, r24
  if (bmac_rx_pkt_signal == NRK_ERROR) {
     c12:	8f 3f       	cpi	r24, 0xFF	; 255
     c14:	19 f4       	brne	.+6      	; 0xc1c <bmac_init+0x64>
    nrk_kprintf (PSTR ("BMAC ERROR: creating rx signal failed\r\n"));
     c16:	81 ee       	ldi	r24, 0xE1	; 225
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }
  bmac_tx_pkt_done_signal = nrk_signal_create ();
     c1c:	0e 94 07 1c 	call	0x380e	; 0x380e <nrk_signal_create>
     c20:	c8 2f       	mov	r28, r24
     c22:	80 93 2d 0b 	sts	0x0B2D, r24
  if (bmac_tx_pkt_done_signal == NRK_ERROR) {
     c26:	8f 3f       	cpi	r24, 0xFF	; 255
     c28:	69 f4       	brne	.+26     	; 0xc44 <bmac_init+0x8c>
    nrk_kprintf (PSTR ("BMAC ERROR: creating tx signal failed\r\n"));
     c2a:	89 eb       	ldi	r24, 0xB9	; 185
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
     c32:	e0 91 d6 0c 	lds	r30, 0x0CD6
     c36:	f0 91 d7 0c 	lds	r31, 0x0CD7
     c3a:	60 85       	ldd	r22, Z+8	; 0x08
     c3c:	8e e0       	ldi	r24, 0x0E	; 14
     c3e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
    return NRK_ERROR;
     c42:	2a c0       	rjmp	.+84     	; 0xc98 <bmac_init+0xe0>
  }
  bmac_enable_signal = nrk_signal_create ();
     c44:	0e 94 07 1c 	call	0x380e	; 0x380e <nrk_signal_create>
     c48:	c8 2f       	mov	r28, r24
     c4a:	80 93 92 07 	sts	0x0792, r24
  if (bmac_enable_signal == NRK_ERROR) {
     c4e:	8f 3f       	cpi	r24, 0xFF	; 255
     c50:	19 f4       	brne	.+6      	; 0xc58 <bmac_init+0xa0>
    nrk_kprintf (PSTR ("BMAC ERROR: creating enable signal failed\r\n"));
     c52:	8d e8       	ldi	r24, 0x8D	; 141
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	eb cf       	rjmp	.-42     	; 0xc2e <bmac_init+0x76>
    nrk_kernel_error_add (NRK_SIGNAL_CREATE_ERROR, nrk_cur_task_TCB->task_ID);
    return NRK_ERROR;
  }


  tx_data_ready = 0;
     c58:	10 92 83 04 	sts	0x0483, r1
  // Set the one main rx buffer
  rx_buf_empty = 0;
     c5c:	10 92 82 04 	sts	0x0482, r1
  bmac_rfRxInfo.pPayload = NULL;
     c60:	10 92 8c 0a 	sts	0x0A8C, r1
     c64:	10 92 8b 0a 	sts	0x0A8B, r1
  bmac_rfRxInfo.max_length = 0;
     c68:	10 92 8a 0a 	sts	0x0A8A, r1

  // Setup the cc2420 chip
  rf_power_up ();
     c6c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <rf_power_up>
  rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	4f ef       	ldi	r20, 0xFF	; 255
     c76:	5f ef       	ldi	r21, 0xFF	; 255
     c78:	61 2f       	mov	r22, r17
     c7a:	86 e8       	ldi	r24, 0x86	; 134
     c7c:	9a e0       	ldi	r25, 0x0A	; 10
     c7e:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <rf_init>
  g_chan = chan;
     c82:	10 93 7f 04 	sts	0x047F, r17
//    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
//    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
//    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
  // default cca thresh of -45
  //rf_set_cca_thresh(-45); 
  rf_set_cca_thresh (0x0);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <rf_set_cca_thresh>
  bmac_running = 1;
     c8e:	d0 93 81 04 	sts	0x0481, r29
  is_enabled = 1;
     c92:	d0 93 7e 04 	sts	0x047E, r29
  return NRK_OK;
     c96:	c1 e0       	ldi	r28, 0x01	; 1
}
     c98:	8c 2f       	mov	r24, r28
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <bmac_tx_pkt_nonblocking>:

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
     ca2:	20 91 83 04 	lds	r18, 0x0483
     ca6:	21 30       	cpi	r18, 0x01	; 1
     ca8:	59 f0       	breq	.+22     	; 0xcc0 <bmac_tx_pkt_nonblocking+0x1e>
    return NRK_ERROR;
  tx_data_ready = 1;
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	20 93 83 04 	sts	0x0483, r18
  bmac_rfTxInfo.pPayload = buf;
     cb0:	90 93 17 08 	sts	0x0817, r25
     cb4:	80 93 16 08 	sts	0x0816, r24
  bmac_rfTxInfo.length = len;
     cb8:	60 93 15 08 	sts	0x0815, r22
  return NRK_OK;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	08 95       	ret
}

int8_t bmac_tx_pkt_nonblocking (uint8_t * buf, uint8_t len)
{
  if (tx_data_ready == 1)
    return NRK_ERROR;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
  tx_data_ready = 1;
  bmac_rfTxInfo.pPayload = buf;
  bmac_rfTxInfo.length = len;
  return NRK_OK;
}
     cc2:	08 95       	ret

00000cc4 <bmac_get_rx_pkt_signal>:

nrk_sig_t bmac_get_rx_pkt_signal ()
{
  nrk_signal_register (bmac_rx_pkt_signal);
     cc4:	80 91 a9 09 	lds	r24, 0x09A9
     cc8:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
  return (bmac_rx_pkt_signal);
}
     ccc:	80 91 a9 09 	lds	r24, 0x09A9
     cd0:	08 95       	ret

00000cd2 <bmac_get_tx_done_signal>:

nrk_sig_t bmac_get_tx_done_signal ()
{
  nrk_signal_register (bmac_tx_pkt_done_signal);
     cd2:	80 91 2d 0b 	lds	r24, 0x0B2D
     cd6:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
  return (bmac_tx_pkt_done_signal);
}
     cda:	80 91 2d 0b 	lds	r24, 0x0B2D
     cde:	08 95       	ret

00000ce0 <bmac_tx_pkt>:


int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
     ce0:	cf 92       	push	r12
     ce2:	df 92       	push	r13
     ce4:	ef 92       	push	r14
     ce6:	ff 92       	push	r15
  uint32_t mask;
  if (tx_data_ready == 1)
     ce8:	20 91 83 04 	lds	r18, 0x0483
     cec:	21 30       	cpi	r18, 0x01	; 1
     cee:	f1 f1       	breq	.+124    	; 0xd6c <bmac_tx_pkt+0x8c>
     cf0:	f6 2e       	mov	r15, r22
     cf2:	6c 01       	movw	r12, r24
    if (nrk_reserve_consume (tx_reserve) == NRK_ERROR) {
      return NRK_ERROR;
    }
  }
#endif
  nrk_signal_register (bmac_tx_pkt_done_signal);
     cf4:	80 91 2d 0b 	lds	r24, 0x0B2D
     cf8:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
  tx_data_ready = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 83 04 	sts	0x0483, r24
  bmac_rfTxInfo.pPayload = buf;
     d02:	d0 92 17 08 	sts	0x0817, r13
     d06:	c0 92 16 08 	sts	0x0816, r12
  bmac_rfTxInfo.length = len;
     d0a:	f0 92 15 08 	sts	0x0815, r15
#ifdef DEBUG
  nrk_kprintf (PSTR ("Waiting for tx done signal\r\n"));
#endif
  mask = nrk_event_wait (SIG (bmac_tx_pkt_done_signal));
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	a0 e0       	ldi	r26, 0x00	; 0
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	00 90 2d 0b 	lds	r0, 0x0B2D
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <bmac_tx_pkt+0x48>
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	88 1f       	adc	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	d2 f7       	brpl	.-12     	; 0xd20 <bmac_tx_pkt+0x40>
     d2c:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nrk_event_wait>
     d30:	6b 01       	movw	r12, r22
     d32:	7c 01       	movw	r14, r24
  if (mask == 0)
     d34:	61 15       	cp	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	81 05       	cpc	r24, r1
     d3a:	91 05       	cpc	r25, r1
     d3c:	21 f4       	brne	.+8      	; 0xd46 <bmac_tx_pkt+0x66>
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
     d3e:	89 e6       	ldi	r24, 0x69	; 105
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
     d46:	00 90 2d 0b 	lds	r0, 0x0B2D
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <bmac_tx_pkt+0x74>
     d4c:	f6 94       	lsr	r15
     d4e:	e7 94       	ror	r14
     d50:	d7 94       	ror	r13
     d52:	c7 94       	ror	r12
     d54:	0a 94       	dec	r0
     d56:	d2 f7       	brpl	.-12     	; 0xd4c <bmac_tx_pkt+0x6c>
     d58:	c0 fc       	sbrc	r12, 0
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <bmac_tx_pkt+0x84>
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
     d5c:	86 e4       	ldi	r24, 0x46	; 70
     d5e:	92 e0       	ldi	r25, 0x02	; 2
     d60:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
  if (pkt_got_ack)
     d64:	80 91 80 04 	lds	r24, 0x0480
     d68:	81 11       	cpse	r24, r1
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <bmac_tx_pkt+0x90>

int8_t bmac_tx_pkt (uint8_t * buf, uint8_t len)
{
  uint32_t mask;
  if (tx_data_ready == 1)
    return NRK_ERROR;
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <bmac_tx_pkt+0x92>
  if (mask == 0)
    nrk_kprintf (PSTR ("BMAC TX: Error calling event wait\r\n"));
  if ((mask & SIG (bmac_tx_pkt_done_signal)) == 0)
    nrk_kprintf (PSTR ("BMAC TX: Woke up on wrong signal\r\n"));
  if (pkt_got_ack)
    return NRK_OK;
     d70:	81 e0       	ldi	r24, 0x01	; 1
  return NRK_ERROR;
}
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	08 95       	ret

00000d7c <bmac_rx_pkt_get>:


uint8_t *bmac_rx_pkt_get (uint8_t * len, int8_t * rssi)
{

  if (bmac_rx_pkt_ready () == 0) {
     d7c:	20 91 82 04 	lds	r18, 0x0482
     d80:	22 23       	and	r18, r18
     d82:	39 f0       	breq	.+14     	; 0xd92 <bmac_rx_pkt_get+0x16>
    *len = 0;
     d84:	fc 01       	movw	r30, r24
     d86:	10 82       	st	Z, r1
    *rssi = 0;
     d88:	fb 01       	movw	r30, r22
     d8a:	10 82       	st	Z, r1
    return NULL;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	08 95       	ret
  }
  *len = bmac_rfRxInfo.length;
     d92:	20 91 89 0a 	lds	r18, 0x0A89
     d96:	fc 01       	movw	r30, r24
     d98:	20 83       	st	Z, r18
  *rssi = bmac_rfRxInfo.rssi;
     d9a:	80 91 8e 0a 	lds	r24, 0x0A8E
     d9e:	fb 01       	movw	r30, r22
     da0:	80 83       	st	Z, r24
  return bmac_rfRxInfo.pPayload;
     da2:	80 91 8b 0a 	lds	r24, 0x0A8B
     da6:	90 91 8c 0a 	lds	r25, 0x0A8C
}
     daa:	08 95       	ret

00000dac <bmac_rx_pkt_ready>:

int8_t bmac_rx_pkt_ready (void)
{
  return (!rx_buf_empty);
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 91 82 04 	lds	r25, 0x0482
     db2:	91 11       	cpse	r25, r1
     db4:	80 e0       	ldi	r24, 0x00	; 0
}
     db6:	08 95       	ret

00000db8 <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release (void)
{
  rx_buf_empty = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	80 93 82 04 	sts	0x0482, r24
  return NRK_OK;
}
     dbe:	08 95       	ret

00000dc0 <bmac_disable>:

void bmac_disable ()
{
  is_enabled = 0;
     dc0:	10 92 7e 04 	sts	0x047E, r1
  rf_power_down ();
     dc4:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <rf_power_down>

00000dc8 <bmac_enable>:
}

void bmac_enable ()
{
  is_enabled = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 7e 04 	sts	0x047E, r24
  rf_power_up ();
     dce:	0e 94 67 0d 	call	0x1ace	; 0x1ace <rf_power_up>
  nrk_event_signal (bmac_enable_signal);
     dd2:	80 91 92 07 	lds	r24, 0x0792
     dd6:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <nrk_event_signal>

00000dda <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	28 97       	sbiw	r28, 0x08	; 8
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	29 83       	std	Y+1, r18	; 0x01
     df0:	3a 83       	std	Y+2, r19	; 0x02
     df2:	4b 83       	std	Y+3, r20	; 0x03
     df4:	5c 83       	std	Y+4, r21	; 0x04
     df6:	6d 83       	std	Y+5, r22	; 0x05
     df8:	7e 83       	std	Y+6, r23	; 0x06
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	49 81       	ldd	r20, Y+1	; 0x01
     e00:	5a 81       	ldd	r21, Y+2	; 0x02
     e02:	6b 81       	ldd	r22, Y+3	; 0x03
     e04:	7c 81       	ldd	r23, Y+4	; 0x04
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	af 81       	ldd	r26, Y+7	; 0x07
     e0c:	b8 85       	ldd	r27, Y+8	; 0x08
  if (period.secs == 0
     e0e:	41 15       	cp	r20, r1
     e10:	51 05       	cpc	r21, r1
     e12:	61 05       	cpc	r22, r1
     e14:	71 05       	cpc	r23, r1
     e16:	41 f4       	brne	.+16     	; 0xe28 <bmac_set_rx_check_rate+0x4e>
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
     e18:	81 15       	cp	r24, r1
     e1a:	2d e2       	ldi	r18, 0x2D	; 45
     e1c:	92 07       	cpc	r25, r18
     e1e:	21 e3       	ldi	r18, 0x31	; 49
     e20:	a2 07       	cpc	r26, r18
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	b2 07       	cpc	r27, r18
     e26:	90 f0       	brcs	.+36     	; 0xe4c <bmac_set_rx_check_rate+0x72>
    return NRK_ERROR;
  _bmac_check_period.secs = period.secs;
     e28:	40 93 76 04 	sts	0x0476, r20
     e2c:	50 93 77 04 	sts	0x0477, r21
     e30:	60 93 78 04 	sts	0x0478, r22
     e34:	70 93 79 04 	sts	0x0479, r23
  _bmac_check_period.nano_secs = period.nano_secs;
     e38:	80 93 7a 04 	sts	0x047A, r24
     e3c:	90 93 7b 04 	sts	0x047B, r25
     e40:	a0 93 7c 04 	sts	0x047C, r26
     e44:	b0 93 7d 04 	sts	0x047D, r27
  return NRK_OK;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	01 c0       	rjmp	.+2      	; 0xe4e <bmac_set_rx_check_rate+0x74>

int8_t bmac_set_rx_check_rate (nrk_time_t period)
{
  if (period.secs == 0
      && period.nano_secs < BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS)
    return NRK_ERROR;
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
  _bmac_check_period.secs = period.secs;
  _bmac_check_period.nano_secs = period.nano_secs;
  return NRK_OK;
}
     e4e:	28 96       	adiw	r28, 0x08	; 8
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <bmac_started>:

int8_t bmac_started ()
{
  return bmac_running;
}
     e60:	80 91 81 04 	lds	r24, 0x0481
     e64:	08 95       	ret

00000e66 <_bmac_channel_check>:

int8_t _bmac_channel_check ()
{
     e66:	cf 93       	push	r28
  int8_t val = 0;

  rf_rx_on ();
     e68:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <rf_rx_on>
  val += rf_cca_check ();
     e6c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <rf_cca_check>
     e70:	c8 2f       	mov	r28, r24
  val += rf_cca_check ();
     e72:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <rf_cca_check>
     e76:	c8 0f       	add	r28, r24
  val += rf_cca_check ();
     e78:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <rf_cca_check>
     e7c:	c8 0f       	add	r28, r24
  if (val > 1)
    val = 1;
  rf_rx_off ();
     e7e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <rf_rx_off>
     e82:	8c 2f       	mov	r24, r28
     e84:	1c 16       	cp	r1, r28
     e86:	0c f4       	brge	.+2      	; 0xe8a <_bmac_channel_check+0x24>
     e88:	81 e0       	ldi	r24, 0x01	; 1
  return val;
}
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <_bmac_rx>:
int8_t _bmac_rx ()
{
  int8_t n;
  uint8_t cnt;

  rf_rx_on ();
     e8e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <rf_rx_on>
  cnt = 0;
//printf( "calling rx\r\n" );
  dummy_t.secs = 0;
     e92:	10 92 6c 04 	sts	0x046C, r1
     e96:	10 92 6d 04 	sts	0x046D, r1
     e9a:	10 92 6e 04 	sts	0x046E, r1
     e9e:	10 92 6f 04 	sts	0x046F, r1
  dummy_t.nano_secs = 5 * NANOS_PER_MS;
     ea2:	80 e4       	ldi	r24, 0x40	; 64
     ea4:	68 2f       	mov	r22, r24
     ea6:	80 93 70 04 	sts	0x0470, r24
     eaa:	8b e4       	ldi	r24, 0x4B	; 75
     eac:	80 93 71 04 	sts	0x0471, r24
     eb0:	8c e4       	ldi	r24, 0x4C	; 76
     eb2:	80 93 72 04 	sts	0x0472, r24
     eb6:	10 92 73 04 	sts	0x0473, r1
  nrk_wait (dummy_t);
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 91 6d 04 	lds	r19, 0x046D
     ec0:	40 91 6e 04 	lds	r20, 0x046E
     ec4:	50 91 6f 04 	lds	r21, 0x046F
     ec8:	7b e4       	ldi	r23, 0x4B	; 75
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 c7 21 	call	0x438e	; 0x438e <nrk_wait>

  n = rf_rx_packet_nonblock ();
     ed0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <rf_rx_packet_nonblock>

  if (n != NRK_OK) {
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	e9 f0       	breq	.+58     	; 0xf12 <_bmac_rx+0x84>
    if (rx_failure_cnt < 65535)
     ed8:	80 91 84 04 	lds	r24, 0x0484
     edc:	90 91 85 04 	lds	r25, 0x0485
     ee0:	a0 91 86 04 	lds	r26, 0x0486
     ee4:	b0 91 87 04 	lds	r27, 0x0487
     ee8:	8f 3f       	cpi	r24, 0xFF	; 255
     eea:	2f ef       	ldi	r18, 0xFF	; 255
     eec:	92 07       	cpc	r25, r18
     eee:	a1 05       	cpc	r26, r1
     ef0:	b1 05       	cpc	r27, r1
     ef2:	58 f4       	brcc	.+22     	; 0xf0a <_bmac_rx+0x7c>
      rx_failure_cnt++;
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	a1 1d       	adc	r26, r1
     ef8:	b1 1d       	adc	r27, r1
     efa:	80 93 84 04 	sts	0x0484, r24
     efe:	90 93 85 04 	sts	0x0485, r25
     f02:	a0 93 86 04 	sts	0x0486, r26
     f06:	b0 93 87 04 	sts	0x0487, r27
    rf_rx_off ();
     f0a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <rf_rx_off>
    return 0;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret
			} 
	}
*/


  rx_buf_empty = 0;
     f12:	10 92 82 04 	sts	0x0482, r1
  printf ("BMAC: SNR= %d [", bmac_rfRxInfo.rssi);
  for (uint8_t i = 0; i < bmac_rfRxInfo.length; i++)
    printf ("%c", bmac_rfRxInfo.pPayload[i]);
  printf ("]\r\n");
#endif
  rf_rx_off ();
     f16:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <rf_rx_off>
  return 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
}
     f1c:	08 95       	ret

00000f1e <bmac_rx_failure_count_get>:


uint16_t bmac_rx_failure_count_get ()
{
  return rx_failure_cnt;
}
     f1e:	80 91 84 04 	lds	r24, 0x0484
     f22:	90 91 85 04 	lds	r25, 0x0485
     f26:	08 95       	ret

00000f28 <bmac_rx_failure_count_reset>:

uint8_t bmac_rx_failure_count_reset ()
{
  rx_failure_cnt = 0;
     f28:	10 92 84 04 	sts	0x0484, r1
     f2c:	10 92 85 04 	sts	0x0485, r1
     f30:	10 92 86 04 	sts	0x0486, r1
     f34:	10 92 87 04 	sts	0x0487, r1
  return NRK_OK;
}
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	08 95       	ret

00000f3c <_b_pow>:

uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	58 f0       	brcs	.+22     	; 0xf56 <_b_pow+0x1a>
    return 1;
  if (in > 7)
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	08 f0       	brcs	.+2      	; 0xf46 <_b_pow+0xa>
    in = 6;                     // cap it at 128 
     f44:	86 e0       	ldi	r24, 0x06	; 6
  result = 1;
     f46:	91 e0       	ldi	r25, 0x01	; 1
  for (i = 0; i < in; i++)
     f48:	20 e0       	ldi	r18, 0x00	; 0
    result = result * 2;
     f4a:	99 0f       	add	r25, r25
  if (in <= 1)
    return 1;
  if (in > 7)
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
     f4c:	2f 5f       	subi	r18, 0xFF	; 255
     f4e:	28 13       	cpse	r18, r24
     f50:	fc cf       	rjmp	.-8      	; 0xf4a <_b_pow+0xe>
    result = result * 2;
  return result;
     f52:	89 2f       	mov	r24, r25
     f54:	08 95       	ret
uint8_t _b_pow (uint8_t in)
{
  uint8_t i;
  uint8_t result;
  if (in <= 1)
    return 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
    in = 6;                     // cap it at 128 
  result = 1;
  for (i = 0; i < in; i++)
    result = result * 2;
  return result;
}
     f58:	08 95       	ret

00000f5a <_bmac_tx>:
  rx_failure_cnt = 0;
  return NRK_OK;
}

int8_t _bmac_tx ()
{
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
  uint16_t b;

#ifdef DEBUG
  nrk_kprintf (PSTR ("_bmac_tx()\r\n"));
#endif
  if (cca_active) {
     f66:	80 91 75 04 	lds	r24, 0x0475
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <_bmac_tx+0x16>
     f6e:	43 c0       	rjmp	.+134    	; 0xff6 <_bmac_tx+0x9c>

// Add random time here to stop nodes from synchronizing with eachother
    b = _nrk_time_to_ticks (&_bmac_check_period);
     f70:	86 e7       	ldi	r24, 0x76	; 118
     f72:	94 e0       	ldi	r25, 0x04	; 4
     f74:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_nrk_time_to_ticks>
     f78:	ec 01       	movw	r28, r24
    b = b / ((rand () % 10) + 1);
     f7a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <rand>
     f7e:	6a e0       	ldi	r22, 0x0A	; 10
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <__divmodhi4>
     f86:	bc 01       	movw	r22, r24
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	ce 01       	movw	r24, r28
     f8e:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <__udivmodhi4>
     f92:	cb 01       	movw	r24, r22
//printf( "waiting %d\r\n",b );
    nrk_wait_until_ticks (b);
     f94:	0e 94 72 21 	call	0x42e4	; 0x42e4 <nrk_wait_until_ticks>
//nrk_wait_ticks(b);

    backoff_count = 1;
     f98:	c1 e0       	ldi	r28, 0x01	; 1
      nrk_wait_until_next_n_periods (backoff);
      backoff_count++;
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
      b = b / ((rand () % 10) + 1);
     f9a:	0a e0       	ldi	r16, 0x0A	; 10
     f9c:	10 e0       	ldi	r17, 0x00	; 0
        if (v == 1) { 
		break; 
	}
        nrk_event_signal (bmac_rx_pkt_signal);
#else
      v = _bmac_channel_check ();
     f9e:	0e 94 33 07 	call	0xe66	; 0xe66 <_bmac_channel_check>
     fa2:	d8 2f       	mov	r29, r24
      if (v == 1)
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	39 f1       	breq	.+78     	; 0xff6 <_bmac_tx+0x9c>
        break;
#endif
      // Channel is busy
      backoff = rand () % (_b_pow (backoff_count));
     fa8:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <rand>
     fac:	7c 01       	movw	r14, r24
     fae:	8c 2f       	mov	r24, r28
     fb0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_b_pow>
     fb4:	68 2f       	mov	r22, r24
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	c7 01       	movw	r24, r14
     fba:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <__divmodhi4>
#ifdef DEBUG
      printf ("backoff %d\r\n", backoff);
#endif
//      printf( "backoff %d\r\n",backoff );
      nrk_wait_until_next_n_periods (backoff);
     fbe:	99 27       	eor	r25, r25
     fc0:	0e 94 06 21 	call	0x420c	; 0x420c <nrk_wait_until_next_n_periods>
      backoff_count++;
     fc4:	cf 5f       	subi	r28, 0xFF	; 255
     fc6:	c7 30       	cpi	r28, 0x07	; 7
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <_bmac_tx+0x72>
     fca:	c6 e0       	ldi	r28, 0x06	; 6
      if (backoff_count > 6)
        backoff_count = 6;      // cap it at 64    
      b = _nrk_time_to_ticks (&_bmac_check_period);
     fcc:	86 e7       	ldi	r24, 0x76	; 118
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_nrk_time_to_ticks>
     fd4:	7c 01       	movw	r14, r24
      b = b / ((rand () % 10) + 1);
     fd6:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <rand>
     fda:	b8 01       	movw	r22, r16
     fdc:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <__divmodhi4>
     fe0:	bc 01       	movw	r22, r24
     fe2:	6f 5f       	subi	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	c7 01       	movw	r24, r14
     fe8:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <__udivmodhi4>
     fec:	cb 01       	movw	r24, r22
//      printf( "waiting %d\r\n",b );
      nrk_wait_until_ticks (b);
     fee:	0e 94 72 21 	call	0x42e4	; 0x42e4 <nrk_wait_until_ticks>
//      nrk_wait_ticks(b);

    }
    while (v == 0);
     ff2:	dd 23       	and	r29, r29
     ff4:	a1 f2       	breq	.-88     	; 0xf9e <_bmac_tx+0x44>
  }

  // send extended preamble
  bmac_rfTxInfo.cca = 0;
     ff6:	10 92 18 08 	sts	0x0818, r1
  bmac_rfTxInfo.ackRequest = 0;
     ffa:	10 92 19 08 	sts	0x0819, r1

  uint16_t ms = _bmac_check_period.secs * 1000;
     ffe:	20 91 76 04 	lds	r18, 0x0476
    1002:	30 91 77 04 	lds	r19, 0x0477
    1006:	88 ee       	ldi	r24, 0xE8	; 232
    1008:	93 e0       	ldi	r25, 0x03	; 3
    100a:	28 9f       	mul	r18, r24
    100c:	e0 01       	movw	r28, r0
    100e:	29 9f       	mul	r18, r25
    1010:	d0 0d       	add	r29, r0
    1012:	38 9f       	mul	r19, r24
    1014:	d0 0d       	add	r29, r0
    1016:	11 24       	eor	r1, r1
  ms += _bmac_check_period.nano_secs / 1000000;
    1018:	60 91 7a 04 	lds	r22, 0x047A
    101c:	70 91 7b 04 	lds	r23, 0x047B
    1020:	80 91 7c 04 	lds	r24, 0x047C
    1024:	90 91 7d 04 	lds	r25, 0x047D
    1028:	20 e4       	ldi	r18, 0x40	; 64
    102a:	32 e4       	ldi	r19, 0x42	; 66
    102c:	4f e0       	ldi	r20, 0x0F	; 15
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodsi4>
    1034:	c2 0f       	add	r28, r18
    1036:	d3 1f       	adc	r29, r19
  //printf( "CR ms: %u\n",ms );
  //target_t.nano_secs+=20*NANOS_PER_MS;
  rf_rx_on ();
    1038:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <rf_rx_on>
  pkt_got_ack = rf_tx_packet_repeat (&bmac_rfTxInfo, ms);
    103c:	be 01       	movw	r22, r28
    103e:	83 e1       	ldi	r24, 0x13	; 19
    1040:	98 e0       	ldi	r25, 0x08	; 8
    1042:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <rf_tx_packet_repeat>
    1046:	80 93 80 04 	sts	0x0480, r24

  // send packet
  // pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
  rf_rx_off ();                 // Just in case auto-ack left radio on
    104a:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <rf_rx_off>
  tx_data_ready = 0;
    104e:	10 92 83 04 	sts	0x0483, r1
  nrk_event_signal (bmac_tx_pkt_done_signal);
    1052:	80 91 2d 0b 	lds	r24, 0x0B2D
    1056:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <nrk_event_signal>
  return NRK_OK;
}
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <bmac_nw_task>:
  int8_t v, i;
  int8_t e;
  uint8_t backoff;
  nrk_sig_mask_t event;

  while (bmac_started () == 0)
    106a:	80 91 81 04 	lds	r24, 0x0481
    106e:	81 11       	cpse	r24, r1
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <bmac_nw_task+0xe>
    nrk_wait_until_next_period ();
    1072:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
    1076:	f9 cf       	rjmp	.-14     	; 0x106a <bmac_nw_task>

//register the signal after bmac_init has been called
  v = nrk_signal_register (bmac_enable_signal);
    1078:	80 91 92 07 	lds	r24, 0x0792
    107c:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
  if (v == NRK_ERROR)
    1080:	8f 3f       	cpi	r24, 0xFF	; 255
    1082:	21 f4       	brne	.+8      	; 0x108c <bmac_nw_task+0x22>
    nrk_kprintf (PSTR ("Failed to register signal\r\n"));
    1084:	8a e2       	ldi	r24, 0x2A	; 42
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
        event = nrk_event_wait (SIG (bmac_enable_signal));
    108c:	c1 2c       	mov	r12, r1
    108e:	d1 2c       	mov	r13, r1
    1090:	76 01       	movw	r14, r12
    1092:	c3 94       	inc	r12
#ifdef NRK_SW_WDT
#ifdef BMAC_SW_WDT_ID
    nrk_sw_wdt_update (BMAC_SW_WDT_ID);
#endif
#endif
    rf_power_up ();
    1094:	0e 94 67 0d 	call	0x1ace	; 0x1ace <rf_power_up>
    if (is_enabled) {
    1098:	80 91 7e 04 	lds	r24, 0x047E
    109c:	88 23       	and	r24, r24
    109e:	69 f1       	breq	.+90     	; 0x10fa <bmac_nw_task+0x90>
	 if (_bmac_rx () == 1) e = nrk_event_signal (bmac_rx_pkt_signal);
      }
      else
      e = nrk_event_signal (bmac_rx_pkt_signal);
#else
      if (rx_buf_empty == 1)
    10a0:	80 91 82 04 	lds	r24, 0x0482
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	41 f4       	brne	.+16     	; 0x10b8 <bmac_nw_task+0x4e>
        v = _bmac_channel_check ();
    10a8:	0e 94 33 07 	call	0xe66	; 0xe66 <_bmac_channel_check>
      else
        e = nrk_event_signal (bmac_rx_pkt_signal);
      // bmac_channel check turns on radio, don't turn off if
      // data is coming.

      if (v == 0) {
    10ac:	81 11       	cpse	r24, r1
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <bmac_nw_task+0x56>
        if (_bmac_rx () == 1) {
    10b0:	0e 94 47 07 	call	0xe8e	; 0xe8e <_bmac_rx>
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	21 f4       	brne	.+8      	; 0x10c0 <bmac_nw_task+0x56>
          e = nrk_event_signal (bmac_rx_pkt_signal);
    10b8:	80 91 a9 09 	lds	r24, 0x09A9
    10bc:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <nrk_event_signal>
        //else nrk_kprintf( PSTR("Pkt failed, buf could be corrupt\r\n" ));

      }

#endif
      if (tx_data_ready == 1) {
    10c0:	80 91 83 04 	lds	r24, 0x0483
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	11 f4       	brne	.+4      	; 0x10cc <bmac_nw_task+0x62>
        _bmac_tx ();
    10c8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_bmac_tx>
      }
      rf_rx_off ();
    10cc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <rf_rx_off>
      rf_power_down ();
    10d0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <rf_power_down>

      //do {
      nrk_wait (_bmac_check_period);
    10d4:	20 91 76 04 	lds	r18, 0x0476
    10d8:	30 91 77 04 	lds	r19, 0x0477
    10dc:	40 91 78 04 	lds	r20, 0x0478
    10e0:	50 91 79 04 	lds	r21, 0x0479
    10e4:	60 91 7a 04 	lds	r22, 0x047A
    10e8:	70 91 7b 04 	lds	r23, 0x047B
    10ec:	80 91 7c 04 	lds	r24, 0x047C
    10f0:	90 91 7d 04 	lds	r25, 0x047D
    10f4:	0e 94 c7 21 	call	0x438e	; 0x438e <nrk_wait>
    10f8:	cd cf       	rjmp	.-102    	; 0x1094 <bmac_nw_task+0x2a>
      //} while(rx_buf_empty!=1);
    }
    else {
      event = 0;
      do {
        v = nrk_signal_register (bmac_enable_signal);
    10fa:	80 91 92 07 	lds	r24, 0x0792
    10fe:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
        event = nrk_event_wait (SIG (bmac_enable_signal));
    1102:	c7 01       	movw	r24, r14
    1104:	b6 01       	movw	r22, r12
    1106:	00 90 92 07 	lds	r0, 0x0792
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <bmac_nw_task+0xaa>
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	88 1f       	adc	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	d2 f7       	brpl	.-12     	; 0x110c <bmac_nw_task+0xa2>
    1118:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nrk_event_wait>
      }
      while ((event & SIG (bmac_enable_signal)) == 0);
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	00 90 92 07 	lds	r0, 0x0792
    1124:	04 c0       	rjmp	.+8      	; 0x112e <bmac_nw_task+0xc4>
    1126:	b6 95       	lsr	r27
    1128:	a7 95       	ror	r26
    112a:	97 95       	ror	r25
    112c:	87 95       	ror	r24
    112e:	0a 94       	dec	r0
    1130:	d2 f7       	brpl	.-12     	; 0x1126 <bmac_nw_task+0xbc>
    1132:	80 ff       	sbrs	r24, 0
    1134:	e2 cf       	rjmp	.-60     	; 0x10fa <bmac_nw_task+0x90>
    1136:	ae cf       	rjmp	.-164    	; 0x1094 <bmac_nw_task+0x2a>

00001138 <bmac_task_config>:
}


void bmac_task_config ()
{
  nrk_task_set_entry_function (&bmac_task, bmac_nw_task);
    1138:	65 e3       	ldi	r22, 0x35	; 53
    113a:	78 e0       	ldi	r23, 0x08	; 8
    113c:	88 e0       	ldi	r24, 0x08	; 8
    113e:	95 e0       	ldi	r25, 0x05	; 5
    1140:	0e 94 c5 2b 	call	0x578a	; 0x578a <nrk_task_set_entry_function>
  nrk_task_set_stk (&bmac_task, bmac_task_stack, BMAC_STACKSIZE);
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	68 e8       	ldi	r22, 0x88	; 136
    114a:	74 e0       	ldi	r23, 0x04	; 4
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	95 e0       	ldi	r25, 0x05	; 5
    1150:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_task_set_stk>
  bmac_task.prio = BMAC_TASK_PRIORITY;
    1154:	e8 e0       	ldi	r30, 0x08	; 8
    1156:	f5 e0       	ldi	r31, 0x05	; 5
    1158:	84 e1       	ldi	r24, 0x14	; 20
    115a:	80 87       	std	Z+8, r24	; 0x08
  bmac_task.FirstActivation = TRUE;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	87 83       	std	Z+7, r24	; 0x07
  bmac_task.Type = BASIC_TASK;
    1160:	81 87       	std	Z+9, r24	; 0x09
  bmac_task.SchType = PREEMPTIVE;
    1162:	82 87       	std	Z+10, r24	; 0x0a
  bmac_task.period.secs = 0;
    1164:	13 86       	std	Z+11, r1	; 0x0b
    1166:	14 86       	std	Z+12, r1	; 0x0c
    1168:	15 86       	std	Z+13, r1	; 0x0d
    116a:	16 86       	std	Z+14, r1	; 0x0e
  bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	9d e2       	ldi	r25, 0x2D	; 45
    1170:	a1 e3       	ldi	r26, 0x31	; 49
    1172:	b1 e0       	ldi	r27, 0x01	; 1
    1174:	87 87       	std	Z+15, r24	; 0x0f
    1176:	90 8b       	std	Z+16, r25	; 0x10
    1178:	a1 8b       	std	Z+17, r26	; 0x11
    117a:	b2 8b       	std	Z+18, r27	; 0x12
  bmac_task.cpu_reserve.secs = 0;       // bmac reserve , 0 to disable
    117c:	13 8a       	std	Z+19, r1	; 0x13
    117e:	14 8a       	std	Z+20, r1	; 0x14
    1180:	15 8a       	std	Z+21, r1	; 0x15
    1182:	16 8a       	std	Z+22, r1	; 0x16
  bmac_task.cpu_reserve.nano_secs = 0;
    1184:	17 8a       	std	Z+23, r1	; 0x17
    1186:	10 8e       	std	Z+24, r1	; 0x18
    1188:	11 8e       	std	Z+25, r1	; 0x19
    118a:	12 8e       	std	Z+26, r1	; 0x1a
  bmac_task.offset.secs = 0;
    118c:	13 8e       	std	Z+27, r1	; 0x1b
    118e:	14 8e       	std	Z+28, r1	; 0x1c
    1190:	15 8e       	std	Z+29, r1	; 0x1d
    1192:	16 8e       	std	Z+30, r1	; 0x1e
  bmac_task.offset.nano_secs = 0;
    1194:	17 8e       	std	Z+31, r1	; 0x1f
    1196:	10 a2       	std	Z+32, r1	; 0x20
    1198:	11 a2       	std	Z+33, r1	; 0x21
    119a:	12 a2       	std	Z+34, r1	; 0x22
#ifdef DEBUG
  printf ("bmac activate\r\n");
#endif
  nrk_activate_task (&bmac_task);
    119c:	cf 01       	movw	r24, r30
    119e:	0c 94 39 20 	jmp	0x4072	; 0x4072 <nrk_activate_task>

000011a2 <assemble_packet>:
 */
 
#include <assembler.h>

void assemble_packet(uint8_t *tx_buf, packet *tx)
{
    11a2:	fb 01       	movw	r30, r22
    switch(tx->type)
    11a4:	20 81       	ld	r18, Z
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	39 f1       	breq	.+78     	; 0x11f8 <assemble_packet+0x56>
    11aa:	23 30       	cpi	r18, 0x03	; 3
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <assemble_packet+0xe>
    11ae:	4e c0       	rjmp	.+156    	; 0x124c <assemble_packet+0xaa>
    11b0:	21 30       	cpi	r18, 0x01	; 1
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <assemble_packet+0x14>
    11b4:	6f c0       	rjmp	.+222    	; 0x1294 <assemble_packet+0xf2>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            sprintf (tx_buf, "[%d][%d][%d][%d][%d]", tx->type, tx->source_id, tx->seq_num, 
    11b6:	36 81       	ldd	r19, Z+6	; 0x06
    11b8:	3f 93       	push	r19
    11ba:	35 81       	ldd	r19, Z+5	; 0x05
    11bc:	3f 93       	push	r19
    11be:	34 81       	ldd	r19, Z+4	; 0x04
    11c0:	1f 92       	push	r1
    11c2:	3f 93       	push	r19
    11c4:	33 81       	ldd	r19, Z+3	; 0x03
    11c6:	3f 93       	push	r19
    11c8:	32 81       	ldd	r19, Z+2	; 0x02
    11ca:	3f 93       	push	r19
    11cc:	31 81       	ldd	r19, Z+1	; 0x01
    11ce:	1f 92       	push	r1
    11d0:	3f 93       	push	r19
    11d2:	1f 92       	push	r1
    11d4:	2f 93       	push	r18
    11d6:	23 e8       	ldi	r18, 0x83	; 131
    11d8:	32 e0       	ldi	r19, 0x02	; 2
    11da:	3f 93       	push	r19
    11dc:	2f 93       	push	r18
    11de:	9f 93       	push	r25
    11e0:	8f 93       	push	r24
    11e2:	0e 94 67 30 	call	0x60ce	; 0x60ce <sprintf>
            tx->num_hops, tx->light_value);
            break;
    11e6:	8d b7       	in	r24, 0x3d	; 61
    11e8:	9e b7       	in	r25, 0x3e	; 62
    11ea:	0e 96       	adiw	r24, 0x0e	; 14
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	9e bf       	out	0x3e, r25	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	8d bf       	out	0x3d, r24	; 61
    11f6:	08 95       	ret
        }
        
        case MSG_NODE_NEIGHBORS:
        {
          sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d,%d,%d]", tx->type, tx->source_id, tx->seq_num, 
    11f8:	33 85       	ldd	r19, Z+11	; 0x0b
    11fa:	1f 92       	push	r1
    11fc:	3f 93       	push	r19
    11fe:	32 85       	ldd	r19, Z+10	; 0x0a
    1200:	1f 92       	push	r1
    1202:	3f 93       	push	r19
    1204:	31 85       	ldd	r19, Z+9	; 0x09
    1206:	1f 92       	push	r1
    1208:	3f 93       	push	r19
    120a:	36 81       	ldd	r19, Z+6	; 0x06
    120c:	3f 93       	push	r19
    120e:	35 81       	ldd	r19, Z+5	; 0x05
    1210:	3f 93       	push	r19
    1212:	34 81       	ldd	r19, Z+4	; 0x04
    1214:	1f 92       	push	r1
    1216:	3f 93       	push	r19
    1218:	33 81       	ldd	r19, Z+3	; 0x03
    121a:	3f 93       	push	r19
    121c:	32 81       	ldd	r19, Z+2	; 0x02
    121e:	3f 93       	push	r19
    1220:	31 81       	ldd	r19, Z+1	; 0x01
    1222:	1f 92       	push	r1
    1224:	3f 93       	push	r19
    1226:	1f 92       	push	r1
    1228:	2f 93       	push	r18
    122a:	20 e6       	ldi	r18, 0x60	; 96
    122c:	32 e0       	ldi	r19, 0x02	; 2
    122e:	3f 93       	push	r19
    1230:	2f 93       	push	r18
    1232:	9f 93       	push	r25
    1234:	8f 93       	push	r24
    1236:	0e 94 67 30 	call	0x60ce	; 0x60ce <sprintf>
          tx->num_hops, tx->light_value, tx->neighbor_table.neighbors[0].id,  tx->neighbor_table.neighbors[1].id, tx->neighbor_table.neighbors[2].id);
            break;
    123a:	8d b7       	in	r24, 0x3d	; 61
    123c:	9e b7       	in	r25, 0x3e	; 62
    123e:	44 96       	adiw	r24, 0x14	; 20
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	9e bf       	out	0x3e, r25	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	8d bf       	out	0x3d, r24	; 61
    124a:	08 95       	ret
        }
        
        case MSG_GATEWAY:
        {
          sprintf (tx_buf, "[%d][%d][%d][%d][%d][%d]", tx->type, tx->source_id, tx->seq_num, 
    124c:	37 85       	ldd	r19, Z+15	; 0x0f
    124e:	3f 93       	push	r19
    1250:	36 85       	ldd	r19, Z+14	; 0x0e
    1252:	3f 93       	push	r19
    1254:	35 85       	ldd	r19, Z+13	; 0x0d
    1256:	3f 93       	push	r19
    1258:	34 85       	ldd	r19, Z+12	; 0x0c
    125a:	3f 93       	push	r19
    125c:	34 81       	ldd	r19, Z+4	; 0x04
    125e:	1f 92       	push	r1
    1260:	3f 93       	push	r19
    1262:	33 81       	ldd	r19, Z+3	; 0x03
    1264:	3f 93       	push	r19
    1266:	32 81       	ldd	r19, Z+2	; 0x02
    1268:	3f 93       	push	r19
    126a:	31 81       	ldd	r19, Z+1	; 0x01
    126c:	1f 92       	push	r1
    126e:	3f 93       	push	r19
    1270:	1f 92       	push	r1
    1272:	2f 93       	push	r18
    1274:	2f e7       	ldi	r18, 0x7F	; 127
    1276:	32 e0       	ldi	r19, 0x02	; 2
    1278:	3f 93       	push	r19
    127a:	2f 93       	push	r18
    127c:	9f 93       	push	r25
    127e:	8f 93       	push	r24
    1280:	0e 94 67 30 	call	0x60ce	; 0x60ce <sprintf>
          tx->num_hops, tx->sensor_sample_rate, tx->neighbor_update_rate);
            break;
    1284:	8d b7       	in	r24, 0x3d	; 61
    1286:	9e b7       	in	r25, 0x3e	; 62
    1288:	40 96       	adiw	r24, 0x10	; 16
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	9e bf       	out	0x3e, r25	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	8d bf       	out	0x3d, r24	; 61
    1294:	08 95       	ret

00001296 <in_light_pool>:
 * @param lp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_light_pool(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    1296:	fc 01       	movw	r30, r24
    1298:	21 91       	ld	r18, Z+
    129a:	cf 01       	movw	r24, r30
    129c:	3e 2f       	mov	r19, r30
    129e:	38 1b       	sub	r19, r24
    12a0:	32 17       	cp	r19, r18
    12a2:	28 f4       	brcc	.+10     	; 0x12ae <in_light_pool+0x18>
        if(lp->node_id[i] == node_address) {
    12a4:	31 91       	ld	r19, Z+
    12a6:	36 13       	cpse	r19, r22
    12a8:	f9 cf       	rjmp	.-14     	; 0x129c <in_light_pool+0x6>
            return 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    12ac:	08 95       	ret
    for(uint8_t i = 0; i < lp->size; i++) {
        if(lp->node_id[i] == node_address) {
            return 1;
        }
    }
    return -1;
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	08 95       	ret

000012b2 <get_light_pool_index>:
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    12b2:	fc 01       	movw	r30, r24
    12b4:	81 91       	ld	r24, Z+
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	98 17       	cp	r25, r24
    12ba:	39 f0       	breq	.+14     	; 0x12ca <get_light_pool_index+0x18>
        if(lp->node_id[i] == node_address) {
    12bc:	21 91       	ld	r18, Z+
    12be:	26 13       	cpse	r18, r22
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <get_light_pool_index+0x14>
            return i;
    12c2:	89 2f       	mov	r24, r25
    12c4:	08 95       	ret
 * @param lp - light pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_light_pool_index(light_pool_t *lp, uint8_t node_address) {
    for(uint8_t i = 0; i < lp->size; i++) {
    12c6:	9f 5f       	subi	r25, 0xFF	; 255
    12c8:	f7 cf       	rjmp	.-18     	; 0x12b8 <get_light_pool_index+0x6>
        if(lp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
}
    12cc:	08 95       	ret

000012ce <add_to_light_pool>:
 * @param lp - light pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param light_value - light value of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    if((lp->size < MAX_POOL) && (in_light_pool(lp, node_address) == -1)) {
    12da:	fc 01       	movw	r30, r24
    12dc:	c0 81       	ld	r28, Z
    12de:	c8 30       	cpi	r28, 0x08	; 8
    12e0:	d8 f4       	brcc	.+54     	; 0x1318 <add_to_light_pool+0x4a>
    12e2:	7a 01       	movw	r14, r20
    12e4:	d6 2f       	mov	r29, r22
    12e6:	8c 01       	movw	r16, r24
    12e8:	0e 94 4b 09 	call	0x1296	; 0x1296 <in_light_pool>
    12ec:	8f 3f       	cpi	r24, 0xFF	; 255
    12ee:	a1 f4       	brne	.+40     	; 0x1318 <add_to_light_pool+0x4a>
        uint8_t index = lp->size;
        lp->size++;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	8c 0f       	add	r24, r28
    12f4:	f8 01       	movw	r30, r16
    12f6:	80 83       	st	Z, r24
        lp->node_id[index] = node_address;
    12f8:	2c 2f       	mov	r18, r28
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	e2 0f       	add	r30, r18
    12fe:	f3 1f       	adc	r31, r19
    1300:	d1 83       	std	Z+1, r29	; 0x01
        lp->light_values[index] = light_value;
    1302:	2e 5f       	subi	r18, 0xFE	; 254
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	f8 01       	movw	r30, r16
    130c:	e2 0f       	add	r30, r18
    130e:	f3 1f       	adc	r31, r19
    1310:	f1 82       	std	Z+1, r15	; 0x01
    1312:	e0 82       	st	Z, r14
        return 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	01 c0       	rjmp	.+2      	; 0x131a <add_to_light_pool+0x4c>
    }
    return -1;
    1318:	8f ef       	ldi	r24, 0xFF	; 255
}
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	ff 90       	pop	r15
    1324:	ef 90       	pop	r14
    1326:	08 95       	ret

00001328 <update_light_pool>:
 * @param lp - light pool to be updated
 * @param node_address - node whose light value needs updating
 * @param light_value - new light value of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_light_pool(light_pool_t *lp, uint8_t node_address, uint16_t light_value) {
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	ec 01       	movw	r28, r24
    1334:	16 2f       	mov	r17, r22
    1336:	7a 01       	movw	r14, r20
    int8_t in_lp, index;
    
    in_lp = in_light_pool(lp, node_address);
    1338:	0e 94 4b 09 	call	0x1296	; 0x1296 <in_light_pool>
    if(in_lp == -1) {
    133c:	8f 3f       	cpi	r24, 0xFF	; 255
    133e:	31 f4       	brne	.+12     	; 0x134c <update_light_pool+0x24>
        add_to_light_pool(lp, node_address, light_value);
    1340:	a7 01       	movw	r20, r14
    1342:	61 2f       	mov	r22, r17
    1344:	ce 01       	movw	r24, r28
    1346:	0e 94 67 09 	call	0x12ce	; 0x12ce <add_to_light_pool>
    134a:	0d c0       	rjmp	.+26     	; 0x1366 <update_light_pool+0x3e>
        return 1;
    } else {
        index = get_light_pool_index(lp, node_address);
    134c:	61 2f       	mov	r22, r17
    134e:	ce 01       	movw	r24, r28
    1350:	0e 94 59 09 	call	0x12b2	; 0x12b2 <get_light_pool_index>
        if(index >= 0) {
    1354:	87 fd       	sbrc	r24, 7
    1356:	09 c0       	rjmp	.+18     	; 0x136a <update_light_pool+0x42>
            lp->light_values[index] = light_value;
    1358:	92 e0       	ldi	r25, 0x02	; 2
    135a:	89 02       	muls	r24, r25
    135c:	c0 0d       	add	r28, r0
    135e:	d1 1d       	adc	r29, r1
    1360:	11 24       	eor	r1, r1
    1362:	fd 82       	std	Y+5, r15	; 0x05
    1364:	ec 82       	std	Y+4, r14	; 0x04
            return 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	01 c0       	rjmp	.+2      	; 0x136c <update_light_pool+0x44>
        }        
    }

    return -1;
    136a:	8f ef       	ldi	r24, 0xFF	; 255
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	08 95       	ret

00001378 <print_light_pool>:

void print_light_pool(light_pool_t *lp) {
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	8c 01       	movw	r16, r24
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    1384:	89 e0       	ldi	r24, 0x09	; 9
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
    for(uint8_t k = 0; k < lp->size; k++) {
    138c:	c0 e0       	ldi	r28, 0x00	; 0
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    138e:	98 e9       	ldi	r25, 0x98	; 152
    1390:	e9 2e       	mov	r14, r25
    1392:	92 e0       	ldi	r25, 0x02	; 2
    1394:	f9 2e       	mov	r15, r25
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    1396:	f8 01       	movw	r30, r16
    1398:	80 81       	ld	r24, Z
    139a:	c8 17       	cp	r28, r24
    139c:	f0 f4       	brcc	.+60     	; 0x13da <print_light_pool+0x62>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    139e:	2c 2f       	mov	r18, r28
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	f9 01       	movw	r30, r18
    13a4:	32 96       	adiw	r30, 0x02	; 2
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	e0 0f       	add	r30, r16
    13ac:	f1 1f       	adc	r31, r17
    13ae:	81 81       	ldd	r24, Z+1	; 0x01
    13b0:	8f 93       	push	r24
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 93       	push	r24
    13b6:	f8 01       	movw	r30, r16
    13b8:	e2 0f       	add	r30, r18
    13ba:	f3 1f       	adc	r31, r19
    13bc:	81 81       	ldd	r24, Z+1	; 0x01
    13be:	1f 92       	push	r1
    13c0:	8f 93       	push	r24
    13c2:	ff 92       	push	r15
    13c4:	ef 92       	push	r14
    13c6:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    return -1;
}

void print_light_pool(light_pool_t *lp) {
    nrk_kprintf(PSTR("\r\nCurrent Light Values:\r\n"));
    for(uint8_t k = 0; k < lp->size; k++) {
    13ca:	cf 5f       	subi	r28, 0xFF	; 255
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	de cf       	rjmp	.-68     	; 0x1396 <print_light_pool+0x1e>
      printf("  -> id: %d, value: %d\r\n", lp->node_id[k], lp->light_values[k]);
    }
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	08 95       	ret

000013e6 <init_neighbor_table>:

/*** NEIGHBOR TABLE OPERATIONS ***/
/**
 * init_neighbor_table
 */
void init_neighbor_table(neighbor_table_t *nt) {
    13e6:	fc 01       	movw	r30, r24
    nt->size = 0;
    13e8:	10 82       	st	Z, r1

    // need to actually force id values to 0 because when we send our the neighbor packet...
    // we send all 4 items. Therefore an old value can still be in [3] but the size could be 2.
    for(uint8_t i = 0; i < MAX_NEIGHBOR_TABLE; i++)
    {
        nt->neighbors[i].id = 0;
    13ea:	12 82       	std	Z+2, r1	; 0x02
    13ec:	13 82       	std	Z+3, r1	; 0x03
    13ee:	14 82       	std	Z+4, r1	; 0x04
    13f0:	08 95       	ret

000013f2 <in_neighbor_table>:
 * @param nt - neighbor table to search
 * @param node_address - node to search for
 * @returns '1' if node is found, '-1' otherwise
 */
int8_t in_neighbor_table(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 81       	ld	r18, Z
    13f6:	02 96       	adiw	r24, 0x02	; 2
    13f8:	fc 01       	movw	r30, r24
    13fa:	3e 2f       	mov	r19, r30
    13fc:	38 1b       	sub	r19, r24
    13fe:	32 17       	cp	r19, r18
    1400:	28 f4       	brcc	.+10     	; 0x140c <in_neighbor_table+0x1a>
        if(nt->neighbors[i].id == node_address) {
    1402:	31 91       	ld	r19, Z+
    1404:	36 13       	cpse	r19, r22
    1406:	f9 cf       	rjmp	.-14     	; 0x13fa <in_neighbor_table+0x8>
            return 1;
    1408:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    140a:	08 95       	ret
    for(uint8_t i = 0; i < nt->size; i++) {
        if(nt->neighbors[i].id == node_address) {
            return 1;
        }
    }
    return -1;
    140c:	8f ef       	ldi	r24, 0xFF	; 255
    140e:	08 95       	ret

00001410 <add_neighbor>:
}

void add_neighbor(neighbor_table_t *nt, neighbor_t new_neighbor) {
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	ec 01       	movw	r28, r24
    1418:	16 2f       	mov	r17, r22
    uint8_t in_nt = in_neighbor_table(nt, new_neighbor.id);
    printf("neighbor table size %d\r\n", nt->size);
    141a:	88 81       	ld	r24, Y
    141c:	1f 92       	push	r1
    141e:	8f 93       	push	r24
    1420:	81 eb       	ldi	r24, 0xB1	; 177
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	9f 93       	push	r25
    1426:	8f 93       	push	r24
    1428:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    if((nt->size < MAX_NEIGHBOR_TABLE) && (in_nt != -1))
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	88 81       	ld	r24, Y
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	a0 f4       	brcc	.+40     	; 0x1462 <add_neighbor+0x52>
    {
        printf("new neighbor %d\r\n", new_neighbor.id);
    143a:	1f 92       	push	r1
    143c:	1f 93       	push	r17
    143e:	8a ec       	ldi	r24, 0xCA	; 202
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
        nt->neighbors[nt->size] = new_neighbor;
    144a:	88 81       	ld	r24, Y
    144c:	fe 01       	movw	r30, r28
    144e:	e8 0f       	add	r30, r24
    1450:	f1 1d       	adc	r31, r1
    1452:	12 83       	std	Z+2, r17	; 0x02
        nt->size++;
    1454:	88 81       	ld	r24, Y
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	88 83       	st	Y, r24
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    }
}
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	08 95       	ret

0000146a <get_neighbor_table_index>:
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    146a:	fc 01       	movw	r30, r24
    146c:	20 81       	ld	r18, Z
    146e:	32 96       	adiw	r30, 0x02	; 2
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	82 17       	cp	r24, r18
    1474:	29 f0       	breq	.+10     	; 0x1480 <get_neighbor_table_index+0x16>
        if(nt->neighbors[i].id == node_address) {
    1476:	91 91       	ld	r25, Z+
    1478:	96 17       	cp	r25, r22
    147a:	19 f0       	breq	.+6      	; 0x1482 <get_neighbor_table_index+0x18>
 * @param nt - neighbor table to search
 * @param node_address - node address to be searched for
 * @returns index of neighbor if found, '-1' otherwise
 */
int8_t get_neighbor_table_index(neighbor_table_t *nt, uint8_t node_address) {
    for(uint8_t i = 0; i < nt->size; i++) {
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	f9 cf       	rjmp	.-14     	; 0x1472 <get_neighbor_table_index+0x8>
        if(nt->neighbors[i].id == node_address) {
            return i;
        }
    }
    return -1;
    1480:	8f ef       	ldi	r24, 0xFF	; 255
}
    1482:	08 95       	ret

00001484 <print_neighbor_table>:
}*

/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ec 01       	movw	r28, r24
    printf("[");
    1498:	8b e5       	ldi	r24, 0x5B	; 91
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 31 30 	call	0x6062	; 0x6062 <putchar>
    for (uint8_t i=0; i < nt->size; i++) {
    14a0:	d1 2c       	mov	r13, r1
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
    14a2:	0c ed       	ldi	r16, 0xDC	; 220
    14a4:	12 e0       	ldi	r17, 0x02	; 2
        if (i < (nt->size-1))
            printf(", ");
    14a6:	8f ed       	ldi	r24, 0xDF	; 223
    14a8:	e8 2e       	mov	r14, r24
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	f8 2e       	mov	r15, r24
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    14ae:	88 81       	ld	r24, Y
    14b0:	d8 16       	cp	r13, r24
    14b2:	f8 f4       	brcc	.+62     	; 0x14f2 <print_neighbor_table+0x6e>
        uint8_t node_id = nt->neighbors[i].id;
    14b4:	ad 2c       	mov	r10, r13
    14b6:	b1 2c       	mov	r11, r1
    14b8:	fe 01       	movw	r30, r28
    14ba:	ea 0d       	add	r30, r10
    14bc:	fb 1d       	adc	r31, r11
        printf("%d", node_id);
    14be:	82 81       	ldd	r24, Z+2	; 0x02
    14c0:	1f 92       	push	r1
    14c2:	8f 93       	push	r24
    14c4:	1f 93       	push	r17
    14c6:	0f 93       	push	r16
    14c8:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
        if (i < (nt->size-1))
    14cc:	28 81       	ld	r18, Y
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	21 50       	subi	r18, 0x01	; 1
    14d2:	31 09       	sbc	r19, r1
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	a2 16       	cp	r10, r18
    14de:	b3 06       	cpc	r11, r19
    14e0:	34 f4       	brge	.+12     	; 0x14ee <print_neighbor_table+0x6a>
            printf(", ");
    14e2:	ff 92       	push	r15
    14e4:	ef 92       	push	r14
    14e6:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
/**
 * Print a neighbor table:
 */
void print_neighbor_table(neighbor_table_t *nt) {
    printf("[");
    for (uint8_t i=0; i < nt->size; i++) {
    14ee:	d3 94       	inc	r13
    14f0:	de cf       	rjmp	.-68     	; 0x14ae <print_neighbor_table+0x2a>
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    14f2:	8f eb       	ldi	r24, 0xBF	; 191
    14f4:	93 e0       	ldi	r25, 0x03	; 3
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	df 90       	pop	r13
    1504:	bf 90       	pop	r11
    1506:	af 90       	pop	r10
        uint8_t node_id = nt->neighbors[i].id;
        printf("%d", node_id);
        if (i < (nt->size-1))
            printf(", ");
    }
    printf("]\r\n");
    1508:	0c 94 37 30 	jmp	0x606e	; 0x606e <puts>

0000150c <in_neighbor_graph>:
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    150c:	fc 01       	movw	r30, r24
    150e:	30 81       	ld	r19, Z
    1510:	02 96       	adiw	r24, 0x02	; 2
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	23 17       	cp	r18, r19
    1516:	41 f0       	breq	.+16     	; 0x1528 <in_neighbor_graph+0x1c>
    1518:	05 96       	adiw	r24, 0x05	; 5
    151a:	fc 01       	movw	r30, r24
    151c:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    151e:	40 81       	ld	r20, Z
    1520:	46 17       	cp	r20, r22
    1522:	21 f0       	breq	.+8      	; 0x152c <in_neighbor_graph+0x20>
 * @param ng - neighbor graph to be searched
 * @param node_address - node address to be searched for
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
    1524:	2f 5f       	subi	r18, 0xFF	; 255
    1526:	f6 cf       	rjmp	.-20     	; 0x1514 <in_neighbor_graph+0x8>
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
        }
    }
    return -1;
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	08 95       	ret
 * @returns '1' if the node is found, '-1' otherwise
 */
int8_t in_neighbor_graph(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i < ng->size; i++) {
        if(ng->neighbor_tables[i].origin == node_address) {
            return 1;
    152c:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return -1;
}
    152e:	08 95       	ret

00001530 <get_neighbor_graph_index>:
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    1530:	fc 01       	movw	r30, r24
    1532:	40 81       	ld	r20, Z
    1534:	9c 01       	movw	r18, r24
    1536:	2e 5f       	subi	r18, 0xFE	; 254
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	84 17       	cp	r24, r20
    153e:	49 f0       	breq	.+18     	; 0x1552 <get_neighbor_graph_index+0x22>
    1540:	2b 5f       	subi	r18, 0xFB	; 251
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	f9 01       	movw	r30, r18
    1546:	35 97       	sbiw	r30, 0x05	; 5
        if(ng->neighbor_tables[i].origin == node_address) {
    1548:	90 81       	ld	r25, Z
    154a:	96 17       	cp	r25, r22
    154c:	19 f0       	breq	.+6      	; 0x1554 <get_neighbor_graph_index+0x24>
 * @param ng - neighbor graph to be searched
 * @param node_adress - node to be searched for
 * @returns index of node if found, '-1' otherwise
 */
int8_t get_neighbor_graph_index(neighbor_graph_t *ng, uint8_t node_address) {
    for(uint8_t i = 0; i< ng->size; i++) {
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	f5 cf       	rjmp	.-22     	; 0x153c <get_neighbor_graph_index+0xc>
        if(ng->neighbor_tables[i].origin == node_address) {
            return i;
        }
    }
    return -1;
    1552:	8f ef       	ldi	r24, 0xFF	; 255
}
    1554:	08 95       	ret

00001556 <add_to_neighbor_graph>:
 *
 * @param ng - neighbor graph to which to add
 * @param new_table - new neighbor table to add to the neighbor graph
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	dc 01       	movw	r26, r24
    155c:	fb 01       	movw	r30, r22
    //printf("     add %d to neighbor_graph\r\n", nt->origin);
    if((ng->size < MAX_GRAPH)) {
    155e:	8c 91       	ld	r24, X
    1560:	88 30       	cpi	r24, 0x08	; 8
    1562:	00 f5       	brcc	.+64     	; 0x15a4 <add_to_neighbor_graph+0x4e>
        uint8_t index = ng->size;
        ng->size++;
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	98 0f       	add	r25, r24
    1568:	9c 93       	st	X, r25
        ng->neighbor_tables[index].size = nt->size;
    156a:	90 81       	ld	r25, Z
    156c:	45 e0       	ldi	r20, 0x05	; 5
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	ed 01       	movw	r28, r26
    1574:	48 9f       	mul	r20, r24
    1576:	c0 0d       	add	r28, r0
    1578:	d1 1d       	adc	r29, r1
    157a:	11 24       	eor	r1, r1
    157c:	99 83       	std	Y+1, r25	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	8a 83       	std	Y+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	8b 83       	std	Y+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    1586:	83 81       	ldd	r24, Z+3	; 0x03
    1588:	8c 83       	std	Y+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    158a:	54 81       	ldd	r21, Z+4	; 0x04
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	42 9f       	mul	r20, r18
    1592:	c0 01       	movw	r24, r0
    1594:	43 9f       	mul	r20, r19
    1596:	90 0d       	add	r25, r0
    1598:	11 24       	eor	r1, r1
    159a:	a8 0f       	add	r26, r24
    159c:	b9 1f       	adc	r27, r25
    159e:	5c 93       	st	X, r21
        return 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <add_to_neighbor_graph+0x50>
    }
    return -1;
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <update_neighbor_graph>:
 * 
 * @param ng - neighbor graph to update
 * @param nt - neighbor table to update
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_neighbor_graph(neighbor_graph_t *ng, neighbor_table_t *nt) {
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	8c 01       	movw	r16, r24
    15b8:	eb 01       	movw	r28, r22
    int8_t in_ng, index;
    
    in_ng = in_neighbor_graph(ng, nt->origin);
    15ba:	f9 80       	ldd	r15, Y+1	; 0x01
    15bc:	6f 2d       	mov	r22, r15
    15be:	0e 94 86 0a 	call	0x150c	; 0x150c <in_neighbor_graph>
    if(in_ng == -1) {
    15c2:	8f 3f       	cpi	r24, 0xFF	; 255
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <update_neighbor_graph+0x24>
        add_to_neighbor_graph(ng, nt);
    15c6:	be 01       	movw	r22, r28
    15c8:	c8 01       	movw	r24, r16
    15ca:	0e 94 ab 0a 	call	0x1556	; 0x1556 <add_to_neighbor_graph>
        return 1;
    15ce:	24 c0       	rjmp	.+72     	; 0x1618 <update_neighbor_graph+0x6c>
    } else {
        index = get_neighbor_graph_index(ng, nt->origin);
    15d0:	6f 2d       	mov	r22, r15
    15d2:	c8 01       	movw	r24, r16
    15d4:	0e 94 98 0a 	call	0x1530	; 0x1530 <get_neighbor_graph_index>
        ng->neighbor_tables[index].size = nt->size;
    15d8:	28 2f       	mov	r18, r24
    15da:	33 27       	eor	r19, r19
    15dc:	27 fd       	sbrc	r18, 7
    15de:	30 95       	com	r19
    15e0:	88 81       	ld	r24, Y
    15e2:	45 e0       	ldi	r20, 0x05	; 5
    15e4:	42 9f       	mul	r20, r18
    15e6:	f0 01       	movw	r30, r0
    15e8:	43 9f       	mul	r20, r19
    15ea:	f0 0d       	add	r31, r0
    15ec:	11 24       	eor	r1, r1
    15ee:	e0 0f       	add	r30, r16
    15f0:	f1 1f       	adc	r31, r17
    15f2:	81 83       	std	Z+1, r24	; 0x01
        ng->neighbor_tables[index].origin = nt->origin;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	82 83       	std	Z+2, r24	; 0x02
        ng->neighbor_tables[index].neighbors[0].id = nt->neighbors[0].id;
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	83 83       	std	Z+3, r24	; 0x03
        ng->neighbor_tables[index].neighbors[1].id = nt->neighbors[1].id;
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	84 83       	std	Z+4, r24	; 0x04
        ng->neighbor_tables[index].neighbors[2].id = nt->neighbors[2].id;
    1600:	5c 81       	ldd	r21, Y+4	; 0x04
    1602:	2f 5f       	subi	r18, 0xFF	; 255
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	42 9f       	mul	r20, r18
    1608:	c0 01       	movw	r24, r0
    160a:	43 9f       	mul	r20, r19
    160c:	90 0d       	add	r25, r0
    160e:	11 24       	eor	r1, r1
    1610:	f8 01       	movw	r30, r16
    1612:	e8 0f       	add	r30, r24
    1614:	f9 1f       	adc	r31, r25
    1616:	50 83       	st	Z, r21
        return 1;
    }
    return -1;
}
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	08 95       	ret

00001626 <print_neighbor_graph>:
 * print_neighbor_graph:
 *  - print the current neighbor information
 * 
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	8c 01       	movw	r16, r24
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    1634:	83 e2       	ldi	r24, 0x23	; 35
    1636:	93 e0       	ldi	r25, 0x03	; 3
    1638:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
    for(uint8_t i = 0; i < ng->size; i++) {
    163c:	c0 e0       	ldi	r28, 0x00	; 0
        nt = ng->neighbor_tables[i];
    163e:	d5 e0       	ldi	r29, 0x05	; 5
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    1640:	82 ee       	ldi	r24, 0xE2	; 226
    1642:	e8 2e       	mov	r14, r24
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	f8 2e       	mov	r15, r24
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    1648:	f8 01       	movw	r30, r16
    164a:	80 81       	ld	r24, Z
    164c:	c8 17       	cp	r28, r24
    164e:	00 f5       	brcc	.+64     	; 0x1690 <print_neighbor_graph+0x6a>
        nt = ng->neighbor_tables[i];
    1650:	f8 01       	movw	r30, r16
    1652:	dc 9f       	mul	r29, r28
    1654:	e0 0d       	add	r30, r0
    1656:	f1 1d       	adc	r31, r1
    1658:	11 24       	eor	r1, r1
    165a:	31 96       	adiw	r30, 0x01	; 1
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    165c:	84 81       	ldd	r24, Z+4	; 0x04
    165e:	1f 92       	push	r1
    1660:	8f 93       	push	r24
    1662:	83 81       	ldd	r24, Z+3	; 0x03
    1664:	1f 92       	push	r1
    1666:	8f 93       	push	r24
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	1f 92       	push	r1
    166c:	8f 93       	push	r24
    166e:	81 81       	ldd	r24, Z+1	; 0x01
    1670:	1f 92       	push	r1
    1672:	8f 93       	push	r24
    1674:	ff 92       	push	r15
    1676:	ef 92       	push	r14
    1678:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
 * @param ng - neighbor graph to print
 */
void print_neighbor_graph(neighbor_graph_t *ng) {
    neighbor_table_t nt;
    nrk_kprintf(PSTR("\r\nNeighbor Graph:\r\n"));
    for(uint8_t i = 0; i < ng->size; i++) {
    167c:	cf 5f       	subi	r28, 0xFF	; 255
    167e:	8d b7       	in	r24, 0x3d	; 61
    1680:	9e b7       	in	r25, 0x3e	; 62
    1682:	0a 96       	adiw	r24, 0x0a	; 10
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	9e bf       	out	0x3e, r25	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	8d bf       	out	0x3d, r24	; 61
    168e:	dc cf       	rjmp	.-72     	; 0x1648 <print_neighbor_graph+0x22>
        nt = ng->neighbor_tables[i];
        printf("   Origin: %d -> Neighbors: %d %d %d\r\n", nt.origin, nt.neighbors[0].id, nt.neighbors[1].id, nt.neighbors[2].id);
    }
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	08 95       	ret

0000169e <print_packet>:
 */
 
#include <parser.h>

void print_packet(packet *p)
{
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
    printf("msg_type: %d\r\n", p->type);
    16a4:	88 81       	ld	r24, Y
    16a6:	1f 92       	push	r1
    16a8:	8f 93       	push	r24
    16aa:	89 e0       	ldi	r24, 0x09	; 9
    16ac:	93 e0       	ldi	r25, 0x03	; 3
    16ae:	9f 93       	push	r25
    16b0:	8f 93       	push	r24
    16b2:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    printf("source_id: %d\r\n", p->source_id);
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	1f 92       	push	r1
    16ba:	8f 93       	push	r24
    16bc:	88 e1       	ldi	r24, 0x18	; 24
    16be:	93 e0       	ldi	r25, 0x03	; 3
    16c0:	9f 93       	push	r25
    16c2:	8f 93       	push	r24
    16c4:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    printf("seq_num: %d\r\n", p->seq_num);
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	8f 93       	push	r24
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	8f 93       	push	r24
    16d0:	88 e2       	ldi	r24, 0x28	; 40
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    printf("num_hops: %d\r\n", p->num_hops);
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	1f 92       	push	r1
    16e0:	8f 93       	push	r24
    16e2:	86 e3       	ldi	r24, 0x36	; 54
    16e4:	93 e0       	ldi	r25, 0x03	; 3
    16e6:	9f 93       	push	r25
    16e8:	8f 93       	push	r24
    16ea:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    switch(p->type)
    16ee:	8d b7       	in	r24, 0x3d	; 61
    16f0:	9e b7       	in	r25, 0x3e	; 62
    16f2:	40 96       	adiw	r24, 0x10	; 16
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	9e bf       	out	0x3e, r25	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	8d bf       	out	0x3d, r24	; 61
    16fe:	88 81       	ld	r24, Y
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	a1 f0       	breq	.+40     	; 0x172c <print_packet+0x8e>
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	a1 f1       	breq	.+104    	; 0x1770 <print_packet+0xd2>
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	09 f0       	breq	.+2      	; 0x170e <print_packet+0x70>
    170c:	4d c0       	rjmp	.+154    	; 0x17a8 <print_packet+0x10a>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            printf("light value: %d\r\n", p->light_value);
    170e:	8e 81       	ldd	r24, Y+6	; 0x06
    1710:	8f 93       	push	r24
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	8f 93       	push	r24
    1716:	85 e4       	ldi	r24, 0x45	; 69
    1718:	93 e0       	ldi	r25, 0x03	; 3
    171a:	9f 93       	push	r25
    171c:	8f 93       	push	r24
    171e:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
            break;
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	3e c0       	rjmp	.+124    	; 0x17a8 <print_packet+0x10a>
        }
        case MSG_NODE_NEIGHBORS:
        {
            printf("light value: %d\r\n", p->light_value);
    172c:	8e 81       	ldd	r24, Y+6	; 0x06
    172e:	8f 93       	push	r24
    1730:	8d 81       	ldd	r24, Y+5	; 0x05
    1732:	8f 93       	push	r24
    1734:	85 e4       	ldi	r24, 0x45	; 69
    1736:	93 e0       	ldi	r25, 0x03	; 3
    1738:	9f 93       	push	r25
    173a:	8f 93       	push	r24
    173c:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
            printf("neighbors: [%d,%d,%d]\r\n",
    1740:	8b 85       	ldd	r24, Y+11	; 0x0b
    1742:	1f 92       	push	r1
    1744:	8f 93       	push	r24
    1746:	8a 85       	ldd	r24, Y+10	; 0x0a
    1748:	1f 92       	push	r1
    174a:	8f 93       	push	r24
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	1f 92       	push	r1
    1750:	8f 93       	push	r24
    1752:	87 e5       	ldi	r24, 0x57	; 87
    1754:	93 e0       	ldi	r25, 0x03	; 3
    1756:	9f 93       	push	r25
    1758:	8f 93       	push	r24
    175a:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
                p->neighbor_table.neighbors[0].id,
                p->neighbor_table.neighbors[1].id,
                p->neighbor_table.neighbors[2].id);
            break;
    175e:	8d b7       	in	r24, 0x3d	; 61
    1760:	9e b7       	in	r25, 0x3e	; 62
    1762:	0c 96       	adiw	r24, 0x0c	; 12
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	9e bf       	out	0x3e, r25	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	8d bf       	out	0x3d, r24	; 61
    176e:	1c c0       	rjmp	.+56     	; 0x17a8 <print_packet+0x10a>
        }
        case MSG_GATEWAY:
        {
            printf("sample_rate: %d\r\n", p->sensor_sample_rate);
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	8f 93       	push	r24
    1774:	8c 85       	ldd	r24, Y+12	; 0x0c
    1776:	8f 93       	push	r24
    1778:	8f e6       	ldi	r24, 0x6F	; 111
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	9f 93       	push	r25
    177e:	8f 93       	push	r24
    1780:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
            printf("neighbor_rate: %d\r\n", p->neighbor_update_rate);
    1784:	8f 85       	ldd	r24, Y+15	; 0x0f
    1786:	8f 93       	push	r24
    1788:	8e 85       	ldd	r24, Y+14	; 0x0e
    178a:	8f 93       	push	r24
    178c:	81 e8       	ldi	r24, 0x81	; 129
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	9f 93       	push	r25
    1792:	8f 93       	push	r24
    1794:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
            break;
    1798:	8d b7       	in	r24, 0x3d	; 61
    179a:	9e b7       	in	r25, 0x3e	; 62
    179c:	08 96       	adiw	r24, 0x08	; 8
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	9e bf       	out	0x3e, r25	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	8d bf       	out	0x3d, r24	; 61
        }
    }
}
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	08 95       	ret

000017ae <parse_comma>:

// start_index is index in input of location after opening bracket.
uint8_t parse_comma(char *output, char *input, uint8_t start_index)
{
    17ae:	cf 93       	push	r28
    memset(output, 0, MAX_NEIGHBOR_BUF_SIZE);
    17b0:	fc 01       	movw	r30, r24
    17b2:	10 82       	st	Z, r1
    17b4:	11 82       	std	Z+1, r1	; 0x01
    17b6:	12 82       	std	Z+2, r1	; 0x02
    17b8:	13 82       	std	Z+3, r1	; 0x03
    uint8_t pos = start_index;
    17ba:	c4 2f       	mov	r28, r20
    17bc:	2c 2f       	mov	r18, r28
    17be:	24 1b       	sub	r18, r20
    uint8_t item_length = 0;
    while(pos < MAX_BUF_SIZE && input[pos] != ',' && input[pos] != '\0')
    17c0:	c8 31       	cpi	r28, 0x18	; 24
    17c2:	50 f4       	brcc	.+20     	; 0x17d8 <parse_comma+0x2a>
    17c4:	fb 01       	movw	r30, r22
    17c6:	ec 0f       	add	r30, r28
    17c8:	f1 1d       	adc	r31, r1
    17ca:	30 81       	ld	r19, Z
    17cc:	3c 32       	cpi	r19, 0x2C	; 44
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <parse_comma+0x2a>
    17d0:	33 23       	and	r19, r19
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <parse_comma+0x2a>
    {
        item_length ++;
        pos ++;
    17d4:	cf 5f       	subi	r28, 0xFF	; 255
    17d6:	f2 cf       	rjmp	.-28     	; 0x17bc <parse_comma+0xe>
    }
    //memcpy(output, input + start_index, item_length);
    strncpy(output, input + start_index, item_length);
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	64 0f       	add	r22, r20
    17dc:	71 1d       	adc	r23, r1
    17de:	a9 01       	movw	r20, r18
    17e0:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <strncpy>
    return pos;
}
    17e4:	8c 2f       	mov	r24, r28
    17e6:	cf 91       	pop	r28
    17e8:	08 95       	ret

000017ea <parse_bracket>:

// start_index is index in input of location after opening bracket.
uint8_t parse_bracket(char *output, char *input, uint8_t start_index)
{
    17ea:	cf 93       	push	r28
    memset(output, 0, MAX_BUF_SIZE);
    17ec:	28 e1       	ldi	r18, 0x18	; 24
    17ee:	fc 01       	movw	r30, r24
    17f0:	11 92       	st	Z+, r1
    17f2:	2a 95       	dec	r18
    17f4:	e9 f7       	brne	.-6      	; 0x17f0 <parse_bracket+0x6>
    uint8_t pos = start_index;
    17f6:	c4 2f       	mov	r28, r20
    17f8:	2c 2f       	mov	r18, r28
    17fa:	24 1b       	sub	r18, r20
    uint8_t item_length = 0;
    while(pos < MAX_BUF_SIZE && input[pos] != ']' && input[pos] != '\0')
    17fc:	c8 31       	cpi	r28, 0x18	; 24
    17fe:	50 f4       	brcc	.+20     	; 0x1814 <parse_bracket+0x2a>
    1800:	fb 01       	movw	r30, r22
    1802:	ec 0f       	add	r30, r28
    1804:	f1 1d       	adc	r31, r1
    1806:	30 81       	ld	r19, Z
    1808:	3d 35       	cpi	r19, 0x5D	; 93
    180a:	21 f0       	breq	.+8      	; 0x1814 <parse_bracket+0x2a>
    180c:	33 23       	and	r19, r19
    180e:	11 f0       	breq	.+4      	; 0x1814 <parse_bracket+0x2a>
    {
        item_length ++;
        pos ++;
    1810:	cf 5f       	subi	r28, 0xFF	; 255
    1812:	f2 cf       	rjmp	.-28     	; 0x17f8 <parse_bracket+0xe>
    }
    //memcpy(output, input + start_index, item_length);
    strncpy(output, input + start_index, item_length);
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	64 0f       	add	r22, r20
    1818:	71 1d       	adc	r23, r1
    181a:	a9 01       	movw	r20, r18
    181c:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <strncpy>
    return pos;
}
    1820:	8c 2f       	mov	r24, r28
    1822:	cf 91       	pop	r28
    1824:	08 95       	ret

00001826 <parse_msg>:
src - the pointer to the received data buffer
len - the length of the received data buffer
msg_type - the type of message
*/
void parse_msg(packet *parsed_packet, char *src, uint8_t len)
{
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	69 97       	sbiw	r28, 0x19	; 25
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	8c 01       	movw	r16, r24
    1846:	7b 01       	movw	r14, r22
    uint8_t pos = 0;
    uint8_t item_length = 0;
    char temp_buf[MAX_BUF_SIZE];
    msg_type type = src[1] - '0';
    1848:	fb 01       	movw	r30, r22
    184a:	21 81       	ldd	r18, Z+1	; 0x01
    184c:	20 53       	subi	r18, 0x30	; 48
    parsed_packet->type = type;
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18
    
    // parse source id
    parsed_packet->source_id = (src[4] - '0');
    1852:	fb 01       	movw	r30, r22
    1854:	84 81       	ldd	r24, Z+4	; 0x04
    1856:	80 53       	subi	r24, 0x30	; 48
    1858:	f8 01       	movw	r30, r16
    185a:	81 83       	std	Z+1, r24	; 0x01

    // parse sequence number
    pos = 6;
    item_length = 0;
    pos = parse_bracket(temp_buf, src, 7);
    185c:	47 e0       	ldi	r20, 0x07	; 7
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	29 8f       	std	Y+25, r18	; 0x19
    1864:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <parse_bracket>
    1868:	d8 2e       	mov	r13, r24
    parsed_packet->seq_num = atoi(temp_buf);
    186a:	ce 01       	movw	r24, r28
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <atoi>
    1872:	f8 01       	movw	r30, r16
    1874:	93 83       	std	Z+3, r25	; 0x03
    1876:	82 83       	std	Z+2, r24	; 0x02

    // parse num_hops
    pos += 2; // skip ']['
    1878:	42 e0       	ldi	r20, 0x02	; 2
    187a:	4d 0d       	add	r20, r13
    pos = parse_bracket(temp_buf, src, pos);
    187c:	b7 01       	movw	r22, r14
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <parse_bracket>
    1886:	d8 2e       	mov	r13, r24
    parsed_packet->num_hops = atoi(temp_buf);
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <atoi>
    1890:	f8 01       	movw	r30, r16
    1892:	84 83       	std	Z+4, r24	; 0x04
    
    switch(type)
    1894:	29 8d       	ldd	r18, Y+25	; 0x19
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	a1 f0       	breq	.+40     	; 0x18c2 <parse_msg+0x9c>
    189a:	23 30       	cpi	r18, 0x03	; 3
    189c:	e9 f1       	breq	.+122    	; 0x1918 <parse_msg+0xf2>
    189e:	21 30       	cpi	r18, 0x01	; 1
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <parse_msg+0x7e>
    18a2:	58 c0       	rjmp	.+176    	; 0x1954 <parse_msg+0x12e>
    {
        case MSG_NODE_SENSOR_VALUE:
        {
            // parse light value
            pos += 2; // skip
    18a4:	42 e0       	ldi	r20, 0x02	; 2
    18a6:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    18a8:	b7 01       	movw	r22, r14
    18aa:	ce 01       	movw	r24, r28
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <parse_bracket>
            parsed_packet->light_value = atoi(temp_buf);
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <atoi>
    18ba:	f8 01       	movw	r30, r16
    18bc:	96 83       	std	Z+6, r25	; 0x06
    18be:	85 83       	std	Z+5, r24	; 0x05
            break;
    18c0:	4d c0       	rjmp	.+154    	; 0x195c <parse_msg+0x136>
        }

        case MSG_NODE_NEIGHBORS:
        {
            // parse light value
            pos += 2; // skip
    18c2:	42 e0       	ldi	r20, 0x02	; 2
    18c4:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    18c6:	b7 01       	movw	r22, r14
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <parse_bracket>
    18d0:	d8 2e       	mov	r13, r24
            parsed_packet->light_value = atoi(temp_buf);
    18d2:	ce 01       	movw	r24, r28
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <atoi>
    18da:	f8 01       	movw	r30, r16
    18dc:	96 83       	std	Z+6, r25	; 0x06
    18de:	85 83       	std	Z+5, r24	; 0x05

            // parse neighbor table
            pos += 2;
    18e0:	d3 94       	inc	r13
    18e2:	d3 94       	inc	r13
    18e4:	d8 01       	movw	r26, r16
    18e6:	19 96       	adiw	r26, 0x09	; 9
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	8d 2d       	mov	r24, r13
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	f9 01       	movw	r30, r18
    18f2:	e8 0f       	add	r30, r24
    18f4:	f9 1f       	adc	r31, r25
    18f6:	ee 0d       	add	r30, r14
    18f8:	ff 1d       	adc	r31, r15
            for(uint8_t i = 0; i < 3; i++)
            {
                uint8_t neighbor_id = src[pos+i*2] - '0';
    18fa:	40 81       	ld	r20, Z
    18fc:	40 53       	subi	r20, 0x30	; 48
                parsed_packet->neighbor_table.neighbors[i].id = neighbor_id;
    18fe:	4d 93       	st	X+, r20
                parsed_packet->neighbor_table.size += 1;
    1900:	f8 01       	movw	r30, r16
    1902:	47 81       	ldd	r20, Z+7	; 0x07
    1904:	4f 5f       	subi	r20, 0xFF	; 255
    1906:	47 83       	std	Z+7, r20	; 0x07
    1908:	2e 5f       	subi	r18, 0xFE	; 254
    190a:	3f 4f       	sbci	r19, 0xFF	; 255
            pos = parse_bracket(temp_buf, src, pos);
            parsed_packet->light_value = atoi(temp_buf);

            // parse neighbor table
            pos += 2;
            for(uint8_t i = 0; i < 3; i++)
    190c:	26 30       	cpi	r18, 0x06	; 6
    190e:	31 05       	cpc	r19, r1
    1910:	79 f7       	brne	.-34     	; 0x18f0 <parse_msg+0xca>
            {
                uint8_t neighbor_id = src[pos+i*2] - '0';
                parsed_packet->neighbor_table.neighbors[i].id = neighbor_id;
                parsed_packet->neighbor_table.size += 1;
            }
            parsed_packet->neighbor_table.origin = parsed_packet->source_id;
    1912:	81 81       	ldd	r24, Z+1	; 0x01
    1914:	80 87       	std	Z+8, r24	; 0x08
            break;
    1916:	22 c0       	rjmp	.+68     	; 0x195c <parse_msg+0x136>
        }

        case MSG_GATEWAY:
        {
            // parse sample_rate
            pos += 2;
    1918:	42 e0       	ldi	r20, 0x02	; 2
    191a:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    191c:	b7 01       	movw	r22, r14
    191e:	ce 01       	movw	r24, r28
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <parse_bracket>
    1926:	d8 2e       	mov	r13, r24
           // printf("sample_rate string %s \r\n", temp_buf);
            parsed_packet->sensor_sample_rate = atoi(temp_buf);
    1928:	ce 01       	movw	r24, r28
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <atoi>
    1930:	f8 01       	movw	r30, r16
    1932:	95 87       	std	Z+13, r25	; 0x0d
    1934:	84 87       	std	Z+12, r24	; 0x0c
            
            // parse neighbor_rate
            pos += 2; // skip ']['
    1936:	42 e0       	ldi	r20, 0x02	; 2
    1938:	4d 0d       	add	r20, r13
            pos = parse_bracket(temp_buf, src, pos);
    193a:	b7 01       	movw	r22, r14
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <parse_bracket>
            //printf("neighbor_rate string %s \r\n", temp_buf);
            parsed_packet->neighbor_update_rate = atoi(temp_buf);
    1944:	ce 01       	movw	r24, r28
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <atoi>
    194c:	f8 01       	movw	r30, r16
    194e:	97 87       	std	Z+15, r25	; 0x0f
    1950:	86 87       	std	Z+14, r24	; 0x0e
            
            break;
    1952:	04 c0       	rjmp	.+8      	; 0x195c <parse_msg+0x136>
        }

        default:{printf("invalid type\r\n");}
    1954:	85 e9       	ldi	r24, 0x95	; 149
    1956:	93 e0       	ldi	r25, 0x03	; 3
    1958:	0e 94 37 30 	call	0x606e	; 0x606e <puts>
    }
    195c:	69 96       	adiw	r28, 0x19	; 25
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	08 95       	ret

00001978 <in_sequence_pool>:
 * @param sp - sequence pool to search
 * @param node_address - node to search for
 * @returns '1' if id found, '-1' otherwise
 */
int8_t in_sequence_pool(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1978:	fc 01       	movw	r30, r24
    197a:	21 91       	ld	r18, Z+
    197c:	cf 01       	movw	r24, r30
    197e:	3e 2f       	mov	r19, r30
    1980:	38 1b       	sub	r19, r24
    1982:	32 17       	cp	r19, r18
    1984:	28 f4       	brcc	.+10     	; 0x1990 <in_sequence_pool+0x18>
        if(sp->node_id[i] == node_address) {
    1986:	31 91       	ld	r19, Z+
    1988:	36 13       	cpse	r19, r22
    198a:	f9 cf       	rjmp	.-14     	; 0x197e <in_sequence_pool+0x6>
            return (int8_t)1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    return (int8_t)-1;
}
    198e:	08 95       	ret
    for(uint8_t i = 0; i < sp->size; i++) {
        if(sp->node_id[i] == node_address) {
            return (int8_t)1;
        }
    }
    return (int8_t)-1;
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	08 95       	ret

00001994 <get_sequence_pool_index>:
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    1994:	fc 01       	movw	r30, r24
    1996:	81 91       	ld	r24, Z+
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	98 17       	cp	r25, r24
    199c:	39 f0       	breq	.+14     	; 0x19ac <get_sequence_pool_index+0x18>
        if(sp->node_id[i] == node_address) {
    199e:	21 91       	ld	r18, Z+
    19a0:	26 13       	cpse	r18, r22
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <get_sequence_pool_index+0x14>
            return i;
    19a4:	89 2f       	mov	r24, r25
    19a6:	08 95       	ret
 * @param sp - sequence pool to be searched
 * @param node_address - node to search for
 * @returns index of node_address if found, '-1' otherwise
 */
int8_t get_sequence_pool_index(sequence_pool_t *sp, uint8_t node_address) {
    for(uint8_t i = 0; i < sp->size; i++) {
    19a8:	9f 5f       	subi	r25, 0xFF	; 255
    19aa:	f7 cf       	rjmp	.-18     	; 0x199a <get_sequence_pool_index+0x6>
        if(sp->node_id[i] == node_address) {
            return i;
        }
    }
    return -1;
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
}
    19ae:	08 95       	ret

000019b0 <get_sequence_number>:

uint16_t get_sequence_number(sequence_pool_t *sp, uint8_t node_address) {
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	ec 01       	movw	r28, r24
    int8_t index = get_sequence_pool_index(sp, node_address);
    19b6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_sequence_pool_index>
    if(index != -1) {
    19ba:	8f 3f       	cpi	r24, 0xFF	; 255
    19bc:	41 f0       	breq	.+16     	; 0x19ce <get_sequence_number+0x1e>
        return sp->seq_nums[index];
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	89 02       	muls	r24, r25
    19c2:	c0 0d       	add	r28, r0
    19c4:	d1 1d       	adc	r29, r1
    19c6:	11 24       	eor	r1, r1
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	9d 81       	ldd	r25, Y+5	; 0x05
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <get_sequence_number+0x22>
    }
    return 0;
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <add_to_sequence_pool>:
 * @param sp - sequence pool to which new entry will be added
 * @param node_address - address of the node to be added
 * @param seq_num - sequence number of node to be added
 * @returns '1' if add was successful, '-1' otherwise
 */
int8_t add_to_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    if((sp->size < MAX_POOL) && (in_sequence_pool(sp, node_address) == -1)) {
    19e4:	fc 01       	movw	r30, r24
    19e6:	c0 81       	ld	r28, Z
    19e8:	c8 30       	cpi	r28, 0x08	; 8
    19ea:	d8 f4       	brcc	.+54     	; 0x1a22 <add_to_sequence_pool+0x4a>
    19ec:	7a 01       	movw	r14, r20
    19ee:	d6 2f       	mov	r29, r22
    19f0:	8c 01       	movw	r16, r24
    19f2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <in_sequence_pool>
    19f6:	8f 3f       	cpi	r24, 0xFF	; 255
    19f8:	a1 f4       	brne	.+40     	; 0x1a22 <add_to_sequence_pool+0x4a>
        uint8_t index = sp->size;
        sp->size++;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	8c 0f       	add	r24, r28
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 83       	st	Z, r24
        sp->node_id[index] = node_address;
    1a02:	2c 2f       	mov	r18, r28
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	d1 83       	std	Z+1, r29	; 0x01
        sp->seq_nums[index] = seq_num;
    1a0c:	2e 5f       	subi	r18, 0xFE	; 254
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	22 0f       	add	r18, r18
    1a12:	33 1f       	adc	r19, r19
    1a14:	f8 01       	movw	r30, r16
    1a16:	e2 0f       	add	r30, r18
    1a18:	f3 1f       	adc	r31, r19
    1a1a:	f1 82       	std	Z+1, r15	; 0x01
    1a1c:	e0 82       	st	Z, r14
        return 1;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <add_to_sequence_pool+0x4c>
    }
    return -1;
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	08 95       	ret

00001a32 <update_sequence_pool>:
 * @param sp - sequence pool to be updated
 * @param node_address - node whose sequence number needs updating
 * @param seq_num - new sequence number of node_address
 * @returns '1' if update was successful, '-1' otherwise
 */
int8_t update_sequence_pool(sequence_pool_t *sp, uint8_t node_address, uint16_t seq_num) {
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	ec 01       	movw	r28, r24
    1a3c:	8a 01       	movw	r16, r20
    int8_t index = get_sequence_pool_index(sp, node_address);
    1a3e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <get_sequence_pool_index>
    if(index >= 0) {
    1a42:	87 fd       	sbrc	r24, 7
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <update_sequence_pool+0x26>
        sp->seq_nums[index] = seq_num;
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	89 02       	muls	r24, r25
    1a4a:	c0 0d       	add	r28, r0
    1a4c:	d1 1d       	adc	r29, r1
    1a4e:	11 24       	eor	r1, r1
    1a50:	1d 83       	std	Y+5, r17	; 0x05
    1a52:	0c 83       	std	Y+4, r16	; 0x04
        return 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <update_sequence_pool+0x28>
    }
    return -1;
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	1f 91       	pop	r17
    1a60:	0f 91       	pop	r16
    1a62:	08 95       	ret

00001a64 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1a64:	90 91 41 01 	lds	r25, 0x0141
    1a68:	9f 71       	andi	r25, 0x1F	; 31
    1a6a:	9f 31       	cpi	r25, 0x1F	; 31
    1a6c:	d9 f3       	breq	.-10     	; 0x1a64 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    1a6e:	80 93 42 01 	sts	0x0142, r24
    1a72:	08 95       	ret

00001a74 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	80 93 3b 0b 	sts	0x0B3B, r24
    1a7a:	08 95       	ret

00001a7c <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    1a7c:	10 92 3b 0b 	sts	0x0B3B, r1
    1a80:	08 95       	ret

00001a82 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1a82:	80 91 41 01 	lds	r24, 0x0141
    1a86:	8f 71       	andi	r24, 0x1F	; 31
    1a88:	8f 31       	cpi	r24, 0x1F	; 31
    1a8a:	d9 f3       	breq	.-10     	; 0x1a82 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1a8c:	80 91 41 01 	lds	r24, 0x0141
    1a90:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1a92:	e1 f0       	breq	.+56     	; 0x1acc <rf_power_down+0x4a>
    1a94:	8f 30       	cpi	r24, 0x0F	; 15
    1a96:	d1 f0       	breq	.+52     	; 0x1acc <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1a98:	80 91 41 01 	lds	r24, 0x0141
    1a9c:	8f 71       	andi	r24, 0x1F	; 31
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1aa2:	80 91 39 01 	lds	r24, 0x0139
    1aa6:	82 60       	ori	r24, 0x02	; 2
    1aa8:	80 93 39 01 	sts	0x0139, r24
    1aac:	0b c0       	rjmp	.+22     	; 0x1ac4 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    1aae:	88 e0       	ldi	r24, 0x08	; 8
    1ab0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1ab4:	80 91 41 01 	lds	r24, 0x0141
    1ab8:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    1aba:	88 30       	cpi	r24, 0x08	; 8
    1abc:	d9 f7       	brne	.-10     	; 0x1ab4 <rf_power_down+0x32>
    1abe:	f1 cf       	rjmp	.-30     	; 0x1aa2 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1ac0:	8f 30       	cpi	r24, 0x0F	; 15
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    1ac4:	80 91 41 01 	lds	r24, 0x0141
    1ac8:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    1aca:	d1 f7       	brne	.-12     	; 0x1ac0 <rf_power_down+0x3e>
    1acc:	08 95       	ret

00001ace <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1ace:	80 91 41 01 	lds	r24, 0x0141
    1ad2:	8f 71       	andi	r24, 0x1F	; 31
    1ad4:	8f 31       	cpi	r24, 0x1F	; 31
    1ad6:	d9 f3       	breq	.-10     	; 0x1ace <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1ad8:	80 91 41 01 	lds	r24, 0x0141
    1adc:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1ade:	11 f0       	breq	.+4      	; 0x1ae4 <rf_power_up+0x16>
    1ae0:	8f 30       	cpi	r24, 0x0F	; 15
    1ae2:	51 f4       	brne	.+20     	; 0x1af8 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    1ae4:	80 91 39 01 	lds	r24, 0x0139
    1ae8:	8d 7f       	andi	r24, 0xFD	; 253
    1aea:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1aee:	80 91 41 01 	lds	r24, 0x0141
    1af2:	8f 71       	andi	r24, 0x1F	; 31
    1af4:	88 30       	cpi	r24, 0x08	; 8
    1af6:	d9 f7       	brne	.-10     	; 0x1aee <rf_power_up+0x20>
    1af8:	08 95       	ret

00001afa <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    1afa:	e5 e4       	ldi	r30, 0x45	; 69
    1afc:	f1 e0       	ldi	r31, 0x01	; 1
    1afe:	90 81       	ld	r25, Z
    1b00:	90 7f       	andi	r25, 0xF0	; 240
    1b02:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1b04:	90 81       	ld	r25, Z
    1b06:	8f 70       	andi	r24, 0x0F	; 15
    1b08:	98 2b       	or	r25, r24
    1b0a:	90 83       	st	Z, r25
    1b0c:	08 95       	ret

00001b0e <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    1b0e:	e7 e5       	ldi	r30, 0x57	; 87
    1b10:	f1 e0       	ldi	r31, 0x01	; 1
    1b12:	80 81       	ld	r24, Z
    1b14:	8d 7f       	andi	r24, 0xFD	; 253
    1b16:	80 83       	st	Z, r24
    1b18:	08 95       	ret

00001b1a <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    1b1a:	e7 e5       	ldi	r30, 0x57	; 87
    1b1c:	f1 e0       	ldi	r31, 0x01	; 1
    1b1e:	80 81       	ld	r24, Z
    1b20:	82 60       	ori	r24, 0x02	; 2
    1b22:	80 83       	st	Z, r24
    1b24:	08 95       	ret

00001b26 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1b26:	ee e6       	ldi	r30, 0x6E	; 110
    1b28:	f1 e0       	ldi	r31, 0x01	; 1
    1b2a:	80 81       	ld	r24, Z
    1b2c:	8f 7e       	andi	r24, 0xEF	; 239
    1b2e:	80 83       	st	Z, r24
    1b30:	08 95       	ret

00001b32 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1b32:	ee e6       	ldi	r30, 0x6E	; 110
    1b34:	f1 e0       	ldi	r31, 0x01	; 1
    1b36:	80 81       	ld	r24, Z
    1b38:	80 61       	ori	r24, 0x10	; 16
    1b3a:	80 83       	st	Z, r24
    1b3c:	08 95       	ret

00001b3e <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    1b3e:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1b42:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1b46:	90 93 45 0b 	sts	0x0B45, r25
    1b4a:	80 93 44 0b 	sts	0x0B44, r24
    1b4e:	08 95       	ret

00001b50 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1b50:	90 93 3f 0b 	sts	0x0B3F, r25
    1b54:	80 93 3e 0b 	sts	0x0B3E, r24
	PHY_CC_CCA &= ~(0x1F);
    1b58:	e8 e4       	ldi	r30, 0x48	; 72
    1b5a:	f1 e0       	ldi	r31, 0x01	; 1
    1b5c:	80 81       	ld	r24, Z
    1b5e:	80 7e       	andi	r24, 0xE0	; 224
    1b60:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1b62:	80 81       	ld	r24, Z
    1b64:	68 2b       	or	r22, r24
    1b66:	60 83       	st	Z, r22
    1b68:	08 95       	ret

00001b6a <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    1b6a:	90 93 2e 05 	sts	0x052E, r25
    1b6e:	80 93 2d 05 	sts	0x052D, r24
    1b72:	08 95       	ret

00001b74 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1b74:	90 93 2c 05 	sts	0x052C, r25
    1b78:	80 93 2b 05 	sts	0x052B, r24
    1b7c:	08 95       	ret

00001b7e <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	fc 01       	movw	r30, r24
    1b88:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1b8a:	80 e2       	ldi	r24, 0x20	; 32
    1b8c:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1b90:	80 ec       	ldi	r24, 0xC0	; 192
    1b92:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1b96:	60 62       	ori	r22, 0x20	; 32
    1b98:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1b9c:	85 ec       	ldi	r24, 0xC5	; 197
    1b9e:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1ba2:	87 ea       	ldi	r24, 0xA7	; 167
    1ba4:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1ba8:	80 e8       	ldi	r24, 0x80	; 128
    1baa:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1bae:	20 93 60 01 	sts	0x0160, r18
    1bb2:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1bb6:	40 93 62 01 	sts	0x0162, r20
    1bba:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1bbe:	c6 e4       	ldi	r28, 0x46	; 70
    1bc0:	d1 e0       	ldi	r29, 0x01	; 1
    1bc2:	08 81       	ld	r16, Y
    1bc4:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1bc6:	98 81       	ld	r25, Y
    1bc8:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1bca:	30 2f       	mov	r19, r16
    1bcc:	32 95       	swap	r19
    1bce:	36 95       	lsr	r19
    1bd0:	37 70       	andi	r19, 0x07	; 7
    1bd2:	60 e4       	ldi	r22, 0x40	; 64
    1bd4:	36 9f       	mul	r19, r22
    1bd6:	80 01       	movw	r16, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	22 95       	swap	r18
    1bdc:	26 95       	lsr	r18
    1bde:	23 70       	andi	r18, 0x03	; 3
    1be0:	62 2f       	mov	r22, r18
    1be2:	60 2b       	or	r22, r16
    1be4:	82 95       	swap	r24
    1be6:	86 95       	lsr	r24
    1be8:	83 70       	andi	r24, 0x03	; 3
    1bea:	70 e1       	ldi	r23, 0x10	; 16
    1bec:	87 9f       	mul	r24, r23
    1bee:	90 01       	movw	r18, r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1bf4:	92 95       	swap	r25
    1bf6:	96 95       	lsr	r25
    1bf8:	93 70       	andi	r25, 0x03	; 3
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	98 9f       	mul	r25, r24
    1bfe:	b0 01       	movw	r22, r0
    1c00:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1c02:	62 2b       	or	r22, r18
    1c04:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1c08:	88 81       	ld	r24, Y
    1c0a:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1c0c:	92 95       	swap	r25
    1c0e:	96 95       	lsr	r25
    1c10:	93 70       	andi	r25, 0x03	; 3
    1c12:	39 2f       	mov	r19, r25
    1c14:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1c16:	98 2f       	mov	r25, r24
    1c18:	92 95       	swap	r25
    1c1a:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1c1c:	93 2b       	or	r25, r19
    1c1e:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1c22:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
    1c28:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1c2c:	ce e3       	ldi	r28, 0x3E	; 62
    1c2e:	db e0       	ldi	r29, 0x0B	; 11
    1c30:	f9 83       	std	Y+1, r31	; 0x01
    1c32:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    1c34:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    1c36:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    1c38:	5d 83       	std	Y+5, r21	; 0x05
    1c3a:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    1c3c:	bf 83       	std	Y+7, r27	; 0x07
    1c3e:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1c40:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 60 0b 	sts	0x0B60, r24
	rx_ready = 0;
    1c48:	10 92 7f 0b 	sts	0x0B7F, r1
	tx_done = 0;
    1c4c:	10 92 4f 0b 	sts	0x0B4F, r1

	use_glossy = 0;
    1c50:	10 92 3b 0b 	sts	0x0B3B, r1

} // rf_init() 
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	08 95       	ret

00001c5e <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1c5e:	86 e1       	ldi	r24, 0x16	; 22
    1c60:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <rf_cmd>

00001c64 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1c64:	86 e1       	ldi	r24, 0x16	; 22
    1c66:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <rf_cmd>

00001c6a <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1c6a:	88 e0       	ldi	r24, 0x08	; 8
    1c6c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>
	rx_ready = 0;
    1c70:	10 92 7f 0b 	sts	0x0B7F, r1
    1c74:	08 95       	ret

00001c76 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    1c76:	3f 92       	push	r3
    1c78:	4f 92       	push	r4
    1c7a:	5f 92       	push	r5
    1c7c:	6f 92       	push	r6
    1c7e:	7f 92       	push	r7
    1c80:	8f 92       	push	r8
    1c82:	9f 92       	push	r9
    1c84:	af 92       	push	r10
    1c86:	bf 92       	push	r11
    1c88:	cf 92       	push	r12
    1c8a:	df 92       	push	r13
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    1c9a:	80 91 60 0b 	lds	r24, 0x0B60
    1c9e:	81 11       	cpse	r24, r1
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <rf_tx_packet_repeat+0x30>
		return NRK_ERROR;
    1ca2:	8f ef       	ldi	r24, 0xFF	; 255
    1ca4:	26 c1       	rjmp	.+588    	; 0x1ef2 <rf_tx_packet_repeat+0x27c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1ca6:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1ca8:	80 91 40 0b 	lds	r24, 0x0B40
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	80 93 40 0b 	sts	0x0B40, r24
	machead->fcf = fcf;
    1cb2:	90 91 81 01 	lds	r25, 0x0181
    1cb6:	90 7e       	andi	r25, 0xE0	; 224
    1cb8:	91 60       	ori	r25, 0x01	; 1
    1cba:	20 fb       	bst	r18, 0
    1cbc:	95 f9       	bld	r25, 5
    1cbe:	9f 73       	andi	r25, 0x3F	; 63
    1cc0:	90 64       	ori	r25, 0x40	; 64
    1cc2:	90 93 81 01 	sts	0x0181, r25
    1cc6:	88 e8       	ldi	r24, 0x88	; 136
    1cc8:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    1ccc:	80 91 3b 0b 	lds	r24, 0x0B3B
    1cd0:	88 23       	and	r24, r24
    1cd2:	d1 f0       	breq	.+52     	; 0x1d08 <rf_tx_packet_repeat+0x92>
		machead->seq_num = 0xFF;
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    1cda:	8a ea       	ldi	r24, 0xAA	; 170
    1cdc:	9a ea       	ldi	r25, 0xAA	; 170
    1cde:	90 93 89 01 	sts	0x0189, r25
    1ce2:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    1ce6:	8f ef       	ldi	r24, 0xFF	; 255
    1ce8:	9f ef       	ldi	r25, 0xFF	; 255
    1cea:	90 93 87 01 	sts	0x0187, r25
    1cee:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1cf2:	20 91 63 01 	lds	r18, 0x0163
    1cf6:	80 91 62 01 	lds	r24, 0x0162
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	92 2b       	or	r25, r18
    1cfe:	90 93 85 01 	sts	0x0185, r25
    1d02:	80 93 84 01 	sts	0x0184, r24
    1d06:	1e c0       	rjmp	.+60     	; 0x1d44 <rf_tx_packet_repeat+0xce>
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    1d08:	80 91 40 0b 	lds	r24, 0x0B40
    1d0c:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1d10:	80 91 61 01 	lds	r24, 0x0161
    1d14:	20 91 60 01 	lds	r18, 0x0160
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	38 2b       	or	r19, r24
    1d1c:	30 93 89 01 	sts	0x0189, r19
    1d20:	20 93 88 01 	sts	0x0188, r18
		machead->dest_addr = pRTI->destAddr;
    1d24:	88 81       	ld	r24, Y
    1d26:	99 81       	ldd	r25, Y+1	; 0x01
    1d28:	90 93 87 01 	sts	0x0187, r25
    1d2c:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1d30:	80 91 63 01 	lds	r24, 0x0163
    1d34:	20 91 62 01 	lds	r18, 0x0162
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	38 2b       	or	r19, r24
    1d3c:	30 93 85 01 	sts	0x0185, r19
    1d40:	20 93 84 01 	sts	0x0184, r18
    1d44:	3b 01       	movw	r6, r22
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1d46:	4a 81       	ldd	r20, Y+2	; 0x02
    1d48:	55 27       	eor	r21, r21
    1d4a:	47 fd       	sbrc	r20, 7
    1d4c:	50 95       	com	r21
    1d4e:	6b 81       	ldd	r22, Y+3	; 0x03
    1d50:	7c 81       	ldd	r23, Y+4	; 0x04
    1d52:	8a e8       	ldi	r24, 0x8A	; 138
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	85 5f       	subi	r24, 0xF5	; 245
    1d5e:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1d62:	80 91 41 01 	lds	r24, 0x0141
    1d66:	98 2f       	mov	r25, r24
    1d68:	9f 71       	andi	r25, 0x1F	; 31
    1d6a:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1d6c:	9f ef       	ldi	r25, 0xFF	; 255
    1d6e:	93 0d       	add	r25, r3
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1d70:	92 30       	cpi	r25, 0x02	; 2
    1d72:	b8 f3       	brcs	.-18     	; 0x1d62 <rf_tx_packet_repeat+0xec>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1d74:	91 e1       	ldi	r25, 0x11	; 17
    1d76:	39 16       	cp	r3, r25
    1d78:	a1 f3       	breq	.-24     	; 0x1d62 <rf_tx_packet_repeat+0xec>
    1d7a:	92 e1       	ldi	r25, 0x12	; 18
    1d7c:	39 16       	cp	r3, r25
    1d7e:	89 f3       	breq	.-30     	; 0x1d62 <rf_tx_packet_repeat+0xec>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1d80:	9f e1       	ldi	r25, 0x1F	; 31
    1d82:	39 16       	cp	r3, r25
    1d84:	71 f3       	breq	.-36     	; 0x1d62 <rf_tx_packet_repeat+0xec>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1d86:	98 ef       	ldi	r25, 0xF8	; 248
    1d88:	93 0d       	add	r25, r3
    1d8a:	92 30       	cpi	r25, 0x02	; 2
    1d8c:	20 f0       	brcs	.+8      	; 0x1d96 <rf_tx_packet_repeat+0x120>
    1d8e:	8f 70       	andi	r24, 0x0F	; 15
    1d90:	86 30       	cpi	r24, 0x06	; 6
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <rf_tx_packet_repeat+0x120>
    1d94:	86 cf       	rjmp	.-244    	; 0x1ca2 <rf_tx_packet_repeat+0x2c>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    1d96:	86 e1       	ldi	r24, 0x16	; 22
    1d98:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	81 11       	cpse	r24, r1
    1da0:	0a c0       	rjmp	.+20     	; 0x1db6 <rf_tx_packet_repeat+0x140>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1da2:	89 e0       	ldi	r24, 0x09	; 9
    1da4:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>
	if(pRTI->ackRequest)
    1da8:	8e 81       	ldd	r24, Y+6	; 0x06
    1daa:	88 23       	and	r24, r24
    1dac:	91 f0       	breq	.+36     	; 0x1dd2 <rf_tx_packet_repeat+0x15c>
		rf_cmd(TX_ARET_ON);
    1dae:	89 e1       	ldi	r24, 0x19	; 25
    1db0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <rf_tx_packet_repeat+0x15c>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    1db6:	80 91 48 01 	lds	r24, 0x0148
    1dba:	80 68       	ori	r24, 0x80	; 128
    1dbc:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1dc0:	80 91 41 01 	lds	r24, 0x0141
    1dc4:	87 ff       	sbrs	r24, 7
    1dc6:	fc cf       	rjmp	.-8      	; 0x1dc0 <rf_tx_packet_repeat+0x14a>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1dc8:	80 91 41 01 	lds	r24, 0x0141
    1dcc:	86 ff       	sbrs	r24, 6
    1dce:	69 cf       	rjmp	.-302    	; 0x1ca2 <rf_tx_packet_repeat+0x2c>
    1dd0:	e8 cf       	rjmp	.-48     	; 0x1da2 <rf_tx_packet_repeat+0x12c>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    1dd2:	61 14       	cp	r6, r1
    1dd4:	71 04       	cpc	r7, r1
    1dd6:	a9 f1       	breq	.+106    	; 0x1e42 <rf_tx_packet_repeat+0x1cc>
		nrk_time_get(&curr_t);
    1dd8:	87 e4       	ldi	r24, 0x47	; 71
    1dda:	9b e0       	ldi	r25, 0x0B	; 11
    1ddc:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <nrk_time_get>
		target_t.secs = curr_t.secs;
    1de0:	80 91 47 0b 	lds	r24, 0x0B47
    1de4:	90 91 48 0b 	lds	r25, 0x0B48
    1de8:	a0 91 49 0b 	lds	r26, 0x0B49
    1dec:	b0 91 4a 0b 	lds	r27, 0x0B4A
    1df0:	80 93 61 0b 	sts	0x0B61, r24
    1df4:	90 93 62 0b 	sts	0x0B62, r25
    1df8:	a0 93 63 0b 	sts	0x0B63, r26
    1dfc:	b0 93 64 0b 	sts	0x0B64, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    1e00:	d3 01       	movw	r26, r6
    1e02:	20 e4       	ldi	r18, 0x40	; 64
    1e04:	32 e4       	ldi	r19, 0x42	; 66
    1e06:	4f e0       	ldi	r20, 0x0F	; 15
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__muluhisi3>
    1e0e:	00 91 4b 0b 	lds	r16, 0x0B4B
    1e12:	10 91 4c 0b 	lds	r17, 0x0B4C
    1e16:	20 91 4d 0b 	lds	r18, 0x0B4D
    1e1a:	30 91 4e 0b 	lds	r19, 0x0B4E
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	80 0f       	add	r24, r16
    1e24:	91 1f       	adc	r25, r17
    1e26:	a2 1f       	adc	r26, r18
    1e28:	b3 1f       	adc	r27, r19
    1e2a:	80 93 65 0b 	sts	0x0B65, r24
    1e2e:	90 93 66 0b 	sts	0x0B66, r25
    1e32:	a0 93 67 0b 	sts	0x0B67, r26
    1e36:	b0 93 68 0b 	sts	0x0B68, r27
		nrk_time_compact_nanos(&target_t);
    1e3a:	81 e6       	ldi	r24, 0x61	; 97
    1e3c:	9b e0       	ldi	r25, 0x0B	; 11
    1e3e:	0e 94 63 23 	call	0x46c6	; 0x46c6 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    1e42:	10 92 4f 0b 	sts	0x0B4F, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    1e4c:	41 2c       	mov	r4, r1
    1e4e:	51 2c       	mov	r5, r1
    1e50:	80 91 4f 0b 	lds	r24, 0x0B4F
    1e54:	81 11       	cpse	r24, r1
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <rf_tx_packet_repeat+0x1f2>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	48 1a       	sub	r4, r24
    1e5c:	58 0a       	sbc	r5, r24
    1e5e:	98 ee       	ldi	r25, 0xE8	; 232
    1e60:	49 16       	cp	r4, r25
    1e62:	9d ef       	ldi	r25, 0xFD	; 253
    1e64:	59 06       	cpc	r5, r25
    1e66:	a1 f7       	brne	.-24     	; 0x1e50 <rf_tx_packet_repeat+0x1da>
			continue;
		if(ms == 0)
    1e68:	61 14       	cp	r6, r1
    1e6a:	71 04       	cpc	r7, r1
    1e6c:	21 f4       	brne	.+8      	; 0x1e76 <rf_tx_packet_repeat+0x200>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e70:	81 11       	cpse	r24, r1
    1e72:	2d c0       	rjmp	.+90     	; 0x1ece <rf_tx_packet_repeat+0x258>
    1e74:	32 c0       	rjmp	.+100    	; 0x1eda <rf_tx_packet_repeat+0x264>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    1e76:	87 e4       	ldi	r24, 0x47	; 71
    1e78:	9b e0       	ldi	r25, 0x0B	; 11
    1e7a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    1e7e:	80 90 47 0b 	lds	r8, 0x0B47
    1e82:	90 90 48 0b 	lds	r9, 0x0B48
    1e86:	a0 90 49 0b 	lds	r10, 0x0B49
    1e8a:	b0 90 4a 0b 	lds	r11, 0x0B4A
    1e8e:	c0 90 4b 0b 	lds	r12, 0x0B4B
    1e92:	d0 90 4c 0b 	lds	r13, 0x0B4C
    1e96:	e0 90 4d 0b 	lds	r14, 0x0B4D
    1e9a:	f0 90 4e 0b 	lds	r15, 0x0B4E
    1e9e:	00 91 61 0b 	lds	r16, 0x0B61
    1ea2:	10 91 62 0b 	lds	r17, 0x0B62
    1ea6:	20 91 63 0b 	lds	r18, 0x0B63
    1eaa:	30 91 64 0b 	lds	r19, 0x0B64
    1eae:	40 91 65 0b 	lds	r20, 0x0B65
    1eb2:	50 91 66 0b 	lds	r21, 0x0B66
    1eb6:	60 91 67 0b 	lds	r22, 0x0B67
    1eba:	70 91 68 0b 	lds	r23, 0x0B68
    1ebe:	80 e8       	ldi	r24, 0x80	; 128
    1ec0:	9b e0       	ldi	r25, 0x0B	; 11
    1ec2:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_sub>
    1ec6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <rf_tx_packet_repeat+0x256>
    1eca:	bb cf       	rjmp	.-138    	; 0x1e42 <rf_tx_packet_repeat+0x1cc>
    1ecc:	d0 cf       	rjmp	.-96     	; 0x1e6e <rf_tx_packet_repeat+0x1f8>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1ece:	80 91 42 01 	lds	r24, 0x0142
    1ed2:	82 95       	swap	r24
    1ed4:	86 95       	lsr	r24
    1ed6:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1ed8:	39 f4       	brne	.+14     	; 0x1ee8 <rf_tx_packet_repeat+0x272>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1eda:	88 ee       	ldi	r24, 0xE8	; 232
    1edc:	48 16       	cp	r4, r24
    1ede:	8d ef       	ldi	r24, 0xFD	; 253
    1ee0:	58 06       	cpc	r5, r24
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <rf_tx_packet_repeat+0x272>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1ee4:	c1 e0       	ldi	r28, 0x01	; 1
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <rf_tx_packet_repeat+0x274>
    1ee8:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    1eea:	83 2d       	mov	r24, r3
    1eec:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    1ef0:	8c 2f       	mov	r24, r28
}
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	bf 90       	pop	r11
    1f04:	af 90       	pop	r10
    1f06:	9f 90       	pop	r9
    1f08:	8f 90       	pop	r8
    1f0a:	7f 90       	pop	r7
    1f0c:	6f 90       	pop	r6
    1f0e:	5f 90       	pop	r5
    1f10:	4f 90       	pop	r4
    1f12:	3f 90       	pop	r3
    1f14:	08 95       	ret

00001f16 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <rf_tx_packet_repeat>

00001f1e <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    1f22:	80 91 60 0b 	lds	r24, 0x0B60
    1f26:	88 23       	and	r24, r24
    1f28:	41 f1       	breq	.+80     	; 0x1f7a <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1f2a:	80 91 41 01 	lds	r24, 0x0141
    1f2e:	c8 2f       	mov	r28, r24
    1f30:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1f32:	9f ef       	ldi	r25, 0xFF	; 255
    1f34:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1f36:	92 30       	cpi	r25, 0x02	; 2
    1f38:	c0 f3       	brcs	.-16     	; 0x1f2a <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1f3a:	c1 31       	cpi	r28, 0x11	; 17
    1f3c:	b1 f3       	breq	.-20     	; 0x1f2a <rf_cca_check+0xc>
    1f3e:	c2 31       	cpi	r28, 0x12	; 18
    1f40:	a1 f3       	breq	.-24     	; 0x1f2a <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1f42:	cf 31       	cpi	r28, 0x1F	; 31
    1f44:	91 f3       	breq	.-28     	; 0x1f2a <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1f46:	c8 30       	cpi	r28, 0x08	; 8
    1f48:	19 f0       	breq	.+6      	; 0x1f50 <rf_cca_check+0x32>
    1f4a:	8f 70       	andi	r24, 0x0F	; 15
    1f4c:	86 30       	cpi	r24, 0x06	; 6
    1f4e:	a9 f4       	brne	.+42     	; 0x1f7a <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1f50:	86 e1       	ldi	r24, 0x16	; 22
    1f52:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1f56:	80 91 48 01 	lds	r24, 0x0148
    1f5a:	80 68       	ori	r24, 0x80	; 128
    1f5c:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    1f60:	80 91 41 01 	lds	r24, 0x0141
    1f64:	87 ff       	sbrs	r24, 7
    1f66:	fc cf       	rjmp	.-8      	; 0x1f60 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1f68:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    1f6c:	8c 2f       	mov	r24, r28
    1f6e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1f72:	d6 fb       	bst	r29, 6
    1f74:	88 27       	eor	r24, r24
    1f76:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1f78:	01 c0       	rjmp	.+2      	; 0x1f7c <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	08 95       	ret

00001f82 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    1f82:	80 91 60 0b 	lds	r24, 0x0B60
    1f86:	88 23       	and	r24, r24
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <rf_rx_packet_nonblock+0xa>
    1f8a:	a0 c0       	rjmp	.+320    	; 0x20cc <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	if(!rx_ready)
    1f8c:	80 91 7f 0b 	lds	r24, 0x0B7F
    1f90:	88 23       	and	r24, r24
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <rf_rx_packet_nonblock+0x14>
    1f94:	99 c0       	rjmp	.+306    	; 0x20c8 <rf_rx_packet_nonblock+0x146>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1f96:	80 91 7b 01 	lds	r24, 0x017B
    1f9a:	e0 91 3e 0b 	lds	r30, 0x0B3E
    1f9e:	f0 91 3f 0b 	lds	r31, 0x0B3F
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 97       	sbiw	r24, 0x02	; 2
    1fa6:	24 81       	ldd	r18, Z+4	; 0x04
    1fa8:	33 27       	eor	r19, r19
    1faa:	27 fd       	sbrc	r18, 7
    1fac:	30 95       	com	r19
    1fae:	28 17       	cp	r18, r24
    1fb0:	39 07       	cpc	r19, r25
    1fb2:	0c f4       	brge	.+2      	; 0x1fb6 <rf_rx_packet_nonblock+0x34>
    1fb4:	8b c0       	rjmp	.+278    	; 0x20cc <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1fb6:	e0 91 3e 0b 	lds	r30, 0x0B3E
    1fba:	f0 91 3f 0b 	lds	r31, 0x0B3F
    1fbe:	80 91 82 01 	lds	r24, 0x0182
    1fc2:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1fc4:	e0 91 3e 0b 	lds	r30, 0x0B3E
    1fc8:	f0 91 3f 0b 	lds	r31, 0x0B3F
    1fcc:	80 91 87 01 	lds	r24, 0x0187
    1fd0:	90 91 88 01 	lds	r25, 0x0188
    1fd4:	92 83       	std	Z+2, r25	; 0x02
    1fd6:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1fd8:	e0 91 3e 0b 	lds	r30, 0x0B3E
    1fdc:	f0 91 3f 0b 	lds	r31, 0x0B3F
    1fe0:	80 91 7b 01 	lds	r24, 0x017B
    1fe4:	8b 50       	subi	r24, 0x0B	; 11
    1fe6:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1fe8:	a0 91 3e 0b 	lds	r26, 0x0B3E
    1fec:	b0 91 3f 0b 	lds	r27, 0x0B3F
    1ff0:	e0 91 3e 0b 	lds	r30, 0x0B3E
    1ff4:	f0 91 3f 0b 	lds	r31, 0x0B3F
    1ff8:	13 96       	adiw	r26, 0x03	; 3
    1ffa:	9c 91       	ld	r25, X
    1ffc:	84 81       	ldd	r24, Z+4	; 0x04
    1ffe:	89 17       	cp	r24, r25
    2000:	3c f0       	brlt	.+14     	; 0x2010 <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    2002:	e0 91 3e 0b 	lds	r30, 0x0B3E
    2006:	f0 91 3f 0b 	lds	r31, 0x0B3F
    200a:	83 81       	ldd	r24, Z+3	; 0x03
    200c:	87 ff       	sbrs	r24, 7
    200e:	0d c0       	rjmp	.+26     	; 0x202a <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    2010:	10 92 7f 0b 	sts	0x0B7F, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    2014:	80 91 4c 01 	lds	r24, 0x014C
    2018:	8f 77       	andi	r24, 0x7F	; 127
    201a:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    201e:	80 91 4c 01 	lds	r24, 0x014C
    2022:	80 68       	ori	r24, 0x80	; 128
    2024:	80 93 4c 01 	sts	0x014C, r24
    2028:	51 c0       	rjmp	.+162    	; 0x20cc <rf_rx_packet_nonblock+0x14a>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    202a:	a0 91 3e 0b 	lds	r26, 0x0B3E
    202e:	b0 91 3f 0b 	lds	r27, 0x0B3F
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    2032:	e0 91 3e 0b 	lds	r30, 0x0B3E
    2036:	f0 91 3f 0b 	lds	r31, 0x0B3F
    203a:	13 96       	adiw	r26, 0x03	; 3
    203c:	4c 91       	ld	r20, X
    203e:	55 27       	eor	r21, r21
    2040:	47 fd       	sbrc	r20, 7
    2042:	50 95       	com	r21
    2044:	69 e8       	ldi	r22, 0x89	; 137
    2046:	71 e0       	ldi	r23, 0x01	; 1
    2048:	85 81       	ldd	r24, Z+5	; 0x05
    204a:	96 81       	ldd	r25, Z+6	; 0x06
    204c:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    2050:	e0 91 3e 0b 	lds	r30, 0x0B3E
    2054:	f0 91 3f 0b 	lds	r31, 0x0B3F
    2058:	80 91 80 01 	lds	r24, 0x0180
    205c:	85 fb       	bst	r24, 5
    205e:	88 27       	eor	r24, r24
    2060:	80 f9       	bld	r24, 0
    2062:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    2064:	e0 91 3e 0b 	lds	r30, 0x0B3E
    2068:	f0 91 3f 0b 	lds	r31, 0x0B3F
    206c:	80 91 47 01 	lds	r24, 0x0147
    2070:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    2072:	e0 91 3e 0b 	lds	r30, 0x0B3E
    2076:	f0 91 3f 0b 	lds	r31, 0x0B3F
    207a:	80 91 46 01 	lds	r24, 0x0146
    207e:	86 95       	lsr	r24
    2080:	86 95       	lsr	r24
    2082:	86 95       	lsr	r24
    2084:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    2086:	e0 91 3e 0b 	lds	r30, 0x0B3E
    208a:	f0 91 3f 0b 	lds	r31, 0x0B3F
    208e:	80 91 47 01 	lds	r24, 0x0147
    2092:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    2094:	a0 91 3e 0b 	lds	r26, 0x0B3E
    2098:	b0 91 3f 0b 	lds	r27, 0x0B3F
    209c:	e0 91 7b 01 	lds	r30, 0x017B
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	e0 58       	subi	r30, 0x80	; 128
    20a4:	fe 4f       	sbci	r31, 0xFE	; 254
    20a6:	80 81       	ld	r24, Z
    20a8:	1b 96       	adiw	r26, 0x0b	; 11
    20aa:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    20ac:	10 92 7f 0b 	sts	0x0B7F, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    20b0:	80 91 4c 01 	lds	r24, 0x014C
    20b4:	8f 77       	andi	r24, 0x7F	; 127
    20b6:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    20ba:	80 91 4c 01 	lds	r24, 0x014C
    20be:	80 68       	ori	r24, 0x80	; 128
    20c0:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    20ce:	08 95       	ret

000020d0 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    20d0:	1f 92       	push	r1
    20d2:	0f 92       	push	r0
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	0f 92       	push	r0
    20d8:	11 24       	eor	r1, r1
    20da:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    20dc:	80 e8       	ldi	r24, 0x80	; 128
    20de:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    20e2:	8f 91       	pop	r24
    20e4:	0f 90       	pop	r0
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	0f 90       	pop	r0
    20ea:	1f 90       	pop	r1
    20ec:	18 95       	reti

000020ee <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    20ee:	1f 92       	push	r1
    20f0:	0f 92       	push	r0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	0f 92       	push	r0
    20f6:	11 24       	eor	r1, r1
    20f8:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	80 93 4f 0b 	sts	0x0B4F, r24
	IRQ_STATUS = (1 << TX_END);
    2100:	80 e4       	ldi	r24, 0x40	; 64
    2102:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    2106:	8f 91       	pop	r24
    2108:	0f 90       	pop	r0
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	0f 90       	pop	r0
    210e:	1f 90       	pop	r1
    2110:	18 95       	reti

00002112 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    2112:	1f 92       	push	r1
    2114:	0f 92       	push	r0
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	0f 92       	push	r0
    211a:	11 24       	eor	r1, r1
    211c:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    211e:	80 e2       	ldi	r24, 0x20	; 32
    2120:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2124:	8f 91       	pop	r24
    2126:	0f 90       	pop	r0
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	0f 90       	pop	r0
    212c:	1f 90       	pop	r1
    212e:	18 95       	reti

00002130 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    2130:	1f 92       	push	r1
    2132:	0f 92       	push	r0
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	0f 92       	push	r0
    2138:	11 24       	eor	r1, r1
    213a:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    213c:	80 e1       	ldi	r24, 0x10	; 16
    213e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2142:	8f 91       	pop	r24
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	0f 90       	pop	r0
    214a:	1f 90       	pop	r1
    214c:	18 95       	reti

0000214e <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    214e:	1f 92       	push	r1
    2150:	0f 92       	push	r0
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	0f 92       	push	r0
    2156:	11 24       	eor	r1, r1
    2158:	0b b6       	in	r0, 0x3b	; 59
    215a:	0f 92       	push	r0
    215c:	2f 93       	push	r18
    215e:	3f 93       	push	r19
    2160:	4f 93       	push	r20
    2162:	5f 93       	push	r21
    2164:	6f 93       	push	r22
    2166:	7f 93       	push	r23
    2168:	8f 93       	push	r24
    216a:	9f 93       	push	r25
    216c:	af 93       	push	r26
    216e:	bf 93       	push	r27
    2170:	ef 93       	push	r30
    2172:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    2174:	84 e0       	ldi	r24, 0x04	; 4
    2176:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    217a:	e0 91 2d 05 	lds	r30, 0x052D
    217e:	f0 91 2e 05 	lds	r31, 0x052E
    2182:	30 97       	sbiw	r30, 0x00	; 0
    2184:	09 f0       	breq	.+2      	; 0x2188 <__vector_59+0x3a>
		rx_start_func();
    2186:	09 95       	icall

	return;
}
    2188:	ff 91       	pop	r31
    218a:	ef 91       	pop	r30
    218c:	bf 91       	pop	r27
    218e:	af 91       	pop	r26
    2190:	9f 91       	pop	r25
    2192:	8f 91       	pop	r24
    2194:	7f 91       	pop	r23
    2196:	6f 91       	pop	r22
    2198:	5f 91       	pop	r21
    219a:	4f 91       	pop	r20
    219c:	3f 91       	pop	r19
    219e:	2f 91       	pop	r18
    21a0:	0f 90       	pop	r0
    21a2:	0b be       	out	0x3b, r0	; 59
    21a4:	0f 90       	pop	r0
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	0f 90       	pop	r0
    21aa:	1f 90       	pop	r1
    21ac:	18 95       	reti

000021ae <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    21ae:	1f 92       	push	r1
    21b0:	0f 92       	push	r0
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	0f 92       	push	r0
    21b6:	11 24       	eor	r1, r1
    21b8:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    21c0:	8f 91       	pop	r24
    21c2:	0f 90       	pop	r0
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	0f 90       	pop	r0
    21c8:	1f 90       	pop	r1
    21ca:	18 95       	reti

000021cc <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    21cc:	1f 92       	push	r1
    21ce:	0f 92       	push	r0
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	0f 92       	push	r0
    21d4:	11 24       	eor	r1, r1
    21d6:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    21de:	8f 91       	pop	r24
    21e0:	0f 90       	pop	r0
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	0f 90       	pop	r0
    21e6:	1f 90       	pop	r1
    21e8:	18 95       	reti

000021ea <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    21ea:	e9 e4       	ldi	r30, 0x49	; 73
    21ec:	f1 e0       	ldi	r31, 0x01	; 1
    21ee:	90 81       	ld	r25, Z
    21f0:	90 7f       	andi	r25, 0xF0	; 240
    21f2:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    21f4:	90 81       	ld	r25, Z
    21f6:	8f 70       	andi	r24, 0x0F	; 15
    21f8:	98 2b       	or	r25, r24
    21fa:	90 83       	st	Z, r25
    21fc:	08 95       	ret

000021fe <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	08 95       	ret

00002202 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    2202:	08 95       	ret

00002204 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    2204:	08 95       	ret

00002206 <rf_security_disable>:
}



void rf_security_disable()
{
    2206:	08 95       	ret

00002208 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	08 95       	ret

0000220c <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    220c:	80 91 39 0b 	lds	r24, 0x0B39
    2210:	90 91 3a 0b 	lds	r25, 0x0B3A
    2214:	08 95       	ret

00002216 <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	08 95       	ret

0000221a <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    221a:	08 95       	ret

0000221c <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	08 95       	ret

00002220 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	08 95       	ret

00002224 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	08 95       	ret

00002228 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    2228:	08 95       	ret

0000222a <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    222a:	08 95       	ret

0000222c <rf_test_mode>:
}



void rf_test_mode()
{
    222c:	08 95       	ret

0000222e <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    222e:	08 95       	ret

00002230 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    2230:	08 95       	ret

00002232 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    2232:	08 95       	ret

00002234 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    2234:	08 95       	ret

00002236 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    2236:	08 95       	ret

00002238 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    2238:	e7 e3       	ldi	r30, 0x37	; 55
    223a:	f1 e0       	ldi	r31, 0x01	; 1
    223c:	80 81       	ld	r24, Z
    223e:	83 60       	ori	r24, 0x03	; 3
    2240:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    2242:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    2244:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    2246:	8d b1       	in	r24, 0x0d	; 13
    2248:	80 6e       	ori	r24, 0xE0	; 224
    224a:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    224c:	8e b1       	in	r24, 0x0e	; 14
    224e:	80 6e       	ori	r24, 0xE0	; 224
    2250:	8e b9       	out	0x0e, r24	; 14
    2252:	08 95       	ret

00002254 <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    2254:	e7 e3       	ldi	r30, 0x37	; 55
    2256:	f1 e0       	ldi	r31, 0x01	; 1
    2258:	80 81       	ld	r24, Z
    225a:	83 60       	ori	r24, 0x03	; 3
    225c:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    225e:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    2260:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    2262:	8d b1       	in	r24, 0x0d	; 13
    2264:	80 6e       	ori	r24, 0xE0	; 224
    2266:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    2268:	8e b1       	in	r24, 0x0e	; 14
    226a:	80 6e       	ori	r24, 0xE0	; 224
    226c:	8e b9       	out	0x0e, r24	; 14
    226e:	08 95       	ret

00002270 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	27 97       	sbiw	r28, 0x07	; 7
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    2290:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    2294:	e0 91 3e 0b 	lds	r30, 0x0B3E
    2298:	f0 91 3f 0b 	lds	r31, 0x0B3F
    229c:	c0 80       	ld	r12, Z
    229e:	d3 80       	ldd	r13, Z+3	; 0x03
    22a0:	e5 80       	ldd	r14, Z+5	; 0x05
    22a2:	f6 80       	ldd	r15, Z+6	; 0x06
    22a4:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    22a6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <rf_rx_packet_nonblock>
	if (err < 1) {
    22aa:	18 16       	cp	r1, r24
    22ac:	1c f0       	brlt	.+6      	; 0x22b4 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    22ae:	83 ea       	ldi	r24, 0xA3	; 163
    22b0:	93 e0       	ldi	r25, 0x03	; 3
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    22b4:	f7 01       	movw	r30, r14
    22b6:	10 81       	ld	r17, Z
	if (ttl == 0) {
    22b8:	11 11       	cpse	r17, r1
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    22bc:	82 ec       	ldi	r24, 0xC2	; 194
    22be:	93 e0       	ldi	r25, 0x03	; 3
    22c0:	0e 94 37 30 	call	0x606e	; 0x606e <puts>
#endif
		nrk_int_enable();
    22c4:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
		return;
    22c8:	31 c0       	rjmp	.+98     	; 0x232c <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    22ca:	15 30       	cpi	r17, 0x05	; 5
    22cc:	21 f4       	brne	.+8      	; 0x22d6 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    22ce:	8a e0       	ldi	r24, 0x0A	; 10
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 31 30 	call	0x6062	; 0x6062 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    22d6:	c7 01       	movw	r24, r14
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	9f 93       	push	r25
    22dc:	8f 93       	push	r24
    22de:	80 2f       	mov	r24, r16
    22e0:	99 27       	eor	r25, r25
    22e2:	87 fd       	sbrc	r24, 7
    22e4:	90 95       	com	r25
    22e6:	9f 93       	push	r25
    22e8:	0f 93       	push	r16
    22ea:	1f 92       	push	r1
    22ec:	1f 93       	push	r17
    22ee:	1f 92       	push	r1
    22f0:	cf 92       	push	r12
    22f2:	84 ee       	ldi	r24, 0xE4	; 228
    22f4:	93 e0       	ldi	r25, 0x03	; 3
    22f6:	9f 93       	push	r25
    22f8:	8f 93       	push	r24
    22fa:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    22fe:	fd 82       	std	Y+5, r15	; 0x05
    2300:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    2302:	11 50       	subi	r17, 0x01	; 1
    2304:	f7 01       	movw	r30, r14
    2306:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    2308:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    230a:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    230c:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    230e:	8f ef       	ldi	r24, 0xFF	; 255
    2310:	9f ef       	ldi	r25, 0xFF	; 255
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    2316:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    231a:	ce 01       	movw	r24, r28
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <rf_tx_packet>
#endif
	return;
    2322:	0f b6       	in	r0, 0x3f	; 63
    2324:	f8 94       	cli
    2326:	de bf       	out	0x3e, r29	; 62
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	cd bf       	out	0x3d, r28	; 61
}
    232c:	27 96       	adiw	r28, 0x07	; 7
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	ff 90       	pop	r15
    2342:	ef 90       	pop	r14
    2344:	df 90       	pop	r13
    2346:	cf 90       	pop	r12
    2348:	08 95       	ret

0000234a <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    234a:	1f 92       	push	r1
    234c:	0f 92       	push	r0
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	0f 92       	push	r0
    2352:	11 24       	eor	r1, r1
    2354:	0b b6       	in	r0, 0x3b	; 59
    2356:	0f 92       	push	r0
    2358:	2f 93       	push	r18
    235a:	3f 93       	push	r19
    235c:	4f 93       	push	r20
    235e:	5f 93       	push	r21
    2360:	6f 93       	push	r22
    2362:	7f 93       	push	r23
    2364:	8f 93       	push	r24
    2366:	9f 93       	push	r25
    2368:	af 93       	push	r26
    236a:	bf 93       	push	r27
    236c:	ef 93       	push	r30
    236e:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 91 7b 01 	lds	r25, 0x017B
    2376:	89 17       	cp	r24, r25
    2378:	10 f4       	brcc	.+4      	; 0x237e <__vector_60+0x34>
    237a:	8f 5f       	subi	r24, 0xFF	; 255
    237c:	fa cf       	rjmp	.-12     	; 0x2372 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    237e:	80 91 46 01 	lds	r24, 0x0146
    2382:	87 ff       	sbrs	r24, 7
    2384:	04 c0       	rjmp	.+8      	; 0x238e <__vector_60+0x44>
		rx_ready = 1;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	80 93 7f 0b 	sts	0x0B7F, r24
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    238e:	8d e0       	ldi	r24, 0x0D	; 13
    2390:	94 e0       	ldi	r25, 0x04	; 4
    2392:	0e 94 37 30 	call	0x606e	; 0x606e <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    2396:	88 e0       	ldi	r24, 0x08	; 8
    2398:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    239c:	80 91 46 01 	lds	r24, 0x0146
    23a0:	87 ff       	sbrs	r24, 7
    23a2:	05 c0       	rjmp	.+10     	; 0x23ae <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    23a4:	80 91 3b 0b 	lds	r24, 0x0B3B
    23a8:	81 11       	cpse	r24, r1
    23aa:	0e 94 38 11 	call	0x2270	; 0x2270 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    23ae:	e0 91 2b 05 	lds	r30, 0x052B
    23b2:	f0 91 2c 05 	lds	r31, 0x052C
    23b6:	30 97       	sbiw	r30, 0x00	; 0
    23b8:	09 f0       	breq	.+2      	; 0x23bc <__vector_60+0x72>
		rx_end_func();
    23ba:	09 95       	icall

	return;
}
    23bc:	ff 91       	pop	r31
    23be:	ef 91       	pop	r30
    23c0:	bf 91       	pop	r27
    23c2:	af 91       	pop	r26
    23c4:	9f 91       	pop	r25
    23c6:	8f 91       	pop	r24
    23c8:	7f 91       	pop	r23
    23ca:	6f 91       	pop	r22
    23cc:	5f 91       	pop	r21
    23ce:	4f 91       	pop	r20
    23d0:	3f 91       	pop	r19
    23d2:	2f 91       	pop	r18
    23d4:	0f 90       	pop	r0
    23d6:	0b be       	out	0x3b, r0	; 59
    23d8:	0f 90       	pop	r0
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	0f 90       	pop	r0
    23de:	1f 90       	pop	r1
    23e0:	18 95       	reti

000023e2 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    23e2:	a0 e5       	ldi	r26, 0x50	; 80
    23e4:	bb e0       	ldi	r27, 0x0B	; 11
    23e6:	fc 01       	movw	r30, r24
    23e8:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    23ea:	20 81       	ld	r18, Z
    23ec:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    23ee:	21 91       	ld	r18, Z+
    23f0:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    23f4:	e8 17       	cp	r30, r24
    23f6:	f9 07       	cpc	r31, r25
    23f8:	c1 f7       	brne	.-16     	; 0x23ea <aes_setkey+0x8>
    23fa:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    23fc:	10 92 3e 01 	sts	0x013E, r1
    2400:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    2402:	e1 f7       	brne	.-8      	; 0x23fc <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    2404:	80 e8       	ldi	r24, 0x80	; 128
    2406:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    240a:	80 91 3d 01 	lds	r24, 0x013D
    240e:	80 ff       	sbrs	r24, 0
    2410:	fc cf       	rjmp	.-8      	; 0x240a <aes_setkey+0x28>
    2412:	e9 e6       	ldi	r30, 0x69	; 105
    2414:	fb e0       	ldi	r31, 0x0B	; 11
    2416:	80 e1       	ldi	r24, 0x10	; 16
    2418:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    241a:	90 91 3f 01 	lds	r25, 0x013F
    241e:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    2420:	8e 13       	cpse	r24, r30
    2422:	fb cf       	rjmp	.-10     	; 0x241a <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    2424:	08 95       	ret

00002426 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    242c:	66 23       	and	r22, r22
    242e:	09 f4       	brne	.+2      	; 0x2432 <aes_encrypt+0xc>
    2430:	45 c0       	rjmp	.+138    	; 0x24bc <aes_encrypt+0x96>
    2432:	86 2f       	mov	r24, r22
    2434:	8f 70       	andi	r24, 0x0F	; 15
    2436:	09 f0       	breq	.+2      	; 0x243a <aes_encrypt+0x14>
    2438:	41 c0       	rjmp	.+130    	; 0x24bc <aes_encrypt+0x96>
    243a:	e0 e5       	ldi	r30, 0x50	; 80
    243c:	fb e0       	ldi	r31, 0x0B	; 11
    243e:	90 e1       	ldi	r25, 0x10	; 16
    2440:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    2442:	21 91       	ld	r18, Z+
    2444:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    2448:	9e 13       	cpse	r25, r30
    244a:	fb cf       	rjmp	.-10     	; 0x2442 <aes_encrypt+0x1c>
    244c:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    244e:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    2450:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2452:	40 e1       	ldi	r20, 0x10	; 16
    2454:	94 9f       	mul	r25, r20
    2456:	90 01       	movw	r18, r0
    2458:	11 24       	eor	r1, r1
    245a:	26 17       	cp	r18, r22
    245c:	37 07       	cpc	r19, r23
    245e:	7c f5       	brge	.+94     	; 0x24be <aes_encrypt+0x98>
      if(i==0)
    2460:	91 11       	cpse	r25, r1
    2462:	03 c0       	rjmp	.+6      	; 0x246a <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    2464:	10 92 3c 01 	sts	0x013C, r1
    2468:	02 c0       	rjmp	.+4      	; 0x246e <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    246a:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	2a 0f       	add	r18, r26
    2474:	3b 1f       	adc	r19, r27
    2476:	e9 01       	movw	r28, r18
    2478:	c4 0f       	add	r28, r20
    247a:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    247c:	f8 81       	ld	r31, Y
    247e:	f0 93 3e 01 	sts	0x013E, r31
    2482:	4f 5f       	subi	r20, 0xFF	; 255
    2484:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    2486:	40 31       	cpi	r20, 0x10	; 16
    2488:	51 05       	cpc	r21, r1
    248a:	a9 f7       	brne	.-22     	; 0x2476 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    248c:	40 91 3c 01 	lds	r20, 0x013C
    2490:	40 68       	ori	r20, 0x80	; 128
    2492:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    2496:	40 91 3d 01 	lds	r20, 0x013D
    249a:	40 ff       	sbrs	r20, 0
    249c:	fc cf       	rjmp	.-8      	; 0x2496 <aes_encrypt+0x70>
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    24a2:	f0 91 3e 01 	lds	r31, 0x013E
    24a6:	e9 01       	movw	r28, r18
    24a8:	c4 0f       	add	r28, r20
    24aa:	d5 1f       	adc	r29, r21
    24ac:	f8 83       	st	Y, r31
    24ae:	4f 5f       	subi	r20, 0xFF	; 255
    24b0:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    24b2:	40 31       	cpi	r20, 0x10	; 16
    24b4:	51 05       	cpc	r21, r1
    24b6:	a9 f7       	brne	.-22     	; 0x24a2 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    24b8:	9f 5f       	subi	r25, 0xFF	; 255
    24ba:	cb cf       	rjmp	.-106    	; 0x2452 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	08 95       	ret

000024c4 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    24ce:	61 30       	cpi	r22, 0x01	; 1
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <aes_decrypt+0x10>
    24d2:	58 c0       	rjmp	.+176    	; 0x2584 <aes_decrypt+0xc0>
    24d4:	86 2f       	mov	r24, r22
    24d6:	8f 70       	andi	r24, 0x0F	; 15
    24d8:	09 f0       	breq	.+2      	; 0x24dc <aes_decrypt+0x18>
    24da:	54 c0       	rjmp	.+168    	; 0x2584 <aes_decrypt+0xc0>
    24dc:	e9 e6       	ldi	r30, 0x69	; 105
    24de:	fb e0       	ldi	r31, 0x0B	; 11
    24e0:	90 e1       	ldi	r25, 0x10	; 16
    24e2:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    24e4:	21 91       	ld	r18, Z+
    24e6:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    24ea:	9e 13       	cpse	r25, r30
    24ec:	fb cf       	rjmp	.-10     	; 0x24e4 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    24ee:	62 95       	swap	r22
    24f0:	6f 70       	andi	r22, 0x0F	; 15
    24f2:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    24f4:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    24f6:	6f 3f       	cpi	r22, 0xFF	; 255
    24f8:	09 f4       	brne	.+2      	; 0x24fc <aes_decrypt+0x38>
    24fa:	45 c0       	rjmp	.+138    	; 0x2586 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    24fc:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    2500:	46 2f       	mov	r20, r22
    2502:	55 27       	eor	r21, r21
    2504:	47 fd       	sbrc	r20, 7
    2506:	50 95       	com	r21
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	ed 01       	movw	r28, r26
    250e:	90 e1       	ldi	r25, 0x10	; 16
    2510:	69 02       	muls	r22, r25
    2512:	c0 0d       	add	r28, r0
    2514:	d1 1d       	adc	r29, r1
    2516:	11 24       	eor	r1, r1
    2518:	fe 01       	movw	r30, r28
    251a:	e2 0f       	add	r30, r18
    251c:	f3 1f       	adc	r31, r19
    251e:	90 81       	ld	r25, Z
    2520:	90 93 3e 01 	sts	0x013E, r25
    2524:	2f 5f       	subi	r18, 0xFF	; 255
    2526:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    2528:	20 31       	cpi	r18, 0x10	; 16
    252a:	31 05       	cpc	r19, r1
    252c:	a9 f7       	brne	.-22     	; 0x2518 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    252e:	90 91 3c 01 	lds	r25, 0x013C
    2532:	90 68       	ori	r25, 0x80	; 128
    2534:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    2538:	90 91 3d 01 	lds	r25, 0x013D
    253c:	90 ff       	sbrs	r25, 0
    253e:	fc cf       	rjmp	.-8      	; 0x2538 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    2540:	41 50       	subi	r20, 0x01	; 1
    2542:	51 09       	sbc	r21, r1
    2544:	94 e0       	ldi	r25, 0x04	; 4
    2546:	44 0f       	add	r20, r20
    2548:	55 1f       	adc	r21, r21
    254a:	9a 95       	dec	r25
    254c:	e1 f7       	brne	.-8      	; 0x2546 <aes_decrypt+0x82>
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    2552:	90 91 3e 01 	lds	r25, 0x013E
    2556:	8e 01       	movw	r16, r28
    2558:	02 0f       	add	r16, r18
    255a:	13 1f       	adc	r17, r19
    255c:	f8 01       	movw	r30, r16
    255e:	90 83       	st	Z, r25
         if(i!=0)
    2560:	66 23       	and	r22, r22
    2562:	49 f0       	breq	.+18     	; 0x2576 <aes_decrypt+0xb2>
    2564:	f9 01       	movw	r30, r18
    2566:	e4 0f       	add	r30, r20
    2568:	f5 1f       	adc	r31, r21
    256a:	ea 0f       	add	r30, r26
    256c:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    256e:	e0 81       	ld	r30, Z
    2570:	9e 27       	eor	r25, r30
    2572:	f8 01       	movw	r30, r16
    2574:	90 83       	st	Z, r25
    2576:	2f 5f       	subi	r18, 0xFF	; 255
    2578:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    257a:	20 31       	cpi	r18, 0x10	; 16
    257c:	31 05       	cpc	r19, r1
    257e:	49 f7       	brne	.-46     	; 0x2552 <aes_decrypt+0x8e>
    2580:	61 50       	subi	r22, 0x01	; 1
    2582:	b9 cf       	rjmp	.-142    	; 0x24f6 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	1f 91       	pop	r17
    258c:	0f 91       	pop	r16
    258e:	08 95       	ret

00002590 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    2590:	90 91 c0 00 	lds	r25, 0x00C0
    2594:	95 ff       	sbrs	r25, 5
    2596:	fc cf       	rjmp	.-8      	; 0x2590 <putc0>
    2598:	90 91 c0 00 	lds	r25, 0x00C0
    259c:	9f 7d       	andi	r25, 0xDF	; 223
    259e:	90 93 c0 00 	sts	0x00C0, r25
    25a2:	80 93 c6 00 	sts	0x00C6, r24
    25a6:	08 95       	ret

000025a8 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
    25a8:	1f 92       	push	r1
    25aa:	0f 92       	push	r0
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	0f 92       	push	r0
    25b0:	11 24       	eor	r1, r1
    25b2:	0b b6       	in	r0, 0x3b	; 59
    25b4:	0f 92       	push	r0
    25b6:	2f 93       	push	r18
    25b8:	3f 93       	push	r19
    25ba:	4f 93       	push	r20
    25bc:	5f 93       	push	r21
    25be:	6f 93       	push	r22
    25c0:	7f 93       	push	r23
    25c2:	8f 93       	push	r24
    25c4:	9f 93       	push	r25
    25c6:	af 93       	push	r26
    25c8:	bf 93       	push	r27
    25ca:	ef 93       	push	r30
    25cc:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
    25ce:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
    25d2:	80 91 c0 00 	lds	r24, 0x00C0
    25d6:	87 ff       	sbrs	r24, 7
    25d8:	fc cf       	rjmp	.-8      	; 0x25d2 <__vector_25+0x2a>
    25da:	80 91 c0 00 	lds	r24, 0x00C0
    25de:	8f 77       	andi	r24, 0x7F	; 127
    25e0:	80 93 c0 00 	sts	0x00C0, r24
    25e4:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
    25e8:	80 91 40 05 	lds	r24, 0x0540
    25ec:	90 91 41 05 	lds	r25, 0x0541
    25f0:	fc 01       	movw	r30, r24
    25f2:	e0 5d       	subi	r30, 0xD0	; 208
    25f4:	fa 4f       	sbci	r31, 0xFA	; 250
    25f6:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    25f8:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    25fa:	80 31       	cpi	r24, 0x10	; 16
    25fc:	91 05       	cpc	r25, r1
    25fe:	29 f0       	breq	.+10     	; 0x260a <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    2600:	90 93 41 05 	sts	0x0541, r25
    2604:	80 93 40 05 	sts	0x0540, r24
    2608:	04 c0       	rjmp	.+8      	; 0x2612 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    260a:	10 92 41 05 	sts	0x0541, r1
    260e:	10 92 40 05 	sts	0x0540, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    2612:	80 91 2f 05 	lds	r24, 0x052F
    2616:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    261a:	80 91 c0 00 	lds	r24, 0x00C0
    261e:	8f 77       	andi	r24, 0x7F	; 127
    2620:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    2624:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
}
    2628:	ff 91       	pop	r31
    262a:	ef 91       	pop	r30
    262c:	bf 91       	pop	r27
    262e:	af 91       	pop	r26
    2630:	9f 91       	pop	r25
    2632:	8f 91       	pop	r24
    2634:	7f 91       	pop	r23
    2636:	6f 91       	pop	r22
    2638:	5f 91       	pop	r21
    263a:	4f 91       	pop	r20
    263c:	3f 91       	pop	r19
    263e:	2f 91       	pop	r18
    2640:	0f 90       	pop	r0
    2642:	0b be       	out	0x3b, r0	; 59
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	0f 90       	pop	r0
    264a:	1f 90       	pop	r1
    264c:	18 95       	reti

0000264e <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    264e:	81 11       	cpse	r24, r1
    2650:	0d c0       	rjmp	.+26     	; 0x266c <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	40 91 42 05 	lds	r20, 0x0542
    2658:	50 91 43 05 	lds	r21, 0x0543
    265c:	20 91 40 05 	lds	r18, 0x0540
    2660:	30 91 41 05 	lds	r19, 0x0541
    2664:	42 17       	cp	r20, r18
    2666:	53 07       	cpc	r21, r19
    2668:	51 f4       	brne	.+20     	; 0x267e <nrk_uart_data_ready+0x30>
    266a:	08 c0       	rjmp	.+16     	; 0x267c <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    266c:	81 30       	cpi	r24, 0x01	; 1
    266e:	31 f4       	brne	.+12     	; 0x267c <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    2670:	80 91 c8 00 	lds	r24, 0x00C8
    2674:	88 1f       	adc	r24, r24
    2676:	88 27       	eor	r24, r24
    2678:	88 1f       	adc	r24, r24
    267a:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    267c:	80 e0       	ldi	r24, 0x00	; 0
}
    267e:	08 95       	ret

00002680 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2680:	80 91 2f 05 	lds	r24, 0x052F
    2684:	8f 3f       	cpi	r24, 0xFF	; 255
    2686:	19 f4       	brne	.+6      	; 0x268e <nrk_uart_rx_signal_get+0xe>
    2688:	8e e0       	ldi	r24, 0x0E	; 14
    268a:	0e 94 48 1a 	call	0x3490	; 0x3490 <nrk_error_add>
   return uart_rx_signal;
}
    268e:	80 91 2f 05 	lds	r24, 0x052F
    2692:	08 95       	ret

00002694 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    2698:	fc 01       	movw	r30, r24
    269a:	24 91       	lpm	r18, Z
    269c:	ec 01       	movw	r28, r24
    269e:	21 96       	adiw	r28, 0x01	; 1
    26a0:	22 23       	and	r18, r18
    26a2:	51 f0       	breq	.+20     	; 0x26b8 <nrk_kprintf+0x24>
        putchar(c);
    26a4:	60 91 0c 0d 	lds	r22, 0x0D0C
    26a8:	70 91 0d 0d 	lds	r23, 0x0D0D
    26ac:	82 2f       	mov	r24, r18
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    26b4:	ce 01       	movw	r24, r28
    26b6:	f0 cf       	rjmp	.-32     	; 0x2698 <nrk_kprintf+0x4>
}
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	08 95       	ret

000026be <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    26be:	20 91 42 05 	lds	r18, 0x0542
    26c2:	30 91 43 05 	lds	r19, 0x0543
    26c6:	80 91 40 05 	lds	r24, 0x0540
    26ca:	90 91 41 05 	lds	r25, 0x0541
    26ce:	28 17       	cp	r18, r24
    26d0:	39 07       	cpc	r19, r25
    26d2:	69 f4       	brne	.+26     	; 0x26ee <getc0+0x30>
    26d4:	80 91 2f 05 	lds	r24, 0x052F
    26d8:	0e 94 17 1d 	call	0x3a2e	; 0x3a2e <nrk_signal_register>
    26dc:	60 91 2f 05 	lds	r22, 0x052F
    26e0:	77 27       	eor	r23, r23
    26e2:	67 fd       	sbrc	r22, 7
    26e4:	70 95       	com	r23
    26e6:	87 2f       	mov	r24, r23
    26e8:	97 2f       	mov	r25, r23
    26ea:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    26ee:	6f 3f       	cpi	r22, 0xFF	; 255
    26f0:	21 f4       	brne	.+8      	; 0x26fa <getc0+0x3c>
    26f2:	87 e3       	ldi	r24, 0x37	; 55
    26f4:	93 e0       	ldi	r25, 0x03	; 3
    26f6:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    26fa:	20 91 42 05 	lds	r18, 0x0542
    26fe:	30 91 43 05 	lds	r19, 0x0543
    2702:	f9 01       	movw	r30, r18
    2704:	e0 5d       	subi	r30, 0xD0	; 208
    2706:	fa 4f       	sbci	r31, 0xFA	; 250
    2708:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    270a:	2f 5f       	subi	r18, 0xFF	; 255
    270c:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    270e:	20 31       	cpi	r18, 0x10	; 16
    2710:	31 05       	cpc	r19, r1
    2712:	28 f4       	brcc	.+10     	; 0x271e <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    2714:	30 93 43 05 	sts	0x0543, r19
    2718:	20 93 42 05 	sts	0x0542, r18
    271c:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    271e:	10 92 43 05 	sts	0x0543, r1
    2722:	10 92 42 05 	sts	0x0542, r1

   return tmp;
}
    2726:	08 95       	ret

00002728 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    2728:	86 e0       	ldi	r24, 0x06	; 6
    272a:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    272c:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    272e:	88 ef       	ldi	r24, 0xF8	; 248
    2730:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2732:	80 ef       	ldi	r24, 0xF0	; 240
    2734:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	8d b9       	out	0x0d, r24	; 13
    273a:	08 95       	ret

0000273c <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    273c:	0c 94 94 13 	jmp	0x2728	; 0x2728 <PORT_INIT>

00002740 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2740:	8f 3f       	cpi	r24, 0xFF	; 255
    2742:	09 f4       	brne	.+2      	; 0x2746 <nrk_gpio_set+0x6>
    2744:	6c c0       	rjmp	.+216    	; 0x281e <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2746:	e8 2f       	mov	r30, r24
    2748:	e7 70       	andi	r30, 0x07	; 7
    274a:	4e 2f       	mov	r20, r30
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	47 30       	cpi	r20, 0x07	; 7
    2750:	51 05       	cpc	r21, r1
    2752:	08 f0       	brcs	.+2      	; 0x2756 <nrk_gpio_set+0x16>
    2754:	64 c0       	rjmp	.+200    	; 0x281e <nrk_gpio_set+0xde>
    2756:	fa 01       	movw	r30, r20
    2758:	e0 57       	subi	r30, 0x70	; 112
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	86 95       	lsr	r24
    275e:	86 95       	lsr	r24
    2760:	86 95       	lsr	r24
    2762:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2766:	42 b1       	in	r20, 0x02	; 2
    2768:	21 e0       	ldi	r18, 0x01	; 1
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	b9 01       	movw	r22, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <nrk_gpio_set+0x34>
    2770:	66 0f       	add	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	8a 95       	dec	r24
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <nrk_gpio_set+0x30>
    2778:	cb 01       	movw	r24, r22
    277a:	84 2b       	or	r24, r20
    277c:	82 b9       	out	0x02, r24	; 2
    277e:	4d c0       	rjmp	.+154    	; 0x281a <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2780:	45 b1       	in	r20, 0x05	; 5
    2782:	21 e0       	ldi	r18, 0x01	; 1
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	b9 01       	movw	r22, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <nrk_gpio_set+0x4e>
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	8a 95       	dec	r24
    2790:	e2 f7       	brpl	.-8      	; 0x278a <nrk_gpio_set+0x4a>
    2792:	cb 01       	movw	r24, r22
    2794:	84 2b       	or	r24, r20
    2796:	85 b9       	out	0x05, r24	; 5
    2798:	40 c0       	rjmp	.+128    	; 0x281a <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    279a:	48 b1       	in	r20, 0x08	; 8
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	b9 01       	movw	r22, r18
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <nrk_gpio_set+0x68>
    27a4:	66 0f       	add	r22, r22
    27a6:	77 1f       	adc	r23, r23
    27a8:	8a 95       	dec	r24
    27aa:	e2 f7       	brpl	.-8      	; 0x27a4 <nrk_gpio_set+0x64>
    27ac:	cb 01       	movw	r24, r22
    27ae:	84 2b       	or	r24, r20
    27b0:	88 b9       	out	0x08, r24	; 8
    27b2:	33 c0       	rjmp	.+102    	; 0x281a <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    27b4:	4b b1       	in	r20, 0x0b	; 11
    27b6:	21 e0       	ldi	r18, 0x01	; 1
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	b9 01       	movw	r22, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <nrk_gpio_set+0x82>
    27be:	66 0f       	add	r22, r22
    27c0:	77 1f       	adc	r23, r23
    27c2:	8a 95       	dec	r24
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <nrk_gpio_set+0x7e>
    27c6:	cb 01       	movw	r24, r22
    27c8:	84 2b       	or	r24, r20
    27ca:	8b b9       	out	0x0b, r24	; 11
    27cc:	26 c0       	rjmp	.+76     	; 0x281a <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    27ce:	4e b1       	in	r20, 0x0e	; 14
    27d0:	21 e0       	ldi	r18, 0x01	; 1
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	b9 01       	movw	r22, r18
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <nrk_gpio_set+0x9c>
    27d8:	66 0f       	add	r22, r22
    27da:	77 1f       	adc	r23, r23
    27dc:	8a 95       	dec	r24
    27de:	e2 f7       	brpl	.-8      	; 0x27d8 <nrk_gpio_set+0x98>
    27e0:	cb 01       	movw	r24, r22
    27e2:	84 2b       	or	r24, r20
    27e4:	8e b9       	out	0x0e, r24	; 14
    27e6:	19 c0       	rjmp	.+50     	; 0x281a <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    27e8:	41 b3       	in	r20, 0x11	; 17
    27ea:	21 e0       	ldi	r18, 0x01	; 1
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	b9 01       	movw	r22, r18
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <nrk_gpio_set+0xb6>
    27f2:	66 0f       	add	r22, r22
    27f4:	77 1f       	adc	r23, r23
    27f6:	8a 95       	dec	r24
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <nrk_gpio_set+0xb2>
    27fa:	cb 01       	movw	r24, r22
    27fc:	84 2b       	or	r24, r20
    27fe:	81 bb       	out	0x11, r24	; 17
    2800:	0c c0       	rjmp	.+24     	; 0x281a <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2802:	44 b3       	in	r20, 0x14	; 20
    2804:	21 e0       	ldi	r18, 0x01	; 1
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	b9 01       	movw	r22, r18
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <nrk_gpio_set+0xd0>
    280c:	66 0f       	add	r22, r22
    280e:	77 1f       	adc	r23, r23
    2810:	8a 95       	dec	r24
    2812:	e2 f7       	brpl	.-8      	; 0x280c <nrk_gpio_set+0xcc>
    2814:	cb 01       	movw	r24, r22
    2816:	84 2b       	or	r24, r20
    2818:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    281c:	08 95       	ret
                default: return -1;
    281e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2820:	08 95       	ret

00002822 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2822:	8f 3f       	cpi	r24, 0xFF	; 255
    2824:	09 f4       	brne	.+2      	; 0x2828 <nrk_gpio_clr+0x6>
    2826:	65 c0       	rjmp	.+202    	; 0x28f2 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    2828:	e8 2f       	mov	r30, r24
    282a:	e7 70       	andi	r30, 0x07	; 7
    282c:	4e 2f       	mov	r20, r30
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	47 30       	cpi	r20, 0x07	; 7
    2832:	51 05       	cpc	r21, r1
    2834:	08 f0       	brcs	.+2      	; 0x2838 <nrk_gpio_clr+0x16>
    2836:	5d c0       	rjmp	.+186    	; 0x28f2 <nrk_gpio_clr+0xd0>
    2838:	fa 01       	movw	r30, r20
    283a:	e9 56       	subi	r30, 0x69	; 105
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	86 95       	lsr	r24
    2840:	86 95       	lsr	r24
    2842:	86 95       	lsr	r24
    2844:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2848:	42 b1       	in	r20, 0x02	; 2
    284a:	21 e0       	ldi	r18, 0x01	; 1
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	b9 01       	movw	r22, r18
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <nrk_gpio_clr+0x34>
    2852:	66 0f       	add	r22, r22
    2854:	77 1f       	adc	r23, r23
    2856:	8a 95       	dec	r24
    2858:	e2 f7       	brpl	.-8      	; 0x2852 <nrk_gpio_clr+0x30>
    285a:	cb 01       	movw	r24, r22
    285c:	80 95       	com	r24
    285e:	84 23       	and	r24, r20
    2860:	82 b9       	out	0x02, r24	; 2
    2862:	45 c0       	rjmp	.+138    	; 0x28ee <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2864:	45 b1       	in	r20, 0x05	; 5
    2866:	21 e0       	ldi	r18, 0x01	; 1
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	b9 01       	movw	r22, r18
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <nrk_gpio_clr+0x50>
    286e:	66 0f       	add	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	8a 95       	dec	r24
    2874:	e2 f7       	brpl	.-8      	; 0x286e <nrk_gpio_clr+0x4c>
    2876:	cb 01       	movw	r24, r22
    2878:	80 95       	com	r24
    287a:	84 23       	and	r24, r20
    287c:	85 b9       	out	0x05, r24	; 5
    287e:	37 c0       	rjmp	.+110    	; 0x28ee <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2880:	48 b1       	in	r20, 0x08	; 8
    2882:	21 e0       	ldi	r18, 0x01	; 1
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	b9 01       	movw	r22, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <nrk_gpio_clr+0x6c>
    288a:	66 0f       	add	r22, r22
    288c:	77 1f       	adc	r23, r23
    288e:	8a 95       	dec	r24
    2890:	e2 f7       	brpl	.-8      	; 0x288a <nrk_gpio_clr+0x68>
    2892:	cb 01       	movw	r24, r22
    2894:	80 95       	com	r24
    2896:	84 23       	and	r24, r20
    2898:	88 b9       	out	0x08, r24	; 8
    289a:	29 c0       	rjmp	.+82     	; 0x28ee <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    289c:	4b b1       	in	r20, 0x0b	; 11
    289e:	21 e0       	ldi	r18, 0x01	; 1
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	b9 01       	movw	r22, r18
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <nrk_gpio_clr+0x88>
    28a6:	66 0f       	add	r22, r22
    28a8:	77 1f       	adc	r23, r23
    28aa:	8a 95       	dec	r24
    28ac:	e2 f7       	brpl	.-8      	; 0x28a6 <nrk_gpio_clr+0x84>
    28ae:	cb 01       	movw	r24, r22
    28b0:	80 95       	com	r24
    28b2:	84 23       	and	r24, r20
    28b4:	8b b9       	out	0x0b, r24	; 11
    28b6:	1b c0       	rjmp	.+54     	; 0x28ee <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    28b8:	4e b1       	in	r20, 0x0e	; 14
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	b9 01       	movw	r22, r18
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <nrk_gpio_clr+0xa4>
    28c2:	66 0f       	add	r22, r22
    28c4:	77 1f       	adc	r23, r23
    28c6:	8a 95       	dec	r24
    28c8:	e2 f7       	brpl	.-8      	; 0x28c2 <nrk_gpio_clr+0xa0>
    28ca:	cb 01       	movw	r24, r22
    28cc:	80 95       	com	r24
    28ce:	84 23       	and	r24, r20
    28d0:	8e b9       	out	0x0e, r24	; 14
    28d2:	0d c0       	rjmp	.+26     	; 0x28ee <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    28d4:	41 b3       	in	r20, 0x11	; 17
    28d6:	21 e0       	ldi	r18, 0x01	; 1
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	b9 01       	movw	r22, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <nrk_gpio_clr+0xc0>
    28de:	66 0f       	add	r22, r22
    28e0:	77 1f       	adc	r23, r23
    28e2:	8a 95       	dec	r24
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <nrk_gpio_clr+0xbc>
    28e6:	cb 01       	movw	r24, r22
    28e8:	80 95       	com	r24
    28ea:	84 23       	and	r24, r20
    28ec:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    28f0:	08 95       	ret
                default: return -1;
    28f2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    28f4:	08 95       	ret

000028f6 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    28f6:	8f 3f       	cpi	r24, 0xFF	; 255
    28f8:	31 f1       	breq	.+76     	; 0x2946 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    28fa:	e8 2f       	mov	r30, r24
    28fc:	e7 70       	andi	r30, 0x07	; 7
    28fe:	4e 2f       	mov	r20, r30
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	47 30       	cpi	r20, 0x07	; 7
    2904:	51 05       	cpc	r21, r1
    2906:	f8 f4       	brcc	.+62     	; 0x2946 <nrk_gpio_get+0x50>
    2908:	fa 01       	movw	r30, r20
    290a:	e2 56       	subi	r30, 0x62	; 98
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	28 2f       	mov	r18, r24
    2910:	26 95       	lsr	r18
    2912:	26 95       	lsr	r18
    2914:	26 95       	lsr	r18
    2916:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    291a:	90 b1       	in	r25, 0x00	; 0
    291c:	0b c0       	rjmp	.+22     	; 0x2934 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    291e:	93 b1       	in	r25, 0x03	; 3
    2920:	09 c0       	rjmp	.+18     	; 0x2934 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2922:	96 b1       	in	r25, 0x06	; 6
    2924:	07 c0       	rjmp	.+14     	; 0x2934 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2926:	99 b1       	in	r25, 0x09	; 9
    2928:	05 c0       	rjmp	.+10     	; 0x2934 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    292a:	9c b1       	in	r25, 0x0c	; 12
    292c:	03 c0       	rjmp	.+6      	; 0x2934 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    292e:	9f b1       	in	r25, 0x0f	; 15
    2930:	01 c0       	rjmp	.+2      	; 0x2934 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2932:	92 b3       	in	r25, 0x12	; 18
    2934:	89 2f       	mov	r24, r25
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	02 c0       	rjmp	.+4      	; 0x293e <nrk_gpio_get+0x48>
    293a:	95 95       	asr	r25
    293c:	87 95       	ror	r24
    293e:	2a 95       	dec	r18
    2940:	e2 f7       	brpl	.-8      	; 0x293a <nrk_gpio_get+0x44>
    2942:	81 70       	andi	r24, 0x01	; 1
    2944:	08 95       	ret
                default: return -1;
    2946:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2948:	08 95       	ret

0000294a <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    294a:	8f 3f       	cpi	r24, 0xFF	; 255
    294c:	09 f4       	brne	.+2      	; 0x2950 <nrk_gpio_toggle+0x6>
    294e:	06 c1       	rjmp	.+524    	; 0x2b5c <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    2950:	e8 2f       	mov	r30, r24
    2952:	e7 70       	andi	r30, 0x07	; 7
    2954:	4e 2f       	mov	r20, r30
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	47 30       	cpi	r20, 0x07	; 7
    295a:	51 05       	cpc	r21, r1
    295c:	08 f0       	brcs	.+2      	; 0x2960 <nrk_gpio_toggle+0x16>
    295e:	fe c0       	rjmp	.+508    	; 0x2b5c <nrk_gpio_toggle+0x212>
    2960:	fa 01       	movw	r30, r20
    2962:	eb 55       	subi	r30, 0x5B	; 91
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	86 95       	lsr	r24
    2968:	86 95       	lsr	r24
    296a:	86 95       	lsr	r24
    296c:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2970:	20 b1       	in	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	08 2e       	mov	r0, r24
    2976:	02 c0       	rjmp	.+4      	; 0x297c <nrk_gpio_toggle+0x32>
    2978:	35 95       	asr	r19
    297a:	27 95       	ror	r18
    297c:	0a 94       	dec	r0
    297e:	e2 f7       	brpl	.-8      	; 0x2978 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2980:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    2982:	20 fd       	sbrc	r18, 0
    2984:	0b c0       	rjmp	.+22     	; 0x299c <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    2986:	21 e0       	ldi	r18, 0x01	; 1
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	b9 01       	movw	r22, r18
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <nrk_gpio_toggle+0x48>
    298e:	66 0f       	add	r22, r22
    2990:	77 1f       	adc	r23, r23
    2992:	8a 95       	dec	r24
    2994:	e2 f7       	brpl	.-8      	; 0x298e <nrk_gpio_toggle+0x44>
    2996:	cb 01       	movw	r24, r22
    2998:	84 2b       	or	r24, r20
    299a:	0b c0       	rjmp	.+22     	; 0x29b2 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    299c:	21 e0       	ldi	r18, 0x01	; 1
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	b9 01       	movw	r22, r18
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <nrk_gpio_toggle+0x5e>
    29a4:	66 0f       	add	r22, r22
    29a6:	77 1f       	adc	r23, r23
    29a8:	8a 95       	dec	r24
    29aa:	e2 f7       	brpl	.-8      	; 0x29a4 <nrk_gpio_toggle+0x5a>
    29ac:	cb 01       	movw	r24, r22
    29ae:	80 95       	com	r24
    29b0:	84 23       	and	r24, r20
    29b2:	82 b9       	out	0x02, r24	; 2
    29b4:	16 c0       	rjmp	.+44     	; 0x29e2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    29b6:	23 b1       	in	r18, 0x03	; 3
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	08 2e       	mov	r0, r24
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <nrk_gpio_toggle+0x78>
    29be:	35 95       	asr	r19
    29c0:	27 95       	ror	r18
    29c2:	0a 94       	dec	r0
    29c4:	e2 f7       	brpl	.-8      	; 0x29be <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    29c6:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    29c8:	20 fd       	sbrc	r18, 0
    29ca:	0d c0       	rjmp	.+26     	; 0x29e6 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    29cc:	21 e0       	ldi	r18, 0x01	; 1
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	b9 01       	movw	r22, r18
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <nrk_gpio_toggle+0x8e>
    29d4:	66 0f       	add	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	8a 95       	dec	r24
    29da:	e2 f7       	brpl	.-8      	; 0x29d4 <nrk_gpio_toggle+0x8a>
    29dc:	cb 01       	movw	r24, r22
    29de:	84 2b       	or	r24, r20
    29e0:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    29e6:	21 e0       	ldi	r18, 0x01	; 1
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	b9 01       	movw	r22, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <nrk_gpio_toggle+0xa8>
    29ee:	66 0f       	add	r22, r22
    29f0:	77 1f       	adc	r23, r23
    29f2:	8a 95       	dec	r24
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <nrk_gpio_toggle+0xa4>
    29f6:	cb 01       	movw	r24, r22
    29f8:	80 95       	com	r24
    29fa:	84 23       	and	r24, r20
    29fc:	f1 cf       	rjmp	.-30     	; 0x29e0 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    29fe:	26 b1       	in	r18, 0x06	; 6
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	08 2e       	mov	r0, r24
    2a04:	02 c0       	rjmp	.+4      	; 0x2a0a <nrk_gpio_toggle+0xc0>
    2a06:	35 95       	asr	r19
    2a08:	27 95       	ror	r18
    2a0a:	0a 94       	dec	r0
    2a0c:	e2 f7       	brpl	.-8      	; 0x2a06 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2a0e:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2a10:	20 fd       	sbrc	r18, 0
    2a12:	0b c0       	rjmp	.+22     	; 0x2a2a <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2a14:	21 e0       	ldi	r18, 0x01	; 1
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	b9 01       	movw	r22, r18
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <nrk_gpio_toggle+0xd6>
    2a1c:	66 0f       	add	r22, r22
    2a1e:	77 1f       	adc	r23, r23
    2a20:	8a 95       	dec	r24
    2a22:	e2 f7       	brpl	.-8      	; 0x2a1c <nrk_gpio_toggle+0xd2>
    2a24:	cb 01       	movw	r24, r22
    2a26:	84 2b       	or	r24, r20
    2a28:	0b c0       	rjmp	.+22     	; 0x2a40 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2a2a:	21 e0       	ldi	r18, 0x01	; 1
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	b9 01       	movw	r22, r18
    2a30:	02 c0       	rjmp	.+4      	; 0x2a36 <nrk_gpio_toggle+0xec>
    2a32:	66 0f       	add	r22, r22
    2a34:	77 1f       	adc	r23, r23
    2a36:	8a 95       	dec	r24
    2a38:	e2 f7       	brpl	.-8      	; 0x2a32 <nrk_gpio_toggle+0xe8>
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	80 95       	com	r24
    2a3e:	84 23       	and	r24, r20
    2a40:	88 b9       	out	0x08, r24	; 8
    2a42:	cf cf       	rjmp	.-98     	; 0x29e2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2a44:	29 b1       	in	r18, 0x09	; 9
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	08 2e       	mov	r0, r24
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <nrk_gpio_toggle+0x106>
    2a4c:	35 95       	asr	r19
    2a4e:	27 95       	ror	r18
    2a50:	0a 94       	dec	r0
    2a52:	e2 f7       	brpl	.-8      	; 0x2a4c <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2a54:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2a56:	20 fd       	sbrc	r18, 0
    2a58:	0b c0       	rjmp	.+22     	; 0x2a70 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2a5a:	21 e0       	ldi	r18, 0x01	; 1
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	b9 01       	movw	r22, r18
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <nrk_gpio_toggle+0x11c>
    2a62:	66 0f       	add	r22, r22
    2a64:	77 1f       	adc	r23, r23
    2a66:	8a 95       	dec	r24
    2a68:	e2 f7       	brpl	.-8      	; 0x2a62 <nrk_gpio_toggle+0x118>
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	84 2b       	or	r24, r20
    2a6e:	0b c0       	rjmp	.+22     	; 0x2a86 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2a70:	21 e0       	ldi	r18, 0x01	; 1
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	b9 01       	movw	r22, r18
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <nrk_gpio_toggle+0x132>
    2a78:	66 0f       	add	r22, r22
    2a7a:	77 1f       	adc	r23, r23
    2a7c:	8a 95       	dec	r24
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <nrk_gpio_toggle+0x12e>
    2a80:	cb 01       	movw	r24, r22
    2a82:	80 95       	com	r24
    2a84:	84 23       	and	r24, r20
    2a86:	8b b9       	out	0x0b, r24	; 11
    2a88:	ac cf       	rjmp	.-168    	; 0x29e2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2a8a:	2c b1       	in	r18, 0x0c	; 12
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	08 2e       	mov	r0, r24
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <nrk_gpio_toggle+0x14c>
    2a92:	35 95       	asr	r19
    2a94:	27 95       	ror	r18
    2a96:	0a 94       	dec	r0
    2a98:	e2 f7       	brpl	.-8      	; 0x2a92 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2a9a:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    2a9c:	20 fd       	sbrc	r18, 0
    2a9e:	0b c0       	rjmp	.+22     	; 0x2ab6 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    2aa0:	21 e0       	ldi	r18, 0x01	; 1
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	b9 01       	movw	r22, r18
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <nrk_gpio_toggle+0x162>
    2aa8:	66 0f       	add	r22, r22
    2aaa:	77 1f       	adc	r23, r23
    2aac:	8a 95       	dec	r24
    2aae:	e2 f7       	brpl	.-8      	; 0x2aa8 <nrk_gpio_toggle+0x15e>
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	84 2b       	or	r24, r20
    2ab4:	0b c0       	rjmp	.+22     	; 0x2acc <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    2ab6:	21 e0       	ldi	r18, 0x01	; 1
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	b9 01       	movw	r22, r18
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <nrk_gpio_toggle+0x178>
    2abe:	66 0f       	add	r22, r22
    2ac0:	77 1f       	adc	r23, r23
    2ac2:	8a 95       	dec	r24
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <nrk_gpio_toggle+0x174>
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	80 95       	com	r24
    2aca:	84 23       	and	r24, r20
    2acc:	8e b9       	out	0x0e, r24	; 14
    2ace:	89 cf       	rjmp	.-238    	; 0x29e2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2ad0:	2f b1       	in	r18, 0x0f	; 15
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	08 2e       	mov	r0, r24
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <nrk_gpio_toggle+0x192>
    2ad8:	35 95       	asr	r19
    2ada:	27 95       	ror	r18
    2adc:	0a 94       	dec	r0
    2ade:	e2 f7       	brpl	.-8      	; 0x2ad8 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2ae0:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2ae2:	20 fd       	sbrc	r18, 0
    2ae4:	0b c0       	rjmp	.+22     	; 0x2afc <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2ae6:	21 e0       	ldi	r18, 0x01	; 1
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	b9 01       	movw	r22, r18
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <nrk_gpio_toggle+0x1a8>
    2aee:	66 0f       	add	r22, r22
    2af0:	77 1f       	adc	r23, r23
    2af2:	8a 95       	dec	r24
    2af4:	e2 f7       	brpl	.-8      	; 0x2aee <nrk_gpio_toggle+0x1a4>
    2af6:	cb 01       	movw	r24, r22
    2af8:	84 2b       	or	r24, r20
    2afa:	0b c0       	rjmp	.+22     	; 0x2b12 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2afc:	21 e0       	ldi	r18, 0x01	; 1
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	b9 01       	movw	r22, r18
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <nrk_gpio_toggle+0x1be>
    2b04:	66 0f       	add	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	8a 95       	dec	r24
    2b0a:	e2 f7       	brpl	.-8      	; 0x2b04 <nrk_gpio_toggle+0x1ba>
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	80 95       	com	r24
    2b10:	84 23       	and	r24, r20
    2b12:	81 bb       	out	0x11, r24	; 17
    2b14:	66 cf       	rjmp	.-308    	; 0x29e2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2b16:	22 b3       	in	r18, 0x12	; 18
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	08 2e       	mov	r0, r24
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <nrk_gpio_toggle+0x1d8>
    2b1e:	35 95       	asr	r19
    2b20:	27 95       	ror	r18
    2b22:	0a 94       	dec	r0
    2b24:	e2 f7       	brpl	.-8      	; 0x2b1e <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2b26:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2b28:	20 fd       	sbrc	r18, 0
    2b2a:	0b c0       	rjmp	.+22     	; 0x2b42 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	b9 01       	movw	r22, r18
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <nrk_gpio_toggle+0x1ee>
    2b34:	66 0f       	add	r22, r22
    2b36:	77 1f       	adc	r23, r23
    2b38:	8a 95       	dec	r24
    2b3a:	e2 f7       	brpl	.-8      	; 0x2b34 <nrk_gpio_toggle+0x1ea>
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	84 2b       	or	r24, r20
    2b40:	0b c0       	rjmp	.+22     	; 0x2b58 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2b42:	21 e0       	ldi	r18, 0x01	; 1
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	b9 01       	movw	r22, r18
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <nrk_gpio_toggle+0x204>
    2b4a:	66 0f       	add	r22, r22
    2b4c:	77 1f       	adc	r23, r23
    2b4e:	8a 95       	dec	r24
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <nrk_gpio_toggle+0x200>
    2b52:	cb 01       	movw	r24, r22
    2b54:	80 95       	com	r24
    2b56:	84 23       	and	r24, r20
    2b58:	84 bb       	out	0x14, r24	; 20
    2b5a:	43 cf       	rjmp	.-378    	; 0x29e2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    2b5c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2b5e:	08 95       	ret

00002b60 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2b60:	8f 3f       	cpi	r24, 0xFF	; 255
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <nrk_gpio_direction+0x6>
    2b64:	d5 c0       	rjmp	.+426    	; 0x2d10 <nrk_gpio_direction+0x1b0>
    2b66:	e8 2f       	mov	r30, r24
    2b68:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2b6a:	4e 2f       	mov	r20, r30
    2b6c:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2b6e:	61 11       	cpse	r22, r1
    2b70:	67 c0       	rjmp	.+206    	; 0x2c40 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    2b72:	47 30       	cpi	r20, 0x07	; 7
    2b74:	51 05       	cpc	r21, r1
    2b76:	08 f0       	brcs	.+2      	; 0x2b7a <nrk_gpio_direction+0x1a>
    2b78:	cb c0       	rjmp	.+406    	; 0x2d10 <nrk_gpio_direction+0x1b0>
    2b7a:	fa 01       	movw	r30, r20
    2b7c:	e4 55       	subi	r30, 0x54	; 84
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	86 95       	lsr	r24
    2b82:	86 95       	lsr	r24
    2b84:	86 95       	lsr	r24
    2b86:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    2b8a:	41 b1       	in	r20, 0x01	; 1
    2b8c:	21 e0       	ldi	r18, 0x01	; 1
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	b9 01       	movw	r22, r18
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <nrk_gpio_direction+0x38>
    2b94:	66 0f       	add	r22, r22
    2b96:	77 1f       	adc	r23, r23
    2b98:	8a 95       	dec	r24
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <nrk_gpio_direction+0x34>
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	80 95       	com	r24
    2ba0:	84 23       	and	r24, r20
    2ba2:	65 c0       	rjmp	.+202    	; 0x2c6e <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    2ba4:	44 b1       	in	r20, 0x04	; 4
    2ba6:	21 e0       	ldi	r18, 0x01	; 1
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	b9 01       	movw	r22, r18
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <nrk_gpio_direction+0x52>
    2bae:	66 0f       	add	r22, r22
    2bb0:	77 1f       	adc	r23, r23
    2bb2:	8a 95       	dec	r24
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <nrk_gpio_direction+0x4e>
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	80 95       	com	r24
    2bba:	84 23       	and	r24, r20
    2bbc:	65 c0       	rjmp	.+202    	; 0x2c88 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    2bbe:	47 b1       	in	r20, 0x07	; 7
    2bc0:	21 e0       	ldi	r18, 0x01	; 1
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	b9 01       	movw	r22, r18
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <nrk_gpio_direction+0x6c>
    2bc8:	66 0f       	add	r22, r22
    2bca:	77 1f       	adc	r23, r23
    2bcc:	8a 95       	dec	r24
    2bce:	e2 f7       	brpl	.-8      	; 0x2bc8 <nrk_gpio_direction+0x68>
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	80 95       	com	r24
    2bd4:	84 23       	and	r24, r20
    2bd6:	65 c0       	rjmp	.+202    	; 0x2ca2 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    2bd8:	4a b1       	in	r20, 0x0a	; 10
    2bda:	21 e0       	ldi	r18, 0x01	; 1
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	b9 01       	movw	r22, r18
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <nrk_gpio_direction+0x86>
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	8a 95       	dec	r24
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <nrk_gpio_direction+0x82>
    2bea:	cb 01       	movw	r24, r22
    2bec:	80 95       	com	r24
    2bee:	84 23       	and	r24, r20
    2bf0:	65 c0       	rjmp	.+202    	; 0x2cbc <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2bf2:	4d b1       	in	r20, 0x0d	; 13
    2bf4:	21 e0       	ldi	r18, 0x01	; 1
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	b9 01       	movw	r22, r18
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <nrk_gpio_direction+0xa0>
    2bfc:	66 0f       	add	r22, r22
    2bfe:	77 1f       	adc	r23, r23
    2c00:	8a 95       	dec	r24
    2c02:	e2 f7       	brpl	.-8      	; 0x2bfc <nrk_gpio_direction+0x9c>
    2c04:	cb 01       	movw	r24, r22
    2c06:	80 95       	com	r24
    2c08:	84 23       	and	r24, r20
    2c0a:	65 c0       	rjmp	.+202    	; 0x2cd6 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    2c0c:	40 b3       	in	r20, 0x10	; 16
    2c0e:	21 e0       	ldi	r18, 0x01	; 1
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	b9 01       	movw	r22, r18
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <nrk_gpio_direction+0xba>
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	8a 95       	dec	r24
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <nrk_gpio_direction+0xb6>
    2c1e:	cb 01       	movw	r24, r22
    2c20:	80 95       	com	r24
    2c22:	84 23       	and	r24, r20
    2c24:	65 c0       	rjmp	.+202    	; 0x2cf0 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    2c26:	43 b3       	in	r20, 0x13	; 19
    2c28:	21 e0       	ldi	r18, 0x01	; 1
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	b9 01       	movw	r22, r18
    2c2e:	02 c0       	rjmp	.+4      	; 0x2c34 <nrk_gpio_direction+0xd4>
    2c30:	66 0f       	add	r22, r22
    2c32:	77 1f       	adc	r23, r23
    2c34:	8a 95       	dec	r24
    2c36:	e2 f7       	brpl	.-8      	; 0x2c30 <nrk_gpio_direction+0xd0>
    2c38:	cb 01       	movw	r24, r22
    2c3a:	80 95       	com	r24
    2c3c:	84 23       	and	r24, r20
    2c3e:	65 c0       	rjmp	.+202    	; 0x2d0a <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    2c40:	47 30       	cpi	r20, 0x07	; 7
    2c42:	51 05       	cpc	r21, r1
    2c44:	08 f0       	brcs	.+2      	; 0x2c48 <nrk_gpio_direction+0xe8>
    2c46:	64 c0       	rjmp	.+200    	; 0x2d10 <nrk_gpio_direction+0x1b0>
    2c48:	fa 01       	movw	r30, r20
    2c4a:	ed 54       	subi	r30, 0x4D	; 77
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	86 95       	lsr	r24
    2c50:	86 95       	lsr	r24
    2c52:	86 95       	lsr	r24
    2c54:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    2c58:	41 b1       	in	r20, 0x01	; 1
    2c5a:	21 e0       	ldi	r18, 0x01	; 1
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	b9 01       	movw	r22, r18
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <nrk_gpio_direction+0x106>
    2c62:	66 0f       	add	r22, r22
    2c64:	77 1f       	adc	r23, r23
    2c66:	8a 95       	dec	r24
    2c68:	e2 f7       	brpl	.-8      	; 0x2c62 <nrk_gpio_direction+0x102>
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	84 2b       	or	r24, r20
    2c6e:	81 b9       	out	0x01, r24	; 1
    2c70:	4d c0       	rjmp	.+154    	; 0x2d0c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2c72:	44 b1       	in	r20, 0x04	; 4
    2c74:	21 e0       	ldi	r18, 0x01	; 1
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	b9 01       	movw	r22, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <nrk_gpio_direction+0x120>
    2c7c:	66 0f       	add	r22, r22
    2c7e:	77 1f       	adc	r23, r23
    2c80:	8a 95       	dec	r24
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <nrk_gpio_direction+0x11c>
    2c84:	cb 01       	movw	r24, r22
    2c86:	84 2b       	or	r24, r20
    2c88:	84 b9       	out	0x04, r24	; 4
    2c8a:	40 c0       	rjmp	.+128    	; 0x2d0c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    2c8c:	47 b1       	in	r20, 0x07	; 7
    2c8e:	21 e0       	ldi	r18, 0x01	; 1
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	b9 01       	movw	r22, r18
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <nrk_gpio_direction+0x13a>
    2c96:	66 0f       	add	r22, r22
    2c98:	77 1f       	adc	r23, r23
    2c9a:	8a 95       	dec	r24
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <nrk_gpio_direction+0x136>
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	84 2b       	or	r24, r20
    2ca2:	87 b9       	out	0x07, r24	; 7
    2ca4:	33 c0       	rjmp	.+102    	; 0x2d0c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    2ca6:	4a b1       	in	r20, 0x0a	; 10
    2ca8:	21 e0       	ldi	r18, 0x01	; 1
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	b9 01       	movw	r22, r18
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <nrk_gpio_direction+0x154>
    2cb0:	66 0f       	add	r22, r22
    2cb2:	77 1f       	adc	r23, r23
    2cb4:	8a 95       	dec	r24
    2cb6:	e2 f7       	brpl	.-8      	; 0x2cb0 <nrk_gpio_direction+0x150>
    2cb8:	cb 01       	movw	r24, r22
    2cba:	84 2b       	or	r24, r20
    2cbc:	8a b9       	out	0x0a, r24	; 10
    2cbe:	26 c0       	rjmp	.+76     	; 0x2d0c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    2cc0:	4d b1       	in	r20, 0x0d	; 13
    2cc2:	21 e0       	ldi	r18, 0x01	; 1
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <nrk_gpio_direction+0x16e>
    2cca:	66 0f       	add	r22, r22
    2ccc:	77 1f       	adc	r23, r23
    2cce:	8a 95       	dec	r24
    2cd0:	e2 f7       	brpl	.-8      	; 0x2cca <nrk_gpio_direction+0x16a>
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	84 2b       	or	r24, r20
    2cd6:	8d b9       	out	0x0d, r24	; 13
    2cd8:	19 c0       	rjmp	.+50     	; 0x2d0c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2cda:	40 b3       	in	r20, 0x10	; 16
    2cdc:	21 e0       	ldi	r18, 0x01	; 1
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	b9 01       	movw	r22, r18
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <nrk_gpio_direction+0x188>
    2ce4:	66 0f       	add	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	8a 95       	dec	r24
    2cea:	e2 f7       	brpl	.-8      	; 0x2ce4 <nrk_gpio_direction+0x184>
    2cec:	cb 01       	movw	r24, r22
    2cee:	84 2b       	or	r24, r20
    2cf0:	80 bb       	out	0x10, r24	; 16
    2cf2:	0c c0       	rjmp	.+24     	; 0x2d0c <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2cf4:	43 b3       	in	r20, 0x13	; 19
    2cf6:	21 e0       	ldi	r18, 0x01	; 1
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	b9 01       	movw	r22, r18
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <nrk_gpio_direction+0x1a2>
    2cfe:	66 0f       	add	r22, r22
    2d00:	77 1f       	adc	r23, r23
    2d02:	8a 95       	dec	r24
    2d04:	e2 f7       	brpl	.-8      	; 0x2cfe <nrk_gpio_direction+0x19e>
    2d06:	cb 01       	movw	r24, r22
    2d08:	84 2b       	or	r24, r20
    2d0a:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2d0e:	08 95       	ret
                        default: return -1;
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2d12:	08 95       	ret

00002d14 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2d14:	81 11       	cpse	r24, r1
    2d16:	06 c0       	rjmp	.+12     	; 0x2d24 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    2d18:	80 b1       	in	r24, 0x00	; 0
    2d1a:	86 95       	lsr	r24
    2d1c:	81 70       	andi	r24, 0x01	; 1
    2d1e:	91 e0       	ldi	r25, 0x01	; 1
    2d20:	89 27       	eor	r24, r25
    2d22:	08 95       	ret
	} 
return -1;
    2d24:	8f ef       	ldi	r24, 0xFF	; 255
}
    2d26:	08 95       	ret

00002d28 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	11 f4       	brne	.+4      	; 0x2d30 <nrk_led_toggle+0x8>
    2d2c:	83 e2       	ldi	r24, 0x23	; 35
    2d2e:	0d c0       	rjmp	.+26     	; 0x2d4a <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	91 05       	cpc	r25, r1
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <nrk_led_toggle+0x12>
    2d36:	8b e2       	ldi	r24, 0x2B	; 43
    2d38:	08 c0       	rjmp	.+16     	; 0x2d4a <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2d3a:	82 30       	cpi	r24, 0x02	; 2
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	11 f4       	brne	.+4      	; 0x2d44 <nrk_led_toggle+0x1c>
    2d40:	83 e3       	ldi	r24, 0x33	; 51
    2d42:	03 c0       	rjmp	.+6      	; 0x2d4a <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2d44:	03 97       	sbiw	r24, 0x03	; 3
    2d46:	29 f4       	brne	.+10     	; 0x2d52 <nrk_led_toggle+0x2a>
    2d48:	8b e3       	ldi	r24, 0x3B	; 59
    2d4a:	0e 94 a5 14 	call	0x294a	; 0x294a <nrk_gpio_toggle>
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	08 95       	ret
return -1;
    2d52:	8f ef       	ldi	r24, 0xFF	; 255
}
    2d54:	08 95       	ret

00002d56 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2d56:	00 97       	sbiw	r24, 0x00	; 0
    2d58:	11 f4       	brne	.+4      	; 0x2d5e <nrk_led_clr+0x8>
    2d5a:	83 e2       	ldi	r24, 0x23	; 35
    2d5c:	0d c0       	rjmp	.+26     	; 0x2d78 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2d5e:	81 30       	cpi	r24, 0x01	; 1
    2d60:	91 05       	cpc	r25, r1
    2d62:	11 f4       	brne	.+4      	; 0x2d68 <nrk_led_clr+0x12>
    2d64:	8b e2       	ldi	r24, 0x2B	; 43
    2d66:	08 c0       	rjmp	.+16     	; 0x2d78 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <nrk_led_clr+0x1c>
    2d6e:	83 e3       	ldi	r24, 0x33	; 51
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2d72:	03 97       	sbiw	r24, 0x03	; 3
    2d74:	29 f4       	brne	.+10     	; 0x2d80 <nrk_led_clr+0x2a>
    2d76:	8b e3       	ldi	r24, 0x3B	; 59
    2d78:	0e 94 a0 13 	call	0x2740	; 0x2740 <nrk_gpio_set>
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	08 95       	ret
return -1;
    2d80:	8f ef       	ldi	r24, 0xFF	; 255
}
    2d82:	08 95       	ret

00002d84 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	11 f4       	brne	.+4      	; 0x2d8c <nrk_led_set+0x8>
    2d88:	83 e2       	ldi	r24, 0x23	; 35
    2d8a:	0d c0       	rjmp	.+26     	; 0x2da6 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	91 05       	cpc	r25, r1
    2d90:	11 f4       	brne	.+4      	; 0x2d96 <nrk_led_set+0x12>
    2d92:	8b e2       	ldi	r24, 0x2B	; 43
    2d94:	08 c0       	rjmp	.+16     	; 0x2da6 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	91 05       	cpc	r25, r1
    2d9a:	11 f4       	brne	.+4      	; 0x2da0 <nrk_led_set+0x1c>
    2d9c:	83 e3       	ldi	r24, 0x33	; 51
    2d9e:	03 c0       	rjmp	.+6      	; 0x2da6 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2da0:	03 97       	sbiw	r24, 0x03	; 3
    2da2:	29 f4       	brne	.+10     	; 0x2dae <nrk_led_set+0x2a>
    2da4:	8b e3       	ldi	r24, 0x3B	; 59
    2da6:	0e 94 11 14 	call	0x2822	; 0x2822 <nrk_gpio_clr>
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	08 95       	ret
return -1;
    2dae:	8f ef       	ldi	r24, 0xFF	; 255
}
    2db0:	08 95       	ret

00002db2 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2db2:	88 23       	and	r24, r24
    2db4:	19 f0       	breq	.+6      	; 0x2dbc <nrk_gpio_pullups+0xa>
    2db6:	85 b7       	in	r24, 0x35	; 53
    2db8:	8f 7e       	andi	r24, 0xEF	; 239
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2dbc:	85 b7       	in	r24, 0x35	; 53
    2dbe:	80 61       	ori	r24, 0x10	; 16
    2dc0:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	08 95       	ret

00002dc6 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    2dc6:	90 91 c8 00 	lds	r25, 0x00C8
    2dca:	95 ff       	sbrs	r25, 5
    2dcc:	fc cf       	rjmp	.-8      	; 0x2dc6 <putc1>
    2dce:	80 93 ce 00 	sts	0x00CE, r24
    2dd2:	08 95       	ret

00002dd4 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2dd4:	90 93 c5 00 	sts	0x00C5, r25
    2dd8:	80 93 c4 00 	sts	0x00C4, r24
    2ddc:	86 e0       	ldi	r24, 0x06	; 6
    2dde:	80 93 c2 00 	sts	0x00C2, r24
    2de2:	e1 ec       	ldi	r30, 0xC1	; 193
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	8b 7f       	andi	r24, 0xFB	; 251
    2dea:	80 83       	st	Z, r24
    2dec:	a0 ec       	ldi	r26, 0xC0	; 192
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	8c 91       	ld	r24, X
    2df2:	82 60       	ori	r24, 0x02	; 2
    2df4:	8c 93       	st	X, r24
ENABLE_UART0();
    2df6:	80 81       	ld	r24, Z
    2df8:	88 61       	ori	r24, 0x18	; 24
    2dfa:	80 83       	st	Z, r24
    2dfc:	08 95       	ret

00002dfe <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2dfe:	90 93 cd 00 	sts	0x00CD, r25
    2e02:	80 93 cc 00 	sts	0x00CC, r24
    2e06:	86 e0       	ldi	r24, 0x06	; 6
    2e08:	80 93 ca 00 	sts	0x00CA, r24
    2e0c:	e9 ec       	ldi	r30, 0xC9	; 201
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	80 81       	ld	r24, Z
    2e12:	8b 7f       	andi	r24, 0xFB	; 251
    2e14:	80 83       	st	Z, r24
    2e16:	a8 ec       	ldi	r26, 0xC8	; 200
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	8c 91       	ld	r24, X
    2e1c:	82 60       	ori	r24, 0x02	; 2
    2e1e:	8c 93       	st	X, r24
ENABLE_UART1();
    2e20:	80 81       	ld	r24, Z
    2e22:	88 61       	ori	r24, 0x18	; 24
    2e24:	80 83       	st	Z, r24
    2e26:	08 95       	ret

00002e28 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2e28:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2e2c:	6f e5       	ldi	r22, 0x5F	; 95
    2e2e:	73 e1       	ldi	r23, 0x13	; 19
    2e30:	88 ec       	ldi	r24, 0xC8	; 200
    2e32:	92 e1       	ldi	r25, 0x12	; 18
    2e34:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <fdevopen>
    2e38:	90 93 0d 0d 	sts	0x0D0D, r25
    2e3c:	80 93 0c 0d 	sts	0x0D0C, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2e40:	6f e5       	ldi	r22, 0x5F	; 95
    2e42:	73 e1       	ldi	r23, 0x13	; 19
    2e44:	88 ec       	ldi	r24, 0xC8	; 200
    2e46:	92 e1       	ldi	r25, 0x12	; 18
    2e48:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <fdevopen>
    2e4c:	90 93 0b 0d 	sts	0x0D0B, r25
    2e50:	80 93 0a 0d 	sts	0x0D0A, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    2e54:	0e 94 07 1c 	call	0x380e	; 0x380e <nrk_signal_create>
    2e58:	80 93 2f 05 	sts	0x052F, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    2e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e5e:	19 f4       	brne	.+6      	; 0x2e66 <nrk_setup_uart+0x3e>
    2e60:	8e e0       	ldi	r24, 0x0E	; 14
    2e62:	0e 94 48 1a 	call	0x3490	; 0x3490 <nrk_error_add>
   uart_rx_buf_start=0;
    2e66:	10 92 43 05 	sts	0x0543, r1
    2e6a:	10 92 42 05 	sts	0x0542, r1
   uart_rx_buf_end=0;
    2e6e:	10 92 41 05 	sts	0x0541, r1
    2e72:	10 92 40 05 	sts	0x0540, r1
   ENABLE_UART0_RX_INT();
    2e76:	80 91 c1 00 	lds	r24, 0x00C1
    2e7a:	80 68       	ori	r24, 0x80	; 128
    2e7c:	80 93 c1 00 	sts	0x00C1, r24
    2e80:	08 95       	ret

00002e82 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2e82:	80 91 c8 00 	lds	r24, 0x00C8
    2e86:	87 ff       	sbrs	r24, 7
    2e88:	fc cf       	rjmp	.-8      	; 0x2e82 <getc1>
    2e8a:	80 91 c8 00 	lds	r24, 0x00C8
    2e8e:	8f 77       	andi	r24, 0x7F	; 127
    2e90:	80 93 c8 00 	sts	0x00C8, r24
    2e94:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2e98:	08 95       	ret

00002e9a <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	d1 f7       	brne	.-12     	; 0x2e9a <halWait>

} // halWait
    2ea6:	08 95       	ret

00002ea8 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    2ea8:	0c 94 f5 30 	jmp	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>

00002eac <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2eac:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__eewr_byte_m128rfa1>
}
    2eb0:	08 95       	ret

00002eb2 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2eb2:	ef 92       	push	r14
    2eb4:	ff 92       	push	r15
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2ec8:	18 2f       	mov	r17, r24
    2eca:	f7 01       	movw	r30, r14
    2ecc:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2ed6:	08 2f       	mov	r16, r24
    2ed8:	f7 01       	movw	r30, r14
    2eda:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2ee4:	d8 2f       	mov	r29, r24
    2ee6:	f7 01       	movw	r30, r14
    2ee8:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    2eea:	83 e0       	ldi	r24, 0x03	; 3
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2ef2:	c8 2f       	mov	r28, r24
    2ef4:	f7 01       	movw	r30, r14
    2ef6:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2ef8:	84 e0       	ldi	r24, 0x04	; 4
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2f00:	10 0f       	add	r17, r16
    2f02:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    2f04:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    2f06:	8c 17       	cp	r24, r28
    2f08:	11 f0       	breq	.+4      	; 0x2f0e <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    2f0a:	8f ef       	ldi	r24, 0xFF	; 255
    2f0c:	01 c0       	rjmp	.+2      	; 0x2f10 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    2f0e:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	08 95       	ret

00002f1e <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2f24:	85 e0       	ldi	r24, 0x05	; 5
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2f2c:	88 83       	st	Y, r24
return NRK_OK;
}
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	08 95       	ret

00002f36 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2f36:	fc 01       	movw	r30, r24
    2f38:	60 81       	ld	r22, Z
    2f3a:	86 e0       	ldi	r24, 0x06	; 6
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	08 95       	ret

00002f46 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2f4c:	86 e0       	ldi	r24, 0x06	; 6
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2f54:	88 83       	st	Y, r24
  return NRK_OK;
}
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	08 95       	ret

00002f5e <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	8c 01       	movw	r16, r24
    2f68:	c0 e0       	ldi	r28, 0x00	; 0
    2f6a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	08 96       	adiw	r24, 0x08	; 8
    2f70:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2f74:	f8 01       	movw	r30, r16
    2f76:	81 93       	st	Z+, r24
    2f78:	8f 01       	movw	r16, r30
    2f7a:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2f7c:	c0 31       	cpi	r28, 0x10	; 16
    2f7e:	d1 05       	cpc	r29, r1
    2f80:	a9 f7       	brne	.-22     	; 0x2f6c <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	1f 91       	pop	r17
    2f8a:	0f 91       	pop	r16
    2f8c:	08 95       	ret

00002f8e <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	8c 01       	movw	r16, r24
    2f98:	c0 e0       	ldi	r28, 0x00	; 0
    2f9a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	61 91       	ld	r22, Z+
    2fa0:	8f 01       	movw	r16, r30
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	08 96       	adiw	r24, 0x08	; 8
    2fa6:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__eewr_byte_m128rfa1>
    2faa:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2fac:	c0 31       	cpi	r28, 0x10	; 16
    2fae:	d1 05       	cpc	r29, r1
    2fb0:	a9 f7       	brne	.-22     	; 0x2f9c <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	1f 91       	pop	r17
    2fba:	0f 91       	pop	r16
    2fbc:	08 95       	ret

00002fbe <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2fbe:	cf 93       	push	r28
    2fc0:	df 93       	push	r29
    2fc2:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2fc4:	87 e0       	ldi	r24, 0x07	; 7
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 f5 30 	call	0x61ea	; 0x61ea <__eerd_byte_m128rfa1>
    2fcc:	88 83       	st	Y, r24
  return NRK_OK;
}
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	08 95       	ret

00002fd6 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	60 81       	ld	r22, Z
    2fda:	87 e0       	ldi	r24, 0x07	; 7
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	0e 94 fd 30 	call	0x61fa	; 0x61fa <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	08 95       	ret

00002fe6 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2fe6:	f8 94       	cli
    2fe8:	08 95       	ret

00002fea <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2fea:	78 94       	sei
    2fec:	08 95       	ret

00002fee <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    2fee:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
while(1);
    2ff2:	ff cf       	rjmp	.-2      	; 0x2ff2 <nrk_halt+0x4>

00002ff4 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	a3 97       	sbiw	r28, 0x23	; 35
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    300a:	0e 94 07 1c 	call	0x380e	; 0x380e <nrk_signal_create>
    300e:	80 93 c6 0c 	sts	0x0CC6, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    3012:	8f 3f       	cpi	r24, 0xFF	; 255
    3014:	21 f4       	brne	.+8      	; 0x301e <nrk_init+0x2a>
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	8e e0       	ldi	r24, 0x0E	; 14
    301a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    301e:	0e 94 8d 29 	call	0x531a	; 0x531a <_nrk_startup_error>
    3022:	18 2f       	mov	r17, r24
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    3024:	80 ff       	sbrs	r24, 0
    3026:	04 c0       	rjmp	.+8      	; 0x3030 <nrk_init+0x3c>
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	86 e0       	ldi	r24, 0x06	; 6
    302c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
#ifndef IGNORE_EXT_RST_ERROR
   if((i&0x2)!=0) nrk_kernel_error_add(NRK_EXT_RST_ERROR,0);
    3030:	11 ff       	sbrs	r17, 1
    3032:	04 c0       	rjmp	.+8      	; 0x303c <nrk_init+0x48>
    3034:	60 e0       	ldi	r22, 0x00	; 0
    3036:	84 e1       	ldi	r24, 0x14	; 20
    3038:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
#endif
#ifndef IGNORE_BROWN_OUT_ERROR
   if((i&0x4)!=0) nrk_kernel_error_add(NRK_BOD_ERROR,0);
    303c:	12 ff       	sbrs	r17, 2
    303e:	04 c0       	rjmp	.+8      	; 0x3048 <nrk_init+0x54>
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	83 e1       	ldi	r24, 0x13	; 19
    3044:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    3048:	10 92 c9 0c 	sts	0x0CC9, r1
    nrk_cur_task_TCB = NULL;
    304c:	10 92 d7 0c 	sts	0x0CD7, r1
    3050:	10 92 d6 0c 	sts	0x0CD6, r1
    
    nrk_high_ready_TCB = NULL;
    3054:	10 92 c8 0c 	sts	0x0CC8, r1
    3058:	10 92 c7 0c 	sts	0x0CC7, r1
    nrk_high_ready_prio = 0; 
    305c:	10 92 d8 0c 	sts	0x0CD8, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    3060:	10 92 d5 0c 	sts	0x0CD5, r1
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    3068:	2f ef       	ldi	r18, 0xFF	; 255
    306a:	fc 01       	movw	r30, r24
    306c:	e7 54       	subi	r30, 0x47	; 71
    306e:	f3 4f       	sbci	r31, 0xF3	; 243
    3070:	20 83       	st	Z, r18
    nrk_sem_list[i].value=-1;
    3072:	22 83       	std	Z+2, r18	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    3074:	21 83       	std	Z+1, r18	; 0x01
    3076:	03 96       	adiw	r24, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    3078:	8c 30       	cpi	r24, 0x0C	; 12
    307a:	91 05       	cpc	r25, r1
    307c:	b1 f7       	brne	.-20     	; 0x306a <nrk_init+0x76>
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    3082:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    3084:	2f ef       	ldi	r18, 0xFF	; 255
    3086:	fc 01       	movw	r30, r24
    3088:	e6 57       	subi	r30, 0x76	; 118
    308a:	f4 4f       	sbci	r31, 0xF4	; 244
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    308c:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    308e:	20 87       	std	Z+8, r18	; 0x08
    3090:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    3092:	8d 32       	cpi	r24, 0x2D	; 45
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	94 07       	cpc	r25, r20
    3098:	b1 f7       	brne	.-20     	; 0x3086 <nrk_init+0x92>
    309a:	e9 ed       	ldi	r30, 0xD9	; 217
    309c:	fc e0       	ldi	r31, 0x0C	; 12
    309e:	cf 01       	movw	r24, r30
    30a0:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    30a2:	94 83       	std	Z+4, r25	; 0x04
    30a4:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    30a6:	f7 83       	std	Z+7, r31	; 0x07
    30a8:	e6 83       	std	Z+6, r30	; 0x06
    30aa:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    30ac:	8c e0       	ldi	r24, 0x0C	; 12
    30ae:	ec 3f       	cpi	r30, 0xFC	; 252
    30b0:	f8 07       	cpc	r31, r24
    30b2:	a9 f7       	brne	.-22     	; 0x309e <nrk_init+0xaa>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    30b4:	10 92 db 0c 	sts	0x0CDB, r1
    30b8:	10 92 da 0c 	sts	0x0CDA, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    30bc:	10 92 00 0d 	sts	0x0D00, r1
    30c0:	10 92 ff 0c 	sts	0x0CFF, r1
	_head_node = NULL;
    30c4:	10 92 cc 0c 	sts	0x0CCC, r1
    30c8:	10 92 cb 0c 	sts	0x0CCB, r1
	_free_node = &_nrk_readyQ[0];
    30cc:	89 ed       	ldi	r24, 0xD9	; 217
    30ce:	9c e0       	ldi	r25, 0x0C	; 12
    30d0:	90 93 89 0b 	sts	0x0B89, r25
    30d4:	80 93 88 0b 	sts	0x0B88, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    30d8:	64 e0       	ldi	r22, 0x04	; 4
    30da:	75 e2       	ldi	r23, 0x25	; 37
    30dc:	ce 01       	movw	r24, r28
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	0e 94 c5 2b 	call	0x578a	; 0x578a <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    30e4:	40 e8       	ldi	r20, 0x80	; 128
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	63 ea       	ldi	r22, 0xA3	; 163
    30ea:	7a e0       	ldi	r23, 0x0A	; 10
    30ec:	ce 01       	movw	r24, r28
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	0e 94 c9 2b 	call	0x5792	; 0x5792 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    30f4:	85 e5       	ldi	r24, 0x55	; 85
    30f6:	80 93 a3 0a 	sts	0x0AA3, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    30fa:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    30fc:	1c 86       	std	Y+12, r1	; 0x0c
    30fe:	1d 86       	std	Y+13, r1	; 0x0d
    3100:	1e 86       	std	Y+14, r1	; 0x0e
    3102:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    3104:	18 8a       	std	Y+16, r1	; 0x10
    3106:	19 8a       	std	Y+17, r1	; 0x11
    3108:	1a 8a       	std	Y+18, r1	; 0x12
    310a:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    310c:	1c 8a       	std	Y+20, r1	; 0x14
    310e:	1d 8a       	std	Y+21, r1	; 0x15
    3110:	1e 8a       	std	Y+22, r1	; 0x16
    3112:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    3114:	18 8e       	std	Y+24, r1	; 0x18
    3116:	19 8e       	std	Y+25, r1	; 0x19
    3118:	1a 8e       	std	Y+26, r1	; 0x1a
    311a:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    311c:	1c 8e       	std	Y+28, r1	; 0x1c
    311e:	1d 8e       	std	Y+29, r1	; 0x1d
    3120:	1e 8e       	std	Y+30, r1	; 0x1e
    3122:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    3124:	18 a2       	std	Y+32, r1	; 0x20
    3126:	19 a2       	std	Y+33, r1	; 0x21
    3128:	1a a2       	std	Y+34, r1	; 0x22
    312a:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    3134:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    3136:	ce 01       	movw	r24, r28
    3138:	01 96       	adiw	r24, 0x01	; 1
    313a:	0e 94 39 20 	call	0x4072	; 0x4072 <nrk_activate_task>
	
}
    313e:	a3 96       	adiw	r28, 0x23	; 35
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	08 95       	ret

00003152 <nrk_start>:




void nrk_start (void)
{
    3152:	02 e9       	ldi	r16, 0x92	; 146
    3154:	1b e0       	ldi	r17, 0x0B	; 11
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3156:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    3158:	f8 01       	movw	r30, r16
    315a:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    315c:	ff ef       	ldi	r31, 0xFF	; 255
    315e:	df 12       	cpse	r13, r31
    3160:	22 c0       	rjmp	.+68     	; 0x31a6 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    3162:	cf 5f       	subi	r28, 0xFF	; 255
    3164:	05 5d       	subi	r16, 0xD5	; 213
    3166:	1f 4f       	sbci	r17, 0xFF	; 255
    3168:	c7 30       	cpi	r28, 0x07	; 7
    316a:	b1 f7       	brne	.-20     	; 0x3158 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    316c:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3170:	2b e2       	ldi	r18, 0x2B	; 43
    3172:	82 02       	muls	r24, r18
    3174:	c0 01       	movw	r24, r0
    3176:	11 24       	eor	r1, r1
    3178:	fc 01       	movw	r30, r24
    317a:	e6 57       	subi	r30, 0x76	; 118
    317c:	f4 4f       	sbci	r31, 0xF4	; 244
    317e:	82 85       	ldd	r24, Z+10	; 0x0a
    3180:	80 93 d8 0c 	sts	0x0CD8, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    3184:	f0 93 d7 0c 	sts	0x0CD7, r31
    3188:	e0 93 d6 0c 	sts	0x0CD6, r30
    318c:	f0 93 c8 0c 	sts	0x0CC8, r31
    3190:	e0 93 c7 0c 	sts	0x0CC7, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    3194:	80 93 c9 0c 	sts	0x0CC9, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    3198:	0e 94 3b 2c 	call	0x5876	; 0x5876 <nrk_target_start>
    nrk_stack_pointer_init(); 
    319c:	0e 94 25 2c 	call	0x584a	; 0x584a <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    31a0:	0e 94 3f 2c 	call	0x587e	; 0x587e <nrk_start_high_ready_task>
    31a4:	16 c0       	rjmp	.+44     	; 0x31d2 <nrk_start+0x80>
    31a6:	82 e9       	ldi	r24, 0x92	; 146
    31a8:	e8 2e       	mov	r14, r24
    31aa:	8b e0       	ldi	r24, 0x0B	; 11
    31ac:	f8 2e       	mov	r15, r24
    31ae:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    31b0:	cd 17       	cp	r28, r29
    31b2:	41 f0       	breq	.+16     	; 0x31c4 <nrk_start+0x72>
    31b4:	f7 01       	movw	r30, r14
    31b6:	80 81       	ld	r24, Z
    31b8:	d8 12       	cpse	r13, r24
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    31bc:	6d 2d       	mov	r22, r13
    31be:	85 e0       	ldi	r24, 0x05	; 5
    31c0:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    31c4:	df 5f       	subi	r29, 0xFF	; 255
    31c6:	fb e2       	ldi	r31, 0x2B	; 43
    31c8:	ef 0e       	add	r14, r31
    31ca:	f1 1c       	adc	r15, r1
    31cc:	d7 30       	cpi	r29, 0x07	; 7
    31ce:	81 f7       	brne	.-32     	; 0x31b0 <nrk_start+0x5e>
    31d0:	c8 cf       	rjmp	.-112    	; 0x3162 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    31d2:	ff cf       	rjmp	.-2      	; 0x31d2 <nrk_start+0x80>

000031d4 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    31d4:	cf 92       	push	r12
    31d6:	df 92       	push	r13
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	ec 01       	movw	r28, r24
    31e6:	8b 01       	movw	r16, r22
    31e8:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    31ea:	89 85       	ldd	r24, Y+9	; 0x09
    31ec:	82 30       	cpi	r24, 0x02	; 2
    31ee:	21 f0       	breq	.+8      	; 0x31f8 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    31f0:	80 91 c5 0c 	lds	r24, 0x0CC5
    31f4:	88 83       	st	Y, r24
    31f6:	01 c0       	rjmp	.+2      	; 0x31fa <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    31f8:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    31fa:	80 91 c5 0c 	lds	r24, 0x0CC5
    31fe:	87 30       	cpi	r24, 0x07	; 7
    3200:	20 f0       	brcs	.+8      	; 0x320a <nrk_TCB_init+0x36>
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	87 e0       	ldi	r24, 0x07	; 7
    3206:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    320a:	89 85       	ldd	r24, Y+9	; 0x09
    320c:	82 30       	cpi	r24, 0x02	; 2
    320e:	29 f0       	breq	.+10     	; 0x321a <nrk_TCB_init+0x46>
    3210:	80 91 c5 0c 	lds	r24, 0x0CC5
    3214:	8f 5f       	subi	r24, 0xFF	; 255
    3216:	80 93 c5 0c 	sts	0x0CC5, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    321a:	80 91 c5 0c 	lds	r24, 0x0CC5
    321e:	81 11       	cpse	r24, r1
    3220:	03 c0       	rjmp	.+6      	; 0x3228 <nrk_TCB_init+0x54>
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	80 93 c5 0c 	sts	0x0CC5, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    3228:	38 81       	ld	r19, Y
    322a:	2b e2       	ldi	r18, 0x2B	; 43
    322c:	32 03       	mulsu	r19, r18
    322e:	f0 01       	movw	r30, r0
    3230:	11 24       	eor	r1, r1
    3232:	e6 57       	subi	r30, 0x76	; 118
    3234:	f4 4f       	sbci	r31, 0xF4	; 244
    3236:	11 83       	std	Z+1, r17	; 0x01
    3238:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    323a:	88 85       	ldd	r24, Y+8	; 0x08
    323c:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    323e:	38 81       	ld	r19, Y
    3240:	32 03       	mulsu	r19, r18
    3242:	f0 01       	movw	r30, r0
    3244:	11 24       	eor	r1, r1
    3246:	e6 57       	subi	r30, 0x76	; 118
    3248:	f4 4f       	sbci	r31, 0xF4	; 244
    324a:	83 e0       	ldi	r24, 0x03	; 3
    324c:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    324e:	38 81       	ld	r19, Y
    3250:	32 03       	mulsu	r19, r18
    3252:	f0 01       	movw	r30, r0
    3254:	11 24       	eor	r1, r1
    3256:	e6 57       	subi	r30, 0x76	; 118
    3258:	f4 4f       	sbci	r31, 0xF4	; 244
    325a:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    325c:	08 81       	ld	r16, Y
    325e:	02 03       	mulsu	r16, r18
    3260:	80 01       	movw	r16, r0
    3262:	11 24       	eor	r1, r1
    3264:	06 57       	subi	r16, 0x76	; 118
    3266:	14 4f       	sbci	r17, 0xF4	; 244
    3268:	f8 01       	movw	r30, r16
    326a:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    326c:	ce 01       	movw	r24, r28
    326e:	0b 96       	adiw	r24, 0x0b	; 11
    3270:	0e 94 96 24 	call	0x492c	; 0x492c <_nrk_time_to_ticks_long>
    3274:	f8 01       	movw	r30, r16
    3276:	61 a3       	std	Z+33, r22	; 0x21
    3278:	72 a3       	std	Z+34, r23	; 0x22
    327a:	83 a3       	std	Z+35, r24	; 0x23
    327c:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    327e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3280:	9c 85       	ldd	r25, Y+12	; 0x0c
    3282:	ad 85       	ldd	r26, Y+13	; 0x0d
    3284:	be 85       	ldd	r27, Y+14	; 0x0e
    3286:	88 33       	cpi	r24, 0x38	; 56
    3288:	99 48       	sbci	r25, 0x89	; 137
    328a:	a1 44       	sbci	r26, 0x41	; 65
    328c:	b1 05       	cpc	r27, r1
    328e:	20 f0       	brcs	.+8      	; 0x3298 <nrk_TCB_init+0xc4>
    3290:	68 81       	ld	r22, Y
    3292:	86 e1       	ldi	r24, 0x16	; 22
    3294:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    3298:	c8 80       	ld	r12, Y
    329a:	dd 24       	eor	r13, r13
    329c:	c7 fc       	sbrc	r12, 7
    329e:	d0 94       	com	r13
    32a0:	ce 01       	movw	r24, r28
    32a2:	4b 96       	adiw	r24, 0x1b	; 27
    32a4:	0e 94 96 24 	call	0x492c	; 0x492c <_nrk_time_to_ticks_long>
    32a8:	1b e2       	ldi	r17, 0x2B	; 43
    32aa:	1c 9d       	mul	r17, r12
    32ac:	f0 01       	movw	r30, r0
    32ae:	1d 9d       	mul	r17, r13
    32b0:	f0 0d       	add	r31, r0
    32b2:	11 24       	eor	r1, r1
    32b4:	e6 57       	subi	r30, 0x76	; 118
    32b6:	f4 4f       	sbci	r31, 0xF4	; 244
    32b8:	65 8b       	std	Z+21, r22	; 0x15
    32ba:	76 8b       	std	Z+22, r23	; 0x16
    32bc:	87 8b       	std	Z+23, r24	; 0x17
    32be:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    32c0:	28 81       	ld	r18, Y
    32c2:	21 03       	mulsu	r18, r17
    32c4:	c0 01       	movw	r24, r0
    32c6:	11 24       	eor	r1, r1
    32c8:	9c 01       	movw	r18, r24
    32ca:	26 57       	subi	r18, 0x76	; 118
    32cc:	34 4f       	sbci	r19, 0xF4	; 244
    32ce:	69 01       	movw	r12, r18
    32d0:	f9 01       	movw	r30, r18
    32d2:	45 89       	ldd	r20, Z+21	; 0x15
    32d4:	56 89       	ldd	r21, Z+22	; 0x16
    32d6:	67 89       	ldd	r22, Z+23	; 0x17
    32d8:	70 8d       	ldd	r23, Z+24	; 0x18
    32da:	81 a1       	ldd	r24, Z+33	; 0x21
    32dc:	92 a1       	ldd	r25, Z+34	; 0x22
    32de:	a3 a1       	ldd	r26, Z+35	; 0x23
    32e0:	b4 a1       	ldd	r27, Z+36	; 0x24
    32e2:	84 0f       	add	r24, r20
    32e4:	95 1f       	adc	r25, r21
    32e6:	a6 1f       	adc	r26, r22
    32e8:	b7 1f       	adc	r27, r23
    32ea:	81 8f       	std	Z+25, r24	; 0x19
    32ec:	92 8f       	std	Z+26, r25	; 0x1a
    32ee:	a3 8f       	std	Z+27, r26	; 0x1b
    32f0:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    32f2:	ce 01       	movw	r24, r28
    32f4:	43 96       	adiw	r24, 0x13	; 19
    32f6:	0e 94 96 24 	call	0x492c	; 0x492c <_nrk_time_to_ticks_long>
    32fa:	f6 01       	movw	r30, r12
    32fc:	65 a3       	std	Z+37, r22	; 0x25
    32fe:	76 a3       	std	Z+38, r23	; 0x26
    3300:	87 a3       	std	Z+39, r24	; 0x27
    3302:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    3304:	28 81       	ld	r18, Y
    3306:	21 03       	mulsu	r18, r17
    3308:	f0 01       	movw	r30, r0
    330a:	11 24       	eor	r1, r1
    330c:	e6 57       	subi	r30, 0x76	; 118
    330e:	f4 4f       	sbci	r31, 0xF4	; 244
    3310:	85 a1       	ldd	r24, Z+37	; 0x25
    3312:	96 a1       	ldd	r25, Z+38	; 0x26
    3314:	a7 a1       	ldd	r26, Z+39	; 0x27
    3316:	b0 a5       	ldd	r27, Z+40	; 0x28
    3318:	85 8f       	std	Z+29, r24	; 0x1d
    331a:	96 8f       	std	Z+30, r25	; 0x1e
    331c:	a7 8f       	std	Z+31, r26	; 0x1f
    331e:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	92 a7       	std	Z+42, r25	; 0x2a
    3326:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    3328:	f3 82       	std	Z+3, r15	; 0x03
    332a:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    332c:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	1f 91       	pop	r17
    3334:	0f 91       	pop	r16
    3336:	ff 90       	pop	r15
    3338:	ef 90       	pop	r14
    333a:	df 90       	pop	r13
    333c:	cf 90       	pop	r12
    333e:	08 95       	ret

00003340 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    3340:	0c 94 1e 25 	jmp	0x4a3c	; 0x4a3c <_nrk_scheduler>

00003344 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    3344:	85 e6       	ldi	r24, 0x65	; 101
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	08 95       	ret

0000334a <_nrk_errno_set>:
    334a:	e0 91 d6 0c 	lds	r30, 0x0CD6
    334e:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3352:	84 87       	std	Z+12, r24	; 0x0c
    3354:	08 95       	ret

00003356 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    3356:	e0 91 d6 0c 	lds	r30, 0x0CD6
    335a:	f0 91 d7 0c 	lds	r31, 0x0CD7
}
    335e:	84 85       	ldd	r24, Z+12	; 0x0c
    3360:	08 95       	ret

00003362 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    3362:	fc 01       	movw	r30, r24
    if (error_num == 0)
    3364:	80 91 a2 0a 	lds	r24, 0x0AA2
    3368:	88 23       	and	r24, r24
    336a:	31 f0       	breq	.+12     	; 0x3378 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    336c:	db 01       	movw	r26, r22
    336e:	8c 93       	st	X, r24
    *task_id = error_task;
    3370:	80 91 77 05 	lds	r24, 0x0577
    3374:	80 83       	st	Z, r24
    return 1;
    3376:	81 e0       	ldi	r24, 0x01	; 1
}
    3378:	08 95       	ret

0000337a <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    337a:	80 91 a2 0a 	lds	r24, 0x0AA2
    337e:	88 23       	and	r24, r24
    3380:	09 f4       	brne	.+2      	; 0x3384 <nrk_error_print+0xa>
    3382:	84 c0       	rjmp	.+264    	; 0x348c <nrk_error_print+0x112>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    3384:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    3388:	88 e7       	ldi	r24, 0x78	; 120
    338a:	95 e0       	ldi	r25, 0x05	; 5
    338c:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
        printf ("%d", error_task);
    3390:	80 91 77 05 	lds	r24, 0x0577
    3394:	1f 92       	push	r1
    3396:	8f 93       	push	r24
    3398:	8c ed       	ldi	r24, 0xDC	; 220
    339a:	92 e0       	ldi	r25, 0x02	; 2
    339c:	9f 93       	push	r25
    339e:	8f 93       	push	r24
    33a0:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
        nrk_kprintf (PSTR ("): "));
    33a4:	84 e7       	ldi	r24, 0x74	; 116
    33a6:	95 e0       	ldi	r25, 0x05	; 5
    33a8:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	80 91 a2 0a 	lds	r24, 0x0AA2
    33b8:	88 31       	cpi	r24, 0x18	; 24
    33ba:	10 f0       	brcs	.+4      	; 0x33c0 <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    33bc:	10 92 a2 0a 	sts	0x0AA2, r1
        switch (error_num)
    33c0:	e0 91 a2 0a 	lds	r30, 0x0AA2
    33c4:	8e 2f       	mov	r24, r30
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	fc 01       	movw	r30, r24
    33ca:	31 97       	sbiw	r30, 0x01	; 1
    33cc:	e6 31       	cpi	r30, 0x16	; 22
    33ce:	f1 05       	cpc	r31, r1
    33d0:	08 f0       	brcs	.+2      	; 0x33d4 <nrk_error_print+0x5a>
    33d2:	46 c0       	rjmp	.+140    	; 0x3460 <nrk_error_print+0xe6>
    33d4:	e6 54       	subi	r30, 0x46	; 70
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    33dc:	88 e3       	ldi	r24, 0x38	; 56
    33de:	95 e0       	ldi	r25, 0x05	; 5
    33e0:	41 c0       	rjmp	.+130    	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    33e2:	81 e1       	ldi	r24, 0x11	; 17
    33e4:	95 e0       	ldi	r25, 0x05	; 5
    33e6:	3e c0       	rjmp	.+124    	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    33e8:	8d ef       	ldi	r24, 0xFD	; 253
    33ea:	94 e0       	ldi	r25, 0x04	; 4
    33ec:	3b c0       	rjmp	.+118    	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    33ee:	87 ee       	ldi	r24, 0xE7	; 231
    33f0:	94 e0       	ldi	r25, 0x04	; 4
    33f2:	38 c0       	rjmp	.+112    	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    33f4:	8c ec       	ldi	r24, 0xCC	; 204
    33f6:	94 e0       	ldi	r25, 0x04	; 4
    33f8:	35 c0       	rjmp	.+106    	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    33fa:	86 eb       	ldi	r24, 0xB6	; 182
    33fc:	94 e0       	ldi	r25, 0x04	; 4
    33fe:	32 c0       	rjmp	.+100    	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    3400:	8e e9       	ldi	r24, 0x9E	; 158
    3402:	94 e0       	ldi	r25, 0x04	; 4
    3404:	2f c0       	rjmp	.+94     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    3406:	8b e8       	ldi	r24, 0x8B	; 139
    3408:	94 e0       	ldi	r25, 0x04	; 4
    340a:	2c c0       	rjmp	.+88     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    340c:	88 e7       	ldi	r24, 0x78	; 120
    340e:	94 e0       	ldi	r25, 0x04	; 4
    3410:	29 c0       	rjmp	.+82     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    3412:	8a e5       	ldi	r24, 0x5A	; 90
    3414:	94 e0       	ldi	r25, 0x04	; 4
    3416:	26 c0       	rjmp	.+76     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    3418:	85 e3       	ldi	r24, 0x35	; 53
    341a:	94 e0       	ldi	r25, 0x04	; 4
    341c:	23 c0       	rjmp	.+70     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    341e:	89 e2       	ldi	r24, 0x29	; 41
    3420:	94 e0       	ldi	r25, 0x04	; 4
    3422:	20 c0       	rjmp	.+64     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    3424:	8e e0       	ldi	r24, 0x0E	; 14
    3426:	94 e0       	ldi	r25, 0x04	; 4
    3428:	1d c0       	rjmp	.+58     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    342a:	8f ef       	ldi	r24, 0xFF	; 255
    342c:	93 e0       	ldi	r25, 0x03	; 3
    342e:	1a c0       	rjmp	.+52     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    3430:	8b ee       	ldi	r24, 0xEB	; 235
    3432:	93 e0       	ldi	r25, 0x03	; 3
    3434:	17 c0       	rjmp	.+46     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    3436:	8a ed       	ldi	r24, 0xDA	; 218
    3438:	93 e0       	ldi	r25, 0x03	; 3
    343a:	14 c0       	rjmp	.+40     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    343c:	86 ec       	ldi	r24, 0xC6	; 198
    343e:	93 e0       	ldi	r25, 0x03	; 3
    3440:	11 c0       	rjmp	.+34     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    3442:	86 ea       	ldi	r24, 0xA6	; 166
    3444:	93 e0       	ldi	r25, 0x03	; 3
    3446:	0e c0       	rjmp	.+28     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    3448:	8e e8       	ldi	r24, 0x8E	; 142
    344a:	93 e0       	ldi	r25, 0x03	; 3
    344c:	0b c0       	rjmp	.+22     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    344e:	83 e7       	ldi	r24, 0x73	; 115
    3450:	93 e0       	ldi	r25, 0x03	; 3
    3452:	08 c0       	rjmp	.+16     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    3454:	82 e6       	ldi	r24, 0x62	; 98
    3456:	93 e0       	ldi	r25, 0x03	; 3
    3458:	05 c0       	rjmp	.+10     	; 0x3464 <nrk_error_print+0xea>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    345a:	83 e5       	ldi	r24, 0x53	; 83
    345c:	93 e0       	ldi	r25, 0x03	; 3
    345e:	02 c0       	rjmp	.+4      	; 0x3464 <nrk_error_print+0xea>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    3460:	8c e4       	ldi	r24, 0x4C	; 76
    3462:	93 e0       	ldi	r25, 0x03	; 3
    3464:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>
        }
        putchar ('\r');
    3468:	60 91 0c 0d 	lds	r22, 0x0D0C
    346c:	70 91 0d 0d 	lds	r23, 0x0D0D
    3470:	8d e0       	ldi	r24, 0x0D	; 13
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
        putchar ('\n');
    3478:	60 91 0c 0d 	lds	r22, 0x0D0C
    347c:	70 91 0d 0d 	lds	r23, 0x0D0D
    3480:	8a e0       	ldi	r24, 0x0A	; 10
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    3488:	10 92 a2 0a 	sts	0x0AA2, r1
    return t;
}
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	08 95       	ret

00003490 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    3490:	80 93 a2 0a 	sts	0x0AA2, r24
    error_task = nrk_cur_task_TCB->task_ID;
    3494:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3498:	f0 91 d7 0c 	lds	r31, 0x0CD7
    349c:	80 85       	ldd	r24, Z+8	; 0x08
    349e:	80 93 77 05 	sts	0x0577, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    34a2:	0c 94 bd 19 	jmp	0x337a	; 0x337a <nrk_error_print>

000034a6 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    34a6:	80 93 a2 0a 	sts	0x0AA2, r24
    error_task = task;
    34aa:	60 93 77 05 	sts	0x0577, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    34ae:	0c 94 bd 19 	jmp	0x337a	; 0x337a <nrk_error_print>

000034b2 <pause>:
    }

}

void pause()
{
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	1f 92       	push	r1
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    34bc:	19 82       	std	Y+1, r1	; 0x01
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	84 36       	cpi	r24, 0x64	; 100
    34c2:	40 f4       	brcc	.+16     	; 0x34d4 <pause+0x22>
        nrk_spin_wait_us (2000);
    34c4:	80 ed       	ldi	r24, 0xD0	; 208
    34c6:	97 e0       	ldi	r25, 0x07	; 7
    34c8:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	8f 5f       	subi	r24, 0xFF	; 255
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	f5 cf       	rjmp	.-22     	; 0x34be <pause+0xc>
        nrk_spin_wait_us (2000);
}
    34d4:	0f 90       	pop	r0
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	08 95       	ret

000034dc <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <nrk_led_set>
    pause();
    34e4:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pause>
    pause();
    34e8:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pause>
    pause();
    34ec:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pause>
    nrk_led_clr(GREEN_LED);
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
    pause();
    34f8:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <pause>

000034fc <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <nrk_led_set>
    pause();
    3504:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pause>
    nrk_led_clr(GREEN_LED);
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
    pause();
    3510:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <pause>

00003514 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    3514:	ff 92       	push	r15
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    351a:	cf 93       	push	r28
    351c:	df 93       	push	r29
    351e:	00 d0       	rcall	.+0      	; 0x3520 <blink_morse_code_error+0xc>
    3520:	1f 92       	push	r1
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    3526:	1f 92       	push	r1
    3528:	8f 93       	push	r24
    352a:	8c ed       	ldi	r24, 0xDC	; 220
    352c:	92 e0       	ldi	r25, 0x02	; 2
    352e:	9f 93       	push	r25
    3530:	8f 93       	push	r24
    3532:	8e 01       	movw	r16, r28
    3534:	0f 5f       	subi	r16, 0xFF	; 255
    3536:	1f 4f       	sbci	r17, 0xFF	; 255
    3538:	1f 93       	push	r17
    353a:	0f 93       	push	r16
    353c:	0e 94 67 30 	call	0x60ce	; 0x60ce <sprintf>

    for(i=0; i<strlen(str); i++ )
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	0f 90       	pop	r0
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	f1 2c       	mov	r15, r1
    354e:	f8 01       	movw	r30, r16
    3550:	01 90       	ld	r0, Z+
    3552:	00 20       	and	r0, r0
    3554:	e9 f7       	brne	.-6      	; 0x3550 <blink_morse_code_error+0x3c>
    3556:	31 97       	sbiw	r30, 0x01	; 1
    3558:	e0 1b       	sub	r30, r16
    355a:	f1 0b       	sbc	r31, r17
    355c:	8f 2d       	mov	r24, r15
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	8e 17       	cp	r24, r30
    3562:	9f 07       	cpc	r25, r31
    3564:	08 f0       	brcs	.+2      	; 0x3568 <blink_morse_code_error+0x54>
    3566:	5d c0       	rjmp	.+186    	; 0x3622 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    3568:	f8 01       	movw	r30, r16
    356a:	e8 0f       	add	r30, r24
    356c:	f9 1f       	adc	r31, r25
    356e:	e0 81       	ld	r30, Z
    3570:	8e 2f       	mov	r24, r30
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	fc 01       	movw	r30, r24
    3576:	f0 97       	sbiw	r30, 0x30	; 48
    3578:	ea 30       	cpi	r30, 0x0A	; 10
    357a:	f1 05       	cpc	r31, r1
    357c:	08 f0       	brcs	.+2      	; 0x3580 <blink_morse_code_error+0x6c>
    357e:	49 c0       	rjmp	.+146    	; 0x3612 <blink_morse_code_error+0xfe>
    3580:	e0 53       	subi	r30, 0x30	; 48
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	0c 94 a4 2e 	jmp	0x5d48	; 0x5d48 <__tablejump2__>
        {
        case '0':
            blink_dash();
    3588:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    358e:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            blink_dash();
    3592:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    3596:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    359a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    359e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            break;
    35a2:	37 c0       	rjmp	.+110    	; 0x3612 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    35a4:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            blink_dot();
    35a8:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
    35ac:	f4 cf       	rjmp	.-24     	; 0x3596 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    35ae:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            blink_dot();
    35b2:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            blink_dot();
    35b6:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
    35ba:	ef cf       	rjmp	.-34     	; 0x359a <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    35bc:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            blink_dot();
    35c0:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            blink_dot();
    35c4:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            blink_dot();
    35c8:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
    35cc:	e8 cf       	rjmp	.-48     	; 0x359e <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    35ce:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    35d4:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dot();
    35d8:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
    35dc:	04 c0       	rjmp	.+8      	; 0x35e6 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    35de:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    35e2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dot();
    35e6:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
    35ea:	06 c0       	rjmp	.+12     	; 0x35f8 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    35ec:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    35f0:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    35f4:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dot();
    35f8:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
    35fc:	08 c0       	rjmp	.+16     	; 0x360e <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    35fe:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    3602:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    3606:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dash();
    360a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <blink_dash>
            blink_dot();
    360e:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <blink_dot>
            break;
        }
        pause();
    3612:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pause>
        pause();
    3616:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pause>
        pause();
    361a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    361e:	f3 94       	inc	r15
    3620:	96 cf       	rjmp	.-212    	; 0x354e <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	1f 91       	pop	r17
    362e:	0f 91       	pop	r16
    3630:	ff 90       	pop	r15
    3632:	08 95       	ret

00003634 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3634:	6f 92       	push	r6
    3636:	7f 92       	push	r7
    3638:	8f 92       	push	r8
    363a:	9f 92       	push	r9
    363c:	af 92       	push	r10
    363e:	bf 92       	push	r11
    3640:	cf 92       	push	r12
    3642:	df 92       	push	r13
    3644:	ef 92       	push	r14
    3646:	ff 92       	push	r15
    3648:	0f 93       	push	r16
    364a:	1f 93       	push	r17
    364c:	cf 93       	push	r28
    364e:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    3650:	84 e8       	ldi	r24, 0x84	; 132
    3652:	95 e0       	ldi	r25, 0x05	; 5
    3654:	0e 94 4a 13 	call	0x2694	; 0x2694 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    3658:	e0 91 d6 0c 	lds	r30, 0x0CD6
    365c:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3660:	80 85       	ldd	r24, Z+8	; 0x08
    3662:	28 2f       	mov	r18, r24
    3664:	33 27       	eor	r19, r19
    3666:	27 fd       	sbrc	r18, 7
    3668:	30 95       	com	r19
    366a:	3f 93       	push	r19
    366c:	8f 93       	push	r24
    366e:	86 e2       	ldi	r24, 0x26	; 38
    3670:	94 e0       	ldi	r25, 0x04	; 4
    3672:	9f 93       	push	r25
    3674:	8f 93       	push	r24
    3676:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    367a:	e0 91 d6 0c 	lds	r30, 0x0CD6
    367e:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3682:	c2 81       	ldd	r28, Z+2	; 0x02
    3684:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	8a e5       	ldi	r24, 0x5A	; 90
    368c:	94 e0       	ldi	r25, 0x04	; 4
    368e:	9f 93       	push	r25
    3690:	8f 93       	push	r24
    3692:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    printf( "canary = %x ",*stkc );
    3696:	88 81       	ld	r24, Y
    3698:	1f 92       	push	r1
    369a:	8f 93       	push	r24
    369c:	8f e2       	ldi	r24, 0x2F	; 47
    369e:	94 e0       	ldi	r25, 0x04	; 4
    36a0:	9f 93       	push	r25
    36a2:	8f 93       	push	r24
    36a4:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    36a8:	e0 91 d6 0c 	lds	r30, 0x0CD6
    36ac:	f0 91 d7 0c 	lds	r31, 0x0CD7
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    36b0:	81 81       	ldd	r24, Z+1	; 0x01
    36b2:	8f 93       	push	r24
    36b4:	80 81       	ld	r24, Z
    36b6:	8f 93       	push	r24
    36b8:	8c e3       	ldi	r24, 0x3C	; 60
    36ba:	94 e0       	ldi	r25, 0x04	; 4
    36bc:	9f 93       	push	r25
    36be:	8f 93       	push	r24
    36c0:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    36c4:	80 91 d7 0c 	lds	r24, 0x0CD7
    36c8:	8f 93       	push	r24
    36ca:	80 91 d6 0c 	lds	r24, 0x0CD6
    36ce:	8f 93       	push	r24
    36d0:	86 e4       	ldi	r24, 0x46	; 70
    36d2:	94 e0       	ldi	r25, 0x04	; 4
    36d4:	9f 93       	push	r25
    36d6:	8f 93       	push	r24
    36d8:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    36dc:	ca e8       	ldi	r28, 0x8A	; 138
    36de:	db e0       	ldi	r29, 0x0B	; 11
    36e0:	ed b7       	in	r30, 0x3d	; 61
    36e2:	fe b7       	in	r31, 0x3e	; 62
    36e4:	74 96       	adiw	r30, 0x14	; 20
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	fe bf       	out	0x3e, r31	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	ed bf       	out	0x3d, r30	; 61
    36f0:	00 e0       	ldi	r16, 0x00	; 0
    36f2:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    36f4:	86 e5       	ldi	r24, 0x56	; 86
    36f6:	68 2e       	mov	r6, r24
    36f8:	84 e0       	ldi	r24, 0x04	; 4
    36fa:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    36fc:	9f e2       	ldi	r25, 0x2F	; 47
    36fe:	89 2e       	mov	r8, r25
    3700:	94 e0       	ldi	r25, 0x04	; 4
    3702:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3704:	2c e3       	ldi	r18, 0x3C	; 60
    3706:	a2 2e       	mov	r10, r18
    3708:	24 e0       	ldi	r18, 0x04	; 4
    370a:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    370c:	36 e4       	ldi	r19, 0x46	; 70
    370e:	c3 2e       	mov	r12, r19
    3710:	34 e0       	ldi	r19, 0x04	; 4
    3712:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3714:	ea 80       	ldd	r14, Y+2	; 0x02
    3716:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3718:	ff 92       	push	r15
    371a:	ef 92       	push	r14
    371c:	1f 93       	push	r17
    371e:	0f 93       	push	r16
    3720:	7f 92       	push	r7
    3722:	6f 92       	push	r6
    3724:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
        printf( "canary = %x ",*stkc );
    3728:	f7 01       	movw	r30, r14
    372a:	80 81       	ld	r24, Z
    372c:	1f 92       	push	r1
    372e:	8f 93       	push	r24
    3730:	9f 92       	push	r9
    3732:	8f 92       	push	r8
    3734:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	8f 93       	push	r24
    373c:	88 81       	ld	r24, Y
    373e:	8f 93       	push	r24
    3740:	bf 92       	push	r11
    3742:	af 92       	push	r10
    3744:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3748:	df 93       	push	r29
    374a:	cf 93       	push	r28
    374c:	df 92       	push	r13
    374e:	cf 92       	push	r12
    3750:	0e 94 1d 30 	call	0x603a	; 0x603a <printf>
    3754:	0f 5f       	subi	r16, 0xFF	; 255
    3756:	1f 4f       	sbci	r17, 0xFF	; 255
    3758:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    375a:	ed b7       	in	r30, 0x3d	; 61
    375c:	fe b7       	in	r31, 0x3e	; 62
    375e:	72 96       	adiw	r30, 0x12	; 18
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	fe bf       	out	0x3e, r31	; 62
    3766:	0f be       	out	0x3f, r0	; 63
    3768:	ed bf       	out	0x3d, r30	; 61
    376a:	07 30       	cpi	r16, 0x07	; 7
    376c:	11 05       	cpc	r17, r1
    376e:	91 f6       	brne	.-92     	; 0x3714 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	ff 90       	pop	r15
    377a:	ef 90       	pop	r14
    377c:	df 90       	pop	r13
    377e:	cf 90       	pop	r12
    3780:	bf 90       	pop	r11
    3782:	af 90       	pop	r10
    3784:	9f 90       	pop	r9
    3786:	8f 90       	pop	r8
    3788:	7f 90       	pop	r7
    378a:	6f 90       	pop	r6
    378c:	08 95       	ret

0000378e <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    3792:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3796:	f0 91 d7 0c 	lds	r31, 0x0CD7
    379a:	c2 81       	ldd	r28, Z+2	; 0x02
    379c:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    379e:	88 81       	ld	r24, Y
    37a0:	85 35       	cpi	r24, 0x55	; 85
    37a2:	39 f0       	breq	.+14     	; 0x37b2 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    37a4:	0e 94 1a 1b 	call	0x3634	; 0x3634 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	0e 94 48 1a 	call	0x3490	; 0x3490 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    37ae:	85 e5       	ldi	r24, 0x55	; 85
    37b0:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    37b2:	e0 91 d6 0c 	lds	r30, 0x0CD6
    37b6:	f0 91 d7 0c 	lds	r31, 0x0CD7
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    37ba:	80 81       	ld	r24, Z
    37bc:	91 81       	ldd	r25, Z+1	; 0x01
    37be:	81 15       	cp	r24, r1
    37c0:	92 44       	sbci	r25, 0x42	; 66
    37c2:	38 f0       	brcs	.+14     	; 0x37d2 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    37c4:	0e 94 1a 1b 	call	0x3634	; 0x3634 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    37c8:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    37ce:	0c 94 48 1a 	jmp	0x3490	; 0x3490 <nrk_error_add>




#endif
}
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	08 95       	ret

000037d8 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    37d8:	2b e2       	ldi	r18, 0x2B	; 43
    37da:	82 02       	muls	r24, r18
    37dc:	c0 01       	movw	r24, r0
    37de:	11 24       	eor	r1, r1
    37e0:	fc 01       	movw	r30, r24
    37e2:	e6 57       	subi	r30, 0x76	; 118
    37e4:	f4 4f       	sbci	r31, 0xF4	; 244
    37e6:	a2 81       	ldd	r26, Z+2	; 0x02
    37e8:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    37ea:	8c 91       	ld	r24, X
    37ec:	85 35       	cpi	r24, 0x55	; 85
    37ee:	19 f0       	breq	.+6      	; 0x37f6 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    37f0:	85 e5       	ldi	r24, 0x55	; 85
    37f2:	8c 93       	st	X, r24
    37f4:	08 c0       	rjmp	.+16     	; 0x3806 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    37f6:	80 81       	ld	r24, Z
    37f8:	91 81       	ldd	r25, Z+1	; 0x01
    37fa:	81 15       	cp	r24, r1
    37fc:	92 44       	sbci	r25, 0x42	; 66
    37fe:	28 f0       	brcs	.+10     	; 0x380a <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3800:	82 e1       	ldi	r24, 0x12	; 18
    3802:	0e 94 48 1a 	call	0x3490	; 0x3490 <nrk_error_add>
        return NRK_ERROR;
    3806:	8f ef       	ldi	r24, 0xFF	; 255
    3808:	08 95       	ret
    }
#endif
    return NRK_OK;
    380a:	81 e0       	ldi	r24, 0x01	; 1
}
    380c:	08 95       	ret

0000380e <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3812:	40 91 1a 08 	lds	r20, 0x081A
    3816:	50 91 1b 08 	lds	r21, 0x081B
    381a:	60 91 1c 08 	lds	r22, 0x081C
    381e:	70 91 1d 08 	lds	r23, 0x081D
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	8a 01       	movw	r16, r20
    3828:	9b 01       	movw	r18, r22
    382a:	08 2e       	mov	r0, r24
    382c:	04 c0       	rjmp	.+8      	; 0x3836 <nrk_signal_create+0x28>
    382e:	36 95       	lsr	r19
    3830:	27 95       	ror	r18
    3832:	17 95       	ror	r17
    3834:	07 95       	ror	r16
    3836:	0a 94       	dec	r0
    3838:	d2 f7       	brpl	.-12     	; 0x382e <nrk_signal_create+0x20>
    383a:	00 fd       	sbrc	r16, 0
    383c:	19 c0       	rjmp	.+50     	; 0x3870 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    383e:	01 e0       	ldi	r16, 0x01	; 1
    3840:	10 e0       	ldi	r17, 0x00	; 0
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	08 2e       	mov	r0, r24
    3848:	04 c0       	rjmp	.+8      	; 0x3852 <nrk_signal_create+0x44>
    384a:	00 0f       	add	r16, r16
    384c:	11 1f       	adc	r17, r17
    384e:	22 1f       	adc	r18, r18
    3850:	33 1f       	adc	r19, r19
    3852:	0a 94       	dec	r0
    3854:	d2 f7       	brpl	.-12     	; 0x384a <nrk_signal_create+0x3c>
    3856:	40 2b       	or	r20, r16
    3858:	51 2b       	or	r21, r17
    385a:	62 2b       	or	r22, r18
    385c:	73 2b       	or	r23, r19
    385e:	40 93 1a 08 	sts	0x081A, r20
    3862:	50 93 1b 08 	sts	0x081B, r21
    3866:	60 93 1c 08 	sts	0x081C, r22
    386a:	70 93 1d 08 	sts	0x081D, r23
			return i;
    386e:	05 c0       	rjmp	.+10     	; 0x387a <nrk_signal_create+0x6c>
    3870:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    3872:	80 32       	cpi	r24, 0x20	; 32
    3874:	91 05       	cpc	r25, r1
    3876:	b9 f6       	brne	.-82     	; 0x3826 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    3878:	8f ef       	ldi	r24, 0xFF	; 255


}
    387a:	1f 91       	pop	r17
    387c:	0f 91       	pop	r16
    387e:	08 95       	ret

00003880 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    3880:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3884:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3888:	65 85       	ldd	r22, Z+13	; 0x0d
    388a:	76 85       	ldd	r23, Z+14	; 0x0e
    388c:	87 85       	ldd	r24, Z+15	; 0x0f
    388e:	90 89       	ldd	r25, Z+16	; 0x10
}
    3890:	08 95       	ret

00003892 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    3892:	cf 92       	push	r12
    3894:	df 92       	push	r13
    3896:	ef 92       	push	r14
    3898:	ff 92       	push	r15
    389a:	0f 93       	push	r16
    389c:	1f 93       	push	r17
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    38a2:	c1 2c       	mov	r12, r1
    38a4:	d1 2c       	mov	r13, r1
    38a6:	76 01       	movw	r14, r12
    38a8:	c3 94       	inc	r12
    38aa:	08 2e       	mov	r0, r24
    38ac:	04 c0       	rjmp	.+8      	; 0x38b6 <nrk_signal_delete+0x24>
    38ae:	cc 0c       	add	r12, r12
    38b0:	dd 1c       	adc	r13, r13
    38b2:	ee 1c       	adc	r14, r14
    38b4:	ff 1c       	adc	r15, r15
    38b6:	0a 94       	dec	r0
    38b8:	d2 f7       	brpl	.-12     	; 0x38ae <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    38ba:	40 91 1a 08 	lds	r20, 0x081A
    38be:	50 91 1b 08 	lds	r21, 0x081B
    38c2:	60 91 1c 08 	lds	r22, 0x081C
    38c6:	70 91 1d 08 	lds	r23, 0x081D
    38ca:	4c 21       	and	r20, r12
    38cc:	5d 21       	and	r21, r13
    38ce:	6e 21       	and	r22, r14
    38d0:	7f 21       	and	r23, r15
    38d2:	45 2b       	or	r20, r21
    38d4:	46 2b       	or	r20, r22
    38d6:	47 2b       	or	r20, r23
    38d8:	09 f4       	brne	.+2      	; 0x38dc <nrk_signal_delete+0x4a>
    38da:	60 c0       	rjmp	.+192    	; 0x399c <nrk_signal_delete+0x10a>
    38dc:	08 2f       	mov	r16, r24

	nrk_int_disable();
    38de:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    38e2:	e3 e9       	ldi	r30, 0x93	; 147
    38e4:	fb e0       	ldi	r31, 0x0B	; 11
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    38e6:	b7 01       	movw	r22, r14
    38e8:	a6 01       	movw	r20, r12
    38ea:	40 95       	com	r20
    38ec:	50 95       	com	r21
    38ee:	60 95       	com	r22
    38f0:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    38f2:	13 e0       	ldi	r17, 0x03	; 3
    38f4:	df 01       	movw	r26, r30
    38f6:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    38f8:	8c 91       	ld	r24, X
    38fa:	8f 3f       	cpi	r24, 0xFF	; 255
    38fc:	39 f1       	breq	.+78     	; 0x394c <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    38fe:	84 81       	ldd	r24, Z+4	; 0x04
    3900:	95 81       	ldd	r25, Z+5	; 0x05
    3902:	a6 81       	ldd	r26, Z+6	; 0x06
    3904:	b7 81       	ldd	r27, Z+7	; 0x07
    3906:	8c 15       	cp	r24, r12
    3908:	9d 05       	cpc	r25, r13
    390a:	ae 05       	cpc	r26, r14
    390c:	bf 05       	cpc	r27, r15
    390e:	51 f4       	brne	.+20     	; 0x3924 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3910:	10 86       	std	Z+8, r1	; 0x08
    3912:	11 86       	std	Z+9, r1	; 0x09
    3914:	12 86       	std	Z+10, r1	; 0x0a
    3916:	13 86       	std	Z+11, r1	; 0x0b
    3918:	9f 01       	movw	r18, r30
    391a:	22 50       	subi	r18, 0x02	; 2
    391c:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    391e:	e9 01       	movw	r28, r18
    3920:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3922:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3924:	84 23       	and	r24, r20
    3926:	95 23       	and	r25, r21
    3928:	a6 23       	and	r26, r22
    392a:	b7 23       	and	r27, r23
    392c:	84 83       	std	Z+4, r24	; 0x04
    392e:	95 83       	std	Z+5, r25	; 0x05
    3930:	a6 83       	std	Z+6, r26	; 0x06
    3932:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    3934:	80 85       	ldd	r24, Z+8	; 0x08
    3936:	91 85       	ldd	r25, Z+9	; 0x09
    3938:	a2 85       	ldd	r26, Z+10	; 0x0a
    393a:	b3 85       	ldd	r27, Z+11	; 0x0b
    393c:	84 23       	and	r24, r20
    393e:	95 23       	and	r25, r21
    3940:	a6 23       	and	r26, r22
    3942:	b7 23       	and	r27, r23
    3944:	80 87       	std	Z+8, r24	; 0x08
    3946:	91 87       	std	Z+9, r25	; 0x09
    3948:	a2 87       	std	Z+10, r26	; 0x0a
    394a:	b3 87       	std	Z+11, r27	; 0x0b
    394c:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    394e:	dc e0       	ldi	r29, 0x0C	; 12
    3950:	e0 3c       	cpi	r30, 0xC0	; 192
    3952:	fd 07       	cpc	r31, r29
    3954:	79 f6       	brne	.-98     	; 0x38f4 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    3956:	8e ef       	ldi	r24, 0xFE	; 254
    3958:	9f ef       	ldi	r25, 0xFF	; 255
    395a:	af ef       	ldi	r26, 0xFF	; 255
    395c:	bf ef       	ldi	r27, 0xFF	; 255
    395e:	04 c0       	rjmp	.+8      	; 0x3968 <nrk_signal_delete+0xd6>
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	aa 1f       	adc	r26, r26
    3966:	bb 1f       	adc	r27, r27
    3968:	0a 95       	dec	r16
    396a:	d2 f7       	brpl	.-12     	; 0x3960 <nrk_signal_delete+0xce>
    396c:	40 91 1a 08 	lds	r20, 0x081A
    3970:	50 91 1b 08 	lds	r21, 0x081B
    3974:	60 91 1c 08 	lds	r22, 0x081C
    3978:	70 91 1d 08 	lds	r23, 0x081D
    397c:	84 23       	and	r24, r20
    397e:	95 23       	and	r25, r21
    3980:	a6 23       	and	r26, r22
    3982:	b7 23       	and	r27, r23
    3984:	80 93 1a 08 	sts	0x081A, r24
    3988:	90 93 1b 08 	sts	0x081B, r25
    398c:	a0 93 1c 08 	sts	0x081C, r26
    3990:	b0 93 1d 08 	sts	0x081D, r27
	nrk_int_enable();
    3994:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>

	return NRK_OK;
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	01 c0       	rjmp	.+2      	; 0x399e <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    399c:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	1f 91       	pop	r17
    39a4:	0f 91       	pop	r16
    39a6:	ff 90       	pop	r15
    39a8:	ef 90       	pop	r14
    39aa:	df 90       	pop	r13
    39ac:	cf 90       	pop	r12
    39ae:	08 95       	ret

000039b0 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    39b4:	41 e0       	ldi	r20, 0x01	; 1
    39b6:	50 e0       	ldi	r21, 0x00	; 0
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	8a 01       	movw	r16, r20
    39be:	9b 01       	movw	r18, r22
    39c0:	04 c0       	rjmp	.+8      	; 0x39ca <nrk_signal_unregister+0x1a>
    39c2:	00 0f       	add	r16, r16
    39c4:	11 1f       	adc	r17, r17
    39c6:	22 1f       	adc	r18, r18
    39c8:	33 1f       	adc	r19, r19
    39ca:	8a 95       	dec	r24
    39cc:	d2 f7       	brpl	.-12     	; 0x39c2 <nrk_signal_unregister+0x12>
    39ce:	d9 01       	movw	r26, r18
    39d0:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    39d2:	e0 91 d6 0c 	lds	r30, 0x0CD6
    39d6:	f0 91 d7 0c 	lds	r31, 0x0CD7
    39da:	45 85       	ldd	r20, Z+13	; 0x0d
    39dc:	56 85       	ldd	r21, Z+14	; 0x0e
    39de:	67 85       	ldd	r22, Z+15	; 0x0f
    39e0:	70 89       	ldd	r23, Z+16	; 0x10
    39e2:	04 23       	and	r16, r20
    39e4:	15 23       	and	r17, r21
    39e6:	26 23       	and	r18, r22
    39e8:	37 23       	and	r19, r23
    39ea:	01 2b       	or	r16, r17
    39ec:	02 2b       	or	r16, r18
    39ee:	03 2b       	or	r16, r19
    39f0:	d1 f0       	breq	.+52     	; 0x3a26 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    39f2:	80 95       	com	r24
    39f4:	90 95       	com	r25
    39f6:	a0 95       	com	r26
    39f8:	b0 95       	com	r27
    39fa:	48 23       	and	r20, r24
    39fc:	59 23       	and	r21, r25
    39fe:	6a 23       	and	r22, r26
    3a00:	7b 23       	and	r23, r27
    3a02:	45 87       	std	Z+13, r20	; 0x0d
    3a04:	56 87       	std	Z+14, r21	; 0x0e
    3a06:	67 87       	std	Z+15, r22	; 0x0f
    3a08:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3a0a:	41 89       	ldd	r20, Z+17	; 0x11
    3a0c:	52 89       	ldd	r21, Z+18	; 0x12
    3a0e:	63 89       	ldd	r22, Z+19	; 0x13
    3a10:	74 89       	ldd	r23, Z+20	; 0x14
    3a12:	84 23       	and	r24, r20
    3a14:	95 23       	and	r25, r21
    3a16:	a6 23       	and	r26, r22
    3a18:	b7 23       	and	r27, r23
    3a1a:	81 8b       	std	Z+17, r24	; 0x11
    3a1c:	92 8b       	std	Z+18, r25	; 0x12
    3a1e:	a3 8b       	std	Z+19, r26	; 0x13
    3a20:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	01 c0       	rjmp	.+2      	; 0x3a28 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    3a26:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	08 95       	ret

00003a2e <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3a2e:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3a30:	40 91 1a 08 	lds	r20, 0x081A
    3a34:	50 91 1b 08 	lds	r21, 0x081B
    3a38:	60 91 1c 08 	lds	r22, 0x081C
    3a3c:	70 91 1d 08 	lds	r23, 0x081D
    3a40:	08 2e       	mov	r0, r24
    3a42:	04 c0       	rjmp	.+8      	; 0x3a4c <nrk_signal_register+0x1e>
    3a44:	76 95       	lsr	r23
    3a46:	67 95       	ror	r22
    3a48:	57 95       	ror	r21
    3a4a:	47 95       	ror	r20
    3a4c:	0a 94       	dec	r0
    3a4e:	d2 f7       	brpl	.-12     	; 0x3a44 <nrk_signal_register+0x16>
    3a50:	40 ff       	sbrs	r20, 0
    3a52:	1d c0       	rjmp	.+58     	; 0x3a8e <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3a54:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3a58:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	a0 e0       	ldi	r26, 0x00	; 0
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	04 c0       	rjmp	.+8      	; 0x3a6e <nrk_signal_register+0x40>
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	aa 1f       	adc	r26, r26
    3a6c:	bb 1f       	adc	r27, r27
    3a6e:	2a 95       	dec	r18
    3a70:	d2 f7       	brpl	.-12     	; 0x3a66 <nrk_signal_register+0x38>
    3a72:	45 85       	ldd	r20, Z+13	; 0x0d
    3a74:	56 85       	ldd	r21, Z+14	; 0x0e
    3a76:	67 85       	ldd	r22, Z+15	; 0x0f
    3a78:	70 89       	ldd	r23, Z+16	; 0x10
    3a7a:	84 2b       	or	r24, r20
    3a7c:	95 2b       	or	r25, r21
    3a7e:	a6 2b       	or	r26, r22
    3a80:	b7 2b       	or	r27, r23
    3a82:	85 87       	std	Z+13, r24	; 0x0d
    3a84:	96 87       	std	Z+14, r25	; 0x0e
    3a86:	a7 87       	std	Z+15, r26	; 0x0f
    3a88:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	08 95       	ret
	}
            
	return NRK_ERROR;
    3a8e:	8f ef       	ldi	r24, 0xFF	; 255
}
    3a90:	08 95       	ret

00003a92 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3a92:	cf 92       	push	r12
    3a94:	df 92       	push	r13
    3a96:	ef 92       	push	r14
    3a98:	ff 92       	push	r15
    3a9a:	cf 93       	push	r28

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3a9c:	c1 2c       	mov	r12, r1
    3a9e:	d1 2c       	mov	r13, r1
    3aa0:	76 01       	movw	r14, r12
    3aa2:	c3 94       	inc	r12
    3aa4:	04 c0       	rjmp	.+8      	; 0x3aae <nrk_event_signal+0x1c>
    3aa6:	cc 0c       	add	r12, r12
    3aa8:	dd 1c       	adc	r13, r13
    3aaa:	ee 1c       	adc	r14, r14
    3aac:	ff 1c       	adc	r15, r15
    3aae:	8a 95       	dec	r24
    3ab0:	d2 f7       	brpl	.-12     	; 0x3aa6 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3ab2:	80 91 1a 08 	lds	r24, 0x081A
    3ab6:	90 91 1b 08 	lds	r25, 0x081B
    3aba:	a0 91 1c 08 	lds	r26, 0x081C
    3abe:	b0 91 1d 08 	lds	r27, 0x081D
    3ac2:	8c 21       	and	r24, r12
    3ac4:	9d 21       	and	r25, r13
    3ac6:	ae 21       	and	r26, r14
    3ac8:	bf 21       	and	r27, r15
    3aca:	89 2b       	or	r24, r25
    3acc:	8a 2b       	or	r24, r26
    3ace:	8b 2b       	or	r24, r27
    3ad0:	11 f4       	brne	.+4      	; 0x3ad6 <nrk_event_signal+0x44>
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	44 c0       	rjmp	.+136    	; 0x3b5e <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    3ad6:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    3ada:	e1 e9       	ldi	r30, 0x91	; 145
    3adc:	fb e0       	ldi	r31, 0x0B	; 11
    3ade:	a3 e9       	ldi	r26, 0x93	; 147
    3ae0:	bb e0       	ldi	r27, 0x0B	; 11

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3ae2:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3ae4:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    3ae6:	90 81       	ld	r25, Z
    3ae8:	91 30       	cpi	r25, 0x01	; 1
    3aea:	b9 f4       	brne	.+46     	; 0x3b1a <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3aec:	42 85       	ldd	r20, Z+10	; 0x0a
    3aee:	53 85       	ldd	r21, Z+11	; 0x0b
    3af0:	64 85       	ldd	r22, Z+12	; 0x0c
    3af2:	75 85       	ldd	r23, Z+13	; 0x0d
    3af4:	4c 21       	and	r20, r12
    3af6:	5d 21       	and	r21, r13
    3af8:	6e 21       	and	r22, r14
    3afa:	7f 21       	and	r23, r15
    3afc:	45 2b       	or	r20, r21
    3afe:	46 2b       	or	r20, r22
    3b00:	47 2b       	or	r20, r23
    3b02:	59 f0       	breq	.+22     	; 0x3b1a <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3b04:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3b06:	16 86       	std	Z+14, r1	; 0x0e
    3b08:	17 86       	std	Z+15, r1	; 0x0f
    3b0a:	10 8a       	std	Z+16, r1	; 0x10
    3b0c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3b0e:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3b10:	c2 86       	std	Z+10, r12	; 0x0a
    3b12:	d3 86       	std	Z+11, r13	; 0x0b
    3b14:	e4 86       	std	Z+12, r14	; 0x0c
    3b16:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    3b18:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3b1a:	90 81       	ld	r25, Z
    3b1c:	92 30       	cpi	r25, 0x02	; 2
    3b1e:	a1 f4       	brne	.+40     	; 0x3b48 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3b20:	42 85       	ldd	r20, Z+10	; 0x0a
    3b22:	53 85       	ldd	r21, Z+11	; 0x0b
    3b24:	64 85       	ldd	r22, Z+12	; 0x0c
    3b26:	75 85       	ldd	r23, Z+13	; 0x0d
    3b28:	4c 15       	cp	r20, r12
    3b2a:	5d 05       	cpc	r21, r13
    3b2c:	6e 05       	cpc	r22, r14
    3b2e:	7f 05       	cpc	r23, r15
    3b30:	59 f4       	brne	.+22     	; 0x3b48 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3b32:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3b34:	16 86       	std	Z+14, r1	; 0x0e
    3b36:	17 86       	std	Z+15, r1	; 0x0f
    3b38:	10 8a       	std	Z+16, r1	; 0x10
    3b3a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3b3c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3b3e:	12 86       	std	Z+10, r1	; 0x0a
    3b40:	13 86       	std	Z+11, r1	; 0x0b
    3b42:	14 86       	std	Z+12, r1	; 0x0c
    3b44:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    3b46:	c1 e0       	ldi	r28, 0x01	; 1
    3b48:	bb 96       	adiw	r30, 0x2b	; 43
    3b4a:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3b4c:	9c e0       	ldi	r25, 0x0C	; 12
    3b4e:	ee 3b       	cpi	r30, 0xBE	; 190
    3b50:	f9 07       	cpc	r31, r25
    3b52:	49 f6       	brne	.-110    	; 0x3ae6 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3b54:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
	if(event_occured)
    3b58:	c1 11       	cpse	r28, r1
    3b5a:	05 c0       	rjmp	.+10     	; 0x3b66 <nrk_event_signal+0xd4>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3b5c:	82 e0       	ldi	r24, 0x02	; 2
    3b5e:	0e 94 a5 19 	call	0x334a	; 0x334a <_nrk_errno_set>
	return NRK_ERROR;
    3b62:	8f ef       	ldi	r24, 0xFF	; 255
    3b64:	01 c0       	rjmp	.+2      	; 0x3b68 <nrk_event_signal+0xd6>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    3b66:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    3b68:	cf 91       	pop	r28
    3b6a:	ff 90       	pop	r15
    3b6c:	ef 90       	pop	r14
    3b6e:	df 90       	pop	r13
    3b70:	cf 90       	pop	r12
    3b72:	08 95       	ret

00003b74 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3b78:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3b7c:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3b80:	05 85       	ldd	r16, Z+13	; 0x0d
    3b82:	16 85       	ldd	r17, Z+14	; 0x0e
    3b84:	27 85       	ldd	r18, Z+15	; 0x0f
    3b86:	30 89       	ldd	r19, Z+16	; 0x10
    3b88:	06 23       	and	r16, r22
    3b8a:	17 23       	and	r17, r23
    3b8c:	28 23       	and	r18, r24
    3b8e:	39 23       	and	r19, r25
    3b90:	01 15       	cp	r16, r1
    3b92:	11 05       	cpc	r17, r1
    3b94:	21 05       	cpc	r18, r1
    3b96:	31 05       	cpc	r19, r1
    3b98:	11 f1       	breq	.+68     	; 0x3bde <nrk_event_wait+0x6a>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3b9e:	81 8b       	std	Z+17, r24	; 0x11
    3ba0:	92 8b       	std	Z+18, r25	; 0x12
    3ba2:	a3 8b       	std	Z+19, r26	; 0x13
    3ba4:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3ba6:	21 e0       	ldi	r18, 0x01	; 1
    3ba8:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3baa:	00 90 c6 0c 	lds	r0, 0x0CC6
    3bae:	04 c0       	rjmp	.+8      	; 0x3bb8 <nrk_event_wait+0x44>
    3bb0:	b6 95       	lsr	r27
    3bb2:	a7 95       	ror	r26
    3bb4:	97 95       	ror	r25
    3bb6:	87 95       	ror	r24
    3bb8:	0a 94       	dec	r0
    3bba:	d2 f7       	brpl	.-12     	; 0x3bb0 <nrk_event_wait+0x3c>
    3bbc:	80 ff       	sbrs	r24, 0
    3bbe:	03 c0       	rjmp	.+6      	; 0x3bc6 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3bc0:	0e 94 a1 21 	call	0x4342	; 0x4342 <nrk_wait_until_nw>
    3bc4:	04 c0       	rjmp	.+8      	; 0x3bce <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 72 21 	call	0x42e4	; 0x42e4 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3bce:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3bd2:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3bd6:	01 89       	ldd	r16, Z+17	; 0x11
    3bd8:	12 89       	ldd	r17, Z+18	; 0x12
    3bda:	23 89       	ldd	r18, Z+19	; 0x13
    3bdc:	34 89       	ldd	r19, Z+20	; 0x14
}
    3bde:	c9 01       	movw	r24, r18
    3be0:	b8 01       	movw	r22, r16
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	08 95       	ret

00003be8 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    3be8:	90 91 d5 0c 	lds	r25, 0x0CD5
    3bec:	93 30       	cpi	r25, 0x03	; 3
    3bee:	d0 f4       	brcc	.+52     	; 0x3c24 <nrk_sem_create+0x3c>
    3bf0:	a9 eb       	ldi	r26, 0xB9	; 185
    3bf2:	bc e0       	ldi	r27, 0x0C	; 12
    3bf4:	e0 e0       	ldi	r30, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    3bf6:	2c 91       	ld	r18, X
    3bf8:	2f 3f       	cpi	r18, 0xFF	; 255
    3bfa:	21 f0       	breq	.+8      	; 0x3c04 <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    3bfc:	ef 5f       	subi	r30, 0xFF	; 255
    3bfe:	13 96       	adiw	r26, 0x03	; 3
    3c00:	e4 30       	cpi	r30, 0x04	; 4
    3c02:	c9 f7       	brne	.-14     	; 0x3bf6 <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	9f 01       	movw	r18, r30
    3c08:	22 0f       	add	r18, r18
    3c0a:	33 1f       	adc	r19, r19
    3c0c:	e2 0f       	add	r30, r18
    3c0e:	f3 1f       	adc	r31, r19
    3c10:	e7 54       	subi	r30, 0x47	; 71
    3c12:	f3 4f       	sbci	r31, 0xF3	; 243
    3c14:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    3c16:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    3c18:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    3c1a:	9f 5f       	subi	r25, 0xFF	; 255
    3c1c:	90 93 d5 0c 	sts	0x0CD5, r25
	return	&nrk_sem_list[i];
    3c20:	cf 01       	movw	r24, r30
    3c22:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    3c24:	80 e0       	ldi	r24, 0x00	; 0
    3c26:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3c28:	08 95       	ret

00003c2a <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3c2a:	2c e0       	ldi	r18, 0x0C	; 12
    3c2c:	89 3b       	cpi	r24, 0xB9	; 185
    3c2e:	92 07       	cpc	r25, r18
    3c30:	69 f0       	breq	.+26     	; 0x3c4c <nrk_get_resource_index+0x22>
    3c32:	2c e0       	ldi	r18, 0x0C	; 12
    3c34:	8c 3b       	cpi	r24, 0xBC	; 188
    3c36:	92 07       	cpc	r25, r18
    3c38:	59 f0       	breq	.+22     	; 0x3c50 <nrk_get_resource_index+0x26>
    3c3a:	2c e0       	ldi	r18, 0x0C	; 12
    3c3c:	8f 3b       	cpi	r24, 0xBF	; 191
    3c3e:	92 07       	cpc	r25, r18
    3c40:	49 f0       	breq	.+18     	; 0x3c54 <nrk_get_resource_index+0x2a>
    3c42:	82 5c       	subi	r24, 0xC2	; 194
    3c44:	9c 40       	sbci	r25, 0x0C	; 12
    3c46:	41 f4       	brne	.+16     	; 0x3c58 <nrk_get_resource_index+0x2e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    3c48:	83 e0       	ldi	r24, 0x03	; 3
    3c4a:	08 95       	ret
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	08 95       	ret
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	08 95       	ret
    3c54:	82 e0       	ldi	r24, 0x02	; 2
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    3c56:	08 95       	ret
	return NRK_ERROR;
    3c58:	8f ef       	ldi	r24, 0xFF	; 255
}
    3c5a:	08 95       	ret

00003c5c <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3c5c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3c60:	8f 3f       	cpi	r24, 0xFF	; 255
    3c62:	11 f4       	brne	.+4      	; 0x3c68 <nrk_sem_query+0xc>
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	03 c0       	rjmp	.+6      	; 0x3c6e <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3c68:	84 30       	cpi	r24, 0x04	; 4
    3c6a:	29 f4       	brne	.+10     	; 0x3c76 <nrk_sem_query+0x1a>
    3c6c:	82 e0       	ldi	r24, 0x02	; 2
    3c6e:	0e 94 a5 19 	call	0x334a	; 0x334a <_nrk_errno_set>
    3c72:	8f ef       	ldi	r24, 0xFF	; 255
    3c74:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    3c76:	99 27       	eor	r25, r25
    3c78:	87 fd       	sbrc	r24, 7
    3c7a:	90 95       	com	r25
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	ee 0f       	add	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	8e 0f       	add	r24, r30
    3c84:	9f 1f       	adc	r25, r31
    3c86:	fc 01       	movw	r30, r24
    3c88:	e7 54       	subi	r30, 0x47	; 71
    3c8a:	f3 4f       	sbci	r31, 0xF3	; 243
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
}
    3c8e:	08 95       	ret

00003c90 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	1f 92       	push	r1
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3ca2:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca8:	11 f4       	brne	.+4      	; 0x3cae <nrk_sem_pend+0x1e>
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	03 c0       	rjmp	.+6      	; 0x3cb4 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3cae:	84 30       	cpi	r24, 0x04	; 4
    3cb0:	29 f4       	brne	.+10     	; 0x3cbc <nrk_sem_pend+0x2c>
    3cb2:	82 e0       	ldi	r24, 0x02	; 2
    3cb4:	0e 94 a5 19 	call	0x334a	; 0x334a <_nrk_errno_set>
    3cb8:	8f ef       	ldi	r24, 0xFF	; 255
    3cba:	41 c0       	rjmp	.+130    	; 0x3d3e <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    3cbc:	89 83       	std	Y+1, r24	; 0x01
    3cbe:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	e8 2e       	mov	r14, r24
    3cc6:	ff 24       	eor	r15, r15
    3cc8:	e7 fc       	sbrc	r14, 7
    3cca:	f0 94       	com	r15
    3ccc:	87 01       	movw	r16, r14
    3cce:	00 0f       	add	r16, r16
    3cd0:	11 1f       	adc	r17, r17
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	ee 0d       	add	r30, r14
    3cd6:	ff 1d       	adc	r31, r15
    3cd8:	e7 54       	subi	r30, 0x47	; 71
    3cda:	f3 4f       	sbci	r31, 0xF3	; 243
    3cdc:	92 81       	ldd	r25, Z+2	; 0x02
    3cde:	91 11       	cpse	r25, r1
    3ce0:	16 c0       	rjmp	.+44     	; 0x3d0e <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    3ce2:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3ce6:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3cea:	97 81       	ldd	r25, Z+7	; 0x07
    3cec:	92 60       	ori	r25, 0x02	; 2
    3cee:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3cf0:	99 27       	eor	r25, r25
    3cf2:	87 fd       	sbrc	r24, 7
    3cf4:	90 95       	com	r25
    3cf6:	a9 2f       	mov	r26, r25
    3cf8:	b9 2f       	mov	r27, r25
    3cfa:	81 8b       	std	Z+17, r24	; 0x11
    3cfc:	92 8b       	std	Z+18, r25	; 0x12
    3cfe:	a3 8b       	std	Z+19, r26	; 0x13
    3d00:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3d02:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3d06:	80 e0       	ldi	r24, 0x00	; 0
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	0e 94 72 21 	call	0x42e4	; 0x42e4 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3d0e:	0e 0d       	add	r16, r14
    3d10:	1f 1d       	adc	r17, r15
    3d12:	d8 01       	movw	r26, r16
    3d14:	a7 54       	subi	r26, 0x47	; 71
    3d16:	b3 4f       	sbci	r27, 0xF3	; 243
    3d18:	12 96       	adiw	r26, 0x02	; 2
    3d1a:	8c 91       	ld	r24, X
    3d1c:	12 97       	sbiw	r26, 0x02	; 2
    3d1e:	81 50       	subi	r24, 0x01	; 1
    3d20:	12 96       	adiw	r26, 0x02	; 2
    3d22:	8c 93       	st	X, r24
    3d24:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3d26:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3d2a:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3d2e:	11 96       	adiw	r26, 0x01	; 1
    3d30:	8c 91       	ld	r24, X
    3d32:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    3d38:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>

	return NRK_OK;
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
}
    3d3e:	0f 90       	pop	r0
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	ff 90       	pop	r15
    3d4a:	ef 90       	pop	r14
    3d4c:	08 95       	ret

00003d4e <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	1f 92       	push	r1
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    3d5c:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3d60:	8f 3f       	cpi	r24, 0xFF	; 255
    3d62:	11 f4       	brne	.+4      	; 0x3d68 <nrk_sem_post+0x1a>
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	03 c0       	rjmp	.+6      	; 0x3d6e <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3d68:	84 30       	cpi	r24, 0x04	; 4
    3d6a:	29 f4       	brne	.+10     	; 0x3d76 <nrk_sem_post+0x28>
    3d6c:	82 e0       	ldi	r24, 0x02	; 2
    3d6e:	0e 94 a5 19 	call	0x334a	; 0x334a <_nrk_errno_set>
    3d72:	8f ef       	ldi	r24, 0xFF	; 255
    3d74:	44 c0       	rjmp	.+136    	; 0x3dfe <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3d76:	48 2f       	mov	r20, r24
    3d78:	55 27       	eor	r21, r21
    3d7a:	47 fd       	sbrc	r20, 7
    3d7c:	50 95       	com	r21
    3d7e:	9a 01       	movw	r18, r20
    3d80:	22 0f       	add	r18, r18
    3d82:	33 1f       	adc	r19, r19
    3d84:	24 0f       	add	r18, r20
    3d86:	35 1f       	adc	r19, r21
    3d88:	89 01       	movw	r16, r18
    3d8a:	07 54       	subi	r16, 0x47	; 71
    3d8c:	13 4f       	sbci	r17, 0xF3	; 243
    3d8e:	f8 01       	movw	r30, r16
    3d90:	22 81       	ldd	r18, Z+2	; 0x02
    3d92:	90 81       	ld	r25, Z
    3d94:	29 17       	cp	r18, r25
    3d96:	94 f5       	brge	.+100    	; 0x3dfc <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>

		nrk_sem_list[id].value++;
    3d9e:	f8 01       	movw	r30, r16
    3da0:	92 81       	ldd	r25, Z+2	; 0x02
    3da2:	9f 5f       	subi	r25, 0xFF	; 255
    3da4:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3da6:	e0 91 d6 0c 	lds	r30, 0x0CD6
    3daa:	f0 91 d7 0c 	lds	r31, 0x0CD7
    3dae:	14 82       	std	Z+4, r1	; 0x04
    3db0:	e1 e9       	ldi	r30, 0x91	; 145
    3db2:	fb e0       	ldi	r31, 0x0B	; 11

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	99 27       	eor	r25, r25
    3db8:	87 fd       	sbrc	r24, 7
    3dba:	90 95       	com	r25
    3dbc:	a9 2f       	mov	r26, r25
    3dbe:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3dc0:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3dc2:	30 81       	ld	r19, Z
    3dc4:	32 30       	cpi	r19, 0x02	; 2
    3dc6:	99 f4       	brne	.+38     	; 0x3dee <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3dc8:	42 85       	ldd	r20, Z+10	; 0x0a
    3dca:	53 85       	ldd	r21, Z+11	; 0x0b
    3dcc:	64 85       	ldd	r22, Z+12	; 0x0c
    3dce:	75 85       	ldd	r23, Z+13	; 0x0d
    3dd0:	48 17       	cp	r20, r24
    3dd2:	59 07       	cpc	r21, r25
    3dd4:	6a 07       	cpc	r22, r26
    3dd6:	7b 07       	cpc	r23, r27
    3dd8:	51 f4       	brne	.+20     	; 0x3dee <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3dda:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    3ddc:	16 86       	std	Z+14, r1	; 0x0e
    3dde:	17 86       	std	Z+15, r1	; 0x0f
    3de0:	10 8a       	std	Z+16, r1	; 0x10
    3de2:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3de4:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3de6:	12 86       	std	Z+10, r1	; 0x0a
    3de8:	13 86       	std	Z+11, r1	; 0x0b
    3dea:	14 86       	std	Z+12, r1	; 0x0c
    3dec:	15 86       	std	Z+13, r1	; 0x0d
    3dee:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3df0:	3c e0       	ldi	r19, 0x0C	; 12
    3df2:	ee 3b       	cpi	r30, 0xBE	; 190
    3df4:	f3 07       	cpc	r31, r19
    3df6:	29 f7       	brne	.-54     	; 0x3dc2 <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    3df8:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
	}
		
return NRK_OK;
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
}
    3dfe:	0f 90       	pop	r0
    3e00:	df 91       	pop	r29
    3e02:	cf 91       	pop	r28
    3e04:	1f 91       	pop	r17
    3e06:	0f 91       	pop	r16
    3e08:	08 95       	ret

00003e0a <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3e0a:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3e0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3e10:	11 f4       	brne	.+4      	; 0x3e16 <nrk_sem_delete+0xc>
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	03 c0       	rjmp	.+6      	; 0x3e1c <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3e16:	84 30       	cpi	r24, 0x04	; 4
    3e18:	29 f4       	brne	.+10     	; 0x3e24 <nrk_sem_delete+0x1a>
    3e1a:	82 e0       	ldi	r24, 0x02	; 2
    3e1c:	0e 94 a5 19 	call	0x334a	; 0x334a <_nrk_errno_set>
    3e20:	8f ef       	ldi	r24, 0xFF	; 255
    3e22:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3e24:	99 27       	eor	r25, r25
    3e26:	87 fd       	sbrc	r24, 7
    3e28:	90 95       	com	r25
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	ee 0f       	add	r30, r30
    3e2e:	ff 1f       	adc	r31, r31
    3e30:	8e 0f       	add	r24, r30
    3e32:	9f 1f       	adc	r25, r31
    3e34:	fc 01       	movw	r30, r24
    3e36:	e7 54       	subi	r30, 0x47	; 71
    3e38:	f3 4f       	sbci	r31, 0xF3	; 243
    3e3a:	8f ef       	ldi	r24, 0xFF	; 255
    3e3c:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3e3e:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    3e40:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    3e42:	80 91 d5 0c 	lds	r24, 0x0CD5
    3e46:	81 50       	subi	r24, 0x01	; 1
    3e48:	80 93 d5 0c 	sts	0x0CD5, r24
return NRK_OK;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
}
    3e4e:	08 95       	ret

00003e50 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3e50:	e0 91 cb 0c 	lds	r30, 0x0CCB
    3e54:	f0 91 cc 0c 	lds	r31, 0x0CCC
}
    3e58:	80 81       	ld	r24, Z
    3e5a:	08 95       	ret

00003e5c <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    3e5c:	e0 91 cb 0c 	lds	r30, 0x0CCB
    3e60:	f0 91 cc 0c 	lds	r31, 0x0CCC
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3e64:	30 97       	sbiw	r30, 0x00	; 0
    3e66:	21 f0       	breq	.+8      	; 0x3e70 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3e68:	03 80       	ldd	r0, Z+3	; 0x03
    3e6a:	f4 81       	ldd	r31, Z+4	; 0x04
    3e6c:	e0 2d       	mov	r30, r0
    3e6e:	fa cf       	rjmp	.-12     	; 0x3e64 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3e70:	08 95       	ret

00003e72 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3e72:	af 92       	push	r10
    3e74:	bf 92       	push	r11
    3e76:	cf 92       	push	r12
    3e78:	df 92       	push	r13
    3e7a:	ef 92       	push	r14
    3e7c:	ff 92       	push	r15
    3e7e:	0f 93       	push	r16
    3e80:	1f 93       	push	r17
    3e82:	cf 93       	push	r28
    3e84:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3e86:	e0 91 88 0b 	lds	r30, 0x0B88
    3e8a:	f0 91 89 0b 	lds	r31, 0x0B89
    3e8e:	30 97       	sbiw	r30, 0x00	; 0
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <nrk_add_to_readyQ+0x22>
    3e92:	94 c0       	rjmp	.+296    	; 0x3fbc <nrk_add_to_readyQ+0x14a>
    {
        return;
    }


    NextNode = _head_node;
    3e94:	00 91 cb 0c 	lds	r16, 0x0CCB
    3e98:	10 91 cc 0c 	lds	r17, 0x0CCC
    CurNode = _free_node;

    if (_head_node != NULL)
    3e9c:	01 15       	cp	r16, r1
    3e9e:	11 05       	cpc	r17, r1
    3ea0:	09 f4       	brne	.+2      	; 0x3ea4 <nrk_add_to_readyQ+0x32>
    3ea2:	4c c0       	rjmp	.+152    	; 0x3f3c <nrk_add_to_readyQ+0xca>
    3ea4:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3ea6:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    3ea8:	58 2f       	mov	r21, r24
    3eaa:	54 03       	mulsu	r21, r20
    3eac:	90 01       	movw	r18, r0
    3eae:	11 24       	eor	r1, r1
    3eb0:	26 57       	subi	r18, 0x76	; 118
    3eb2:	34 4f       	sbci	r19, 0xF4	; 244
    3eb4:	79 01       	movw	r14, r18
    3eb6:	9a e0       	ldi	r25, 0x0A	; 10
    3eb8:	e9 0e       	add	r14, r25
    3eba:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3ebc:	69 01       	movw	r12, r18
    3ebe:	c4 e0       	ldi	r28, 0x04	; 4
    3ec0:	cc 0e       	add	r12, r28
    3ec2:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    3ec4:	59 01       	movw	r10, r18
    3ec6:	db e0       	ldi	r29, 0x0B	; 11
    3ec8:	ad 0e       	add	r10, r29
    3eca:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3ecc:	2c 91       	ld	r18, X
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	42 9f       	mul	r20, r18
    3ed2:	b0 01       	movw	r22, r0
    3ed4:	43 9f       	mul	r20, r19
    3ed6:	70 0d       	add	r23, r0
    3ed8:	11 24       	eor	r1, r1
    3eda:	66 57       	subi	r22, 0x76	; 118
    3edc:	74 4f       	sbci	r23, 0xF4	; 244
    3ede:	eb 01       	movw	r28, r22
    3ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee2:	99 23       	and	r25, r25
    3ee4:	29 f0       	breq	.+10     	; 0x3ef0 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3ee6:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ee8:	e7 01       	movw	r28, r14
    3eea:	98 81       	ld	r25, Y
    3eec:	59 17       	cp	r21, r25
    3eee:	40 f1       	brcs	.+80     	; 0x3f40 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3ef0:	e6 01       	movw	r28, r12
    3ef2:	98 81       	ld	r25, Y
    3ef4:	99 23       	and	r25, r25
    3ef6:	69 f0       	breq	.+26     	; 0x3f12 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3ef8:	42 9f       	mul	r20, r18
    3efa:	b0 01       	movw	r22, r0
    3efc:	43 9f       	mul	r20, r19
    3efe:	70 0d       	add	r23, r0
    3f00:	11 24       	eor	r1, r1
    3f02:	66 57       	subi	r22, 0x76	; 118
    3f04:	74 4f       	sbci	r23, 0xF4	; 244
    3f06:	eb 01       	movw	r28, r22
    3f08:	5a 85       	ldd	r21, Y+10	; 0x0a
    3f0a:	e5 01       	movw	r28, r10
    3f0c:	98 81       	ld	r25, Y
    3f0e:	59 17       	cp	r21, r25
    3f10:	b8 f0       	brcs	.+46     	; 0x3f40 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3f12:	42 9f       	mul	r20, r18
    3f14:	b0 01       	movw	r22, r0
    3f16:	43 9f       	mul	r20, r19
    3f18:	70 0d       	add	r23, r0
    3f1a:	11 24       	eor	r1, r1
    3f1c:	9b 01       	movw	r18, r22
    3f1e:	26 57       	subi	r18, 0x76	; 118
    3f20:	34 4f       	sbci	r19, 0xF4	; 244
    3f22:	e9 01       	movw	r28, r18
    3f24:	2a 85       	ldd	r18, Y+10	; 0x0a
    3f26:	e7 01       	movw	r28, r14
    3f28:	98 81       	ld	r25, Y
    3f2a:	29 17       	cp	r18, r25
    3f2c:	48 f0       	brcs	.+18     	; 0x3f40 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3f2e:	13 96       	adiw	r26, 0x03	; 3
    3f30:	0d 90       	ld	r0, X+
    3f32:	bc 91       	ld	r27, X
    3f34:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3f36:	10 97       	sbiw	r26, 0x00	; 0
    3f38:	49 f6       	brne	.-110    	; 0x3ecc <nrk_add_to_readyQ+0x5a>
    3f3a:	02 c0       	rjmp	.+4      	; 0x3f40 <nrk_add_to_readyQ+0xce>
    3f3c:	a0 e0       	ldi	r26, 0x00	; 0
    3f3e:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3f40:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3f42:	c3 81       	ldd	r28, Z+3	; 0x03
    3f44:	d4 81       	ldd	r29, Z+4	; 0x04
    3f46:	d0 93 89 0b 	sts	0x0B89, r29
    3f4a:	c0 93 88 0b 	sts	0x0B88, r28

    if (NextNode == _head_node)
    3f4e:	a0 17       	cp	r26, r16
    3f50:	b1 07       	cpc	r27, r17
    3f52:	b1 f4       	brne	.+44     	; 0x3f80 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    3f54:	10 97       	sbiw	r26, 0x00	; 0
    3f56:	49 f0       	breq	.+18     	; 0x3f6a <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    3f58:	b4 83       	std	Z+4, r27	; 0x04
    3f5a:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    3f5c:	12 82       	std	Z+2, r1	; 0x02
    3f5e:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3f60:	12 96       	adiw	r26, 0x02	; 2
    3f62:	fc 93       	st	X, r31
    3f64:	ee 93       	st	-X, r30
    3f66:	11 97       	sbiw	r26, 0x01	; 1
    3f68:	06 c0       	rjmp	.+12     	; 0x3f76 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    3f6a:	14 82       	std	Z+4, r1	; 0x04
    3f6c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3f6e:	12 82       	std	Z+2, r1	; 0x02
    3f70:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3f72:	fa 83       	std	Y+2, r31	; 0x02
    3f74:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3f76:	f0 93 cc 0c 	sts	0x0CCC, r31
    3f7a:	e0 93 cb 0c 	sts	0x0CCB, r30
    3f7e:	1e c0       	rjmp	.+60     	; 0x3fbc <nrk_add_to_readyQ+0x14a>

    }
    else
    {
        if (NextNode != _free_node)
    3f80:	ac 17       	cp	r26, r28
    3f82:	bd 07       	cpc	r27, r29
    3f84:	79 f0       	breq	.+30     	; 0x3fa4 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3f86:	11 96       	adiw	r26, 0x01	; 1
    3f88:	8d 91       	ld	r24, X+
    3f8a:	9c 91       	ld	r25, X
    3f8c:	12 97       	sbiw	r26, 0x02	; 2
    3f8e:	92 83       	std	Z+2, r25	; 0x02
    3f90:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3f92:	b4 83       	std	Z+4, r27	; 0x04
    3f94:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3f96:	11 96       	adiw	r26, 0x01	; 1
    3f98:	cd 91       	ld	r28, X+
    3f9a:	dc 91       	ld	r29, X
    3f9c:	12 97       	sbiw	r26, 0x02	; 2
    3f9e:	fc 83       	std	Y+4, r31	; 0x04
    3fa0:	eb 83       	std	Y+3, r30	; 0x03
    3fa2:	08 c0       	rjmp	.+16     	; 0x3fb4 <nrk_add_to_readyQ+0x142>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3fa4:	14 82       	std	Z+4, r1	; 0x04
    3fa6:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    3fa8:	11 96       	adiw	r26, 0x01	; 1
    3faa:	8d 91       	ld	r24, X+
    3fac:	9c 91       	ld	r25, X
    3fae:	12 97       	sbiw	r26, 0x02	; 2
    3fb0:	92 83       	std	Z+2, r25	; 0x02
    3fb2:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    3fb4:	12 96       	adiw	r26, 0x02	; 2
    3fb6:	fc 93       	st	X, r31
    3fb8:	ee 93       	st	-X, r30
    3fba:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3fbc:	df 91       	pop	r29
    3fbe:	cf 91       	pop	r28
    3fc0:	1f 91       	pop	r17
    3fc2:	0f 91       	pop	r16
    3fc4:	ff 90       	pop	r15
    3fc6:	ef 90       	pop	r14
    3fc8:	df 90       	pop	r13
    3fca:	cf 90       	pop	r12
    3fcc:	bf 90       	pop	r11
    3fce:	af 90       	pop	r10
    3fd0:	08 95       	ret

00003fd2 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    3fd6:	e0 91 cb 0c 	lds	r30, 0x0CCB
    3fda:	f0 91 cc 0c 	lds	r31, 0x0CCC
    3fde:	30 97       	sbiw	r30, 0x00	; 0
    3fe0:	09 f4       	brne	.+2      	; 0x3fe4 <nrk_rem_from_readyQ+0x12>
    3fe2:	44 c0       	rjmp	.+136    	; 0x406c <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    3fe4:	99 27       	eor	r25, r25
    3fe6:	87 fd       	sbrc	r24, 7
    3fe8:	90 95       	com	r25
    3fea:	20 81       	ld	r18, Z
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	28 17       	cp	r18, r24
    3ff0:	39 07       	cpc	r19, r25
    3ff2:	81 f4       	brne	.+32     	; 0x4014 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3ff4:	a3 81       	ldd	r26, Z+3	; 0x03
    3ff6:	b4 81       	ldd	r27, Z+4	; 0x04
    3ff8:	b0 93 cc 0c 	sts	0x0CCC, r27
    3ffc:	a0 93 cb 0c 	sts	0x0CCB, r26
        _head_node->Prev = NULL;
    4000:	12 96       	adiw	r26, 0x02	; 2
    4002:	1c 92       	st	X, r1
    4004:	1e 92       	st	-X, r1
    4006:	11 97       	sbiw	r26, 0x01	; 1
    4008:	18 c0       	rjmp	.+48     	; 0x403a <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    400a:	03 80       	ldd	r0, Z+3	; 0x03
    400c:	f4 81       	ldd	r31, Z+4	; 0x04
    400e:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    4010:	30 97       	sbiw	r30, 0x00	; 0
    4012:	61 f1       	breq	.+88     	; 0x406c <nrk_rem_from_readyQ+0x9a>
    4014:	20 81       	ld	r18, Z
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	28 17       	cp	r18, r24
    401a:	39 07       	cpc	r19, r25
    401c:	b1 f7       	brne	.-20     	; 0x400a <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    401e:	c1 81       	ldd	r28, Z+1	; 0x01
    4020:	d2 81       	ldd	r29, Z+2	; 0x02
    4022:	83 81       	ldd	r24, Z+3	; 0x03
    4024:	94 81       	ldd	r25, Z+4	; 0x04
    4026:	9c 83       	std	Y+4, r25	; 0x04
    4028:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    402a:	a3 81       	ldd	r26, Z+3	; 0x03
    402c:	b4 81       	ldd	r27, Z+4	; 0x04
    402e:	10 97       	sbiw	r26, 0x00	; 0
    4030:	21 f0       	breq	.+8      	; 0x403a <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    4032:	12 96       	adiw	r26, 0x02	; 2
    4034:	dc 93       	st	X, r29
    4036:	ce 93       	st	-X, r28
    4038:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    403a:	a0 91 88 0b 	lds	r26, 0x0B88
    403e:	b0 91 89 0b 	lds	r27, 0x0B89
    4042:	10 97       	sbiw	r26, 0x00	; 0
    4044:	39 f4       	brne	.+14     	; 0x4054 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    4046:	f0 93 89 0b 	sts	0x0B89, r31
    404a:	e0 93 88 0b 	sts	0x0B88, r30
        _free_node->Next = NULL;
    404e:	14 82       	std	Z+4, r1	; 0x04
    4050:	13 82       	std	Z+3, r1	; 0x03
    4052:	0a c0       	rjmp	.+20     	; 0x4068 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    4054:	b4 83       	std	Z+4, r27	; 0x04
    4056:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    4058:	12 96       	adiw	r26, 0x02	; 2
    405a:	fc 93       	st	X, r31
    405c:	ee 93       	st	-X, r30
    405e:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    4060:	f0 93 89 0b 	sts	0x0B89, r31
    4064:	e0 93 88 0b 	sts	0x0B88, r30
    }
    _free_node->Prev = NULL;
    4068:	12 82       	std	Z+2, r1	; 0x02
    406a:	11 82       	std	Z+1, r1	; 0x01
}
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	08 95       	ret

00004072 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    4080:	4b 81       	ldd	r20, Y+3	; 0x03
    4082:	5c 81       	ldd	r21, Y+4	; 0x04
    4084:	69 81       	ldd	r22, Y+1	; 0x01
    4086:	7a 81       	ldd	r23, Y+2	; 0x02
    4088:	8d 81       	ldd	r24, Y+5	; 0x05
    408a:	9e 81       	ldd	r25, Y+6	; 0x06
    408c:	0e 94 e7 2b 	call	0x57ce	; 0x57ce <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    4090:	2f 81       	ldd	r18, Y+7	; 0x07
    4092:	22 23       	and	r18, r18
    4094:	71 f0       	breq	.+28     	; 0x40b2 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    4096:	4b 81       	ldd	r20, Y+3	; 0x03
    4098:	5c 81       	ldd	r21, Y+4	; 0x04
    409a:	e1 2c       	mov	r14, r1
    409c:	f1 2c       	mov	r15, r1
    409e:	00 e0       	ldi	r16, 0x00	; 0
    40a0:	10 e0       	ldi	r17, 0x00	; 0
    40a2:	20 e0       	ldi	r18, 0x00	; 0
    40a4:	30 e0       	ldi	r19, 0x00	; 0
    40a6:	bc 01       	movw	r22, r24
    40a8:	ce 01       	movw	r24, r28
    40aa:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    40ae:	1f 82       	std	Y+7, r1	; 0x07
    40b0:	0c c0       	rjmp	.+24     	; 0x40ca <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    40b2:	e8 81       	ld	r30, Y
    40b4:	2b e2       	ldi	r18, 0x2B	; 43
    40b6:	e2 02       	muls	r30, r18
    40b8:	f0 01       	movw	r30, r0
    40ba:	11 24       	eor	r1, r1
    40bc:	e6 57       	subi	r30, 0x76	; 118
    40be:	f4 4f       	sbci	r31, 0xF4	; 244
    40c0:	21 85       	ldd	r18, Z+9	; 0x09
    40c2:	23 30       	cpi	r18, 0x03	; 3
    40c4:	b9 f4       	brne	.+46     	; 0x40f4 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    40ca:	e8 81       	ld	r30, Y
    40cc:	8b e2       	ldi	r24, 0x2B	; 43
    40ce:	e8 02       	muls	r30, r24
    40d0:	f0 01       	movw	r30, r0
    40d2:	11 24       	eor	r1, r1
    40d4:	e6 57       	subi	r30, 0x76	; 118
    40d6:	f4 4f       	sbci	r31, 0xF4	; 244
    40d8:	85 89       	ldd	r24, Z+21	; 0x15
    40da:	96 89       	ldd	r25, Z+22	; 0x16
    40dc:	a7 89       	ldd	r26, Z+23	; 0x17
    40de:	b0 8d       	ldd	r27, Z+24	; 0x18
    40e0:	89 2b       	or	r24, r25
    40e2:	8a 2b       	or	r24, r26
    40e4:	8b 2b       	or	r24, r27
    40e6:	41 f4       	brne	.+16     	; 0x40f8 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    40e8:	82 e0       	ldi	r24, 0x02	; 2
    40ea:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    40ec:	88 81       	ld	r24, Y
    40ee:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <nrk_add_to_readyQ>
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    40f4:	8f ef       	ldi	r24, 0xFF	; 255
    40f6:	01 c0       	rjmp	.+2      	; 0x40fa <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    40f8:	81 e0       	ldi	r24, 0x01	; 1
}
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	ff 90       	pop	r15
    4104:	ef 90       	pop	r14
    4106:	08 95       	ret

00004108 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    4108:	1f 93       	push	r17
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
    4112:	28 97       	sbiw	r28, 0x08	; 8
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	29 83       	std	Y+1, r18	; 0x01
    4120:	3a 83       	std	Y+2, r19	; 0x02
    4122:	4b 83       	std	Y+3, r20	; 0x03
    4124:	5c 83       	std	Y+4, r21	; 0x04
    4126:	6d 83       	std	Y+5, r22	; 0x05
    4128:	7e 83       	std	Y+6, r23	; 0x06
    412a:	8f 83       	std	Y+7, r24	; 0x07
    412c:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    412e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    4132:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    4136:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    4138:	ce 01       	movw	r24, r28
    413a:	01 96       	adiw	r24, 0x01	; 1
    413c:	0e 94 96 24 	call	0x492c	; 0x492c <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    4140:	63 30       	cpi	r22, 0x03	; 3
    4142:	71 05       	cpc	r23, r1
    4144:	98 f0       	brcs	.+38     	; 0x416c <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    4146:	e0 91 d6 0c 	lds	r30, 0x0CD6
    414a:	f0 91 d7 0c 	lds	r31, 0x0CD7
    414e:	21 2f       	mov	r18, r17
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	62 0f       	add	r22, r18
    4154:	73 1f       	adc	r23, r19
    4156:	cb 01       	movw	r24, r22
    4158:	a0 e0       	ldi	r26, 0x00	; 0
    415a:	b0 e0       	ldi	r27, 0x00	; 0
    415c:	85 8b       	std	Z+21, r24	; 0x15
    415e:	96 8b       	std	Z+22, r25	; 0x16
    4160:	a7 8b       	std	Z+23, r26	; 0x17
    4162:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    4164:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>

    return NRK_OK;
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	01 c0       	rjmp	.+2      	; 0x416e <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    416c:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    416e:	28 96       	adiw	r28, 0x08	; 8
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	df 91       	pop	r29
    417c:	cf 91       	pop	r28
    417e:	1f 91       	pop	r17
    4180:	08 95       	ret

00004182 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    4182:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    4186:	e0 91 d6 0c 	lds	r30, 0x0CD6
    418a:	f0 91 d7 0c 	lds	r31, 0x0CD7
    418e:	85 81       	ldd	r24, Z+5	; 0x05
    4190:	81 11       	cpse	r24, r1
    4192:	f7 cf       	rjmp	.-18     	; 0x4182 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    4194:	08 95       	ret

00004196 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    4196:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    4198:	0e 94 c7 1b 	call	0x378e	; 0x378e <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    419c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    41a0:	e0 91 d6 0c 	lds	r30, 0x0CD6
    41a4:	f0 91 d7 0c 	lds	r31, 0x0CD7
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	92 a7       	std	Z+42, r25	; 0x2a
    41ae:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    41b0:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    41b2:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    41b6:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    41b8:	88 3f       	cpi	r24, 0xF8	; 248
    41ba:	80 f4       	brcc	.+32     	; 0x41dc <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    41bc:	0e 94 ab 28 	call	0x5156	; 0x5156 <_nrk_get_next_wakeup>
    41c0:	2c 2f       	mov	r18, r28
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	2f 5f       	subi	r18, 0xFF	; 255
    41c6:	3f 4f       	sbci	r19, 0xFF	; 255
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	28 17       	cp	r18, r24
    41cc:	39 07       	cpc	r19, r25
    41ce:	34 f4       	brge	.+12     	; 0x41dc <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    41d4:	80 93 34 0b 	sts	0x0B34, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    41d8:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    41dc:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    41e0:	0e 94 c1 20 	call	0x4182	; 0x4182 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	cf 91       	pop	r28
    41e8:	08 95       	ret

000041ea <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    41ea:	e0 91 d6 0c 	lds	r30, 0x0CD6
    41ee:	f0 91 d7 0c 	lds	r31, 0x0CD7
    41f2:	80 85       	ldd	r24, Z+8	; 0x08
    41f4:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    41f8:	e0 91 d6 0c 	lds	r30, 0x0CD6
    41fc:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4200:	84 e0       	ldi	r24, 0x04	; 4
    4202:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    4204:	0e 94 cb 20 	call	0x4196	; 0x4196 <nrk_wait_until_next_period>
    return NRK_OK;
}
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	08 95       	ret

0000420c <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    4212:	0e 94 c7 1b 	call	0x378e	; 0x378e <nrk_stack_check>

    if (p == 0)
    4216:	20 97       	sbiw	r28, 0x00	; 0
    4218:	11 f4       	brne	.+4      	; 0x421e <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    421a:	c1 e0       	ldi	r28, 0x01	; 1
    421c:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    421e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4222:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4226:	f0 91 d7 0c 	lds	r31, 0x0CD7
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    422e:	d2 a7       	std	Z+42, r29	; 0x2a
    4230:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    4232:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    4236:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    4238:	88 3f       	cpi	r24, 0xF8	; 248
    423a:	80 f4       	brcc	.+32     	; 0x425c <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    423c:	0e 94 ab 28 	call	0x5156	; 0x5156 <_nrk_get_next_wakeup>
    4240:	2c 2f       	mov	r18, r28
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	2f 5f       	subi	r18, 0xFF	; 255
    4246:	3f 4f       	sbci	r19, 0xFF	; 255
    4248:	90 e0       	ldi	r25, 0x00	; 0
    424a:	28 17       	cp	r18, r24
    424c:	39 07       	cpc	r19, r25
    424e:	34 f4       	brge	.+12     	; 0x425c <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    4250:	82 e0       	ldi	r24, 0x02	; 2
    4252:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4254:	80 93 34 0b 	sts	0x0B34, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    4258:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    425c:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    4260:	0e 94 c1 20 	call	0x4182	; 0x4182 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	df 91       	pop	r29
    4268:	cf 91       	pop	r28
    426a:	08 95       	ret

0000426c <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    426c:	ef 92       	push	r14
    426e:	ff 92       	push	r15
    4270:	0f 93       	push	r16
    4272:	1f 93       	push	r17
    4274:	cf 93       	push	r28
    4276:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    4278:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    427c:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4280:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4288:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    428c:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    428e:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4292:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4296:	e8 2e       	mov	r14, r24
    4298:	f1 2c       	mov	r15, r1
    429a:	c7 01       	movw	r24, r14
    429c:	80 0f       	add	r24, r16
    429e:	91 1f       	adc	r25, r17
    42a0:	a0 e0       	ldi	r26, 0x00	; 0
    42a2:	b0 e0       	ldi	r27, 0x00	; 0
    42a4:	85 8b       	std	Z+21, r24	; 0x15
    42a6:	96 8b       	std	Z+22, r25	; 0x16
    42a8:	a7 8b       	std	Z+23, r26	; 0x17
    42aa:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    42ac:	c8 3f       	cpi	r28, 0xF8	; 248
    42ae:	78 f4       	brcc	.+30     	; 0x42ce <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    42b0:	0e 94 ab 28 	call	0x5156	; 0x5156 <_nrk_get_next_wakeup>
    42b4:	9f ef       	ldi	r25, 0xFF	; 255
    42b6:	e9 1a       	sub	r14, r25
    42b8:	f9 0a       	sbc	r15, r25
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	e8 16       	cp	r14, r24
    42be:	f9 06       	cpc	r15, r25
    42c0:	34 f4       	brge	.+12     	; 0x42ce <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    42c2:	82 e0       	ldi	r24, 0x02	; 2
    42c4:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    42c6:	80 93 34 0b 	sts	0x0B34, r24
            _nrk_set_next_wakeup (timer);
    42ca:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    42ce:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    42d2:	0e 94 c1 20 	call	0x4182	; 0x4182 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	cf 91       	pop	r28
    42da:	1f 91       	pop	r17
    42dc:	0f 91       	pop	r16
    42de:	ff 90       	pop	r15
    42e0:	ef 90       	pop	r14
    42e2:	08 95       	ret

000042e4 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    42ea:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    42ee:	e0 91 d6 0c 	lds	r30, 0x0CD6
    42f2:	f0 91 d7 0c 	lds	r31, 0x0CD7
    42f6:	21 e0       	ldi	r18, 0x01	; 1
    42f8:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    42fa:	ce 01       	movw	r24, r28
    42fc:	a0 e0       	ldi	r26, 0x00	; 0
    42fe:	b0 e0       	ldi	r27, 0x00	; 0
    4300:	85 8b       	std	Z+21, r24	; 0x15
    4302:	96 8b       	std	Z+22, r25	; 0x16
    4304:	a7 8b       	std	Z+23, r26	; 0x17
    4306:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    4308:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    430c:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    430e:	88 3f       	cpi	r24, 0xF8	; 248
    4310:	80 f4       	brcc	.+32     	; 0x4332 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4312:	0e 94 ab 28 	call	0x5156	; 0x5156 <_nrk_get_next_wakeup>
    4316:	2c 2f       	mov	r18, r28
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	2f 5f       	subi	r18, 0xFF	; 255
    431c:	3f 4f       	sbci	r19, 0xFF	; 255
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	28 17       	cp	r18, r24
    4322:	39 07       	cpc	r19, r25
    4324:	34 f4       	brge	.+12     	; 0x4332 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    4326:	82 e0       	ldi	r24, 0x02	; 2
    4328:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    432a:	80 93 34 0b 	sts	0x0B34, r24
            _nrk_set_next_wakeup (timer);
    432e:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4332:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4336:	0e 94 c1 20 	call	0x4182	; 0x4182 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	df 91       	pop	r29
    433e:	cf 91       	pop	r28
    4340:	08 95       	ret

00004342 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    4342:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    4344:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    4348:	e0 91 d6 0c 	lds	r30, 0x0CD6
    434c:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    4354:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    4356:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    435a:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    435c:	88 3f       	cpi	r24, 0xF8	; 248
    435e:	80 f4       	brcc	.+32     	; 0x4380 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    4360:	0e 94 ab 28 	call	0x5156	; 0x5156 <_nrk_get_next_wakeup>
    4364:	2c 2f       	mov	r18, r28
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	2f 5f       	subi	r18, 0xFF	; 255
    436a:	3f 4f       	sbci	r19, 0xFF	; 255
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	28 17       	cp	r18, r24
    4370:	39 07       	cpc	r19, r25
    4372:	34 f4       	brge	.+12     	; 0x4380 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    4374:	82 e0       	ldi	r24, 0x02	; 2
    4376:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4378:	80 93 34 0b 	sts	0x0B34, r24
            _nrk_set_next_wakeup (timer);
    437c:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    4380:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4384:	0e 94 c1 20 	call	0x4182	; 0x4182 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	cf 91       	pop	r28
    438c:	08 95       	ret

0000438e <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    438e:	1f 93       	push	r17
    4390:	cf 93       	push	r28
    4392:	df 93       	push	r29
    4394:	cd b7       	in	r28, 0x3d	; 61
    4396:	de b7       	in	r29, 0x3e	; 62
    4398:	28 97       	sbiw	r28, 0x08	; 8
    439a:	0f b6       	in	r0, 0x3f	; 63
    439c:	f8 94       	cli
    439e:	de bf       	out	0x3e, r29	; 62
    43a0:	0f be       	out	0x3f, r0	; 63
    43a2:	cd bf       	out	0x3d, r28	; 61
    43a4:	29 83       	std	Y+1, r18	; 0x01
    43a6:	3a 83       	std	Y+2, r19	; 0x02
    43a8:	4b 83       	std	Y+3, r20	; 0x03
    43aa:	5c 83       	std	Y+4, r21	; 0x04
    43ac:	6d 83       	std	Y+5, r22	; 0x05
    43ae:	7e 83       	std	Y+6, r23	; 0x06
    43b0:	8f 83       	std	Y+7, r24	; 0x07
    43b2:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    43b4:	0e 94 c7 1b 	call	0x378e	; 0x378e <nrk_stack_check>

    nrk_int_disable ();
    43b8:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    43bc:	e0 91 d6 0c 	lds	r30, 0x0CD6
    43c0:	f0 91 d7 0c 	lds	r31, 0x0CD7
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	92 a7       	std	Z+42, r25	; 0x2a
    43ce:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    43d0:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    43d4:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    43d6:	ce 01       	movw	r24, r28
    43d8:	01 96       	adiw	r24, 0x01	; 1
    43da:	0e 94 96 24 	call	0x492c	; 0x492c <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    43de:	e0 91 d6 0c 	lds	r30, 0x0CD6
    43e2:	f0 91 d7 0c 	lds	r31, 0x0CD7
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	81 0f       	add	r24, r17
    43ec:	91 1d       	adc	r25, r1
    43ee:	a1 1d       	adc	r26, r1
    43f0:	b1 1d       	adc	r27, r1
    43f2:	85 8b       	std	Z+21, r24	; 0x15
    43f4:	96 8b       	std	Z+22, r25	; 0x16
    43f6:	a7 8b       	std	Z+23, r26	; 0x17
    43f8:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    43fa:	18 3f       	cpi	r17, 0xF8	; 248
    43fc:	80 f4       	brcc	.+32     	; 0x441e <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    43fe:	0e 94 ab 28 	call	0x5156	; 0x5156 <_nrk_get_next_wakeup>
    4402:	21 2f       	mov	r18, r17
    4404:	30 e0       	ldi	r19, 0x00	; 0
    4406:	2f 5f       	subi	r18, 0xFF	; 255
    4408:	3f 4f       	sbci	r19, 0xFF	; 255
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	28 17       	cp	r18, r24
    440e:	39 07       	cpc	r19, r25
    4410:	34 f4       	brge	.+12     	; 0x441e <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    4412:	82 e0       	ldi	r24, 0x02	; 2
    4414:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    4416:	80 93 34 0b 	sts	0x0B34, r24
            _nrk_set_next_wakeup (timer);
    441a:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    441e:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    4422:	0e 94 c1 20 	call	0x4182	; 0x4182 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	28 96       	adiw	r28, 0x08	; 8
    442a:	0f b6       	in	r0, 0x3f	; 63
    442c:	f8 94       	cli
    442e:	de bf       	out	0x3e, r29	; 62
    4430:	0f be       	out	0x3f, r0	; 63
    4432:	cd bf       	out	0x3d, r28	; 61
    4434:	df 91       	pop	r29
    4436:	cf 91       	pop	r28
    4438:	1f 91       	pop	r17
    443a:	08 95       	ret

0000443c <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    443c:	8f 92       	push	r8
    443e:	9f 92       	push	r9
    4440:	af 92       	push	r10
    4442:	bf 92       	push	r11
    4444:	cf 92       	push	r12
    4446:	df 92       	push	r13
    4448:	ef 92       	push	r14
    444a:	ff 92       	push	r15
    444c:	0f 93       	push	r16
    444e:	1f 93       	push	r17
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	cd b7       	in	r28, 0x3d	; 61
    4456:	de b7       	in	r29, 0x3e	; 62
    4458:	60 97       	sbiw	r28, 0x10	; 16
    445a:	0f b6       	in	r0, 0x3f	; 63
    445c:	f8 94       	cli
    445e:	de bf       	out	0x3e, r29	; 62
    4460:	0f be       	out	0x3f, r0	; 63
    4462:	cd bf       	out	0x3d, r28	; 61
    4464:	29 87       	std	Y+9, r18	; 0x09
    4466:	3a 87       	std	Y+10, r19	; 0x0a
    4468:	4b 87       	std	Y+11, r20	; 0x0b
    446a:	5c 87       	std	Y+12, r21	; 0x0c
    446c:	6d 87       	std	Y+13, r22	; 0x0d
    446e:	7e 87       	std	Y+14, r23	; 0x0e
    4470:	8f 87       	std	Y+15, r24	; 0x0f
    4472:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    4474:	ce 01       	movw	r24, r28
    4476:	01 96       	adiw	r24, 0x01	; 1
    4478:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    447c:	89 80       	ldd	r8, Y+1	; 0x01
    447e:	9a 80       	ldd	r9, Y+2	; 0x02
    4480:	ab 80       	ldd	r10, Y+3	; 0x03
    4482:	bc 80       	ldd	r11, Y+4	; 0x04
    4484:	cd 80       	ldd	r12, Y+5	; 0x05
    4486:	de 80       	ldd	r13, Y+6	; 0x06
    4488:	ef 80       	ldd	r14, Y+7	; 0x07
    448a:	f8 84       	ldd	r15, Y+8	; 0x08
    448c:	09 85       	ldd	r16, Y+9	; 0x09
    448e:	1a 85       	ldd	r17, Y+10	; 0x0a
    4490:	2b 85       	ldd	r18, Y+11	; 0x0b
    4492:	3c 85       	ldd	r19, Y+12	; 0x0c
    4494:	4d 85       	ldd	r20, Y+13	; 0x0d
    4496:	5e 85       	ldd	r21, Y+14	; 0x0e
    4498:	6f 85       	ldd	r22, Y+15	; 0x0f
    449a:	78 89       	ldd	r23, Y+16	; 0x10
    449c:	ce 01       	movw	r24, r28
    449e:	09 96       	adiw	r24, 0x09	; 9
    44a0:	0e 94 d7 22 	call	0x45ae	; 0x45ae <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    44a4:	8f 3f       	cpi	r24, 0xFF	; 255
    44a6:	61 f0       	breq	.+24     	; 0x44c0 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    44a8:	29 85       	ldd	r18, Y+9	; 0x09
    44aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    44ac:	4b 85       	ldd	r20, Y+11	; 0x0b
    44ae:	5c 85       	ldd	r21, Y+12	; 0x0c
    44b0:	6d 85       	ldd	r22, Y+13	; 0x0d
    44b2:	7e 85       	ldd	r23, Y+14	; 0x0e
    44b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    44b6:	98 89       	ldd	r25, Y+16	; 0x10
    44b8:	0e 94 c7 21 	call	0x438e	; 0x438e <nrk_wait>

    return NRK_OK;
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	01 c0       	rjmp	.+2      	; 0x44c2 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    44c0:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    44c2:	60 96       	adiw	r28, 0x10	; 16
    44c4:	0f b6       	in	r0, 0x3f	; 63
    44c6:	f8 94       	cli
    44c8:	de bf       	out	0x3e, r29	; 62
    44ca:	0f be       	out	0x3f, r0	; 63
    44cc:	cd bf       	out	0x3d, r28	; 61
    44ce:	df 91       	pop	r29
    44d0:	cf 91       	pop	r28
    44d2:	1f 91       	pop	r17
    44d4:	0f 91       	pop	r16
    44d6:	ff 90       	pop	r15
    44d8:	ef 90       	pop	r14
    44da:	df 90       	pop	r13
    44dc:	cf 90       	pop	r12
    44de:	bf 90       	pop	r11
    44e0:	af 90       	pop	r10
    44e2:	9f 90       	pop	r9
    44e4:	8f 90       	pop	r8
    44e6:	08 95       	ret

000044e8 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    44e8:	e0 91 d6 0c 	lds	r30, 0x0CD6
    44ec:	f0 91 d7 0c 	lds	r31, 0x0CD7
}
    44f0:	80 85       	ldd	r24, Z+8	; 0x08
    44f2:	08 95       	ret

000044f4 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    44f4:	0f 93       	push	r16
    44f6:	1f 93       	push	r17
    44f8:	cf 93       	push	r28
    44fa:	df 93       	push	r29
    44fc:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    44fe:	1c 82       	std	Y+4, r1	; 0x04
    4500:	1d 82       	std	Y+5, r1	; 0x05
    4502:	1e 82       	std	Y+6, r1	; 0x06
    4504:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    4506:	80 91 cd 0c 	lds	r24, 0x0CCD
    450a:	90 91 ce 0c 	lds	r25, 0x0CCE
    450e:	a0 91 cf 0c 	lds	r26, 0x0CCF
    4512:	b0 91 d0 0c 	lds	r27, 0x0CD0
    4516:	88 83       	st	Y, r24
    4518:	99 83       	std	Y+1, r25	; 0x01
    451a:	aa 83       	std	Y+2, r26	; 0x02
    451c:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    451e:	80 91 d1 0c 	lds	r24, 0x0CD1
    4522:	90 91 d2 0c 	lds	r25, 0x0CD2
    4526:	a0 91 d3 0c 	lds	r26, 0x0CD3
    452a:	b0 91 d4 0c 	lds	r27, 0x0CD4
    452e:	8c 83       	std	Y+4, r24	; 0x04
    4530:	9d 83       	std	Y+5, r25	; 0x05
    4532:	ae 83       	std	Y+6, r26	; 0x06
    4534:	bf 83       	std	Y+7, r27	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    4536:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    453a:	a8 2f       	mov	r26, r24
    453c:	b0 e0       	ldi	r27, 0x00	; 0
    453e:	23 eb       	ldi	r18, 0xB3	; 179
    4540:	36 ee       	ldi	r19, 0xE6	; 230
    4542:	4e e0       	ldi	r20, 0x0E	; 14
    4544:	50 e0       	ldi	r21, 0x00	; 0
    4546:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__muluhisi3>
    454a:	0c 81       	ldd	r16, Y+4	; 0x04
    454c:	1d 81       	ldd	r17, Y+5	; 0x05
    454e:	2e 81       	ldd	r18, Y+6	; 0x06
    4550:	3f 81       	ldd	r19, Y+7	; 0x07
    4552:	dc 01       	movw	r26, r24
    4554:	cb 01       	movw	r24, r22
    4556:	80 0f       	add	r24, r16
    4558:	91 1f       	adc	r25, r17
    455a:	a2 1f       	adc	r26, r18
    455c:	b3 1f       	adc	r27, r19
    455e:	8c 83       	std	Y+4, r24	; 0x04
    4560:	9d 83       	std	Y+5, r25	; 0x05
    4562:	ae 83       	std	Y+6, r26	; 0x06
    4564:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    4566:	8c 81       	ldd	r24, Y+4	; 0x04
    4568:	9d 81       	ldd	r25, Y+5	; 0x05
    456a:	ae 81       	ldd	r26, Y+6	; 0x06
    456c:	bf 81       	ldd	r27, Y+7	; 0x07
    456e:	81 15       	cp	r24, r1
    4570:	2a ec       	ldi	r18, 0xCA	; 202
    4572:	92 07       	cpc	r25, r18
    4574:	2a e9       	ldi	r18, 0x9A	; 154
    4576:	a2 07       	cpc	r26, r18
    4578:	2b e3       	ldi	r18, 0x3B	; 59
    457a:	b2 07       	cpc	r27, r18
    457c:	98 f0       	brcs	.+38     	; 0x45a4 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    457e:	9a 5c       	subi	r25, 0xCA	; 202
    4580:	aa 49       	sbci	r26, 0x9A	; 154
    4582:	bb 43       	sbci	r27, 0x3B	; 59
    4584:	8c 83       	std	Y+4, r24	; 0x04
    4586:	9d 83       	std	Y+5, r25	; 0x05
    4588:	ae 83       	std	Y+6, r26	; 0x06
    458a:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    458c:	88 81       	ld	r24, Y
    458e:	99 81       	ldd	r25, Y+1	; 0x01
    4590:	aa 81       	ldd	r26, Y+2	; 0x02
    4592:	bb 81       	ldd	r27, Y+3	; 0x03
    4594:	01 96       	adiw	r24, 0x01	; 1
    4596:	a1 1d       	adc	r26, r1
    4598:	b1 1d       	adc	r27, r1
    459a:	88 83       	st	Y, r24
    459c:	99 83       	std	Y+1, r25	; 0x01
    459e:	aa 83       	std	Y+2, r26	; 0x02
    45a0:	bb 83       	std	Y+3, r27	; 0x03
    45a2:	e1 cf       	rjmp	.-62     	; 0x4566 <nrk_time_get+0x72>
    }

}
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	1f 91       	pop	r17
    45aa:	0f 91       	pop	r16
    45ac:	08 95       	ret

000045ae <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    45ae:	8f 92       	push	r8
    45b0:	9f 92       	push	r9
    45b2:	af 92       	push	r10
    45b4:	bf 92       	push	r11
    45b6:	cf 92       	push	r12
    45b8:	df 92       	push	r13
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	0f 93       	push	r16
    45c0:	1f 93       	push	r17
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	60 97       	sbiw	r28, 0x10	; 16
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	de bf       	out	0x3e, r29	; 62
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	cd bf       	out	0x3d, r28	; 61
    45d6:	fc 01       	movw	r30, r24
    45d8:	09 83       	std	Y+1, r16	; 0x01
    45da:	1a 83       	std	Y+2, r17	; 0x02
    45dc:	2b 83       	std	Y+3, r18	; 0x03
    45de:	3c 83       	std	Y+4, r19	; 0x04
    45e0:	4d 83       	std	Y+5, r20	; 0x05
    45e2:	5e 83       	std	Y+6, r21	; 0x06
    45e4:	6f 83       	std	Y+7, r22	; 0x07
    45e6:	78 87       	std	Y+8, r23	; 0x08
    45e8:	89 86       	std	Y+9, r8	; 0x09
    45ea:	9a 86       	std	Y+10, r9	; 0x0a
    45ec:	ab 86       	std	Y+11, r10	; 0x0b
    45ee:	bc 86       	std	Y+12, r11	; 0x0c
    45f0:	cd 86       	std	Y+13, r12	; 0x0d
    45f2:	de 86       	std	Y+14, r13	; 0x0e
    45f4:	ef 86       	std	Y+15, r14	; 0x0f
    45f6:	f8 8a       	std	Y+16, r15	; 0x10
    45f8:	09 81       	ldd	r16, Y+1	; 0x01
    45fa:	1a 81       	ldd	r17, Y+2	; 0x02
    45fc:	2b 81       	ldd	r18, Y+3	; 0x03
    45fe:	3c 81       	ldd	r19, Y+4	; 0x04
    4600:	4d 81       	ldd	r20, Y+5	; 0x05
    4602:	5e 81       	ldd	r21, Y+6	; 0x06
    4604:	6f 81       	ldd	r22, Y+7	; 0x07
    4606:	78 85       	ldd	r23, Y+8	; 0x08
    4608:	c9 84       	ldd	r12, Y+9	; 0x09
    460a:	da 84       	ldd	r13, Y+10	; 0x0a
    460c:	eb 84       	ldd	r14, Y+11	; 0x0b
    460e:	fc 84       	ldd	r15, Y+12	; 0x0c
    4610:	8d 85       	ldd	r24, Y+13	; 0x0d
    4612:	9e 85       	ldd	r25, Y+14	; 0x0e
    4614:	af 85       	ldd	r26, Y+15	; 0x0f
    4616:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    4618:	0c 15       	cp	r16, r12
    461a:	1d 05       	cpc	r17, r13
    461c:	2e 05       	cpc	r18, r14
    461e:	3f 05       	cpc	r19, r15
    4620:	f0 f1       	brcs	.+124    	; 0x469e <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    4622:	c0 16       	cp	r12, r16
    4624:	d1 06       	cpc	r13, r17
    4626:	e2 06       	cpc	r14, r18
    4628:	f3 06       	cpc	r15, r19
    462a:	91 f4       	brne	.+36     	; 0x4650 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    462c:	48 17       	cp	r20, r24
    462e:	59 07       	cpc	r21, r25
    4630:	6a 07       	cpc	r22, r26
    4632:	7b 07       	cpc	r23, r27
    4634:	a0 f1       	brcs	.+104    	; 0x469e <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    4636:	48 1b       	sub	r20, r24
    4638:	59 0b       	sbc	r21, r25
    463a:	6a 0b       	sbc	r22, r26
    463c:	7b 0b       	sbc	r23, r27
    463e:	44 83       	std	Z+4, r20	; 0x04
    4640:	55 83       	std	Z+5, r21	; 0x05
    4642:	66 83       	std	Z+6, r22	; 0x06
    4644:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    4646:	10 82       	st	Z, r1
    4648:	11 82       	std	Z+1, r1	; 0x01
    464a:	12 82       	std	Z+2, r1	; 0x02
    464c:	13 82       	std	Z+3, r1	; 0x03
    464e:	25 c0       	rjmp	.+74     	; 0x469a <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    4650:	48 17       	cp	r20, r24
    4652:	59 07       	cpc	r21, r25
    4654:	6a 07       	cpc	r22, r26
    4656:	7b 07       	cpc	r23, r27
    4658:	80 f4       	brcc	.+32     	; 0x467a <nrk_time_sub+0xcc>
{
	high.secs--;
    465a:	01 50       	subi	r16, 0x01	; 1
    465c:	11 09       	sbc	r17, r1
    465e:	21 09       	sbc	r18, r1
    4660:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    4662:	0c 19       	sub	r16, r12
    4664:	1d 09       	sbc	r17, r13
    4666:	2e 09       	sbc	r18, r14
    4668:	3f 09       	sbc	r19, r15
    466a:	00 83       	st	Z, r16
    466c:	11 83       	std	Z+1, r17	; 0x01
    466e:	22 83       	std	Z+2, r18	; 0x02
    4670:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    4672:	56 53       	subi	r21, 0x36	; 54
    4674:	65 46       	sbci	r22, 0x65	; 101
    4676:	74 4c       	sbci	r23, 0xC4	; 196
    4678:	08 c0       	rjmp	.+16     	; 0x468a <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    467a:	0c 19       	sub	r16, r12
    467c:	1d 09       	sbc	r17, r13
    467e:	2e 09       	sbc	r18, r14
    4680:	3f 09       	sbc	r19, r15
    4682:	00 83       	st	Z, r16
    4684:	11 83       	std	Z+1, r17	; 0x01
    4686:	22 83       	std	Z+2, r18	; 0x02
    4688:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    468a:	48 1b       	sub	r20, r24
    468c:	59 0b       	sbc	r21, r25
    468e:	6a 0b       	sbc	r22, r26
    4690:	7b 0b       	sbc	r23, r27
    4692:	44 83       	std	Z+4, r20	; 0x04
    4694:	55 83       	std	Z+5, r21	; 0x05
    4696:	66 83       	std	Z+6, r22	; 0x06
    4698:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	01 c0       	rjmp	.+2      	; 0x46a0 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    469e:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    46a0:	60 96       	adiw	r28, 0x10	; 16
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	ff 90       	pop	r15
    46b6:	ef 90       	pop	r14
    46b8:	df 90       	pop	r13
    46ba:	cf 90       	pop	r12
    46bc:	bf 90       	pop	r11
    46be:	af 90       	pop	r10
    46c0:	9f 90       	pop	r9
    46c2:	8f 90       	pop	r8
    46c4:	08 95       	ret

000046c6 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    46c6:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    46c8:	44 81       	ldd	r20, Z+4	; 0x04
    46ca:	55 81       	ldd	r21, Z+5	; 0x05
    46cc:	66 81       	ldd	r22, Z+6	; 0x06
    46ce:	77 81       	ldd	r23, Z+7	; 0x07
    46d0:	41 15       	cp	r20, r1
    46d2:	8a ec       	ldi	r24, 0xCA	; 202
    46d4:	58 07       	cpc	r21, r24
    46d6:	8a e9       	ldi	r24, 0x9A	; 154
    46d8:	68 07       	cpc	r22, r24
    46da:	8b e3       	ldi	r24, 0x3B	; 59
    46dc:	78 07       	cpc	r23, r24
    46de:	98 f0       	brcs	.+38     	; 0x4706 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    46e0:	5a 5c       	subi	r21, 0xCA	; 202
    46e2:	6a 49       	sbci	r22, 0x9A	; 154
    46e4:	7b 43       	sbci	r23, 0x3B	; 59
    46e6:	44 83       	std	Z+4, r20	; 0x04
    46e8:	55 83       	std	Z+5, r21	; 0x05
    46ea:	66 83       	std	Z+6, r22	; 0x06
    46ec:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    46ee:	80 81       	ld	r24, Z
    46f0:	91 81       	ldd	r25, Z+1	; 0x01
    46f2:	a2 81       	ldd	r26, Z+2	; 0x02
    46f4:	b3 81       	ldd	r27, Z+3	; 0x03
    46f6:	01 96       	adiw	r24, 0x01	; 1
    46f8:	a1 1d       	adc	r26, r1
    46fa:	b1 1d       	adc	r27, r1
    46fc:	80 83       	st	Z, r24
    46fe:	91 83       	std	Z+1, r25	; 0x01
    4700:	a2 83       	std	Z+2, r26	; 0x02
    4702:	b3 83       	std	Z+3, r27	; 0x03
    4704:	e1 cf       	rjmp	.-62     	; 0x46c8 <nrk_time_compact_nanos+0x2>
    }
}
    4706:	08 95       	ret

00004708 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4708:	8f 92       	push	r8
    470a:	9f 92       	push	r9
    470c:	af 92       	push	r10
    470e:	bf 92       	push	r11
    4710:	cf 92       	push	r12
    4712:	df 92       	push	r13
    4714:	ef 92       	push	r14
    4716:	ff 92       	push	r15
    4718:	0f 93       	push	r16
    471a:	1f 93       	push	r17
    471c:	cf 93       	push	r28
    471e:	df 93       	push	r29
    4720:	cd b7       	in	r28, 0x3d	; 61
    4722:	de b7       	in	r29, 0x3e	; 62
    4724:	60 97       	sbiw	r28, 0x10	; 16
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	f8 94       	cli
    472a:	de bf       	out	0x3e, r29	; 62
    472c:	0f be       	out	0x3f, r0	; 63
    472e:	cd bf       	out	0x3d, r28	; 61
    4730:	09 83       	std	Y+1, r16	; 0x01
    4732:	1a 83       	std	Y+2, r17	; 0x02
    4734:	2b 83       	std	Y+3, r18	; 0x03
    4736:	3c 83       	std	Y+4, r19	; 0x04
    4738:	4d 83       	std	Y+5, r20	; 0x05
    473a:	5e 83       	std	Y+6, r21	; 0x06
    473c:	6f 83       	std	Y+7, r22	; 0x07
    473e:	78 87       	std	Y+8, r23	; 0x08
    4740:	89 86       	std	Y+9, r8	; 0x09
    4742:	9a 86       	std	Y+10, r9	; 0x0a
    4744:	ab 86       	std	Y+11, r10	; 0x0b
    4746:	bc 86       	std	Y+12, r11	; 0x0c
    4748:	cd 86       	std	Y+13, r12	; 0x0d
    474a:	de 86       	std	Y+14, r13	; 0x0e
    474c:	ef 86       	std	Y+15, r14	; 0x0f
    474e:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    4750:	09 85       	ldd	r16, Y+9	; 0x09
    4752:	1a 85       	ldd	r17, Y+10	; 0x0a
    4754:	2b 85       	ldd	r18, Y+11	; 0x0b
    4756:	3c 85       	ldd	r19, Y+12	; 0x0c
    4758:	49 81       	ldd	r20, Y+1	; 0x01
    475a:	5a 81       	ldd	r21, Y+2	; 0x02
    475c:	6b 81       	ldd	r22, Y+3	; 0x03
    475e:	7c 81       	ldd	r23, Y+4	; 0x04
    4760:	40 0f       	add	r20, r16
    4762:	51 1f       	adc	r21, r17
    4764:	62 1f       	adc	r22, r18
    4766:	73 1f       	adc	r23, r19
    4768:	fc 01       	movw	r30, r24
    476a:	40 83       	st	Z, r20
    476c:	51 83       	std	Z+1, r21	; 0x01
    476e:	62 83       	std	Z+2, r22	; 0x02
    4770:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    4772:	0d 85       	ldd	r16, Y+13	; 0x0d
    4774:	1e 85       	ldd	r17, Y+14	; 0x0e
    4776:	2f 85       	ldd	r18, Y+15	; 0x0f
    4778:	38 89       	ldd	r19, Y+16	; 0x10
    477a:	4d 81       	ldd	r20, Y+5	; 0x05
    477c:	5e 81       	ldd	r21, Y+6	; 0x06
    477e:	6f 81       	ldd	r22, Y+7	; 0x07
    4780:	78 85       	ldd	r23, Y+8	; 0x08
    4782:	40 0f       	add	r20, r16
    4784:	51 1f       	adc	r21, r17
    4786:	62 1f       	adc	r22, r18
    4788:	73 1f       	adc	r23, r19
    478a:	44 83       	std	Z+4, r20	; 0x04
    478c:	55 83       	std	Z+5, r21	; 0x05
    478e:	66 83       	std	Z+6, r22	; 0x06
    4790:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    4792:	0e 94 63 23 	call	0x46c6	; 0x46c6 <nrk_time_compact_nanos>
return NRK_OK;
}
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	60 96       	adiw	r28, 0x10	; 16
    479a:	0f b6       	in	r0, 0x3f	; 63
    479c:	f8 94       	cli
    479e:	de bf       	out	0x3e, r29	; 62
    47a0:	0f be       	out	0x3f, r0	; 63
    47a2:	cd bf       	out	0x3d, r28	; 61
    47a4:	df 91       	pop	r29
    47a6:	cf 91       	pop	r28
    47a8:	1f 91       	pop	r17
    47aa:	0f 91       	pop	r16
    47ac:	ff 90       	pop	r15
    47ae:	ef 90       	pop	r14
    47b0:	df 90       	pop	r13
    47b2:	cf 90       	pop	r12
    47b4:	bf 90       	pop	r11
    47b6:	af 90       	pop	r10
    47b8:	9f 90       	pop	r9
    47ba:	8f 90       	pop	r8
    47bc:	08 95       	ret

000047be <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    47be:	ed ec       	ldi	r30, 0xCD	; 205
    47c0:	fc e0       	ldi	r31, 0x0C	; 12
    47c2:	60 83       	st	Z, r22
    47c4:	71 83       	std	Z+1, r23	; 0x01
    47c6:	82 83       	std	Z+2, r24	; 0x02
    47c8:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    47ca:	24 83       	std	Z+4, r18	; 0x04
    47cc:	35 83       	std	Z+5, r19	; 0x05
    47ce:	46 83       	std	Z+6, r20	; 0x06
    47d0:	57 83       	std	Z+7, r21	; 0x07
    47d2:	08 95       	ret

000047d4 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    47d4:	2f 92       	push	r2
    47d6:	3f 92       	push	r3
    47d8:	4f 92       	push	r4
    47da:	5f 92       	push	r5
    47dc:	6f 92       	push	r6
    47de:	7f 92       	push	r7
    47e0:	8f 92       	push	r8
    47e2:	9f 92       	push	r9
    47e4:	af 92       	push	r10
    47e6:	bf 92       	push	r11
    47e8:	cf 92       	push	r12
    47ea:	df 92       	push	r13
    47ec:	ef 92       	push	r14
    47ee:	ff 92       	push	r15
    47f0:	0f 93       	push	r16
    47f2:	1f 93       	push	r17
    47f4:	fc 01       	movw	r30, r24
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    47f6:	c0 80       	ld	r12, Z
    47f8:	d1 80       	ldd	r13, Z+1	; 0x01
    47fa:	e2 80       	ldd	r14, Z+2	; 0x02
    47fc:	f3 80       	ldd	r15, Z+3	; 0x03
    47fe:	c1 14       	cp	r12, r1
    4800:	d1 04       	cpc	r13, r1
    4802:	e1 04       	cpc	r14, r1
    4804:	f1 04       	cpc	r15, r1
    4806:	e1 f1       	breq	.+120    	; 0x4880 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
    4808:	84 81       	ldd	r24, Z+4	; 0x04
    480a:	95 81       	ldd	r25, Z+5	; 0x05
    480c:	a6 81       	ldd	r26, Z+6	; 0x06
    480e:	b7 81       	ldd	r27, Z+7	; 0x07
   if(t->secs>65) return 0;
    4810:	22 e4       	ldi	r18, 0x42	; 66
    4812:	c2 16       	cp	r12, r18
    4814:	d1 04       	cpc	r13, r1
    4816:	e1 04       	cpc	r14, r1
    4818:	f1 04       	cpc	r15, r1
    481a:	f0 f5       	brcc	.+124    	; 0x4898 <_nrk_time_to_ticks+0xc4>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    481c:	1c 01       	movw	r2, r24
    481e:	2d 01       	movw	r4, r26
    4820:	61 2c       	mov	r6, r1
    4822:	71 2c       	mov	r7, r1
    4824:	43 01       	movw	r8, r6
    4826:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4828:	8e 2f       	mov	r24, r30
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	a0 e0       	ldi	r26, 0x00	; 0
    482e:	b0 e0       	ldi	r27, 0x00	; 0
    4830:	8c 15       	cp	r24, r12
    4832:	9d 05       	cpc	r25, r13
    4834:	ae 05       	cpc	r26, r14
    4836:	bf 05       	cpc	r27, r15
    4838:	88 f4       	brcc	.+34     	; 0x485c <_nrk_time_to_ticks+0x88>
    483a:	91 01       	movw	r18, r2
    483c:	a2 01       	movw	r20, r4
    483e:	b3 01       	movw	r22, r6
    4840:	c4 01       	movw	r24, r8
    4842:	36 53       	subi	r19, 0x36	; 54
    4844:	45 46       	sbci	r20, 0x65	; 101
    4846:	54 4c       	sbci	r21, 0xC4	; 196
    4848:	6f 4f       	sbci	r22, 0xFF	; 255
    484a:	7f 4f       	sbci	r23, 0xFF	; 255
    484c:	8f 4f       	sbci	r24, 0xFF	; 255
    484e:	9f 4f       	sbci	r25, 0xFF	; 255
    4850:	19 01       	movw	r2, r18
    4852:	2a 01       	movw	r4, r20
    4854:	3b 01       	movw	r6, r22
    4856:	4c 01       	movw	r8, r24
    4858:	ef 5f       	subi	r30, 0xFF	; 255
    485a:	e6 cf       	rjmp	.-52     	; 0x4828 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    485c:	83 eb       	ldi	r24, 0xB3	; 179
    485e:	a8 2e       	mov	r10, r24
    4860:	96 ee       	ldi	r25, 0xE6	; 230
    4862:	b9 2e       	mov	r11, r25
    4864:	2e e0       	ldi	r18, 0x0E	; 14
    4866:	c2 2e       	mov	r12, r18
    4868:	d1 2c       	mov	r13, r1
    486a:	e1 2c       	mov	r14, r1
    486c:	f1 2c       	mov	r15, r1
    486e:	00 e0       	ldi	r16, 0x00	; 0
    4870:	10 e0       	ldi	r17, 0x00	; 0
    4872:	91 01       	movw	r18, r2
    4874:	a2 01       	movw	r20, r4
    4876:	b3 01       	movw	r22, r6
    4878:	c4 01       	movw	r24, r8
    487a:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <__udivdi3>
    487e:	0a c0       	rjmp	.+20     	; 0x4894 <_nrk_time_to_ticks+0xc0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4880:	64 81       	ldd	r22, Z+4	; 0x04
    4882:	75 81       	ldd	r23, Z+5	; 0x05
    4884:	86 81       	ldd	r24, Z+6	; 0x06
    4886:	97 81       	ldd	r25, Z+7	; 0x07
    4888:	23 eb       	ldi	r18, 0xB3	; 179
    488a:	36 ee       	ldi	r19, 0xE6	; 230
    488c:	4e e0       	ldi	r20, 0x0E	; 14
    488e:	50 e0       	ldi	r21, 0x00	; 0
    4890:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodsi4>
    4894:	c9 01       	movw	r24, r18
    4896:	02 c0       	rjmp	.+4      	; 0x489c <_nrk_time_to_ticks+0xc8>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4898:	80 e0       	ldi	r24, 0x00	; 0
    489a:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    489c:	1f 91       	pop	r17
    489e:	0f 91       	pop	r16
    48a0:	ff 90       	pop	r15
    48a2:	ef 90       	pop	r14
    48a4:	df 90       	pop	r13
    48a6:	cf 90       	pop	r12
    48a8:	bf 90       	pop	r11
    48aa:	af 90       	pop	r10
    48ac:	9f 90       	pop	r9
    48ae:	8f 90       	pop	r8
    48b0:	7f 90       	pop	r7
    48b2:	6f 90       	pop	r6
    48b4:	5f 90       	pop	r5
    48b6:	4f 90       	pop	r4
    48b8:	3f 90       	pop	r3
    48ba:	2f 90       	pop	r2
    48bc:	08 95       	ret

000048be <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    48be:	cf 92       	push	r12
    48c0:	df 92       	push	r13
    48c2:	ef 92       	push	r14
    48c4:	ff 92       	push	r15
    48c6:	cf 93       	push	r28
    48c8:	df 93       	push	r29
    48ca:	cd b7       	in	r28, 0x3d	; 61
    48cc:	de b7       	in	r29, 0x3e	; 62
    48ce:	28 97       	sbiw	r28, 0x08	; 8
    48d0:	0f b6       	in	r0, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	de bf       	out	0x3e, r29	; 62
    48d6:	0f be       	out	0x3f, r0	; 63
    48d8:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    48da:	6b 01       	movw	r12, r22
    48dc:	7c 01       	movw	r14, r24
    48de:	2a e0       	ldi	r18, 0x0A	; 10
    48e0:	f6 94       	lsr	r15
    48e2:	e7 94       	ror	r14
    48e4:	d7 94       	ror	r13
    48e6:	c7 94       	ror	r12
    48e8:	2a 95       	dec	r18
    48ea:	d1 f7       	brne	.-12     	; 0x48e0 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    48ec:	c9 82       	std	Y+1, r12	; 0x01
    48ee:	da 82       	std	Y+2, r13	; 0x02
    48f0:	eb 82       	std	Y+3, r14	; 0x03
    48f2:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    48f4:	9b 01       	movw	r18, r22
    48f6:	ac 01       	movw	r20, r24
    48f8:	33 70       	andi	r19, 0x03	; 3
    48fa:	44 27       	eor	r20, r20
    48fc:	55 27       	eor	r21, r21
    48fe:	63 eb       	ldi	r22, 0xB3	; 179
    4900:	76 ee       	ldi	r23, 0xE6	; 230
    4902:	8e e0       	ldi	r24, 0x0E	; 14
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <__mulsi3>

return t;
    490a:	2c 2d       	mov	r18, r12
    490c:	3a 81       	ldd	r19, Y+2	; 0x02
    490e:	4b 81       	ldd	r20, Y+3	; 0x03
    4910:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4912:	28 96       	adiw	r28, 0x08	; 8
    4914:	0f b6       	in	r0, 0x3f	; 63
    4916:	f8 94       	cli
    4918:	de bf       	out	0x3e, r29	; 62
    491a:	0f be       	out	0x3f, r0	; 63
    491c:	cd bf       	out	0x3d, r28	; 61
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	ff 90       	pop	r15
    4924:	ef 90       	pop	r14
    4926:	df 90       	pop	r13
    4928:	cf 90       	pop	r12
    492a:	08 95       	ret

0000492c <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    492c:	2f 92       	push	r2
    492e:	3f 92       	push	r3
    4930:	4f 92       	push	r4
    4932:	5f 92       	push	r5
    4934:	6f 92       	push	r6
    4936:	7f 92       	push	r7
    4938:	8f 92       	push	r8
    493a:	9f 92       	push	r9
    493c:	af 92       	push	r10
    493e:	bf 92       	push	r11
    4940:	cf 92       	push	r12
    4942:	df 92       	push	r13
    4944:	ef 92       	push	r14
    4946:	ff 92       	push	r15
    4948:	0f 93       	push	r16
    494a:	1f 93       	push	r17
    494c:	fc 01       	movw	r30, r24
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    494e:	c0 80       	ld	r12, Z
    4950:	d1 80       	ldd	r13, Z+1	; 0x01
    4952:	e2 80       	ldd	r14, Z+2	; 0x02
    4954:	f3 80       	ldd	r15, Z+3	; 0x03
    4956:	c1 14       	cp	r12, r1
    4958:	d1 04       	cpc	r13, r1
    495a:	e1 04       	cpc	r14, r1
    495c:	f1 04       	cpc	r15, r1
    495e:	b9 f1       	breq	.+110    	; 0x49ce <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    4960:	84 81       	ldd	r24, Z+4	; 0x04
    4962:	95 81       	ldd	r25, Z+5	; 0x05
    4964:	a6 81       	ldd	r26, Z+6	; 0x06
    4966:	b7 81       	ldd	r27, Z+7	; 0x07
    4968:	1c 01       	movw	r2, r24
    496a:	2d 01       	movw	r4, r26
    496c:	61 2c       	mov	r6, r1
    496e:	71 2c       	mov	r7, r1
    4970:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4972:	e0 e0       	ldi	r30, 0x00	; 0
    4974:	8e 2f       	mov	r24, r30
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	a0 e0       	ldi	r26, 0x00	; 0
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	8c 15       	cp	r24, r12
    497e:	9d 05       	cpc	r25, r13
    4980:	ae 05       	cpc	r26, r14
    4982:	bf 05       	cpc	r27, r15
    4984:	88 f4       	brcc	.+34     	; 0x49a8 <_nrk_time_to_ticks_long+0x7c>
    4986:	91 01       	movw	r18, r2
    4988:	a2 01       	movw	r20, r4
    498a:	b3 01       	movw	r22, r6
    498c:	c4 01       	movw	r24, r8
    498e:	36 53       	subi	r19, 0x36	; 54
    4990:	45 46       	sbci	r20, 0x65	; 101
    4992:	54 4c       	sbci	r21, 0xC4	; 196
    4994:	6f 4f       	sbci	r22, 0xFF	; 255
    4996:	7f 4f       	sbci	r23, 0xFF	; 255
    4998:	8f 4f       	sbci	r24, 0xFF	; 255
    499a:	9f 4f       	sbci	r25, 0xFF	; 255
    499c:	19 01       	movw	r2, r18
    499e:	2a 01       	movw	r4, r20
    49a0:	3b 01       	movw	r6, r22
    49a2:	4c 01       	movw	r8, r24
    49a4:	ef 5f       	subi	r30, 0xFF	; 255
    49a6:	e6 cf       	rjmp	.-52     	; 0x4974 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    49a8:	83 eb       	ldi	r24, 0xB3	; 179
    49aa:	a8 2e       	mov	r10, r24
    49ac:	96 ee       	ldi	r25, 0xE6	; 230
    49ae:	b9 2e       	mov	r11, r25
    49b0:	2e e0       	ldi	r18, 0x0E	; 14
    49b2:	c2 2e       	mov	r12, r18
    49b4:	d1 2c       	mov	r13, r1
    49b6:	e1 2c       	mov	r14, r1
    49b8:	f1 2c       	mov	r15, r1
    49ba:	00 e0       	ldi	r16, 0x00	; 0
    49bc:	10 e0       	ldi	r17, 0x00	; 0
    49be:	91 01       	movw	r18, r2
    49c0:	a2 01       	movw	r20, r4
    49c2:	b3 01       	movw	r22, r6
    49c4:	c4 01       	movw	r24, r8
    49c6:	0e 94 47 2e 	call	0x5c8e	; 0x5c8e <__udivdi3>
    49ca:	ca 01       	movw	r24, r20
    49cc:	0b c0       	rjmp	.+22     	; 0x49e4 <_nrk_time_to_ticks_long+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    49ce:	64 81       	ldd	r22, Z+4	; 0x04
    49d0:	75 81       	ldd	r23, Z+5	; 0x05
    49d2:	86 81       	ldd	r24, Z+6	; 0x06
    49d4:	97 81       	ldd	r25, Z+7	; 0x07
    49d6:	23 eb       	ldi	r18, 0xB3	; 179
    49d8:	36 ee       	ldi	r19, 0xE6	; 230
    49da:	4e e0       	ldi	r20, 0x0E	; 14
    49dc:	50 e0       	ldi	r21, 0x00	; 0
    49de:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodsi4>
    49e2:	ca 01       	movw	r24, r20
}
return ticks;
}
    49e4:	b9 01       	movw	r22, r18
    49e6:	1f 91       	pop	r17
    49e8:	0f 91       	pop	r16
    49ea:	ff 90       	pop	r15
    49ec:	ef 90       	pop	r14
    49ee:	df 90       	pop	r13
    49f0:	cf 90       	pop	r12
    49f2:	bf 90       	pop	r11
    49f4:	af 90       	pop	r10
    49f6:	9f 90       	pop	r9
    49f8:	8f 90       	pop	r8
    49fa:	7f 90       	pop	r7
    49fc:	6f 90       	pop	r6
    49fe:	5f 90       	pop	r5
    4a00:	4f 90       	pop	r4
    4a02:	3f 90       	pop	r3
    4a04:	2f 90       	pop	r2
    4a06:	08 95       	ret

00004a08 <nrk_idle_task>:

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4a08:	c1 e0       	ldi	r28, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4a0a:	0e 94 c7 1b 	call	0x378e	; 0x378e <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    4a0e:	0e 94 ab 28 	call	0x5156	; 0x5156 <_nrk_get_next_wakeup>
    4a12:	84 30       	cpi	r24, 0x04	; 4
    4a14:	10 f4       	brcc	.+4      	; 0x4a1a <nrk_idle_task+0x12>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4a16:	c0 93 ca 0c 	sts	0x0CCA, r28
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    4a1a:	0e 94 ba 2b 	call	0x5774	; 0x5774 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4a1e:	80 91 a3 0a 	lds	r24, 0x0AA3
    4a22:	85 35       	cpi	r24, 0x55	; 85
    4a24:	19 f0       	breq	.+6      	; 0x4a2c <nrk_idle_task+0x24>
    4a26:	88 e0       	ldi	r24, 0x08	; 8
    4a28:	0e 94 48 1a 	call	0x3490	; 0x3490 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    4a2c:	80 91 7e 41 	lds	r24, 0x417E
    4a30:	85 35       	cpi	r24, 0x55	; 85
    4a32:	59 f3       	breq	.-42     	; 0x4a0a <nrk_idle_task+0x2>
    4a34:	88 e0       	ldi	r24, 0x08	; 8
    4a36:	0e 94 48 1a 	call	0x3490	; 0x3490 <nrk_error_add>
    4a3a:	e7 cf       	rjmp	.-50     	; 0x4a0a <nrk_idle_task+0x2>

00004a3c <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    4a3c:	2f 92       	push	r2
    4a3e:	3f 92       	push	r3
    4a40:	4f 92       	push	r4
    4a42:	5f 92       	push	r5
    4a44:	6f 92       	push	r6
    4a46:	7f 92       	push	r7
    4a48:	8f 92       	push	r8
    4a4a:	9f 92       	push	r9
    4a4c:	af 92       	push	r10
    4a4e:	bf 92       	push	r11
    4a50:	cf 92       	push	r12
    4a52:	df 92       	push	r13
    4a54:	ef 92       	push	r14
    4a56:	ff 92       	push	r15
    4a58:	0f 93       	push	r16
    4a5a:	1f 93       	push	r17
    4a5c:	cf 93       	push	r28
    4a5e:	df 93       	push	r29
    4a60:	00 d0       	rcall	.+0      	; 0x4a62 <_nrk_scheduler+0x26>
    4a62:	1f 92       	push	r1
    4a64:	cd b7       	in	r28, 0x3d	; 61
    4a66:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    4a68:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    4a6c:	0e 94 f5 17 	call	0x2fea	; 0x2fea <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    4a70:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    4a74:	0e 94 05 28 	call	0x500a	; 0x500a <_nrk_high_speed_timer_get>
    4a78:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    4a7a:	8a ef       	ldi	r24, 0xFA	; 250
    4a7c:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    4a80:	a0 91 34 0b 	lds	r26, 0x0B34
    4a84:	b0 e0       	ldi	r27, 0x00	; 0
    4a86:	23 eb       	ldi	r18, 0xB3	; 179
    4a88:	36 ee       	ldi	r19, 0xE6	; 230
    4a8a:	4e e0       	ldi	r20, 0x0E	; 14
    4a8c:	50 e0       	ldi	r21, 0x00	; 0
    4a8e:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__muluhisi3>
    4a92:	00 91 d1 0c 	lds	r16, 0x0CD1
    4a96:	10 91 d2 0c 	lds	r17, 0x0CD2
    4a9a:	20 91 d3 0c 	lds	r18, 0x0CD3
    4a9e:	30 91 d4 0c 	lds	r19, 0x0CD4
    4aa2:	6b 01       	movw	r12, r22
    4aa4:	7c 01       	movw	r14, r24
    4aa6:	c0 0e       	add	r12, r16
    4aa8:	d1 1e       	adc	r13, r17
    4aaa:	e2 1e       	adc	r14, r18
    4aac:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4aae:	c7 01       	movw	r24, r14
    4ab0:	b6 01       	movw	r22, r12
    4ab2:	23 eb       	ldi	r18, 0xB3	; 179
    4ab4:	36 ee       	ldi	r19, 0xE6	; 230
    4ab6:	4e e0       	ldi	r20, 0x0E	; 14
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodsi4>
    4abe:	26 01       	movw	r4, r12
    4ac0:	37 01       	movw	r6, r14
    4ac2:	46 1a       	sub	r4, r22
    4ac4:	57 0a       	sbc	r5, r23
    4ac6:	68 0a       	sbc	r6, r24
    4ac8:	79 0a       	sbc	r7, r25
    4aca:	d3 01       	movw	r26, r6
    4acc:	c2 01       	movw	r24, r4
    4ace:	00 91 cd 0c 	lds	r16, 0x0CCD
    4ad2:	10 91 ce 0c 	lds	r17, 0x0CCE
    4ad6:	20 91 cf 0c 	lds	r18, 0x0CCF
    4ada:	30 91 d0 0c 	lds	r19, 0x0CD0

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4ade:	43 eb       	ldi	r20, 0xB3	; 179
    4ae0:	84 2e       	mov	r8, r20
    4ae2:	46 ee       	ldi	r20, 0xE6	; 230
    4ae4:	94 2e       	mov	r9, r20
    4ae6:	4e e0       	ldi	r20, 0x0E	; 14
    4ae8:	a4 2e       	mov	r10, r20
    4aea:	b1 2c       	mov	r11, r1
    4aec:	68 01       	movw	r12, r16
    4aee:	79 01       	movw	r14, r18
    4af0:	4f ef       	ldi	r20, 0xFF	; 255
    4af2:	c4 1a       	sub	r12, r20
    4af4:	d4 0a       	sbc	r13, r20
    4af6:	e4 0a       	sbc	r14, r20
    4af8:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4afa:	81 15       	cp	r24, r1
    4afc:	5a ec       	ldi	r21, 0xCA	; 202
    4afe:	95 07       	cpc	r25, r21
    4b00:	5a e9       	ldi	r21, 0x9A	; 154
    4b02:	a5 07       	cpc	r26, r21
    4b04:	5b e3       	ldi	r21, 0x3B	; 59
    4b06:	b5 07       	cpc	r27, r21
    4b08:	c8 f0       	brcs	.+50     	; 0x4b3c <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4b0a:	2c 01       	movw	r4, r24
    4b0c:	3d 01       	movw	r6, r26
    4b0e:	2a ec       	ldi	r18, 0xCA	; 202
    4b10:	52 1a       	sub	r5, r18
    4b12:	2a e9       	ldi	r18, 0x9A	; 154
    4b14:	62 0a       	sbc	r6, r18
    4b16:	2b e3       	ldi	r18, 0x3B	; 59
    4b18:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4b1a:	c3 01       	movw	r24, r6
    4b1c:	b2 01       	movw	r22, r4
    4b1e:	a5 01       	movw	r20, r10
    4b20:	94 01       	movw	r18, r8
    4b22:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodsi4>
    4b26:	a3 01       	movw	r20, r6
    4b28:	92 01       	movw	r18, r4
    4b2a:	26 1b       	sub	r18, r22
    4b2c:	37 0b       	sbc	r19, r23
    4b2e:	48 0b       	sbc	r20, r24
    4b30:	59 0b       	sbc	r21, r25
    4b32:	da 01       	movw	r26, r20
    4b34:	c9 01       	movw	r24, r18
    4b36:	97 01       	movw	r18, r14
    4b38:	86 01       	movw	r16, r12
    4b3a:	d8 cf       	rjmp	.-80     	; 0x4aec <_nrk_scheduler+0xb0>
    4b3c:	80 93 d1 0c 	sts	0x0CD1, r24
    4b40:	90 93 d2 0c 	sts	0x0CD2, r25
    4b44:	a0 93 d3 0c 	sts	0x0CD3, r26
    4b48:	b0 93 d4 0c 	sts	0x0CD4, r27
    4b4c:	00 93 cd 0c 	sts	0x0CCD, r16
    4b50:	10 93 ce 0c 	sts	0x0CCE, r17
    4b54:	20 93 cf 0c 	sts	0x0CCF, r18
    4b58:	30 93 d0 0c 	sts	0x0CD0, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4b5c:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4b60:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4b64:	85 81       	ldd	r24, Z+5	; 0x05
    4b66:	88 23       	and	r24, r24
    4b68:	39 f1       	breq	.+78     	; 0x4bb8 <_nrk_scheduler+0x17c>
    4b6a:	81 85       	ldd	r24, Z+9	; 0x09
    4b6c:	84 30       	cpi	r24, 0x04	; 4
    4b6e:	21 f1       	breq	.+72     	; 0x4bb8 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4b70:	87 81       	ldd	r24, Z+7	; 0x07
    4b72:	82 30       	cpi	r24, 0x02	; 2
    4b74:	29 f0       	breq	.+10     	; 0x4b80 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4b76:	88 23       	and	r24, r24
    4b78:	41 f0       	breq	.+16     	; 0x4b8a <_nrk_scheduler+0x14e>
    4b7a:	86 81       	ldd	r24, Z+6	; 0x06
    4b7c:	81 11       	cpse	r24, r1
    4b7e:	02 c0       	rjmp	.+4      	; 0x4b84 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4b80:	85 e0       	ldi	r24, 0x05	; 5
    4b82:	01 c0       	rjmp	.+2      	; 0x4b86 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4b84:	83 e0       	ldi	r24, 0x03	; 3
    4b86:	81 87       	std	Z+9, r24	; 0x09
    4b88:	14 c0       	rjmp	.+40     	; 0x4bb2 <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4b8a:	83 e0       	ldi	r24, 0x03	; 3
    4b8c:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4b8e:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4b90:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    4b92:	85 89       	ldd	r24, Z+21	; 0x15
    4b94:	96 89       	ldd	r25, Z+22	; 0x16
    4b96:	a7 89       	ldd	r26, Z+23	; 0x17
    4b98:	b0 8d       	ldd	r27, Z+24	; 0x18
    4b9a:	89 2b       	or	r24, r25
    4b9c:	8a 2b       	or	r24, r26
    4b9e:	8b 2b       	or	r24, r27
    4ba0:	41 f4       	brne	.+16     	; 0x4bb2 <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    4ba2:	81 8d       	ldd	r24, Z+25	; 0x19
    4ba4:	92 8d       	ldd	r25, Z+26	; 0x1a
    4ba6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4ba8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4baa:	85 8b       	std	Z+21, r24	; 0x15
    4bac:	96 8b       	std	Z+22, r25	; 0x16
    4bae:	a7 8b       	std	Z+23, r26	; 0x17
    4bb0:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4bb2:	80 85       	ldd	r24, Z+8	; 0x08
    4bb4:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4bb8:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4bbc:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4bc0:	85 a1       	ldd	r24, Z+37	; 0x25
    4bc2:	96 a1       	ldd	r25, Z+38	; 0x26
    4bc4:	a7 a1       	ldd	r26, Z+39	; 0x27
    4bc6:	b0 a5       	ldd	r27, Z+40	; 0x28
    4bc8:	89 2b       	or	r24, r25
    4bca:	8a 2b       	or	r24, r26
    4bcc:	8b 2b       	or	r24, r27
    4bce:	09 f4       	brne	.+2      	; 0x4bd2 <_nrk_scheduler+0x196>
    4bd0:	44 c0       	rjmp	.+136    	; 0x4c5a <_nrk_scheduler+0x21e>
    4bd2:	20 85       	ldd	r18, Z+8	; 0x08
    4bd4:	22 23       	and	r18, r18
    4bd6:	09 f4       	brne	.+2      	; 0x4bda <_nrk_scheduler+0x19e>
    4bd8:	40 c0       	rjmp	.+128    	; 0x4c5a <_nrk_scheduler+0x21e>
    4bda:	81 85       	ldd	r24, Z+9	; 0x09
    4bdc:	84 30       	cpi	r24, 0x04	; 4
    4bde:	e9 f1       	breq	.+122    	; 0x4c5a <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4be0:	85 8d       	ldd	r24, Z+29	; 0x1d
    4be2:	96 8d       	ldd	r25, Z+30	; 0x1e
    4be4:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4be6:	b0 a1       	ldd	r27, Z+32	; 0x20
    4be8:	40 91 34 0b 	lds	r20, 0x0B34
    4bec:	50 e0       	ldi	r21, 0x00	; 0
    4bee:	60 e0       	ldi	r22, 0x00	; 0
    4bf0:	70 e0       	ldi	r23, 0x00	; 0
    4bf2:	84 17       	cp	r24, r20
    4bf4:	95 07       	cpc	r25, r21
    4bf6:	a6 07       	cpc	r26, r22
    4bf8:	b7 07       	cpc	r27, r23
    4bfa:	68 f4       	brcc	.+26     	; 0x4c16 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4bfc:	62 2f       	mov	r22, r18
    4bfe:	82 e0       	ldi	r24, 0x02	; 2
    4c00:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4c04:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4c08:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4c0c:	15 8e       	std	Z+29, r1	; 0x1d
    4c0e:	16 8e       	std	Z+30, r1	; 0x1e
    4c10:	17 8e       	std	Z+31, r1	; 0x1f
    4c12:	10 a2       	std	Z+32, r1	; 0x20
    4c14:	08 c0       	rjmp	.+16     	; 0x4c26 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4c16:	84 1b       	sub	r24, r20
    4c18:	95 0b       	sbc	r25, r21
    4c1a:	a6 0b       	sbc	r26, r22
    4c1c:	b7 0b       	sbc	r27, r23
    4c1e:	85 8f       	std	Z+29, r24	; 0x1d
    4c20:	96 8f       	std	Z+30, r25	; 0x1e
    4c22:	a7 8f       	std	Z+31, r26	; 0x1f
    4c24:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4c26:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4c2a:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4c2e:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4c30:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c32:	96 8d       	ldd	r25, Z+30	; 0x1e
    4c34:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4c36:	b0 a1       	ldd	r27, Z+32	; 0x20
    4c38:	89 2b       	or	r24, r25
    4c3a:	8a 2b       	or	r24, r26
    4c3c:	8b 2b       	or	r24, r27
    4c3e:	69 f4       	brne	.+26     	; 0x4c5a <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4c40:	61 2f       	mov	r22, r17
    4c42:	83 e0       	ldi	r24, 0x03	; 3
    4c44:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4c48:	e0 91 d6 0c 	lds	r30, 0x0CD6
    4c4c:	f0 91 d7 0c 	lds	r31, 0x0CD7
    4c50:	83 e0       	ldi	r24, 0x03	; 3
    4c52:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4c54:	81 2f       	mov	r24, r17
    4c56:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <nrk_rem_from_readyQ>
    4c5a:	83 e9       	ldi	r24, 0x93	; 147
    4c5c:	9b e0       	ldi	r25, 0x0B	; 11
    4c5e:	9b 83       	std	Y+3, r25	; 0x03
    4c60:	8a 83       	std	Y+2, r24	; 0x02

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4c62:	00 e6       	ldi	r16, 0x60	; 96
    4c64:	1a ee       	ldi	r17, 0xEA	; 234
    4c66:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4c68:	2a ef       	ldi	r18, 0xFA	; 250
    4c6a:	c2 2e       	mov	r12, r18
    4c6c:	d1 2c       	mov	r13, r1
    4c6e:	e1 2c       	mov	r14, r1
    4c70:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4c72:	81 2c       	mov	r8, r1
    4c74:	91 2c       	mov	r9, r1
    4c76:	54 01       	movw	r10, r8
    4c78:	83 94       	inc	r8
    4c7a:	ea 81       	ldd	r30, Y+2	; 0x02
    4c7c:	fb 81       	ldd	r31, Y+3	; 0x03
    4c7e:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4c80:	80 81       	ld	r24, Z
    4c82:	8f 3f       	cpi	r24, 0xFF	; 255
    4c84:	09 f4       	brne	.+2      	; 0x4c88 <_nrk_scheduler+0x24c>
    4c86:	04 c1       	rjmp	.+520    	; 0x4e90 <_nrk_scheduler+0x454>
    4c88:	ea 81       	ldd	r30, Y+2	; 0x02
    4c8a:	fb 81       	ldd	r31, Y+3	; 0x03
    4c8c:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    4c8e:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    4c90:	88 23       	and	r24, r24
    4c92:	09 f4       	brne	.+2      	; 0x4c96 <_nrk_scheduler+0x25a>
    4c94:	67 c0       	rjmp	.+206    	; 0x4d64 <_nrk_scheduler+0x328>
    4c96:	ea 81       	ldd	r30, Y+2	; 0x02
    4c98:	fb 81       	ldd	r31, Y+3	; 0x03
    4c9a:	80 81       	ld	r24, Z
    4c9c:	84 30       	cpi	r24, 0x04	; 4
    4c9e:	09 f4       	brne	.+2      	; 0x4ca2 <_nrk_scheduler+0x266>
    4ca0:	61 c0       	rjmp	.+194    	; 0x4d64 <_nrk_scheduler+0x328>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    4ca2:	44 84       	ldd	r4, Z+12	; 0x0c
    4ca4:	55 84       	ldd	r5, Z+13	; 0x0d
    4ca6:	66 84       	ldd	r6, Z+14	; 0x0e
    4ca8:	77 84       	ldd	r7, Z+15	; 0x0f
    4caa:	60 91 34 0b 	lds	r22, 0x0B34
    4cae:	70 e0       	ldi	r23, 0x00	; 0
    4cb0:	80 e0       	ldi	r24, 0x00	; 0
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	46 16       	cp	r4, r22
    4cb6:	57 06       	cpc	r5, r23
    4cb8:	68 06       	cpc	r6, r24
    4cba:	79 06       	cpc	r7, r25
    4cbc:	48 f0       	brcs	.+18     	; 0x4cd0 <_nrk_scheduler+0x294>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4cbe:	46 1a       	sub	r4, r22
    4cc0:	57 0a       	sbc	r5, r23
    4cc2:	68 0a       	sbc	r6, r24
    4cc4:	79 0a       	sbc	r7, r25
    4cc6:	44 86       	std	Z+12, r4	; 0x0c
    4cc8:	55 86       	std	Z+13, r5	; 0x0d
    4cca:	66 86       	std	Z+14, r6	; 0x0e
    4ccc:	77 86       	std	Z+15, r7	; 0x0f
    4cce:	06 c0       	rjmp	.+12     	; 0x4cdc <_nrk_scheduler+0x2a0>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    4cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    4cd2:	fb 81       	ldd	r31, Y+3	; 0x03
    4cd4:	14 86       	std	Z+12, r1	; 0x0c
    4cd6:	15 86       	std	Z+13, r1	; 0x0d
    4cd8:	16 86       	std	Z+14, r1	; 0x0e
    4cda:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    4cde:	fb 81       	ldd	r31, Y+3	; 0x03
    4ce0:	40 88       	ldd	r4, Z+16	; 0x10
    4ce2:	51 88       	ldd	r5, Z+17	; 0x11
    4ce4:	62 88       	ldd	r6, Z+18	; 0x12
    4ce6:	73 88       	ldd	r7, Z+19	; 0x13
    4ce8:	46 16       	cp	r4, r22
    4cea:	57 06       	cpc	r5, r23
    4cec:	68 06       	cpc	r6, r24
    4cee:	79 06       	cpc	r7, r25
    4cf0:	48 f0       	brcs	.+18     	; 0x4d04 <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4cf2:	46 1a       	sub	r4, r22
    4cf4:	57 0a       	sbc	r5, r23
    4cf6:	68 0a       	sbc	r6, r24
    4cf8:	79 0a       	sbc	r7, r25
    4cfa:	40 8a       	std	Z+16, r4	; 0x10
    4cfc:	51 8a       	std	Z+17, r5	; 0x11
    4cfe:	62 8a       	std	Z+18, r6	; 0x12
    4d00:	73 8a       	std	Z+19, r7	; 0x13
    4d02:	1e c0       	rjmp	.+60     	; 0x4d40 <_nrk_scheduler+0x304>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4d04:	ea 81       	ldd	r30, Y+2	; 0x02
    4d06:	fb 81       	ldd	r31, Y+3	; 0x03
    4d08:	20 8d       	ldd	r18, Z+24	; 0x18
    4d0a:	31 8d       	ldd	r19, Z+25	; 0x19
    4d0c:	42 8d       	ldd	r20, Z+26	; 0x1a
    4d0e:	53 8d       	ldd	r21, Z+27	; 0x1b
    4d10:	62 17       	cp	r22, r18
    4d12:	73 07       	cpc	r23, r19
    4d14:	84 07       	cpc	r24, r20
    4d16:	95 07       	cpc	r25, r21
    4d18:	58 f4       	brcc	.+22     	; 0x4d30 <_nrk_scheduler+0x2f4>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4d1a:	29 01       	movw	r4, r18
    4d1c:	3a 01       	movw	r6, r20
    4d1e:	46 1a       	sub	r4, r22
    4d20:	57 0a       	sbc	r5, r23
    4d22:	68 0a       	sbc	r6, r24
    4d24:	79 0a       	sbc	r7, r25
    4d26:	40 8a       	std	Z+16, r4	; 0x10
    4d28:	51 8a       	std	Z+17, r5	; 0x11
    4d2a:	62 8a       	std	Z+18, r6	; 0x12
    4d2c:	73 8a       	std	Z+19, r7	; 0x13
    4d2e:	08 c0       	rjmp	.+16     	; 0x4d40 <_nrk_scheduler+0x304>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4d30:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodsi4>
    4d34:	ea 81       	ldd	r30, Y+2	; 0x02
    4d36:	fb 81       	ldd	r31, Y+3	; 0x03
    4d38:	60 8b       	std	Z+16, r22	; 0x10
    4d3a:	71 8b       	std	Z+17, r23	; 0x11
    4d3c:	82 8b       	std	Z+18, r24	; 0x12
    4d3e:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4d40:	ea 81       	ldd	r30, Y+2	; 0x02
    4d42:	fb 81       	ldd	r31, Y+3	; 0x03
    4d44:	80 89       	ldd	r24, Z+16	; 0x10
    4d46:	91 89       	ldd	r25, Z+17	; 0x11
    4d48:	a2 89       	ldd	r26, Z+18	; 0x12
    4d4a:	b3 89       	ldd	r27, Z+19	; 0x13
    4d4c:	89 2b       	or	r24, r25
    4d4e:	8a 2b       	or	r24, r26
    4d50:	8b 2b       	or	r24, r27
    4d52:	41 f4       	brne	.+16     	; 0x4d64 <_nrk_scheduler+0x328>
    4d54:	80 8d       	ldd	r24, Z+24	; 0x18
    4d56:	91 8d       	ldd	r25, Z+25	; 0x19
    4d58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4d5a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4d5c:	80 8b       	std	Z+16, r24	; 0x10
    4d5e:	91 8b       	std	Z+17, r25	; 0x11
    4d60:	a2 8b       	std	Z+18, r26	; 0x12
    4d62:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4d64:	ea 81       	ldd	r30, Y+2	; 0x02
    4d66:	fb 81       	ldd	r31, Y+3	; 0x03
    4d68:	80 81       	ld	r24, Z
    4d6a:	83 30       	cpi	r24, 0x03	; 3
    4d6c:	09 f0       	breq	.+2      	; 0x4d70 <_nrk_scheduler+0x334>
    4d6e:	90 c0       	rjmp	.+288    	; 0x4e90 <_nrk_scheduler+0x454>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4d70:	84 85       	ldd	r24, Z+12	; 0x0c
    4d72:	95 85       	ldd	r25, Z+13	; 0x0d
    4d74:	a6 85       	ldd	r26, Z+14	; 0x0e
    4d76:	b7 85       	ldd	r27, Z+15	; 0x0f
    4d78:	89 2b       	or	r24, r25
    4d7a:	8a 2b       	or	r24, r26
    4d7c:	8b 2b       	or	r24, r27
    4d7e:	09 f0       	breq	.+2      	; 0x4d82 <_nrk_scheduler+0x346>
    4d80:	74 c0       	rjmp	.+232    	; 0x4e6a <_nrk_scheduler+0x42e>
    4d82:	df 01       	movw	r26, r30
    4d84:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4d86:	8c 91       	ld	r24, X
    4d88:	9f 01       	movw	r18, r30
    4d8a:	23 50       	subi	r18, 0x03	; 3
    4d8c:	31 09       	sbc	r19, r1
    4d8e:	88 23       	and	r24, r24
    4d90:	a9 f0       	breq	.+42     	; 0x4dbc <_nrk_scheduler+0x380>
    4d92:	f9 01       	movw	r30, r18
    4d94:	80 81       	ld	r24, Z
    4d96:	88 23       	and	r24, r24
    4d98:	89 f0       	breq	.+34     	; 0x4dbc <_nrk_scheduler+0x380>
    4d9a:	b5 01       	movw	r22, r10
    4d9c:	a4 01       	movw	r20, r8
    4d9e:	00 90 c6 0c 	lds	r0, 0x0CC6
    4da2:	04 c0       	rjmp	.+8      	; 0x4dac <_nrk_scheduler+0x370>
    4da4:	44 0f       	add	r20, r20
    4da6:	55 1f       	adc	r21, r21
    4da8:	66 1f       	adc	r22, r22
    4daa:	77 1f       	adc	r23, r23
    4dac:	0a 94       	dec	r0
    4dae:	d2 f7       	brpl	.-12     	; 0x4da4 <_nrk_scheduler+0x368>
    4db0:	ea 81       	ldd	r30, Y+2	; 0x02
    4db2:	fb 81       	ldd	r31, Y+3	; 0x03
    4db4:	40 87       	std	Z+8, r20	; 0x08
    4db6:	51 87       	std	Z+9, r21	; 0x09
    4db8:	62 87       	std	Z+10, r22	; 0x0a
    4dba:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4dbc:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    4dbe:	f9 01       	movw	r30, r18
    4dc0:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    4dc2:	ea 81       	ldd	r30, Y+2	; 0x02
    4dc4:	fb 81       	ldd	r31, Y+3	; 0x03
    4dc6:	a0 a1       	ldd	r26, Z+32	; 0x20
    4dc8:	b1 a1       	ldd	r27, Z+33	; 0x21
    4dca:	a1 30       	cpi	r26, 0x01	; 1
    4dcc:	b1 05       	cpc	r27, r1
    4dce:	19 f5       	brne	.+70     	; 0x4e16 <_nrk_scheduler+0x3da>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4dd0:	84 8d       	ldd	r24, Z+28	; 0x1c
    4dd2:	95 8d       	ldd	r25, Z+29	; 0x1d
    4dd4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4dd6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4dd8:	84 8b       	std	Z+20, r24	; 0x14
    4dda:	95 8b       	std	Z+21, r25	; 0x15
    4ddc:	a6 8b       	std	Z+22, r26	; 0x16
    4dde:	b7 8b       	std	Z+23, r27	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    4de0:	92 e0       	ldi	r25, 0x02	; 2
    4de2:	49 2e       	mov	r4, r25
    4de4:	40 82       	st	Z, r4
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4de6:	80 89       	ldd	r24, Z+16	; 0x10
    4de8:	91 89       	ldd	r25, Z+17	; 0x11
    4dea:	a2 89       	ldd	r26, Z+18	; 0x12
    4dec:	b3 89       	ldd	r27, Z+19	; 0x13
    4dee:	84 87       	std	Z+12, r24	; 0x0c
    4df0:	95 87       	std	Z+13, r25	; 0x0d
    4df2:	a6 87       	std	Z+14, r26	; 0x0e
    4df4:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4df6:	80 8d       	ldd	r24, Z+24	; 0x18
    4df8:	91 8d       	ldd	r25, Z+25	; 0x19
    4dfa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4dfc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4dfe:	89 2b       	or	r24, r25
    4e00:	8a 2b       	or	r24, r26
    4e02:	8b 2b       	or	r24, r27
    4e04:	21 f4       	brne	.+8      	; 0x4e0e <_nrk_scheduler+0x3d2>
    4e06:	c4 86       	std	Z+12, r12	; 0x0c
    4e08:	d5 86       	std	Z+13, r13	; 0x0d
    4e0a:	e6 86       	std	Z+14, r14	; 0x0e
    4e0c:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    4e0e:	89 81       	ldd	r24, Y+1	; 0x01
    4e10:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <nrk_add_to_readyQ>
    4e14:	2a c0       	rjmp	.+84     	; 0x4e6a <_nrk_scheduler+0x42e>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4e16:	ea 81       	ldd	r30, Y+2	; 0x02
    4e18:	fb 81       	ldd	r31, Y+3	; 0x03
    4e1a:	44 8d       	ldd	r20, Z+28	; 0x1c
    4e1c:	55 8d       	ldd	r21, Z+29	; 0x1d
    4e1e:	66 8d       	ldd	r22, Z+30	; 0x1e
    4e20:	77 8d       	ldd	r23, Z+31	; 0x1f
    4e22:	44 8b       	std	Z+20, r20	; 0x14
    4e24:	55 8b       	std	Z+21, r21	; 0x15
    4e26:	66 8b       	std	Z+22, r22	; 0x16
    4e28:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4e2a:	40 8c       	ldd	r4, Z+24	; 0x18
    4e2c:	51 8c       	ldd	r5, Z+25	; 0x19
    4e2e:	62 8c       	ldd	r6, Z+26	; 0x1a
    4e30:	73 8c       	ldd	r7, Z+27	; 0x1b
    4e32:	11 97       	sbiw	r26, 0x01	; 1
    4e34:	a3 01       	movw	r20, r6
    4e36:	92 01       	movw	r18, r4
    4e38:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__muluhisi3>
    4e3c:	64 87       	std	Z+12, r22	; 0x0c
    4e3e:	75 87       	std	Z+13, r23	; 0x0d
    4e40:	86 87       	std	Z+14, r24	; 0x0e
    4e42:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4e44:	60 8b       	std	Z+16, r22	; 0x10
    4e46:	71 8b       	std	Z+17, r23	; 0x11
    4e48:	82 8b       	std	Z+18, r24	; 0x12
    4e4a:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4e4c:	45 28       	or	r4, r5
    4e4e:	46 28       	or	r4, r6
    4e50:	47 28       	or	r4, r7
    4e52:	21 f4       	brne	.+8      	; 0x4e5c <_nrk_scheduler+0x420>
    4e54:	c4 86       	std	Z+12, r12	; 0x0c
    4e56:	d5 86       	std	Z+13, r13	; 0x0d
    4e58:	e6 86       	std	Z+14, r14	; 0x0e
    4e5a:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    4e5c:	44 24       	eor	r4, r4
    4e5e:	43 94       	inc	r4
    4e60:	51 2c       	mov	r5, r1
    4e62:	ea 81       	ldd	r30, Y+2	; 0x02
    4e64:	fb 81       	ldd	r31, Y+3	; 0x03
    4e66:	51 a2       	std	Z+33, r5	; 0x21
    4e68:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4e6a:	ea 81       	ldd	r30, Y+2	; 0x02
    4e6c:	fb 81       	ldd	r31, Y+3	; 0x03
    4e6e:	84 85       	ldd	r24, Z+12	; 0x0c
    4e70:	95 85       	ldd	r25, Z+13	; 0x0d
    4e72:	a6 85       	ldd	r26, Z+14	; 0x0e
    4e74:	b7 85       	ldd	r27, Z+15	; 0x0f
    4e76:	00 97       	sbiw	r24, 0x00	; 0
    4e78:	a1 05       	cpc	r26, r1
    4e7a:	b1 05       	cpc	r27, r1
    4e7c:	49 f0       	breq	.+18     	; 0x4e90 <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4e7e:	a8 01       	movw	r20, r16
    4e80:	60 e0       	ldi	r22, 0x00	; 0
    4e82:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4e84:	84 17       	cp	r24, r20
    4e86:	95 07       	cpc	r25, r21
    4e88:	a6 07       	cpc	r26, r22
    4e8a:	b7 07       	cpc	r27, r23
    4e8c:	08 f4       	brcc	.+2      	; 0x4e90 <_nrk_scheduler+0x454>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4e8e:	8c 01       	movw	r16, r24
    4e90:	f9 81       	ldd	r31, Y+1	; 0x01
    4e92:	ff 5f       	subi	r31, 0xFF	; 255
    4e94:	f9 83       	std	Y+1, r31	; 0x01
    4e96:	2a 81       	ldd	r18, Y+2	; 0x02
    4e98:	3b 81       	ldd	r19, Y+3	; 0x03
    4e9a:	25 5d       	subi	r18, 0xD5	; 213
    4e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4e9e:	3b 83       	std	Y+3, r19	; 0x03
    4ea0:	2a 83       	std	Y+2, r18	; 0x02

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4ea2:	f7 30       	cpi	r31, 0x07	; 7
    4ea4:	09 f0       	breq	.+2      	; 0x4ea8 <_nrk_scheduler+0x46c>
    4ea6:	e9 ce       	rjmp	.-558    	; 0x4c7a <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4ea8:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <nrk_get_high_ready_task_ID>
    4eac:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4eae:	3b e2       	ldi	r19, 0x2B	; 43
    4eb0:	83 02       	muls	r24, r19
    4eb2:	f0 01       	movw	r30, r0
    4eb4:	11 24       	eor	r1, r1
    4eb6:	e6 57       	subi	r30, 0x76	; 118
    4eb8:	f4 4f       	sbci	r31, 0xF4	; 244
    4eba:	22 85       	ldd	r18, Z+10	; 0x0a
    4ebc:	20 93 d8 0c 	sts	0x0CD8, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4ec0:	f0 93 c8 0c 	sts	0x0CC8, r31
    4ec4:	e0 93 c7 0c 	sts	0x0CC7, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4ec8:	88 23       	and	r24, r24
    4eca:	d9 f0       	breq	.+54     	; 0x4f02 <_nrk_scheduler+0x4c6>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4ecc:	85 a1       	ldd	r24, Z+37	; 0x25
    4ece:	96 a1       	ldd	r25, Z+38	; 0x26
    4ed0:	a7 a1       	ldd	r26, Z+39	; 0x27
    4ed2:	b0 a5       	ldd	r27, Z+40	; 0x28
    4ed4:	89 2b       	or	r24, r25
    4ed6:	8a 2b       	or	r24, r26
    4ed8:	8b 2b       	or	r24, r27
    4eda:	99 f0       	breq	.+38     	; 0x4f02 <_nrk_scheduler+0x4c6>
    4edc:	85 8d       	ldd	r24, Z+29	; 0x1d
    4ede:	96 8d       	ldd	r25, Z+30	; 0x1e
    4ee0:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4ee2:	b0 a1       	ldd	r27, Z+32	; 0x20
    4ee4:	8a 3f       	cpi	r24, 0xFA	; 250
    4ee6:	91 05       	cpc	r25, r1
    4ee8:	a1 05       	cpc	r26, r1
    4eea:	b1 05       	cpc	r27, r1
    4eec:	50 f4       	brcc	.+20     	; 0x4f02 <_nrk_scheduler+0x4c6>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4eee:	a8 01       	movw	r20, r16
    4ef0:	60 e0       	ldi	r22, 0x00	; 0
    4ef2:	70 e0       	ldi	r23, 0x00	; 0
    4ef4:	84 17       	cp	r24, r20
    4ef6:	95 07       	cpc	r25, r21
    4ef8:	a6 07       	cpc	r26, r22
    4efa:	b7 07       	cpc	r27, r23
    4efc:	10 f4       	brcc	.+4      	; 0x4f02 <_nrk_scheduler+0x4c6>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4efe:	8c 01       	movw	r16, r24
    4f00:	05 c0       	rjmp	.+10     	; 0x4f0c <_nrk_scheduler+0x4d0>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    4f02:	0b 3f       	cpi	r16, 0xFB	; 251
    4f04:	11 05       	cpc	r17, r1
    4f06:	10 f0       	brcs	.+4      	; 0x4f0c <_nrk_scheduler+0x4d0>
    4f08:	0a ef       	ldi	r16, 0xFA	; 250
    4f0a:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4f0c:	20 93 c9 0c 	sts	0x0CC9, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4f10:	f0 93 d7 0c 	sts	0x0CD7, r31
    4f14:	e0 93 d6 0c 	sts	0x0CD6, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    4f18:	00 93 34 0b 	sts	0x0B34, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4f1c:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    4f20:	28 2f       	mov	r18, r24
    4f22:	30 e0       	ldi	r19, 0x00	; 0
    4f24:	2f 5f       	subi	r18, 0xFF	; 255
    4f26:	3f 4f       	sbci	r19, 0xFF	; 255
    4f28:	20 17       	cp	r18, r16
    4f2a:	31 07       	cpc	r19, r17
    4f2c:	40 f0       	brcs	.+16     	; 0x4f3e <_nrk_scheduler+0x502>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4f2e:	0e 94 11 29 	call	0x5222	; 0x5222 <_nrk_os_timer_get>
    4f32:	08 2f       	mov	r16, r24
    4f34:	10 e0       	ldi	r17, 0x00	; 0
    4f36:	0e 5f       	subi	r16, 0xFE	; 254
    4f38:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    4f3a:	00 93 34 0b 	sts	0x0B34, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4f3e:	f1 10       	cpse	r15, r1
    4f40:	10 92 ca 0c 	sts	0x0CCA, r1

    _nrk_set_next_wakeup(next_wake);
    4f44:	80 2f       	mov	r24, r16
    4f46:	0e 94 af 28 	call	0x515e	; 0x515e <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4f4a:	6c ed       	ldi	r22, 0xDC	; 220
    4f4c:	75 e0       	ldi	r23, 0x05	; 5
    4f4e:	c1 01       	movw	r24, r2
    4f50:	0e 94 17 28 	call	0x502e	; 0x502e <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    4f54:	0e 94 34 2c 	call	0x5868	; 0x5868 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    4f58:	0f 90       	pop	r0
    4f5a:	0f 90       	pop	r0
    4f5c:	0f 90       	pop	r0
    4f5e:	df 91       	pop	r29
    4f60:	cf 91       	pop	r28
    4f62:	1f 91       	pop	r17
    4f64:	0f 91       	pop	r16
    4f66:	ff 90       	pop	r15
    4f68:	ef 90       	pop	r14
    4f6a:	df 90       	pop	r13
    4f6c:	cf 90       	pop	r12
    4f6e:	bf 90       	pop	r11
    4f70:	af 90       	pop	r10
    4f72:	9f 90       	pop	r9
    4f74:	8f 90       	pop	r8
    4f76:	7f 90       	pop	r7
    4f78:	6f 90       	pop	r6
    4f7a:	5f 90       	pop	r5
    4f7c:	4f 90       	pop	r4
    4f7e:	3f 90       	pop	r3
    4f80:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4f82:	0c 94 3f 2c 	jmp	0x587e	; 0x587e <nrk_start_high_ready_task>

00004f86 <nrk_spin_wait_us>:
	...
    4f9e:	01 97       	sbiw	r24, 0x01	; 1
    4fa0:	91 f7       	brne	.-28     	; 0x4f86 <nrk_spin_wait_us>
    4fa2:	08 95       	ret

00004fa4 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4fa4:	10 92 21 01 	sts	0x0121, r1
    4fa8:	08 95       	ret

00004faa <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4faa:	89 e0       	ldi	r24, 0x09	; 9
    4fac:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4fb0:	8d e8       	ldi	r24, 0x8D	; 141
    4fb2:	9c e3       	ldi	r25, 0x3C	; 60
    4fb4:	90 93 29 01 	sts	0x0129, r25
    4fb8:	80 93 28 01 	sts	0x0128, r24
    4fbc:	08 95       	ret

00004fbe <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4fbe:	10 92 25 01 	sts	0x0125, r1
    4fc2:	10 92 24 01 	sts	0x0124, r1
    4fc6:	08 95       	ret

00004fc8 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	00 d0       	rcall	.+0      	; 0x4fce <_nrk_precision_os_timer_get+0x6>
    4fce:	cd b7       	in	r28, 0x3d	; 61
    4fd0:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4fd2:	80 91 24 01 	lds	r24, 0x0124
    4fd6:	90 91 25 01 	lds	r25, 0x0125
    4fda:	9a 83       	std	Y+2, r25	; 0x02
    4fdc:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4fde:	89 81       	ldd	r24, Y+1	; 0x01
    4fe0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4fe2:	0f 90       	pop	r0
    4fe4:	0f 90       	pop	r0
    4fe6:	df 91       	pop	r29
    4fe8:	cf 91       	pop	r28
    4fea:	08 95       	ret

00004fec <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4fec:	10 92 81 00 	sts	0x0081, r1
    4ff0:	08 95       	ret

00004ff2 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	80 93 81 00 	sts	0x0081, r24
    4ff8:	08 95       	ret

00004ffa <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4ffa:	83 b5       	in	r24, 0x23	; 35
    4ffc:	81 60       	ori	r24, 0x01	; 1
    4ffe:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    5000:	10 92 85 00 	sts	0x0085, r1
    5004:	10 92 84 00 	sts	0x0084, r1
    5008:	08 95       	ret

0000500a <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    500a:	cf 93       	push	r28
    500c:	df 93       	push	r29
    500e:	00 d0       	rcall	.+0      	; 0x5010 <_nrk_high_speed_timer_get+0x6>
    5010:	cd b7       	in	r28, 0x3d	; 61
    5012:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    5014:	80 91 84 00 	lds	r24, 0x0084
    5018:	90 91 85 00 	lds	r25, 0x0085
    501c:	9a 83       	std	Y+2, r25	; 0x02
    501e:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    5020:	89 81       	ldd	r24, Y+1	; 0x01
    5022:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5024:	0f 90       	pop	r0
    5026:	0f 90       	pop	r0
    5028:	df 91       	pop	r29
    502a:	cf 91       	pop	r28
    502c:	08 95       	ret

0000502e <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    502e:	cf 92       	push	r12
    5030:	df 92       	push	r13
    5032:	ef 92       	push	r14
    5034:	ff 92       	push	r15
    5036:	cf 93       	push	r28
    5038:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    503a:	ec 01       	movw	r28, r24
    503c:	cc 0f       	add	r28, r28
    503e:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    5040:	c9 37       	cpi	r28, 0x79	; 121
    5042:	8f ef       	ldi	r24, 0xFF	; 255
    5044:	d8 07       	cpc	r29, r24
    5046:	10 f0       	brcs	.+4      	; 0x504c <nrk_high_speed_timer_wait+0x1e>
    5048:	c0 e0       	ldi	r28, 0x00	; 0
    504a:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    504c:	6b 01       	movw	r12, r22
    504e:	e1 2c       	mov	r14, r1
    5050:	f1 2c       	mov	r15, r1
    5052:	cc 0e       	add	r12, r28
    5054:	dd 1e       	adc	r13, r29
    5056:	e1 1c       	adc	r14, r1
    5058:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	c8 16       	cp	r12, r24
    505e:	d1 04       	cpc	r13, r1
    5060:	e8 06       	cpc	r14, r24
    5062:	f1 04       	cpc	r15, r1
    5064:	40 f0       	brcs	.+16     	; 0x5076 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	e8 1a       	sub	r14, r24
    506a:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    506c:	0e 94 05 28 	call	0x500a	; 0x500a <_nrk_high_speed_timer_get>
    5070:	c8 17       	cp	r28, r24
    5072:	d9 07       	cpc	r29, r25
    5074:	d8 f3       	brcs	.-10     	; 0x506c <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    5076:	0e 94 05 28 	call	0x500a	; 0x500a <_nrk_high_speed_timer_get>
    507a:	8c 15       	cp	r24, r12
    507c:	9d 05       	cpc	r25, r13
    507e:	d8 f3       	brcs	.-10     	; 0x5076 <nrk_high_speed_timer_wait+0x48>
}
    5080:	df 91       	pop	r29
    5082:	cf 91       	pop	r28
    5084:	ff 90       	pop	r15
    5086:	ef 90       	pop	r14
    5088:	df 90       	pop	r13
    508a:	cf 90       	pop	r12
    508c:	08 95       	ret

0000508e <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    508e:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    5092:	e0 e7       	ldi	r30, 0x70	; 112
    5094:	f0 e0       	ldi	r31, 0x00	; 0
    5096:	80 81       	ld	r24, Z
    5098:	8d 7f       	andi	r24, 0xFD	; 253
    509a:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    509c:	80 81       	ld	r24, Z
    509e:	8e 7f       	andi	r24, 0xFE	; 254
    50a0:	80 83       	st	Z, r24
    50a2:	08 95       	ret

000050a4 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    50a4:	80 93 b2 00 	sts	0x00B2, r24
    50a8:	08 95       	ret

000050aa <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    50aa:	e0 e7       	ldi	r30, 0x70	; 112
    50ac:	f0 e0       	ldi	r31, 0x00	; 0
    50ae:	80 81       	ld	r24, Z
    50b0:	83 60       	ori	r24, 0x03	; 3
    50b2:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    50b4:	83 e0       	ldi	r24, 0x03	; 3
    50b6:	80 93 b1 00 	sts	0x00B1, r24
    50ba:	08 95       	ret

000050bc <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    50bc:	83 b5       	in	r24, 0x23	; 35
    50be:	82 60       	ori	r24, 0x02	; 2
    50c0:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    50c2:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    50c6:	10 92 32 0b 	sts	0x0B32, r1
    _nrk_prev_timer_val=0;
    50ca:	10 92 34 0b 	sts	0x0B34, r1
    50ce:	08 95       	ret

000050d0 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    50d0:	cf 93       	push	r28
    50d2:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    50d4:	8e ef       	ldi	r24, 0xFE	; 254
    50d6:	80 93 34 0b 	sts	0x0B34, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    50da:	80 e2       	ldi	r24, 0x20	; 32
    50dc:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    50e0:	80 91 34 0b 	lds	r24, 0x0B34
    50e4:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    50e8:	83 e0       	ldi	r24, 0x03	; 3
    50ea:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    50ec:	92 e0       	ldi	r25, 0x02	; 2
    50ee:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    50f2:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    50f6:	93 b5       	in	r25, 0x23	; 35
    50f8:	92 60       	ori	r25, 0x02	; 2
    50fa:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    50fc:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    50fe:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    5100:	83 b5       	in	r24, 0x23	; 35
    5102:	82 60       	ori	r24, 0x02	; 2
    5104:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    5106:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    5110:	10 92 85 00 	sts	0x0085, r1
    5114:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5118:	83 b5       	in	r24, 0x23	; 35
    511a:	82 60       	ori	r24, 0x02	; 2
    511c:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    511e:	83 b5       	in	r24, 0x23	; 35
    5120:	81 60       	ori	r24, 0x01	; 1
    5122:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    5124:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    5128:	c4 e2       	ldi	r28, 0x24	; 36
    512a:	d1 e0       	ldi	r29, 0x01	; 1
    512c:	19 82       	std	Y+1, r1	; 0x01
    512e:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5130:	83 b5       	in	r24, 0x23	; 35
    5132:	82 60       	ori	r24, 0x02	; 2
    5134:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5136:	83 b5       	in	r24, 0x23	; 35
    5138:	81 60       	ori	r24, 0x01	; 1
    513a:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    513c:	0e 94 5e 28 	call	0x50bc	; 0x50bc <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    5140:	19 82       	std	Y+1, r1	; 0x01
    5142:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    5144:	0e 94 55 28 	call	0x50aa	; 0x50aa <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    5148:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    514c:	10 92 32 0b 	sts	0x0B32, r1
}
    5150:	df 91       	pop	r29
    5152:	cf 91       	pop	r28
    5154:	08 95       	ret

00005156 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    5156:	80 91 b3 00 	lds	r24, 0x00B3
}
    515a:	8f 5f       	subi	r24, 0xFF	; 255
    515c:	08 95       	ret

0000515e <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    515e:	81 50       	subi	r24, 0x01	; 1
    5160:	80 93 b3 00 	sts	0x00B3, r24
    5164:	08 95       	ret

00005166 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5166:	81 11       	cpse	r24, r1
    5168:	02 c0       	rjmp	.+4      	; 0x516e <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    516a:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    516e:	8f ef       	ldi	r24, 0xFF	; 255
    5170:	08 95       	ret

00005172 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5172:	81 11       	cpse	r24, r1
    5174:	06 c0       	rjmp	.+12     	; 0x5182 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    5176:	10 92 95 00 	sts	0x0095, r1
    517a:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    517e:	81 e0       	ldi	r24, 0x01	; 1
    5180:	08 95       	ret
	}
return NRK_ERROR;
    5182:	8f ef       	ldi	r24, 0xFF	; 255
}
    5184:	08 95       	ret

00005186 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5186:	81 11       	cpse	r24, r1
    5188:	05 c0       	rjmp	.+10     	; 0x5194 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    518a:	80 91 94 00 	lds	r24, 0x0094
    518e:	90 91 95 00 	lds	r25, 0x0095
    5192:	08 95       	ret
	}
return 0;
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	90 e0       	ldi	r25, 0x00	; 0

}
    5198:	08 95       	ret

0000519a <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    519a:	81 11       	cpse	r24, r1
    519c:	05 c0       	rjmp	.+10     	; 0x51a8 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    519e:	82 e0       	ldi	r24, 0x02	; 2
    51a0:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	08 95       	ret
	}
return NRK_ERROR;
    51a8:	8f ef       	ldi	r24, 0xFF	; 255
}
    51aa:	08 95       	ret

000051ac <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    51ac:	81 11       	cpse	r24, r1
    51ae:	35 c0       	rjmp	.+106    	; 0x521a <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    51b0:	cb 01       	movw	r24, r22
    51b2:	01 97       	sbiw	r24, 0x01	; 1
    51b4:	05 97       	sbiw	r24, 0x05	; 5
    51b6:	10 f4       	brcc	.+4      	; 0x51bc <nrk_timer_int_configure+0x10>
    51b8:	60 93 33 0b 	sts	0x0B33, r22
	TCCR3A = 0;  
    51bc:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    51c0:	88 e0       	ldi	r24, 0x08	; 8
    51c2:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    51c6:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    51ca:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    51ce:	30 93 31 0b 	sts	0x0B31, r19
    51d2:	20 93 30 0b 	sts	0x0B30, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    51d6:	80 91 33 0b 	lds	r24, 0x0B33
    51da:	81 30       	cpi	r24, 0x01	; 1
    51dc:	21 f4       	brne	.+8      	; 0x51e6 <nrk_timer_int_configure+0x3a>
    51de:	80 91 91 00 	lds	r24, 0x0091
    51e2:	81 60       	ori	r24, 0x01	; 1
    51e4:	11 c0       	rjmp	.+34     	; 0x5208 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    51e6:	82 30       	cpi	r24, 0x02	; 2
    51e8:	21 f4       	brne	.+8      	; 0x51f2 <nrk_timer_int_configure+0x46>
    51ea:	80 91 91 00 	lds	r24, 0x0091
    51ee:	82 60       	ori	r24, 0x02	; 2
    51f0:	0b c0       	rjmp	.+22     	; 0x5208 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    51f2:	83 30       	cpi	r24, 0x03	; 3
    51f4:	21 f4       	brne	.+8      	; 0x51fe <nrk_timer_int_configure+0x52>
    51f6:	80 91 91 00 	lds	r24, 0x0091
    51fa:	83 60       	ori	r24, 0x03	; 3
    51fc:	05 c0       	rjmp	.+10     	; 0x5208 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    51fe:	84 30       	cpi	r24, 0x04	; 4
    5200:	31 f4       	brne	.+12     	; 0x520e <nrk_timer_int_configure+0x62>
    5202:	80 91 91 00 	lds	r24, 0x0091
    5206:	84 60       	ori	r24, 0x04	; 4
    5208:	80 93 91 00 	sts	0x0091, r24
    520c:	08 c0       	rjmp	.+16     	; 0x521e <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    520e:	85 30       	cpi	r24, 0x05	; 5
    5210:	31 f4       	brne	.+12     	; 0x521e <nrk_timer_int_configure+0x72>
    5212:	80 91 91 00 	lds	r24, 0x0091
    5216:	85 60       	ori	r24, 0x05	; 5
    5218:	f7 cf       	rjmp	.-18     	; 0x5208 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    521a:	8f ef       	ldi	r24, 0xFF	; 255
    521c:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    521e:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    5220:	08 95       	ret

00005222 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    5222:	80 91 b2 00 	lds	r24, 0x00B2
}
    5226:	08 95       	ret

00005228 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    5228:	1f 92       	push	r1
    522a:	0f 92       	push	r0
    522c:	0f b6       	in	r0, 0x3f	; 63
    522e:	0f 92       	push	r0
    5230:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5232:	60 e0       	ldi	r22, 0x00	; 0
    5234:	8a e0       	ldi	r24, 0x0A	; 10
    5236:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
	while(1);
    523a:	ff cf       	rjmp	.-2      	; 0x523a <__vector_default+0x12>

0000523c <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    523c:	0f 92       	push	r0
    523e:	0f b6       	in	r0, 0x3f	; 63
    5240:	0f 92       	push	r0
    5242:	1f 92       	push	r1
    5244:	2f 92       	push	r2
    5246:	3f 92       	push	r3
    5248:	4f 92       	push	r4
    524a:	5f 92       	push	r5
    524c:	6f 92       	push	r6
    524e:	7f 92       	push	r7
    5250:	8f 92       	push	r8
    5252:	9f 92       	push	r9
    5254:	af 92       	push	r10
    5256:	bf 92       	push	r11
    5258:	cf 92       	push	r12
    525a:	df 92       	push	r13
    525c:	ef 92       	push	r14
    525e:	ff 92       	push	r15
    5260:	0f 93       	push	r16
    5262:	1f 93       	push	r17
    5264:	2f 93       	push	r18
    5266:	3f 93       	push	r19
    5268:	4f 93       	push	r20
    526a:	5f 93       	push	r21
    526c:	6f 93       	push	r22
    526e:	7f 93       	push	r23
    5270:	8f 93       	push	r24
    5272:	9f 93       	push	r25
    5274:	af 93       	push	r26
    5276:	bf 93       	push	r27
    5278:	cf 93       	push	r28
    527a:	df 93       	push	r29
    527c:	ef 93       	push	r30
    527e:	ff 93       	push	r31
    5280:	a0 91 d6 0c 	lds	r26, 0x0CD6
    5284:	b0 91 d7 0c 	lds	r27, 0x0CD7
    5288:	0d b6       	in	r0, 0x3d	; 61
    528a:	0d 92       	st	X+, r0
    528c:	0e b6       	in	r0, 0x3e	; 62
    528e:	0d 92       	st	X+, r0
    5290:	1f 92       	push	r1
    5292:	a0 91 f2 09 	lds	r26, 0x09F2
    5296:	b0 91 f3 09 	lds	r27, 0x09F3
    529a:	1e 90       	ld	r1, -X
    529c:	be bf       	out	0x3e, r27	; 62
    529e:	ad bf       	out	0x3d, r26	; 61
    52a0:	08 95       	ret

000052a2 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    52a2:	1f 92       	push	r1
    52a4:	0f 92       	push	r0
    52a6:	0f b6       	in	r0, 0x3f	; 63
    52a8:	0f 92       	push	r0
    52aa:	11 24       	eor	r1, r1
    52ac:	0b b6       	in	r0, 0x3b	; 59
    52ae:	0f 92       	push	r0
    52b0:	2f 93       	push	r18
    52b2:	3f 93       	push	r19
    52b4:	4f 93       	push	r20
    52b6:	5f 93       	push	r21
    52b8:	6f 93       	push	r22
    52ba:	7f 93       	push	r23
    52bc:	8f 93       	push	r24
    52be:	9f 93       	push	r25
    52c0:	af 93       	push	r26
    52c2:	bf 93       	push	r27
    52c4:	ef 93       	push	r30
    52c6:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    52c8:	e0 91 30 0b 	lds	r30, 0x0B30
    52cc:	f0 91 31 0b 	lds	r31, 0x0B31
    52d0:	30 97       	sbiw	r30, 0x00	; 0
    52d2:	11 f0       	breq	.+4      	; 0x52d8 <__vector_32+0x36>
    52d4:	09 95       	icall
    52d6:	04 c0       	rjmp	.+8      	; 0x52e0 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    52d8:	60 e0       	ldi	r22, 0x00	; 0
    52da:	8a e0       	ldi	r24, 0x0A	; 10
    52dc:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
	return;  	
}
    52e0:	ff 91       	pop	r31
    52e2:	ef 91       	pop	r30
    52e4:	bf 91       	pop	r27
    52e6:	af 91       	pop	r26
    52e8:	9f 91       	pop	r25
    52ea:	8f 91       	pop	r24
    52ec:	7f 91       	pop	r23
    52ee:	6f 91       	pop	r22
    52f0:	5f 91       	pop	r21
    52f2:	4f 91       	pop	r20
    52f4:	3f 91       	pop	r19
    52f6:	2f 91       	pop	r18
    52f8:	0f 90       	pop	r0
    52fa:	0b be       	out	0x3b, r0	; 59
    52fc:	0f 90       	pop	r0
    52fe:	0f be       	out	0x3f, r0	; 63
    5300:	0f 90       	pop	r0
    5302:	1f 90       	pop	r1
    5304:	18 95       	reti

00005306 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    5306:	1f 92       	push	r1
    5308:	0f 92       	push	r0
    530a:	0f b6       	in	r0, 0x3f	; 63
    530c:	0f 92       	push	r0
    530e:	11 24       	eor	r1, r1

	return;  	
} 
    5310:	0f 90       	pop	r0
    5312:	0f be       	out	0x3f, r0	; 63
    5314:	0f 90       	pop	r0
    5316:	1f 90       	pop	r1
    5318:	18 95       	reti

0000531a <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    531a:	04 b6       	in	r0, 0x34	; 52
    531c:	03 fe       	sbrs	r0, 3
    531e:	02 c0       	rjmp	.+4      	; 0x5324 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    5320:	80 e1       	ldi	r24, 0x10	; 16
    5322:	01 c0       	rjmp	.+2      	; 0x5326 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    5324:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    5326:	04 b6       	in	r0, 0x34	; 52
    5328:	02 fe       	sbrs	r0, 2
    532a:	06 c0       	rjmp	.+12     	; 0x5338 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    532c:	94 b7       	in	r25, 0x34	; 52
    532e:	9b 7f       	andi	r25, 0xFB	; 251
    5330:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    5332:	04 b6       	in	r0, 0x34	; 52
    5334:	00 fe       	sbrs	r0, 0
		error|=0x04;
    5336:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    5338:	04 b6       	in	r0, 0x34	; 52
    533a:	01 fe       	sbrs	r0, 1
    533c:	05 c0       	rjmp	.+10     	; 0x5348 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    533e:	94 b7       	in	r25, 0x34	; 52
    5340:	9d 7f       	andi	r25, 0xFD	; 253
    5342:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    5344:	82 60       	ori	r24, 0x02	; 2
    5346:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    5348:	81 11       	cpse	r24, r1
    534a:	0c c0       	rjmp	.+24     	; 0x5364 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    534c:	04 b6       	in	r0, 0x34	; 52
    534e:	00 fe       	sbrs	r0, 0
    5350:	04 c0       	rjmp	.+8      	; 0x535a <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    5352:	94 b7       	in	r25, 0x34	; 52
    5354:	9e 7f       	andi	r25, 0xFE	; 254
    5356:	94 bf       	out	0x34, r25	; 52
    5358:	01 c0       	rjmp	.+2      	; 0x535c <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    535a:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    535c:	90 91 b0 00 	lds	r25, 0x00B0
    5360:	91 11       	cpse	r25, r1
    5362:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    5364:	08 95       	ret

00005366 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    5366:	81 11       	cpse	r24, r1
    5368:	02 c0       	rjmp	.+4      	; 0x536e <nrk_ext_int_enable+0x8>
    536a:	e8 9a       	sbi	0x1d, 0	; 29
    536c:	39 c0       	rjmp	.+114    	; 0x53e0 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    536e:	81 30       	cpi	r24, 0x01	; 1
    5370:	11 f4       	brne	.+4      	; 0x5376 <nrk_ext_int_enable+0x10>
    5372:	e9 9a       	sbi	0x1d, 1	; 29
    5374:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    5376:	82 30       	cpi	r24, 0x02	; 2
    5378:	11 f4       	brne	.+4      	; 0x537e <nrk_ext_int_enable+0x18>
    537a:	ea 9a       	sbi	0x1d, 2	; 29
    537c:	31 c0       	rjmp	.+98     	; 0x53e0 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    537e:	83 30       	cpi	r24, 0x03	; 3
    5380:	21 f4       	brne	.+8      	; 0x538a <nrk_ext_int_enable+0x24>
    5382:	80 91 6b 00 	lds	r24, 0x006B
    5386:	81 60       	ori	r24, 0x01	; 1
    5388:	29 c0       	rjmp	.+82     	; 0x53dc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    538a:	84 30       	cpi	r24, 0x04	; 4
    538c:	21 f4       	brne	.+8      	; 0x5396 <nrk_ext_int_enable+0x30>
    538e:	80 91 6b 00 	lds	r24, 0x006B
    5392:	82 60       	ori	r24, 0x02	; 2
    5394:	23 c0       	rjmp	.+70     	; 0x53dc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    5396:	85 30       	cpi	r24, 0x05	; 5
    5398:	21 f4       	brne	.+8      	; 0x53a2 <nrk_ext_int_enable+0x3c>
    539a:	80 91 6b 00 	lds	r24, 0x006B
    539e:	84 60       	ori	r24, 0x04	; 4
    53a0:	1d c0       	rjmp	.+58     	; 0x53dc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    53a2:	86 30       	cpi	r24, 0x06	; 6
    53a4:	21 f4       	brne	.+8      	; 0x53ae <nrk_ext_int_enable+0x48>
    53a6:	80 91 6b 00 	lds	r24, 0x006B
    53aa:	88 60       	ori	r24, 0x08	; 8
    53ac:	17 c0       	rjmp	.+46     	; 0x53dc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    53ae:	87 30       	cpi	r24, 0x07	; 7
    53b0:	21 f4       	brne	.+8      	; 0x53ba <nrk_ext_int_enable+0x54>
    53b2:	80 91 6b 00 	lds	r24, 0x006B
    53b6:	80 61       	ori	r24, 0x10	; 16
    53b8:	11 c0       	rjmp	.+34     	; 0x53dc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    53ba:	88 30       	cpi	r24, 0x08	; 8
    53bc:	21 f4       	brne	.+8      	; 0x53c6 <nrk_ext_int_enable+0x60>
    53be:	80 91 6b 00 	lds	r24, 0x006B
    53c2:	80 62       	ori	r24, 0x20	; 32
    53c4:	0b c0       	rjmp	.+22     	; 0x53dc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    53c6:	89 30       	cpi	r24, 0x09	; 9
    53c8:	21 f4       	brne	.+8      	; 0x53d2 <nrk_ext_int_enable+0x6c>
    53ca:	80 91 6b 00 	lds	r24, 0x006B
    53ce:	80 64       	ori	r24, 0x40	; 64
    53d0:	05 c0       	rjmp	.+10     	; 0x53dc <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    53d2:	8a 30       	cpi	r24, 0x0A	; 10
    53d4:	39 f4       	brne	.+14     	; 0x53e4 <nrk_ext_int_enable+0x7e>
    53d6:	80 91 6b 00 	lds	r24, 0x006B
    53da:	80 68       	ori	r24, 0x80	; 128
    53dc:	80 93 6b 00 	sts	0x006B, r24
    53e0:	81 e0       	ldi	r24, 0x01	; 1
    53e2:	08 95       	ret
return NRK_ERROR;
    53e4:	8f ef       	ldi	r24, 0xFF	; 255
}
    53e6:	08 95       	ret

000053e8 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    53e8:	81 11       	cpse	r24, r1
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <nrk_ext_int_disable+0x8>
    53ec:	e8 98       	cbi	0x1d, 0	; 29
    53ee:	39 c0       	rjmp	.+114    	; 0x5462 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    53f0:	81 30       	cpi	r24, 0x01	; 1
    53f2:	11 f4       	brne	.+4      	; 0x53f8 <nrk_ext_int_disable+0x10>
    53f4:	e9 98       	cbi	0x1d, 1	; 29
    53f6:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    53f8:	82 30       	cpi	r24, 0x02	; 2
    53fa:	11 f4       	brne	.+4      	; 0x5400 <nrk_ext_int_disable+0x18>
    53fc:	e9 98       	cbi	0x1d, 1	; 29
    53fe:	31 c0       	rjmp	.+98     	; 0x5462 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    5400:	83 30       	cpi	r24, 0x03	; 3
    5402:	21 f4       	brne	.+8      	; 0x540c <nrk_ext_int_disable+0x24>
    5404:	80 91 6b 00 	lds	r24, 0x006B
    5408:	8e 7f       	andi	r24, 0xFE	; 254
    540a:	29 c0       	rjmp	.+82     	; 0x545e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    540c:	84 30       	cpi	r24, 0x04	; 4
    540e:	21 f4       	brne	.+8      	; 0x5418 <nrk_ext_int_disable+0x30>
    5410:	80 91 6b 00 	lds	r24, 0x006B
    5414:	8d 7f       	andi	r24, 0xFD	; 253
    5416:	23 c0       	rjmp	.+70     	; 0x545e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    5418:	85 30       	cpi	r24, 0x05	; 5
    541a:	21 f4       	brne	.+8      	; 0x5424 <nrk_ext_int_disable+0x3c>
    541c:	80 91 6b 00 	lds	r24, 0x006B
    5420:	8b 7f       	andi	r24, 0xFB	; 251
    5422:	1d c0       	rjmp	.+58     	; 0x545e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    5424:	86 30       	cpi	r24, 0x06	; 6
    5426:	21 f4       	brne	.+8      	; 0x5430 <nrk_ext_int_disable+0x48>
    5428:	80 91 6b 00 	lds	r24, 0x006B
    542c:	87 7f       	andi	r24, 0xF7	; 247
    542e:	17 c0       	rjmp	.+46     	; 0x545e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    5430:	87 30       	cpi	r24, 0x07	; 7
    5432:	21 f4       	brne	.+8      	; 0x543c <nrk_ext_int_disable+0x54>
    5434:	80 91 6b 00 	lds	r24, 0x006B
    5438:	8f 7e       	andi	r24, 0xEF	; 239
    543a:	11 c0       	rjmp	.+34     	; 0x545e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    543c:	88 30       	cpi	r24, 0x08	; 8
    543e:	21 f4       	brne	.+8      	; 0x5448 <nrk_ext_int_disable+0x60>
    5440:	80 91 6b 00 	lds	r24, 0x006B
    5444:	8f 7d       	andi	r24, 0xDF	; 223
    5446:	0b c0       	rjmp	.+22     	; 0x545e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    5448:	89 30       	cpi	r24, 0x09	; 9
    544a:	21 f4       	brne	.+8      	; 0x5454 <nrk_ext_int_disable+0x6c>
    544c:	80 91 6b 00 	lds	r24, 0x006B
    5450:	8f 7b       	andi	r24, 0xBF	; 191
    5452:	05 c0       	rjmp	.+10     	; 0x545e <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    5454:	8a 30       	cpi	r24, 0x0A	; 10
    5456:	39 f4       	brne	.+14     	; 0x5466 <nrk_ext_int_disable+0x7e>
    5458:	80 91 6b 00 	lds	r24, 0x006B
    545c:	8f 77       	andi	r24, 0x7F	; 127
    545e:	80 93 6b 00 	sts	0x006B, r24
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	08 95       	ret
return NRK_ERROR;
    5466:	8f ef       	ldi	r24, 0xFF	; 255
}
    5468:	08 95       	ret

0000546a <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    546a:	81 11       	cpse	r24, r1
    546c:	26 c0       	rjmp	.+76     	; 0x54ba <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    546e:	50 93 05 0d 	sts	0x0D05, r21
    5472:	40 93 04 0d 	sts	0x0D04, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    5476:	61 11       	cpse	r22, r1
    5478:	04 c0       	rjmp	.+8      	; 0x5482 <nrk_ext_int_configure+0x18>
    547a:	80 91 69 00 	lds	r24, 0x0069
    547e:	8c 7f       	andi	r24, 0xFC	; 252
    5480:	3d c0       	rjmp	.+122    	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5482:	61 30       	cpi	r22, 0x01	; 1
    5484:	49 f4       	brne	.+18     	; 0x5498 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    5486:	80 91 69 00 	lds	r24, 0x0069
    548a:	8d 7f       	andi	r24, 0xFD	; 253
    548c:	80 93 69 00 	sts	0x0069, r24
    5490:	80 91 69 00 	lds	r24, 0x0069
    5494:	81 60       	ori	r24, 0x01	; 1
    5496:	32 c0       	rjmp	.+100    	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5498:	62 30       	cpi	r22, 0x02	; 2
    549a:	49 f4       	brne	.+18     	; 0x54ae <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    549c:	80 91 69 00 	lds	r24, 0x0069
    54a0:	82 60       	ori	r24, 0x02	; 2
    54a2:	80 93 69 00 	sts	0x0069, r24
    54a6:	80 91 69 00 	lds	r24, 0x0069
    54aa:	8e 7f       	andi	r24, 0xFE	; 254
    54ac:	27 c0       	rjmp	.+78     	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    54ae:	63 30       	cpi	r22, 0x03	; 3
    54b0:	39 f5       	brne	.+78     	; 0x5500 <nrk_ext_int_configure+0x96>
    54b2:	80 91 69 00 	lds	r24, 0x0069
    54b6:	83 60       	ori	r24, 0x03	; 3
    54b8:	21 c0       	rjmp	.+66     	; 0x54fc <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    54ba:	81 30       	cpi	r24, 0x01	; 1
    54bc:	49 f5       	brne	.+82     	; 0x5510 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    54be:	50 93 03 0d 	sts	0x0D03, r21
    54c2:	40 93 02 0d 	sts	0x0D02, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    54c6:	61 11       	cpse	r22, r1
    54c8:	04 c0       	rjmp	.+8      	; 0x54d2 <nrk_ext_int_configure+0x68>
    54ca:	80 91 69 00 	lds	r24, 0x0069
    54ce:	83 7f       	andi	r24, 0xF3	; 243
    54d0:	15 c0       	rjmp	.+42     	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    54d2:	61 30       	cpi	r22, 0x01	; 1
    54d4:	49 f4       	brne	.+18     	; 0x54e8 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    54d6:	80 91 69 00 	lds	r24, 0x0069
    54da:	87 7f       	andi	r24, 0xF7	; 247
    54dc:	80 93 69 00 	sts	0x0069, r24
    54e0:	80 91 69 00 	lds	r24, 0x0069
    54e4:	84 60       	ori	r24, 0x04	; 4
    54e6:	0a c0       	rjmp	.+20     	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    54e8:	62 30       	cpi	r22, 0x02	; 2
    54ea:	61 f4       	brne	.+24     	; 0x5504 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    54ec:	80 91 69 00 	lds	r24, 0x0069
    54f0:	88 60       	ori	r24, 0x08	; 8
    54f2:	80 93 69 00 	sts	0x0069, r24
    54f6:	80 91 69 00 	lds	r24, 0x0069
    54fa:	8b 7f       	andi	r24, 0xFB	; 251
    54fc:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    5500:	81 e0       	ldi	r24, 0x01	; 1
    5502:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    5504:	63 30       	cpi	r22, 0x03	; 3
    5506:	e1 f7       	brne	.-8      	; 0x5500 <nrk_ext_int_configure+0x96>
    5508:	80 91 69 00 	lds	r24, 0x0069
    550c:	8c 60       	ori	r24, 0x0C	; 12
    550e:	f6 cf       	rjmp	.-20     	; 0x54fc <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    5510:	82 30       	cpi	r24, 0x02	; 2
    5512:	31 f5       	brne	.+76     	; 0x5560 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    5514:	50 93 07 0d 	sts	0x0D07, r21
    5518:	40 93 06 0d 	sts	0x0D06, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    551c:	61 11       	cpse	r22, r1
    551e:	04 c0       	rjmp	.+8      	; 0x5528 <nrk_ext_int_configure+0xbe>
    5520:	80 91 69 00 	lds	r24, 0x0069
    5524:	8f 7c       	andi	r24, 0xCF	; 207
    5526:	ea cf       	rjmp	.-44     	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5528:	61 30       	cpi	r22, 0x01	; 1
    552a:	49 f4       	brne	.+18     	; 0x553e <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    552c:	80 91 69 00 	lds	r24, 0x0069
    5530:	8f 7d       	andi	r24, 0xDF	; 223
    5532:	80 93 69 00 	sts	0x0069, r24
    5536:	80 91 69 00 	lds	r24, 0x0069
    553a:	80 61       	ori	r24, 0x10	; 16
    553c:	df cf       	rjmp	.-66     	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    553e:	62 30       	cpi	r22, 0x02	; 2
    5540:	49 f4       	brne	.+18     	; 0x5554 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5542:	80 91 69 00 	lds	r24, 0x0069
    5546:	80 62       	ori	r24, 0x20	; 32
    5548:	80 93 69 00 	sts	0x0069, r24
    554c:	80 91 69 00 	lds	r24, 0x0069
    5550:	8f 7e       	andi	r24, 0xEF	; 239
    5552:	d4 cf       	rjmp	.-88     	; 0x54fc <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5554:	63 30       	cpi	r22, 0x03	; 3
    5556:	a1 f6       	brne	.-88     	; 0x5500 <nrk_ext_int_configure+0x96>
    5558:	80 91 69 00 	lds	r24, 0x0069
    555c:	80 63       	ori	r24, 0x30	; 48
    555e:	ce cf       	rjmp	.-100    	; 0x54fc <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    5560:	83 50       	subi	r24, 0x03	; 3
    5562:	88 30       	cpi	r24, 0x08	; 8
    5564:	50 f4       	brcc	.+20     	; 0x557a <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5566:	80 91 68 00 	lds	r24, 0x0068
    556a:	81 60       	ori	r24, 0x01	; 1
    556c:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    5570:	50 93 09 0d 	sts	0x0D09, r21
    5574:	40 93 08 0d 	sts	0x0D08, r20
    5578:	c3 cf       	rjmp	.-122    	; 0x5500 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    557a:	8f ef       	ldi	r24, 0xFF	; 255
}
    557c:	08 95       	ret

0000557e <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    557e:	1f 92       	push	r1
    5580:	0f 92       	push	r0
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	0f 92       	push	r0
    5586:	11 24       	eor	r1, r1
    5588:	0b b6       	in	r0, 0x3b	; 59
    558a:	0f 92       	push	r0
    558c:	2f 93       	push	r18
    558e:	3f 93       	push	r19
    5590:	4f 93       	push	r20
    5592:	5f 93       	push	r21
    5594:	6f 93       	push	r22
    5596:	7f 93       	push	r23
    5598:	8f 93       	push	r24
    559a:	9f 93       	push	r25
    559c:	af 93       	push	r26
    559e:	bf 93       	push	r27
    55a0:	ef 93       	push	r30
    55a2:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    55a4:	e0 91 08 0d 	lds	r30, 0x0D08
    55a8:	f0 91 09 0d 	lds	r31, 0x0D09
    55ac:	30 97       	sbiw	r30, 0x00	; 0
    55ae:	11 f0       	breq	.+4      	; 0x55b4 <__vector_9+0x36>
    55b0:	09 95       	icall
    55b2:	04 c0       	rjmp	.+8      	; 0x55bc <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    55b4:	60 e0       	ldi	r22, 0x00	; 0
    55b6:	8a e0       	ldi	r24, 0x0A	; 10
    55b8:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
	return;  	
}
    55bc:	ff 91       	pop	r31
    55be:	ef 91       	pop	r30
    55c0:	bf 91       	pop	r27
    55c2:	af 91       	pop	r26
    55c4:	9f 91       	pop	r25
    55c6:	8f 91       	pop	r24
    55c8:	7f 91       	pop	r23
    55ca:	6f 91       	pop	r22
    55cc:	5f 91       	pop	r21
    55ce:	4f 91       	pop	r20
    55d0:	3f 91       	pop	r19
    55d2:	2f 91       	pop	r18
    55d4:	0f 90       	pop	r0
    55d6:	0b be       	out	0x3b, r0	; 59
    55d8:	0f 90       	pop	r0
    55da:	0f be       	out	0x3f, r0	; 63
    55dc:	0f 90       	pop	r0
    55de:	1f 90       	pop	r1
    55e0:	18 95       	reti

000055e2 <__vector_1>:


SIGNAL(INT0_vect) {
    55e2:	1f 92       	push	r1
    55e4:	0f 92       	push	r0
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	0f 92       	push	r0
    55ea:	11 24       	eor	r1, r1
    55ec:	0b b6       	in	r0, 0x3b	; 59
    55ee:	0f 92       	push	r0
    55f0:	2f 93       	push	r18
    55f2:	3f 93       	push	r19
    55f4:	4f 93       	push	r20
    55f6:	5f 93       	push	r21
    55f8:	6f 93       	push	r22
    55fa:	7f 93       	push	r23
    55fc:	8f 93       	push	r24
    55fe:	9f 93       	push	r25
    5600:	af 93       	push	r26
    5602:	bf 93       	push	r27
    5604:	ef 93       	push	r30
    5606:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5608:	e0 91 04 0d 	lds	r30, 0x0D04
    560c:	f0 91 05 0d 	lds	r31, 0x0D05
    5610:	30 97       	sbiw	r30, 0x00	; 0
    5612:	11 f0       	breq	.+4      	; 0x5618 <__vector_1+0x36>
    5614:	09 95       	icall
    5616:	04 c0       	rjmp	.+8      	; 0x5620 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5618:	60 e0       	ldi	r22, 0x00	; 0
    561a:	8a e0       	ldi	r24, 0x0A	; 10
    561c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
	return;  	
}
    5620:	ff 91       	pop	r31
    5622:	ef 91       	pop	r30
    5624:	bf 91       	pop	r27
    5626:	af 91       	pop	r26
    5628:	9f 91       	pop	r25
    562a:	8f 91       	pop	r24
    562c:	7f 91       	pop	r23
    562e:	6f 91       	pop	r22
    5630:	5f 91       	pop	r21
    5632:	4f 91       	pop	r20
    5634:	3f 91       	pop	r19
    5636:	2f 91       	pop	r18
    5638:	0f 90       	pop	r0
    563a:	0b be       	out	0x3b, r0	; 59
    563c:	0f 90       	pop	r0
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	0f 90       	pop	r0
    5642:	1f 90       	pop	r1
    5644:	18 95       	reti

00005646 <__vector_2>:

SIGNAL(INT1_vect) {
    5646:	1f 92       	push	r1
    5648:	0f 92       	push	r0
    564a:	0f b6       	in	r0, 0x3f	; 63
    564c:	0f 92       	push	r0
    564e:	11 24       	eor	r1, r1
    5650:	0b b6       	in	r0, 0x3b	; 59
    5652:	0f 92       	push	r0
    5654:	2f 93       	push	r18
    5656:	3f 93       	push	r19
    5658:	4f 93       	push	r20
    565a:	5f 93       	push	r21
    565c:	6f 93       	push	r22
    565e:	7f 93       	push	r23
    5660:	8f 93       	push	r24
    5662:	9f 93       	push	r25
    5664:	af 93       	push	r26
    5666:	bf 93       	push	r27
    5668:	ef 93       	push	r30
    566a:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    566c:	e0 91 02 0d 	lds	r30, 0x0D02
    5670:	f0 91 03 0d 	lds	r31, 0x0D03
    5674:	30 97       	sbiw	r30, 0x00	; 0
    5676:	11 f0       	breq	.+4      	; 0x567c <__vector_2+0x36>
    5678:	09 95       	icall
    567a:	04 c0       	rjmp	.+8      	; 0x5684 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    567c:	60 e0       	ldi	r22, 0x00	; 0
    567e:	8a e0       	ldi	r24, 0x0A	; 10
    5680:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
	return;  	
}
    5684:	ff 91       	pop	r31
    5686:	ef 91       	pop	r30
    5688:	bf 91       	pop	r27
    568a:	af 91       	pop	r26
    568c:	9f 91       	pop	r25
    568e:	8f 91       	pop	r24
    5690:	7f 91       	pop	r23
    5692:	6f 91       	pop	r22
    5694:	5f 91       	pop	r21
    5696:	4f 91       	pop	r20
    5698:	3f 91       	pop	r19
    569a:	2f 91       	pop	r18
    569c:	0f 90       	pop	r0
    569e:	0b be       	out	0x3b, r0	; 59
    56a0:	0f 90       	pop	r0
    56a2:	0f be       	out	0x3f, r0	; 63
    56a4:	0f 90       	pop	r0
    56a6:	1f 90       	pop	r1
    56a8:	18 95       	reti

000056aa <__vector_3>:

SIGNAL(INT2_vect) {
    56aa:	1f 92       	push	r1
    56ac:	0f 92       	push	r0
    56ae:	0f b6       	in	r0, 0x3f	; 63
    56b0:	0f 92       	push	r0
    56b2:	11 24       	eor	r1, r1
    56b4:	0b b6       	in	r0, 0x3b	; 59
    56b6:	0f 92       	push	r0
    56b8:	2f 93       	push	r18
    56ba:	3f 93       	push	r19
    56bc:	4f 93       	push	r20
    56be:	5f 93       	push	r21
    56c0:	6f 93       	push	r22
    56c2:	7f 93       	push	r23
    56c4:	8f 93       	push	r24
    56c6:	9f 93       	push	r25
    56c8:	af 93       	push	r26
    56ca:	bf 93       	push	r27
    56cc:	ef 93       	push	r30
    56ce:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    56d0:	e0 91 06 0d 	lds	r30, 0x0D06
    56d4:	f0 91 07 0d 	lds	r31, 0x0D07
    56d8:	30 97       	sbiw	r30, 0x00	; 0
    56da:	11 f0       	breq	.+4      	; 0x56e0 <__vector_3+0x36>
    56dc:	09 95       	icall
    56de:	04 c0       	rjmp	.+8      	; 0x56e8 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    56e0:	60 e0       	ldi	r22, 0x00	; 0
    56e2:	8a e0       	ldi	r24, 0x0A	; 10
    56e4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <nrk_kernel_error_add>
	return;  	
}
    56e8:	ff 91       	pop	r31
    56ea:	ef 91       	pop	r30
    56ec:	bf 91       	pop	r27
    56ee:	af 91       	pop	r26
    56f0:	9f 91       	pop	r25
    56f2:	8f 91       	pop	r24
    56f4:	7f 91       	pop	r23
    56f6:	6f 91       	pop	r22
    56f8:	5f 91       	pop	r21
    56fa:	4f 91       	pop	r20
    56fc:	3f 91       	pop	r19
    56fe:	2f 91       	pop	r18
    5700:	0f 90       	pop	r0
    5702:	0b be       	out	0x3b, r0	; 59
    5704:	0f 90       	pop	r0
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	0f 90       	pop	r0
    570a:	1f 90       	pop	r1
    570c:	18 95       	reti

0000570e <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    570e:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5712:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5714:	84 b7       	in	r24, 0x34	; 52
    5716:	87 7f       	andi	r24, 0xF7	; 247
    5718:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    571a:	e0 e6       	ldi	r30, 0x60	; 96
    571c:	f0 e0       	ldi	r31, 0x00	; 0
    571e:	80 81       	ld	r24, Z
    5720:	88 61       	ori	r24, 0x18	; 24
    5722:	80 83       	st	Z, r24
WDTCSR = 0;
    5724:	10 82       	st	Z, r1
nrk_int_enable();
    5726:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <nrk_int_enable>

0000572a <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    572a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    572e:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    5730:	84 b7       	in	r24, 0x34	; 52
    5732:	87 7f       	andi	r24, 0xF7	; 247
    5734:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5736:	e0 e6       	ldi	r30, 0x60	; 96
    5738:	f0 e0       	ldi	r31, 0x00	; 0
    573a:	80 81       	ld	r24, Z
    573c:	88 61       	ori	r24, 0x18	; 24
    573e:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    5740:	8d e0       	ldi	r24, 0x0D	; 13
    5742:	80 83       	st	Z, r24
nrk_int_enable();
    5744:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <nrk_int_enable>

00005748 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5748:	04 b6       	in	r0, 0x34	; 52
    574a:	03 fe       	sbrs	r0, 3
    574c:	02 c0       	rjmp	.+4      	; 0x5752 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    574e:	8f ef       	ldi	r24, 0xFF	; 255
    5750:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5752:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    5754:	08 95       	ret

00005756 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5756:	a8 95       	wdr
    5758:	08 95       	ret

0000575a <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    575a:	08 95       	ret

0000575c <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    575c:	83 b7       	in	r24, 0x33	; 51
    575e:	81 7f       	andi	r24, 0xF1	; 241
    5760:	86 60       	ori	r24, 0x06	; 6
    5762:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5764:	83 b7       	in	r24, 0x33	; 51
    5766:	81 60       	ori	r24, 0x01	; 1
    5768:	83 bf       	out	0x33, r24	; 51
    576a:	88 95       	sleep
    576c:	83 b7       	in	r24, 0x33	; 51
    576e:	8e 7f       	andi	r24, 0xFE	; 254
    5770:	83 bf       	out	0x33, r24	; 51
    5772:	08 95       	ret

00005774 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5774:	83 b7       	in	r24, 0x33	; 51
    5776:	81 7f       	andi	r24, 0xF1	; 241
    5778:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    577a:	83 b7       	in	r24, 0x33	; 51
    577c:	81 60       	ori	r24, 0x01	; 1
    577e:	83 bf       	out	0x33, r24	; 51
    5780:	88 95       	sleep
    5782:	83 b7       	in	r24, 0x33	; 51
    5784:	8e 7f       	andi	r24, 0xFE	; 254
    5786:	83 bf       	out	0x33, r24	; 51
    5788:	08 95       	ret

0000578a <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    578a:	fc 01       	movw	r30, r24
    578c:	76 83       	std	Z+6, r23	; 0x06
    578e:	65 83       	std	Z+5, r22	; 0x05
    5790:	08 95       	ret

00005792 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    5792:	ef 92       	push	r14
    5794:	ff 92       	push	r15
    5796:	0f 93       	push	r16
    5798:	1f 93       	push	r17
    579a:	cf 93       	push	r28
    579c:	df 93       	push	r29
    579e:	8c 01       	movw	r16, r24
    57a0:	7b 01       	movw	r14, r22
    57a2:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    57a4:	40 32       	cpi	r20, 0x20	; 32
    57a6:	51 05       	cpc	r21, r1
    57a8:	18 f4       	brcc	.+6      	; 0x57b0 <nrk_task_set_stk+0x1e>
    57aa:	81 e1       	ldi	r24, 0x11	; 17
    57ac:	0e 94 48 1a 	call	0x3490	; 0x3490 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    57b0:	21 97       	sbiw	r28, 0x01	; 1
    57b2:	ce 0d       	add	r28, r14
    57b4:	df 1d       	adc	r29, r15
    57b6:	f8 01       	movw	r30, r16
    57b8:	d2 83       	std	Z+2, r29	; 0x02
    57ba:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    57bc:	f4 82       	std	Z+4, r15	; 0x04
    57be:	e3 82       	std	Z+3, r14	; 0x03

}
    57c0:	df 91       	pop	r29
    57c2:	cf 91       	pop	r28
    57c4:	1f 91       	pop	r17
    57c6:	0f 91       	pop	r16
    57c8:	ff 90       	pop	r15
    57ca:	ef 90       	pop	r14
    57cc:	08 95       	ret

000057ce <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    57ce:	25 e5       	ldi	r18, 0x55	; 85
    57d0:	fa 01       	movw	r30, r20
    57d2:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    57d4:	fb 01       	movw	r30, r22
    57d6:	32 97       	sbiw	r30, 0x02	; 2
    57d8:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    57da:	31 96       	adiw	r30, 0x01	; 1
    57dc:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    57de:	33 97       	sbiw	r30, 0x03	; 3
    57e0:	11 82       	std	Z+1, r1	; 0x01
    57e2:	10 82       	st	Z, r1
    *(--stk) = 0;       
    57e4:	32 97       	sbiw	r30, 0x02	; 2
    57e6:	11 82       	std	Z+1, r1	; 0x01
    57e8:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    57ea:	32 97       	sbiw	r30, 0x02	; 2
    57ec:	11 82       	std	Z+1, r1	; 0x01
    57ee:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    57f0:	32 97       	sbiw	r30, 0x02	; 2
    57f2:	11 82       	std	Z+1, r1	; 0x01
    57f4:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    57f6:	32 97       	sbiw	r30, 0x02	; 2
    57f8:	11 82       	std	Z+1, r1	; 0x01
    57fa:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    57fc:	32 97       	sbiw	r30, 0x02	; 2
    57fe:	11 82       	std	Z+1, r1	; 0x01
    5800:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5802:	32 97       	sbiw	r30, 0x02	; 2
    5804:	11 82       	std	Z+1, r1	; 0x01
    5806:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5808:	32 97       	sbiw	r30, 0x02	; 2
    580a:	11 82       	std	Z+1, r1	; 0x01
    580c:	10 82       	st	Z, r1

    *(--stk) = 0; 
    580e:	32 97       	sbiw	r30, 0x02	; 2
    5810:	11 82       	std	Z+1, r1	; 0x01
    5812:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5814:	32 97       	sbiw	r30, 0x02	; 2
    5816:	11 82       	std	Z+1, r1	; 0x01
    5818:	10 82       	st	Z, r1
    *(--stk) = 0; 
    581a:	32 97       	sbiw	r30, 0x02	; 2
    581c:	11 82       	std	Z+1, r1	; 0x01
    581e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5820:	32 97       	sbiw	r30, 0x02	; 2
    5822:	11 82       	std	Z+1, r1	; 0x01
    5824:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5826:	32 97       	sbiw	r30, 0x02	; 2
    5828:	11 82       	std	Z+1, r1	; 0x01
    582a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    582c:	32 97       	sbiw	r30, 0x02	; 2
    582e:	11 82       	std	Z+1, r1	; 0x01
    5830:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5832:	32 97       	sbiw	r30, 0x02	; 2
    5834:	11 82       	std	Z+1, r1	; 0x01
    5836:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5838:	32 97       	sbiw	r30, 0x02	; 2
    583a:	11 82       	std	Z+1, r1	; 0x01
    583c:	10 82       	st	Z, r1
    *(--stk) = 0;
    583e:	cb 01       	movw	r24, r22
    5840:	84 97       	sbiw	r24, 0x24	; 36
    5842:	fc 01       	movw	r30, r24
    5844:	11 82       	std	Z+1, r1	; 0x01
    5846:	10 82       	st	Z, r1


    return ((void *)stk);
}
    5848:	08 95       	ret

0000584a <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    584a:	85 e5       	ldi	r24, 0x55	; 85
    584c:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5850:	ee ef       	ldi	r30, 0xFE	; 254
    5852:	f1 e4       	ldi	r31, 0x41	; 65
    5854:	f0 93 f3 09 	sts	0x09F3, r31
    5858:	e0 93 f2 09 	sts	0x09F2, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    585c:	80 ea       	ldi	r24, 0xA0	; 160
    585e:	99 e1       	ldi	r25, 0x19	; 25
    5860:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5862:	80 93 ff 41 	sts	0x41FF, r24
    5866:	08 95       	ret

00005868 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    5868:	80 ea       	ldi	r24, 0xA0	; 160
    586a:	99 e1       	ldi	r25, 0x19	; 25
    586c:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5870:	80 93 ff 41 	sts	0x41FF, r24
    5874:	08 95       	ret

00005876 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5876:	0e 94 68 28 	call	0x50d0	; 0x50d0 <_nrk_setup_timer>
  nrk_int_enable();  
    587a:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <nrk_int_enable>

0000587e <nrk_start_high_ready_task>:
    587e:	a0 91 c7 0c 	lds	r26, 0x0CC7
    5882:	b0 91 c8 0c 	lds	r27, 0x0CC8
    5886:	cd 91       	ld	r28, X+
    5888:	cd bf       	out	0x3d, r28	; 61
    588a:	dd 91       	ld	r29, X+
    588c:	de bf       	out	0x3e, r29	; 62
    588e:	ff 91       	pop	r31
    5890:	ef 91       	pop	r30
    5892:	df 91       	pop	r29
    5894:	cf 91       	pop	r28
    5896:	bf 91       	pop	r27
    5898:	af 91       	pop	r26
    589a:	9f 91       	pop	r25
    589c:	8f 91       	pop	r24
    589e:	7f 91       	pop	r23
    58a0:	6f 91       	pop	r22
    58a2:	5f 91       	pop	r21
    58a4:	4f 91       	pop	r20
    58a6:	3f 91       	pop	r19
    58a8:	2f 91       	pop	r18
    58aa:	1f 91       	pop	r17
    58ac:	0f 91       	pop	r16
    58ae:	ff 90       	pop	r15
    58b0:	ef 90       	pop	r14
    58b2:	df 90       	pop	r13
    58b4:	cf 90       	pop	r12
    58b6:	bf 90       	pop	r11
    58b8:	af 90       	pop	r10
    58ba:	9f 90       	pop	r9
    58bc:	8f 90       	pop	r8
    58be:	7f 90       	pop	r7
    58c0:	6f 90       	pop	r6
    58c2:	5f 90       	pop	r5
    58c4:	4f 90       	pop	r4
    58c6:	3f 90       	pop	r3
    58c8:	2f 90       	pop	r2
    58ca:	1f 90       	pop	r1
    58cc:	0f 90       	pop	r0
    58ce:	0f be       	out	0x3f, r0	; 63
    58d0:	0f 90       	pop	r0
    58d2:	18 95       	reti

000058d4 <main>:
packet tx_packet;
uint16_t seq_num = 0;

int main ()
{
  nrk_setup_ports ();
    58d4:	0e 94 9e 13 	call	0x273c	; 0x273c <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
    58d8:	80 e1       	ldi	r24, 0x10	; 16
    58da:	90 e0       	ldi	r25, 0x00	; 0
    58dc:	0e 94 14 17 	call	0x2e28	; 0x2e28 <nrk_setup_uart>

  nrk_init ();
    58e0:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <nrk_init>

  nrk_led_clr(0);
    58e4:	80 e0       	ldi	r24, 0x00	; 0
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
  nrk_led_clr(1);
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
  nrk_led_clr(2);
    58f4:	82 e0       	ldi	r24, 0x02	; 2
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
  nrk_led_clr(3);
    58fc:	83 e0       	ldi	r24, 0x03	; 3
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <nrk_led_clr>
  
  nrk_time_set(0, 0);
    5904:	20 e0       	ldi	r18, 0x00	; 0
    5906:	30 e0       	ldi	r19, 0x00	; 0
    5908:	a9 01       	movw	r20, r18
    590a:	60 e0       	ldi	r22, 0x00	; 0
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	cb 01       	movw	r24, r22
    5910:	0e 94 df 23 	call	0x47be	; 0x47be <nrk_time_set>
  
  print_enable = 1;
    5914:	81 e0       	ldi	r24, 0x01	; 1
    5916:	80 93 7a 06 	sts	0x067A, r24

  bmac_init(13);
    591a:	8d e0       	ldi	r24, 0x0D	; 13
    591c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <bmac_init>
  bmac_task_config();
    5920:	0e 94 9c 08 	call	0x1138	; 0x1138 <bmac_task_config>
  nrk_create_taskset();
    5924:	0e 94 17 04 	call	0x82e	; 0x82e <nrk_create_taskset>
  nrk_start();
    5928:	0e 94 a9 18 	call	0x3152	; 0x3152 <nrk_start>
  
  return 0;
}
    592c:	80 e0       	ldi	r24, 0x00	; 0
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	08 95       	ret

00005932 <vfprintf>:
    5932:	6f 92       	push	r6
    5934:	7f 92       	push	r7
    5936:	8f 92       	push	r8
    5938:	9f 92       	push	r9
    593a:	af 92       	push	r10
    593c:	bf 92       	push	r11
    593e:	cf 92       	push	r12
    5940:	df 92       	push	r13
    5942:	ef 92       	push	r14
    5944:	ff 92       	push	r15
    5946:	0f 93       	push	r16
    5948:	1f 93       	push	r17
    594a:	cf 93       	push	r28
    594c:	df 93       	push	r29
    594e:	cd b7       	in	r28, 0x3d	; 61
    5950:	de b7       	in	r29, 0x3e	; 62
    5952:	2c 97       	sbiw	r28, 0x0c	; 12
    5954:	0f b6       	in	r0, 0x3f	; 63
    5956:	f8 94       	cli
    5958:	de bf       	out	0x3e, r29	; 62
    595a:	0f be       	out	0x3f, r0	; 63
    595c:	cd bf       	out	0x3d, r28	; 61
    595e:	6c 01       	movw	r12, r24
    5960:	5b 01       	movw	r10, r22
    5962:	7a 01       	movw	r14, r20
    5964:	fc 01       	movw	r30, r24
    5966:	17 82       	std	Z+7, r1	; 0x07
    5968:	16 82       	std	Z+6, r1	; 0x06
    596a:	83 81       	ldd	r24, Z+3	; 0x03
    596c:	81 ff       	sbrs	r24, 1
    596e:	0e c1       	rjmp	.+540    	; 0x5b8c <vfprintf+0x25a>
    5970:	ce 01       	movw	r24, r28
    5972:	01 96       	adiw	r24, 0x01	; 1
    5974:	4c 01       	movw	r8, r24
    5976:	f6 01       	movw	r30, r12
    5978:	03 81       	ldd	r16, Z+3	; 0x03
    597a:	f5 01       	movw	r30, r10
    597c:	03 fd       	sbrc	r16, 3
    597e:	15 91       	lpm	r17, Z+
    5980:	03 ff       	sbrs	r16, 3
    5982:	11 91       	ld	r17, Z+
    5984:	5f 01       	movw	r10, r30
    5986:	11 23       	and	r17, r17
    5988:	09 f4       	brne	.+2      	; 0x598c <vfprintf+0x5a>
    598a:	fc c0       	rjmp	.+504    	; 0x5b84 <vfprintf+0x252>
    598c:	15 32       	cpi	r17, 0x25	; 37
    598e:	49 f4       	brne	.+18     	; 0x59a2 <vfprintf+0x70>
    5990:	03 fd       	sbrc	r16, 3
    5992:	15 91       	lpm	r17, Z+
    5994:	03 ff       	sbrs	r16, 3
    5996:	11 91       	ld	r17, Z+
    5998:	5f 01       	movw	r10, r30
    599a:	15 32       	cpi	r17, 0x25	; 37
    599c:	11 f0       	breq	.+4      	; 0x59a2 <vfprintf+0x70>
    599e:	20 e0       	ldi	r18, 0x00	; 0
    59a0:	1b c0       	rjmp	.+54     	; 0x59d8 <vfprintf+0xa6>
    59a2:	b6 01       	movw	r22, r12
    59a4:	81 2f       	mov	r24, r17
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    59ac:	37 01       	movw	r6, r14
    59ae:	73 01       	movw	r14, r6
    59b0:	e2 cf       	rjmp	.-60     	; 0x5976 <vfprintf+0x44>
    59b2:	11 23       	and	r17, r17
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <vfprintf+0x86>
    59b6:	e6 c0       	rjmp	.+460    	; 0x5b84 <vfprintf+0x252>
    59b8:	61 2f       	mov	r22, r17
    59ba:	70 e0       	ldi	r23, 0x00	; 0
    59bc:	8a e9       	ldi	r24, 0x9A	; 154
    59be:	95 e0       	ldi	r25, 0x05	; 5
    59c0:	2c 87       	std	Y+12, r18	; 0x0c
    59c2:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <strchr_P>
    59c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    59c8:	89 2b       	or	r24, r25
    59ca:	49 f0       	breq	.+18     	; 0x59de <vfprintf+0xac>
    59cc:	f5 01       	movw	r30, r10
    59ce:	03 fd       	sbrc	r16, 3
    59d0:	15 91       	lpm	r17, Z+
    59d2:	03 ff       	sbrs	r16, 3
    59d4:	11 91       	ld	r17, Z+
    59d6:	5f 01       	movw	r10, r30
    59d8:	27 ff       	sbrs	r18, 7
    59da:	eb cf       	rjmp	.-42     	; 0x59b2 <vfprintf+0x80>
    59dc:	09 c0       	rjmp	.+18     	; 0x59f0 <vfprintf+0xbe>
    59de:	13 32       	cpi	r17, 0x23	; 35
    59e0:	29 f0       	breq	.+10     	; 0x59ec <vfprintf+0xba>
    59e2:	1c 36       	cpi	r17, 0x6C	; 108
    59e4:	09 f0       	breq	.+2      	; 0x59e8 <vfprintf+0xb6>
    59e6:	d5 c0       	rjmp	.+426    	; 0x5b92 <vfprintf+0x260>
    59e8:	20 68       	ori	r18, 0x80	; 128
    59ea:	f0 cf       	rjmp	.-32     	; 0x59cc <vfprintf+0x9a>
    59ec:	20 e1       	ldi	r18, 0x10	; 16
    59ee:	ee cf       	rjmp	.-36     	; 0x59cc <vfprintf+0x9a>
    59f0:	02 2f       	mov	r16, r18
    59f2:	11 23       	and	r17, r17
    59f4:	09 f4       	brne	.+2      	; 0x59f8 <vfprintf+0xc6>
    59f6:	c6 c0       	rjmp	.+396    	; 0x5b84 <vfprintf+0x252>
    59f8:	61 2f       	mov	r22, r17
    59fa:	70 e0       	ldi	r23, 0x00	; 0
    59fc:	83 e9       	ldi	r24, 0x93	; 147
    59fe:	95 e0       	ldi	r25, 0x05	; 5
    5a00:	2c 87       	std	Y+12, r18	; 0x0c
    5a02:	0e 94 31 2f 	call	0x5e62	; 0x5e62 <strchr_P>
    5a06:	2c 85       	ldd	r18, Y+12	; 0x0c
    5a08:	89 2b       	or	r24, r25
    5a0a:	41 f0       	breq	.+16     	; 0x5a1c <vfprintf+0xea>
    5a0c:	37 01       	movw	r6, r14
    5a0e:	f4 e0       	ldi	r31, 0x04	; 4
    5a10:	6f 0e       	add	r6, r31
    5a12:	71 1c       	adc	r7, r1
    5a14:	b6 01       	movw	r22, r12
    5a16:	8f e3       	ldi	r24, 0x3F	; 63
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	11 c0       	rjmp	.+34     	; 0x5a3e <vfprintf+0x10c>
    5a1c:	13 36       	cpi	r17, 0x63	; 99
    5a1e:	39 f0       	breq	.+14     	; 0x5a2e <vfprintf+0xfc>
    5a20:	13 37       	cpi	r17, 0x73	; 115
    5a22:	81 f0       	breq	.+32     	; 0x5a44 <vfprintf+0x112>
    5a24:	13 35       	cpi	r17, 0x53	; 83
    5a26:	19 f5       	brne	.+70     	; 0x5a6e <vfprintf+0x13c>
    5a28:	02 2f       	mov	r16, r18
    5a2a:	01 60       	ori	r16, 0x01	; 1
    5a2c:	0b c0       	rjmp	.+22     	; 0x5a44 <vfprintf+0x112>
    5a2e:	37 01       	movw	r6, r14
    5a30:	82 e0       	ldi	r24, 0x02	; 2
    5a32:	68 0e       	add	r6, r24
    5a34:	71 1c       	adc	r7, r1
    5a36:	b6 01       	movw	r22, r12
    5a38:	f7 01       	movw	r30, r14
    5a3a:	80 81       	ld	r24, Z
    5a3c:	91 81       	ldd	r25, Z+1	; 0x01
    5a3e:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    5a42:	b5 cf       	rjmp	.-150    	; 0x59ae <vfprintf+0x7c>
    5a44:	37 01       	movw	r6, r14
    5a46:	f2 e0       	ldi	r31, 0x02	; 2
    5a48:	6f 0e       	add	r6, r31
    5a4a:	71 1c       	adc	r7, r1
    5a4c:	f7 01       	movw	r30, r14
    5a4e:	e0 80       	ld	r14, Z
    5a50:	f1 80       	ldd	r15, Z+1	; 0x01
    5a52:	f7 01       	movw	r30, r14
    5a54:	00 fd       	sbrc	r16, 0
    5a56:	85 91       	lpm	r24, Z+
    5a58:	00 ff       	sbrs	r16, 0
    5a5a:	81 91       	ld	r24, Z+
    5a5c:	7f 01       	movw	r14, r30
    5a5e:	88 23       	and	r24, r24
    5a60:	09 f4       	brne	.+2      	; 0x5a64 <vfprintf+0x132>
    5a62:	a5 cf       	rjmp	.-182    	; 0x59ae <vfprintf+0x7c>
    5a64:	b6 01       	movw	r22, r12
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    5a6c:	f2 cf       	rjmp	.-28     	; 0x5a52 <vfprintf+0x120>
    5a6e:	14 36       	cpi	r17, 0x64	; 100
    5a70:	11 f0       	breq	.+4      	; 0x5a76 <vfprintf+0x144>
    5a72:	19 36       	cpi	r17, 0x69	; 105
    5a74:	29 f5       	brne	.+74     	; 0x5ac0 <vfprintf+0x18e>
    5a76:	37 01       	movw	r6, r14
    5a78:	27 ff       	sbrs	r18, 7
    5a7a:	09 c0       	rjmp	.+18     	; 0x5a8e <vfprintf+0x15c>
    5a7c:	f4 e0       	ldi	r31, 0x04	; 4
    5a7e:	6f 0e       	add	r6, r31
    5a80:	71 1c       	adc	r7, r1
    5a82:	f7 01       	movw	r30, r14
    5a84:	60 81       	ld	r22, Z
    5a86:	71 81       	ldd	r23, Z+1	; 0x01
    5a88:	82 81       	ldd	r24, Z+2	; 0x02
    5a8a:	93 81       	ldd	r25, Z+3	; 0x03
    5a8c:	0a c0       	rjmp	.+20     	; 0x5aa2 <vfprintf+0x170>
    5a8e:	f2 e0       	ldi	r31, 0x02	; 2
    5a90:	6f 0e       	add	r6, r31
    5a92:	71 1c       	adc	r7, r1
    5a94:	f7 01       	movw	r30, r14
    5a96:	60 81       	ld	r22, Z
    5a98:	71 81       	ldd	r23, Z+1	; 0x01
    5a9a:	88 27       	eor	r24, r24
    5a9c:	77 fd       	sbrc	r23, 7
    5a9e:	80 95       	com	r24
    5aa0:	98 2f       	mov	r25, r24
    5aa2:	02 2f       	mov	r16, r18
    5aa4:	0f 7e       	andi	r16, 0xEF	; 239
    5aa6:	97 ff       	sbrs	r25, 7
    5aa8:	08 c0       	rjmp	.+16     	; 0x5aba <vfprintf+0x188>
    5aaa:	90 95       	com	r25
    5aac:	80 95       	com	r24
    5aae:	70 95       	com	r23
    5ab0:	61 95       	neg	r22
    5ab2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab8:	00 64       	ori	r16, 0x40	; 64
    5aba:	2a e0       	ldi	r18, 0x0A	; 10
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	33 c0       	rjmp	.+102    	; 0x5b26 <vfprintf+0x1f4>
    5ac0:	10 37       	cpi	r17, 0x70	; 112
    5ac2:	99 f0       	breq	.+38     	; 0x5aea <vfprintf+0x1b8>
    5ac4:	40 f4       	brcc	.+16     	; 0x5ad6 <vfprintf+0x1a4>
    5ac6:	18 35       	cpi	r17, 0x58	; 88
    5ac8:	b1 f0       	breq	.+44     	; 0x5af6 <vfprintf+0x1c4>
    5aca:	1f 36       	cpi	r17, 0x6F	; 111
    5acc:	09 f0       	breq	.+2      	; 0x5ad0 <vfprintf+0x19e>
    5ace:	5a c0       	rjmp	.+180    	; 0x5b84 <vfprintf+0x252>
    5ad0:	28 e0       	ldi	r18, 0x08	; 8
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	14 c0       	rjmp	.+40     	; 0x5afe <vfprintf+0x1cc>
    5ad6:	15 37       	cpi	r17, 0x75	; 117
    5ad8:	19 f0       	breq	.+6      	; 0x5ae0 <vfprintf+0x1ae>
    5ada:	18 37       	cpi	r17, 0x78	; 120
    5adc:	41 f0       	breq	.+16     	; 0x5aee <vfprintf+0x1bc>
    5ade:	52 c0       	rjmp	.+164    	; 0x5b84 <vfprintf+0x252>
    5ae0:	02 2f       	mov	r16, r18
    5ae2:	0f 7e       	andi	r16, 0xEF	; 239
    5ae4:	2a e0       	ldi	r18, 0x0A	; 10
    5ae6:	30 e0       	ldi	r19, 0x00	; 0
    5ae8:	0a c0       	rjmp	.+20     	; 0x5afe <vfprintf+0x1cc>
    5aea:	02 2f       	mov	r16, r18
    5aec:	00 61       	ori	r16, 0x10	; 16
    5aee:	04 62       	ori	r16, 0x24	; 36
    5af0:	20 e1       	ldi	r18, 0x10	; 16
    5af2:	30 e0       	ldi	r19, 0x00	; 0
    5af4:	04 c0       	rjmp	.+8      	; 0x5afe <vfprintf+0x1cc>
    5af6:	02 2f       	mov	r16, r18
    5af8:	04 60       	ori	r16, 0x04	; 4
    5afa:	20 e1       	ldi	r18, 0x10	; 16
    5afc:	32 e0       	ldi	r19, 0x02	; 2
    5afe:	37 01       	movw	r6, r14
    5b00:	07 ff       	sbrs	r16, 7
    5b02:	09 c0       	rjmp	.+18     	; 0x5b16 <vfprintf+0x1e4>
    5b04:	f4 e0       	ldi	r31, 0x04	; 4
    5b06:	6f 0e       	add	r6, r31
    5b08:	71 1c       	adc	r7, r1
    5b0a:	f7 01       	movw	r30, r14
    5b0c:	60 81       	ld	r22, Z
    5b0e:	71 81       	ldd	r23, Z+1	; 0x01
    5b10:	82 81       	ldd	r24, Z+2	; 0x02
    5b12:	93 81       	ldd	r25, Z+3	; 0x03
    5b14:	08 c0       	rjmp	.+16     	; 0x5b26 <vfprintf+0x1f4>
    5b16:	f2 e0       	ldi	r31, 0x02	; 2
    5b18:	6f 0e       	add	r6, r31
    5b1a:	71 1c       	adc	r7, r1
    5b1c:	f7 01       	movw	r30, r14
    5b1e:	60 81       	ld	r22, Z
    5b20:	71 81       	ldd	r23, Z+1	; 0x01
    5b22:	80 e0       	ldi	r24, 0x00	; 0
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	a4 01       	movw	r20, r8
    5b28:	0e 94 97 30 	call	0x612e	; 0x612e <__ultoa_invert>
    5b2c:	18 2f       	mov	r17, r24
    5b2e:	18 19       	sub	r17, r8
    5b30:	06 ff       	sbrs	r16, 6
    5b32:	05 c0       	rjmp	.+10     	; 0x5b3e <vfprintf+0x20c>
    5b34:	b6 01       	movw	r22, r12
    5b36:	8d e2       	ldi	r24, 0x2D	; 45
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    5b3e:	04 ff       	sbrs	r16, 4
    5b40:	15 c0       	rjmp	.+42     	; 0x5b6c <vfprintf+0x23a>
    5b42:	fe 01       	movw	r30, r28
    5b44:	e1 0f       	add	r30, r17
    5b46:	f1 1d       	adc	r31, r1
    5b48:	80 81       	ld	r24, Z
    5b4a:	80 33       	cpi	r24, 0x30	; 48
    5b4c:	79 f0       	breq	.+30     	; 0x5b6c <vfprintf+0x23a>
    5b4e:	b6 01       	movw	r22, r12
    5b50:	80 e3       	ldi	r24, 0x30	; 48
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    5b58:	02 ff       	sbrs	r16, 2
    5b5a:	08 c0       	rjmp	.+16     	; 0x5b6c <vfprintf+0x23a>
    5b5c:	00 72       	andi	r16, 0x20	; 32
    5b5e:	80 2f       	mov	r24, r16
    5b60:	90 e0       	ldi	r25, 0x00	; 0
    5b62:	b6 01       	movw	r22, r12
    5b64:	88 5a       	subi	r24, 0xA8	; 168
    5b66:	9f 4f       	sbci	r25, 0xFF	; 255
    5b68:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    5b6c:	11 50       	subi	r17, 0x01	; 1
    5b6e:	f4 01       	movw	r30, r8
    5b70:	e1 0f       	add	r30, r17
    5b72:	f1 1d       	adc	r31, r1
    5b74:	80 81       	ld	r24, Z
    5b76:	b6 01       	movw	r22, r12
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <fputc>
    5b7e:	11 11       	cpse	r17, r1
    5b80:	f5 cf       	rjmp	.-22     	; 0x5b6c <vfprintf+0x23a>
    5b82:	15 cf       	rjmp	.-470    	; 0x59ae <vfprintf+0x7c>
    5b84:	f6 01       	movw	r30, r12
    5b86:	86 81       	ldd	r24, Z+6	; 0x06
    5b88:	97 81       	ldd	r25, Z+7	; 0x07
    5b8a:	05 c0       	rjmp	.+10     	; 0x5b96 <vfprintf+0x264>
    5b8c:	8f ef       	ldi	r24, 0xFF	; 255
    5b8e:	9f ef       	ldi	r25, 0xFF	; 255
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <vfprintf+0x264>
    5b92:	02 2f       	mov	r16, r18
    5b94:	31 cf       	rjmp	.-414    	; 0x59f8 <vfprintf+0xc6>
    5b96:	2c 96       	adiw	r28, 0x0c	; 12
    5b98:	0f b6       	in	r0, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	de bf       	out	0x3e, r29	; 62
    5b9e:	0f be       	out	0x3f, r0	; 63
    5ba0:	cd bf       	out	0x3d, r28	; 61
    5ba2:	df 91       	pop	r29
    5ba4:	cf 91       	pop	r28
    5ba6:	1f 91       	pop	r17
    5ba8:	0f 91       	pop	r16
    5baa:	ff 90       	pop	r15
    5bac:	ef 90       	pop	r14
    5bae:	df 90       	pop	r13
    5bb0:	cf 90       	pop	r12
    5bb2:	bf 90       	pop	r11
    5bb4:	af 90       	pop	r10
    5bb6:	9f 90       	pop	r9
    5bb8:	8f 90       	pop	r8
    5bba:	7f 90       	pop	r7
    5bbc:	6f 90       	pop	r6
    5bbe:	08 95       	ret

00005bc0 <__muluhisi3>:
    5bc0:	0e 94 aa 2e 	call	0x5d54	; 0x5d54 <__umulhisi3>
    5bc4:	a5 9f       	mul	r26, r21
    5bc6:	90 0d       	add	r25, r0
    5bc8:	b4 9f       	mul	r27, r20
    5bca:	90 0d       	add	r25, r0
    5bcc:	a4 9f       	mul	r26, r20
    5bce:	80 0d       	add	r24, r0
    5bd0:	91 1d       	adc	r25, r1
    5bd2:	11 24       	eor	r1, r1
    5bd4:	08 95       	ret

00005bd6 <__mulsi3>:
    5bd6:	db 01       	movw	r26, r22
    5bd8:	8f 93       	push	r24
    5bda:	9f 93       	push	r25
    5bdc:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__muluhisi3>
    5be0:	bf 91       	pop	r27
    5be2:	af 91       	pop	r26
    5be4:	a2 9f       	mul	r26, r18
    5be6:	80 0d       	add	r24, r0
    5be8:	91 1d       	adc	r25, r1
    5bea:	a3 9f       	mul	r26, r19
    5bec:	90 0d       	add	r25, r0
    5bee:	b2 9f       	mul	r27, r18
    5bf0:	90 0d       	add	r25, r0
    5bf2:	11 24       	eor	r1, r1
    5bf4:	08 95       	ret

00005bf6 <__udivmodhi4>:
    5bf6:	aa 1b       	sub	r26, r26
    5bf8:	bb 1b       	sub	r27, r27
    5bfa:	51 e1       	ldi	r21, 0x11	; 17
    5bfc:	07 c0       	rjmp	.+14     	; 0x5c0c <__udivmodhi4_ep>

00005bfe <__udivmodhi4_loop>:
    5bfe:	aa 1f       	adc	r26, r26
    5c00:	bb 1f       	adc	r27, r27
    5c02:	a6 17       	cp	r26, r22
    5c04:	b7 07       	cpc	r27, r23
    5c06:	10 f0       	brcs	.+4      	; 0x5c0c <__udivmodhi4_ep>
    5c08:	a6 1b       	sub	r26, r22
    5c0a:	b7 0b       	sbc	r27, r23

00005c0c <__udivmodhi4_ep>:
    5c0c:	88 1f       	adc	r24, r24
    5c0e:	99 1f       	adc	r25, r25
    5c10:	5a 95       	dec	r21
    5c12:	a9 f7       	brne	.-22     	; 0x5bfe <__udivmodhi4_loop>
    5c14:	80 95       	com	r24
    5c16:	90 95       	com	r25
    5c18:	bc 01       	movw	r22, r24
    5c1a:	cd 01       	movw	r24, r26
    5c1c:	08 95       	ret

00005c1e <__divmodhi4>:
    5c1e:	97 fb       	bst	r25, 7
    5c20:	07 2e       	mov	r0, r23
    5c22:	16 f4       	brtc	.+4      	; 0x5c28 <__divmodhi4+0xa>
    5c24:	00 94       	com	r0
    5c26:	07 d0       	rcall	.+14     	; 0x5c36 <__divmodhi4_neg1>
    5c28:	77 fd       	sbrc	r23, 7
    5c2a:	09 d0       	rcall	.+18     	; 0x5c3e <__divmodhi4_neg2>
    5c2c:	0e 94 fb 2d 	call	0x5bf6	; 0x5bf6 <__udivmodhi4>
    5c30:	07 fc       	sbrc	r0, 7
    5c32:	05 d0       	rcall	.+10     	; 0x5c3e <__divmodhi4_neg2>
    5c34:	3e f4       	brtc	.+14     	; 0x5c44 <__divmodhi4_exit>

00005c36 <__divmodhi4_neg1>:
    5c36:	90 95       	com	r25
    5c38:	81 95       	neg	r24
    5c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c3c:	08 95       	ret

00005c3e <__divmodhi4_neg2>:
    5c3e:	70 95       	com	r23
    5c40:	61 95       	neg	r22
    5c42:	7f 4f       	sbci	r23, 0xFF	; 255

00005c44 <__divmodhi4_exit>:
    5c44:	08 95       	ret

00005c46 <__udivmodsi4>:
    5c46:	a1 e2       	ldi	r26, 0x21	; 33
    5c48:	1a 2e       	mov	r1, r26
    5c4a:	aa 1b       	sub	r26, r26
    5c4c:	bb 1b       	sub	r27, r27
    5c4e:	fd 01       	movw	r30, r26
    5c50:	0d c0       	rjmp	.+26     	; 0x5c6c <__udivmodsi4_ep>

00005c52 <__udivmodsi4_loop>:
    5c52:	aa 1f       	adc	r26, r26
    5c54:	bb 1f       	adc	r27, r27
    5c56:	ee 1f       	adc	r30, r30
    5c58:	ff 1f       	adc	r31, r31
    5c5a:	a2 17       	cp	r26, r18
    5c5c:	b3 07       	cpc	r27, r19
    5c5e:	e4 07       	cpc	r30, r20
    5c60:	f5 07       	cpc	r31, r21
    5c62:	20 f0       	brcs	.+8      	; 0x5c6c <__udivmodsi4_ep>
    5c64:	a2 1b       	sub	r26, r18
    5c66:	b3 0b       	sbc	r27, r19
    5c68:	e4 0b       	sbc	r30, r20
    5c6a:	f5 0b       	sbc	r31, r21

00005c6c <__udivmodsi4_ep>:
    5c6c:	66 1f       	adc	r22, r22
    5c6e:	77 1f       	adc	r23, r23
    5c70:	88 1f       	adc	r24, r24
    5c72:	99 1f       	adc	r25, r25
    5c74:	1a 94       	dec	r1
    5c76:	69 f7       	brne	.-38     	; 0x5c52 <__udivmodsi4_loop>
    5c78:	60 95       	com	r22
    5c7a:	70 95       	com	r23
    5c7c:	80 95       	com	r24
    5c7e:	90 95       	com	r25
    5c80:	9b 01       	movw	r18, r22
    5c82:	ac 01       	movw	r20, r24
    5c84:	bd 01       	movw	r22, r26
    5c86:	cf 01       	movw	r24, r30
    5c88:	08 95       	ret

00005c8a <__umoddi3>:
    5c8a:	68 94       	set
    5c8c:	01 c0       	rjmp	.+2      	; 0x5c90 <__udivdi3_umoddi3>

00005c8e <__udivdi3>:
    5c8e:	e8 94       	clt

00005c90 <__udivdi3_umoddi3>:
    5c90:	8f 92       	push	r8
    5c92:	9f 92       	push	r9
    5c94:	cf 93       	push	r28
    5c96:	df 93       	push	r29
    5c98:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <__udivmod64>
    5c9c:	df 91       	pop	r29
    5c9e:	cf 91       	pop	r28
    5ca0:	9f 90       	pop	r9
    5ca2:	8f 90       	pop	r8
    5ca4:	08 95       	ret

00005ca6 <__udivmod64>:
    5ca6:	88 24       	eor	r8, r8
    5ca8:	99 24       	eor	r9, r9
    5caa:	f4 01       	movw	r30, r8
    5cac:	e4 01       	movw	r28, r8
    5cae:	b0 e4       	ldi	r27, 0x40	; 64
    5cb0:	9f 93       	push	r25
    5cb2:	aa 27       	eor	r26, r26
    5cb4:	9a 15       	cp	r25, r10
    5cb6:	8b 04       	cpc	r8, r11
    5cb8:	9c 04       	cpc	r9, r12
    5cba:	ed 05       	cpc	r30, r13
    5cbc:	fe 05       	cpc	r31, r14
    5cbe:	cf 05       	cpc	r28, r15
    5cc0:	d0 07       	cpc	r29, r16
    5cc2:	a1 07       	cpc	r26, r17
    5cc4:	98 f4       	brcc	.+38     	; 0x5cec <__udivmod64+0x46>
    5cc6:	ad 2f       	mov	r26, r29
    5cc8:	dc 2f       	mov	r29, r28
    5cca:	cf 2f       	mov	r28, r31
    5ccc:	fe 2f       	mov	r31, r30
    5cce:	e9 2d       	mov	r30, r9
    5cd0:	98 2c       	mov	r9, r8
    5cd2:	89 2e       	mov	r8, r25
    5cd4:	98 2f       	mov	r25, r24
    5cd6:	87 2f       	mov	r24, r23
    5cd8:	76 2f       	mov	r23, r22
    5cda:	65 2f       	mov	r22, r21
    5cdc:	54 2f       	mov	r21, r20
    5cde:	43 2f       	mov	r20, r19
    5ce0:	32 2f       	mov	r19, r18
    5ce2:	22 27       	eor	r18, r18
    5ce4:	b8 50       	subi	r27, 0x08	; 8
    5ce6:	31 f7       	brne	.-52     	; 0x5cb4 <__udivmod64+0xe>
    5ce8:	bf 91       	pop	r27
    5cea:	27 c0       	rjmp	.+78     	; 0x5d3a <__udivmod64+0x94>
    5cec:	1b 2e       	mov	r1, r27
    5cee:	bf 91       	pop	r27
    5cf0:	bb 27       	eor	r27, r27
    5cf2:	22 0f       	add	r18, r18
    5cf4:	33 1f       	adc	r19, r19
    5cf6:	44 1f       	adc	r20, r20
    5cf8:	55 1f       	adc	r21, r21
    5cfa:	66 1f       	adc	r22, r22
    5cfc:	77 1f       	adc	r23, r23
    5cfe:	88 1f       	adc	r24, r24
    5d00:	99 1f       	adc	r25, r25
    5d02:	88 1c       	adc	r8, r8
    5d04:	99 1c       	adc	r9, r9
    5d06:	ee 1f       	adc	r30, r30
    5d08:	ff 1f       	adc	r31, r31
    5d0a:	cc 1f       	adc	r28, r28
    5d0c:	dd 1f       	adc	r29, r29
    5d0e:	aa 1f       	adc	r26, r26
    5d10:	bb 1f       	adc	r27, r27
    5d12:	8a 14       	cp	r8, r10
    5d14:	9b 04       	cpc	r9, r11
    5d16:	ec 05       	cpc	r30, r12
    5d18:	fd 05       	cpc	r31, r13
    5d1a:	ce 05       	cpc	r28, r14
    5d1c:	df 05       	cpc	r29, r15
    5d1e:	a0 07       	cpc	r26, r16
    5d20:	b1 07       	cpc	r27, r17
    5d22:	48 f0       	brcs	.+18     	; 0x5d36 <__udivmod64+0x90>
    5d24:	8a 18       	sub	r8, r10
    5d26:	9b 08       	sbc	r9, r11
    5d28:	ec 09       	sbc	r30, r12
    5d2a:	fd 09       	sbc	r31, r13
    5d2c:	ce 09       	sbc	r28, r14
    5d2e:	df 09       	sbc	r29, r15
    5d30:	a0 0b       	sbc	r26, r16
    5d32:	b1 0b       	sbc	r27, r17
    5d34:	21 60       	ori	r18, 0x01	; 1
    5d36:	1a 94       	dec	r1
    5d38:	e1 f6       	brne	.-72     	; 0x5cf2 <__udivmod64+0x4c>
    5d3a:	2e f4       	brtc	.+10     	; 0x5d46 <__udivmod64+0xa0>
    5d3c:	94 01       	movw	r18, r8
    5d3e:	af 01       	movw	r20, r30
    5d40:	be 01       	movw	r22, r28
    5d42:	cd 01       	movw	r24, r26
    5d44:	00 0c       	add	r0, r0
    5d46:	08 95       	ret

00005d48 <__tablejump2__>:
    5d48:	ee 0f       	add	r30, r30
    5d4a:	ff 1f       	adc	r31, r31

00005d4c <__tablejump__>:
    5d4c:	05 90       	lpm	r0, Z+
    5d4e:	f4 91       	lpm	r31, Z
    5d50:	e0 2d       	mov	r30, r0
    5d52:	09 94       	ijmp

00005d54 <__umulhisi3>:
    5d54:	a2 9f       	mul	r26, r18
    5d56:	b0 01       	movw	r22, r0
    5d58:	b3 9f       	mul	r27, r19
    5d5a:	c0 01       	movw	r24, r0
    5d5c:	a3 9f       	mul	r26, r19
    5d5e:	70 0d       	add	r23, r0
    5d60:	81 1d       	adc	r24, r1
    5d62:	11 24       	eor	r1, r1
    5d64:	91 1d       	adc	r25, r1
    5d66:	b2 9f       	mul	r27, r18
    5d68:	70 0d       	add	r23, r0
    5d6a:	81 1d       	adc	r24, r1
    5d6c:	11 24       	eor	r1, r1
    5d6e:	91 1d       	adc	r25, r1
    5d70:	08 95       	ret

00005d72 <do_rand>:
    5d72:	8f 92       	push	r8
    5d74:	9f 92       	push	r9
    5d76:	af 92       	push	r10
    5d78:	bf 92       	push	r11
    5d7a:	cf 92       	push	r12
    5d7c:	df 92       	push	r13
    5d7e:	ef 92       	push	r14
    5d80:	ff 92       	push	r15
    5d82:	cf 93       	push	r28
    5d84:	df 93       	push	r29
    5d86:	ec 01       	movw	r28, r24
    5d88:	68 81       	ld	r22, Y
    5d8a:	79 81       	ldd	r23, Y+1	; 0x01
    5d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    5d90:	61 15       	cp	r22, r1
    5d92:	71 05       	cpc	r23, r1
    5d94:	81 05       	cpc	r24, r1
    5d96:	91 05       	cpc	r25, r1
    5d98:	21 f4       	brne	.+8      	; 0x5da2 <do_rand+0x30>
    5d9a:	64 e2       	ldi	r22, 0x24	; 36
    5d9c:	79 ed       	ldi	r23, 0xD9	; 217
    5d9e:	8b e5       	ldi	r24, 0x5B	; 91
    5da0:	97 e0       	ldi	r25, 0x07	; 7
    5da2:	2d e1       	ldi	r18, 0x1D	; 29
    5da4:	33 ef       	ldi	r19, 0xF3	; 243
    5da6:	41 e0       	ldi	r20, 0x01	; 1
    5da8:	50 e0       	ldi	r21, 0x00	; 0
    5daa:	0e 94 63 32 	call	0x64c6	; 0x64c6 <__divmodsi4>
    5dae:	49 01       	movw	r8, r18
    5db0:	5a 01       	movw	r10, r20
    5db2:	9b 01       	movw	r18, r22
    5db4:	ac 01       	movw	r20, r24
    5db6:	a7 ea       	ldi	r26, 0xA7	; 167
    5db8:	b1 e4       	ldi	r27, 0x41	; 65
    5dba:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__muluhisi3>
    5dbe:	6b 01       	movw	r12, r22
    5dc0:	7c 01       	movw	r14, r24
    5dc2:	ac ee       	ldi	r26, 0xEC	; 236
    5dc4:	b4 ef       	ldi	r27, 0xF4	; 244
    5dc6:	a5 01       	movw	r20, r10
    5dc8:	94 01       	movw	r18, r8
    5dca:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__mulohisi3>
    5dce:	dc 01       	movw	r26, r24
    5dd0:	cb 01       	movw	r24, r22
    5dd2:	8c 0d       	add	r24, r12
    5dd4:	9d 1d       	adc	r25, r13
    5dd6:	ae 1d       	adc	r26, r14
    5dd8:	bf 1d       	adc	r27, r15
    5dda:	b7 ff       	sbrs	r27, 7
    5ddc:	03 c0       	rjmp	.+6      	; 0x5de4 <do_rand+0x72>
    5dde:	01 97       	sbiw	r24, 0x01	; 1
    5de0:	a1 09       	sbc	r26, r1
    5de2:	b0 48       	sbci	r27, 0x80	; 128
    5de4:	88 83       	st	Y, r24
    5de6:	99 83       	std	Y+1, r25	; 0x01
    5de8:	aa 83       	std	Y+2, r26	; 0x02
    5dea:	bb 83       	std	Y+3, r27	; 0x03
    5dec:	9f 77       	andi	r25, 0x7F	; 127
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	ff 90       	pop	r15
    5df4:	ef 90       	pop	r14
    5df6:	df 90       	pop	r13
    5df8:	cf 90       	pop	r12
    5dfa:	bf 90       	pop	r11
    5dfc:	af 90       	pop	r10
    5dfe:	9f 90       	pop	r9
    5e00:	8f 90       	pop	r8
    5e02:	08 95       	ret

00005e04 <rand_r>:
    5e04:	0c 94 b9 2e 	jmp	0x5d72	; 0x5d72 <do_rand>

00005e08 <rand>:
    5e08:	80 e0       	ldi	r24, 0x00	; 0
    5e0a:	92 e0       	ldi	r25, 0x02	; 2
    5e0c:	0c 94 b9 2e 	jmp	0x5d72	; 0x5d72 <do_rand>

00005e10 <srand>:
    5e10:	a0 e0       	ldi	r26, 0x00	; 0
    5e12:	b0 e0       	ldi	r27, 0x00	; 0
    5e14:	80 93 00 02 	sts	0x0200, r24
    5e18:	90 93 01 02 	sts	0x0201, r25
    5e1c:	a0 93 02 02 	sts	0x0202, r26
    5e20:	b0 93 03 02 	sts	0x0203, r27
    5e24:	08 95       	ret

00005e26 <atoi>:
    5e26:	fc 01       	movw	r30, r24
    5e28:	88 27       	eor	r24, r24
    5e2a:	99 27       	eor	r25, r25
    5e2c:	e8 94       	clt
    5e2e:	21 91       	ld	r18, Z+
    5e30:	20 32       	cpi	r18, 0x20	; 32
    5e32:	e9 f3       	breq	.-6      	; 0x5e2e <atoi+0x8>
    5e34:	29 30       	cpi	r18, 0x09	; 9
    5e36:	10 f0       	brcs	.+4      	; 0x5e3c <atoi+0x16>
    5e38:	2e 30       	cpi	r18, 0x0E	; 14
    5e3a:	c8 f3       	brcs	.-14     	; 0x5e2e <atoi+0x8>
    5e3c:	2b 32       	cpi	r18, 0x2B	; 43
    5e3e:	41 f0       	breq	.+16     	; 0x5e50 <atoi+0x2a>
    5e40:	2d 32       	cpi	r18, 0x2D	; 45
    5e42:	39 f4       	brne	.+14     	; 0x5e52 <atoi+0x2c>
    5e44:	68 94       	set
    5e46:	04 c0       	rjmp	.+8      	; 0x5e50 <atoi+0x2a>
    5e48:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__mulhi_const_10>
    5e4c:	82 0f       	add	r24, r18
    5e4e:	91 1d       	adc	r25, r1
    5e50:	21 91       	ld	r18, Z+
    5e52:	20 53       	subi	r18, 0x30	; 48
    5e54:	2a 30       	cpi	r18, 0x0A	; 10
    5e56:	c0 f3       	brcs	.-16     	; 0x5e48 <atoi+0x22>
    5e58:	1e f4       	brtc	.+6      	; 0x5e60 <atoi+0x3a>
    5e5a:	90 95       	com	r25
    5e5c:	81 95       	neg	r24
    5e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e60:	08 95       	ret

00005e62 <strchr_P>:
    5e62:	fc 01       	movw	r30, r24
    5e64:	05 90       	lpm	r0, Z+
    5e66:	06 16       	cp	r0, r22
    5e68:	21 f0       	breq	.+8      	; 0x5e72 <strchr_P+0x10>
    5e6a:	00 20       	and	r0, r0
    5e6c:	d9 f7       	brne	.-10     	; 0x5e64 <strchr_P+0x2>
    5e6e:	c0 01       	movw	r24, r0
    5e70:	08 95       	ret
    5e72:	31 97       	sbiw	r30, 0x01	; 1
    5e74:	cf 01       	movw	r24, r30
    5e76:	08 95       	ret

00005e78 <memcpy>:
    5e78:	fb 01       	movw	r30, r22
    5e7a:	dc 01       	movw	r26, r24
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <memcpy+0xa>
    5e7e:	01 90       	ld	r0, Z+
    5e80:	0d 92       	st	X+, r0
    5e82:	41 50       	subi	r20, 0x01	; 1
    5e84:	50 40       	sbci	r21, 0x00	; 0
    5e86:	d8 f7       	brcc	.-10     	; 0x5e7e <memcpy+0x6>
    5e88:	08 95       	ret

00005e8a <strncpy>:
    5e8a:	fb 01       	movw	r30, r22
    5e8c:	dc 01       	movw	r26, r24
    5e8e:	41 50       	subi	r20, 0x01	; 1
    5e90:	50 40       	sbci	r21, 0x00	; 0
    5e92:	48 f0       	brcs	.+18     	; 0x5ea6 <strncpy+0x1c>
    5e94:	01 90       	ld	r0, Z+
    5e96:	0d 92       	st	X+, r0
    5e98:	00 20       	and	r0, r0
    5e9a:	c9 f7       	brne	.-14     	; 0x5e8e <strncpy+0x4>
    5e9c:	01 c0       	rjmp	.+2      	; 0x5ea0 <strncpy+0x16>
    5e9e:	1d 92       	st	X+, r1
    5ea0:	41 50       	subi	r20, 0x01	; 1
    5ea2:	50 40       	sbci	r21, 0x00	; 0
    5ea4:	e0 f7       	brcc	.-8      	; 0x5e9e <strncpy+0x14>
    5ea6:	08 95       	ret

00005ea8 <__mulhi_const_10>:
    5ea8:	7a e0       	ldi	r23, 0x0A	; 10
    5eaa:	97 9f       	mul	r25, r23
    5eac:	90 2d       	mov	r25, r0
    5eae:	87 9f       	mul	r24, r23
    5eb0:	80 2d       	mov	r24, r0
    5eb2:	91 0d       	add	r25, r1
    5eb4:	11 24       	eor	r1, r1
    5eb6:	08 95       	ret

00005eb8 <fdevopen>:
    5eb8:	0f 93       	push	r16
    5eba:	1f 93       	push	r17
    5ebc:	cf 93       	push	r28
    5ebe:	df 93       	push	r29
    5ec0:	00 97       	sbiw	r24, 0x00	; 0
    5ec2:	31 f4       	brne	.+12     	; 0x5ed0 <fdevopen+0x18>
    5ec4:	61 15       	cp	r22, r1
    5ec6:	71 05       	cpc	r23, r1
    5ec8:	19 f4       	brne	.+6      	; 0x5ed0 <fdevopen+0x18>
    5eca:	80 e0       	ldi	r24, 0x00	; 0
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	3a c0       	rjmp	.+116    	; 0x5f44 <fdevopen+0x8c>
    5ed0:	8b 01       	movw	r16, r22
    5ed2:	ec 01       	movw	r28, r24
    5ed4:	6e e0       	ldi	r22, 0x0E	; 14
    5ed6:	70 e0       	ldi	r23, 0x00	; 0
    5ed8:	81 e0       	ldi	r24, 0x01	; 1
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	0e 94 0b 31 	call	0x6216	; 0x6216 <calloc>
    5ee0:	fc 01       	movw	r30, r24
    5ee2:	00 97       	sbiw	r24, 0x00	; 0
    5ee4:	91 f3       	breq	.-28     	; 0x5eca <fdevopen+0x12>
    5ee6:	80 e8       	ldi	r24, 0x80	; 128
    5ee8:	83 83       	std	Z+3, r24	; 0x03
    5eea:	01 15       	cp	r16, r1
    5eec:	11 05       	cpc	r17, r1
    5eee:	71 f0       	breq	.+28     	; 0x5f0c <fdevopen+0x54>
    5ef0:	13 87       	std	Z+11, r17	; 0x0b
    5ef2:	02 87       	std	Z+10, r16	; 0x0a
    5ef4:	81 e8       	ldi	r24, 0x81	; 129
    5ef6:	83 83       	std	Z+3, r24	; 0x03
    5ef8:	80 91 0a 0d 	lds	r24, 0x0D0A
    5efc:	90 91 0b 0d 	lds	r25, 0x0D0B
    5f00:	89 2b       	or	r24, r25
    5f02:	21 f4       	brne	.+8      	; 0x5f0c <fdevopen+0x54>
    5f04:	f0 93 0b 0d 	sts	0x0D0B, r31
    5f08:	e0 93 0a 0d 	sts	0x0D0A, r30
    5f0c:	20 97       	sbiw	r28, 0x00	; 0
    5f0e:	c9 f0       	breq	.+50     	; 0x5f42 <fdevopen+0x8a>
    5f10:	d1 87       	std	Z+9, r29	; 0x09
    5f12:	c0 87       	std	Z+8, r28	; 0x08
    5f14:	83 81       	ldd	r24, Z+3	; 0x03
    5f16:	82 60       	ori	r24, 0x02	; 2
    5f18:	83 83       	std	Z+3, r24	; 0x03
    5f1a:	80 91 0c 0d 	lds	r24, 0x0D0C
    5f1e:	90 91 0d 0d 	lds	r25, 0x0D0D
    5f22:	89 2b       	or	r24, r25
    5f24:	71 f4       	brne	.+28     	; 0x5f42 <fdevopen+0x8a>
    5f26:	f0 93 0d 0d 	sts	0x0D0D, r31
    5f2a:	e0 93 0c 0d 	sts	0x0D0C, r30
    5f2e:	80 91 0e 0d 	lds	r24, 0x0D0E
    5f32:	90 91 0f 0d 	lds	r25, 0x0D0F
    5f36:	89 2b       	or	r24, r25
    5f38:	21 f4       	brne	.+8      	; 0x5f42 <fdevopen+0x8a>
    5f3a:	f0 93 0f 0d 	sts	0x0D0F, r31
    5f3e:	e0 93 0e 0d 	sts	0x0D0E, r30
    5f42:	cf 01       	movw	r24, r30
    5f44:	df 91       	pop	r29
    5f46:	cf 91       	pop	r28
    5f48:	1f 91       	pop	r17
    5f4a:	0f 91       	pop	r16
    5f4c:	08 95       	ret

00005f4e <fgetc>:
    5f4e:	cf 93       	push	r28
    5f50:	df 93       	push	r29
    5f52:	ec 01       	movw	r28, r24
    5f54:	2b 81       	ldd	r18, Y+3	; 0x03
    5f56:	20 ff       	sbrs	r18, 0
    5f58:	33 c0       	rjmp	.+102    	; 0x5fc0 <fgetc+0x72>
    5f5a:	26 ff       	sbrs	r18, 6
    5f5c:	0a c0       	rjmp	.+20     	; 0x5f72 <fgetc+0x24>
    5f5e:	2f 7b       	andi	r18, 0xBF	; 191
    5f60:	2b 83       	std	Y+3, r18	; 0x03
    5f62:	8e 81       	ldd	r24, Y+6	; 0x06
    5f64:	9f 81       	ldd	r25, Y+7	; 0x07
    5f66:	01 96       	adiw	r24, 0x01	; 1
    5f68:	9f 83       	std	Y+7, r25	; 0x07
    5f6a:	8e 83       	std	Y+6, r24	; 0x06
    5f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	29 c0       	rjmp	.+82     	; 0x5fc4 <fgetc+0x76>
    5f72:	22 ff       	sbrs	r18, 2
    5f74:	0f c0       	rjmp	.+30     	; 0x5f94 <fgetc+0x46>
    5f76:	e8 81       	ld	r30, Y
    5f78:	f9 81       	ldd	r31, Y+1	; 0x01
    5f7a:	80 81       	ld	r24, Z
    5f7c:	99 27       	eor	r25, r25
    5f7e:	87 fd       	sbrc	r24, 7
    5f80:	90 95       	com	r25
    5f82:	00 97       	sbiw	r24, 0x00	; 0
    5f84:	19 f4       	brne	.+6      	; 0x5f8c <fgetc+0x3e>
    5f86:	20 62       	ori	r18, 0x20	; 32
    5f88:	2b 83       	std	Y+3, r18	; 0x03
    5f8a:	1a c0       	rjmp	.+52     	; 0x5fc0 <fgetc+0x72>
    5f8c:	31 96       	adiw	r30, 0x01	; 1
    5f8e:	f9 83       	std	Y+1, r31	; 0x01
    5f90:	e8 83       	st	Y, r30
    5f92:	0e c0       	rjmp	.+28     	; 0x5fb0 <fgetc+0x62>
    5f94:	ea 85       	ldd	r30, Y+10	; 0x0a
    5f96:	fb 85       	ldd	r31, Y+11	; 0x0b
    5f98:	09 95       	icall
    5f9a:	97 ff       	sbrs	r25, 7
    5f9c:	09 c0       	rjmp	.+18     	; 0x5fb0 <fgetc+0x62>
    5f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    5fa0:	01 96       	adiw	r24, 0x01	; 1
    5fa2:	11 f0       	breq	.+4      	; 0x5fa8 <fgetc+0x5a>
    5fa4:	80 e2       	ldi	r24, 0x20	; 32
    5fa6:	01 c0       	rjmp	.+2      	; 0x5faa <fgetc+0x5c>
    5fa8:	80 e1       	ldi	r24, 0x10	; 16
    5faa:	82 2b       	or	r24, r18
    5fac:	8b 83       	std	Y+3, r24	; 0x03
    5fae:	08 c0       	rjmp	.+16     	; 0x5fc0 <fgetc+0x72>
    5fb0:	2e 81       	ldd	r18, Y+6	; 0x06
    5fb2:	3f 81       	ldd	r19, Y+7	; 0x07
    5fb4:	2f 5f       	subi	r18, 0xFF	; 255
    5fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fb8:	3f 83       	std	Y+7, r19	; 0x07
    5fba:	2e 83       	std	Y+6, r18	; 0x06
    5fbc:	99 27       	eor	r25, r25
    5fbe:	02 c0       	rjmp	.+4      	; 0x5fc4 <fgetc+0x76>
    5fc0:	8f ef       	ldi	r24, 0xFF	; 255
    5fc2:	9f ef       	ldi	r25, 0xFF	; 255
    5fc4:	df 91       	pop	r29
    5fc6:	cf 91       	pop	r28
    5fc8:	08 95       	ret

00005fca <fputc>:
    5fca:	0f 93       	push	r16
    5fcc:	1f 93       	push	r17
    5fce:	cf 93       	push	r28
    5fd0:	df 93       	push	r29
    5fd2:	fb 01       	movw	r30, r22
    5fd4:	23 81       	ldd	r18, Z+3	; 0x03
    5fd6:	21 fd       	sbrc	r18, 1
    5fd8:	03 c0       	rjmp	.+6      	; 0x5fe0 <fputc+0x16>
    5fda:	8f ef       	ldi	r24, 0xFF	; 255
    5fdc:	9f ef       	ldi	r25, 0xFF	; 255
    5fde:	28 c0       	rjmp	.+80     	; 0x6030 <fputc+0x66>
    5fe0:	22 ff       	sbrs	r18, 2
    5fe2:	16 c0       	rjmp	.+44     	; 0x6010 <fputc+0x46>
    5fe4:	46 81       	ldd	r20, Z+6	; 0x06
    5fe6:	57 81       	ldd	r21, Z+7	; 0x07
    5fe8:	24 81       	ldd	r18, Z+4	; 0x04
    5fea:	35 81       	ldd	r19, Z+5	; 0x05
    5fec:	42 17       	cp	r20, r18
    5fee:	53 07       	cpc	r21, r19
    5ff0:	44 f4       	brge	.+16     	; 0x6002 <fputc+0x38>
    5ff2:	a0 81       	ld	r26, Z
    5ff4:	b1 81       	ldd	r27, Z+1	; 0x01
    5ff6:	9d 01       	movw	r18, r26
    5ff8:	2f 5f       	subi	r18, 0xFF	; 255
    5ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    5ffc:	31 83       	std	Z+1, r19	; 0x01
    5ffe:	20 83       	st	Z, r18
    6000:	8c 93       	st	X, r24
    6002:	26 81       	ldd	r18, Z+6	; 0x06
    6004:	37 81       	ldd	r19, Z+7	; 0x07
    6006:	2f 5f       	subi	r18, 0xFF	; 255
    6008:	3f 4f       	sbci	r19, 0xFF	; 255
    600a:	37 83       	std	Z+7, r19	; 0x07
    600c:	26 83       	std	Z+6, r18	; 0x06
    600e:	10 c0       	rjmp	.+32     	; 0x6030 <fputc+0x66>
    6010:	eb 01       	movw	r28, r22
    6012:	09 2f       	mov	r16, r25
    6014:	18 2f       	mov	r17, r24
    6016:	00 84       	ldd	r0, Z+8	; 0x08
    6018:	f1 85       	ldd	r31, Z+9	; 0x09
    601a:	e0 2d       	mov	r30, r0
    601c:	09 95       	icall
    601e:	89 2b       	or	r24, r25
    6020:	e1 f6       	brne	.-72     	; 0x5fda <fputc+0x10>
    6022:	8e 81       	ldd	r24, Y+6	; 0x06
    6024:	9f 81       	ldd	r25, Y+7	; 0x07
    6026:	01 96       	adiw	r24, 0x01	; 1
    6028:	9f 83       	std	Y+7, r25	; 0x07
    602a:	8e 83       	std	Y+6, r24	; 0x06
    602c:	81 2f       	mov	r24, r17
    602e:	90 2f       	mov	r25, r16
    6030:	df 91       	pop	r29
    6032:	cf 91       	pop	r28
    6034:	1f 91       	pop	r17
    6036:	0f 91       	pop	r16
    6038:	08 95       	ret

0000603a <printf>:
    603a:	cf 93       	push	r28
    603c:	df 93       	push	r29
    603e:	cd b7       	in	r28, 0x3d	; 61
    6040:	de b7       	in	r29, 0x3e	; 62
    6042:	ae 01       	movw	r20, r28
    6044:	4b 5f       	subi	r20, 0xFB	; 251
    6046:	5f 4f       	sbci	r21, 0xFF	; 255
    6048:	fa 01       	movw	r30, r20
    604a:	61 91       	ld	r22, Z+
    604c:	71 91       	ld	r23, Z+
    604e:	af 01       	movw	r20, r30
    6050:	80 91 0c 0d 	lds	r24, 0x0D0C
    6054:	90 91 0d 0d 	lds	r25, 0x0D0D
    6058:	0e 94 99 2c 	call	0x5932	; 0x5932 <vfprintf>
    605c:	df 91       	pop	r29
    605e:	cf 91       	pop	r28
    6060:	08 95       	ret

00006062 <putchar>:
    6062:	60 91 0c 0d 	lds	r22, 0x0D0C
    6066:	70 91 0d 0d 	lds	r23, 0x0D0D
    606a:	0c 94 e5 2f 	jmp	0x5fca	; 0x5fca <fputc>

0000606e <puts>:
    606e:	0f 93       	push	r16
    6070:	1f 93       	push	r17
    6072:	cf 93       	push	r28
    6074:	df 93       	push	r29
    6076:	e0 91 0c 0d 	lds	r30, 0x0D0C
    607a:	f0 91 0d 0d 	lds	r31, 0x0D0D
    607e:	23 81       	ldd	r18, Z+3	; 0x03
    6080:	21 ff       	sbrs	r18, 1
    6082:	1b c0       	rjmp	.+54     	; 0x60ba <puts+0x4c>
    6084:	8c 01       	movw	r16, r24
    6086:	d0 e0       	ldi	r29, 0x00	; 0
    6088:	c0 e0       	ldi	r28, 0x00	; 0
    608a:	f8 01       	movw	r30, r16
    608c:	81 91       	ld	r24, Z+
    608e:	8f 01       	movw	r16, r30
    6090:	60 91 0c 0d 	lds	r22, 0x0D0C
    6094:	70 91 0d 0d 	lds	r23, 0x0D0D
    6098:	db 01       	movw	r26, r22
    609a:	18 96       	adiw	r26, 0x08	; 8
    609c:	ed 91       	ld	r30, X+
    609e:	fc 91       	ld	r31, X
    60a0:	19 97       	sbiw	r26, 0x09	; 9
    60a2:	88 23       	and	r24, r24
    60a4:	31 f0       	breq	.+12     	; 0x60b2 <puts+0x44>
    60a6:	09 95       	icall
    60a8:	89 2b       	or	r24, r25
    60aa:	79 f3       	breq	.-34     	; 0x608a <puts+0x1c>
    60ac:	df ef       	ldi	r29, 0xFF	; 255
    60ae:	cf ef       	ldi	r28, 0xFF	; 255
    60b0:	ec cf       	rjmp	.-40     	; 0x608a <puts+0x1c>
    60b2:	8a e0       	ldi	r24, 0x0A	; 10
    60b4:	09 95       	icall
    60b6:	89 2b       	or	r24, r25
    60b8:	19 f0       	breq	.+6      	; 0x60c0 <puts+0x52>
    60ba:	8f ef       	ldi	r24, 0xFF	; 255
    60bc:	9f ef       	ldi	r25, 0xFF	; 255
    60be:	02 c0       	rjmp	.+4      	; 0x60c4 <puts+0x56>
    60c0:	8d 2f       	mov	r24, r29
    60c2:	9c 2f       	mov	r25, r28
    60c4:	df 91       	pop	r29
    60c6:	cf 91       	pop	r28
    60c8:	1f 91       	pop	r17
    60ca:	0f 91       	pop	r16
    60cc:	08 95       	ret

000060ce <sprintf>:
    60ce:	0f 93       	push	r16
    60d0:	1f 93       	push	r17
    60d2:	cf 93       	push	r28
    60d4:	df 93       	push	r29
    60d6:	cd b7       	in	r28, 0x3d	; 61
    60d8:	de b7       	in	r29, 0x3e	; 62
    60da:	2e 97       	sbiw	r28, 0x0e	; 14
    60dc:	0f b6       	in	r0, 0x3f	; 63
    60de:	f8 94       	cli
    60e0:	de bf       	out	0x3e, r29	; 62
    60e2:	0f be       	out	0x3f, r0	; 63
    60e4:	cd bf       	out	0x3d, r28	; 61
    60e6:	0d 89       	ldd	r16, Y+21	; 0x15
    60e8:	1e 89       	ldd	r17, Y+22	; 0x16
    60ea:	86 e0       	ldi	r24, 0x06	; 6
    60ec:	8c 83       	std	Y+4, r24	; 0x04
    60ee:	1a 83       	std	Y+2, r17	; 0x02
    60f0:	09 83       	std	Y+1, r16	; 0x01
    60f2:	8f ef       	ldi	r24, 0xFF	; 255
    60f4:	9f e7       	ldi	r25, 0x7F	; 127
    60f6:	9e 83       	std	Y+6, r25	; 0x06
    60f8:	8d 83       	std	Y+5, r24	; 0x05
    60fa:	ae 01       	movw	r20, r28
    60fc:	47 5e       	subi	r20, 0xE7	; 231
    60fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6100:	6f 89       	ldd	r22, Y+23	; 0x17
    6102:	78 8d       	ldd	r23, Y+24	; 0x18
    6104:	ce 01       	movw	r24, r28
    6106:	01 96       	adiw	r24, 0x01	; 1
    6108:	0e 94 99 2c 	call	0x5932	; 0x5932 <vfprintf>
    610c:	2f 81       	ldd	r18, Y+7	; 0x07
    610e:	38 85       	ldd	r19, Y+8	; 0x08
    6110:	f8 01       	movw	r30, r16
    6112:	e2 0f       	add	r30, r18
    6114:	f3 1f       	adc	r31, r19
    6116:	10 82       	st	Z, r1
    6118:	2e 96       	adiw	r28, 0x0e	; 14
    611a:	0f b6       	in	r0, 0x3f	; 63
    611c:	f8 94       	cli
    611e:	de bf       	out	0x3e, r29	; 62
    6120:	0f be       	out	0x3f, r0	; 63
    6122:	cd bf       	out	0x3d, r28	; 61
    6124:	df 91       	pop	r29
    6126:	cf 91       	pop	r28
    6128:	1f 91       	pop	r17
    612a:	0f 91       	pop	r16
    612c:	08 95       	ret

0000612e <__ultoa_invert>:
    612e:	fa 01       	movw	r30, r20
    6130:	aa 27       	eor	r26, r26
    6132:	28 30       	cpi	r18, 0x08	; 8
    6134:	51 f1       	breq	.+84     	; 0x618a <__ultoa_invert+0x5c>
    6136:	20 31       	cpi	r18, 0x10	; 16
    6138:	81 f1       	breq	.+96     	; 0x619a <__ultoa_invert+0x6c>
    613a:	e8 94       	clt
    613c:	6f 93       	push	r22
    613e:	6e 7f       	andi	r22, 0xFE	; 254
    6140:	6e 5f       	subi	r22, 0xFE	; 254
    6142:	7f 4f       	sbci	r23, 0xFF	; 255
    6144:	8f 4f       	sbci	r24, 0xFF	; 255
    6146:	9f 4f       	sbci	r25, 0xFF	; 255
    6148:	af 4f       	sbci	r26, 0xFF	; 255
    614a:	b1 e0       	ldi	r27, 0x01	; 1
    614c:	3e d0       	rcall	.+124    	; 0x61ca <__ultoa_invert+0x9c>
    614e:	b4 e0       	ldi	r27, 0x04	; 4
    6150:	3c d0       	rcall	.+120    	; 0x61ca <__ultoa_invert+0x9c>
    6152:	67 0f       	add	r22, r23
    6154:	78 1f       	adc	r23, r24
    6156:	89 1f       	adc	r24, r25
    6158:	9a 1f       	adc	r25, r26
    615a:	a1 1d       	adc	r26, r1
    615c:	68 0f       	add	r22, r24
    615e:	79 1f       	adc	r23, r25
    6160:	8a 1f       	adc	r24, r26
    6162:	91 1d       	adc	r25, r1
    6164:	a1 1d       	adc	r26, r1
    6166:	6a 0f       	add	r22, r26
    6168:	71 1d       	adc	r23, r1
    616a:	81 1d       	adc	r24, r1
    616c:	91 1d       	adc	r25, r1
    616e:	a1 1d       	adc	r26, r1
    6170:	20 d0       	rcall	.+64     	; 0x61b2 <__ultoa_invert+0x84>
    6172:	09 f4       	brne	.+2      	; 0x6176 <__ultoa_invert+0x48>
    6174:	68 94       	set
    6176:	3f 91       	pop	r19
    6178:	2a e0       	ldi	r18, 0x0A	; 10
    617a:	26 9f       	mul	r18, r22
    617c:	11 24       	eor	r1, r1
    617e:	30 19       	sub	r19, r0
    6180:	30 5d       	subi	r19, 0xD0	; 208
    6182:	31 93       	st	Z+, r19
    6184:	de f6       	brtc	.-74     	; 0x613c <__ultoa_invert+0xe>
    6186:	cf 01       	movw	r24, r30
    6188:	08 95       	ret
    618a:	46 2f       	mov	r20, r22
    618c:	47 70       	andi	r20, 0x07	; 7
    618e:	40 5d       	subi	r20, 0xD0	; 208
    6190:	41 93       	st	Z+, r20
    6192:	b3 e0       	ldi	r27, 0x03	; 3
    6194:	0f d0       	rcall	.+30     	; 0x61b4 <__ultoa_invert+0x86>
    6196:	c9 f7       	brne	.-14     	; 0x618a <__ultoa_invert+0x5c>
    6198:	f6 cf       	rjmp	.-20     	; 0x6186 <__ultoa_invert+0x58>
    619a:	46 2f       	mov	r20, r22
    619c:	4f 70       	andi	r20, 0x0F	; 15
    619e:	40 5d       	subi	r20, 0xD0	; 208
    61a0:	4a 33       	cpi	r20, 0x3A	; 58
    61a2:	18 f0       	brcs	.+6      	; 0x61aa <__ultoa_invert+0x7c>
    61a4:	49 5d       	subi	r20, 0xD9	; 217
    61a6:	31 fd       	sbrc	r19, 1
    61a8:	40 52       	subi	r20, 0x20	; 32
    61aa:	41 93       	st	Z+, r20
    61ac:	02 d0       	rcall	.+4      	; 0x61b2 <__ultoa_invert+0x84>
    61ae:	a9 f7       	brne	.-22     	; 0x619a <__ultoa_invert+0x6c>
    61b0:	ea cf       	rjmp	.-44     	; 0x6186 <__ultoa_invert+0x58>
    61b2:	b4 e0       	ldi	r27, 0x04	; 4
    61b4:	a6 95       	lsr	r26
    61b6:	97 95       	ror	r25
    61b8:	87 95       	ror	r24
    61ba:	77 95       	ror	r23
    61bc:	67 95       	ror	r22
    61be:	ba 95       	dec	r27
    61c0:	c9 f7       	brne	.-14     	; 0x61b4 <__ultoa_invert+0x86>
    61c2:	00 97       	sbiw	r24, 0x00	; 0
    61c4:	61 05       	cpc	r22, r1
    61c6:	71 05       	cpc	r23, r1
    61c8:	08 95       	ret
    61ca:	9b 01       	movw	r18, r22
    61cc:	ac 01       	movw	r20, r24
    61ce:	0a 2e       	mov	r0, r26
    61d0:	06 94       	lsr	r0
    61d2:	57 95       	ror	r21
    61d4:	47 95       	ror	r20
    61d6:	37 95       	ror	r19
    61d8:	27 95       	ror	r18
    61da:	ba 95       	dec	r27
    61dc:	c9 f7       	brne	.-14     	; 0x61d0 <__ultoa_invert+0xa2>
    61de:	62 0f       	add	r22, r18
    61e0:	73 1f       	adc	r23, r19
    61e2:	84 1f       	adc	r24, r20
    61e4:	95 1f       	adc	r25, r21
    61e6:	a0 1d       	adc	r26, r0
    61e8:	08 95       	ret

000061ea <__eerd_byte_m128rfa1>:
    61ea:	f9 99       	sbic	0x1f, 1	; 31
    61ec:	fe cf       	rjmp	.-4      	; 0x61ea <__eerd_byte_m128rfa1>
    61ee:	92 bd       	out	0x22, r25	; 34
    61f0:	81 bd       	out	0x21, r24	; 33
    61f2:	f8 9a       	sbi	0x1f, 0	; 31
    61f4:	99 27       	eor	r25, r25
    61f6:	80 b5       	in	r24, 0x20	; 32
    61f8:	08 95       	ret

000061fa <__eewr_byte_m128rfa1>:
    61fa:	26 2f       	mov	r18, r22

000061fc <__eewr_r18_m128rfa1>:
    61fc:	f9 99       	sbic	0x1f, 1	; 31
    61fe:	fe cf       	rjmp	.-4      	; 0x61fc <__eewr_r18_m128rfa1>
    6200:	1f ba       	out	0x1f, r1	; 31
    6202:	92 bd       	out	0x22, r25	; 34
    6204:	81 bd       	out	0x21, r24	; 33
    6206:	20 bd       	out	0x20, r18	; 32
    6208:	0f b6       	in	r0, 0x3f	; 63
    620a:	f8 94       	cli
    620c:	fa 9a       	sbi	0x1f, 2	; 31
    620e:	f9 9a       	sbi	0x1f, 1	; 31
    6210:	0f be       	out	0x3f, r0	; 63
    6212:	01 96       	adiw	r24, 0x01	; 1
    6214:	08 95       	ret

00006216 <calloc>:
    6216:	0f 93       	push	r16
    6218:	1f 93       	push	r17
    621a:	cf 93       	push	r28
    621c:	df 93       	push	r29
    621e:	86 9f       	mul	r24, r22
    6220:	80 01       	movw	r16, r0
    6222:	87 9f       	mul	r24, r23
    6224:	10 0d       	add	r17, r0
    6226:	96 9f       	mul	r25, r22
    6228:	10 0d       	add	r17, r0
    622a:	11 24       	eor	r1, r1
    622c:	c8 01       	movw	r24, r16
    622e:	0e 94 27 31 	call	0x624e	; 0x624e <malloc>
    6232:	ec 01       	movw	r28, r24
    6234:	00 97       	sbiw	r24, 0x00	; 0
    6236:	29 f0       	breq	.+10     	; 0x6242 <calloc+0x2c>
    6238:	a8 01       	movw	r20, r16
    623a:	60 e0       	ldi	r22, 0x00	; 0
    623c:	70 e0       	ldi	r23, 0x00	; 0
    623e:	0e 94 54 32 	call	0x64a8	; 0x64a8 <memset>
    6242:	ce 01       	movw	r24, r28
    6244:	df 91       	pop	r29
    6246:	cf 91       	pop	r28
    6248:	1f 91       	pop	r17
    624a:	0f 91       	pop	r16
    624c:	08 95       	ret

0000624e <malloc>:
    624e:	cf 93       	push	r28
    6250:	df 93       	push	r29
    6252:	82 30       	cpi	r24, 0x02	; 2
    6254:	91 05       	cpc	r25, r1
    6256:	10 f4       	brcc	.+4      	; 0x625c <malloc+0xe>
    6258:	82 e0       	ldi	r24, 0x02	; 2
    625a:	90 e0       	ldi	r25, 0x00	; 0
    625c:	e0 91 12 0d 	lds	r30, 0x0D12
    6260:	f0 91 13 0d 	lds	r31, 0x0D13
    6264:	20 e0       	ldi	r18, 0x00	; 0
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	c0 e0       	ldi	r28, 0x00	; 0
    626a:	d0 e0       	ldi	r29, 0x00	; 0
    626c:	30 97       	sbiw	r30, 0x00	; 0
    626e:	11 f1       	breq	.+68     	; 0x62b4 <malloc+0x66>
    6270:	40 81       	ld	r20, Z
    6272:	51 81       	ldd	r21, Z+1	; 0x01
    6274:	48 17       	cp	r20, r24
    6276:	59 07       	cpc	r21, r25
    6278:	c0 f0       	brcs	.+48     	; 0x62aa <malloc+0x5c>
    627a:	48 17       	cp	r20, r24
    627c:	59 07       	cpc	r21, r25
    627e:	61 f4       	brne	.+24     	; 0x6298 <malloc+0x4a>
    6280:	82 81       	ldd	r24, Z+2	; 0x02
    6282:	93 81       	ldd	r25, Z+3	; 0x03
    6284:	20 97       	sbiw	r28, 0x00	; 0
    6286:	19 f0       	breq	.+6      	; 0x628e <malloc+0x40>
    6288:	9b 83       	std	Y+3, r25	; 0x03
    628a:	8a 83       	std	Y+2, r24	; 0x02
    628c:	2b c0       	rjmp	.+86     	; 0x62e4 <malloc+0x96>
    628e:	90 93 13 0d 	sts	0x0D13, r25
    6292:	80 93 12 0d 	sts	0x0D12, r24
    6296:	26 c0       	rjmp	.+76     	; 0x62e4 <malloc+0x96>
    6298:	21 15       	cp	r18, r1
    629a:	31 05       	cpc	r19, r1
    629c:	19 f0       	breq	.+6      	; 0x62a4 <malloc+0x56>
    629e:	42 17       	cp	r20, r18
    62a0:	53 07       	cpc	r21, r19
    62a2:	18 f4       	brcc	.+6      	; 0x62aa <malloc+0x5c>
    62a4:	9a 01       	movw	r18, r20
    62a6:	be 01       	movw	r22, r28
    62a8:	df 01       	movw	r26, r30
    62aa:	ef 01       	movw	r28, r30
    62ac:	02 80       	ldd	r0, Z+2	; 0x02
    62ae:	f3 81       	ldd	r31, Z+3	; 0x03
    62b0:	e0 2d       	mov	r30, r0
    62b2:	dc cf       	rjmp	.-72     	; 0x626c <malloc+0x1e>
    62b4:	21 15       	cp	r18, r1
    62b6:	31 05       	cpc	r19, r1
    62b8:	09 f1       	breq	.+66     	; 0x62fc <malloc+0xae>
    62ba:	28 1b       	sub	r18, r24
    62bc:	39 0b       	sbc	r19, r25
    62be:	24 30       	cpi	r18, 0x04	; 4
    62c0:	31 05       	cpc	r19, r1
    62c2:	90 f4       	brcc	.+36     	; 0x62e8 <malloc+0x9a>
    62c4:	12 96       	adiw	r26, 0x02	; 2
    62c6:	8d 91       	ld	r24, X+
    62c8:	9c 91       	ld	r25, X
    62ca:	13 97       	sbiw	r26, 0x03	; 3
    62cc:	61 15       	cp	r22, r1
    62ce:	71 05       	cpc	r23, r1
    62d0:	21 f0       	breq	.+8      	; 0x62da <malloc+0x8c>
    62d2:	fb 01       	movw	r30, r22
    62d4:	93 83       	std	Z+3, r25	; 0x03
    62d6:	82 83       	std	Z+2, r24	; 0x02
    62d8:	04 c0       	rjmp	.+8      	; 0x62e2 <malloc+0x94>
    62da:	90 93 13 0d 	sts	0x0D13, r25
    62de:	80 93 12 0d 	sts	0x0D12, r24
    62e2:	fd 01       	movw	r30, r26
    62e4:	32 96       	adiw	r30, 0x02	; 2
    62e6:	44 c0       	rjmp	.+136    	; 0x6370 <malloc+0x122>
    62e8:	fd 01       	movw	r30, r26
    62ea:	e2 0f       	add	r30, r18
    62ec:	f3 1f       	adc	r31, r19
    62ee:	81 93       	st	Z+, r24
    62f0:	91 93       	st	Z+, r25
    62f2:	22 50       	subi	r18, 0x02	; 2
    62f4:	31 09       	sbc	r19, r1
    62f6:	2d 93       	st	X+, r18
    62f8:	3c 93       	st	X, r19
    62fa:	3a c0       	rjmp	.+116    	; 0x6370 <malloc+0x122>
    62fc:	20 91 10 0d 	lds	r18, 0x0D10
    6300:	30 91 11 0d 	lds	r19, 0x0D11
    6304:	23 2b       	or	r18, r19
    6306:	41 f4       	brne	.+16     	; 0x6318 <malloc+0xca>
    6308:	20 91 06 02 	lds	r18, 0x0206
    630c:	30 91 07 02 	lds	r19, 0x0207
    6310:	30 93 11 0d 	sts	0x0D11, r19
    6314:	20 93 10 0d 	sts	0x0D10, r18
    6318:	20 91 04 02 	lds	r18, 0x0204
    631c:	30 91 05 02 	lds	r19, 0x0205
    6320:	21 15       	cp	r18, r1
    6322:	31 05       	cpc	r19, r1
    6324:	41 f4       	brne	.+16     	; 0x6336 <malloc+0xe8>
    6326:	2d b7       	in	r18, 0x3d	; 61
    6328:	3e b7       	in	r19, 0x3e	; 62
    632a:	40 91 08 02 	lds	r20, 0x0208
    632e:	50 91 09 02 	lds	r21, 0x0209
    6332:	24 1b       	sub	r18, r20
    6334:	35 0b       	sbc	r19, r21
    6336:	e0 91 10 0d 	lds	r30, 0x0D10
    633a:	f0 91 11 0d 	lds	r31, 0x0D11
    633e:	e2 17       	cp	r30, r18
    6340:	f3 07       	cpc	r31, r19
    6342:	a0 f4       	brcc	.+40     	; 0x636c <malloc+0x11e>
    6344:	2e 1b       	sub	r18, r30
    6346:	3f 0b       	sbc	r19, r31
    6348:	28 17       	cp	r18, r24
    634a:	39 07       	cpc	r19, r25
    634c:	78 f0       	brcs	.+30     	; 0x636c <malloc+0x11e>
    634e:	ac 01       	movw	r20, r24
    6350:	4e 5f       	subi	r20, 0xFE	; 254
    6352:	5f 4f       	sbci	r21, 0xFF	; 255
    6354:	24 17       	cp	r18, r20
    6356:	35 07       	cpc	r19, r21
    6358:	48 f0       	brcs	.+18     	; 0x636c <malloc+0x11e>
    635a:	4e 0f       	add	r20, r30
    635c:	5f 1f       	adc	r21, r31
    635e:	50 93 11 0d 	sts	0x0D11, r21
    6362:	40 93 10 0d 	sts	0x0D10, r20
    6366:	81 93       	st	Z+, r24
    6368:	91 93       	st	Z+, r25
    636a:	02 c0       	rjmp	.+4      	; 0x6370 <malloc+0x122>
    636c:	e0 e0       	ldi	r30, 0x00	; 0
    636e:	f0 e0       	ldi	r31, 0x00	; 0
    6370:	cf 01       	movw	r24, r30
    6372:	df 91       	pop	r29
    6374:	cf 91       	pop	r28
    6376:	08 95       	ret

00006378 <free>:
    6378:	0f 93       	push	r16
    637a:	1f 93       	push	r17
    637c:	cf 93       	push	r28
    637e:	df 93       	push	r29
    6380:	00 97       	sbiw	r24, 0x00	; 0
    6382:	09 f4       	brne	.+2      	; 0x6386 <free+0xe>
    6384:	8c c0       	rjmp	.+280    	; 0x649e <free+0x126>
    6386:	fc 01       	movw	r30, r24
    6388:	32 97       	sbiw	r30, 0x02	; 2
    638a:	13 82       	std	Z+3, r1	; 0x03
    638c:	12 82       	std	Z+2, r1	; 0x02
    638e:	00 91 12 0d 	lds	r16, 0x0D12
    6392:	10 91 13 0d 	lds	r17, 0x0D13
    6396:	01 15       	cp	r16, r1
    6398:	11 05       	cpc	r17, r1
    639a:	81 f4       	brne	.+32     	; 0x63bc <free+0x44>
    639c:	20 81       	ld	r18, Z
    639e:	31 81       	ldd	r19, Z+1	; 0x01
    63a0:	82 0f       	add	r24, r18
    63a2:	93 1f       	adc	r25, r19
    63a4:	20 91 10 0d 	lds	r18, 0x0D10
    63a8:	30 91 11 0d 	lds	r19, 0x0D11
    63ac:	28 17       	cp	r18, r24
    63ae:	39 07       	cpc	r19, r25
    63b0:	79 f5       	brne	.+94     	; 0x6410 <free+0x98>
    63b2:	f0 93 11 0d 	sts	0x0D11, r31
    63b6:	e0 93 10 0d 	sts	0x0D10, r30
    63ba:	71 c0       	rjmp	.+226    	; 0x649e <free+0x126>
    63bc:	d8 01       	movw	r26, r16
    63be:	40 e0       	ldi	r20, 0x00	; 0
    63c0:	50 e0       	ldi	r21, 0x00	; 0
    63c2:	ae 17       	cp	r26, r30
    63c4:	bf 07       	cpc	r27, r31
    63c6:	50 f4       	brcc	.+20     	; 0x63dc <free+0x64>
    63c8:	12 96       	adiw	r26, 0x02	; 2
    63ca:	2d 91       	ld	r18, X+
    63cc:	3c 91       	ld	r19, X
    63ce:	13 97       	sbiw	r26, 0x03	; 3
    63d0:	ad 01       	movw	r20, r26
    63d2:	21 15       	cp	r18, r1
    63d4:	31 05       	cpc	r19, r1
    63d6:	09 f1       	breq	.+66     	; 0x641a <free+0xa2>
    63d8:	d9 01       	movw	r26, r18
    63da:	f3 cf       	rjmp	.-26     	; 0x63c2 <free+0x4a>
    63dc:	9d 01       	movw	r18, r26
    63de:	da 01       	movw	r26, r20
    63e0:	33 83       	std	Z+3, r19	; 0x03
    63e2:	22 83       	std	Z+2, r18	; 0x02
    63e4:	60 81       	ld	r22, Z
    63e6:	71 81       	ldd	r23, Z+1	; 0x01
    63e8:	86 0f       	add	r24, r22
    63ea:	97 1f       	adc	r25, r23
    63ec:	82 17       	cp	r24, r18
    63ee:	93 07       	cpc	r25, r19
    63f0:	69 f4       	brne	.+26     	; 0x640c <free+0x94>
    63f2:	ec 01       	movw	r28, r24
    63f4:	28 81       	ld	r18, Y
    63f6:	39 81       	ldd	r19, Y+1	; 0x01
    63f8:	26 0f       	add	r18, r22
    63fa:	37 1f       	adc	r19, r23
    63fc:	2e 5f       	subi	r18, 0xFE	; 254
    63fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6400:	31 83       	std	Z+1, r19	; 0x01
    6402:	20 83       	st	Z, r18
    6404:	8a 81       	ldd	r24, Y+2	; 0x02
    6406:	9b 81       	ldd	r25, Y+3	; 0x03
    6408:	93 83       	std	Z+3, r25	; 0x03
    640a:	82 83       	std	Z+2, r24	; 0x02
    640c:	45 2b       	or	r20, r21
    640e:	29 f4       	brne	.+10     	; 0x641a <free+0xa2>
    6410:	f0 93 13 0d 	sts	0x0D13, r31
    6414:	e0 93 12 0d 	sts	0x0D12, r30
    6418:	42 c0       	rjmp	.+132    	; 0x649e <free+0x126>
    641a:	13 96       	adiw	r26, 0x03	; 3
    641c:	fc 93       	st	X, r31
    641e:	ee 93       	st	-X, r30
    6420:	12 97       	sbiw	r26, 0x02	; 2
    6422:	ed 01       	movw	r28, r26
    6424:	49 91       	ld	r20, Y+
    6426:	59 91       	ld	r21, Y+
    6428:	9e 01       	movw	r18, r28
    642a:	24 0f       	add	r18, r20
    642c:	35 1f       	adc	r19, r21
    642e:	e2 17       	cp	r30, r18
    6430:	f3 07       	cpc	r31, r19
    6432:	71 f4       	brne	.+28     	; 0x6450 <free+0xd8>
    6434:	80 81       	ld	r24, Z
    6436:	91 81       	ldd	r25, Z+1	; 0x01
    6438:	84 0f       	add	r24, r20
    643a:	95 1f       	adc	r25, r21
    643c:	02 96       	adiw	r24, 0x02	; 2
    643e:	11 96       	adiw	r26, 0x01	; 1
    6440:	9c 93       	st	X, r25
    6442:	8e 93       	st	-X, r24
    6444:	82 81       	ldd	r24, Z+2	; 0x02
    6446:	93 81       	ldd	r25, Z+3	; 0x03
    6448:	13 96       	adiw	r26, 0x03	; 3
    644a:	9c 93       	st	X, r25
    644c:	8e 93       	st	-X, r24
    644e:	12 97       	sbiw	r26, 0x02	; 2
    6450:	e0 e0       	ldi	r30, 0x00	; 0
    6452:	f0 e0       	ldi	r31, 0x00	; 0
    6454:	d8 01       	movw	r26, r16
    6456:	12 96       	adiw	r26, 0x02	; 2
    6458:	8d 91       	ld	r24, X+
    645a:	9c 91       	ld	r25, X
    645c:	13 97       	sbiw	r26, 0x03	; 3
    645e:	00 97       	sbiw	r24, 0x00	; 0
    6460:	19 f0       	breq	.+6      	; 0x6468 <free+0xf0>
    6462:	f8 01       	movw	r30, r16
    6464:	8c 01       	movw	r16, r24
    6466:	f6 cf       	rjmp	.-20     	; 0x6454 <free+0xdc>
    6468:	8d 91       	ld	r24, X+
    646a:	9c 91       	ld	r25, X
    646c:	98 01       	movw	r18, r16
    646e:	2e 5f       	subi	r18, 0xFE	; 254
    6470:	3f 4f       	sbci	r19, 0xFF	; 255
    6472:	82 0f       	add	r24, r18
    6474:	93 1f       	adc	r25, r19
    6476:	20 91 10 0d 	lds	r18, 0x0D10
    647a:	30 91 11 0d 	lds	r19, 0x0D11
    647e:	28 17       	cp	r18, r24
    6480:	39 07       	cpc	r19, r25
    6482:	69 f4       	brne	.+26     	; 0x649e <free+0x126>
    6484:	30 97       	sbiw	r30, 0x00	; 0
    6486:	29 f4       	brne	.+10     	; 0x6492 <free+0x11a>
    6488:	10 92 13 0d 	sts	0x0D13, r1
    648c:	10 92 12 0d 	sts	0x0D12, r1
    6490:	02 c0       	rjmp	.+4      	; 0x6496 <free+0x11e>
    6492:	13 82       	std	Z+3, r1	; 0x03
    6494:	12 82       	std	Z+2, r1	; 0x02
    6496:	10 93 11 0d 	sts	0x0D11, r17
    649a:	00 93 10 0d 	sts	0x0D10, r16
    649e:	df 91       	pop	r29
    64a0:	cf 91       	pop	r28
    64a2:	1f 91       	pop	r17
    64a4:	0f 91       	pop	r16
    64a6:	08 95       	ret

000064a8 <memset>:
    64a8:	dc 01       	movw	r26, r24
    64aa:	01 c0       	rjmp	.+2      	; 0x64ae <memset+0x6>
    64ac:	6d 93       	st	X+, r22
    64ae:	41 50       	subi	r20, 0x01	; 1
    64b0:	50 40       	sbci	r21, 0x00	; 0
    64b2:	e0 f7       	brcc	.-8      	; 0x64ac <memset+0x4>
    64b4:	08 95       	ret

000064b6 <__mulshisi3>:
    64b6:	b7 ff       	sbrs	r27, 7
    64b8:	0c 94 e0 2d 	jmp	0x5bc0	; 0x5bc0 <__muluhisi3>

000064bc <__mulohisi3>:
    64bc:	0e 94 e0 2d 	call	0x5bc0	; 0x5bc0 <__muluhisi3>
    64c0:	82 1b       	sub	r24, r18
    64c2:	93 0b       	sbc	r25, r19
    64c4:	08 95       	ret

000064c6 <__divmodsi4>:
    64c6:	05 2e       	mov	r0, r21
    64c8:	97 fb       	bst	r25, 7
    64ca:	1e f4       	brtc	.+6      	; 0x64d2 <__divmodsi4+0xc>
    64cc:	00 94       	com	r0
    64ce:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__negsi2>
    64d2:	57 fd       	sbrc	r21, 7
    64d4:	07 d0       	rcall	.+14     	; 0x64e4 <__divmodsi4_neg2>
    64d6:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__udivmodsi4>
    64da:	07 fc       	sbrc	r0, 7
    64dc:	03 d0       	rcall	.+6      	; 0x64e4 <__divmodsi4_neg2>
    64de:	4e f4       	brtc	.+18     	; 0x64f2 <__divmodsi4_exit>
    64e0:	0c 94 7a 32 	jmp	0x64f4	; 0x64f4 <__negsi2>

000064e4 <__divmodsi4_neg2>:
    64e4:	50 95       	com	r21
    64e6:	40 95       	com	r20
    64e8:	30 95       	com	r19
    64ea:	21 95       	neg	r18
    64ec:	3f 4f       	sbci	r19, 0xFF	; 255
    64ee:	4f 4f       	sbci	r20, 0xFF	; 255
    64f0:	5f 4f       	sbci	r21, 0xFF	; 255

000064f2 <__divmodsi4_exit>:
    64f2:	08 95       	ret

000064f4 <__negsi2>:
    64f4:	90 95       	com	r25
    64f6:	80 95       	com	r24
    64f8:	70 95       	com	r23
    64fa:	61 95       	neg	r22
    64fc:	7f 4f       	sbci	r23, 0xFF	; 255
    64fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6500:	9f 4f       	sbci	r25, 0xFF	; 255
    6502:	08 95       	ret

00006504 <_exit>:
    6504:	f8 94       	cli

00006506 <__stop_program>:
    6506:	ff cf       	rjmp	.-2      	; 0x6506 <__stop_program>
